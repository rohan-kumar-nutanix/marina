// Code generated by protoc-gen-go. DO NOT EDIT.
// source: acropolis/acropolis_interface.proto

package acropolis

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/base"
	db_schema "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/db_schema"
	_ "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/net"
	hyperint "github.com/nutanix-core/acs-aos-go/hyperint"
	math "math"
	pithos "github.com/nutanix-core/acs-aos-go/pithos"
	stretch_params "github.com/nutanix-core/acs-aos-go/pithos/stretch_params"
	uhura "github.com/nutanix-core/acs-aos-go/uhura"
	config "github.com/nutanix-core/acs-aos-go/zeus/config"
)

import (
	"errors"
	util_net "github.com/nutanix-core/acs-aos-go/nutanix/util-go/net"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MicrosegEnablementPreChecks int32

const (
	MicrosegEnablementPreChecks_kFlowPCPEConnectivity         MicrosegEnablementPreChecks = 1
	MicrosegEnablementPreChecks_kFlowBridgeChainingConfigured MicrosegEnablementPreChecks = 2
)

var MicrosegEnablementPreChecks_name = map[int32]string{
	1: "kFlowPCPEConnectivity",
	2: "kFlowBridgeChainingConfigured",
}

var MicrosegEnablementPreChecks_value = map[string]int32{
	"kFlowPCPEConnectivity":         1,
	"kFlowBridgeChainingConfigured": 2,
}

func (x MicrosegEnablementPreChecks) Enum() *MicrosegEnablementPreChecks {
	p := new(MicrosegEnablementPreChecks)
	*p = x
	return p
}

func (x MicrosegEnablementPreChecks) String() string {
	return proto.EnumName(MicrosegEnablementPreChecks_name, int32(x))
}

func (x *MicrosegEnablementPreChecks) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MicrosegEnablementPreChecks_value, data, "MicrosegEnablementPreChecks")
	if err != nil {
		return err
	}
	*x = MicrosegEnablementPreChecks(value)
	return nil
}

func (MicrosegEnablementPreChecks) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{0}
}

type MicrosegPreCheckStatus int32

const (
	MicrosegPreCheckStatus_kPreCheckPassed       MicrosegPreCheckStatus = 1
	MicrosegPreCheckStatus_kPreCheckFailed       MicrosegPreCheckStatus = 2
	MicrosegPreCheckStatus_kPreCheckNotSupported MicrosegPreCheckStatus = 3
)

var MicrosegPreCheckStatus_name = map[int32]string{
	1: "kPreCheckPassed",
	2: "kPreCheckFailed",
	3: "kPreCheckNotSupported",
}

var MicrosegPreCheckStatus_value = map[string]int32{
	"kPreCheckPassed":       1,
	"kPreCheckFailed":       2,
	"kPreCheckNotSupported": 3,
}

func (x MicrosegPreCheckStatus) Enum() *MicrosegPreCheckStatus {
	p := new(MicrosegPreCheckStatus)
	*p = x
	return p
}

func (x MicrosegPreCheckStatus) String() string {
	return proto.EnumName(MicrosegPreCheckStatus_name, int32(x))
}

func (x *MicrosegPreCheckStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MicrosegPreCheckStatus_value, data, "MicrosegPreCheckStatus")
	if err != nil {
		return err
	}
	*x = MicrosegPreCheckStatus(value)
	return nil
}

func (MicrosegPreCheckStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{1}
}

// Operation, Update or Cleanup
type VmChangeDiskContainerUpdateArg_Operation int32

const (
	VmChangeDiskContainerUpdateArg_kUpdate  VmChangeDiskContainerUpdateArg_Operation = 1
	VmChangeDiskContainerUpdateArg_kCleanup VmChangeDiskContainerUpdateArg_Operation = 2
)

var VmChangeDiskContainerUpdateArg_Operation_name = map[int32]string{
	1: "kUpdate",
	2: "kCleanup",
}

var VmChangeDiskContainerUpdateArg_Operation_value = map[string]int32{
	"kUpdate":  1,
	"kCleanup": 2,
}

func (x VmChangeDiskContainerUpdateArg_Operation) Enum() *VmChangeDiskContainerUpdateArg_Operation {
	p := new(VmChangeDiskContainerUpdateArg_Operation)
	*p = x
	return p
}

func (x VmChangeDiskContainerUpdateArg_Operation) String() string {
	return proto.EnumName(VmChangeDiskContainerUpdateArg_Operation_name, int32(x))
}

func (x *VmChangeDiskContainerUpdateArg_Operation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VmChangeDiskContainerUpdateArg_Operation_value, data, "VmChangeDiskContainerUpdateArg_Operation")
	if err != nil {
		return err
	}
	*x = VmChangeDiskContainerUpdateArg_Operation(value)
	return nil
}

func (VmChangeDiskContainerUpdateArg_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{77, 0}
}

// Mode of operation of Flow, currently used for reservation of memory.
type MicrosegConfigSpec_MicrosegConfigMode int32

const (
	MicrosegConfigSpec_kDefault MicrosegConfigSpec_MicrosegConfigMode = 1
	MicrosegConfigSpec_kFlow    MicrosegConfigSpec_MicrosegConfigMode = 2
)

var MicrosegConfigSpec_MicrosegConfigMode_name = map[int32]string{
	1: "kDefault",
	2: "kFlow",
}

var MicrosegConfigSpec_MicrosegConfigMode_value = map[string]int32{
	"kDefault": 1,
	"kFlow":    2,
}

func (x MicrosegConfigSpec_MicrosegConfigMode) Enum() *MicrosegConfigSpec_MicrosegConfigMode {
	p := new(MicrosegConfigSpec_MicrosegConfigMode)
	*p = x
	return p
}

func (x MicrosegConfigSpec_MicrosegConfigMode) String() string {
	return proto.EnumName(MicrosegConfigSpec_MicrosegConfigMode_name, int32(x))
}

func (x *MicrosegConfigSpec_MicrosegConfigMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MicrosegConfigSpec_MicrosegConfigMode_value, data, "MicrosegConfigSpec_MicrosegConfigMode")
	if err != nil {
		return err
	}
	*x = MicrosegConfigSpec_MicrosegConfigMode(value)
	return nil
}

func (MicrosegConfigSpec_MicrosegConfigMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{118, 0}
}

// Operation
type NetworkReserveIpArg_Operation int32

const (
	NetworkReserveIpArg_kReserve   NetworkReserveIpArg_Operation = 1
	NetworkReserveIpArg_kUnreserve NetworkReserveIpArg_Operation = 2
)

var NetworkReserveIpArg_Operation_name = map[int32]string{
	1: "kReserve",
	2: "kUnreserve",
}

var NetworkReserveIpArg_Operation_value = map[string]int32{
	"kReserve":   1,
	"kUnreserve": 2,
}

func (x NetworkReserveIpArg_Operation) Enum() *NetworkReserveIpArg_Operation {
	p := new(NetworkReserveIpArg_Operation)
	*p = x
	return p
}

func (x NetworkReserveIpArg_Operation) String() string {
	return proto.EnumName(NetworkReserveIpArg_Operation_name, int32(x))
}

func (x *NetworkReserveIpArg_Operation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NetworkReserveIpArg_Operation_value, data, "NetworkReserveIpArg_Operation")
	if err != nil {
		return err
	}
	*x = NetworkReserveIpArg_Operation(value)
	return nil
}

func (NetworkReserveIpArg_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{146, 0}
}

// Indicates the action we take to evacuate VMs powered on the host.
type EnterMaintenanceModeArg_VmEvacuationOption int32

const (
	EnterMaintenanceModeArg_kPowerOff    EnterMaintenanceModeArg_VmEvacuationOption = 1
	EnterMaintenanceModeArg_kColdMigrate EnterMaintenanceModeArg_VmEvacuationOption = 2
	EnterMaintenanceModeArg_kLiveMigrate EnterMaintenanceModeArg_VmEvacuationOption = 3
)

var EnterMaintenanceModeArg_VmEvacuationOption_name = map[int32]string{
	1: "kPowerOff",
	2: "kColdMigrate",
	3: "kLiveMigrate",
}

var EnterMaintenanceModeArg_VmEvacuationOption_value = map[string]int32{
	"kPowerOff":    1,
	"kColdMigrate": 2,
	"kLiveMigrate": 3,
}

func (x EnterMaintenanceModeArg_VmEvacuationOption) Enum() *EnterMaintenanceModeArg_VmEvacuationOption {
	p := new(EnterMaintenanceModeArg_VmEvacuationOption)
	*p = x
	return p
}

func (x EnterMaintenanceModeArg_VmEvacuationOption) String() string {
	return proto.EnumName(EnterMaintenanceModeArg_VmEvacuationOption_name, int32(x))
}

func (x *EnterMaintenanceModeArg_VmEvacuationOption) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EnterMaintenanceModeArg_VmEvacuationOption_value, data, "EnterMaintenanceModeArg_VmEvacuationOption")
	if err != nil {
		return err
	}
	*x = EnterMaintenanceModeArg_VmEvacuationOption(value)
	return nil
}

func (EnterMaintenanceModeArg_VmEvacuationOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{162, 0}
}

// Operation type.
type VmAttachVgArg_Operation int32

const (
	VmAttachVgArg_kAttach       VmAttachVgArg_Operation = 1
	VmAttachVgArg_kDetach       VmAttachVgArg_Operation = 2
	VmAttachVgArg_kVolumeAdd    VmAttachVgArg_Operation = 3
	VmAttachVgArg_kVolumeRemove VmAttachVgArg_Operation = 4
)

var VmAttachVgArg_Operation_name = map[int32]string{
	1: "kAttach",
	2: "kDetach",
	3: "kVolumeAdd",
	4: "kVolumeRemove",
}

var VmAttachVgArg_Operation_value = map[string]int32{
	"kAttach":       1,
	"kDetach":       2,
	"kVolumeAdd":    3,
	"kVolumeRemove": 4,
}

func (x VmAttachVgArg_Operation) Enum() *VmAttachVgArg_Operation {
	p := new(VmAttachVgArg_Operation)
	*p = x
	return p
}

func (x VmAttachVgArg_Operation) String() string {
	return proto.EnumName(VmAttachVgArg_Operation_name, int32(x))
}

func (x *VmAttachVgArg_Operation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VmAttachVgArg_Operation_value, data, "VmAttachVgArg_Operation")
	if err != nil {
		return err
	}
	*x = VmAttachVgArg_Operation(value)
	return nil
}

func (VmAttachVgArg_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{188, 0}
}

// Attach or Detach
type VolumeGroupAttachExternalArg_Operation int32

const (
	VolumeGroupAttachExternalArg_kAttach VolumeGroupAttachExternalArg_Operation = 1
	VolumeGroupAttachExternalArg_kDetach VolumeGroupAttachExternalArg_Operation = 2
)

var VolumeGroupAttachExternalArg_Operation_name = map[int32]string{
	1: "kAttach",
	2: "kDetach",
}

var VolumeGroupAttachExternalArg_Operation_value = map[string]int32{
	"kAttach": 1,
	"kDetach": 2,
}

func (x VolumeGroupAttachExternalArg_Operation) Enum() *VolumeGroupAttachExternalArg_Operation {
	p := new(VolumeGroupAttachExternalArg_Operation)
	*p = x
	return p
}

func (x VolumeGroupAttachExternalArg_Operation) String() string {
	return proto.EnumName(VolumeGroupAttachExternalArg_Operation_name, int32(x))
}

func (x *VolumeGroupAttachExternalArg_Operation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VolumeGroupAttachExternalArg_Operation_value, data, "VolumeGroupAttachExternalArg_Operation")
	if err != nil {
		return err
	}
	*x = VolumeGroupAttachExternalArg_Operation(value)
	return nil
}

func (VolumeGroupAttachExternalArg_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{225, 0}
}

// Attach or Detach
type VolumeGroupAttachIscsiClientArg_Operation int32

const (
	VolumeGroupAttachIscsiClientArg_kAttach VolumeGroupAttachIscsiClientArg_Operation = 1
	VolumeGroupAttachIscsiClientArg_kDetach VolumeGroupAttachIscsiClientArg_Operation = 2
)

var VolumeGroupAttachIscsiClientArg_Operation_name = map[int32]string{
	1: "kAttach",
	2: "kDetach",
}

var VolumeGroupAttachIscsiClientArg_Operation_value = map[string]int32{
	"kAttach": 1,
	"kDetach": 2,
}

func (x VolumeGroupAttachIscsiClientArg_Operation) Enum() *VolumeGroupAttachIscsiClientArg_Operation {
	p := new(VolumeGroupAttachIscsiClientArg_Operation)
	*p = x
	return p
}

func (x VolumeGroupAttachIscsiClientArg_Operation) String() string {
	return proto.EnumName(VolumeGroupAttachIscsiClientArg_Operation_name, int32(x))
}

func (x *VolumeGroupAttachIscsiClientArg_Operation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VolumeGroupAttachIscsiClientArg_Operation_value, data, "VolumeGroupAttachIscsiClientArg_Operation")
	if err != nil {
		return err
	}
	*x = VolumeGroupAttachIscsiClientArg_Operation(value)
	return nil
}

func (VolumeGroupAttachIscsiClientArg_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{227, 0}
}

// Attach or Detach
type VolumeGroupAttachVmArg_Operation int32

const (
	VolumeGroupAttachVmArg_kAttach VolumeGroupAttachVmArg_Operation = 1
	VolumeGroupAttachVmArg_kDetach VolumeGroupAttachVmArg_Operation = 2
)

var VolumeGroupAttachVmArg_Operation_name = map[int32]string{
	1: "kAttach",
	2: "kDetach",
}

var VolumeGroupAttachVmArg_Operation_value = map[string]int32{
	"kAttach": 1,
	"kDetach": 2,
}

func (x VolumeGroupAttachVmArg_Operation) Enum() *VolumeGroupAttachVmArg_Operation {
	p := new(VolumeGroupAttachVmArg_Operation)
	*p = x
	return p
}

func (x VolumeGroupAttachVmArg_Operation) String() string {
	return proto.EnumName(VolumeGroupAttachVmArg_Operation_name, int32(x))
}

func (x *VolumeGroupAttachVmArg_Operation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VolumeGroupAttachVmArg_Operation_value, data, "VolumeGroupAttachVmArg_Operation")
	if err != nil {
		return err
	}
	*x = VolumeGroupAttachVmArg_Operation(value)
	return nil
}

func (VolumeGroupAttachVmArg_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{232, 0}
}

// Operation type.
type StretchConfigureArg_Operation int32

const (
	StretchConfigureArg_kEnable  StretchConfigureArg_Operation = 1
	StretchConfigureArg_kDisable StretchConfigureArg_Operation = 2
)

var StretchConfigureArg_Operation_name = map[int32]string{
	1: "kEnable",
	2: "kDisable",
}

var StretchConfigureArg_Operation_value = map[string]int32{
	"kEnable":  1,
	"kDisable": 2,
}

func (x StretchConfigureArg_Operation) Enum() *StretchConfigureArg_Operation {
	p := new(StretchConfigureArg_Operation)
	*p = x
	return p
}

func (x StretchConfigureArg_Operation) String() string {
	return proto.EnumName(StretchConfigureArg_Operation_name, int32(x))
}

func (x *StretchConfigureArg_Operation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StretchConfigureArg_Operation_value, data, "StretchConfigureArg_Operation")
	if err != nil {
		return err
	}
	*x = StretchConfigureArg_Operation(value)
	return nil
}

func (StretchConfigureArg_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{254, 0}
}

type UpdateAffinityRuleTaskRet_RuleComplianceState int32

const (
	UpdateAffinityRuleTaskRet_kInvalid           UpdateAffinityRuleTaskRet_RuleComplianceState = 1
	UpdateAffinityRuleTaskRet_kInCompliance      UpdateAffinityRuleTaskRet_RuleComplianceState = 2
	UpdateAffinityRuleTaskRet_kOutOfCompliance   UpdateAffinityRuleTaskRet_RuleComplianceState = 3
	UpdateAffinityRuleTaskRet_kPendingCompliance UpdateAffinityRuleTaskRet_RuleComplianceState = 4
)

var UpdateAffinityRuleTaskRet_RuleComplianceState_name = map[int32]string{
	1: "kInvalid",
	2: "kInCompliance",
	3: "kOutOfCompliance",
	4: "kPendingCompliance",
}

var UpdateAffinityRuleTaskRet_RuleComplianceState_value = map[string]int32{
	"kInvalid":           1,
	"kInCompliance":      2,
	"kOutOfCompliance":   3,
	"kPendingCompliance": 4,
}

func (x UpdateAffinityRuleTaskRet_RuleComplianceState) Enum() *UpdateAffinityRuleTaskRet_RuleComplianceState {
	p := new(UpdateAffinityRuleTaskRet_RuleComplianceState)
	*p = x
	return p
}

func (x UpdateAffinityRuleTaskRet_RuleComplianceState) String() string {
	return proto.EnumName(UpdateAffinityRuleTaskRet_RuleComplianceState_name, int32(x))
}

func (x *UpdateAffinityRuleTaskRet_RuleComplianceState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UpdateAffinityRuleTaskRet_RuleComplianceState_value, data, "UpdateAffinityRuleTaskRet_RuleComplianceState")
	if err != nil {
		return err
	}
	*x = UpdateAffinityRuleTaskRet_RuleComplianceState(value)
	return nil
}

func (UpdateAffinityRuleTaskRet_RuleComplianceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{280, 0}
}

type UpdateAffinityRuleTaskRet_UpdateStatus int32

const (
	UpdateAffinityRuleTaskRet_kUpdateOk     UpdateAffinityRuleTaskRet_UpdateStatus = 1
	UpdateAffinityRuleTaskRet_kUpdateFailed UpdateAffinityRuleTaskRet_UpdateStatus = 2
)

var UpdateAffinityRuleTaskRet_UpdateStatus_name = map[int32]string{
	1: "kUpdateOk",
	2: "kUpdateFailed",
}

var UpdateAffinityRuleTaskRet_UpdateStatus_value = map[string]int32{
	"kUpdateOk":     1,
	"kUpdateFailed": 2,
}

func (x UpdateAffinityRuleTaskRet_UpdateStatus) Enum() *UpdateAffinityRuleTaskRet_UpdateStatus {
	p := new(UpdateAffinityRuleTaskRet_UpdateStatus)
	*p = x
	return p
}

func (x UpdateAffinityRuleTaskRet_UpdateStatus) String() string {
	return proto.EnumName(UpdateAffinityRuleTaskRet_UpdateStatus_name, int32(x))
}

func (x *UpdateAffinityRuleTaskRet_UpdateStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UpdateAffinityRuleTaskRet_UpdateStatus_value, data, "UpdateAffinityRuleTaskRet_UpdateStatus")
	if err != nil {
		return err
	}
	*x = UpdateAffinityRuleTaskRet_UpdateStatus(value)
	return nil
}

func (UpdateAffinityRuleTaskRet_UpdateStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{280, 1}
}

// Preference to create parcels
type ParcelsCreateArg_Preference int32

const (
	// Create all parcels requested otherwise none.
	ParcelsCreateArg_kAll ParcelsCreateArg_Preference = 1
	// Ok to create just some parcels if we cannot create all of them.
	ParcelsCreateArg_kPartial ParcelsCreateArg_Preference = 2
)

var ParcelsCreateArg_Preference_name = map[int32]string{
	1: "kAll",
	2: "kPartial",
}

var ParcelsCreateArg_Preference_value = map[string]int32{
	"kAll":     1,
	"kPartial": 2,
}

func (x ParcelsCreateArg_Preference) Enum() *ParcelsCreateArg_Preference {
	p := new(ParcelsCreateArg_Preference)
	*p = x
	return p
}

func (x ParcelsCreateArg_Preference) String() string {
	return proto.EnumName(ParcelsCreateArg_Preference_name, int32(x))
}

func (x *ParcelsCreateArg_Preference) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ParcelsCreateArg_Preference_value, data, "ParcelsCreateArg_Preference")
	if err != nil {
		return err
	}
	*x = ParcelsCreateArg_Preference(value)
	return nil
}

func (ParcelsCreateArg_Preference) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{281, 0}
}

type DistributedVswitchValidateArg_OperationType int32

const (
	DistributedVswitchValidateArg_kCreate DistributedVswitchValidateArg_OperationType = 0
	DistributedVswitchValidateArg_kUpdate DistributedVswitchValidateArg_OperationType = 1
	DistributedVswitchValidateArg_kDelete DistributedVswitchValidateArg_OperationType = 2
)

var DistributedVswitchValidateArg_OperationType_name = map[int32]string{
	0: "kCreate",
	1: "kUpdate",
	2: "kDelete",
}

var DistributedVswitchValidateArg_OperationType_value = map[string]int32{
	"kCreate": 0,
	"kUpdate": 1,
	"kDelete": 2,
}

func (x DistributedVswitchValidateArg_OperationType) Enum() *DistributedVswitchValidateArg_OperationType {
	p := new(DistributedVswitchValidateArg_OperationType)
	*p = x
	return p
}

func (x DistributedVswitchValidateArg_OperationType) String() string {
	return proto.EnumName(DistributedVswitchValidateArg_OperationType_name, int32(x))
}

func (x *DistributedVswitchValidateArg_OperationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DistributedVswitchValidateArg_OperationType_value, data, "DistributedVswitchValidateArg_OperationType")
	if err != nil {
		return err
	}
	*x = DistributedVswitchValidateArg_OperationType(value)
	return nil
}

func (DistributedVswitchValidateArg_OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{355, 0}
}

// This type represents the resource that is targeted by the allocation
// task.
type NodeResourceAllocationArg_ResourceType int32

const (
	// Amount of memory to allocate to the VM, in bytes.
	NodeResourceAllocationArg_kVmMemory NodeResourceAllocationArg_ResourceType = 1
	// Amount of memory to allocate to the buffer, in bytes.
	NodeResourceAllocationArg_kBufferMemory NodeResourceAllocationArg_ResourceType = 2
	// Amount of memory to allocate to the pool, in bytes.
	NodeResourceAllocationArg_kPoolMemory NodeResourceAllocationArg_ResourceType = 3
)

var NodeResourceAllocationArg_ResourceType_name = map[int32]string{
	1: "kVmMemory",
	2: "kBufferMemory",
	3: "kPoolMemory",
}

var NodeResourceAllocationArg_ResourceType_value = map[string]int32{
	"kVmMemory":     1,
	"kBufferMemory": 2,
	"kPoolMemory":   3,
}

func (x NodeResourceAllocationArg_ResourceType) Enum() *NodeResourceAllocationArg_ResourceType {
	p := new(NodeResourceAllocationArg_ResourceType)
	*p = x
	return p
}

func (x NodeResourceAllocationArg_ResourceType) String() string {
	return proto.EnumName(NodeResourceAllocationArg_ResourceType_name, int32(x))
}

func (x *NodeResourceAllocationArg_ResourceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NodeResourceAllocationArg_ResourceType_value, data, "NodeResourceAllocationArg_ResourceType")
	if err != nil {
		return err
	}
	*x = NodeResourceAllocationArg_ResourceType(value)
	return nil
}

func (NodeResourceAllocationArg_ResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{412, 0}
}

type BatchRequestArg struct {
	// A list of methods and serialized arguments.
	RequestList          []*MetaRequest `protobuf:"bytes,1,rep,name=request_list,json=requestList" json:"request_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BatchRequestArg) Reset()         { *m = BatchRequestArg{} }
func (m *BatchRequestArg) String() string { return proto.CompactTextString(m) }
func (*BatchRequestArg) ProtoMessage()    {}
func (*BatchRequestArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{0}
}

func (m *BatchRequestArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRequestArg.Unmarshal(m, b)
}
func (m *BatchRequestArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRequestArg.Marshal(b, m, deterministic)
}
func (m *BatchRequestArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequestArg.Merge(m, src)
}
func (m *BatchRequestArg) XXX_Size() int {
	return xxx_messageInfo_BatchRequestArg.Size(m)
}
func (m *BatchRequestArg) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequestArg.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequestArg proto.InternalMessageInfo

func (m *BatchRequestArg) GetRequestList() []*MetaRequest {
	if m != nil {
		return m.RequestList
	}
	return nil
}

type BatchRequestRet struct {
	// A list of responses, in the same order as the provided methods.
	ResponseList         []*MetaResponse `protobuf:"bytes,1,rep,name=response_list,json=responseList" json:"response_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BatchRequestRet) Reset()         { *m = BatchRequestRet{} }
func (m *BatchRequestRet) String() string { return proto.CompactTextString(m) }
func (*BatchRequestRet) ProtoMessage()    {}
func (*BatchRequestRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{1}
}

func (m *BatchRequestRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRequestRet.Unmarshal(m, b)
}
func (m *BatchRequestRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRequestRet.Marshal(b, m, deterministic)
}
func (m *BatchRequestRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequestRet.Merge(m, src)
}
func (m *BatchRequestRet) XXX_Size() int {
	return xxx_messageInfo_BatchRequestRet.Size(m)
}
func (m *BatchRequestRet) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequestRet.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequestRet proto.InternalMessageInfo

func (m *BatchRequestRet) GetResponseList() []*MetaResponse {
	if m != nil {
		return m.ResponseList
	}
	return nil
}

type SnapshotCreateArg struct {
	// A list of snapshot specifications. All disks for all VMs are treated as a
	// single consistency group for the vdisk snapshot.
	SpecList []*SnapshotSpec `protobuf:"bytes,1,rep,name=spec_list,json=specList" json:"spec_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotCreateArg) Reset()         { *m = SnapshotCreateArg{} }
func (m *SnapshotCreateArg) String() string { return proto.CompactTextString(m) }
func (*SnapshotCreateArg) ProtoMessage()    {}
func (*SnapshotCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{2}
}

func (m *SnapshotCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotCreateArg.Unmarshal(m, b)
}
func (m *SnapshotCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotCreateArg.Marshal(b, m, deterministic)
}
func (m *SnapshotCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotCreateArg.Merge(m, src)
}
func (m *SnapshotCreateArg) XXX_Size() int {
	return xxx_messageInfo_SnapshotCreateArg.Size(m)
}
func (m *SnapshotCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotCreateArg proto.InternalMessageInfo

func (m *SnapshotCreateArg) GetSpecList() []*SnapshotSpec {
	if m != nil {
		return m.SpecList
	}
	return nil
}

func (m *SnapshotCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *SnapshotCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *SnapshotCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type SnapshotCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// SnapshotCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotCreateRet) Reset()         { *m = SnapshotCreateRet{} }
func (m *SnapshotCreateRet) String() string { return proto.CompactTextString(m) }
func (*SnapshotCreateRet) ProtoMessage()    {}
func (*SnapshotCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{3}
}

func (m *SnapshotCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotCreateRet.Unmarshal(m, b)
}
func (m *SnapshotCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotCreateRet.Marshal(b, m, deterministic)
}
func (m *SnapshotCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotCreateRet.Merge(m, src)
}
func (m *SnapshotCreateRet) XXX_Size() int {
	return xxx_messageInfo_SnapshotCreateRet.Size(m)
}
func (m *SnapshotCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotCreateRet proto.InternalMessageInfo

func (m *SnapshotCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type SnapshotCreateTaskRet struct {
	// The newly-created snapshots' UUIDs.
	SnapshotUuidList     [][]byte `protobuf:"bytes,1,rep,name=snapshot_uuid_list,json=snapshotUuidList" json:"snapshot_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotCreateTaskRet) Reset()         { *m = SnapshotCreateTaskRet{} }
func (m *SnapshotCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*SnapshotCreateTaskRet) ProtoMessage()    {}
func (*SnapshotCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{4}
}

func (m *SnapshotCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotCreateTaskRet.Unmarshal(m, b)
}
func (m *SnapshotCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *SnapshotCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotCreateTaskRet.Merge(m, src)
}
func (m *SnapshotCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_SnapshotCreateTaskRet.Size(m)
}
func (m *SnapshotCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotCreateTaskRet proto.InternalMessageInfo

func (m *SnapshotCreateTaskRet) GetSnapshotUuidList() [][]byte {
	if m != nil {
		return m.SnapshotUuidList
	}
	return nil
}

type SnapshotDeleteArg struct {
	// The snapshot identifier.
	SnapshotUuid []byte `protobuf:"bytes,1,opt,name=snapshot_uuid,json=snapshotUuid" json:"snapshot_uuid,omitempty"`
	// Snapshot logical timestamp.
	LogicalTimestamp *int64 `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotDeleteArg) Reset()         { *m = SnapshotDeleteArg{} }
func (m *SnapshotDeleteArg) String() string { return proto.CompactTextString(m) }
func (*SnapshotDeleteArg) ProtoMessage()    {}
func (*SnapshotDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{5}
}

func (m *SnapshotDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotDeleteArg.Unmarshal(m, b)
}
func (m *SnapshotDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotDeleteArg.Marshal(b, m, deterministic)
}
func (m *SnapshotDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotDeleteArg.Merge(m, src)
}
func (m *SnapshotDeleteArg) XXX_Size() int {
	return xxx_messageInfo_SnapshotDeleteArg.Size(m)
}
func (m *SnapshotDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotDeleteArg proto.InternalMessageInfo

const Default_SnapshotDeleteArg_LogicalTimestamp int64 = -1

func (m *SnapshotDeleteArg) GetSnapshotUuid() []byte {
	if m != nil {
		return m.SnapshotUuid
	}
	return nil
}

func (m *SnapshotDeleteArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_SnapshotDeleteArg_LogicalTimestamp
}

func (m *SnapshotDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *SnapshotDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *SnapshotDeleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type SnapshotDeleteRet struct {
	// A task to poll for completion. On success, the task will contain a
	// SnapshotDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotDeleteRet) Reset()         { *m = SnapshotDeleteRet{} }
func (m *SnapshotDeleteRet) String() string { return proto.CompactTextString(m) }
func (*SnapshotDeleteRet) ProtoMessage()    {}
func (*SnapshotDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{6}
}

func (m *SnapshotDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotDeleteRet.Unmarshal(m, b)
}
func (m *SnapshotDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotDeleteRet.Marshal(b, m, deterministic)
}
func (m *SnapshotDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotDeleteRet.Merge(m, src)
}
func (m *SnapshotDeleteRet) XXX_Size() int {
	return xxx_messageInfo_SnapshotDeleteRet.Size(m)
}
func (m *SnapshotDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotDeleteRet proto.InternalMessageInfo

func (m *SnapshotDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type SnapshotDeleteTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotDeleteTaskRet) Reset()         { *m = SnapshotDeleteTaskRet{} }
func (m *SnapshotDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*SnapshotDeleteTaskRet) ProtoMessage()    {}
func (*SnapshotDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{7}
}

func (m *SnapshotDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotDeleteTaskRet.Unmarshal(m, b)
}
func (m *SnapshotDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *SnapshotDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotDeleteTaskRet.Merge(m, src)
}
func (m *SnapshotDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_SnapshotDeleteTaskRet.Size(m)
}
func (m *SnapshotDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotDeleteTaskRet proto.InternalMessageInfo

type SnapshotGetArg struct {
	// The list of snapshot UUIDs to lookup.
	SnapshotUuidList     [][]byte `protobuf:"bytes,1,rep,name=snapshot_uuid_list,json=snapshotUuidList" json:"snapshot_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotGetArg) Reset()         { *m = SnapshotGetArg{} }
func (m *SnapshotGetArg) String() string { return proto.CompactTextString(m) }
func (*SnapshotGetArg) ProtoMessage()    {}
func (*SnapshotGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{8}
}

func (m *SnapshotGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotGetArg.Unmarshal(m, b)
}
func (m *SnapshotGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotGetArg.Marshal(b, m, deterministic)
}
func (m *SnapshotGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotGetArg.Merge(m, src)
}
func (m *SnapshotGetArg) XXX_Size() int {
	return xxx_messageInfo_SnapshotGetArg.Size(m)
}
func (m *SnapshotGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotGetArg proto.InternalMessageInfo

func (m *SnapshotGetArg) GetSnapshotUuidList() [][]byte {
	if m != nil {
		return m.SnapshotUuidList
	}
	return nil
}

type SnapshotGetRet struct {
	// The list of lookup results.
	SnapshotInfoList     []*SnapshotInfo `protobuf:"bytes,1,rep,name=snapshot_info_list,json=snapshotInfoList" json:"snapshot_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SnapshotGetRet) Reset()         { *m = SnapshotGetRet{} }
func (m *SnapshotGetRet) String() string { return proto.CompactTextString(m) }
func (*SnapshotGetRet) ProtoMessage()    {}
func (*SnapshotGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{9}
}

func (m *SnapshotGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotGetRet.Unmarshal(m, b)
}
func (m *SnapshotGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotGetRet.Marshal(b, m, deterministic)
}
func (m *SnapshotGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotGetRet.Merge(m, src)
}
func (m *SnapshotGetRet) XXX_Size() int {
	return xxx_messageInfo_SnapshotGetRet.Size(m)
}
func (m *SnapshotGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotGetRet proto.InternalMessageInfo

func (m *SnapshotGetRet) GetSnapshotInfoList() []*SnapshotInfo {
	if m != nil {
		return m.SnapshotInfoList
	}
	return nil
}

type SnapshotListArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotListArg) Reset()         { *m = SnapshotListArg{} }
func (m *SnapshotListArg) String() string { return proto.CompactTextString(m) }
func (*SnapshotListArg) ProtoMessage()    {}
func (*SnapshotListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{10}
}

func (m *SnapshotListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotListArg.Unmarshal(m, b)
}
func (m *SnapshotListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotListArg.Marshal(b, m, deterministic)
}
func (m *SnapshotListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotListArg.Merge(m, src)
}
func (m *SnapshotListArg) XXX_Size() int {
	return xxx_messageInfo_SnapshotListArg.Size(m)
}
func (m *SnapshotListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotListArg.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotListArg proto.InternalMessageInfo

type SnapshotListRet struct {
	// A list of snapshot UUIDs.
	SnapshotUuidList     [][]byte `protobuf:"bytes,1,rep,name=snapshot_uuid_list,json=snapshotUuidList" json:"snapshot_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotListRet) Reset()         { *m = SnapshotListRet{} }
func (m *SnapshotListRet) String() string { return proto.CompactTextString(m) }
func (*SnapshotListRet) ProtoMessage()    {}
func (*SnapshotListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{11}
}

func (m *SnapshotListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotListRet.Unmarshal(m, b)
}
func (m *SnapshotListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotListRet.Marshal(b, m, deterministic)
}
func (m *SnapshotListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotListRet.Merge(m, src)
}
func (m *SnapshotListRet) XXX_Size() int {
	return xxx_messageInfo_SnapshotListRet.Size(m)
}
func (m *SnapshotListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotListRet.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotListRet proto.InternalMessageInfo

func (m *SnapshotListRet) GetSnapshotUuidList() [][]byte {
	if m != nil {
		return m.SnapshotUuidList
	}
	return nil
}

type VmSnapshotListArg struct {
	// The list VM UUIDs to lookup snapshot trees for.
	VmUuidList [][]byte `protobuf:"bytes,1,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	// Whether to also lookup the snapshot descriptors themselves. If true, these
	// will be embedded in the VmSnapshotTreeInfo result. Each snapshot
	// referenced in the tree will be included in the snapshot_info_list.
	IncludeSnapshots     *bool    `protobuf:"varint,2,opt,name=include_snapshots,json=includeSnapshots" json:"include_snapshots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSnapshotListArg) Reset()         { *m = VmSnapshotListArg{} }
func (m *VmSnapshotListArg) String() string { return proto.CompactTextString(m) }
func (*VmSnapshotListArg) ProtoMessage()    {}
func (*VmSnapshotListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{12}
}

func (m *VmSnapshotListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSnapshotListArg.Unmarshal(m, b)
}
func (m *VmSnapshotListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSnapshotListArg.Marshal(b, m, deterministic)
}
func (m *VmSnapshotListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSnapshotListArg.Merge(m, src)
}
func (m *VmSnapshotListArg) XXX_Size() int {
	return xxx_messageInfo_VmSnapshotListArg.Size(m)
}
func (m *VmSnapshotListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSnapshotListArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmSnapshotListArg proto.InternalMessageInfo

func (m *VmSnapshotListArg) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

func (m *VmSnapshotListArg) GetIncludeSnapshots() bool {
	if m != nil && m.IncludeSnapshots != nil {
		return *m.IncludeSnapshots
	}
	return false
}

type VmSnapshotListRet struct {
	// The list of lookup results.
	VmSnapshotTreeInfoList []*VmSnapshotTreeInfo `protobuf:"bytes,1,rep,name=vm_snapshot_tree_info_list,json=vmSnapshotTreeInfoList" json:"vm_snapshot_tree_info_list,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *VmSnapshotListRet) Reset()         { *m = VmSnapshotListRet{} }
func (m *VmSnapshotListRet) String() string { return proto.CompactTextString(m) }
func (*VmSnapshotListRet) ProtoMessage()    {}
func (*VmSnapshotListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{13}
}

func (m *VmSnapshotListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSnapshotListRet.Unmarshal(m, b)
}
func (m *VmSnapshotListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSnapshotListRet.Marshal(b, m, deterministic)
}
func (m *VmSnapshotListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSnapshotListRet.Merge(m, src)
}
func (m *VmSnapshotListRet) XXX_Size() int {
	return xxx_messageInfo_VmSnapshotListRet.Size(m)
}
func (m *VmSnapshotListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSnapshotListRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSnapshotListRet proto.InternalMessageInfo

func (m *VmSnapshotListRet) GetVmSnapshotTreeInfoList() []*VmSnapshotTreeInfo {
	if m != nil {
		return m.VmSnapshotTreeInfoList
	}
	return nil
}

type TaskPollArg struct {
	// The maximum amount of time to wait, in seconds. This is only a hint, and
	// the poll may return earlier, even though none of the pollable objects have
	// become ready. The maximum timeout that can be specified is 30 minutes,
	// i.e. 1800 seconds.
	TimeoutSec *int64 `protobuf:"varint,1,opt,name=timeout_sec,json=timeoutSec,def=30" json:"timeout_sec,omitempty"`
	// The set of tasks to poll on.
	TaskUuidList [][]byte `protobuf:"bytes,2,rep,name=task_uuid_list,json=taskUuidList" json:"task_uuid_list,omitempty"`
	// Whether to attempt to resolve the names of entities in the resulting
	// tasks' entity lists. The resolution is best effort, and is unlikely to
	// work for entities that have been deleted.
	ResolveEntityNames   *bool    `protobuf:"varint,3,opt,name=resolve_entity_names,json=resolveEntityNames" json:"resolve_entity_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskPollArg) Reset()         { *m = TaskPollArg{} }
func (m *TaskPollArg) String() string { return proto.CompactTextString(m) }
func (*TaskPollArg) ProtoMessage()    {}
func (*TaskPollArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{14}
}

func (m *TaskPollArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskPollArg.Unmarshal(m, b)
}
func (m *TaskPollArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskPollArg.Marshal(b, m, deterministic)
}
func (m *TaskPollArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPollArg.Merge(m, src)
}
func (m *TaskPollArg) XXX_Size() int {
	return xxx_messageInfo_TaskPollArg.Size(m)
}
func (m *TaskPollArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPollArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPollArg proto.InternalMessageInfo

const Default_TaskPollArg_TimeoutSec int64 = 30

func (m *TaskPollArg) GetTimeoutSec() int64 {
	if m != nil && m.TimeoutSec != nil {
		return *m.TimeoutSec
	}
	return Default_TaskPollArg_TimeoutSec
}

func (m *TaskPollArg) GetTaskUuidList() [][]byte {
	if m != nil {
		return m.TaskUuidList
	}
	return nil
}

func (m *TaskPollArg) GetResolveEntityNames() bool {
	if m != nil && m.ResolveEntityNames != nil {
		return *m.ResolveEntityNames
	}
	return false
}

type TaskPollRet struct {
	// Whether the poll request timed out.
	TimedOut *bool `protobuf:"varint,1,opt,name=timed_out,json=timedOut" json:"timed_out,omitempty"`
	// The set of ready tasks.
	ReadyTaskList []*Task `protobuf:"bytes,2,rep,name=ready_task_list,json=readyTaskList" json:"ready_task_list,omitempty"`
	// The set of unrecognized task IDs, if any.
	UnknownTaskUuidList  [][]byte `protobuf:"bytes,3,rep,name=unknown_task_uuid_list,json=unknownTaskUuidList" json:"unknown_task_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskPollRet) Reset()         { *m = TaskPollRet{} }
func (m *TaskPollRet) String() string { return proto.CompactTextString(m) }
func (*TaskPollRet) ProtoMessage()    {}
func (*TaskPollRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{15}
}

func (m *TaskPollRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskPollRet.Unmarshal(m, b)
}
func (m *TaskPollRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskPollRet.Marshal(b, m, deterministic)
}
func (m *TaskPollRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPollRet.Merge(m, src)
}
func (m *TaskPollRet) XXX_Size() int {
	return xxx_messageInfo_TaskPollRet.Size(m)
}
func (m *TaskPollRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPollRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPollRet proto.InternalMessageInfo

func (m *TaskPollRet) GetTimedOut() bool {
	if m != nil && m.TimedOut != nil {
		return *m.TimedOut
	}
	return false
}

func (m *TaskPollRet) GetReadyTaskList() []*Task {
	if m != nil {
		return m.ReadyTaskList
	}
	return nil
}

func (m *TaskPollRet) GetUnknownTaskUuidList() [][]byte {
	if m != nil {
		return m.UnknownTaskUuidList
	}
	return nil
}

type TaskListArg struct {
	// List of entity types. Tasks associated with any of these entity types will
	// be returned.
	EntityTypeList []Task_Entity `protobuf:"varint,1,rep,name=entity_type_list,json=entityTypeList,enum=nutanix.acropolis.Task_Entity" json:"entity_type_list,omitempty"`
	// List of entity uuids. Tasks associated with any of these entity uuids will
	// be returned.
	EntityUuidList [][]byte `protobuf:"bytes,2,rep,name=entity_uuid_list,json=entityUuidList" json:"entity_uuid_list,omitempty"`
	// List of operations. Tasks associated with any of these operation types will
	// be returned.
	OperationTypeList []Task_OperationType `protobuf:"varint,3,rep,name=operation_type_list,json=operationTypeList,enum=nutanix.acropolis.Task_OperationType" json:"operation_type_list,omitempty"`
	// Cutoff time in microseconds from epoch. All pending tasks will
	// be returned but only completed tasks with completed time greater than
	// cutoff time will be returned. Only applicable if include_completed is set
	// to true.
	CutoffTimeUsecs *uint64 `protobuf:"fixed64,4,opt,name=cutoff_time_usecs,json=cutoffTimeUsecs" json:"cutoff_time_usecs,omitempty"`
	// Flag indicating whether completed tasks should be included.
	IncludeCompleted *bool `protobuf:"varint,5,opt,name=include_completed,json=includeCompleted,def=0" json:"include_completed,omitempty"`
	// The maximum number of tasks to return. If a positive integer is specified,
	// only the N most recently-created tasks will be returned, in ascending
	// sorted order.
	Limit                *int64   `protobuf:"varint,6,opt,name=limit,def=-1" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskListArg) Reset()         { *m = TaskListArg{} }
func (m *TaskListArg) String() string { return proto.CompactTextString(m) }
func (*TaskListArg) ProtoMessage()    {}
func (*TaskListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{16}
}

func (m *TaskListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskListArg.Unmarshal(m, b)
}
func (m *TaskListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskListArg.Marshal(b, m, deterministic)
}
func (m *TaskListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListArg.Merge(m, src)
}
func (m *TaskListArg) XXX_Size() int {
	return xxx_messageInfo_TaskListArg.Size(m)
}
func (m *TaskListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListArg proto.InternalMessageInfo

const Default_TaskListArg_IncludeCompleted bool = false
const Default_TaskListArg_Limit int64 = -1

func (m *TaskListArg) GetEntityTypeList() []Task_Entity {
	if m != nil {
		return m.EntityTypeList
	}
	return nil
}

func (m *TaskListArg) GetEntityUuidList() [][]byte {
	if m != nil {
		return m.EntityUuidList
	}
	return nil
}

func (m *TaskListArg) GetOperationTypeList() []Task_OperationType {
	if m != nil {
		return m.OperationTypeList
	}
	return nil
}

func (m *TaskListArg) GetCutoffTimeUsecs() uint64 {
	if m != nil && m.CutoffTimeUsecs != nil {
		return *m.CutoffTimeUsecs
	}
	return 0
}

func (m *TaskListArg) GetIncludeCompleted() bool {
	if m != nil && m.IncludeCompleted != nil {
		return *m.IncludeCompleted
	}
	return Default_TaskListArg_IncludeCompleted
}

func (m *TaskListArg) GetLimit() int64 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return Default_TaskListArg_Limit
}

type TaskListRet struct {
	// List of Task uuids.
	TaskUuidList         [][]byte `protobuf:"bytes,1,rep,name=task_uuid_list,json=taskUuidList" json:"task_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskListRet) Reset()         { *m = TaskListRet{} }
func (m *TaskListRet) String() string { return proto.CompactTextString(m) }
func (*TaskListRet) ProtoMessage()    {}
func (*TaskListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{17}
}

func (m *TaskListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskListRet.Unmarshal(m, b)
}
func (m *TaskListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskListRet.Marshal(b, m, deterministic)
}
func (m *TaskListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListRet.Merge(m, src)
}
func (m *TaskListRet) XXX_Size() int {
	return xxx_messageInfo_TaskListRet.Size(m)
}
func (m *TaskListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListRet proto.InternalMessageInfo

func (m *TaskListRet) GetTaskUuidList() [][]byte {
	if m != nil {
		return m.TaskUuidList
	}
	return nil
}

type TaskGetArg struct {
	// The list of tasks to return.
	TaskUuidList [][]byte `protobuf:"bytes,1,rep,name=task_uuid_list,json=taskUuidList" json:"task_uuid_list,omitempty"`
	// Whether to attempt to resolve the names of entities in the resulting
	// tasks' entity lists. The resolution is best effort, and is unlikely to
	// work for entities that have been deleted.
	ResolveEntityNames   *bool    `protobuf:"varint,2,opt,name=resolve_entity_names,json=resolveEntityNames" json:"resolve_entity_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskGetArg) Reset()         { *m = TaskGetArg{} }
func (m *TaskGetArg) String() string { return proto.CompactTextString(m) }
func (*TaskGetArg) ProtoMessage()    {}
func (*TaskGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{18}
}

func (m *TaskGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskGetArg.Unmarshal(m, b)
}
func (m *TaskGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskGetArg.Marshal(b, m, deterministic)
}
func (m *TaskGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskGetArg.Merge(m, src)
}
func (m *TaskGetArg) XXX_Size() int {
	return xxx_messageInfo_TaskGetArg.Size(m)
}
func (m *TaskGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskGetArg proto.InternalMessageInfo

func (m *TaskGetArg) GetTaskUuidList() [][]byte {
	if m != nil {
		return m.TaskUuidList
	}
	return nil
}

func (m *TaskGetArg) GetResolveEntityNames() bool {
	if m != nil && m.ResolveEntityNames != nil {
		return *m.ResolveEntityNames
	}
	return false
}

type TaskGetRet struct {
	// List of Task objects.
	TaskList             []*Task  `protobuf:"bytes,1,rep,name=task_list,json=taskList" json:"task_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskGetRet) Reset()         { *m = TaskGetRet{} }
func (m *TaskGetRet) String() string { return proto.CompactTextString(m) }
func (*TaskGetRet) ProtoMessage()    {}
func (*TaskGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{19}
}

func (m *TaskGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskGetRet.Unmarshal(m, b)
}
func (m *TaskGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskGetRet.Marshal(b, m, deterministic)
}
func (m *TaskGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskGetRet.Merge(m, src)
}
func (m *TaskGetRet) XXX_Size() int {
	return xxx_messageInfo_TaskGetRet.Size(m)
}
func (m *TaskGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskGetRet proto.InternalMessageInfo

func (m *TaskGetRet) GetTaskList() []*Task {
	if m != nil {
		return m.TaskList
	}
	return nil
}

type VpnLbRoutePrefixCreateArg struct {
	// Route Config
	RouteConfig          *VpnLbRouteConfig `protobuf:"bytes,1,opt,name=route_config,json=routeConfig" json:"route_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *VpnLbRoutePrefixCreateArg) Reset()         { *m = VpnLbRoutePrefixCreateArg{} }
func (m *VpnLbRoutePrefixCreateArg) String() string { return proto.CompactTextString(m) }
func (*VpnLbRoutePrefixCreateArg) ProtoMessage()    {}
func (*VpnLbRoutePrefixCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{20}
}

func (m *VpnLbRoutePrefixCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpnLbRoutePrefixCreateArg.Unmarshal(m, b)
}
func (m *VpnLbRoutePrefixCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpnLbRoutePrefixCreateArg.Marshal(b, m, deterministic)
}
func (m *VpnLbRoutePrefixCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpnLbRoutePrefixCreateArg.Merge(m, src)
}
func (m *VpnLbRoutePrefixCreateArg) XXX_Size() int {
	return xxx_messageInfo_VpnLbRoutePrefixCreateArg.Size(m)
}
func (m *VpnLbRoutePrefixCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VpnLbRoutePrefixCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VpnLbRoutePrefixCreateArg proto.InternalMessageInfo

func (m *VpnLbRoutePrefixCreateArg) GetRouteConfig() *VpnLbRouteConfig {
	if m != nil {
		return m.RouteConfig
	}
	return nil
}

type VpnLbRoutePrefixCreateRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VpnLbRoutePrefixCreateRet) Reset()         { *m = VpnLbRoutePrefixCreateRet{} }
func (m *VpnLbRoutePrefixCreateRet) String() string { return proto.CompactTextString(m) }
func (*VpnLbRoutePrefixCreateRet) ProtoMessage()    {}
func (*VpnLbRoutePrefixCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{21}
}

func (m *VpnLbRoutePrefixCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpnLbRoutePrefixCreateRet.Unmarshal(m, b)
}
func (m *VpnLbRoutePrefixCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpnLbRoutePrefixCreateRet.Marshal(b, m, deterministic)
}
func (m *VpnLbRoutePrefixCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpnLbRoutePrefixCreateRet.Merge(m, src)
}
func (m *VpnLbRoutePrefixCreateRet) XXX_Size() int {
	return xxx_messageInfo_VpnLbRoutePrefixCreateRet.Size(m)
}
func (m *VpnLbRoutePrefixCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VpnLbRoutePrefixCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VpnLbRoutePrefixCreateRet proto.InternalMessageInfo

type VpnLbRoutePrefixUpdateArg struct {
	// Route Config
	RouteConfig          *VpnLbRouteConfig `protobuf:"bytes,1,opt,name=route_config,json=routeConfig" json:"route_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *VpnLbRoutePrefixUpdateArg) Reset()         { *m = VpnLbRoutePrefixUpdateArg{} }
func (m *VpnLbRoutePrefixUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VpnLbRoutePrefixUpdateArg) ProtoMessage()    {}
func (*VpnLbRoutePrefixUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{22}
}

func (m *VpnLbRoutePrefixUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpnLbRoutePrefixUpdateArg.Unmarshal(m, b)
}
func (m *VpnLbRoutePrefixUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpnLbRoutePrefixUpdateArg.Marshal(b, m, deterministic)
}
func (m *VpnLbRoutePrefixUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpnLbRoutePrefixUpdateArg.Merge(m, src)
}
func (m *VpnLbRoutePrefixUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VpnLbRoutePrefixUpdateArg.Size(m)
}
func (m *VpnLbRoutePrefixUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VpnLbRoutePrefixUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VpnLbRoutePrefixUpdateArg proto.InternalMessageInfo

func (m *VpnLbRoutePrefixUpdateArg) GetRouteConfig() *VpnLbRouteConfig {
	if m != nil {
		return m.RouteConfig
	}
	return nil
}

type VpnLbRoutePrefixUpdateRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VpnLbRoutePrefixUpdateRet) Reset()         { *m = VpnLbRoutePrefixUpdateRet{} }
func (m *VpnLbRoutePrefixUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VpnLbRoutePrefixUpdateRet) ProtoMessage()    {}
func (*VpnLbRoutePrefixUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{23}
}

func (m *VpnLbRoutePrefixUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpnLbRoutePrefixUpdateRet.Unmarshal(m, b)
}
func (m *VpnLbRoutePrefixUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpnLbRoutePrefixUpdateRet.Marshal(b, m, deterministic)
}
func (m *VpnLbRoutePrefixUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpnLbRoutePrefixUpdateRet.Merge(m, src)
}
func (m *VpnLbRoutePrefixUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VpnLbRoutePrefixUpdateRet.Size(m)
}
func (m *VpnLbRoutePrefixUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VpnLbRoutePrefixUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VpnLbRoutePrefixUpdateRet proto.InternalMessageInfo

type VpnLbRoutePrefixDeleteArg struct {
	// Route Config
	RouteConfig          *VpnLbRouteConfig `protobuf:"bytes,1,opt,name=route_config,json=routeConfig" json:"route_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *VpnLbRoutePrefixDeleteArg) Reset()         { *m = VpnLbRoutePrefixDeleteArg{} }
func (m *VpnLbRoutePrefixDeleteArg) String() string { return proto.CompactTextString(m) }
func (*VpnLbRoutePrefixDeleteArg) ProtoMessage()    {}
func (*VpnLbRoutePrefixDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{24}
}

func (m *VpnLbRoutePrefixDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpnLbRoutePrefixDeleteArg.Unmarshal(m, b)
}
func (m *VpnLbRoutePrefixDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpnLbRoutePrefixDeleteArg.Marshal(b, m, deterministic)
}
func (m *VpnLbRoutePrefixDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpnLbRoutePrefixDeleteArg.Merge(m, src)
}
func (m *VpnLbRoutePrefixDeleteArg) XXX_Size() int {
	return xxx_messageInfo_VpnLbRoutePrefixDeleteArg.Size(m)
}
func (m *VpnLbRoutePrefixDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VpnLbRoutePrefixDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_VpnLbRoutePrefixDeleteArg proto.InternalMessageInfo

func (m *VpnLbRoutePrefixDeleteArg) GetRouteConfig() *VpnLbRouteConfig {
	if m != nil {
		return m.RouteConfig
	}
	return nil
}

type VpnLbRoutePrefixDeleteRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VpnLbRoutePrefixDeleteRet) Reset()         { *m = VpnLbRoutePrefixDeleteRet{} }
func (m *VpnLbRoutePrefixDeleteRet) String() string { return proto.CompactTextString(m) }
func (*VpnLbRoutePrefixDeleteRet) ProtoMessage()    {}
func (*VpnLbRoutePrefixDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{25}
}

func (m *VpnLbRoutePrefixDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpnLbRoutePrefixDeleteRet.Unmarshal(m, b)
}
func (m *VpnLbRoutePrefixDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpnLbRoutePrefixDeleteRet.Marshal(b, m, deterministic)
}
func (m *VpnLbRoutePrefixDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpnLbRoutePrefixDeleteRet.Merge(m, src)
}
func (m *VpnLbRoutePrefixDeleteRet) XXX_Size() int {
	return xxx_messageInfo_VpnLbRoutePrefixDeleteRet.Size(m)
}
func (m *VpnLbRoutePrefixDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VpnLbRoutePrefixDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VpnLbRoutePrefixDeleteRet proto.InternalMessageInfo

type VmCreateArg struct {
	// An optional spec for the VM.
	Spec *VmCreateSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Incarnation ID required by IDF when the VM entity is migrated from some
	// other cluster to the current cluster.
	DbIncarnationId *uint64 `protobuf:"varint,5,opt,name=db_incarnation_id,json=dbIncarnationId" json:"db_incarnation_id,omitempty"`
	// When migrating a VM from one cluster to another cluster within a self AZ,
	// the migrated VM must preserve the VM logical timestamp as found on source
	// cluster. This field specifies the logical timestamp for the migrated VM.
	LogicalTimestamp     *int64   `protobuf:"varint,6,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCreateArg) Reset()         { *m = VmCreateArg{} }
func (m *VmCreateArg) String() string { return proto.CompactTextString(m) }
func (*VmCreateArg) ProtoMessage()    {}
func (*VmCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{26}
}

func (m *VmCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCreateArg.Unmarshal(m, b)
}
func (m *VmCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCreateArg.Marshal(b, m, deterministic)
}
func (m *VmCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCreateArg.Merge(m, src)
}
func (m *VmCreateArg) XXX_Size() int {
	return xxx_messageInfo_VmCreateArg.Size(m)
}
func (m *VmCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmCreateArg proto.InternalMessageInfo

const Default_VmCreateArg_LogicalTimestamp int64 = -1

func (m *VmCreateArg) GetSpec() *VmCreateSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *VmCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmCreateArg) GetDbIncarnationId() uint64 {
	if m != nil && m.DbIncarnationId != nil {
		return *m.DbIncarnationId
	}
	return 0
}

func (m *VmCreateArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_VmCreateArg_LogicalTimestamp
}

type VmCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCreateRet) Reset()         { *m = VmCreateRet{} }
func (m *VmCreateRet) String() string { return proto.CompactTextString(m) }
func (*VmCreateRet) ProtoMessage()    {}
func (*VmCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{27}
}

func (m *VmCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCreateRet.Unmarshal(m, b)
}
func (m *VmCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCreateRet.Marshal(b, m, deterministic)
}
func (m *VmCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCreateRet.Merge(m, src)
}
func (m *VmCreateRet) XXX_Size() int {
	return xxx_messageInfo_VmCreateRet.Size(m)
}
func (m *VmCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCreateRet proto.InternalMessageInfo

func (m *VmCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmCreateTaskRet struct {
	// The newly-created VM's UUID.
	VmUuid               []byte   `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCreateTaskRet) Reset()         { *m = VmCreateTaskRet{} }
func (m *VmCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmCreateTaskRet) ProtoMessage()    {}
func (*VmCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{28}
}

func (m *VmCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCreateTaskRet.Unmarshal(m, b)
}
func (m *VmCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCreateTaskRet.Merge(m, src)
}
func (m *VmCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmCreateTaskRet.Size(m)
}
func (m *VmCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCreateTaskRet proto.InternalMessageInfo

func (m *VmCreateTaskRet) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

type VmGetArg struct {
	// The query parameters.
	Request *GenericQueryRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	// Whether to include entries that do not exist in the response. This
	// situation can happen either when the user provides a VM UUID that is not
	// present or the VM has been deleted recently. In either case, the
	// corresponding VmInfo instance for will have the deleted field set to True.
	IncludeNonExistent *bool `protobuf:"varint,2,opt,name=include_non_existent,json=includeNonExistent" json:"include_non_existent,omitempty"`
	// List of VM UUIDs. If none is specified, then return info for all VMs
	VmUuidList [][]byte `protobuf:"bytes,3,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	// Whether to fetch the current maximum vmdisk sizes.
	IncludeVmdiskSizes *bool `protobuf:"varint,4,opt,name=include_vmdisk_sizes,json=includeVmdiskSizes" json:"include_vmdisk_sizes,omitempty"`
	// Whether to fetch current network address assignments.
	IncludeAddressAssignments *bool `protobuf:"varint,5,opt,name=include_address_assignments,json=includeAddressAssignments" json:"include_address_assignments,omitempty"`
	// Whether to resolve vmdisk paths.
	IncludeVmdiskPaths *bool `protobuf:"varint,6,opt,name=include_vmdisk_paths,json=includeVmdiskPaths" json:"include_vmdisk_paths,omitempty"`
	// Whether to fetch the URLs of the data sources for the vmdisks that are
	// backed by data sources outside the AOS cluster (in external repositories).
	IncludeVmdiskDataSourceUrls *bool    `protobuf:"varint,7,opt,name=include_vmdisk_data_source_urls,json=includeVmdiskDataSourceUrls" json:"include_vmdisk_data_source_urls,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *VmGetArg) Reset()         { *m = VmGetArg{} }
func (m *VmGetArg) String() string { return proto.CompactTextString(m) }
func (*VmGetArg) ProtoMessage()    {}
func (*VmGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{29}
}

func (m *VmGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGetArg.Unmarshal(m, b)
}
func (m *VmGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGetArg.Marshal(b, m, deterministic)
}
func (m *VmGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGetArg.Merge(m, src)
}
func (m *VmGetArg) XXX_Size() int {
	return xxx_messageInfo_VmGetArg.Size(m)
}
func (m *VmGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGetArg proto.InternalMessageInfo

func (m *VmGetArg) GetRequest() *GenericQueryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *VmGetArg) GetIncludeNonExistent() bool {
	if m != nil && m.IncludeNonExistent != nil {
		return *m.IncludeNonExistent
	}
	return false
}

func (m *VmGetArg) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

func (m *VmGetArg) GetIncludeVmdiskSizes() bool {
	if m != nil && m.IncludeVmdiskSizes != nil {
		return *m.IncludeVmdiskSizes
	}
	return false
}

func (m *VmGetArg) GetIncludeAddressAssignments() bool {
	if m != nil && m.IncludeAddressAssignments != nil {
		return *m.IncludeAddressAssignments
	}
	return false
}

func (m *VmGetArg) GetIncludeVmdiskPaths() bool {
	if m != nil && m.IncludeVmdiskPaths != nil {
		return *m.IncludeVmdiskPaths
	}
	return false
}

func (m *VmGetArg) GetIncludeVmdiskDataSourceUrls() bool {
	if m != nil && m.IncludeVmdiskDataSourceUrls != nil {
		return *m.IncludeVmdiskDataSourceUrls
	}
	return false
}

type VmGetRet struct {
	// The query result.
	Response *GenericQueryResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	// A list of sorted, filtered VMs.
	VmInfoList           []*VmInfo `protobuf:"bytes,2,rep,name=vm_info_list,json=vmInfoList" json:"vm_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VmGetRet) Reset()         { *m = VmGetRet{} }
func (m *VmGetRet) String() string { return proto.CompactTextString(m) }
func (*VmGetRet) ProtoMessage()    {}
func (*VmGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{30}
}

func (m *VmGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGetRet.Unmarshal(m, b)
}
func (m *VmGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGetRet.Marshal(b, m, deterministic)
}
func (m *VmGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGetRet.Merge(m, src)
}
func (m *VmGetRet) XXX_Size() int {
	return xxx_messageInfo_VmGetRet.Size(m)
}
func (m *VmGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGetRet proto.InternalMessageInfo

func (m *VmGetRet) GetResponse() *GenericQueryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *VmGetRet) GetVmInfoList() []*VmInfo {
	if m != nil {
		return m.VmInfoList
	}
	return nil
}

type VmSpecGetArg struct {
	// List of VM UUIDs. If none is specified, then return specs for all VMs.
	VmUuidList           [][]byte `protobuf:"bytes,1,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSpecGetArg) Reset()         { *m = VmSpecGetArg{} }
func (m *VmSpecGetArg) String() string { return proto.CompactTextString(m) }
func (*VmSpecGetArg) ProtoMessage()    {}
func (*VmSpecGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{31}
}

func (m *VmSpecGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSpecGetArg.Unmarshal(m, b)
}
func (m *VmSpecGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSpecGetArg.Marshal(b, m, deterministic)
}
func (m *VmSpecGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSpecGetArg.Merge(m, src)
}
func (m *VmSpecGetArg) XXX_Size() int {
	return xxx_messageInfo_VmSpecGetArg.Size(m)
}
func (m *VmSpecGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSpecGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmSpecGetArg proto.InternalMessageInfo

func (m *VmSpecGetArg) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

type VmSpecGetRet struct {
	// The query result.
	Response *GenericQueryResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	// A list of sorted vm_spec JSON strings.
	VmSpecList           []string `protobuf:"bytes,2,rep,name=vm_spec_list,json=vmSpecList" json:"vm_spec_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSpecGetRet) Reset()         { *m = VmSpecGetRet{} }
func (m *VmSpecGetRet) String() string { return proto.CompactTextString(m) }
func (*VmSpecGetRet) ProtoMessage()    {}
func (*VmSpecGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{32}
}

func (m *VmSpecGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSpecGetRet.Unmarshal(m, b)
}
func (m *VmSpecGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSpecGetRet.Marshal(b, m, deterministic)
}
func (m *VmSpecGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSpecGetRet.Merge(m, src)
}
func (m *VmSpecGetRet) XXX_Size() int {
	return xxx_messageInfo_VmSpecGetRet.Size(m)
}
func (m *VmSpecGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSpecGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSpecGetRet proto.InternalMessageInfo

func (m *VmSpecGetRet) GetResponse() *GenericQueryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *VmSpecGetRet) GetVmSpecList() []string {
	if m != nil {
		return m.VmSpecList
	}
	return nil
}

//-----------------------------------------------------------------------------
// This RPC is for getting the current dormant VM state on a given host, e.g.
// checking if the VM runs on a particular host during cross cluster live
// migration. Note that the VM must have been sync rep enabled, so that we can
// associate the stretch params to determine the remote cluster IP..
type DormantVmStateGetArg struct {
	// VM UUID.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The UUID of the host on which the VM may run.
	HostUuid             []byte   `protobuf:"bytes,2,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DormantVmStateGetArg) Reset()         { *m = DormantVmStateGetArg{} }
func (m *DormantVmStateGetArg) String() string { return proto.CompactTextString(m) }
func (*DormantVmStateGetArg) ProtoMessage()    {}
func (*DormantVmStateGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{33}
}

func (m *DormantVmStateGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DormantVmStateGetArg.Unmarshal(m, b)
}
func (m *DormantVmStateGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DormantVmStateGetArg.Marshal(b, m, deterministic)
}
func (m *DormantVmStateGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DormantVmStateGetArg.Merge(m, src)
}
func (m *DormantVmStateGetArg) XXX_Size() int {
	return xxx_messageInfo_DormantVmStateGetArg.Size(m)
}
func (m *DormantVmStateGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_DormantVmStateGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_DormantVmStateGetArg proto.InternalMessageInfo

func (m *DormantVmStateGetArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *DormantVmStateGetArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

type DormantVmStateGetRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DormantVmStateGetRet) Reset()         { *m = DormantVmStateGetRet{} }
func (m *DormantVmStateGetRet) String() string { return proto.CompactTextString(m) }
func (*DormantVmStateGetRet) ProtoMessage()    {}
func (*DormantVmStateGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{34}
}

func (m *DormantVmStateGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DormantVmStateGetRet.Unmarshal(m, b)
}
func (m *DormantVmStateGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DormantVmStateGetRet.Marshal(b, m, deterministic)
}
func (m *DormantVmStateGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DormantVmStateGetRet.Merge(m, src)
}
func (m *DormantVmStateGetRet) XXX_Size() int {
	return xxx_messageInfo_DormantVmStateGetRet.Size(m)
}
func (m *DormantVmStateGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DormantVmStateGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_DormantVmStateGetRet proto.InternalMessageInfo

func (m *DormantVmStateGetRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

// Potentially we can return other VM running states, such as states of CD-ROMs.
type DormantVmStateGetTaskRet struct {
	// The VM power state.
	VmState              *VmState_State `protobuf:"varint,1,opt,name=vm_state,json=vmState,enum=nutanix.acropolis.VmState_State" json:"vm_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DormantVmStateGetTaskRet) Reset()         { *m = DormantVmStateGetTaskRet{} }
func (m *DormantVmStateGetTaskRet) String() string { return proto.CompactTextString(m) }
func (*DormantVmStateGetTaskRet) ProtoMessage()    {}
func (*DormantVmStateGetTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{35}
}

func (m *DormantVmStateGetTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DormantVmStateGetTaskRet.Unmarshal(m, b)
}
func (m *DormantVmStateGetTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DormantVmStateGetTaskRet.Marshal(b, m, deterministic)
}
func (m *DormantVmStateGetTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DormantVmStateGetTaskRet.Merge(m, src)
}
func (m *DormantVmStateGetTaskRet) XXX_Size() int {
	return xxx_messageInfo_DormantVmStateGetTaskRet.Size(m)
}
func (m *DormantVmStateGetTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DormantVmStateGetTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_DormantVmStateGetTaskRet proto.InternalMessageInfo

func (m *DormantVmStateGetTaskRet) GetVmState() VmState_State {
	if m != nil && m.VmState != nil {
		return *m.VmState
	}
	return VmState_kUnknown
}

type VmCloneArg struct {
	// The source may either by a VM or a snapshot. If the source is a VM, the
	// operation will create a temporary snapshot from which to clone the target
	// VMs. The client may provide a version 4 UUID for this temporary snapshot
	// for idempotence.
	SourceVmUuid       []byte `protobuf:"bytes,1,opt,name=source_vm_uuid,json=sourceVmUuid" json:"source_vm_uuid,omitempty"`
	SourceSnapshotUuid []byte `protobuf:"bytes,2,opt,name=source_snapshot_uuid,json=sourceSnapshotUuid" json:"source_snapshot_uuid,omitempty"`
	// If the source is a VM, the caller may optionally provide a logical
	// timestamp.
	SourceVmLogicalTimestamp *int64 `protobuf:"varint,3,opt,name=source_vm_logical_timestamp,json=sourceVmLogicalTimestamp,def=-1" json:"source_vm_logical_timestamp,omitempty"`
	// List of clone specifications.
	SpecList []*VmCloneSpec `protobuf:"bytes,4,rep,name=spec_list,json=specList" json:"spec_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,7,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCloneArg) Reset()         { *m = VmCloneArg{} }
func (m *VmCloneArg) String() string { return proto.CompactTextString(m) }
func (*VmCloneArg) ProtoMessage()    {}
func (*VmCloneArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{36}
}

func (m *VmCloneArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCloneArg.Unmarshal(m, b)
}
func (m *VmCloneArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCloneArg.Marshal(b, m, deterministic)
}
func (m *VmCloneArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCloneArg.Merge(m, src)
}
func (m *VmCloneArg) XXX_Size() int {
	return xxx_messageInfo_VmCloneArg.Size(m)
}
func (m *VmCloneArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCloneArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmCloneArg proto.InternalMessageInfo

const Default_VmCloneArg_SourceVmLogicalTimestamp int64 = -1

func (m *VmCloneArg) GetSourceVmUuid() []byte {
	if m != nil {
		return m.SourceVmUuid
	}
	return nil
}

func (m *VmCloneArg) GetSourceSnapshotUuid() []byte {
	if m != nil {
		return m.SourceSnapshotUuid
	}
	return nil
}

func (m *VmCloneArg) GetSourceVmLogicalTimestamp() int64 {
	if m != nil && m.SourceVmLogicalTimestamp != nil {
		return *m.SourceVmLogicalTimestamp
	}
	return Default_VmCloneArg_SourceVmLogicalTimestamp
}

func (m *VmCloneArg) GetSpecList() []*VmCloneSpec {
	if m != nil {
		return m.SpecList
	}
	return nil
}

func (m *VmCloneArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmCloneArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmCloneArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmCloneRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmCloneTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCloneRet) Reset()         { *m = VmCloneRet{} }
func (m *VmCloneRet) String() string { return proto.CompactTextString(m) }
func (*VmCloneRet) ProtoMessage()    {}
func (*VmCloneRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{37}
}

func (m *VmCloneRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCloneRet.Unmarshal(m, b)
}
func (m *VmCloneRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCloneRet.Marshal(b, m, deterministic)
}
func (m *VmCloneRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCloneRet.Merge(m, src)
}
func (m *VmCloneRet) XXX_Size() int {
	return xxx_messageInfo_VmCloneRet.Size(m)
}
func (m *VmCloneRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCloneRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCloneRet proto.InternalMessageInfo

func (m *VmCloneRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmCloneTaskRet struct {
	// Information about the resulting clones. The inner ret value is a
	// VmCreateTaskRet.
	ResponseList         []*MetaResponse `protobuf:"bytes,1,rep,name=response_list,json=responseList" json:"response_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VmCloneTaskRet) Reset()         { *m = VmCloneTaskRet{} }
func (m *VmCloneTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmCloneTaskRet) ProtoMessage()    {}
func (*VmCloneTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{38}
}

func (m *VmCloneTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCloneTaskRet.Unmarshal(m, b)
}
func (m *VmCloneTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCloneTaskRet.Marshal(b, m, deterministic)
}
func (m *VmCloneTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCloneTaskRet.Merge(m, src)
}
func (m *VmCloneTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmCloneTaskRet.Size(m)
}
func (m *VmCloneTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCloneTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCloneTaskRet proto.InternalMessageInfo

func (m *VmCloneTaskRet) GetResponseList() []*MetaResponse {
	if m != nil {
		return m.ResponseList
	}
	return nil
}

type VmRestoreArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// The UUID of the snapshot from which to restore.
	SnapshotUuid []byte `protobuf:"bytes,3,opt,name=snapshot_uuid,json=snapshotUuid" json:"snapshot_uuid,omitempty"`
	// Whether to reset the VM's current networking configuration. If this flag
	// is set, the VM's current network adapters will be replaced with the
	// network adapters specified in the snapshot. Otherwise, the VM's current
	// networking adapters will be retained, and the network adapters specified
	// in the snapshot will be ignored.
	RestoreNetworkConfig *bool `protobuf:"varint,4,opt,name=restore_network_config,json=restoreNetworkConfig,def=1" json:"restore_network_config,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,7,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRestoreArg) Reset()         { *m = VmRestoreArg{} }
func (m *VmRestoreArg) String() string { return proto.CompactTextString(m) }
func (*VmRestoreArg) ProtoMessage()    {}
func (*VmRestoreArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{39}
}

func (m *VmRestoreArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRestoreArg.Unmarshal(m, b)
}
func (m *VmRestoreArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRestoreArg.Marshal(b, m, deterministic)
}
func (m *VmRestoreArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRestoreArg.Merge(m, src)
}
func (m *VmRestoreArg) XXX_Size() int {
	return xxx_messageInfo_VmRestoreArg.Size(m)
}
func (m *VmRestoreArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRestoreArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmRestoreArg proto.InternalMessageInfo

const Default_VmRestoreArg_VmLogicalTimestamp int64 = -1
const Default_VmRestoreArg_RestoreNetworkConfig bool = true

func (m *VmRestoreArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmRestoreArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmRestoreArg_VmLogicalTimestamp
}

func (m *VmRestoreArg) GetSnapshotUuid() []byte {
	if m != nil {
		return m.SnapshotUuid
	}
	return nil
}

func (m *VmRestoreArg) GetRestoreNetworkConfig() bool {
	if m != nil && m.RestoreNetworkConfig != nil {
		return *m.RestoreNetworkConfig
	}
	return Default_VmRestoreArg_RestoreNetworkConfig
}

func (m *VmRestoreArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmRestoreArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmRestoreArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmRestoreRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmRestoreTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRestoreRet) Reset()         { *m = VmRestoreRet{} }
func (m *VmRestoreRet) String() string { return proto.CompactTextString(m) }
func (*VmRestoreRet) ProtoMessage()    {}
func (*VmRestoreRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{40}
}

func (m *VmRestoreRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRestoreRet.Unmarshal(m, b)
}
func (m *VmRestoreRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRestoreRet.Marshal(b, m, deterministic)
}
func (m *VmRestoreRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRestoreRet.Merge(m, src)
}
func (m *VmRestoreRet) XXX_Size() int {
	return xxx_messageInfo_VmRestoreRet.Size(m)
}
func (m *VmRestoreRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRestoreRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmRestoreRet proto.InternalMessageInfo

func (m *VmRestoreRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmRestoreTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRestoreTaskRet) Reset()         { *m = VmRestoreTaskRet{} }
func (m *VmRestoreTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmRestoreTaskRet) ProtoMessage()    {}
func (*VmRestoreTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{41}
}

func (m *VmRestoreTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRestoreTaskRet.Unmarshal(m, b)
}
func (m *VmRestoreTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRestoreTaskRet.Marshal(b, m, deterministic)
}
func (m *VmRestoreTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRestoreTaskRet.Merge(m, src)
}
func (m *VmRestoreTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmRestoreTaskRet.Size(m)
}
func (m *VmRestoreTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRestoreTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmRestoreTaskRet proto.InternalMessageInfo

type VmMigrateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, may be provided for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// The destination host identifier. If no host is provided, the Acropolis
	// scheduler will choose one.
	HostUuid []byte `protobuf:"bytes,3,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// Whether to do live migration (versus suspended migration).
	Live *bool `protobuf:"varint,4,opt,name=live,def=1" json:"live,omitempty"`
	// Target maximum bandwidth in MiB/s to use for migration. Zero means
	// no limit (use all available bandwidth).
	BandwidthMbps *uint32 `protobuf:"varint,5,opt,name=bandwidth_mbps,json=bandwidthMbps" json:"bandwidth_mbps,omitempty"`
	// Whether to restore VM data locality when host is back to kAcropolisNormal
	// state.
	// For internal use only.
	SetRemovedFromHost *bool `protobuf:"varint,6,opt,name=set_removed_from_host,json=setRemovedFromHost" json:"set_removed_from_host,omitempty"`
	// Whether this migration is part of HA healing process.
	HaHealing *bool `protobuf:"varint,7,opt,name=ha_healing,json=haHealing" json:"ha_healing,omitempty"`
	// Migrate from host identifier. VM will not migrate if VM is not currently
	// on the host specified by migrate_from_host_uuid.
	MigrateFromHostUuid []byte `protobuf:"bytes,8,opt,name=migrate_from_host_uuid,json=migrateFromHostUuid" json:"migrate_from_host_uuid,omitempty"`
	// Whether to use reserved segment for scheduling the VM.
	UseSegments *bool `protobuf:"varint,9,opt,name=use_segments,json=useSegments" json:"use_segments,omitempty"`
	// Indicates whether this migration is associated with maintenance mode
	// entry.
	Failover *bool `protobuf:"varint,10,opt,name=failover" json:"failover,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,11,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,12,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Pre-allocated parcel UUID for the destination.
	ParcelUuid []byte `protobuf:"bytes,13,opt,name=parcel_uuid,json=parcelUuid" json:"parcel_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,14,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures *bool `protobuf:"varint,15,opt,name=display_failures,json=displayFailures,def=1" json:"display_failures,omitempty"`
	// Message describing the task. It should attempt to be more specific
	// about the kind of entities involved with the task. (For e.g. in the
	// enter_maintenance_mode_task, some message examples could be "Migrate
	// normal VM for maintenance mode", "Acpi shutdown agent VM for maintenance
	// mode")
	Message *string `protobuf:"bytes,16,opt,name=message" json:"message,omitempty"`
	// If set to false, then a migrate request which cannot honor a VM's vNUMA
	// pinning configuration will fallback to splatter.
	StrictVnumaPinning *bool `protobuf:"varint,17,opt,name=strict_vnuma_pinning,json=strictVnumaPinning,def=1" json:"strict_vnuma_pinning,omitempty"`
	// Set max_downtime for migration, in ms
	// If not set, we let qemu pick defaults.
	MaxDowntimeMs *uint64 `protobuf:"varint,18,opt,name=max_downtime_ms,json=maxDowntimeMs" json:"max_downtime_ms,omitempty"`
	// New host affinity to uphold. Used by VmAffinityUpdateTask.
	Affinity *Affinity `protobuf:"bytes,19,opt,name=affinity" json:"affinity,omitempty"`
	// Logical timestamp for the segment assignment at task creation.
	SegmentsTimestamp *int64 `protobuf:"varint,20,opt,name=segments_timestamp,json=segmentsTimestamp" json:"segments_timestamp,omitempty"`
	// List of vGpu assignments to sbdf of pGpus. This field should only be
	// populated from placement solver.
	VgpuSbdfList         []*VGPUBootSpec `protobuf:"bytes,21,rep,name=vgpu_sbdf_list,json=vgpuSbdfList" json:"vgpu_sbdf_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VmMigrateArg) Reset()         { *m = VmMigrateArg{} }
func (m *VmMigrateArg) String() string { return proto.CompactTextString(m) }
func (*VmMigrateArg) ProtoMessage()    {}
func (*VmMigrateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{42}
}

func (m *VmMigrateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmMigrateArg.Unmarshal(m, b)
}
func (m *VmMigrateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmMigrateArg.Marshal(b, m, deterministic)
}
func (m *VmMigrateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmMigrateArg.Merge(m, src)
}
func (m *VmMigrateArg) XXX_Size() int {
	return xxx_messageInfo_VmMigrateArg.Size(m)
}
func (m *VmMigrateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmMigrateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmMigrateArg proto.InternalMessageInfo

const Default_VmMigrateArg_VmLogicalTimestamp int64 = -1
const Default_VmMigrateArg_Live bool = true
const Default_VmMigrateArg_DisplayFailures bool = true
const Default_VmMigrateArg_StrictVnumaPinning bool = true

func (m *VmMigrateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmMigrateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmMigrateArg_VmLogicalTimestamp
}

func (m *VmMigrateArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *VmMigrateArg) GetLive() bool {
	if m != nil && m.Live != nil {
		return *m.Live
	}
	return Default_VmMigrateArg_Live
}

func (m *VmMigrateArg) GetBandwidthMbps() uint32 {
	if m != nil && m.BandwidthMbps != nil {
		return *m.BandwidthMbps
	}
	return 0
}

func (m *VmMigrateArg) GetSetRemovedFromHost() bool {
	if m != nil && m.SetRemovedFromHost != nil {
		return *m.SetRemovedFromHost
	}
	return false
}

func (m *VmMigrateArg) GetHaHealing() bool {
	if m != nil && m.HaHealing != nil {
		return *m.HaHealing
	}
	return false
}

func (m *VmMigrateArg) GetMigrateFromHostUuid() []byte {
	if m != nil {
		return m.MigrateFromHostUuid
	}
	return nil
}

func (m *VmMigrateArg) GetUseSegments() bool {
	if m != nil && m.UseSegments != nil {
		return *m.UseSegments
	}
	return false
}

func (m *VmMigrateArg) GetFailover() bool {
	if m != nil && m.Failover != nil {
		return *m.Failover
	}
	return false
}

func (m *VmMigrateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmMigrateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmMigrateArg) GetParcelUuid() []byte {
	if m != nil {
		return m.ParcelUuid
	}
	return nil
}

func (m *VmMigrateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmMigrateArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return Default_VmMigrateArg_DisplayFailures
}

func (m *VmMigrateArg) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *VmMigrateArg) GetStrictVnumaPinning() bool {
	if m != nil && m.StrictVnumaPinning != nil {
		return *m.StrictVnumaPinning
	}
	return Default_VmMigrateArg_StrictVnumaPinning
}

func (m *VmMigrateArg) GetMaxDowntimeMs() uint64 {
	if m != nil && m.MaxDowntimeMs != nil {
		return *m.MaxDowntimeMs
	}
	return 0
}

func (m *VmMigrateArg) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *VmMigrateArg) GetSegmentsTimestamp() int64 {
	if m != nil && m.SegmentsTimestamp != nil {
		return *m.SegmentsTimestamp
	}
	return 0
}

func (m *VmMigrateArg) GetVgpuSbdfList() []*VGPUBootSpec {
	if m != nil {
		return m.VgpuSbdfList
	}
	return nil
}

type VmMigrateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmMigrateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmMigrateRet) Reset()         { *m = VmMigrateRet{} }
func (m *VmMigrateRet) String() string { return proto.CompactTextString(m) }
func (*VmMigrateRet) ProtoMessage()    {}
func (*VmMigrateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{43}
}

func (m *VmMigrateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmMigrateRet.Unmarshal(m, b)
}
func (m *VmMigrateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmMigrateRet.Marshal(b, m, deterministic)
}
func (m *VmMigrateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmMigrateRet.Merge(m, src)
}
func (m *VmMigrateRet) XXX_Size() int {
	return xxx_messageInfo_VmMigrateRet.Size(m)
}
func (m *VmMigrateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmMigrateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmMigrateRet proto.InternalMessageInfo

func (m *VmMigrateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmMigrateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmMigrateTaskRet) Reset()         { *m = VmMigrateTaskRet{} }
func (m *VmMigrateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmMigrateTaskRet) ProtoMessage()    {}
func (*VmMigrateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{44}
}

func (m *VmMigrateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmMigrateTaskRet.Unmarshal(m, b)
}
func (m *VmMigrateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmMigrateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmMigrateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmMigrateTaskRet.Merge(m, src)
}
func (m *VmMigrateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmMigrateTaskRet.Size(m)
}
func (m *VmMigrateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmMigrateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmMigrateTaskRet proto.InternalMessageInfo

//Deprecated
type VmMigrateAbortArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, may be provided for consistency.
	VmLogicalTimestamp   *int64   `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmMigrateAbortArg) Reset()         { *m = VmMigrateAbortArg{} }
func (m *VmMigrateAbortArg) String() string { return proto.CompactTextString(m) }
func (*VmMigrateAbortArg) ProtoMessage()    {}
func (*VmMigrateAbortArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{45}
}

func (m *VmMigrateAbortArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmMigrateAbortArg.Unmarshal(m, b)
}
func (m *VmMigrateAbortArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmMigrateAbortArg.Marshal(b, m, deterministic)
}
func (m *VmMigrateAbortArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmMigrateAbortArg.Merge(m, src)
}
func (m *VmMigrateAbortArg) XXX_Size() int {
	return xxx_messageInfo_VmMigrateAbortArg.Size(m)
}
func (m *VmMigrateAbortArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmMigrateAbortArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmMigrateAbortArg proto.InternalMessageInfo

const Default_VmMigrateAbortArg_VmLogicalTimestamp int64 = -1

func (m *VmMigrateAbortArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmMigrateAbortArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmMigrateAbortArg_VmLogicalTimestamp
}

//Deprecated
type VmMigrateAbortRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmMigrateAbortRet) Reset()         { *m = VmMigrateAbortRet{} }
func (m *VmMigrateAbortRet) String() string { return proto.CompactTextString(m) }
func (*VmMigrateAbortRet) ProtoMessage()    {}
func (*VmMigrateAbortRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{46}
}

func (m *VmMigrateAbortRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmMigrateAbortRet.Unmarshal(m, b)
}
func (m *VmMigrateAbortRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmMigrateAbortRet.Marshal(b, m, deterministic)
}
func (m *VmMigrateAbortRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmMigrateAbortRet.Merge(m, src)
}
func (m *VmMigrateAbortRet) XXX_Size() int {
	return xxx_messageInfo_VmMigrateAbortRet.Size(m)
}
func (m *VmMigrateAbortRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmMigrateAbortRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmMigrateAbortRet proto.InternalMessageInfo

type VmUpdateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// The VM's human-readable name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// An arbitrary string describing the VM.
	Annotation *string `protobuf:"bytes,4,opt,name=annotation" json:"annotation,omitempty"`
	// Number of vCPUs (sockets).
	NumVcpus *uint64 `protobuf:"varint,5,opt,name=num_vcpus,json=numVcpus" json:"num_vcpus,omitempty"`
	// The amount of RAM, in megabytes.
	MemoryMb *uint64 `protobuf:"varint,6,opt,name=memory_mb,json=memoryMb" json:"memory_mb,omitempty"`
	// The boot configuration. Any updates to the boot configuration will be
	// applied during the next VM power cycle (but not reset).
	Boot *VmBootConfig `protobuf:"bytes,7,opt,name=boot" json:"boot,omitempty"`
	// The timezone for the VM's hardware clock. Any updates to the timezone will
	// be applied during the next VM power cycle (but not reset). The default is
	// UTC.
	HwclockTimezone *string `protobuf:"bytes,8,opt,name=hwclock_timezone,json=hwclockTimezone" json:"hwclock_timezone,omitempty"`
	// Priority for restarting in case of HA event.
	HaPriority *int64 `protobuf:"varint,9,opt,name=ha_priority,json=haPriority" json:"ha_priority,omitempty"`
	// Number of cores per vCPU.
	NumCoresPerVcpu *int64 `protobuf:"varint,10,opt,name=num_cores_per_vcpu,json=numCoresPerVcpu" json:"num_cores_per_vcpu,omitempty"`
	// Clear "removed_from_host_uuid" from VmInfo
	ClearRemovedFromHost *bool `protobuf:"varint,11,opt,name=clear_removed_from_host,json=clearRemovedFromHost" json:"clear_removed_from_host,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,12,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,13,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// If set to a non-empty string, this VM should be considered incompatible
	// with DR workflows.
	//
	// This field is deprecated. It should be exposed in the REST API, but as a
	// hidden parameter. In the future, it will be removed in favor of using tags
	// for identifying service VMs.
	CbrNotCapableReason *string `protobuf:"bytes,14,opt,name=cbr_not_capable_reason,json=cbrNotCapableReason" json:"cbr_not_capable_reason,omitempty"`
	// Whether to update the serial port configuration.
	UpdateSerialPortList *bool `protobuf:"varint,15,opt,name=update_serial_port_list,json=updateSerialPortList" json:"update_serial_port_list,omitempty"`
	// The new serial port configuration, if update_serial_port_list is True.
	SerialPortList []*VmSerialPortConfig `protobuf:"bytes,16,rep,name=serial_port_list,json=serialPortList" json:"serial_port_list,omitempty"`
	// Whether or not to have a VGA console.
	VgaConsole *bool `protobuf:"varint,17,opt,name=vga_console,json=vgaConsole" json:"vga_console,omitempty"`
	// Deprecated. Use VmAffinityUpdateTask.
	Affinity *Affinity `protobuf:"bytes,18,opt,name=affinity" json:"affinity,omitempty"`
	// Whether to pass through the host's CPU features.
	CpuPassthrough *bool `protobuf:"varint,19,opt,name=cpu_passthrough,json=cpuPassthrough" json:"cpu_passthrough,omitempty"`
	// Additional comma-separated VM specific flags.
	ExtraFlags []*GenericKeyValuePair `protobuf:"bytes,20,rep,name=extra_flags,json=extraFlags" json:"extra_flags,omitempty"`
	// UUID of VmGroup that VM belongs to.
	VmGroupUuid []byte `protobuf:"bytes,21,opt,name=vm_group_uuid,json=vmGroupUuid" json:"vm_group_uuid,omitempty"`
	// Deprecated. Use VmAffinityUpdateTask.
	ClearAffinity *bool `protobuf:"varint,22,opt,name=clear_affinity,json=clearAffinity" json:"clear_affinity,omitempty"`
	// Whether this is an agent VM.
	AgentVm *bool `protobuf:"varint,23,opt,name=agent_vm,json=agentVm" json:"agent_vm,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,24,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether to update the GPU resource configuration.
	UpdateGpuList *bool `protobuf:"varint,25,opt,name=update_gpu_list,json=updateGpuList" json:"update_gpu_list,omitempty"`
	// GPU resources allocated to VM.
	GpuConfigList []*VmGPUConfig `protobuf:"bytes,26,rep,name=gpu_config_list,json=gpuConfigList" json:"gpu_config_list,omitempty"`
	// The number of vNUMA nodes.
	NumVnumaNodes *uint64 `protobuf:"varint,27,opt,name=num_vnuma_nodes,json=numVnumaNodes" json:"num_vnuma_nodes,omitempty"`
	// Whether to disable Nutanix branding.
	DisableBranding *bool `protobuf:"varint,28,opt,name=disable_branding,json=disableBranding" json:"disable_branding,omitempty"`
	// The type of the VM.
	VmType *VmType `protobuf:"varint,29,opt,name=vm_type,json=vmType,enum=nutanix.acropolis.VmType,def=1" json:"vm_type,omitempty"`
	// Whether host metrics should be enabled for this VM.
	EnableMetrics *bool `protobuf:"varint,30,opt,name=enable_metrics,json=enableMetrics" json:"enable_metrics,omitempty"`
	// Indicates how the power state changes.
	PowerStateMechanism *PowerStateMechanism `protobuf:"varint,31,opt,name=power_state_mechanism,json=powerStateMechanism,enum=nutanix.acropolis.PowerStateMechanism" json:"power_state_mechanism,omitempty"`
	// Indicates whether to execute set script before NGT shutdown/reboot.
	NgtEnableScriptExec *bool `protobuf:"varint,32,opt,name=ngt_enable_script_exec,json=ngtEnableScriptExec" json:"ngt_enable_script_exec,omitempty"`
	// Indicates whether to abort NGT shutdown/reboot if script fails.
	NgtFailOnScriptFailure *bool `protobuf:"varint,33,opt,name=ngt_fail_on_script_failure,json=ngtFailOnScriptFailure" json:"ngt_fail_on_script_failure,omitempty"`
	// Whether to clear the VM's parcels' VM group UUID field.
	ClearVmGroup *bool `protobuf:"varint,34,opt,name=clear_vm_group,json=clearVmGroup" json:"clear_vm_group,omitempty"`
	// Number of logical threads per core.
	NumThreadsPerCore *int64 `protobuf:"varint,35,opt,name=num_threads_per_core,json=numThreadsPerCore" json:"num_threads_per_core,omitempty"`
	// Whether to update SyncRep configuration.
	UpdateSyncRepConfigList *bool `protobuf:"varint,36,opt,name=update_sync_rep_config_list,json=updateSyncRepConfigList" json:"update_sync_rep_config_list,omitempty"`
	// VM SyncRep configuration.
	SyncRepConfigList []*VmSyncRepConfig `protobuf:"bytes,37,rep,name=sync_rep_config_list,json=syncRepConfigList" json:"sync_rep_config_list,omitempty"`
	// Indicates whether the vcpus are hard pinned to specific pcpus.
	VcpuHardPin *bool `protobuf:"varint,38,opt,name=vcpu_hard_pin,json=vcpuHardPin" json:"vcpu_hard_pin,omitempty"`
	// Machine type of the VM.
	MachineType *string `protobuf:"bytes,39,opt,name=machine_type,json=machineType" json:"machine_type,omitempty"`
	// If True, the memory that belongs to the VM may reside outside of physical
	// memory. Otherwise, Acropolis will ensure that amount of memory the VM is
	// configured with resides completely in physical memory.
	MemoryOvercommit *bool `protobuf:"varint,40,opt,name=memory_overcommit,json=memoryOvercommit" json:"memory_overcommit,omitempty"`
	// If non-empty, fail all VM tasks except for those tasks whose RPC names are
	// found in this list. If this list is empty, allow all tasks.
	DisableUpdateWhiteList []string `protobuf:"bytes,41,rep,name=disable_update_white_list,json=disableUpdateWhiteList" json:"disable_update_white_list,omitempty"`
	// Determines the initial memory allocation for this overcommitted VM at the
	// time of power on. This value should be greater than or equal to
	// minimum_memory_mb if configured.
	PowerOnMemoryMb *uint64 `protobuf:"varint,42,opt,name=power_on_memory_mb,json=powerOnMemoryMb" json:"power_on_memory_mb,omitempty"`
	// Determines the squeeze limit and also the minimum protection guarantee for
	// this overcommitted VM. This value should be less than or equal to
	// power_on_memory_mb if configured.
	MinimumMemoryMb *uint64 `protobuf:"varint,43,opt,name=minimum_memory_mb,json=minimumMemoryMb" json:"minimum_memory_mb,omitempty"`
	// If False, it will prevent users from hot plugging and unplugging of
	// PCI based devices from within VMs and from the hypervisor stack. Although
	// this applies equally for all VMs, it is primarily applicable for Windows
	// based VMs. By default, we allow hot-plugging and unplugging of devices.
	AllowHotPlug *bool `protobuf:"varint,44,opt,name=allow_hot_plug,json=allowHotPlug,def=1" json:"allow_hot_plug,omitempty"`
	// Enable/Disable flash mode for all VM disks.
	FlashMode            *bool    `protobuf:"varint,45,opt,name=flash_mode,json=flashMode" json:"flash_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateArg) Reset()         { *m = VmUpdateArg{} }
func (m *VmUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VmUpdateArg) ProtoMessage()    {}
func (*VmUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{47}
}

func (m *VmUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateArg.Unmarshal(m, b)
}
func (m *VmUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateArg.Marshal(b, m, deterministic)
}
func (m *VmUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateArg.Merge(m, src)
}
func (m *VmUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VmUpdateArg.Size(m)
}
func (m *VmUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateArg proto.InternalMessageInfo

const Default_VmUpdateArg_VmLogicalTimestamp int64 = -1
const Default_VmUpdateArg_VmType VmType = VmType_kGuestVM
const Default_VmUpdateArg_AllowHotPlug bool = true

func (m *VmUpdateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmUpdateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmUpdateArg_VmLogicalTimestamp
}

func (m *VmUpdateArg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VmUpdateArg) GetAnnotation() string {
	if m != nil && m.Annotation != nil {
		return *m.Annotation
	}
	return ""
}

func (m *VmUpdateArg) GetNumVcpus() uint64 {
	if m != nil && m.NumVcpus != nil {
		return *m.NumVcpus
	}
	return 0
}

func (m *VmUpdateArg) GetMemoryMb() uint64 {
	if m != nil && m.MemoryMb != nil {
		return *m.MemoryMb
	}
	return 0
}

func (m *VmUpdateArg) GetBoot() *VmBootConfig {
	if m != nil {
		return m.Boot
	}
	return nil
}

func (m *VmUpdateArg) GetHwclockTimezone() string {
	if m != nil && m.HwclockTimezone != nil {
		return *m.HwclockTimezone
	}
	return ""
}

func (m *VmUpdateArg) GetHaPriority() int64 {
	if m != nil && m.HaPriority != nil {
		return *m.HaPriority
	}
	return 0
}

func (m *VmUpdateArg) GetNumCoresPerVcpu() int64 {
	if m != nil && m.NumCoresPerVcpu != nil {
		return *m.NumCoresPerVcpu
	}
	return 0
}

func (m *VmUpdateArg) GetClearRemovedFromHost() bool {
	if m != nil && m.ClearRemovedFromHost != nil {
		return *m.ClearRemovedFromHost
	}
	return false
}

func (m *VmUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmUpdateArg) GetCbrNotCapableReason() string {
	if m != nil && m.CbrNotCapableReason != nil {
		return *m.CbrNotCapableReason
	}
	return ""
}

func (m *VmUpdateArg) GetUpdateSerialPortList() bool {
	if m != nil && m.UpdateSerialPortList != nil {
		return *m.UpdateSerialPortList
	}
	return false
}

func (m *VmUpdateArg) GetSerialPortList() []*VmSerialPortConfig {
	if m != nil {
		return m.SerialPortList
	}
	return nil
}

func (m *VmUpdateArg) GetVgaConsole() bool {
	if m != nil && m.VgaConsole != nil {
		return *m.VgaConsole
	}
	return false
}

func (m *VmUpdateArg) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *VmUpdateArg) GetCpuPassthrough() bool {
	if m != nil && m.CpuPassthrough != nil {
		return *m.CpuPassthrough
	}
	return false
}

func (m *VmUpdateArg) GetExtraFlags() []*GenericKeyValuePair {
	if m != nil {
		return m.ExtraFlags
	}
	return nil
}

func (m *VmUpdateArg) GetVmGroupUuid() []byte {
	if m != nil {
		return m.VmGroupUuid
	}
	return nil
}

func (m *VmUpdateArg) GetClearAffinity() bool {
	if m != nil && m.ClearAffinity != nil {
		return *m.ClearAffinity
	}
	return false
}

func (m *VmUpdateArg) GetAgentVm() bool {
	if m != nil && m.AgentVm != nil {
		return *m.AgentVm
	}
	return false
}

func (m *VmUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmUpdateArg) GetUpdateGpuList() bool {
	if m != nil && m.UpdateGpuList != nil {
		return *m.UpdateGpuList
	}
	return false
}

func (m *VmUpdateArg) GetGpuConfigList() []*VmGPUConfig {
	if m != nil {
		return m.GpuConfigList
	}
	return nil
}

func (m *VmUpdateArg) GetNumVnumaNodes() uint64 {
	if m != nil && m.NumVnumaNodes != nil {
		return *m.NumVnumaNodes
	}
	return 0
}

func (m *VmUpdateArg) GetDisableBranding() bool {
	if m != nil && m.DisableBranding != nil {
		return *m.DisableBranding
	}
	return false
}

func (m *VmUpdateArg) GetVmType() VmType {
	if m != nil && m.VmType != nil {
		return *m.VmType
	}
	return Default_VmUpdateArg_VmType
}

func (m *VmUpdateArg) GetEnableMetrics() bool {
	if m != nil && m.EnableMetrics != nil {
		return *m.EnableMetrics
	}
	return false
}

func (m *VmUpdateArg) GetPowerStateMechanism() PowerStateMechanism {
	if m != nil && m.PowerStateMechanism != nil {
		return *m.PowerStateMechanism
	}
	return PowerStateMechanism_kHard
}

func (m *VmUpdateArg) GetNgtEnableScriptExec() bool {
	if m != nil && m.NgtEnableScriptExec != nil {
		return *m.NgtEnableScriptExec
	}
	return false
}

func (m *VmUpdateArg) GetNgtFailOnScriptFailure() bool {
	if m != nil && m.NgtFailOnScriptFailure != nil {
		return *m.NgtFailOnScriptFailure
	}
	return false
}

func (m *VmUpdateArg) GetClearVmGroup() bool {
	if m != nil && m.ClearVmGroup != nil {
		return *m.ClearVmGroup
	}
	return false
}

func (m *VmUpdateArg) GetNumThreadsPerCore() int64 {
	if m != nil && m.NumThreadsPerCore != nil {
		return *m.NumThreadsPerCore
	}
	return 0
}

func (m *VmUpdateArg) GetUpdateSyncRepConfigList() bool {
	if m != nil && m.UpdateSyncRepConfigList != nil {
		return *m.UpdateSyncRepConfigList
	}
	return false
}

func (m *VmUpdateArg) GetSyncRepConfigList() []*VmSyncRepConfig {
	if m != nil {
		return m.SyncRepConfigList
	}
	return nil
}

func (m *VmUpdateArg) GetVcpuHardPin() bool {
	if m != nil && m.VcpuHardPin != nil {
		return *m.VcpuHardPin
	}
	return false
}

func (m *VmUpdateArg) GetMachineType() string {
	if m != nil && m.MachineType != nil {
		return *m.MachineType
	}
	return ""
}

func (m *VmUpdateArg) GetMemoryOvercommit() bool {
	if m != nil && m.MemoryOvercommit != nil {
		return *m.MemoryOvercommit
	}
	return false
}

func (m *VmUpdateArg) GetDisableUpdateWhiteList() []string {
	if m != nil {
		return m.DisableUpdateWhiteList
	}
	return nil
}

func (m *VmUpdateArg) GetPowerOnMemoryMb() uint64 {
	if m != nil && m.PowerOnMemoryMb != nil {
		return *m.PowerOnMemoryMb
	}
	return 0
}

func (m *VmUpdateArg) GetMinimumMemoryMb() uint64 {
	if m != nil && m.MinimumMemoryMb != nil {
		return *m.MinimumMemoryMb
	}
	return 0
}

func (m *VmUpdateArg) GetAllowHotPlug() bool {
	if m != nil && m.AllowHotPlug != nil {
		return *m.AllowHotPlug
	}
	return Default_VmUpdateArg_AllowHotPlug
}

func (m *VmUpdateArg) GetFlashMode() bool {
	if m != nil && m.FlashMode != nil {
		return *m.FlashMode
	}
	return false
}

type VmUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateRet) Reset()         { *m = VmUpdateRet{} }
func (m *VmUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmUpdateRet) ProtoMessage()    {}
func (*VmUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{48}
}

func (m *VmUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateRet.Unmarshal(m, b)
}
func (m *VmUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateRet.Merge(m, src)
}
func (m *VmUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmUpdateRet.Size(m)
}
func (m *VmUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateRet proto.InternalMessageInfo

func (m *VmUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateTaskRet) Reset()         { *m = VmUpdateTaskRet{} }
func (m *VmUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmUpdateTaskRet) ProtoMessage()    {}
func (*VmUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{49}
}

func (m *VmUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateTaskRet.Merge(m, src)
}
func (m *VmUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmUpdateTaskRet.Size(m)
}
func (m *VmUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateTaskRet proto.InternalMessageInfo

type VmAffinityUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmAffinityUpdateRet) Reset()         { *m = VmAffinityUpdateRet{} }
func (m *VmAffinityUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmAffinityUpdateRet) ProtoMessage()    {}
func (*VmAffinityUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{50}
}

func (m *VmAffinityUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmAffinityUpdateRet.Unmarshal(m, b)
}
func (m *VmAffinityUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmAffinityUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmAffinityUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmAffinityUpdateRet.Merge(m, src)
}
func (m *VmAffinityUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmAffinityUpdateRet.Size(m)
}
func (m *VmAffinityUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmAffinityUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmAffinityUpdateRet proto.InternalMessageInfo

func (m *VmAffinityUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmAffinityUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmAffinityUpdateTaskRet) Reset()         { *m = VmAffinityUpdateTaskRet{} }
func (m *VmAffinityUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmAffinityUpdateTaskRet) ProtoMessage()    {}
func (*VmAffinityUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{51}
}

func (m *VmAffinityUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmAffinityUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmAffinityUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmAffinityUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmAffinityUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmAffinityUpdateTaskRet.Merge(m, src)
}
func (m *VmAffinityUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmAffinityUpdateTaskRet.Size(m)
}
func (m *VmAffinityUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmAffinityUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmAffinityUpdateTaskRet proto.InternalMessageInfo

type VmSetPowerStateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// The desired state transition.
	Transition *VmStateTransition_Transition `protobuf:"varint,3,opt,name=transition,enum=nutanix.acropolis.VmStateTransition_Transition" json:"transition,omitempty"`
	// Boolean that is only used when we power cycle that indicates when we power
	// the VM back on the VM should be powered on a different host.
	ChangeHost *bool `protobuf:"varint,4,opt,name=change_host,json=changeHost" json:"change_host,omitempty"`
	// Explicit host UUID on which to power on the VM. This parameter is only
	// honored for kPowerOn, or kPowerCycle when change_host is also set.
	HostUuid []byte `protobuf:"bytes,5,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// Indicates whether this power on is associated with HA failover.
	Failover *bool `protobuf:"varint,6,opt,name=failover" json:"failover,omitempty"`
	// Whether to restore VM data locality when host is back to kAcropolisNormal
	// state. This field is no-op for kPowerOn if set to True, which indicates
	// VM task to retain last removed_from_host information.
	// For internal use only.
	SetRemovedFromHost *bool `protobuf:"varint,7,opt,name=set_removed_from_host,json=setRemovedFromHost" json:"set_removed_from_host,omitempty"`
	// Whether to use reserved segment for scheduling the VM.
	UseSegments *bool `protobuf:"varint,8,opt,name=use_segments,json=useSegments" json:"use_segments,omitempty"`
	// Whether this is part of HA healing process.
	HaHealing *bool `protobuf:"varint,9,opt,name=ha_healing,json=haHealing" json:"ha_healing,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,10,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,11,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,12,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// If set to false, then a set power state request which cannot honor a VM's
	// vNUMA pinning configuration will fallback to splatter.
	StrictVnumaPinning *bool `protobuf:"varint,13,opt,name=strict_vnuma_pinning,json=strictVnumaPinning,def=1" json:"strict_vnuma_pinning,omitempty"`
	// Specifies the script execution should be enabled during guest
	// shutdown/reboot.
	EnableScriptExec *bool `protobuf:"varint,14,opt,name=enable_script_exec,json=enableScriptExec,def=0" json:"enable_script_exec,omitempty"`
	// Specifies if guest shutdown/reboot fails on script execution failure.
	FailOnScriptFailure *bool `protobuf:"varint,15,opt,name=fail_on_script_failure,json=failOnScriptFailure,def=0" json:"fail_on_script_failure,omitempty"`
	// UUID of the host where the VM was powered on before.
	FailedNodeUuid []byte `protobuf:"bytes,16,opt,name=failed_node_uuid,json=failedNodeUuid" json:"failed_node_uuid,omitempty"`
	// Logical timestamp for the segment assignment at task creation.
	SegmentsTimestamp *int64 `protobuf:"varint,17,opt,name=segments_timestamp,json=segmentsTimestamp" json:"segments_timestamp,omitempty"`
	// Whether the task was created internally (i.e., as part of RestoreLocality,
	// EnterMaintenanceMode or RestartAllVms).
	SystemTriggered *bool `protobuf:"varint,18,opt,name=system_triggered,json=systemTriggered" json:"system_triggered,omitempty"`
	// List of vGpu assignments to sbdf of pGpus. This field should only be
	// populated from placement solver.
	VgpuSbdfList         []*VGPUBootSpec `protobuf:"bytes,19,rep,name=vgpu_sbdf_list,json=vgpuSbdfList" json:"vgpu_sbdf_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VmSetPowerStateArg) Reset()         { *m = VmSetPowerStateArg{} }
func (m *VmSetPowerStateArg) String() string { return proto.CompactTextString(m) }
func (*VmSetPowerStateArg) ProtoMessage()    {}
func (*VmSetPowerStateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{52}
}

func (m *VmSetPowerStateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSetPowerStateArg.Unmarshal(m, b)
}
func (m *VmSetPowerStateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSetPowerStateArg.Marshal(b, m, deterministic)
}
func (m *VmSetPowerStateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSetPowerStateArg.Merge(m, src)
}
func (m *VmSetPowerStateArg) XXX_Size() int {
	return xxx_messageInfo_VmSetPowerStateArg.Size(m)
}
func (m *VmSetPowerStateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSetPowerStateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmSetPowerStateArg proto.InternalMessageInfo

const Default_VmSetPowerStateArg_VmLogicalTimestamp int64 = -1
const Default_VmSetPowerStateArg_StrictVnumaPinning bool = true
const Default_VmSetPowerStateArg_EnableScriptExec bool = false
const Default_VmSetPowerStateArg_FailOnScriptFailure bool = false

func (m *VmSetPowerStateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmSetPowerStateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmSetPowerStateArg_VmLogicalTimestamp
}

func (m *VmSetPowerStateArg) GetTransition() VmStateTransition_Transition {
	if m != nil && m.Transition != nil {
		return *m.Transition
	}
	return VmStateTransition_kPowerOn
}

func (m *VmSetPowerStateArg) GetChangeHost() bool {
	if m != nil && m.ChangeHost != nil {
		return *m.ChangeHost
	}
	return false
}

func (m *VmSetPowerStateArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *VmSetPowerStateArg) GetFailover() bool {
	if m != nil && m.Failover != nil {
		return *m.Failover
	}
	return false
}

func (m *VmSetPowerStateArg) GetSetRemovedFromHost() bool {
	if m != nil && m.SetRemovedFromHost != nil {
		return *m.SetRemovedFromHost
	}
	return false
}

func (m *VmSetPowerStateArg) GetUseSegments() bool {
	if m != nil && m.UseSegments != nil {
		return *m.UseSegments
	}
	return false
}

func (m *VmSetPowerStateArg) GetHaHealing() bool {
	if m != nil && m.HaHealing != nil {
		return *m.HaHealing
	}
	return false
}

func (m *VmSetPowerStateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmSetPowerStateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmSetPowerStateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmSetPowerStateArg) GetStrictVnumaPinning() bool {
	if m != nil && m.StrictVnumaPinning != nil {
		return *m.StrictVnumaPinning
	}
	return Default_VmSetPowerStateArg_StrictVnumaPinning
}

func (m *VmSetPowerStateArg) GetEnableScriptExec() bool {
	if m != nil && m.EnableScriptExec != nil {
		return *m.EnableScriptExec
	}
	return Default_VmSetPowerStateArg_EnableScriptExec
}

func (m *VmSetPowerStateArg) GetFailOnScriptFailure() bool {
	if m != nil && m.FailOnScriptFailure != nil {
		return *m.FailOnScriptFailure
	}
	return Default_VmSetPowerStateArg_FailOnScriptFailure
}

func (m *VmSetPowerStateArg) GetFailedNodeUuid() []byte {
	if m != nil {
		return m.FailedNodeUuid
	}
	return nil
}

func (m *VmSetPowerStateArg) GetSegmentsTimestamp() int64 {
	if m != nil && m.SegmentsTimestamp != nil {
		return *m.SegmentsTimestamp
	}
	return 0
}

func (m *VmSetPowerStateArg) GetSystemTriggered() bool {
	if m != nil && m.SystemTriggered != nil {
		return *m.SystemTriggered
	}
	return false
}

func (m *VmSetPowerStateArg) GetVgpuSbdfList() []*VGPUBootSpec {
	if m != nil {
		return m.VgpuSbdfList
	}
	return nil
}

type VmSetPowerStateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmSetPowerStateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSetPowerStateRet) Reset()         { *m = VmSetPowerStateRet{} }
func (m *VmSetPowerStateRet) String() string { return proto.CompactTextString(m) }
func (*VmSetPowerStateRet) ProtoMessage()    {}
func (*VmSetPowerStateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{53}
}

func (m *VmSetPowerStateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSetPowerStateRet.Unmarshal(m, b)
}
func (m *VmSetPowerStateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSetPowerStateRet.Marshal(b, m, deterministic)
}
func (m *VmSetPowerStateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSetPowerStateRet.Merge(m, src)
}
func (m *VmSetPowerStateRet) XXX_Size() int {
	return xxx_messageInfo_VmSetPowerStateRet.Size(m)
}
func (m *VmSetPowerStateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSetPowerStateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSetPowerStateRet proto.InternalMessageInfo

func (m *VmSetPowerStateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmSetPowerStateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSetPowerStateTaskRet) Reset()         { *m = VmSetPowerStateTaskRet{} }
func (m *VmSetPowerStateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmSetPowerStateTaskRet) ProtoMessage()    {}
func (*VmSetPowerStateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{54}
}

func (m *VmSetPowerStateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSetPowerStateTaskRet.Unmarshal(m, b)
}
func (m *VmSetPowerStateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSetPowerStateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmSetPowerStateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSetPowerStateTaskRet.Merge(m, src)
}
func (m *VmSetPowerStateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmSetPowerStateTaskRet.Size(m)
}
func (m *VmSetPowerStateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSetPowerStateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSetPowerStateTaskRet proto.InternalMessageInfo

type VmForcePowerOffArg struct {
	// The VM identifier
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// Whether to restore VM data locality when host is back to kAcropolisNormal
	// state.
	// For internal use only.
	SetRemovedFromHost *bool `protobuf:"varint,3,opt,name=set_removed_from_host,json=setRemovedFromHost" json:"set_removed_from_host,omitempty"`
	// Whether to attempt to power off VM using hypervisor command line tools
	// (e.g. virsh).
	TryHypervisorPowerOff *bool `protobuf:"varint,4,opt,name=try_hypervisor_power_off,json=tryHypervisorPowerOff,def=1" json:"try_hypervisor_power_off,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,7,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmForcePowerOffArg) Reset()         { *m = VmForcePowerOffArg{} }
func (m *VmForcePowerOffArg) String() string { return proto.CompactTextString(m) }
func (*VmForcePowerOffArg) ProtoMessage()    {}
func (*VmForcePowerOffArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{55}
}

func (m *VmForcePowerOffArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmForcePowerOffArg.Unmarshal(m, b)
}
func (m *VmForcePowerOffArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmForcePowerOffArg.Marshal(b, m, deterministic)
}
func (m *VmForcePowerOffArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmForcePowerOffArg.Merge(m, src)
}
func (m *VmForcePowerOffArg) XXX_Size() int {
	return xxx_messageInfo_VmForcePowerOffArg.Size(m)
}
func (m *VmForcePowerOffArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmForcePowerOffArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmForcePowerOffArg proto.InternalMessageInfo

const Default_VmForcePowerOffArg_VmLogicalTimestamp int64 = -1
const Default_VmForcePowerOffArg_TryHypervisorPowerOff bool = true

func (m *VmForcePowerOffArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmForcePowerOffArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmForcePowerOffArg_VmLogicalTimestamp
}

func (m *VmForcePowerOffArg) GetSetRemovedFromHost() bool {
	if m != nil && m.SetRemovedFromHost != nil {
		return *m.SetRemovedFromHost
	}
	return false
}

func (m *VmForcePowerOffArg) GetTryHypervisorPowerOff() bool {
	if m != nil && m.TryHypervisorPowerOff != nil {
		return *m.TryHypervisorPowerOff
	}
	return Default_VmForcePowerOffArg_TryHypervisorPowerOff
}

func (m *VmForcePowerOffArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmForcePowerOffArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmForcePowerOffArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmForcePowerOffRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmForcePowerOffTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmForcePowerOffRet) Reset()         { *m = VmForcePowerOffRet{} }
func (m *VmForcePowerOffRet) String() string { return proto.CompactTextString(m) }
func (*VmForcePowerOffRet) ProtoMessage()    {}
func (*VmForcePowerOffRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{56}
}

func (m *VmForcePowerOffRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmForcePowerOffRet.Unmarshal(m, b)
}
func (m *VmForcePowerOffRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmForcePowerOffRet.Marshal(b, m, deterministic)
}
func (m *VmForcePowerOffRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmForcePowerOffRet.Merge(m, src)
}
func (m *VmForcePowerOffRet) XXX_Size() int {
	return xxx_messageInfo_VmForcePowerOffRet.Size(m)
}
func (m *VmForcePowerOffRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmForcePowerOffRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmForcePowerOffRet proto.InternalMessageInfo

func (m *VmForcePowerOffRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmForcePowerOffTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmForcePowerOffTaskRet) Reset()         { *m = VmForcePowerOffTaskRet{} }
func (m *VmForcePowerOffTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmForcePowerOffTaskRet) ProtoMessage()    {}
func (*VmForcePowerOffTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{57}
}

func (m *VmForcePowerOffTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmForcePowerOffTaskRet.Unmarshal(m, b)
}
func (m *VmForcePowerOffTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmForcePowerOffTaskRet.Marshal(b, m, deterministic)
}
func (m *VmForcePowerOffTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmForcePowerOffTaskRet.Merge(m, src)
}
func (m *VmForcePowerOffTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmForcePowerOffTaskRet.Size(m)
}
func (m *VmForcePowerOffTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmForcePowerOffTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmForcePowerOffTaskRet proto.InternalMessageInfo

type VmForceCompleteMigrationArg struct {
	// The VM identifier
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// UUID of the host that is the destination of the migration.
	MigrateToHostUuid []byte `protobuf:"bytes,3,opt,name=migrate_to_host_uuid,json=migrateToHostUuid" json:"migrate_to_host_uuid,omitempty"`
	// Whether the migration is to complete successfully (VM on destination)
	// or unsuccessfully (VM on source).
	MigrationSuccess *bool `protobuf:"varint,4,opt,name=migration_success,json=migrationSuccess" json:"migration_success,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,7,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmForceCompleteMigrationArg) Reset()         { *m = VmForceCompleteMigrationArg{} }
func (m *VmForceCompleteMigrationArg) String() string { return proto.CompactTextString(m) }
func (*VmForceCompleteMigrationArg) ProtoMessage()    {}
func (*VmForceCompleteMigrationArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{58}
}

func (m *VmForceCompleteMigrationArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmForceCompleteMigrationArg.Unmarshal(m, b)
}
func (m *VmForceCompleteMigrationArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmForceCompleteMigrationArg.Marshal(b, m, deterministic)
}
func (m *VmForceCompleteMigrationArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmForceCompleteMigrationArg.Merge(m, src)
}
func (m *VmForceCompleteMigrationArg) XXX_Size() int {
	return xxx_messageInfo_VmForceCompleteMigrationArg.Size(m)
}
func (m *VmForceCompleteMigrationArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmForceCompleteMigrationArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmForceCompleteMigrationArg proto.InternalMessageInfo

const Default_VmForceCompleteMigrationArg_VmLogicalTimestamp int64 = -1

func (m *VmForceCompleteMigrationArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmForceCompleteMigrationArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmForceCompleteMigrationArg_VmLogicalTimestamp
}

func (m *VmForceCompleteMigrationArg) GetMigrateToHostUuid() []byte {
	if m != nil {
		return m.MigrateToHostUuid
	}
	return nil
}

func (m *VmForceCompleteMigrationArg) GetMigrationSuccess() bool {
	if m != nil && m.MigrationSuccess != nil {
		return *m.MigrationSuccess
	}
	return false
}

func (m *VmForceCompleteMigrationArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmForceCompleteMigrationArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmForceCompleteMigrationArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmForceCompleteMigrationRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmForceCompleteMigrationTaskRet
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmForceCompleteMigrationRet) Reset()         { *m = VmForceCompleteMigrationRet{} }
func (m *VmForceCompleteMigrationRet) String() string { return proto.CompactTextString(m) }
func (*VmForceCompleteMigrationRet) ProtoMessage()    {}
func (*VmForceCompleteMigrationRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{59}
}

func (m *VmForceCompleteMigrationRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmForceCompleteMigrationRet.Unmarshal(m, b)
}
func (m *VmForceCompleteMigrationRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmForceCompleteMigrationRet.Marshal(b, m, deterministic)
}
func (m *VmForceCompleteMigrationRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmForceCompleteMigrationRet.Merge(m, src)
}
func (m *VmForceCompleteMigrationRet) XXX_Size() int {
	return xxx_messageInfo_VmForceCompleteMigrationRet.Size(m)
}
func (m *VmForceCompleteMigrationRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmForceCompleteMigrationRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmForceCompleteMigrationRet proto.InternalMessageInfo

func (m *VmForceCompleteMigrationRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmForceCompleteMigrationTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmForceCompleteMigrationTaskRet) Reset()         { *m = VmForceCompleteMigrationTaskRet{} }
func (m *VmForceCompleteMigrationTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmForceCompleteMigrationTaskRet) ProtoMessage()    {}
func (*VmForceCompleteMigrationTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{60}
}

func (m *VmForceCompleteMigrationTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmForceCompleteMigrationTaskRet.Unmarshal(m, b)
}
func (m *VmForceCompleteMigrationTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmForceCompleteMigrationTaskRet.Marshal(b, m, deterministic)
}
func (m *VmForceCompleteMigrationTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmForceCompleteMigrationTaskRet.Merge(m, src)
}
func (m *VmForceCompleteMigrationTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmForceCompleteMigrationTaskRet.Size(m)
}
func (m *VmForceCompleteMigrationTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmForceCompleteMigrationTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmForceCompleteMigrationTaskRet proto.InternalMessageInfo

type VmDeleteArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// Whether to also delete all snapshots.
	DeleteSnapshots *bool `protobuf:"varint,3,opt,name=delete_snapshots,json=deleteSnapshots" json:"delete_snapshots,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,7,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// The UUID of the cluster where the VM entity is being migrated to.
	//// Note: This is nutanix-internal only (used by cerebro) and must not be
	// exposed to user-facing endpoints such as ACLI/REST.
	MovedToClusterUuid []byte `protobuf:"bytes,8,opt,name=moved_to_cluster_uuid,json=movedToClusterUuid" json:"moved_to_cluster_uuid,omitempty"`
	// Whether to request deletion of VM disks. Currently this is used only by
	// VM migrate workflows for syncrep enabled VMs.
	DeleteDisks *bool `protobuf:"varint,9,opt,name=delete_disks,json=deleteDisks,def=1" json:"delete_disks,omitempty"`
	// The child entity types of the VM that need to be detached from DB
	// instead of a delete. Applicable only when moved_to_cluster_uuid is set.
	//// Note: This is nutanix-internal only (used by cerebro) and must not be
	// exposed to user-facing endpoints such as ACLI/REST.
	ChildEntityTypeDetachList []VmChildEntityType `protobuf:"varint,10,rep,name=child_entity_type_detach_list,json=childEntityTypeDetachList,enum=nutanix.acropolis.VmChildEntityType" json:"child_entity_type_detach_list,omitempty"`
	// Whether to process SyncRep related ops before deletion.
	SkipSyncRep *bool `protobuf:"varint,11,opt,name=skip_sync_rep,json=skipSyncRep" json:"skip_sync_rep,omitempty"`
	// Whether to skip powering off VM from the host. This should be set only if
	// the caller knows for a fact that VM is not running on any host. Anduril
	// orchestrated CCLM workfow is the only usecase for now.
	SkipPowerOffOnHost   *bool    `protobuf:"varint,12,opt,name=skip_power_off_on_host,json=skipPowerOffOnHost" json:"skip_power_off_on_host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDeleteArg) Reset()         { *m = VmDeleteArg{} }
func (m *VmDeleteArg) String() string { return proto.CompactTextString(m) }
func (*VmDeleteArg) ProtoMessage()    {}
func (*VmDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{61}
}

func (m *VmDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDeleteArg.Unmarshal(m, b)
}
func (m *VmDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDeleteArg.Marshal(b, m, deterministic)
}
func (m *VmDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDeleteArg.Merge(m, src)
}
func (m *VmDeleteArg) XXX_Size() int {
	return xxx_messageInfo_VmDeleteArg.Size(m)
}
func (m *VmDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDeleteArg proto.InternalMessageInfo

const Default_VmDeleteArg_VmLogicalTimestamp int64 = -1
const Default_VmDeleteArg_DeleteDisks bool = true

func (m *VmDeleteArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmDeleteArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmDeleteArg_VmLogicalTimestamp
}

func (m *VmDeleteArg) GetDeleteSnapshots() bool {
	if m != nil && m.DeleteSnapshots != nil {
		return *m.DeleteSnapshots
	}
	return false
}

func (m *VmDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmDeleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmDeleteArg) GetMovedToClusterUuid() []byte {
	if m != nil {
		return m.MovedToClusterUuid
	}
	return nil
}

func (m *VmDeleteArg) GetDeleteDisks() bool {
	if m != nil && m.DeleteDisks != nil {
		return *m.DeleteDisks
	}
	return Default_VmDeleteArg_DeleteDisks
}

func (m *VmDeleteArg) GetChildEntityTypeDetachList() []VmChildEntityType {
	if m != nil {
		return m.ChildEntityTypeDetachList
	}
	return nil
}

func (m *VmDeleteArg) GetSkipSyncRep() bool {
	if m != nil && m.SkipSyncRep != nil {
		return *m.SkipSyncRep
	}
	return false
}

func (m *VmDeleteArg) GetSkipPowerOffOnHost() bool {
	if m != nil && m.SkipPowerOffOnHost != nil {
		return *m.SkipPowerOffOnHost
	}
	return false
}

type VmDeleteRet struct {
	// A task to poll for completion (if the caller cares). On success, the task
	// will contain a VmDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDeleteRet) Reset()         { *m = VmDeleteRet{} }
func (m *VmDeleteRet) String() string { return proto.CompactTextString(m) }
func (*VmDeleteRet) ProtoMessage()    {}
func (*VmDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{62}
}

func (m *VmDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDeleteRet.Unmarshal(m, b)
}
func (m *VmDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDeleteRet.Marshal(b, m, deterministic)
}
func (m *VmDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDeleteRet.Merge(m, src)
}
func (m *VmDeleteRet) XXX_Size() int {
	return xxx_messageInfo_VmDeleteRet.Size(m)
}
func (m *VmDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDeleteRet proto.InternalMessageInfo

func (m *VmDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmDeleteTaskRet struct {
	DeletedVmdiskUuidList [][]byte `protobuf:"bytes,1,rep,name=deleted_vmdisk_uuid_list,json=deletedVmdiskUuidList" json:"deleted_vmdisk_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VmDeleteTaskRet) Reset()         { *m = VmDeleteTaskRet{} }
func (m *VmDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmDeleteTaskRet) ProtoMessage()    {}
func (*VmDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{63}
}

func (m *VmDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDeleteTaskRet.Unmarshal(m, b)
}
func (m *VmDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *VmDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDeleteTaskRet.Merge(m, src)
}
func (m *VmDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmDeleteTaskRet.Size(m)
}
func (m *VmDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDeleteTaskRet proto.InternalMessageInfo

func (m *VmDeleteTaskRet) GetDeletedVmdiskUuidList() [][]byte {
	if m != nil {
		return m.DeletedVmdiskUuidList
	}
	return nil
}

type VmListArg struct {
	// The query parameters.
	Request              *GenericQueryRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VmListArg) Reset()         { *m = VmListArg{} }
func (m *VmListArg) String() string { return proto.CompactTextString(m) }
func (*VmListArg) ProtoMessage()    {}
func (*VmListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{64}
}

func (m *VmListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmListArg.Unmarshal(m, b)
}
func (m *VmListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmListArg.Marshal(b, m, deterministic)
}
func (m *VmListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmListArg.Merge(m, src)
}
func (m *VmListArg) XXX_Size() int {
	return xxx_messageInfo_VmListArg.Size(m)
}
func (m *VmListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmListArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmListArg proto.InternalMessageInfo

func (m *VmListArg) GetRequest() *GenericQueryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type VmListRet struct {
	// The query result.
	Response *GenericQueryResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	// A list of sorted, filtered VM uuids
	UuidList             [][]byte `protobuf:"bytes,2,rep,name=uuid_list,json=uuidList" json:"uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmListRet) Reset()         { *m = VmListRet{} }
func (m *VmListRet) String() string { return proto.CompactTextString(m) }
func (*VmListRet) ProtoMessage()    {}
func (*VmListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{65}
}

func (m *VmListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmListRet.Unmarshal(m, b)
}
func (m *VmListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmListRet.Marshal(b, m, deterministic)
}
func (m *VmListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmListRet.Merge(m, src)
}
func (m *VmListRet) XXX_Size() int {
	return xxx_messageInfo_VmListRet.Size(m)
}
func (m *VmListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmListRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmListRet proto.InternalMessageInfo

func (m *VmListRet) GetResponse() *GenericQueryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *VmListRet) GetUuidList() [][]byte {
	if m != nil {
		return m.UuidList
	}
	return nil
}

type VmDiskCreateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// A list of disk specifications.
	SpecList []*VmDiskSpec `protobuf:"bytes,3,rep,name=spec_list,json=specList" json:"spec_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether to just create files. If specified, the files are created but
	// not attached to the VM yet. The caller should use the files created in
	// task ret and call this RPC with disk_list set to actually attach disks to
	// the VM. Note that the VM's logical timestamp is not updated.
	CreateOnly *bool `protobuf:"varint,7,opt,name=create_only,json=createOnly,def=0" json:"create_only,omitempty"`
	// The list of existing disks to attach to the VM. Only one of disk_list
	// or spec_list should be specified. If both are specified, disk_list will be
	// used.
	DiskList             []*VmDiskConfig `protobuf:"bytes,8,rep,name=disk_list,json=diskList" json:"disk_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VmDiskCreateArg) Reset()         { *m = VmDiskCreateArg{} }
func (m *VmDiskCreateArg) String() string { return proto.CompactTextString(m) }
func (*VmDiskCreateArg) ProtoMessage()    {}
func (*VmDiskCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{66}
}

func (m *VmDiskCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskCreateArg.Unmarshal(m, b)
}
func (m *VmDiskCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskCreateArg.Marshal(b, m, deterministic)
}
func (m *VmDiskCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskCreateArg.Merge(m, src)
}
func (m *VmDiskCreateArg) XXX_Size() int {
	return xxx_messageInfo_VmDiskCreateArg.Size(m)
}
func (m *VmDiskCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskCreateArg proto.InternalMessageInfo

const Default_VmDiskCreateArg_VmLogicalTimestamp int64 = -1
const Default_VmDiskCreateArg_CreateOnly bool = false

func (m *VmDiskCreateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmDiskCreateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmDiskCreateArg_VmLogicalTimestamp
}

func (m *VmDiskCreateArg) GetSpecList() []*VmDiskSpec {
	if m != nil {
		return m.SpecList
	}
	return nil
}

func (m *VmDiskCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmDiskCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmDiskCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmDiskCreateArg) GetCreateOnly() bool {
	if m != nil && m.CreateOnly != nil {
		return *m.CreateOnly
	}
	return Default_VmDiskCreateArg_CreateOnly
}

func (m *VmDiskCreateArg) GetDiskList() []*VmDiskConfig {
	if m != nil {
		return m.DiskList
	}
	return nil
}

type VmDiskCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmDiskCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskCreateRet) Reset()         { *m = VmDiskCreateRet{} }
func (m *VmDiskCreateRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskCreateRet) ProtoMessage()    {}
func (*VmDiskCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{67}
}

func (m *VmDiskCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskCreateRet.Unmarshal(m, b)
}
func (m *VmDiskCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskCreateRet.Marshal(b, m, deterministic)
}
func (m *VmDiskCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskCreateRet.Merge(m, src)
}
func (m *VmDiskCreateRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskCreateRet.Size(m)
}
func (m *VmDiskCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskCreateRet proto.InternalMessageInfo

func (m *VmDiskCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmDiskCreateTaskRet struct {
	// Populated if VmDiskCreate is called with spec_list.
	DiskList             []*VmDiskConfig `protobuf:"bytes,1,rep,name=disk_list,json=diskList" json:"disk_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VmDiskCreateTaskRet) Reset()         { *m = VmDiskCreateTaskRet{} }
func (m *VmDiskCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskCreateTaskRet) ProtoMessage()    {}
func (*VmDiskCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{68}
}

func (m *VmDiskCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskCreateTaskRet.Unmarshal(m, b)
}
func (m *VmDiskCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmDiskCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskCreateTaskRet.Merge(m, src)
}
func (m *VmDiskCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskCreateTaskRet.Size(m)
}
func (m *VmDiskCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskCreateTaskRet proto.InternalMessageInfo

func (m *VmDiskCreateTaskRet) GetDiskList() []*VmDiskConfig {
	if m != nil {
		return m.DiskList
	}
	return nil
}

type VmDiskGetArg struct {
	// The VM identifier
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// List of VM disk address objects. If none is specified then all disks are
	// returned.
	DiskAddrList []*VmDiskAddr `protobuf:"bytes,2,rep,name=disk_addr_list,json=diskAddrList" json:"disk_addr_list,omitempty"`
	// Whether to fetch the current maximum vmdisk sizes.
	IncludeVmdiskSizes *bool `protobuf:"varint,3,opt,name=include_vmdisk_sizes,json=includeVmdiskSizes" json:"include_vmdisk_sizes,omitempty"`
	// Whether to resolve vmdisk paths.
	IncludeVmdiskPaths *bool `protobuf:"varint,4,opt,name=include_vmdisk_paths,json=includeVmdiskPaths" json:"include_vmdisk_paths,omitempty"`
	// List of UUIDs of the devices to retrieve.
	DeviceUuidList [][]byte `protobuf:"bytes,5,rep,name=device_uuid_list,json=deviceUuidList" json:"device_uuid_list,omitempty"`
	// Whether to fetch the URLs of the data sources for the vmdisks that are
	// backed by data sources outside the AOS cluster (in external repositories).
	IncludeVmdiskDataSourceUrls *bool    `protobuf:"varint,6,opt,name=include_vmdisk_data_source_urls,json=includeVmdiskDataSourceUrls" json:"include_vmdisk_data_source_urls,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *VmDiskGetArg) Reset()         { *m = VmDiskGetArg{} }
func (m *VmDiskGetArg) String() string { return proto.CompactTextString(m) }
func (*VmDiskGetArg) ProtoMessage()    {}
func (*VmDiskGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{69}
}

func (m *VmDiskGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskGetArg.Unmarshal(m, b)
}
func (m *VmDiskGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskGetArg.Marshal(b, m, deterministic)
}
func (m *VmDiskGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskGetArg.Merge(m, src)
}
func (m *VmDiskGetArg) XXX_Size() int {
	return xxx_messageInfo_VmDiskGetArg.Size(m)
}
func (m *VmDiskGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskGetArg proto.InternalMessageInfo

func (m *VmDiskGetArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmDiskGetArg) GetDiskAddrList() []*VmDiskAddr {
	if m != nil {
		return m.DiskAddrList
	}
	return nil
}

func (m *VmDiskGetArg) GetIncludeVmdiskSizes() bool {
	if m != nil && m.IncludeVmdiskSizes != nil {
		return *m.IncludeVmdiskSizes
	}
	return false
}

func (m *VmDiskGetArg) GetIncludeVmdiskPaths() bool {
	if m != nil && m.IncludeVmdiskPaths != nil {
		return *m.IncludeVmdiskPaths
	}
	return false
}

func (m *VmDiskGetArg) GetDeviceUuidList() [][]byte {
	if m != nil {
		return m.DeviceUuidList
	}
	return nil
}

func (m *VmDiskGetArg) GetIncludeVmdiskDataSourceUrls() bool {
	if m != nil && m.IncludeVmdiskDataSourceUrls != nil {
		return *m.IncludeVmdiskDataSourceUrls
	}
	return false
}

type VmDiskGetRet struct {
	// A list of sorted, filtered VM disks
	DiskList             []*VmDiskConfig `protobuf:"bytes,2,rep,name=disk_list,json=diskList" json:"disk_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VmDiskGetRet) Reset()         { *m = VmDiskGetRet{} }
func (m *VmDiskGetRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskGetRet) ProtoMessage()    {}
func (*VmDiskGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{70}
}

func (m *VmDiskGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskGetRet.Unmarshal(m, b)
}
func (m *VmDiskGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskGetRet.Marshal(b, m, deterministic)
}
func (m *VmDiskGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskGetRet.Merge(m, src)
}
func (m *VmDiskGetRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskGetRet.Size(m)
}
func (m *VmDiskGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskGetRet proto.InternalMessageInfo

func (m *VmDiskGetRet) GetDiskList() []*VmDiskConfig {
	if m != nil {
		return m.DiskList
	}
	return nil
}

type VmDiskSpecCloneGetArg struct {
	// The VmDiskSpecClones to get details about.
	SpecCloneList        []*VmDiskSpecClone `protobuf:"bytes,1,rep,name=spec_clone_list,json=specCloneList" json:"spec_clone_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VmDiskSpecCloneGetArg) Reset()         { *m = VmDiskSpecCloneGetArg{} }
func (m *VmDiskSpecCloneGetArg) String() string { return proto.CompactTextString(m) }
func (*VmDiskSpecCloneGetArg) ProtoMessage()    {}
func (*VmDiskSpecCloneGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{71}
}

func (m *VmDiskSpecCloneGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskSpecCloneGetArg.Unmarshal(m, b)
}
func (m *VmDiskSpecCloneGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskSpecCloneGetArg.Marshal(b, m, deterministic)
}
func (m *VmDiskSpecCloneGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskSpecCloneGetArg.Merge(m, src)
}
func (m *VmDiskSpecCloneGetArg) XXX_Size() int {
	return xxx_messageInfo_VmDiskSpecCloneGetArg.Size(m)
}
func (m *VmDiskSpecCloneGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskSpecCloneGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskSpecCloneGetArg proto.InternalMessageInfo

func (m *VmDiskSpecCloneGetArg) GetSpecCloneList() []*VmDiskSpecClone {
	if m != nil {
		return m.SpecCloneList
	}
	return nil
}

type VmDiskSpecCloneDetails struct {
	// Does the disk exist? If false, other fields should not be set.
	Exists *bool `protobuf:"varint,1,opt,name=exists,def=0" json:"exists,omitempty"`
	// The size of the disk, in bytes.
	Size                 *uint64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskSpecCloneDetails) Reset()         { *m = VmDiskSpecCloneDetails{} }
func (m *VmDiskSpecCloneDetails) String() string { return proto.CompactTextString(m) }
func (*VmDiskSpecCloneDetails) ProtoMessage()    {}
func (*VmDiskSpecCloneDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{72}
}

func (m *VmDiskSpecCloneDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskSpecCloneDetails.Unmarshal(m, b)
}
func (m *VmDiskSpecCloneDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskSpecCloneDetails.Marshal(b, m, deterministic)
}
func (m *VmDiskSpecCloneDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskSpecCloneDetails.Merge(m, src)
}
func (m *VmDiskSpecCloneDetails) XXX_Size() int {
	return xxx_messageInfo_VmDiskSpecCloneDetails.Size(m)
}
func (m *VmDiskSpecCloneDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskSpecCloneDetails.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskSpecCloneDetails proto.InternalMessageInfo

const Default_VmDiskSpecCloneDetails_Exists bool = false

func (m *VmDiskSpecCloneDetails) GetExists() bool {
	if m != nil && m.Exists != nil {
		return *m.Exists
	}
	return Default_VmDiskSpecCloneDetails_Exists
}

func (m *VmDiskSpecCloneDetails) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

type VmDiskSpecCloneGetRet struct {
	// A list of VmDiskSpecCloneDetails corresponding to the spcs in the GetArg.
	DetailList           []*VmDiskSpecCloneDetails `protobuf:"bytes,1,rep,name=detail_list,json=detailList" json:"detail_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *VmDiskSpecCloneGetRet) Reset()         { *m = VmDiskSpecCloneGetRet{} }
func (m *VmDiskSpecCloneGetRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskSpecCloneGetRet) ProtoMessage()    {}
func (*VmDiskSpecCloneGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{73}
}

func (m *VmDiskSpecCloneGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskSpecCloneGetRet.Unmarshal(m, b)
}
func (m *VmDiskSpecCloneGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskSpecCloneGetRet.Marshal(b, m, deterministic)
}
func (m *VmDiskSpecCloneGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskSpecCloneGetRet.Merge(m, src)
}
func (m *VmDiskSpecCloneGetRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskSpecCloneGetRet.Size(m)
}
func (m *VmDiskSpecCloneGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskSpecCloneGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskSpecCloneGetRet proto.InternalMessageInfo

func (m *VmDiskSpecCloneGetRet) GetDetailList() []*VmDiskSpecCloneDetails {
	if m != nil {
		return m.DetailList
	}
	return nil
}

type VmDiskUpdateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// A list of disks to update.
	UpdateList []*VmDiskUpdateArg_VmDiskUpdateSpec `protobuf:"bytes,3,rep,name=update_list,json=updateList" json:"update_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskUpdateArg) Reset()         { *m = VmDiskUpdateArg{} }
func (m *VmDiskUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VmDiskUpdateArg) ProtoMessage()    {}
func (*VmDiskUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{74}
}

func (m *VmDiskUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskUpdateArg.Unmarshal(m, b)
}
func (m *VmDiskUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskUpdateArg.Marshal(b, m, deterministic)
}
func (m *VmDiskUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskUpdateArg.Merge(m, src)
}
func (m *VmDiskUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VmDiskUpdateArg.Size(m)
}
func (m *VmDiskUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskUpdateArg proto.InternalMessageInfo

const Default_VmDiskUpdateArg_VmLogicalTimestamp int64 = -1

func (m *VmDiskUpdateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmDiskUpdateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmDiskUpdateArg_VmLogicalTimestamp
}

func (m *VmDiskUpdateArg) GetUpdateList() []*VmDiskUpdateArg_VmDiskUpdateSpec {
	if m != nil {
		return m.UpdateList
	}
	return nil
}

func (m *VmDiskUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmDiskUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmDiskUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmDiskUpdateArg_VmDiskUpdateSpec struct {
	// The disk address.
	DiskAddr *VmDiskAddr `protobuf:"bytes,1,opt,name=disk_addr,json=diskAddr" json:"disk_addr,omitempty"`
	// The new disk spec.
	Spec *VmDiskSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// New disk size in bytes. Only one of new_size and spec must be provided.
	NewSize *uint64 `protobuf:"varint,3,opt,name=new_size,json=newSize" json:"new_size,omitempty"`
	// The UUID of the devices to be updated.
	DeviceUuid []byte `protobuf:"bytes,4,opt,name=device_uuid,json=deviceUuid" json:"device_uuid,omitempty"`
	// If "spec" is not specified, users can set this field to update the flash
	// mode of an existing disk.
	FlashMode            *bool    `protobuf:"varint,5,opt,name=flash_mode,json=flashMode" json:"flash_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskUpdateArg_VmDiskUpdateSpec) Reset()         { *m = VmDiskUpdateArg_VmDiskUpdateSpec{} }
func (m *VmDiskUpdateArg_VmDiskUpdateSpec) String() string { return proto.CompactTextString(m) }
func (*VmDiskUpdateArg_VmDiskUpdateSpec) ProtoMessage()    {}
func (*VmDiskUpdateArg_VmDiskUpdateSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{74, 0}
}

func (m *VmDiskUpdateArg_VmDiskUpdateSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateSpec.Unmarshal(m, b)
}
func (m *VmDiskUpdateArg_VmDiskUpdateSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateSpec.Marshal(b, m, deterministic)
}
func (m *VmDiskUpdateArg_VmDiskUpdateSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateSpec.Merge(m, src)
}
func (m *VmDiskUpdateArg_VmDiskUpdateSpec) XXX_Size() int {
	return xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateSpec.Size(m)
}
func (m *VmDiskUpdateArg_VmDiskUpdateSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateSpec proto.InternalMessageInfo

func (m *VmDiskUpdateArg_VmDiskUpdateSpec) GetDiskAddr() *VmDiskAddr {
	if m != nil {
		return m.DiskAddr
	}
	return nil
}

func (m *VmDiskUpdateArg_VmDiskUpdateSpec) GetSpec() *VmDiskSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *VmDiskUpdateArg_VmDiskUpdateSpec) GetNewSize() uint64 {
	if m != nil && m.NewSize != nil {
		return *m.NewSize
	}
	return 0
}

func (m *VmDiskUpdateArg_VmDiskUpdateSpec) GetDeviceUuid() []byte {
	if m != nil {
		return m.DeviceUuid
	}
	return nil
}

func (m *VmDiskUpdateArg_VmDiskUpdateSpec) GetFlashMode() bool {
	if m != nil && m.FlashMode != nil {
		return *m.FlashMode
	}
	return false
}

type VmDiskUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmDiskUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskUpdateRet) Reset()         { *m = VmDiskUpdateRet{} }
func (m *VmDiskUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskUpdateRet) ProtoMessage()    {}
func (*VmDiskUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{75}
}

func (m *VmDiskUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskUpdateRet.Unmarshal(m, b)
}
func (m *VmDiskUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmDiskUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskUpdateRet.Merge(m, src)
}
func (m *VmDiskUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskUpdateRet.Size(m)
}
func (m *VmDiskUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskUpdateRet proto.InternalMessageInfo

func (m *VmDiskUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmDiskUpdateTaskRet struct {
	DeletedVmdiskUuidList [][]byte `protobuf:"bytes,1,rep,name=deleted_vmdisk_uuid_list,json=deletedVmdiskUuidList" json:"deleted_vmdisk_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VmDiskUpdateTaskRet) Reset()         { *m = VmDiskUpdateTaskRet{} }
func (m *VmDiskUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskUpdateTaskRet) ProtoMessage()    {}
func (*VmDiskUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{76}
}

func (m *VmDiskUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmDiskUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmDiskUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskUpdateTaskRet.Merge(m, src)
}
func (m *VmDiskUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskUpdateTaskRet.Size(m)
}
func (m *VmDiskUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskUpdateTaskRet proto.InternalMessageInfo

func (m *VmDiskUpdateTaskRet) GetDeletedVmdiskUuidList() [][]byte {
	if m != nil {
		return m.DeletedVmdiskUuidList
	}
	return nil
}

type VmChangeDiskContainerUpdateArg struct {
	// UUID of the VM.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, for consistency check.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64                                   `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	Operation         *VmChangeDiskContainerUpdateArg_Operation `protobuf:"varint,6,opt,name=operation,enum=nutanix.acropolis.VmChangeDiskContainerUpdateArg_Operation" json:"operation,omitempty"`
	// Spec list to change disk container
	SpecList             []*VmChangeDiskContainerSpec `protobuf:"bytes,7,rep,name=spec_list,json=specList" json:"spec_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *VmChangeDiskContainerUpdateArg) Reset()         { *m = VmChangeDiskContainerUpdateArg{} }
func (m *VmChangeDiskContainerUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VmChangeDiskContainerUpdateArg) ProtoMessage()    {}
func (*VmChangeDiskContainerUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{77}
}

func (m *VmChangeDiskContainerUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmChangeDiskContainerUpdateArg.Unmarshal(m, b)
}
func (m *VmChangeDiskContainerUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmChangeDiskContainerUpdateArg.Marshal(b, m, deterministic)
}
func (m *VmChangeDiskContainerUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmChangeDiskContainerUpdateArg.Merge(m, src)
}
func (m *VmChangeDiskContainerUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VmChangeDiskContainerUpdateArg.Size(m)
}
func (m *VmChangeDiskContainerUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmChangeDiskContainerUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmChangeDiskContainerUpdateArg proto.InternalMessageInfo

const Default_VmChangeDiskContainerUpdateArg_VmLogicalTimestamp int64 = -1

func (m *VmChangeDiskContainerUpdateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmChangeDiskContainerUpdateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmChangeDiskContainerUpdateArg_VmLogicalTimestamp
}

func (m *VmChangeDiskContainerUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmChangeDiskContainerUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmChangeDiskContainerUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmChangeDiskContainerUpdateArg) GetOperation() VmChangeDiskContainerUpdateArg_Operation {
	if m != nil && m.Operation != nil {
		return *m.Operation
	}
	return VmChangeDiskContainerUpdateArg_kUpdate
}

func (m *VmChangeDiskContainerUpdateArg) GetSpecList() []*VmChangeDiskContainerSpec {
	if m != nil {
		return m.SpecList
	}
	return nil
}

type VmChangeDiskContainerUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmChangeDiskContainerUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmChangeDiskContainerUpdateRet) Reset()         { *m = VmChangeDiskContainerUpdateRet{} }
func (m *VmChangeDiskContainerUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmChangeDiskContainerUpdateRet) ProtoMessage()    {}
func (*VmChangeDiskContainerUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{78}
}

func (m *VmChangeDiskContainerUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmChangeDiskContainerUpdateRet.Unmarshal(m, b)
}
func (m *VmChangeDiskContainerUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmChangeDiskContainerUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmChangeDiskContainerUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmChangeDiskContainerUpdateRet.Merge(m, src)
}
func (m *VmChangeDiskContainerUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmChangeDiskContainerUpdateRet.Size(m)
}
func (m *VmChangeDiskContainerUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmChangeDiskContainerUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmChangeDiskContainerUpdateRet proto.InternalMessageInfo

func (m *VmChangeDiskContainerUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmChangeDiskContainerUpdateTaskRet struct {
	// Spec list of successfully updated disks
	ResponseList         []*VmChangeDiskContainerSpec `protobuf:"bytes,1,rep,name=response_list,json=responseList" json:"response_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *VmChangeDiskContainerUpdateTaskRet) Reset()         { *m = VmChangeDiskContainerUpdateTaskRet{} }
func (m *VmChangeDiskContainerUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmChangeDiskContainerUpdateTaskRet) ProtoMessage()    {}
func (*VmChangeDiskContainerUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{79}
}

func (m *VmChangeDiskContainerUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmChangeDiskContainerUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmChangeDiskContainerUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmChangeDiskContainerUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmChangeDiskContainerUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmChangeDiskContainerUpdateTaskRet.Merge(m, src)
}
func (m *VmChangeDiskContainerUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmChangeDiskContainerUpdateTaskRet.Size(m)
}
func (m *VmChangeDiskContainerUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmChangeDiskContainerUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmChangeDiskContainerUpdateTaskRet proto.InternalMessageInfo

func (m *VmChangeDiskContainerUpdateTaskRet) GetResponseList() []*VmChangeDiskContainerSpec {
	if m != nil {
		return m.ResponseList
	}
	return nil
}

type VmDiskDeleteArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// The list of disks to detach from the VM.
	DiskAddrList []*VmDiskAddr `protobuf:"bytes,3,rep,name=disk_addr_list,json=diskAddrList" json:"disk_addr_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// The list of UUIDs of the devices to delete.
	DeviceUuidList       [][]byte `protobuf:"bytes,7,rep,name=device_uuid_list,json=deviceUuidList" json:"device_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskDeleteArg) Reset()         { *m = VmDiskDeleteArg{} }
func (m *VmDiskDeleteArg) String() string { return proto.CompactTextString(m) }
func (*VmDiskDeleteArg) ProtoMessage()    {}
func (*VmDiskDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{80}
}

func (m *VmDiskDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskDeleteArg.Unmarshal(m, b)
}
func (m *VmDiskDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskDeleteArg.Marshal(b, m, deterministic)
}
func (m *VmDiskDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskDeleteArg.Merge(m, src)
}
func (m *VmDiskDeleteArg) XXX_Size() int {
	return xxx_messageInfo_VmDiskDeleteArg.Size(m)
}
func (m *VmDiskDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskDeleteArg proto.InternalMessageInfo

const Default_VmDiskDeleteArg_VmLogicalTimestamp int64 = -1

func (m *VmDiskDeleteArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmDiskDeleteArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmDiskDeleteArg_VmLogicalTimestamp
}

func (m *VmDiskDeleteArg) GetDiskAddrList() []*VmDiskAddr {
	if m != nil {
		return m.DiskAddrList
	}
	return nil
}

func (m *VmDiskDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmDiskDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmDiskDeleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmDiskDeleteArg) GetDeviceUuidList() [][]byte {
	if m != nil {
		return m.DeviceUuidList
	}
	return nil
}

type VmDiskDeleteRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmDiskDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskDeleteRet) Reset()         { *m = VmDiskDeleteRet{} }
func (m *VmDiskDeleteRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskDeleteRet) ProtoMessage()    {}
func (*VmDiskDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{81}
}

func (m *VmDiskDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskDeleteRet.Unmarshal(m, b)
}
func (m *VmDiskDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskDeleteRet.Marshal(b, m, deterministic)
}
func (m *VmDiskDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskDeleteRet.Merge(m, src)
}
func (m *VmDiskDeleteRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskDeleteRet.Size(m)
}
func (m *VmDiskDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskDeleteRet proto.InternalMessageInfo

func (m *VmDiskDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmDiskDeleteTaskRet struct {
	DeletedVmdiskUuidList [][]byte `protobuf:"bytes,1,rep,name=deleted_vmdisk_uuid_list,json=deletedVmdiskUuidList" json:"deleted_vmdisk_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VmDiskDeleteTaskRet) Reset()         { *m = VmDiskDeleteTaskRet{} }
func (m *VmDiskDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskDeleteTaskRet) ProtoMessage()    {}
func (*VmDiskDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{82}
}

func (m *VmDiskDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskDeleteTaskRet.Unmarshal(m, b)
}
func (m *VmDiskDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *VmDiskDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskDeleteTaskRet.Merge(m, src)
}
func (m *VmDiskDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskDeleteTaskRet.Size(m)
}
func (m *VmDiskDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskDeleteTaskRet proto.InternalMessageInfo

func (m *VmDiskDeleteTaskRet) GetDeletedVmdiskUuidList() [][]byte {
	if m != nil {
		return m.DeletedVmdiskUuidList
	}
	return nil
}

type VmDiskListArg struct {
	// The VM identifier
	VmUuid               []byte   `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskListArg) Reset()         { *m = VmDiskListArg{} }
func (m *VmDiskListArg) String() string { return proto.CompactTextString(m) }
func (*VmDiskListArg) ProtoMessage()    {}
func (*VmDiskListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{83}
}

func (m *VmDiskListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskListArg.Unmarshal(m, b)
}
func (m *VmDiskListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskListArg.Marshal(b, m, deterministic)
}
func (m *VmDiskListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskListArg.Merge(m, src)
}
func (m *VmDiskListArg) XXX_Size() int {
	return xxx_messageInfo_VmDiskListArg.Size(m)
}
func (m *VmDiskListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskListArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskListArg proto.InternalMessageInfo

func (m *VmDiskListArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

type VmDiskListRet struct {
	// The query result.
	Response *GenericQueryResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	// A list of sorted, filtered VM disk address objects
	DiskAddrList         []*VmDiskAddr `protobuf:"bytes,2,rep,name=disk_addr_list,json=diskAddrList" json:"disk_addr_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VmDiskListRet) Reset()         { *m = VmDiskListRet{} }
func (m *VmDiskListRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskListRet) ProtoMessage()    {}
func (*VmDiskListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{84}
}

func (m *VmDiskListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskListRet.Unmarshal(m, b)
}
func (m *VmDiskListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskListRet.Marshal(b, m, deterministic)
}
func (m *VmDiskListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskListRet.Merge(m, src)
}
func (m *VmDiskListRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskListRet.Size(m)
}
func (m *VmDiskListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskListRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskListRet proto.InternalMessageInfo

func (m *VmDiskListRet) GetResponse() *GenericQueryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *VmDiskListRet) GetDiskAddrList() []*VmDiskAddr {
	if m != nil {
		return m.DiskAddrList
	}
	return nil
}

type VmNicCreateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// A list of NIC specifications.
	SpecList []*VmNicSpec `protobuf:"bytes,3,rep,name=spec_list,json=specList" json:"spec_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicCreateArg) Reset()         { *m = VmNicCreateArg{} }
func (m *VmNicCreateArg) String() string { return proto.CompactTextString(m) }
func (*VmNicCreateArg) ProtoMessage()    {}
func (*VmNicCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{85}
}

func (m *VmNicCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicCreateArg.Unmarshal(m, b)
}
func (m *VmNicCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicCreateArg.Marshal(b, m, deterministic)
}
func (m *VmNicCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicCreateArg.Merge(m, src)
}
func (m *VmNicCreateArg) XXX_Size() int {
	return xxx_messageInfo_VmNicCreateArg.Size(m)
}
func (m *VmNicCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicCreateArg proto.InternalMessageInfo

const Default_VmNicCreateArg_VmLogicalTimestamp int64 = -1

func (m *VmNicCreateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmNicCreateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmNicCreateArg_VmLogicalTimestamp
}

func (m *VmNicCreateArg) GetSpecList() []*VmNicSpec {
	if m != nil {
		return m.SpecList
	}
	return nil
}

func (m *VmNicCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmNicCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmNicCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmNicCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmAttachNicTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicCreateRet) Reset()         { *m = VmNicCreateRet{} }
func (m *VmNicCreateRet) String() string { return proto.CompactTextString(m) }
func (*VmNicCreateRet) ProtoMessage()    {}
func (*VmNicCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{86}
}

func (m *VmNicCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicCreateRet.Unmarshal(m, b)
}
func (m *VmNicCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicCreateRet.Marshal(b, m, deterministic)
}
func (m *VmNicCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicCreateRet.Merge(m, src)
}
func (m *VmNicCreateRet) XXX_Size() int {
	return xxx_messageInfo_VmNicCreateRet.Size(m)
}
func (m *VmNicCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicCreateRet proto.InternalMessageInfo

func (m *VmNicCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmNicCreateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicCreateTaskRet) Reset()         { *m = VmNicCreateTaskRet{} }
func (m *VmNicCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmNicCreateTaskRet) ProtoMessage()    {}
func (*VmNicCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{87}
}

func (m *VmNicCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicCreateTaskRet.Unmarshal(m, b)
}
func (m *VmNicCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmNicCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicCreateTaskRet.Merge(m, src)
}
func (m *VmNicCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmNicCreateTaskRet.Size(m)
}
func (m *VmNicCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicCreateTaskRet proto.InternalMessageInfo

type VmNicGetArg struct {
	// The VM identifier
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// List of VM nic mac ids. If none is specified, then all nics are returned.
	MacAddrList [][]byte `protobuf:"bytes,2,rep,name=mac_addr_list,json=macAddrList" json:"mac_addr_list,omitempty"`
	// Whether to fetch current network address assignments.
	IncludeAddressAssignments *bool `protobuf:"varint,3,opt,name=include_address_assignments,json=includeAddressAssignments" json:"include_address_assignments,omitempty"`
	// The list of UUIDs of the NICs to retrieve.
	NicUuidList          [][]byte `protobuf:"bytes,4,rep,name=nic_uuid_list,json=nicUuidList" json:"nic_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicGetArg) Reset()         { *m = VmNicGetArg{} }
func (m *VmNicGetArg) String() string { return proto.CompactTextString(m) }
func (*VmNicGetArg) ProtoMessage()    {}
func (*VmNicGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{88}
}

func (m *VmNicGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicGetArg.Unmarshal(m, b)
}
func (m *VmNicGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicGetArg.Marshal(b, m, deterministic)
}
func (m *VmNicGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicGetArg.Merge(m, src)
}
func (m *VmNicGetArg) XXX_Size() int {
	return xxx_messageInfo_VmNicGetArg.Size(m)
}
func (m *VmNicGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicGetArg proto.InternalMessageInfo

func (m *VmNicGetArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmNicGetArg) GetMacAddrList() [][]byte {
	if m != nil {
		return m.MacAddrList
	}
	return nil
}

func (m *VmNicGetArg) GetIncludeAddressAssignments() bool {
	if m != nil && m.IncludeAddressAssignments != nil {
		return *m.IncludeAddressAssignments
	}
	return false
}

func (m *VmNicGetArg) GetNicUuidList() [][]byte {
	if m != nil {
		return m.NicUuidList
	}
	return nil
}

type VmNicGetRet struct {
	// A list of sorted, filtered VM nics
	NicList              []*VmNicConfig `protobuf:"bytes,2,rep,name=nic_list,json=nicList" json:"nic_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VmNicGetRet) Reset()         { *m = VmNicGetRet{} }
func (m *VmNicGetRet) String() string { return proto.CompactTextString(m) }
func (*VmNicGetRet) ProtoMessage()    {}
func (*VmNicGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{89}
}

func (m *VmNicGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicGetRet.Unmarshal(m, b)
}
func (m *VmNicGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicGetRet.Marshal(b, m, deterministic)
}
func (m *VmNicGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicGetRet.Merge(m, src)
}
func (m *VmNicGetRet) XXX_Size() int {
	return xxx_messageInfo_VmNicGetRet.Size(m)
}
func (m *VmNicGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicGetRet proto.InternalMessageInfo

func (m *VmNicGetRet) GetNicList() []*VmNicConfig {
	if m != nil {
		return m.NicList
	}
	return nil
}

type VmNicUpdateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// A list of NICs to update.
	UpdateList []*VmNicUpdateSpec `protobuf:"bytes,3,rep,name=update_list,json=updateList" json:"update_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicUpdateArg) Reset()         { *m = VmNicUpdateArg{} }
func (m *VmNicUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VmNicUpdateArg) ProtoMessage()    {}
func (*VmNicUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{90}
}

func (m *VmNicUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicUpdateArg.Unmarshal(m, b)
}
func (m *VmNicUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicUpdateArg.Marshal(b, m, deterministic)
}
func (m *VmNicUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicUpdateArg.Merge(m, src)
}
func (m *VmNicUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VmNicUpdateArg.Size(m)
}
func (m *VmNicUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicUpdateArg proto.InternalMessageInfo

const Default_VmNicUpdateArg_VmLogicalTimestamp int64 = -1

func (m *VmNicUpdateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmNicUpdateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmNicUpdateArg_VmLogicalTimestamp
}

func (m *VmNicUpdateArg) GetUpdateList() []*VmNicUpdateSpec {
	if m != nil {
		return m.UpdateList
	}
	return nil
}

func (m *VmNicUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmNicUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmNicUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmNicUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmNicUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicUpdateRet) Reset()         { *m = VmNicUpdateRet{} }
func (m *VmNicUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmNicUpdateRet) ProtoMessage()    {}
func (*VmNicUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{91}
}

func (m *VmNicUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicUpdateRet.Unmarshal(m, b)
}
func (m *VmNicUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmNicUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicUpdateRet.Merge(m, src)
}
func (m *VmNicUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmNicUpdateRet.Size(m)
}
func (m *VmNicUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicUpdateRet proto.InternalMessageInfo

func (m *VmNicUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmNicUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicUpdateTaskRet) Reset()         { *m = VmNicUpdateTaskRet{} }
func (m *VmNicUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmNicUpdateTaskRet) ProtoMessage()    {}
func (*VmNicUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{92}
}

func (m *VmNicUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmNicUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmNicUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicUpdateTaskRet.Merge(m, src)
}
func (m *VmNicUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmNicUpdateTaskRet.Size(m)
}
func (m *VmNicUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicUpdateTaskRet proto.InternalMessageInfo

type VmNicDeleteArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// The list of MAC addresses of the NIC to detach.
	MacAddrList [][]byte `protobuf:"bytes,3,rep,name=mac_addr_list,json=macAddrList" json:"mac_addr_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// The list of UUIDs of the NICs to detach.
	NicUuidList          [][]byte `protobuf:"bytes,7,rep,name=nic_uuid_list,json=nicUuidList" json:"nic_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicDeleteArg) Reset()         { *m = VmNicDeleteArg{} }
func (m *VmNicDeleteArg) String() string { return proto.CompactTextString(m) }
func (*VmNicDeleteArg) ProtoMessage()    {}
func (*VmNicDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{93}
}

func (m *VmNicDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicDeleteArg.Unmarshal(m, b)
}
func (m *VmNicDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicDeleteArg.Marshal(b, m, deterministic)
}
func (m *VmNicDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicDeleteArg.Merge(m, src)
}
func (m *VmNicDeleteArg) XXX_Size() int {
	return xxx_messageInfo_VmNicDeleteArg.Size(m)
}
func (m *VmNicDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicDeleteArg proto.InternalMessageInfo

const Default_VmNicDeleteArg_VmLogicalTimestamp int64 = -1

func (m *VmNicDeleteArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmNicDeleteArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmNicDeleteArg_VmLogicalTimestamp
}

func (m *VmNicDeleteArg) GetMacAddrList() [][]byte {
	if m != nil {
		return m.MacAddrList
	}
	return nil
}

func (m *VmNicDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmNicDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmNicDeleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmNicDeleteArg) GetNicUuidList() [][]byte {
	if m != nil {
		return m.NicUuidList
	}
	return nil
}

type VmNicDeleteRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmDetachNicTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicDeleteRet) Reset()         { *m = VmNicDeleteRet{} }
func (m *VmNicDeleteRet) String() string { return proto.CompactTextString(m) }
func (*VmNicDeleteRet) ProtoMessage()    {}
func (*VmNicDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{94}
}

func (m *VmNicDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicDeleteRet.Unmarshal(m, b)
}
func (m *VmNicDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicDeleteRet.Marshal(b, m, deterministic)
}
func (m *VmNicDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicDeleteRet.Merge(m, src)
}
func (m *VmNicDeleteRet) XXX_Size() int {
	return xxx_messageInfo_VmNicDeleteRet.Size(m)
}
func (m *VmNicDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicDeleteRet proto.InternalMessageInfo

func (m *VmNicDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmNicDeleteTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicDeleteTaskRet) Reset()         { *m = VmNicDeleteTaskRet{} }
func (m *VmNicDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmNicDeleteTaskRet) ProtoMessage()    {}
func (*VmNicDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{95}
}

func (m *VmNicDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicDeleteTaskRet.Unmarshal(m, b)
}
func (m *VmNicDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *VmNicDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicDeleteTaskRet.Merge(m, src)
}
func (m *VmNicDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmNicDeleteTaskRet.Size(m)
}
func (m *VmNicDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicDeleteTaskRet proto.InternalMessageInfo

type VmNicListArg struct {
	// The VM identifier
	VmUuid               []byte   `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicListArg) Reset()         { *m = VmNicListArg{} }
func (m *VmNicListArg) String() string { return proto.CompactTextString(m) }
func (*VmNicListArg) ProtoMessage()    {}
func (*VmNicListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{96}
}

func (m *VmNicListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicListArg.Unmarshal(m, b)
}
func (m *VmNicListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicListArg.Marshal(b, m, deterministic)
}
func (m *VmNicListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicListArg.Merge(m, src)
}
func (m *VmNicListArg) XXX_Size() int {
	return xxx_messageInfo_VmNicListArg.Size(m)
}
func (m *VmNicListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicListArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicListArg proto.InternalMessageInfo

func (m *VmNicListArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

type VmNicListRet struct {
	// The query result.
	Response *GenericQueryResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	// A list of sorted, filtered VM nic mac ids
	MacAddrList          [][]byte `protobuf:"bytes,2,rep,name=mac_addr_list,json=macAddrList" json:"mac_addr_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicListRet) Reset()         { *m = VmNicListRet{} }
func (m *VmNicListRet) String() string { return proto.CompactTextString(m) }
func (*VmNicListRet) ProtoMessage()    {}
func (*VmNicListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{97}
}

func (m *VmNicListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicListRet.Unmarshal(m, b)
}
func (m *VmNicListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicListRet.Marshal(b, m, deterministic)
}
func (m *VmNicListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicListRet.Merge(m, src)
}
func (m *VmNicListRet) XXX_Size() int {
	return xxx_messageInfo_VmNicListRet.Size(m)
}
func (m *VmNicListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicListRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicListRet proto.InternalMessageInfo

func (m *VmNicListRet) GetResponse() *GenericQueryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *VmNicListRet) GetMacAddrList() [][]byte {
	if m != nil {
		return m.MacAddrList
	}
	return nil
}

type VmFlushLearnedIPsArg struct {
	// The VM identifier
	VmUuid               []byte   `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmFlushLearnedIPsArg) Reset()         { *m = VmFlushLearnedIPsArg{} }
func (m *VmFlushLearnedIPsArg) String() string { return proto.CompactTextString(m) }
func (*VmFlushLearnedIPsArg) ProtoMessage()    {}
func (*VmFlushLearnedIPsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{98}
}

func (m *VmFlushLearnedIPsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmFlushLearnedIPsArg.Unmarshal(m, b)
}
func (m *VmFlushLearnedIPsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmFlushLearnedIPsArg.Marshal(b, m, deterministic)
}
func (m *VmFlushLearnedIPsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmFlushLearnedIPsArg.Merge(m, src)
}
func (m *VmFlushLearnedIPsArg) XXX_Size() int {
	return xxx_messageInfo_VmFlushLearnedIPsArg.Size(m)
}
func (m *VmFlushLearnedIPsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmFlushLearnedIPsArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmFlushLearnedIPsArg proto.InternalMessageInfo

func (m *VmFlushLearnedIPsArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

type VmFlushLearnedIPsRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmFlushLearnedIPsRet) Reset()         { *m = VmFlushLearnedIPsRet{} }
func (m *VmFlushLearnedIPsRet) String() string { return proto.CompactTextString(m) }
func (*VmFlushLearnedIPsRet) ProtoMessage()    {}
func (*VmFlushLearnedIPsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{99}
}

func (m *VmFlushLearnedIPsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmFlushLearnedIPsRet.Unmarshal(m, b)
}
func (m *VmFlushLearnedIPsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmFlushLearnedIPsRet.Marshal(b, m, deterministic)
}
func (m *VmFlushLearnedIPsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmFlushLearnedIPsRet.Merge(m, src)
}
func (m *VmFlushLearnedIPsRet) XXX_Size() int {
	return xxx_messageInfo_VmFlushLearnedIPsRet.Size(m)
}
func (m *VmFlushLearnedIPsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmFlushLearnedIPsRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmFlushLearnedIPsRet proto.InternalMessageInfo

type VmGpuGetCompatibleHostsArg struct {
	// List of VM UUIDs.
	VmUuids              [][]byte `protobuf:"bytes,1,rep,name=vm_uuids,json=vmUuids" json:"vm_uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGpuGetCompatibleHostsArg) Reset()         { *m = VmGpuGetCompatibleHostsArg{} }
func (m *VmGpuGetCompatibleHostsArg) String() string { return proto.CompactTextString(m) }
func (*VmGpuGetCompatibleHostsArg) ProtoMessage()    {}
func (*VmGpuGetCompatibleHostsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{100}
}

func (m *VmGpuGetCompatibleHostsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGpuGetCompatibleHostsArg.Unmarshal(m, b)
}
func (m *VmGpuGetCompatibleHostsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGpuGetCompatibleHostsArg.Marshal(b, m, deterministic)
}
func (m *VmGpuGetCompatibleHostsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGpuGetCompatibleHostsArg.Merge(m, src)
}
func (m *VmGpuGetCompatibleHostsArg) XXX_Size() int {
	return xxx_messageInfo_VmGpuGetCompatibleHostsArg.Size(m)
}
func (m *VmGpuGetCompatibleHostsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGpuGetCompatibleHostsArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGpuGetCompatibleHostsArg proto.InternalMessageInfo

func (m *VmGpuGetCompatibleHostsArg) GetVmUuids() [][]byte {
	if m != nil {
		return m.VmUuids
	}
	return nil
}

type VmGpuGetCompatibleHostsRet struct {
	// List of pGpus for each VM which are compatible with vGpus being used by
	// the VM for live migration.
	VmHostGpus           []*VmCompatibleHostGpus `protobuf:"bytes,1,rep,name=vm_host_gpus,json=vmHostGpus" json:"vm_host_gpus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *VmGpuGetCompatibleHostsRet) Reset()         { *m = VmGpuGetCompatibleHostsRet{} }
func (m *VmGpuGetCompatibleHostsRet) String() string { return proto.CompactTextString(m) }
func (*VmGpuGetCompatibleHostsRet) ProtoMessage()    {}
func (*VmGpuGetCompatibleHostsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{101}
}

func (m *VmGpuGetCompatibleHostsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGpuGetCompatibleHostsRet.Unmarshal(m, b)
}
func (m *VmGpuGetCompatibleHostsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGpuGetCompatibleHostsRet.Marshal(b, m, deterministic)
}
func (m *VmGpuGetCompatibleHostsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGpuGetCompatibleHostsRet.Merge(m, src)
}
func (m *VmGpuGetCompatibleHostsRet) XXX_Size() int {
	return xxx_messageInfo_VmGpuGetCompatibleHostsRet.Size(m)
}
func (m *VmGpuGetCompatibleHostsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGpuGetCompatibleHostsRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGpuGetCompatibleHostsRet proto.InternalMessageInfo

func (m *VmGpuGetCompatibleHostsRet) GetVmHostGpus() []*VmCompatibleHostGpus {
	if m != nil {
		return m.VmHostGpus
	}
	return nil
}

type MicrosegUpdateArg struct {
	// Microseg config.
	Config *MicrosegConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	// Microseg config metadata.
	Metadata *MicrosegConfigMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Microseg old config.
	OldConfig *MicrosegConfig `protobuf:"bytes,5,opt,name=old_config,json=oldConfig" json:"old_config,omitempty"`
	//unique uuid used in BatchUpdate failure conditions
	UniqueUuid *string `protobuf:"bytes,6,opt,name=unique_uuid,json=uniqueUuid" json:"unique_uuid,omitempty"`
	// subsequence id
	SubtaskSequenceId    *int32   `protobuf:"varint,7,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegUpdateArg) Reset()         { *m = MicrosegUpdateArg{} }
func (m *MicrosegUpdateArg) String() string { return proto.CompactTextString(m) }
func (*MicrosegUpdateArg) ProtoMessage()    {}
func (*MicrosegUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{102}
}

func (m *MicrosegUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegUpdateArg.Unmarshal(m, b)
}
func (m *MicrosegUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegUpdateArg.Marshal(b, m, deterministic)
}
func (m *MicrosegUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegUpdateArg.Merge(m, src)
}
func (m *MicrosegUpdateArg) XXX_Size() int {
	return xxx_messageInfo_MicrosegUpdateArg.Size(m)
}
func (m *MicrosegUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegUpdateArg proto.InternalMessageInfo

func (m *MicrosegUpdateArg) GetConfig() *MicrosegConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *MicrosegUpdateArg) GetMetadata() *MicrosegConfigMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MicrosegUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *MicrosegUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *MicrosegUpdateArg) GetOldConfig() *MicrosegConfig {
	if m != nil {
		return m.OldConfig
	}
	return nil
}

func (m *MicrosegUpdateArg) GetUniqueUuid() string {
	if m != nil && m.UniqueUuid != nil {
		return *m.UniqueUuid
	}
	return ""
}

func (m *MicrosegUpdateArg) GetSubtaskSequenceId() int32 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type MicrosegUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// MicrosegUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegUpdateRet) Reset()         { *m = MicrosegUpdateRet{} }
func (m *MicrosegUpdateRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegUpdateRet) ProtoMessage()    {}
func (*MicrosegUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{103}
}

func (m *MicrosegUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegUpdateRet.Unmarshal(m, b)
}
func (m *MicrosegUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegUpdateRet.Marshal(b, m, deterministic)
}
func (m *MicrosegUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegUpdateRet.Merge(m, src)
}
func (m *MicrosegUpdateRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegUpdateRet.Size(m)
}
func (m *MicrosegUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegUpdateRet proto.InternalMessageInfo

func (m *MicrosegUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type MicrosegUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegUpdateTaskRet) Reset()         { *m = MicrosegUpdateTaskRet{} }
func (m *MicrosegUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegUpdateTaskRet) ProtoMessage()    {}
func (*MicrosegUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{104}
}

func (m *MicrosegUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegUpdateTaskRet.Unmarshal(m, b)
}
func (m *MicrosegUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *MicrosegUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegUpdateTaskRet.Merge(m, src)
}
func (m *MicrosegUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegUpdateTaskRet.Size(m)
}
func (m *MicrosegUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegUpdateTaskRet proto.InternalMessageInfo

// Microseg generation number args
type MicrosegUpdateGenNumArg struct {
	// Cluster UUID on which reconcilation is triggered.
	ClusterUuid *string `protobuf:"bytes,1,req,name=cluster_uuid,json=clusterUuid" json:"cluster_uuid,omitempty"`
	// Flag to specify if the task is internal task or not.
	InternalTask *bool `protobuf:"varint,2,opt,name=internal_task,json=internalTask,def=1" json:"internal_task,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// subsequence id
	SubtaskSequenceId    *int32   `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegUpdateGenNumArg) Reset()         { *m = MicrosegUpdateGenNumArg{} }
func (m *MicrosegUpdateGenNumArg) String() string { return proto.CompactTextString(m) }
func (*MicrosegUpdateGenNumArg) ProtoMessage()    {}
func (*MicrosegUpdateGenNumArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{105}
}

func (m *MicrosegUpdateGenNumArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegUpdateGenNumArg.Unmarshal(m, b)
}
func (m *MicrosegUpdateGenNumArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegUpdateGenNumArg.Marshal(b, m, deterministic)
}
func (m *MicrosegUpdateGenNumArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegUpdateGenNumArg.Merge(m, src)
}
func (m *MicrosegUpdateGenNumArg) XXX_Size() int {
	return xxx_messageInfo_MicrosegUpdateGenNumArg.Size(m)
}
func (m *MicrosegUpdateGenNumArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegUpdateGenNumArg.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegUpdateGenNumArg proto.InternalMessageInfo

const Default_MicrosegUpdateGenNumArg_InternalTask bool = true

func (m *MicrosegUpdateGenNumArg) GetClusterUuid() string {
	if m != nil && m.ClusterUuid != nil {
		return *m.ClusterUuid
	}
	return ""
}

func (m *MicrosegUpdateGenNumArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return Default_MicrosegUpdateGenNumArg_InternalTask
}

func (m *MicrosegUpdateGenNumArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *MicrosegUpdateGenNumArg) GetSubtaskSequenceId() int32 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type MicrosegUpdateGenNumRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegUpdateGenNumRet) Reset()         { *m = MicrosegUpdateGenNumRet{} }
func (m *MicrosegUpdateGenNumRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegUpdateGenNumRet) ProtoMessage()    {}
func (*MicrosegUpdateGenNumRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{106}
}

func (m *MicrosegUpdateGenNumRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegUpdateGenNumRet.Unmarshal(m, b)
}
func (m *MicrosegUpdateGenNumRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegUpdateGenNumRet.Marshal(b, m, deterministic)
}
func (m *MicrosegUpdateGenNumRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegUpdateGenNumRet.Merge(m, src)
}
func (m *MicrosegUpdateGenNumRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegUpdateGenNumRet.Size(m)
}
func (m *MicrosegUpdateGenNumRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegUpdateGenNumRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegUpdateGenNumRet proto.InternalMessageInfo

func (m *MicrosegUpdateGenNumRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type MicrosegUpdateGenNumTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegUpdateGenNumTaskRet) Reset()         { *m = MicrosegUpdateGenNumTaskRet{} }
func (m *MicrosegUpdateGenNumTaskRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegUpdateGenNumTaskRet) ProtoMessage()    {}
func (*MicrosegUpdateGenNumTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{107}
}

func (m *MicrosegUpdateGenNumTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegUpdateGenNumTaskRet.Unmarshal(m, b)
}
func (m *MicrosegUpdateGenNumTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegUpdateGenNumTaskRet.Marshal(b, m, deterministic)
}
func (m *MicrosegUpdateGenNumTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegUpdateGenNumTaskRet.Merge(m, src)
}
func (m *MicrosegUpdateGenNumTaskRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegUpdateGenNumTaskRet.Size(m)
}
func (m *MicrosegUpdateGenNumTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegUpdateGenNumTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegUpdateGenNumTaskRet proto.InternalMessageInfo

//-----------------------------------------------------------------------------
type MicrosegDeleteArg struct {
	// Generation number used to identify rules that should be deleted. All
	// rules that do not match this generation number should be wiped out.
	GenerationNumber *int64 `protobuf:"varint,1,opt,name=generation_number,json=generationNumber,def=0" json:"generation_number,omitempty"`
	// Whether this is an internal task and is not meant to be displayed in UI.
	InternalTask *bool `protobuf:"varint,2,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Flag to check whether triggered as part of reconcilation or microseg enabled
	IsPcReconcile *bool `protobuf:"varint,3,opt,name=is_pc_reconcile,json=isPcReconcile,def=0" json:"is_pc_reconcile,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// subsequence id
	SubtaskSequenceId    *int32   `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegDeleteArg) Reset()         { *m = MicrosegDeleteArg{} }
func (m *MicrosegDeleteArg) String() string { return proto.CompactTextString(m) }
func (*MicrosegDeleteArg) ProtoMessage()    {}
func (*MicrosegDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{108}
}

func (m *MicrosegDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegDeleteArg.Unmarshal(m, b)
}
func (m *MicrosegDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegDeleteArg.Marshal(b, m, deterministic)
}
func (m *MicrosegDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegDeleteArg.Merge(m, src)
}
func (m *MicrosegDeleteArg) XXX_Size() int {
	return xxx_messageInfo_MicrosegDeleteArg.Size(m)
}
func (m *MicrosegDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegDeleteArg proto.InternalMessageInfo

const Default_MicrosegDeleteArg_GenerationNumber int64 = 0
const Default_MicrosegDeleteArg_IsPcReconcile bool = false

func (m *MicrosegDeleteArg) GetGenerationNumber() int64 {
	if m != nil && m.GenerationNumber != nil {
		return *m.GenerationNumber
	}
	return Default_MicrosegDeleteArg_GenerationNumber
}

func (m *MicrosegDeleteArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *MicrosegDeleteArg) GetIsPcReconcile() bool {
	if m != nil && m.IsPcReconcile != nil {
		return *m.IsPcReconcile
	}
	return Default_MicrosegDeleteArg_IsPcReconcile
}

func (m *MicrosegDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *MicrosegDeleteArg) GetSubtaskSequenceId() int32 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type MicrosegDeleteRet struct {
	// A task to poll for completion. On success, the task will contain a
	// MicrosegDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegDeleteRet) Reset()         { *m = MicrosegDeleteRet{} }
func (m *MicrosegDeleteRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegDeleteRet) ProtoMessage()    {}
func (*MicrosegDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{109}
}

func (m *MicrosegDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegDeleteRet.Unmarshal(m, b)
}
func (m *MicrosegDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegDeleteRet.Marshal(b, m, deterministic)
}
func (m *MicrosegDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegDeleteRet.Merge(m, src)
}
func (m *MicrosegDeleteRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegDeleteRet.Size(m)
}
func (m *MicrosegDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegDeleteRet proto.InternalMessageInfo

func (m *MicrosegDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type MicrosegDeleteTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegDeleteTaskRet) Reset()         { *m = MicrosegDeleteTaskRet{} }
func (m *MicrosegDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegDeleteTaskRet) ProtoMessage()    {}
func (*MicrosegDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{110}
}

func (m *MicrosegDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegDeleteTaskRet.Unmarshal(m, b)
}
func (m *MicrosegDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *MicrosegDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegDeleteTaskRet.Merge(m, src)
}
func (m *MicrosegDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegDeleteTaskRet.Size(m)
}
func (m *MicrosegDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegDeleteTaskRet proto.InternalMessageInfo

type MicrosegBatchUpdateArg struct {
	//microseg update arguments that can be sent in batch
	MicrosegUpdate []*MicrosegUpdateArg `protobuf:"bytes,1,rep,name=microseg_update,json=microsegUpdate" json:"microseg_update,omitempty"`
	//microseg delete arguments
	MicrosegDelete *MicrosegDeleteArg `protobuf:"bytes,2,opt,name=microseg_delete,json=microsegDelete" json:"microseg_delete,omitempty"`
	// Set this flag to True if the task needs to be internal
	InternalTask *bool `protobuf:"varint,3,opt,name=internal_task,json=internalTask,def=1" json:"internal_task,omitempty"`
	// Send batch update as part of updating the batch details.
	MicrosegUpdateGenNum *MicrosegUpdateGenNumArg `protobuf:"bytes,4,opt,name=microseg_update_gen_num,json=microsegUpdateGenNum" json:"microseg_update_gen_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MicrosegBatchUpdateArg) Reset()         { *m = MicrosegBatchUpdateArg{} }
func (m *MicrosegBatchUpdateArg) String() string { return proto.CompactTextString(m) }
func (*MicrosegBatchUpdateArg) ProtoMessage()    {}
func (*MicrosegBatchUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{111}
}

func (m *MicrosegBatchUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegBatchUpdateArg.Unmarshal(m, b)
}
func (m *MicrosegBatchUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegBatchUpdateArg.Marshal(b, m, deterministic)
}
func (m *MicrosegBatchUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegBatchUpdateArg.Merge(m, src)
}
func (m *MicrosegBatchUpdateArg) XXX_Size() int {
	return xxx_messageInfo_MicrosegBatchUpdateArg.Size(m)
}
func (m *MicrosegBatchUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegBatchUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegBatchUpdateArg proto.InternalMessageInfo

const Default_MicrosegBatchUpdateArg_InternalTask bool = true

func (m *MicrosegBatchUpdateArg) GetMicrosegUpdate() []*MicrosegUpdateArg {
	if m != nil {
		return m.MicrosegUpdate
	}
	return nil
}

func (m *MicrosegBatchUpdateArg) GetMicrosegDelete() *MicrosegDeleteArg {
	if m != nil {
		return m.MicrosegDelete
	}
	return nil
}

func (m *MicrosegBatchUpdateArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return Default_MicrosegBatchUpdateArg_InternalTask
}

func (m *MicrosegBatchUpdateArg) GetMicrosegUpdateGenNum() *MicrosegUpdateGenNumArg {
	if m != nil {
		return m.MicrosegUpdateGenNum
	}
	return nil
}

type MicrosegBatchUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// MicrosegBatchUpdateTaskRet.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	//If the task is failed, it contains the list of failed policies and the
	//corresponding error codes
	Err []*BatchUpdateErr `protobuf:"bytes,2,rep,name=err" json:"err,omitempty"`
	//If the task is failed for microseg_delete
	MicrosegDelete *bool `protobuf:"varint,3,opt,name=microseg_delete,json=microsegDelete,def=0" json:"microseg_delete,omitempty"`
	// If the task is failed to update generation number in PE.
	MicrosegUpdateGenNum *bool    `protobuf:"varint,4,opt,name=microseg_update_gen_num,json=microsegUpdateGenNum,def=0" json:"microseg_update_gen_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegBatchUpdateRet) Reset()         { *m = MicrosegBatchUpdateRet{} }
func (m *MicrosegBatchUpdateRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegBatchUpdateRet) ProtoMessage()    {}
func (*MicrosegBatchUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{112}
}

func (m *MicrosegBatchUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegBatchUpdateRet.Unmarshal(m, b)
}
func (m *MicrosegBatchUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegBatchUpdateRet.Marshal(b, m, deterministic)
}
func (m *MicrosegBatchUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegBatchUpdateRet.Merge(m, src)
}
func (m *MicrosegBatchUpdateRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegBatchUpdateRet.Size(m)
}
func (m *MicrosegBatchUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegBatchUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegBatchUpdateRet proto.InternalMessageInfo

const Default_MicrosegBatchUpdateRet_MicrosegDelete bool = false
const Default_MicrosegBatchUpdateRet_MicrosegUpdateGenNum bool = false

func (m *MicrosegBatchUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *MicrosegBatchUpdateRet) GetErr() []*BatchUpdateErr {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *MicrosegBatchUpdateRet) GetMicrosegDelete() bool {
	if m != nil && m.MicrosegDelete != nil {
		return *m.MicrosegDelete
	}
	return Default_MicrosegBatchUpdateRet_MicrosegDelete
}

func (m *MicrosegBatchUpdateRet) GetMicrosegUpdateGenNum() bool {
	if m != nil && m.MicrosegUpdateGenNum != nil {
		return *m.MicrosegUpdateGenNum
	}
	return Default_MicrosegBatchUpdateRet_MicrosegUpdateGenNum
}

type MicrosegMonitorEnableArg struct {
	Enable               *bool    `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegMonitorEnableArg) Reset()         { *m = MicrosegMonitorEnableArg{} }
func (m *MicrosegMonitorEnableArg) String() string { return proto.CompactTextString(m) }
func (*MicrosegMonitorEnableArg) ProtoMessage()    {}
func (*MicrosegMonitorEnableArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{113}
}

func (m *MicrosegMonitorEnableArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegMonitorEnableArg.Unmarshal(m, b)
}
func (m *MicrosegMonitorEnableArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegMonitorEnableArg.Marshal(b, m, deterministic)
}
func (m *MicrosegMonitorEnableArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegMonitorEnableArg.Merge(m, src)
}
func (m *MicrosegMonitorEnableArg) XXX_Size() int {
	return xxx_messageInfo_MicrosegMonitorEnableArg.Size(m)
}
func (m *MicrosegMonitorEnableArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegMonitorEnableArg.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegMonitorEnableArg proto.InternalMessageInfo

func (m *MicrosegMonitorEnableArg) GetEnable() bool {
	if m != nil && m.Enable != nil {
		return *m.Enable
	}
	return false
}

type MicrosegMonitorEnableRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegMonitorEnableRet) Reset()         { *m = MicrosegMonitorEnableRet{} }
func (m *MicrosegMonitorEnableRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegMonitorEnableRet) ProtoMessage()    {}
func (*MicrosegMonitorEnableRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{114}
}

func (m *MicrosegMonitorEnableRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegMonitorEnableRet.Unmarshal(m, b)
}
func (m *MicrosegMonitorEnableRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegMonitorEnableRet.Marshal(b, m, deterministic)
}
func (m *MicrosegMonitorEnableRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegMonitorEnableRet.Merge(m, src)
}
func (m *MicrosegMonitorEnableRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegMonitorEnableRet.Size(m)
}
func (m *MicrosegMonitorEnableRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegMonitorEnableRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegMonitorEnableRet proto.InternalMessageInfo

//MicrosegEnablementPreCheckArg contains list of checks to perform
// for microseg enablement
type MicrosegEnablementPreCheckArg struct {
	PreChecksList        []MicrosegEnablementPreChecks `protobuf:"varint,1,rep,name=pre_checks_list,json=preChecksList,enum=nutanix.acropolis.MicrosegEnablementPreChecks" json:"pre_checks_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *MicrosegEnablementPreCheckArg) Reset()         { *m = MicrosegEnablementPreCheckArg{} }
func (m *MicrosegEnablementPreCheckArg) String() string { return proto.CompactTextString(m) }
func (*MicrosegEnablementPreCheckArg) ProtoMessage()    {}
func (*MicrosegEnablementPreCheckArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{115}
}

func (m *MicrosegEnablementPreCheckArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegEnablementPreCheckArg.Unmarshal(m, b)
}
func (m *MicrosegEnablementPreCheckArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegEnablementPreCheckArg.Marshal(b, m, deterministic)
}
func (m *MicrosegEnablementPreCheckArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegEnablementPreCheckArg.Merge(m, src)
}
func (m *MicrosegEnablementPreCheckArg) XXX_Size() int {
	return xxx_messageInfo_MicrosegEnablementPreCheckArg.Size(m)
}
func (m *MicrosegEnablementPreCheckArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegEnablementPreCheckArg.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegEnablementPreCheckArg proto.InternalMessageInfo

func (m *MicrosegEnablementPreCheckArg) GetPreChecksList() []MicrosegEnablementPreChecks {
	if m != nil {
		return m.PreChecksList
	}
	return nil
}

type MicrosegPreCheckRetType struct {
	Name                 *MicrosegEnablementPreChecks `protobuf:"varint,1,opt,name=name,enum=nutanix.acropolis.MicrosegEnablementPreChecks" json:"name,omitempty"`
	Status               *MicrosegPreCheckStatus      `protobuf:"varint,2,opt,name=status,enum=nutanix.acropolis.MicrosegPreCheckStatus" json:"status,omitempty"`
	ErrMsg               *string                      `protobuf:"bytes,3,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *MicrosegPreCheckRetType) Reset()         { *m = MicrosegPreCheckRetType{} }
func (m *MicrosegPreCheckRetType) String() string { return proto.CompactTextString(m) }
func (*MicrosegPreCheckRetType) ProtoMessage()    {}
func (*MicrosegPreCheckRetType) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{116}
}

func (m *MicrosegPreCheckRetType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegPreCheckRetType.Unmarshal(m, b)
}
func (m *MicrosegPreCheckRetType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegPreCheckRetType.Marshal(b, m, deterministic)
}
func (m *MicrosegPreCheckRetType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegPreCheckRetType.Merge(m, src)
}
func (m *MicrosegPreCheckRetType) XXX_Size() int {
	return xxx_messageInfo_MicrosegPreCheckRetType.Size(m)
}
func (m *MicrosegPreCheckRetType) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegPreCheckRetType.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegPreCheckRetType proto.InternalMessageInfo

func (m *MicrosegPreCheckRetType) GetName() MicrosegEnablementPreChecks {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return MicrosegEnablementPreChecks_kFlowPCPEConnectivity
}

func (m *MicrosegPreCheckRetType) GetStatus() MicrosegPreCheckStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return MicrosegPreCheckStatus_kPreCheckPassed
}

func (m *MicrosegPreCheckRetType) GetErrMsg() string {
	if m != nil && m.ErrMsg != nil {
		return *m.ErrMsg
	}
	return ""
}

type MicrosegEnablementPreCheckRet struct {
	CheckStatus          []*MicrosegPreCheckRetType `protobuf:"bytes,1,rep,name=check_status,json=checkStatus" json:"check_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MicrosegEnablementPreCheckRet) Reset()         { *m = MicrosegEnablementPreCheckRet{} }
func (m *MicrosegEnablementPreCheckRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegEnablementPreCheckRet) ProtoMessage()    {}
func (*MicrosegEnablementPreCheckRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{117}
}

func (m *MicrosegEnablementPreCheckRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegEnablementPreCheckRet.Unmarshal(m, b)
}
func (m *MicrosegEnablementPreCheckRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegEnablementPreCheckRet.Marshal(b, m, deterministic)
}
func (m *MicrosegEnablementPreCheckRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegEnablementPreCheckRet.Merge(m, src)
}
func (m *MicrosegEnablementPreCheckRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegEnablementPreCheckRet.Size(m)
}
func (m *MicrosegEnablementPreCheckRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegEnablementPreCheckRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegEnablementPreCheckRet proto.InternalMessageInfo

func (m *MicrosegEnablementPreCheckRet) GetCheckStatus() []*MicrosegPreCheckRetType {
	if m != nil {
		return m.CheckStatus
	}
	return nil
}

type MicrosegConfigSpec struct {
	// Microseg feature is enabled or disabled.
	Enable *bool `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	// Mode in which the feature is enabled. Default mode reserves the memory
	// for Microseg and Cadmus. Flow mode reserves the memory for unified hash
	// table, Policy Hit logging, IPFix and other Flow features.
	Mode *MicrosegConfigSpec_MicrosegConfigMode `protobuf:"varint,2,opt,name=mode,enum=nutanix.acropolis.MicrosegConfigSpec_MicrosegConfigMode,def=1" json:"mode,omitempty"`
	// UUID of the host, on which microseg should be disabled.
	HostUuidForRemoval   []byte   `protobuf:"bytes,3,opt,name=host_uuid_for_removal,json=hostUuidForRemoval" json:"host_uuid_for_removal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegConfigSpec) Reset()         { *m = MicrosegConfigSpec{} }
func (m *MicrosegConfigSpec) String() string { return proto.CompactTextString(m) }
func (*MicrosegConfigSpec) ProtoMessage()    {}
func (*MicrosegConfigSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{118}
}

func (m *MicrosegConfigSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegConfigSpec.Unmarshal(m, b)
}
func (m *MicrosegConfigSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegConfigSpec.Marshal(b, m, deterministic)
}
func (m *MicrosegConfigSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegConfigSpec.Merge(m, src)
}
func (m *MicrosegConfigSpec) XXX_Size() int {
	return xxx_messageInfo_MicrosegConfigSpec.Size(m)
}
func (m *MicrosegConfigSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegConfigSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegConfigSpec proto.InternalMessageInfo

const Default_MicrosegConfigSpec_Mode MicrosegConfigSpec_MicrosegConfigMode = MicrosegConfigSpec_kDefault

func (m *MicrosegConfigSpec) GetEnable() bool {
	if m != nil && m.Enable != nil {
		return *m.Enable
	}
	return false
}

func (m *MicrosegConfigSpec) GetMode() MicrosegConfigSpec_MicrosegConfigMode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return Default_MicrosegConfigSpec_Mode
}

func (m *MicrosegConfigSpec) GetHostUuidForRemoval() []byte {
	if m != nil {
		return m.HostUuidForRemoval
	}
	return nil
}

type MicrosegConfigGetArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegConfigGetArg) Reset()         { *m = MicrosegConfigGetArg{} }
func (m *MicrosegConfigGetArg) String() string { return proto.CompactTextString(m) }
func (*MicrosegConfigGetArg) ProtoMessage()    {}
func (*MicrosegConfigGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{119}
}

func (m *MicrosegConfigGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegConfigGetArg.Unmarshal(m, b)
}
func (m *MicrosegConfigGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegConfigGetArg.Marshal(b, m, deterministic)
}
func (m *MicrosegConfigGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegConfigGetArg.Merge(m, src)
}
func (m *MicrosegConfigGetArg) XXX_Size() int {
	return xxx_messageInfo_MicrosegConfigGetArg.Size(m)
}
func (m *MicrosegConfigGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegConfigGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegConfigGetArg proto.InternalMessageInfo

type MicrosegConfigGetRet struct {
	// Microseg config parameters.
	Config               *MicrosegConfigSpec `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MicrosegConfigGetRet) Reset()         { *m = MicrosegConfigGetRet{} }
func (m *MicrosegConfigGetRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegConfigGetRet) ProtoMessage()    {}
func (*MicrosegConfigGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{120}
}

func (m *MicrosegConfigGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegConfigGetRet.Unmarshal(m, b)
}
func (m *MicrosegConfigGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegConfigGetRet.Marshal(b, m, deterministic)
}
func (m *MicrosegConfigGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegConfigGetRet.Merge(m, src)
}
func (m *MicrosegConfigGetRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegConfigGetRet.Size(m)
}
func (m *MicrosegConfigGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegConfigGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegConfigGetRet proto.InternalMessageInfo

func (m *MicrosegConfigGetRet) GetConfig() *MicrosegConfigSpec {
	if m != nil {
		return m.Config
	}
	return nil
}

type MicrosegConfigSetArg struct {
	// Microseg config parameters.
	Config               *MicrosegConfigSpec `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MicrosegConfigSetArg) Reset()         { *m = MicrosegConfigSetArg{} }
func (m *MicrosegConfigSetArg) String() string { return proto.CompactTextString(m) }
func (*MicrosegConfigSetArg) ProtoMessage()    {}
func (*MicrosegConfigSetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{121}
}

func (m *MicrosegConfigSetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegConfigSetArg.Unmarshal(m, b)
}
func (m *MicrosegConfigSetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegConfigSetArg.Marshal(b, m, deterministic)
}
func (m *MicrosegConfigSetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegConfigSetArg.Merge(m, src)
}
func (m *MicrosegConfigSetArg) XXX_Size() int {
	return xxx_messageInfo_MicrosegConfigSetArg.Size(m)
}
func (m *MicrosegConfigSetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegConfigSetArg.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegConfigSetArg proto.InternalMessageInfo

func (m *MicrosegConfigSetArg) GetConfig() *MicrosegConfigSpec {
	if m != nil {
		return m.Config
	}
	return nil
}

type MicrosegConfigSetRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegConfigSetRet) Reset()         { *m = MicrosegConfigSetRet{} }
func (m *MicrosegConfigSetRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegConfigSetRet) ProtoMessage()    {}
func (*MicrosegConfigSetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{122}
}

func (m *MicrosegConfigSetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegConfigSetRet.Unmarshal(m, b)
}
func (m *MicrosegConfigSetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegConfigSetRet.Marshal(b, m, deterministic)
}
func (m *MicrosegConfigSetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegConfigSetRet.Merge(m, src)
}
func (m *MicrosegConfigSetRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegConfigSetRet.Size(m)
}
func (m *MicrosegConfigSetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegConfigSetRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegConfigSetRet proto.InternalMessageInfo

type MicrosegSecurityMonitoringConfigSetArg struct {
	// Microseg security monitoring config parameters.
	Config               *MicrosegSecurityMonitoringConfigSpec `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *MicrosegSecurityMonitoringConfigSetArg) Reset() {
	*m = MicrosegSecurityMonitoringConfigSetArg{}
}
func (m *MicrosegSecurityMonitoringConfigSetArg) String() string { return proto.CompactTextString(m) }
func (*MicrosegSecurityMonitoringConfigSetArg) ProtoMessage()    {}
func (*MicrosegSecurityMonitoringConfigSetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{123}
}

func (m *MicrosegSecurityMonitoringConfigSetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegSecurityMonitoringConfigSetArg.Unmarshal(m, b)
}
func (m *MicrosegSecurityMonitoringConfigSetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegSecurityMonitoringConfigSetArg.Marshal(b, m, deterministic)
}
func (m *MicrosegSecurityMonitoringConfigSetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegSecurityMonitoringConfigSetArg.Merge(m, src)
}
func (m *MicrosegSecurityMonitoringConfigSetArg) XXX_Size() int {
	return xxx_messageInfo_MicrosegSecurityMonitoringConfigSetArg.Size(m)
}
func (m *MicrosegSecurityMonitoringConfigSetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegSecurityMonitoringConfigSetArg.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegSecurityMonitoringConfigSetArg proto.InternalMessageInfo

func (m *MicrosegSecurityMonitoringConfigSetArg) GetConfig() *MicrosegSecurityMonitoringConfigSpec {
	if m != nil {
		return m.Config
	}
	return nil
}

type MicrosegSecurityMonitoringConfigSetRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicrosegSecurityMonitoringConfigSetRet) Reset() {
	*m = MicrosegSecurityMonitoringConfigSetRet{}
}
func (m *MicrosegSecurityMonitoringConfigSetRet) String() string { return proto.CompactTextString(m) }
func (*MicrosegSecurityMonitoringConfigSetRet) ProtoMessage()    {}
func (*MicrosegSecurityMonitoringConfigSetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{124}
}

func (m *MicrosegSecurityMonitoringConfigSetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicrosegSecurityMonitoringConfigSetRet.Unmarshal(m, b)
}
func (m *MicrosegSecurityMonitoringConfigSetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicrosegSecurityMonitoringConfigSetRet.Marshal(b, m, deterministic)
}
func (m *MicrosegSecurityMonitoringConfigSetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrosegSecurityMonitoringConfigSetRet.Merge(m, src)
}
func (m *MicrosegSecurityMonitoringConfigSetRet) XXX_Size() int {
	return xxx_messageInfo_MicrosegSecurityMonitoringConfigSetRet.Size(m)
}
func (m *MicrosegSecurityMonitoringConfigSetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrosegSecurityMonitoringConfigSetRet.DiscardUnknown(m)
}

var xxx_messageInfo_MicrosegSecurityMonitoringConfigSetRet proto.InternalMessageInfo

type EchoArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoArg) Reset()         { *m = EchoArg{} }
func (m *EchoArg) String() string { return proto.CompactTextString(m) }
func (*EchoArg) ProtoMessage()    {}
func (*EchoArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{125}
}

func (m *EchoArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoArg.Unmarshal(m, b)
}
func (m *EchoArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoArg.Marshal(b, m, deterministic)
}
func (m *EchoArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoArg.Merge(m, src)
}
func (m *EchoArg) XXX_Size() int {
	return xxx_messageInfo_EchoArg.Size(m)
}
func (m *EchoArg) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoArg.DiscardUnknown(m)
}

var xxx_messageInfo_EchoArg proto.InternalMessageInfo

type EchoRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRet) Reset()         { *m = EchoRet{} }
func (m *EchoRet) String() string { return proto.CompactTextString(m) }
func (*EchoRet) ProtoMessage()    {}
func (*EchoRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{126}
}

func (m *EchoRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRet.Unmarshal(m, b)
}
func (m *EchoRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRet.Marshal(b, m, deterministic)
}
func (m *EchoRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRet.Merge(m, src)
}
func (m *EchoRet) XXX_Size() int {
	return xxx_messageInfo_EchoRet.Size(m)
}
func (m *EchoRet) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRet.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRet proto.InternalMessageInfo

type VmEventInfo struct {
	// UUID of the VM that is going through provisioning workflow.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// UUID of the host on which VM event is being provisioned.
	HostUuid []byte `protobuf:"bytes,2,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// IP addresses of the VM.
	IpAddressList [][]byte `protobuf:"bytes,3,rep,name=ip_address_list,json=ipAddressList" json:"ip_address_list,omitempty"`
	// Whether this is a VM migration event.
	IsMigrate *bool `protobuf:"varint,4,opt,name=is_migrate,json=isMigrate,def=0" json:"is_migrate,omitempty"`
	// MAC addresses of the VM.
	MacAddressList [][]byte `protobuf:"bytes,5,rep,name=mac_address_list,json=macAddressList" json:"mac_address_list,omitempty"`
	// MAC information for every mac listed
	MacInfoList          []*MicrosegEventMacInfo `protobuf:"bytes,6,rep,name=mac_info_list,json=macInfoList" json:"mac_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *VmEventInfo) Reset()         { *m = VmEventInfo{} }
func (m *VmEventInfo) String() string { return proto.CompactTextString(m) }
func (*VmEventInfo) ProtoMessage()    {}
func (*VmEventInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{127}
}

func (m *VmEventInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmEventInfo.Unmarshal(m, b)
}
func (m *VmEventInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmEventInfo.Marshal(b, m, deterministic)
}
func (m *VmEventInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmEventInfo.Merge(m, src)
}
func (m *VmEventInfo) XXX_Size() int {
	return xxx_messageInfo_VmEventInfo.Size(m)
}
func (m *VmEventInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VmEventInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VmEventInfo proto.InternalMessageInfo

const Default_VmEventInfo_IsMigrate bool = false

func (m *VmEventInfo) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmEventInfo) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *VmEventInfo) GetIpAddressList() [][]byte {
	if m != nil {
		return m.IpAddressList
	}
	return nil
}

func (m *VmEventInfo) GetIsMigrate() bool {
	if m != nil && m.IsMigrate != nil {
		return *m.IsMigrate
	}
	return Default_VmEventInfo_IsMigrate
}

func (m *VmEventInfo) GetMacAddressList() [][]byte {
	if m != nil {
		return m.MacAddressList
	}
	return nil
}

func (m *VmEventInfo) GetMacInfoList() []*MicrosegEventMacInfo {
	if m != nil {
		return m.MacInfoList
	}
	return nil
}

type VmEventResponse struct {
	// Whether the rule was updated from microseg.
	ErrorCode            *AcropolisError_Type `protobuf:"varint,1,opt,name=error_code,json=errorCode,enum=nutanix.acropolis.AcropolisError_Type" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VmEventResponse) Reset()         { *m = VmEventResponse{} }
func (m *VmEventResponse) String() string { return proto.CompactTextString(m) }
func (*VmEventResponse) ProtoMessage()    {}
func (*VmEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{128}
}

func (m *VmEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmEventResponse.Unmarshal(m, b)
}
func (m *VmEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmEventResponse.Marshal(b, m, deterministic)
}
func (m *VmEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmEventResponse.Merge(m, src)
}
func (m *VmEventResponse) XXX_Size() int {
	return xxx_messageInfo_VmEventResponse.Size(m)
}
func (m *VmEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VmEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VmEventResponse proto.InternalMessageInfo

func (m *VmEventResponse) GetErrorCode() AcropolisError_Type {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return AcropolisError_kNoError
}

type VmEventAddOnHostArg struct {
	// Parameters of the VM add on host event.
	Info                 *VmEventInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *VmEventAddOnHostArg) Reset()         { *m = VmEventAddOnHostArg{} }
func (m *VmEventAddOnHostArg) String() string { return proto.CompactTextString(m) }
func (*VmEventAddOnHostArg) ProtoMessage()    {}
func (*VmEventAddOnHostArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{129}
}

func (m *VmEventAddOnHostArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmEventAddOnHostArg.Unmarshal(m, b)
}
func (m *VmEventAddOnHostArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmEventAddOnHostArg.Marshal(b, m, deterministic)
}
func (m *VmEventAddOnHostArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmEventAddOnHostArg.Merge(m, src)
}
func (m *VmEventAddOnHostArg) XXX_Size() int {
	return xxx_messageInfo_VmEventAddOnHostArg.Size(m)
}
func (m *VmEventAddOnHostArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmEventAddOnHostArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmEventAddOnHostArg proto.InternalMessageInfo

func (m *VmEventAddOnHostArg) GetInfo() *VmEventInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type VmEventAddOnHostRet struct {
	// Status of response from the VM event RPC.
	Response             *VmEventResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *VmEventAddOnHostRet) Reset()         { *m = VmEventAddOnHostRet{} }
func (m *VmEventAddOnHostRet) String() string { return proto.CompactTextString(m) }
func (*VmEventAddOnHostRet) ProtoMessage()    {}
func (*VmEventAddOnHostRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{130}
}

func (m *VmEventAddOnHostRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmEventAddOnHostRet.Unmarshal(m, b)
}
func (m *VmEventAddOnHostRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmEventAddOnHostRet.Marshal(b, m, deterministic)
}
func (m *VmEventAddOnHostRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmEventAddOnHostRet.Merge(m, src)
}
func (m *VmEventAddOnHostRet) XXX_Size() int {
	return xxx_messageInfo_VmEventAddOnHostRet.Size(m)
}
func (m *VmEventAddOnHostRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmEventAddOnHostRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmEventAddOnHostRet proto.InternalMessageInfo

func (m *VmEventAddOnHostRet) GetResponse() *VmEventResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type VmEventDeleteOnHostArg struct {
	// Parameters of the VM delete on host event.
	Info                 *VmEventInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *VmEventDeleteOnHostArg) Reset()         { *m = VmEventDeleteOnHostArg{} }
func (m *VmEventDeleteOnHostArg) String() string { return proto.CompactTextString(m) }
func (*VmEventDeleteOnHostArg) ProtoMessage()    {}
func (*VmEventDeleteOnHostArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{131}
}

func (m *VmEventDeleteOnHostArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmEventDeleteOnHostArg.Unmarshal(m, b)
}
func (m *VmEventDeleteOnHostArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmEventDeleteOnHostArg.Marshal(b, m, deterministic)
}
func (m *VmEventDeleteOnHostArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmEventDeleteOnHostArg.Merge(m, src)
}
func (m *VmEventDeleteOnHostArg) XXX_Size() int {
	return xxx_messageInfo_VmEventDeleteOnHostArg.Size(m)
}
func (m *VmEventDeleteOnHostArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmEventDeleteOnHostArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmEventDeleteOnHostArg proto.InternalMessageInfo

func (m *VmEventDeleteOnHostArg) GetInfo() *VmEventInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type VmEventDeleteOnHostRet struct {
	// Status of response from the VM event RPC.
	Response             *VmEventResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *VmEventDeleteOnHostRet) Reset()         { *m = VmEventDeleteOnHostRet{} }
func (m *VmEventDeleteOnHostRet) String() string { return proto.CompactTextString(m) }
func (*VmEventDeleteOnHostRet) ProtoMessage()    {}
func (*VmEventDeleteOnHostRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{132}
}

func (m *VmEventDeleteOnHostRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmEventDeleteOnHostRet.Unmarshal(m, b)
}
func (m *VmEventDeleteOnHostRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmEventDeleteOnHostRet.Marshal(b, m, deterministic)
}
func (m *VmEventDeleteOnHostRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmEventDeleteOnHostRet.Merge(m, src)
}
func (m *VmEventDeleteOnHostRet) XXX_Size() int {
	return xxx_messageInfo_VmEventDeleteOnHostRet.Size(m)
}
func (m *VmEventDeleteOnHostRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmEventDeleteOnHostRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmEventDeleteOnHostRet proto.InternalMessageInfo

func (m *VmEventDeleteOnHostRet) GetResponse() *VmEventResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type VmSyncRepReplicateArg struct {
	// VM UUID.
	VmUuid               []byte   `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSyncRepReplicateArg) Reset()         { *m = VmSyncRepReplicateArg{} }
func (m *VmSyncRepReplicateArg) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepReplicateArg) ProtoMessage()    {}
func (*VmSyncRepReplicateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{133}
}

func (m *VmSyncRepReplicateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepReplicateArg.Unmarshal(m, b)
}
func (m *VmSyncRepReplicateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepReplicateArg.Marshal(b, m, deterministic)
}
func (m *VmSyncRepReplicateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepReplicateArg.Merge(m, src)
}
func (m *VmSyncRepReplicateArg) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepReplicateArg.Size(m)
}
func (m *VmSyncRepReplicateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepReplicateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepReplicateArg proto.InternalMessageInfo

func (m *VmSyncRepReplicateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

type VmSyncRepReplicateRet struct {
	// Task UUID.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSyncRepReplicateRet) Reset()         { *m = VmSyncRepReplicateRet{} }
func (m *VmSyncRepReplicateRet) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepReplicateRet) ProtoMessage()    {}
func (*VmSyncRepReplicateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{134}
}

func (m *VmSyncRepReplicateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepReplicateRet.Unmarshal(m, b)
}
func (m *VmSyncRepReplicateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepReplicateRet.Marshal(b, m, deterministic)
}
func (m *VmSyncRepReplicateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepReplicateRet.Merge(m, src)
}
func (m *VmSyncRepReplicateRet) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepReplicateRet.Size(m)
}
func (m *VmSyncRepReplicateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepReplicateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepReplicateRet proto.InternalMessageInfo

func (m *VmSyncRepReplicateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmSyncRepReplicateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSyncRepReplicateTaskRet) Reset()         { *m = VmSyncRepReplicateTaskRet{} }
func (m *VmSyncRepReplicateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepReplicateTaskRet) ProtoMessage()    {}
func (*VmSyncRepReplicateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{135}
}

func (m *VmSyncRepReplicateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepReplicateTaskRet.Unmarshal(m, b)
}
func (m *VmSyncRepReplicateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepReplicateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmSyncRepReplicateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepReplicateTaskRet.Merge(m, src)
}
func (m *VmSyncRepReplicateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepReplicateTaskRet.Size(m)
}
func (m *VmSyncRepReplicateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepReplicateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepReplicateTaskRet proto.InternalMessageInfo

type NetworkCreateArg struct {
	// Network definition.
	NetworkConfig *NetworkConfig `protobuf:"bytes,1,opt,name=network_config,json=networkConfig" json:"network_config,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid       []byte   `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkCreateArg) Reset()         { *m = NetworkCreateArg{} }
func (m *NetworkCreateArg) String() string { return proto.CompactTextString(m) }
func (*NetworkCreateArg) ProtoMessage()    {}
func (*NetworkCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{136}
}

func (m *NetworkCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkCreateArg.Unmarshal(m, b)
}
func (m *NetworkCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkCreateArg.Marshal(b, m, deterministic)
}
func (m *NetworkCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkCreateArg.Merge(m, src)
}
func (m *NetworkCreateArg) XXX_Size() int {
	return xxx_messageInfo_NetworkCreateArg.Size(m)
}
func (m *NetworkCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkCreateArg proto.InternalMessageInfo

func (m *NetworkCreateArg) GetNetworkConfig() *NetworkConfig {
	if m != nil {
		return m.NetworkConfig
	}
	return nil
}

func (m *NetworkCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *NetworkCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type NetworkCreateRet struct {
	NetworkUuid          []byte   `protobuf:"bytes,1,opt,name=network_uuid,json=networkUuid" json:"network_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkCreateRet) Reset()         { *m = NetworkCreateRet{} }
func (m *NetworkCreateRet) String() string { return proto.CompactTextString(m) }
func (*NetworkCreateRet) ProtoMessage()    {}
func (*NetworkCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{137}
}

func (m *NetworkCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkCreateRet.Unmarshal(m, b)
}
func (m *NetworkCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkCreateRet.Marshal(b, m, deterministic)
}
func (m *NetworkCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkCreateRet.Merge(m, src)
}
func (m *NetworkCreateRet) XXX_Size() int {
	return xxx_messageInfo_NetworkCreateRet.Size(m)
}
func (m *NetworkCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkCreateRet proto.InternalMessageInfo

func (m *NetworkCreateRet) GetNetworkUuid() []byte {
	if m != nil {
		return m.NetworkUuid
	}
	return nil
}

type NetworkGetArg struct {
	// The list of UUID of the network to lookup.
	NetworkUuidList      [][]byte `protobuf:"bytes,1,rep,name=network_uuid_list,json=networkUuidList" json:"network_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkGetArg) Reset()         { *m = NetworkGetArg{} }
func (m *NetworkGetArg) String() string { return proto.CompactTextString(m) }
func (*NetworkGetArg) ProtoMessage()    {}
func (*NetworkGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{138}
}

func (m *NetworkGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkGetArg.Unmarshal(m, b)
}
func (m *NetworkGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkGetArg.Marshal(b, m, deterministic)
}
func (m *NetworkGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkGetArg.Merge(m, src)
}
func (m *NetworkGetArg) XXX_Size() int {
	return xxx_messageInfo_NetworkGetArg.Size(m)
}
func (m *NetworkGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkGetArg proto.InternalMessageInfo

func (m *NetworkGetArg) GetNetworkUuidList() [][]byte {
	if m != nil {
		return m.NetworkUuidList
	}
	return nil
}

type NetworkGetRet struct {
	// The list of lookup results
	NetworkConfigList    []*NetworkConfig `protobuf:"bytes,1,rep,name=network_config_list,json=networkConfigList" json:"network_config_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NetworkGetRet) Reset()         { *m = NetworkGetRet{} }
func (m *NetworkGetRet) String() string { return proto.CompactTextString(m) }
func (*NetworkGetRet) ProtoMessage()    {}
func (*NetworkGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{139}
}

func (m *NetworkGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkGetRet.Unmarshal(m, b)
}
func (m *NetworkGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkGetRet.Marshal(b, m, deterministic)
}
func (m *NetworkGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkGetRet.Merge(m, src)
}
func (m *NetworkGetRet) XXX_Size() int {
	return xxx_messageInfo_NetworkGetRet.Size(m)
}
func (m *NetworkGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkGetRet proto.InternalMessageInfo

func (m *NetworkGetRet) GetNetworkConfigList() []*NetworkConfig {
	if m != nil {
		return m.NetworkConfigList
	}
	return nil
}

type NetworkUpdateArg struct {
	// Updated network configuration.
	NetworkConfig *NetworkConfig `protobuf:"bytes,2,opt,name=network_config,json=networkConfig" json:"network_config,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid       []byte   `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkUpdateArg) Reset()         { *m = NetworkUpdateArg{} }
func (m *NetworkUpdateArg) String() string { return proto.CompactTextString(m) }
func (*NetworkUpdateArg) ProtoMessage()    {}
func (*NetworkUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{140}
}

func (m *NetworkUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkUpdateArg.Unmarshal(m, b)
}
func (m *NetworkUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkUpdateArg.Marshal(b, m, deterministic)
}
func (m *NetworkUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkUpdateArg.Merge(m, src)
}
func (m *NetworkUpdateArg) XXX_Size() int {
	return xxx_messageInfo_NetworkUpdateArg.Size(m)
}
func (m *NetworkUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkUpdateArg proto.InternalMessageInfo

func (m *NetworkUpdateArg) GetNetworkConfig() *NetworkConfig {
	if m != nil {
		return m.NetworkConfig
	}
	return nil
}

func (m *NetworkUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *NetworkUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type NetworkUpdateRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkUpdateRet) Reset()         { *m = NetworkUpdateRet{} }
func (m *NetworkUpdateRet) String() string { return proto.CompactTextString(m) }
func (*NetworkUpdateRet) ProtoMessage()    {}
func (*NetworkUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{141}
}

func (m *NetworkUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkUpdateRet.Unmarshal(m, b)
}
func (m *NetworkUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkUpdateRet.Marshal(b, m, deterministic)
}
func (m *NetworkUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkUpdateRet.Merge(m, src)
}
func (m *NetworkUpdateRet) XXX_Size() int {
	return xxx_messageInfo_NetworkUpdateRet.Size(m)
}
func (m *NetworkUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkUpdateRet proto.InternalMessageInfo

type NetworkDeleteArg struct {
	// uuid of the network being deleted.
	NetworkUuid []byte `protobuf:"bytes,1,opt,name=network_uuid,json=networkUuid" json:"network_uuid,omitempty"`
	// logical timestamp for synchronized delete.
	LogicalTimestamp *int64 `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid       []byte   `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkDeleteArg) Reset()         { *m = NetworkDeleteArg{} }
func (m *NetworkDeleteArg) String() string { return proto.CompactTextString(m) }
func (*NetworkDeleteArg) ProtoMessage()    {}
func (*NetworkDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{142}
}

func (m *NetworkDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkDeleteArg.Unmarshal(m, b)
}
func (m *NetworkDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkDeleteArg.Marshal(b, m, deterministic)
}
func (m *NetworkDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkDeleteArg.Merge(m, src)
}
func (m *NetworkDeleteArg) XXX_Size() int {
	return xxx_messageInfo_NetworkDeleteArg.Size(m)
}
func (m *NetworkDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkDeleteArg proto.InternalMessageInfo

const Default_NetworkDeleteArg_LogicalTimestamp int64 = -1

func (m *NetworkDeleteArg) GetNetworkUuid() []byte {
	if m != nil {
		return m.NetworkUuid
	}
	return nil
}

func (m *NetworkDeleteArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_NetworkDeleteArg_LogicalTimestamp
}

func (m *NetworkDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *NetworkDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type NetworkDeleteRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkDeleteRet) Reset()         { *m = NetworkDeleteRet{} }
func (m *NetworkDeleteRet) String() string { return proto.CompactTextString(m) }
func (*NetworkDeleteRet) ProtoMessage()    {}
func (*NetworkDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{143}
}

func (m *NetworkDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkDeleteRet.Unmarshal(m, b)
}
func (m *NetworkDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkDeleteRet.Marshal(b, m, deterministic)
}
func (m *NetworkDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkDeleteRet.Merge(m, src)
}
func (m *NetworkDeleteRet) XXX_Size() int {
	return xxx_messageInfo_NetworkDeleteRet.Size(m)
}
func (m *NetworkDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkDeleteRet proto.InternalMessageInfo

type NetworkListArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkListArg) Reset()         { *m = NetworkListArg{} }
func (m *NetworkListArg) String() string { return proto.CompactTextString(m) }
func (*NetworkListArg) ProtoMessage()    {}
func (*NetworkListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{144}
}

func (m *NetworkListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkListArg.Unmarshal(m, b)
}
func (m *NetworkListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkListArg.Marshal(b, m, deterministic)
}
func (m *NetworkListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkListArg.Merge(m, src)
}
func (m *NetworkListArg) XXX_Size() int {
	return xxx_messageInfo_NetworkListArg.Size(m)
}
func (m *NetworkListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkListArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkListArg proto.InternalMessageInfo

type NetworkListRet struct {
	NetworkUuidList      [][]byte `protobuf:"bytes,1,rep,name=network_uuid_list,json=networkUuidList" json:"network_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkListRet) Reset()         { *m = NetworkListRet{} }
func (m *NetworkListRet) String() string { return proto.CompactTextString(m) }
func (*NetworkListRet) ProtoMessage()    {}
func (*NetworkListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{145}
}

func (m *NetworkListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkListRet.Unmarshal(m, b)
}
func (m *NetworkListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkListRet.Marshal(b, m, deterministic)
}
func (m *NetworkListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkListRet.Merge(m, src)
}
func (m *NetworkListRet) XXX_Size() int {
	return xxx_messageInfo_NetworkListRet.Size(m)
}
func (m *NetworkListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkListRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkListRet proto.InternalMessageInfo

func (m *NetworkListRet) GetNetworkUuidList() [][]byte {
	if m != nil {
		return m.NetworkUuidList
	}
	return nil
}

type NetworkReserveIpArg struct {
	// uuid of the network from which the Ip is reserved.
	NetworkUuid []byte `protobuf:"bytes,1,opt,name=network_uuid,json=networkUuid" json:"network_uuid,omitempty"`
	// Ip addresses to be reserved.
	IpAddressList [][]byte                       `protobuf:"bytes,2,rep,name=ip_address_list,json=ipAddressList" json:"ip_address_list,omitempty"`
	Operation     *NetworkReserveIpArg_Operation `protobuf:"varint,3,opt,name=operation,enum=nutanix.acropolis.NetworkReserveIpArg_Operation,def=1" json:"operation,omitempty"`
	// Number of IPs to be reserved. It should be passed when
	// "ip_address_list" reserving specific IP addresses is not specified.
	NumIpAddresses *uint64 `protobuf:"varint,4,opt,name=num_ip_addresses,json=numIpAddresses" json:"num_ip_addresses,omitempty"`
	// cookie passed by the client
	Cookie               *string  `protobuf:"bytes,5,opt,name=cookie" json:"cookie,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkReserveIpArg) Reset()         { *m = NetworkReserveIpArg{} }
func (m *NetworkReserveIpArg) String() string { return proto.CompactTextString(m) }
func (*NetworkReserveIpArg) ProtoMessage()    {}
func (*NetworkReserveIpArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{146}
}

func (m *NetworkReserveIpArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkReserveIpArg.Unmarshal(m, b)
}
func (m *NetworkReserveIpArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkReserveIpArg.Marshal(b, m, deterministic)
}
func (m *NetworkReserveIpArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkReserveIpArg.Merge(m, src)
}
func (m *NetworkReserveIpArg) XXX_Size() int {
	return xxx_messageInfo_NetworkReserveIpArg.Size(m)
}
func (m *NetworkReserveIpArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkReserveIpArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkReserveIpArg proto.InternalMessageInfo

const Default_NetworkReserveIpArg_Operation NetworkReserveIpArg_Operation = NetworkReserveIpArg_kReserve

func (m *NetworkReserveIpArg) GetNetworkUuid() []byte {
	if m != nil {
		return m.NetworkUuid
	}
	return nil
}

func (m *NetworkReserveIpArg) GetIpAddressList() [][]byte {
	if m != nil {
		return m.IpAddressList
	}
	return nil
}

func (m *NetworkReserveIpArg) GetOperation() NetworkReserveIpArg_Operation {
	if m != nil && m.Operation != nil {
		return *m.Operation
	}
	return Default_NetworkReserveIpArg_Operation
}

func (m *NetworkReserveIpArg) GetNumIpAddresses() uint64 {
	if m != nil && m.NumIpAddresses != nil {
		return *m.NumIpAddresses
	}
	return 0
}

func (m *NetworkReserveIpArg) GetCookie() string {
	if m != nil && m.Cookie != nil {
		return *m.Cookie
	}
	return ""
}

type NetworkReserveIpRet struct {
	// IP address list.
	IpAddressList        [][]byte `protobuf:"bytes,1,rep,name=ip_address_list,json=ipAddressList" json:"ip_address_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkReserveIpRet) Reset()         { *m = NetworkReserveIpRet{} }
func (m *NetworkReserveIpRet) String() string { return proto.CompactTextString(m) }
func (*NetworkReserveIpRet) ProtoMessage()    {}
func (*NetworkReserveIpRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{147}
}

func (m *NetworkReserveIpRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkReserveIpRet.Unmarshal(m, b)
}
func (m *NetworkReserveIpRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkReserveIpRet.Marshal(b, m, deterministic)
}
func (m *NetworkReserveIpRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkReserveIpRet.Merge(m, src)
}
func (m *NetworkReserveIpRet) XXX_Size() int {
	return xxx_messageInfo_NetworkReserveIpRet.Size(m)
}
func (m *NetworkReserveIpRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkReserveIpRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkReserveIpRet proto.InternalMessageInfo

func (m *NetworkReserveIpRet) GetIpAddressList() [][]byte {
	if m != nil {
		return m.IpAddressList
	}
	return nil
}

type NetworkAddressTableGetArg struct {
	// The UUID of the network to lookup.
	NetworkUuid          []byte   `protobuf:"bytes,1,opt,name=network_uuid,json=networkUuid" json:"network_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkAddressTableGetArg) Reset()         { *m = NetworkAddressTableGetArg{} }
func (m *NetworkAddressTableGetArg) String() string { return proto.CompactTextString(m) }
func (*NetworkAddressTableGetArg) ProtoMessage()    {}
func (*NetworkAddressTableGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{148}
}

func (m *NetworkAddressTableGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkAddressTableGetArg.Unmarshal(m, b)
}
func (m *NetworkAddressTableGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkAddressTableGetArg.Marshal(b, m, deterministic)
}
func (m *NetworkAddressTableGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkAddressTableGetArg.Merge(m, src)
}
func (m *NetworkAddressTableGetArg) XXX_Size() int {
	return xxx_messageInfo_NetworkAddressTableGetArg.Size(m)
}
func (m *NetworkAddressTableGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkAddressTableGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkAddressTableGetArg proto.InternalMessageInfo

func (m *NetworkAddressTableGetArg) GetNetworkUuid() []byte {
	if m != nil {
		return m.NetworkUuid
	}
	return nil
}

type NetworkAddressTableGetRet struct {
	// Address assignment table if.
	AddressAssignmentTable *NetworkAddressAssignmentTable `protobuf:"bytes,1,opt,name=address_assignment_table,json=addressAssignmentTable" json:"address_assignment_table,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                       `json:"-"`
	XXX_unrecognized       []byte                         `json:"-"`
	XXX_sizecache          int32                          `json:"-"`
}

func (m *NetworkAddressTableGetRet) Reset()         { *m = NetworkAddressTableGetRet{} }
func (m *NetworkAddressTableGetRet) String() string { return proto.CompactTextString(m) }
func (*NetworkAddressTableGetRet) ProtoMessage()    {}
func (*NetworkAddressTableGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{149}
}

func (m *NetworkAddressTableGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkAddressTableGetRet.Unmarshal(m, b)
}
func (m *NetworkAddressTableGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkAddressTableGetRet.Marshal(b, m, deterministic)
}
func (m *NetworkAddressTableGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkAddressTableGetRet.Merge(m, src)
}
func (m *NetworkAddressTableGetRet) XXX_Size() int {
	return xxx_messageInfo_NetworkAddressTableGetRet.Size(m)
}
func (m *NetworkAddressTableGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkAddressTableGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkAddressTableGetRet proto.InternalMessageInfo

func (m *NetworkAddressTableGetRet) GetAddressAssignmentTable() *NetworkAddressAssignmentTable {
	if m != nil {
		return m.AddressAssignmentTable
	}
	return nil
}

type NetworkFunctionChainConfigCreateArg struct {
	// NetworkFunctionChainConfig definition.
	Object               *NetworkFunctionChainConfig `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NetworkFunctionChainConfigCreateArg) Reset()         { *m = NetworkFunctionChainConfigCreateArg{} }
func (m *NetworkFunctionChainConfigCreateArg) String() string { return proto.CompactTextString(m) }
func (*NetworkFunctionChainConfigCreateArg) ProtoMessage()    {}
func (*NetworkFunctionChainConfigCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{150}
}

func (m *NetworkFunctionChainConfigCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkFunctionChainConfigCreateArg.Unmarshal(m, b)
}
func (m *NetworkFunctionChainConfigCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkFunctionChainConfigCreateArg.Marshal(b, m, deterministic)
}
func (m *NetworkFunctionChainConfigCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFunctionChainConfigCreateArg.Merge(m, src)
}
func (m *NetworkFunctionChainConfigCreateArg) XXX_Size() int {
	return xxx_messageInfo_NetworkFunctionChainConfigCreateArg.Size(m)
}
func (m *NetworkFunctionChainConfigCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFunctionChainConfigCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFunctionChainConfigCreateArg proto.InternalMessageInfo

func (m *NetworkFunctionChainConfigCreateArg) GetObject() *NetworkFunctionChainConfig {
	if m != nil {
		return m.Object
	}
	return nil
}

type NetworkFunctionChainConfigCreateRet struct {
	Uuid                 []byte   `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkFunctionChainConfigCreateRet) Reset()         { *m = NetworkFunctionChainConfigCreateRet{} }
func (m *NetworkFunctionChainConfigCreateRet) String() string { return proto.CompactTextString(m) }
func (*NetworkFunctionChainConfigCreateRet) ProtoMessage()    {}
func (*NetworkFunctionChainConfigCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{151}
}

func (m *NetworkFunctionChainConfigCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkFunctionChainConfigCreateRet.Unmarshal(m, b)
}
func (m *NetworkFunctionChainConfigCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkFunctionChainConfigCreateRet.Marshal(b, m, deterministic)
}
func (m *NetworkFunctionChainConfigCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFunctionChainConfigCreateRet.Merge(m, src)
}
func (m *NetworkFunctionChainConfigCreateRet) XXX_Size() int {
	return xxx_messageInfo_NetworkFunctionChainConfigCreateRet.Size(m)
}
func (m *NetworkFunctionChainConfigCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFunctionChainConfigCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFunctionChainConfigCreateRet proto.InternalMessageInfo

func (m *NetworkFunctionChainConfigCreateRet) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type NetworkFunctionChainConfigGetArg struct {
	// The list of UUID of the objects to lookup.
	UuidList             [][]byte `protobuf:"bytes,1,rep,name=uuid_list,json=uuidList" json:"uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkFunctionChainConfigGetArg) Reset()         { *m = NetworkFunctionChainConfigGetArg{} }
func (m *NetworkFunctionChainConfigGetArg) String() string { return proto.CompactTextString(m) }
func (*NetworkFunctionChainConfigGetArg) ProtoMessage()    {}
func (*NetworkFunctionChainConfigGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{152}
}

func (m *NetworkFunctionChainConfigGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkFunctionChainConfigGetArg.Unmarshal(m, b)
}
func (m *NetworkFunctionChainConfigGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkFunctionChainConfigGetArg.Marshal(b, m, deterministic)
}
func (m *NetworkFunctionChainConfigGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFunctionChainConfigGetArg.Merge(m, src)
}
func (m *NetworkFunctionChainConfigGetArg) XXX_Size() int {
	return xxx_messageInfo_NetworkFunctionChainConfigGetArg.Size(m)
}
func (m *NetworkFunctionChainConfigGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFunctionChainConfigGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFunctionChainConfigGetArg proto.InternalMessageInfo

func (m *NetworkFunctionChainConfigGetArg) GetUuidList() [][]byte {
	if m != nil {
		return m.UuidList
	}
	return nil
}

type NetworkFunctionChainConfigGetRet struct {
	// The list of lookup results
	Objects              []*NetworkFunctionChainConfig `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *NetworkFunctionChainConfigGetRet) Reset()         { *m = NetworkFunctionChainConfigGetRet{} }
func (m *NetworkFunctionChainConfigGetRet) String() string { return proto.CompactTextString(m) }
func (*NetworkFunctionChainConfigGetRet) ProtoMessage()    {}
func (*NetworkFunctionChainConfigGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{153}
}

func (m *NetworkFunctionChainConfigGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkFunctionChainConfigGetRet.Unmarshal(m, b)
}
func (m *NetworkFunctionChainConfigGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkFunctionChainConfigGetRet.Marshal(b, m, deterministic)
}
func (m *NetworkFunctionChainConfigGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFunctionChainConfigGetRet.Merge(m, src)
}
func (m *NetworkFunctionChainConfigGetRet) XXX_Size() int {
	return xxx_messageInfo_NetworkFunctionChainConfigGetRet.Size(m)
}
func (m *NetworkFunctionChainConfigGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFunctionChainConfigGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFunctionChainConfigGetRet proto.InternalMessageInfo

func (m *NetworkFunctionChainConfigGetRet) GetObjects() []*NetworkFunctionChainConfig {
	if m != nil {
		return m.Objects
	}
	return nil
}

type NetworkFunctionChainConfigUpdateArg struct {
	// Updated object.
	Object               *NetworkFunctionChainConfig `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NetworkFunctionChainConfigUpdateArg) Reset()         { *m = NetworkFunctionChainConfigUpdateArg{} }
func (m *NetworkFunctionChainConfigUpdateArg) String() string { return proto.CompactTextString(m) }
func (*NetworkFunctionChainConfigUpdateArg) ProtoMessage()    {}
func (*NetworkFunctionChainConfigUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{154}
}

func (m *NetworkFunctionChainConfigUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkFunctionChainConfigUpdateArg.Unmarshal(m, b)
}
func (m *NetworkFunctionChainConfigUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkFunctionChainConfigUpdateArg.Marshal(b, m, deterministic)
}
func (m *NetworkFunctionChainConfigUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFunctionChainConfigUpdateArg.Merge(m, src)
}
func (m *NetworkFunctionChainConfigUpdateArg) XXX_Size() int {
	return xxx_messageInfo_NetworkFunctionChainConfigUpdateArg.Size(m)
}
func (m *NetworkFunctionChainConfigUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFunctionChainConfigUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFunctionChainConfigUpdateArg proto.InternalMessageInfo

func (m *NetworkFunctionChainConfigUpdateArg) GetObject() *NetworkFunctionChainConfig {
	if m != nil {
		return m.Object
	}
	return nil
}

type NetworkFunctionChainConfigUpdateRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkFunctionChainConfigUpdateRet) Reset()         { *m = NetworkFunctionChainConfigUpdateRet{} }
func (m *NetworkFunctionChainConfigUpdateRet) String() string { return proto.CompactTextString(m) }
func (*NetworkFunctionChainConfigUpdateRet) ProtoMessage()    {}
func (*NetworkFunctionChainConfigUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{155}
}

func (m *NetworkFunctionChainConfigUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkFunctionChainConfigUpdateRet.Unmarshal(m, b)
}
func (m *NetworkFunctionChainConfigUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkFunctionChainConfigUpdateRet.Marshal(b, m, deterministic)
}
func (m *NetworkFunctionChainConfigUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFunctionChainConfigUpdateRet.Merge(m, src)
}
func (m *NetworkFunctionChainConfigUpdateRet) XXX_Size() int {
	return xxx_messageInfo_NetworkFunctionChainConfigUpdateRet.Size(m)
}
func (m *NetworkFunctionChainConfigUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFunctionChainConfigUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFunctionChainConfigUpdateRet proto.InternalMessageInfo

type NetworkFunctionChainConfigDeleteArg struct {
	// UUID of the object to delete.
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// logical timestamp for synchronized delete.
	LogicalTimestamp     *int64   `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkFunctionChainConfigDeleteArg) Reset()         { *m = NetworkFunctionChainConfigDeleteArg{} }
func (m *NetworkFunctionChainConfigDeleteArg) String() string { return proto.CompactTextString(m) }
func (*NetworkFunctionChainConfigDeleteArg) ProtoMessage()    {}
func (*NetworkFunctionChainConfigDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{156}
}

func (m *NetworkFunctionChainConfigDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkFunctionChainConfigDeleteArg.Unmarshal(m, b)
}
func (m *NetworkFunctionChainConfigDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkFunctionChainConfigDeleteArg.Marshal(b, m, deterministic)
}
func (m *NetworkFunctionChainConfigDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFunctionChainConfigDeleteArg.Merge(m, src)
}
func (m *NetworkFunctionChainConfigDeleteArg) XXX_Size() int {
	return xxx_messageInfo_NetworkFunctionChainConfigDeleteArg.Size(m)
}
func (m *NetworkFunctionChainConfigDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFunctionChainConfigDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFunctionChainConfigDeleteArg proto.InternalMessageInfo

const Default_NetworkFunctionChainConfigDeleteArg_LogicalTimestamp int64 = -1

func (m *NetworkFunctionChainConfigDeleteArg) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *NetworkFunctionChainConfigDeleteArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_NetworkFunctionChainConfigDeleteArg_LogicalTimestamp
}

type NetworkFunctionChainConfigDeleteRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkFunctionChainConfigDeleteRet) Reset()         { *m = NetworkFunctionChainConfigDeleteRet{} }
func (m *NetworkFunctionChainConfigDeleteRet) String() string { return proto.CompactTextString(m) }
func (*NetworkFunctionChainConfigDeleteRet) ProtoMessage()    {}
func (*NetworkFunctionChainConfigDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{157}
}

func (m *NetworkFunctionChainConfigDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkFunctionChainConfigDeleteRet.Unmarshal(m, b)
}
func (m *NetworkFunctionChainConfigDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkFunctionChainConfigDeleteRet.Marshal(b, m, deterministic)
}
func (m *NetworkFunctionChainConfigDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFunctionChainConfigDeleteRet.Merge(m, src)
}
func (m *NetworkFunctionChainConfigDeleteRet) XXX_Size() int {
	return xxx_messageInfo_NetworkFunctionChainConfigDeleteRet.Size(m)
}
func (m *NetworkFunctionChainConfigDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFunctionChainConfigDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFunctionChainConfigDeleteRet proto.InternalMessageInfo

type NetworkFunctionChainConfigListArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkFunctionChainConfigListArg) Reset()         { *m = NetworkFunctionChainConfigListArg{} }
func (m *NetworkFunctionChainConfigListArg) String() string { return proto.CompactTextString(m) }
func (*NetworkFunctionChainConfigListArg) ProtoMessage()    {}
func (*NetworkFunctionChainConfigListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{158}
}

func (m *NetworkFunctionChainConfigListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkFunctionChainConfigListArg.Unmarshal(m, b)
}
func (m *NetworkFunctionChainConfigListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkFunctionChainConfigListArg.Marshal(b, m, deterministic)
}
func (m *NetworkFunctionChainConfigListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFunctionChainConfigListArg.Merge(m, src)
}
func (m *NetworkFunctionChainConfigListArg) XXX_Size() int {
	return xxx_messageInfo_NetworkFunctionChainConfigListArg.Size(m)
}
func (m *NetworkFunctionChainConfigListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFunctionChainConfigListArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFunctionChainConfigListArg proto.InternalMessageInfo

type NetworkFunctionChainConfigListRet struct {
	UuidList             [][]byte `protobuf:"bytes,1,rep,name=uuid_list,json=uuidList" json:"uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkFunctionChainConfigListRet) Reset()         { *m = NetworkFunctionChainConfigListRet{} }
func (m *NetworkFunctionChainConfigListRet) String() string { return proto.CompactTextString(m) }
func (*NetworkFunctionChainConfigListRet) ProtoMessage()    {}
func (*NetworkFunctionChainConfigListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{159}
}

func (m *NetworkFunctionChainConfigListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkFunctionChainConfigListRet.Unmarshal(m, b)
}
func (m *NetworkFunctionChainConfigListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkFunctionChainConfigListRet.Marshal(b, m, deterministic)
}
func (m *NetworkFunctionChainConfigListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkFunctionChainConfigListRet.Merge(m, src)
}
func (m *NetworkFunctionChainConfigListRet) XXX_Size() int {
	return xxx_messageInfo_NetworkFunctionChainConfigListRet.Size(m)
}
func (m *NetworkFunctionChainConfigListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkFunctionChainConfigListRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkFunctionChainConfigListRet proto.InternalMessageInfo

func (m *NetworkFunctionChainConfigListRet) GetUuidList() [][]byte {
	if m != nil {
		return m.UuidList
	}
	return nil
}

type VmAffinityNodeGetArg struct {
	// A list of VM UUIDs.
	VmUuidList           [][]byte `protobuf:"bytes,1,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmAffinityNodeGetArg) Reset()         { *m = VmAffinityNodeGetArg{} }
func (m *VmAffinityNodeGetArg) String() string { return proto.CompactTextString(m) }
func (*VmAffinityNodeGetArg) ProtoMessage()    {}
func (*VmAffinityNodeGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{160}
}

func (m *VmAffinityNodeGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmAffinityNodeGetArg.Unmarshal(m, b)
}
func (m *VmAffinityNodeGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmAffinityNodeGetArg.Marshal(b, m, deterministic)
}
func (m *VmAffinityNodeGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmAffinityNodeGetArg.Merge(m, src)
}
func (m *VmAffinityNodeGetArg) XXX_Size() int {
	return xxx_messageInfo_VmAffinityNodeGetArg.Size(m)
}
func (m *VmAffinityNodeGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmAffinityNodeGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmAffinityNodeGetArg proto.InternalMessageInfo

func (m *VmAffinityNodeGetArg) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

type VmAffinityNodeGetRet struct {
	AffinityNodeList     []*VmAffinityNodeGetRet_AffinityNodeInfo `protobuf:"bytes,1,rep,name=affinity_node_list,json=affinityNodeList" json:"affinity_node_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *VmAffinityNodeGetRet) Reset()         { *m = VmAffinityNodeGetRet{} }
func (m *VmAffinityNodeGetRet) String() string { return proto.CompactTextString(m) }
func (*VmAffinityNodeGetRet) ProtoMessage()    {}
func (*VmAffinityNodeGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{161}
}

func (m *VmAffinityNodeGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmAffinityNodeGetRet.Unmarshal(m, b)
}
func (m *VmAffinityNodeGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmAffinityNodeGetRet.Marshal(b, m, deterministic)
}
func (m *VmAffinityNodeGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmAffinityNodeGetRet.Merge(m, src)
}
func (m *VmAffinityNodeGetRet) XXX_Size() int {
	return xxx_messageInfo_VmAffinityNodeGetRet.Size(m)
}
func (m *VmAffinityNodeGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmAffinityNodeGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmAffinityNodeGetRet proto.InternalMessageInfo

func (m *VmAffinityNodeGetRet) GetAffinityNodeList() []*VmAffinityNodeGetRet_AffinityNodeInfo {
	if m != nil {
		return m.AffinityNodeList
	}
	return nil
}

type VmAffinityNodeGetRet_AffinityNodeInfo struct {
	// List of nodes that a VM has affinity to.
	NodeUuidList [][]byte `protobuf:"bytes,1,rep,name=node_uuid_list,json=nodeUuidList" json:"node_uuid_list,omitempty"`
	// Ok to schedule on nodes other than affinity nodes.
	DefaultToAll         *bool    `protobuf:"varint,2,opt,name=default_to_all,json=defaultToAll" json:"default_to_all,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmAffinityNodeGetRet_AffinityNodeInfo) Reset()         { *m = VmAffinityNodeGetRet_AffinityNodeInfo{} }
func (m *VmAffinityNodeGetRet_AffinityNodeInfo) String() string { return proto.CompactTextString(m) }
func (*VmAffinityNodeGetRet_AffinityNodeInfo) ProtoMessage()    {}
func (*VmAffinityNodeGetRet_AffinityNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{161, 0}
}

func (m *VmAffinityNodeGetRet_AffinityNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmAffinityNodeGetRet_AffinityNodeInfo.Unmarshal(m, b)
}
func (m *VmAffinityNodeGetRet_AffinityNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmAffinityNodeGetRet_AffinityNodeInfo.Marshal(b, m, deterministic)
}
func (m *VmAffinityNodeGetRet_AffinityNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmAffinityNodeGetRet_AffinityNodeInfo.Merge(m, src)
}
func (m *VmAffinityNodeGetRet_AffinityNodeInfo) XXX_Size() int {
	return xxx_messageInfo_VmAffinityNodeGetRet_AffinityNodeInfo.Size(m)
}
func (m *VmAffinityNodeGetRet_AffinityNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VmAffinityNodeGetRet_AffinityNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VmAffinityNodeGetRet_AffinityNodeInfo proto.InternalMessageInfo

func (m *VmAffinityNodeGetRet_AffinityNodeInfo) GetNodeUuidList() [][]byte {
	if m != nil {
		return m.NodeUuidList
	}
	return nil
}

func (m *VmAffinityNodeGetRet_AffinityNodeInfo) GetDefaultToAll() bool {
	if m != nil && m.DefaultToAll != nil {
		return *m.DefaultToAll
	}
	return false
}

type EnterMaintenanceModeArg struct {
	// The UUID of the host.
	HostUuid         []byte                                      `protobuf:"bytes,1,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	EvacuationOption *EnterMaintenanceModeArg_VmEvacuationOption `protobuf:"varint,2,opt,name=evacuation_option,json=evacuationOption,enum=nutanix.acropolis.EnterMaintenanceModeArg_VmEvacuationOption,def=3" json:"evacuation_option,omitempty"`
	// Logical timestamp (found in the acropolis_status field for a node in Zeus)
	// that may be provided for consistency.
	LogicalTimestamp *int64 `protobuf:"varint,3,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// If true, reserve host for HA.  Else, enter into maintenance mode.
	ReservedForHa *bool `protobuf:"varint,4,opt,name=reserved_for_ha,json=reservedForHa,def=0" json:"reserved_for_ha,omitempty"`
	// Whether to use HA reservations for evacuation.
	UseHaReservations *bool `protobuf:"varint,5,opt,name=use_ha_reservations,json=useHaReservations,def=1" json:"use_ha_reservations,omitempty"`
	// Whether to set VM 'removed_from_host' in enter maintenance mode task.
	SetRemovedFromHost *bool `protobuf:"varint,6,opt,name=set_removed_from_host,json=setRemovedFromHost,def=1" json:"set_removed_from_host,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,7,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,8,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,9,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Indicates the action we take for non migratable VMs
	NonmigratableVmAction *EnterMaintenanceModeTypes_VmNonMigratableOption `protobuf:"varint,10,opt,name=nonmigratable_vm_action,json=nonmigratableVmAction,enum=nutanix.acropolis.EnterMaintenanceModeTypes_VmNonMigratableOption,def=1" json:"nonmigratable_vm_action,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                         `json:"-"`
	XXX_unrecognized      []byte                                           `json:"-"`
	XXX_sizecache         int32                                            `json:"-"`
}

func (m *EnterMaintenanceModeArg) Reset()         { *m = EnterMaintenanceModeArg{} }
func (m *EnterMaintenanceModeArg) String() string { return proto.CompactTextString(m) }
func (*EnterMaintenanceModeArg) ProtoMessage()    {}
func (*EnterMaintenanceModeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{162}
}

func (m *EnterMaintenanceModeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnterMaintenanceModeArg.Unmarshal(m, b)
}
func (m *EnterMaintenanceModeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnterMaintenanceModeArg.Marshal(b, m, deterministic)
}
func (m *EnterMaintenanceModeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterMaintenanceModeArg.Merge(m, src)
}
func (m *EnterMaintenanceModeArg) XXX_Size() int {
	return xxx_messageInfo_EnterMaintenanceModeArg.Size(m)
}
func (m *EnterMaintenanceModeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterMaintenanceModeArg.DiscardUnknown(m)
}

var xxx_messageInfo_EnterMaintenanceModeArg proto.InternalMessageInfo

const Default_EnterMaintenanceModeArg_EvacuationOption EnterMaintenanceModeArg_VmEvacuationOption = EnterMaintenanceModeArg_kLiveMigrate
const Default_EnterMaintenanceModeArg_LogicalTimestamp int64 = -1
const Default_EnterMaintenanceModeArg_ReservedForHa bool = false
const Default_EnterMaintenanceModeArg_UseHaReservations bool = true
const Default_EnterMaintenanceModeArg_SetRemovedFromHost bool = true
const Default_EnterMaintenanceModeArg_NonmigratableVmAction EnterMaintenanceModeTypes_VmNonMigratableOption = EnterMaintenanceModeTypes_kBlock

func (m *EnterMaintenanceModeArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *EnterMaintenanceModeArg) GetEvacuationOption() EnterMaintenanceModeArg_VmEvacuationOption {
	if m != nil && m.EvacuationOption != nil {
		return *m.EvacuationOption
	}
	return Default_EnterMaintenanceModeArg_EvacuationOption
}

func (m *EnterMaintenanceModeArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_EnterMaintenanceModeArg_LogicalTimestamp
}

func (m *EnterMaintenanceModeArg) GetReservedForHa() bool {
	if m != nil && m.ReservedForHa != nil {
		return *m.ReservedForHa
	}
	return Default_EnterMaintenanceModeArg_ReservedForHa
}

func (m *EnterMaintenanceModeArg) GetUseHaReservations() bool {
	if m != nil && m.UseHaReservations != nil {
		return *m.UseHaReservations
	}
	return Default_EnterMaintenanceModeArg_UseHaReservations
}

func (m *EnterMaintenanceModeArg) GetSetRemovedFromHost() bool {
	if m != nil && m.SetRemovedFromHost != nil {
		return *m.SetRemovedFromHost
	}
	return Default_EnterMaintenanceModeArg_SetRemovedFromHost
}

func (m *EnterMaintenanceModeArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *EnterMaintenanceModeArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *EnterMaintenanceModeArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *EnterMaintenanceModeArg) GetNonmigratableVmAction() EnterMaintenanceModeTypes_VmNonMigratableOption {
	if m != nil && m.NonmigratableVmAction != nil {
		return *m.NonmigratableVmAction
	}
	return Default_EnterMaintenanceModeArg_NonmigratableVmAction
}

type EnterMaintenanceModeRet struct {
	// A task to poll for completion. On success, the task will contain a
	// EnterMaintenanceModeTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnterMaintenanceModeRet) Reset()         { *m = EnterMaintenanceModeRet{} }
func (m *EnterMaintenanceModeRet) String() string { return proto.CompactTextString(m) }
func (*EnterMaintenanceModeRet) ProtoMessage()    {}
func (*EnterMaintenanceModeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{163}
}

func (m *EnterMaintenanceModeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnterMaintenanceModeRet.Unmarshal(m, b)
}
func (m *EnterMaintenanceModeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnterMaintenanceModeRet.Marshal(b, m, deterministic)
}
func (m *EnterMaintenanceModeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterMaintenanceModeRet.Merge(m, src)
}
func (m *EnterMaintenanceModeRet) XXX_Size() int {
	return xxx_messageInfo_EnterMaintenanceModeRet.Size(m)
}
func (m *EnterMaintenanceModeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterMaintenanceModeRet.DiscardUnknown(m)
}

var xxx_messageInfo_EnterMaintenanceModeRet proto.InternalMessageInfo

func (m *EnterMaintenanceModeRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type EnterMaintenanceModeTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnterMaintenanceModeTaskRet) Reset()         { *m = EnterMaintenanceModeTaskRet{} }
func (m *EnterMaintenanceModeTaskRet) String() string { return proto.CompactTextString(m) }
func (*EnterMaintenanceModeTaskRet) ProtoMessage()    {}
func (*EnterMaintenanceModeTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{164}
}

func (m *EnterMaintenanceModeTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnterMaintenanceModeTaskRet.Unmarshal(m, b)
}
func (m *EnterMaintenanceModeTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnterMaintenanceModeTaskRet.Marshal(b, m, deterministic)
}
func (m *EnterMaintenanceModeTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterMaintenanceModeTaskRet.Merge(m, src)
}
func (m *EnterMaintenanceModeTaskRet) XXX_Size() int {
	return xxx_messageInfo_EnterMaintenanceModeTaskRet.Size(m)
}
func (m *EnterMaintenanceModeTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterMaintenanceModeTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_EnterMaintenanceModeTaskRet proto.InternalMessageInfo

type ExitMaintenanceModeArg struct {
	// The UUID of the host.
	HostUuid []byte `protobuf:"bytes,1,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// Logical timestamp (found in the acropolis_status field for a node in Zeus)
	// that may be provided for consistency.
	LogicalTimestamp     *int64   `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExitMaintenanceModeArg) Reset()         { *m = ExitMaintenanceModeArg{} }
func (m *ExitMaintenanceModeArg) String() string { return proto.CompactTextString(m) }
func (*ExitMaintenanceModeArg) ProtoMessage()    {}
func (*ExitMaintenanceModeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{165}
}

func (m *ExitMaintenanceModeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExitMaintenanceModeArg.Unmarshal(m, b)
}
func (m *ExitMaintenanceModeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExitMaintenanceModeArg.Marshal(b, m, deterministic)
}
func (m *ExitMaintenanceModeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitMaintenanceModeArg.Merge(m, src)
}
func (m *ExitMaintenanceModeArg) XXX_Size() int {
	return xxx_messageInfo_ExitMaintenanceModeArg.Size(m)
}
func (m *ExitMaintenanceModeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitMaintenanceModeArg.DiscardUnknown(m)
}

var xxx_messageInfo_ExitMaintenanceModeArg proto.InternalMessageInfo

const Default_ExitMaintenanceModeArg_LogicalTimestamp int64 = -1

func (m *ExitMaintenanceModeArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *ExitMaintenanceModeArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_ExitMaintenanceModeArg_LogicalTimestamp
}

type ExitMaintenanceModeRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExitMaintenanceModeRet) Reset()         { *m = ExitMaintenanceModeRet{} }
func (m *ExitMaintenanceModeRet) String() string { return proto.CompactTextString(m) }
func (*ExitMaintenanceModeRet) ProtoMessage()    {}
func (*ExitMaintenanceModeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{166}
}

func (m *ExitMaintenanceModeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExitMaintenanceModeRet.Unmarshal(m, b)
}
func (m *ExitMaintenanceModeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExitMaintenanceModeRet.Marshal(b, m, deterministic)
}
func (m *ExitMaintenanceModeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitMaintenanceModeRet.Merge(m, src)
}
func (m *ExitMaintenanceModeRet) XXX_Size() int {
	return xxx_messageInfo_ExitMaintenanceModeRet.Size(m)
}
func (m *ExitMaintenanceModeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitMaintenanceModeRet.DiscardUnknown(m)
}

var xxx_messageInfo_ExitMaintenanceModeRet proto.InternalMessageInfo

type ExitMaintenanceModeAsyncRet struct {
	// A task to poll for completion. On success, the task will contain an
	// ExitMaintenanceModeRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExitMaintenanceModeAsyncRet) Reset()         { *m = ExitMaintenanceModeAsyncRet{} }
func (m *ExitMaintenanceModeAsyncRet) String() string { return proto.CompactTextString(m) }
func (*ExitMaintenanceModeAsyncRet) ProtoMessage()    {}
func (*ExitMaintenanceModeAsyncRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{167}
}

func (m *ExitMaintenanceModeAsyncRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExitMaintenanceModeAsyncRet.Unmarshal(m, b)
}
func (m *ExitMaintenanceModeAsyncRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExitMaintenanceModeAsyncRet.Marshal(b, m, deterministic)
}
func (m *ExitMaintenanceModeAsyncRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitMaintenanceModeAsyncRet.Merge(m, src)
}
func (m *ExitMaintenanceModeAsyncRet) XXX_Size() int {
	return xxx_messageInfo_ExitMaintenanceModeAsyncRet.Size(m)
}
func (m *ExitMaintenanceModeAsyncRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitMaintenanceModeAsyncRet.DiscardUnknown(m)
}

var xxx_messageInfo_ExitMaintenanceModeAsyncRet proto.InternalMessageInfo

func (m *ExitMaintenanceModeAsyncRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type HaUpdateArg struct {
	// Number of hosts failures to tolerate.
	NumHostFailuresToTolerate *int64 `protobuf:"varint,1,opt,name=num_host_failures_to_tolerate,json=numHostFailuresToTolerate" json:"num_host_failures_to_tolerate,omitempty"`
	// Indicates the action we take to evacuate VMs powered on the host.
	EvacuationOption *EnterMaintenanceModeArg_VmEvacuationOption `protobuf:"varint,2,opt,name=evacuation_option,json=evacuationOption,enum=nutanix.acropolis.EnterMaintenanceModeArg_VmEvacuationOption,def=3" json:"evacuation_option,omitempty"`
	// Whether HA should be invoked upon host failure.
	EnableFailover *bool `protobuf:"varint,3,opt,name=enable_failover,json=enableFailover" json:"enable_failover,omitempty"`
	// Logical timestamp for HA configuration stored in Zeus that may be provided
	// for consistency.
	LogicalTimestamp *int64                                                                  `protobuf:"varint,4,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	ReservationType  *config.ConfigurationProto_AcropolisHAConfig_AcropolisHAReservationType `protobuf:"varint,6,opt,name=reservation_type,json=reservationType,enum=nutanix.zeus.ConfigurationProto_AcropolisHAConfig_AcropolisHAReservationType" json:"reservation_type,omitempty"`
	// Forcing HA update operation.
	Force *bool `protobuf:"varint,7,opt,name=force,def=0" json:"force,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,8,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,9,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,10,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HaUpdateArg) Reset()         { *m = HaUpdateArg{} }
func (m *HaUpdateArg) String() string { return proto.CompactTextString(m) }
func (*HaUpdateArg) ProtoMessage()    {}
func (*HaUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{168}
}

func (m *HaUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HaUpdateArg.Unmarshal(m, b)
}
func (m *HaUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HaUpdateArg.Marshal(b, m, deterministic)
}
func (m *HaUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HaUpdateArg.Merge(m, src)
}
func (m *HaUpdateArg) XXX_Size() int {
	return xxx_messageInfo_HaUpdateArg.Size(m)
}
func (m *HaUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_HaUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_HaUpdateArg proto.InternalMessageInfo

const Default_HaUpdateArg_EvacuationOption EnterMaintenanceModeArg_VmEvacuationOption = EnterMaintenanceModeArg_kLiveMigrate
const Default_HaUpdateArg_LogicalTimestamp int64 = -1
const Default_HaUpdateArg_Force bool = false

func (m *HaUpdateArg) GetNumHostFailuresToTolerate() int64 {
	if m != nil && m.NumHostFailuresToTolerate != nil {
		return *m.NumHostFailuresToTolerate
	}
	return 0
}

func (m *HaUpdateArg) GetEvacuationOption() EnterMaintenanceModeArg_VmEvacuationOption {
	if m != nil && m.EvacuationOption != nil {
		return *m.EvacuationOption
	}
	return Default_HaUpdateArg_EvacuationOption
}

func (m *HaUpdateArg) GetEnableFailover() bool {
	if m != nil && m.EnableFailover != nil {
		return *m.EnableFailover
	}
	return false
}

func (m *HaUpdateArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_HaUpdateArg_LogicalTimestamp
}

func (m *HaUpdateArg) GetReservationType() config.ConfigurationProto_AcropolisHAConfig_AcropolisHAReservationType {
	if m != nil && m.ReservationType != nil {
		return *m.ReservationType
	}
	return config.ConfigurationProto_AcropolisHAConfig_kAcropolisHAReserveHosts
}

func (m *HaUpdateArg) GetForce() bool {
	if m != nil && m.Force != nil {
		return *m.Force
	}
	return Default_HaUpdateArg_Force
}

func (m *HaUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *HaUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *HaUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type HaUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// HaUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HaUpdateRet) Reset()         { *m = HaUpdateRet{} }
func (m *HaUpdateRet) String() string { return proto.CompactTextString(m) }
func (*HaUpdateRet) ProtoMessage()    {}
func (*HaUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{169}
}

func (m *HaUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HaUpdateRet.Unmarshal(m, b)
}
func (m *HaUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HaUpdateRet.Marshal(b, m, deterministic)
}
func (m *HaUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HaUpdateRet.Merge(m, src)
}
func (m *HaUpdateRet) XXX_Size() int {
	return xxx_messageInfo_HaUpdateRet.Size(m)
}
func (m *HaUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HaUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_HaUpdateRet proto.InternalMessageInfo

func (m *HaUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type HaUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HaUpdateTaskRet) Reset()         { *m = HaUpdateTaskRet{} }
func (m *HaUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*HaUpdateTaskRet) ProtoMessage()    {}
func (*HaUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{170}
}

func (m *HaUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HaUpdateTaskRet.Unmarshal(m, b)
}
func (m *HaUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HaUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *HaUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HaUpdateTaskRet.Merge(m, src)
}
func (m *HaUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_HaUpdateTaskRet.Size(m)
}
func (m *HaUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HaUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_HaUpdateTaskRet proto.InternalMessageInfo

type HaGetArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HaGetArg) Reset()         { *m = HaGetArg{} }
func (m *HaGetArg) String() string { return proto.CompactTextString(m) }
func (*HaGetArg) ProtoMessage()    {}
func (*HaGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{171}
}

func (m *HaGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HaGetArg.Unmarshal(m, b)
}
func (m *HaGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HaGetArg.Marshal(b, m, deterministic)
}
func (m *HaGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HaGetArg.Merge(m, src)
}
func (m *HaGetArg) XXX_Size() int {
	return xxx_messageInfo_HaGetArg.Size(m)
}
func (m *HaGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_HaGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_HaGetArg proto.InternalMessageInfo

type HaGetRet struct {
	// Whether HA should be invoked upon host failure.
	FailoverEnabled *bool `protobuf:"varint,1,opt,name=failover_enabled,json=failoverEnabled" json:"failover_enabled,omitempty"`
	// Number of hosts failures to tolerate.
	NumHostFailuresToTolerate *int64 `protobuf:"varint,2,opt,name=num_host_failures_to_tolerate,json=numHostFailuresToTolerate" json:"num_host_failures_to_tolerate,omitempty"`
	// Logical timestamp of the configuration.
	LogicalTimestamp *int64 `protobuf:"varint,3,opt,name=logical_timestamp,json=logicalTimestamp" json:"logical_timestamp,omitempty"`
	// UUIDs of hosts reserved for failover.
	ReservedHostUuids [][]byte `protobuf:"bytes,4,rep,name=reserved_host_uuids,json=reservedHostUuids" json:"reserved_host_uuids,omitempty"`
	// UUIDs of hosts that are part of in-progress failover.
	FailoverInProgressHostUuids [][]byte                                                                `protobuf:"bytes,5,rep,name=failover_in_progress_host_uuids,json=failoverInProgressHostUuids" json:"failover_in_progress_host_uuids,omitempty"`
	HaState                     *config.ConfigurationProto_AcropolisHAConfig_AcropolisHAState           `protobuf:"varint,7,opt,name=ha_state,json=haState,enum=nutanix.zeus.ConfigurationProto_AcropolisHAConfig_AcropolisHAState" json:"ha_state,omitempty"`
	ReservationType             *config.ConfigurationProto_AcropolisHAConfig_AcropolisHAReservationType `protobuf:"varint,8,opt,name=reservation_type,json=reservationType,enum=nutanix.zeus.ConfigurationProto_AcropolisHAConfig_AcropolisHAReservationType" json:"reservation_type,omitempty"`
	// The number of host failures that can be tolerated based on the current
	// state of the cluster.
	NumRemainingHostFailuresToTolerate *int64   `protobuf:"varint,9,opt,name=num_remaining_host_failures_to_tolerate,json=numRemainingHostFailuresToTolerate" json:"num_remaining_host_failures_to_tolerate,omitempty"`
	XXX_NoUnkeyedLiteral               struct{} `json:"-"`
	XXX_unrecognized                   []byte   `json:"-"`
	XXX_sizecache                      int32    `json:"-"`
}

func (m *HaGetRet) Reset()         { *m = HaGetRet{} }
func (m *HaGetRet) String() string { return proto.CompactTextString(m) }
func (*HaGetRet) ProtoMessage()    {}
func (*HaGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{172}
}

func (m *HaGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HaGetRet.Unmarshal(m, b)
}
func (m *HaGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HaGetRet.Marshal(b, m, deterministic)
}
func (m *HaGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HaGetRet.Merge(m, src)
}
func (m *HaGetRet) XXX_Size() int {
	return xxx_messageInfo_HaGetRet.Size(m)
}
func (m *HaGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HaGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_HaGetRet proto.InternalMessageInfo

func (m *HaGetRet) GetFailoverEnabled() bool {
	if m != nil && m.FailoverEnabled != nil {
		return *m.FailoverEnabled
	}
	return false
}

func (m *HaGetRet) GetNumHostFailuresToTolerate() int64 {
	if m != nil && m.NumHostFailuresToTolerate != nil {
		return *m.NumHostFailuresToTolerate
	}
	return 0
}

func (m *HaGetRet) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return 0
}

func (m *HaGetRet) GetReservedHostUuids() [][]byte {
	if m != nil {
		return m.ReservedHostUuids
	}
	return nil
}

func (m *HaGetRet) GetFailoverInProgressHostUuids() [][]byte {
	if m != nil {
		return m.FailoverInProgressHostUuids
	}
	return nil
}

func (m *HaGetRet) GetHaState() config.ConfigurationProto_AcropolisHAConfig_AcropolisHAState {
	if m != nil && m.HaState != nil {
		return *m.HaState
	}
	return config.ConfigurationProto_AcropolisHAConfig_kAcropolisHAHighlyAvailable
}

func (m *HaGetRet) GetReservationType() config.ConfigurationProto_AcropolisHAConfig_AcropolisHAReservationType {
	if m != nil && m.ReservationType != nil {
		return *m.ReservationType
	}
	return config.ConfigurationProto_AcropolisHAConfig_kAcropolisHAReserveHosts
}

func (m *HaGetRet) GetNumRemainingHostFailuresToTolerate() int64 {
	if m != nil && m.NumRemainingHostFailuresToTolerate != nil {
		return *m.NumRemainingHostFailuresToTolerate
	}
	return 0
}

type HostRestartAllVmsArg struct {
	// The UUID of the host.
	HostUuid []byte `protobuf:"bytes,1,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// The UUID of the host where VMs should be failed over.
	FailoverHostUuid []byte `protobuf:"bytes,2,opt,name=failover_host_uuid,json=failoverHostUuid" json:"failover_host_uuid,omitempty"`
	// Timestamp the failover started, in seconds since epoch.
	FailoverStartTime *float64 `protobuf:"fixed64,3,opt,name=failover_start_time,json=failoverStartTime" json:"failover_start_time,omitempty"`
	// Whether to use reserved segments for restarting VMs.
	UseSegments *bool `protobuf:"varint,4,opt,name=use_segments,json=useSegments" json:"use_segments,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,7,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostRestartAllVmsArg) Reset()         { *m = HostRestartAllVmsArg{} }
func (m *HostRestartAllVmsArg) String() string { return proto.CompactTextString(m) }
func (*HostRestartAllVmsArg) ProtoMessage()    {}
func (*HostRestartAllVmsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{173}
}

func (m *HostRestartAllVmsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostRestartAllVmsArg.Unmarshal(m, b)
}
func (m *HostRestartAllVmsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostRestartAllVmsArg.Marshal(b, m, deterministic)
}
func (m *HostRestartAllVmsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostRestartAllVmsArg.Merge(m, src)
}
func (m *HostRestartAllVmsArg) XXX_Size() int {
	return xxx_messageInfo_HostRestartAllVmsArg.Size(m)
}
func (m *HostRestartAllVmsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_HostRestartAllVmsArg.DiscardUnknown(m)
}

var xxx_messageInfo_HostRestartAllVmsArg proto.InternalMessageInfo

func (m *HostRestartAllVmsArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *HostRestartAllVmsArg) GetFailoverHostUuid() []byte {
	if m != nil {
		return m.FailoverHostUuid
	}
	return nil
}

func (m *HostRestartAllVmsArg) GetFailoverStartTime() float64 {
	if m != nil && m.FailoverStartTime != nil {
		return *m.FailoverStartTime
	}
	return 0
}

func (m *HostRestartAllVmsArg) GetUseSegments() bool {
	if m != nil && m.UseSegments != nil {
		return *m.UseSegments
	}
	return false
}

func (m *HostRestartAllVmsArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *HostRestartAllVmsArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *HostRestartAllVmsArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type HostRestartAllVmsRet struct {
	// A task to poll for completion. On success, the task will contain a
	// HostRestartAllVmsTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostRestartAllVmsRet) Reset()         { *m = HostRestartAllVmsRet{} }
func (m *HostRestartAllVmsRet) String() string { return proto.CompactTextString(m) }
func (*HostRestartAllVmsRet) ProtoMessage()    {}
func (*HostRestartAllVmsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{174}
}

func (m *HostRestartAllVmsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostRestartAllVmsRet.Unmarshal(m, b)
}
func (m *HostRestartAllVmsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostRestartAllVmsRet.Marshal(b, m, deterministic)
}
func (m *HostRestartAllVmsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostRestartAllVmsRet.Merge(m, src)
}
func (m *HostRestartAllVmsRet) XXX_Size() int {
	return xxx_messageInfo_HostRestartAllVmsRet.Size(m)
}
func (m *HostRestartAllVmsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HostRestartAllVmsRet.DiscardUnknown(m)
}

var xxx_messageInfo_HostRestartAllVmsRet proto.InternalMessageInfo

func (m *HostRestartAllVmsRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type HostRestartAllVmsTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostRestartAllVmsTaskRet) Reset()         { *m = HostRestartAllVmsTaskRet{} }
func (m *HostRestartAllVmsTaskRet) String() string { return proto.CompactTextString(m) }
func (*HostRestartAllVmsTaskRet) ProtoMessage()    {}
func (*HostRestartAllVmsTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{175}
}

func (m *HostRestartAllVmsTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostRestartAllVmsTaskRet.Unmarshal(m, b)
}
func (m *HostRestartAllVmsTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostRestartAllVmsTaskRet.Marshal(b, m, deterministic)
}
func (m *HostRestartAllVmsTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostRestartAllVmsTaskRet.Merge(m, src)
}
func (m *HostRestartAllVmsTaskRet) XXX_Size() int {
	return xxx_messageInfo_HostRestartAllVmsTaskRet.Size(m)
}
func (m *HostRestartAllVmsTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HostRestartAllVmsTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_HostRestartAllVmsTaskRet proto.InternalMessageInfo

type RestartVmGroupArg struct {
	// The UUID of the host.
	HostUuid []byte `protobuf:"bytes,1,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// The UUID of the host where VMs should be failed over.
	FailoverHostUuid []byte `protobuf:"bytes,2,opt,name=failover_host_uuid,json=failoverHostUuid" json:"failover_host_uuid,omitempty"`
	// List of VMs to restart.
	VmUuidList [][]byte `protobuf:"bytes,3,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	// Whether to use reserved segments for restarting VMs.
	UseSegments *bool `protobuf:"varint,4,opt,name=use_segments,json=useSegments" json:"use_segments,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,6,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,7,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,8,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Logical timestamp for the segment assignment at task creation.
	SegmentsTimestamp    *int64   `protobuf:"varint,9,opt,name=segments_timestamp,json=segmentsTimestamp" json:"segments_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartVmGroupArg) Reset()         { *m = RestartVmGroupArg{} }
func (m *RestartVmGroupArg) String() string { return proto.CompactTextString(m) }
func (*RestartVmGroupArg) ProtoMessage()    {}
func (*RestartVmGroupArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{176}
}

func (m *RestartVmGroupArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartVmGroupArg.Unmarshal(m, b)
}
func (m *RestartVmGroupArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartVmGroupArg.Marshal(b, m, deterministic)
}
func (m *RestartVmGroupArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartVmGroupArg.Merge(m, src)
}
func (m *RestartVmGroupArg) XXX_Size() int {
	return xxx_messageInfo_RestartVmGroupArg.Size(m)
}
func (m *RestartVmGroupArg) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartVmGroupArg.DiscardUnknown(m)
}

var xxx_messageInfo_RestartVmGroupArg proto.InternalMessageInfo

func (m *RestartVmGroupArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *RestartVmGroupArg) GetFailoverHostUuid() []byte {
	if m != nil {
		return m.FailoverHostUuid
	}
	return nil
}

func (m *RestartVmGroupArg) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

func (m *RestartVmGroupArg) GetUseSegments() bool {
	if m != nil && m.UseSegments != nil {
		return *m.UseSegments
	}
	return false
}

func (m *RestartVmGroupArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *RestartVmGroupArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *RestartVmGroupArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *RestartVmGroupArg) GetSegmentsTimestamp() int64 {
	if m != nil && m.SegmentsTimestamp != nil {
		return *m.SegmentsTimestamp
	}
	return 0
}

type RestartVmGroupRet struct {
	// A task to poll for completion. On success, the task will contain a
	// RestartVmGroupTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartVmGroupRet) Reset()         { *m = RestartVmGroupRet{} }
func (m *RestartVmGroupRet) String() string { return proto.CompactTextString(m) }
func (*RestartVmGroupRet) ProtoMessage()    {}
func (*RestartVmGroupRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{177}
}

func (m *RestartVmGroupRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartVmGroupRet.Unmarshal(m, b)
}
func (m *RestartVmGroupRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartVmGroupRet.Marshal(b, m, deterministic)
}
func (m *RestartVmGroupRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartVmGroupRet.Merge(m, src)
}
func (m *RestartVmGroupRet) XXX_Size() int {
	return xxx_messageInfo_RestartVmGroupRet.Size(m)
}
func (m *RestartVmGroupRet) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartVmGroupRet.DiscardUnknown(m)
}

var xxx_messageInfo_RestartVmGroupRet proto.InternalMessageInfo

func (m *RestartVmGroupRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type RestartVmGroupTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartVmGroupTaskRet) Reset()         { *m = RestartVmGroupTaskRet{} }
func (m *RestartVmGroupTaskRet) String() string { return proto.CompactTextString(m) }
func (*RestartVmGroupTaskRet) ProtoMessage()    {}
func (*RestartVmGroupTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{178}
}

func (m *RestartVmGroupTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartVmGroupTaskRet.Unmarshal(m, b)
}
func (m *RestartVmGroupTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartVmGroupTaskRet.Marshal(b, m, deterministic)
}
func (m *RestartVmGroupTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartVmGroupTaskRet.Merge(m, src)
}
func (m *RestartVmGroupTaskRet) XXX_Size() int {
	return xxx_messageInfo_RestartVmGroupTaskRet.Size(m)
}
func (m *RestartVmGroupTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartVmGroupTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_RestartVmGroupTaskRet proto.InternalMessageInfo

type StartHAFailoverArg struct {
	// The UUID of the host.
	HostUuid []byte `protobuf:"bytes,1,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartHAFailoverArg) Reset()         { *m = StartHAFailoverArg{} }
func (m *StartHAFailoverArg) String() string { return proto.CompactTextString(m) }
func (*StartHAFailoverArg) ProtoMessage()    {}
func (*StartHAFailoverArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{179}
}

func (m *StartHAFailoverArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartHAFailoverArg.Unmarshal(m, b)
}
func (m *StartHAFailoverArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartHAFailoverArg.Marshal(b, m, deterministic)
}
func (m *StartHAFailoverArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartHAFailoverArg.Merge(m, src)
}
func (m *StartHAFailoverArg) XXX_Size() int {
	return xxx_messageInfo_StartHAFailoverArg.Size(m)
}
func (m *StartHAFailoverArg) XXX_DiscardUnknown() {
	xxx_messageInfo_StartHAFailoverArg.DiscardUnknown(m)
}

var xxx_messageInfo_StartHAFailoverArg proto.InternalMessageInfo

func (m *StartHAFailoverArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *StartHAFailoverArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *StartHAFailoverArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *StartHAFailoverArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type StartHAFailoverRet struct {
	// A task to poll for completion. On success, the task will contain a
	// StartHAFailoverTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartHAFailoverRet) Reset()         { *m = StartHAFailoverRet{} }
func (m *StartHAFailoverRet) String() string { return proto.CompactTextString(m) }
func (*StartHAFailoverRet) ProtoMessage()    {}
func (*StartHAFailoverRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{180}
}

func (m *StartHAFailoverRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartHAFailoverRet.Unmarshal(m, b)
}
func (m *StartHAFailoverRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartHAFailoverRet.Marshal(b, m, deterministic)
}
func (m *StartHAFailoverRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartHAFailoverRet.Merge(m, src)
}
func (m *StartHAFailoverRet) XXX_Size() int {
	return xxx_messageInfo_StartHAFailoverRet.Size(m)
}
func (m *StartHAFailoverRet) XXX_DiscardUnknown() {
	xxx_messageInfo_StartHAFailoverRet.DiscardUnknown(m)
}

var xxx_messageInfo_StartHAFailoverRet proto.InternalMessageInfo

func (m *StartHAFailoverRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type StartHAFailoverTaskRet struct {
	// Timestamp the failover started, in seconds since epoch.
	FailoverStartTime *float64 `protobuf:"fixed64,1,opt,name=failover_start_time,json=failoverStartTime" json:"failover_start_time,omitempty"`
	// The UUID of the host the VMs are failing over to.
	FailoverHostUuid     []byte   `protobuf:"bytes,2,opt,name=failover_host_uuid,json=failoverHostUuid" json:"failover_host_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartHAFailoverTaskRet) Reset()         { *m = StartHAFailoverTaskRet{} }
func (m *StartHAFailoverTaskRet) String() string { return proto.CompactTextString(m) }
func (*StartHAFailoverTaskRet) ProtoMessage()    {}
func (*StartHAFailoverTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{181}
}

func (m *StartHAFailoverTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartHAFailoverTaskRet.Unmarshal(m, b)
}
func (m *StartHAFailoverTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartHAFailoverTaskRet.Marshal(b, m, deterministic)
}
func (m *StartHAFailoverTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartHAFailoverTaskRet.Merge(m, src)
}
func (m *StartHAFailoverTaskRet) XXX_Size() int {
	return xxx_messageInfo_StartHAFailoverTaskRet.Size(m)
}
func (m *StartHAFailoverTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_StartHAFailoverTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_StartHAFailoverTaskRet proto.InternalMessageInfo

func (m *StartHAFailoverTaskRet) GetFailoverStartTime() float64 {
	if m != nil && m.FailoverStartTime != nil {
		return *m.FailoverStartTime
	}
	return 0
}

func (m *StartHAFailoverTaskRet) GetFailoverHostUuid() []byte {
	if m != nil {
		return m.FailoverHostUuid
	}
	return nil
}

type HaFailoverArg struct {
	// The UUID of the host.
	HostUuid []byte `protobuf:"bytes,1,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// Whether to use reserved segments for restarting VMs.
	UseSegments *bool `protobuf:"varint,2,opt,name=use_segments,json=useSegments" json:"use_segments,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HaFailoverArg) Reset()         { *m = HaFailoverArg{} }
func (m *HaFailoverArg) String() string { return proto.CompactTextString(m) }
func (*HaFailoverArg) ProtoMessage()    {}
func (*HaFailoverArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{182}
}

func (m *HaFailoverArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HaFailoverArg.Unmarshal(m, b)
}
func (m *HaFailoverArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HaFailoverArg.Marshal(b, m, deterministic)
}
func (m *HaFailoverArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HaFailoverArg.Merge(m, src)
}
func (m *HaFailoverArg) XXX_Size() int {
	return xxx_messageInfo_HaFailoverArg.Size(m)
}
func (m *HaFailoverArg) XXX_DiscardUnknown() {
	xxx_messageInfo_HaFailoverArg.DiscardUnknown(m)
}

var xxx_messageInfo_HaFailoverArg proto.InternalMessageInfo

func (m *HaFailoverArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *HaFailoverArg) GetUseSegments() bool {
	if m != nil && m.UseSegments != nil {
		return *m.UseSegments
	}
	return false
}

func (m *HaFailoverArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *HaFailoverArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *HaFailoverArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type HaFailoverRet struct {
	// A task to poll for completion. On success, the task will contain a
	// HaFailoverTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HaFailoverRet) Reset()         { *m = HaFailoverRet{} }
func (m *HaFailoverRet) String() string { return proto.CompactTextString(m) }
func (*HaFailoverRet) ProtoMessage()    {}
func (*HaFailoverRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{183}
}

func (m *HaFailoverRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HaFailoverRet.Unmarshal(m, b)
}
func (m *HaFailoverRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HaFailoverRet.Marshal(b, m, deterministic)
}
func (m *HaFailoverRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HaFailoverRet.Merge(m, src)
}
func (m *HaFailoverRet) XXX_Size() int {
	return xxx_messageInfo_HaFailoverRet.Size(m)
}
func (m *HaFailoverRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HaFailoverRet.DiscardUnknown(m)
}

var xxx_messageInfo_HaFailoverRet proto.InternalMessageInfo

func (m *HaFailoverRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type HaFailoverTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HaFailoverTaskRet) Reset()         { *m = HaFailoverTaskRet{} }
func (m *HaFailoverTaskRet) String() string { return proto.CompactTextString(m) }
func (*HaFailoverTaskRet) ProtoMessage()    {}
func (*HaFailoverTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{184}
}

func (m *HaFailoverTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HaFailoverTaskRet.Unmarshal(m, b)
}
func (m *HaFailoverTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HaFailoverTaskRet.Marshal(b, m, deterministic)
}
func (m *HaFailoverTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HaFailoverTaskRet.Merge(m, src)
}
func (m *HaFailoverTaskRet) XXX_Size() int {
	return xxx_messageInfo_HaFailoverTaskRet.Size(m)
}
func (m *HaFailoverTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HaFailoverTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_HaFailoverTaskRet proto.InternalMessageInfo

type VmRegisterArg struct {
	// The hyperint argument for registering a VM.
	RegisterVm *hyperint.RegisterVmArg_RegisterVm `protobuf:"bytes,1,opt,name=register_vm,json=registerVm" json:"register_vm,omitempty"`
	// Network mappings.
	NetworkMapping *hyperint.HostNetworkMapping `protobuf:"bytes,2,opt,name=network_mapping,json=networkMapping" json:"network_mapping,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Incarnation ID required by IDF when the VM entity is migrated from some
	// other cluster to the current cluster.
	DbIncarnationId      *uint64  `protobuf:"varint,6,opt,name=db_incarnation_id,json=dbIncarnationId" json:"db_incarnation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRegisterArg) Reset()         { *m = VmRegisterArg{} }
func (m *VmRegisterArg) String() string { return proto.CompactTextString(m) }
func (*VmRegisterArg) ProtoMessage()    {}
func (*VmRegisterArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{185}
}

func (m *VmRegisterArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRegisterArg.Unmarshal(m, b)
}
func (m *VmRegisterArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRegisterArg.Marshal(b, m, deterministic)
}
func (m *VmRegisterArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRegisterArg.Merge(m, src)
}
func (m *VmRegisterArg) XXX_Size() int {
	return xxx_messageInfo_VmRegisterArg.Size(m)
}
func (m *VmRegisterArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRegisterArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmRegisterArg proto.InternalMessageInfo

func (m *VmRegisterArg) GetRegisterVm() *hyperint.RegisterVmArg_RegisterVm {
	if m != nil {
		return m.RegisterVm
	}
	return nil
}

func (m *VmRegisterArg) GetNetworkMapping() *hyperint.HostNetworkMapping {
	if m != nil {
		return m.NetworkMapping
	}
	return nil
}

func (m *VmRegisterArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmRegisterArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmRegisterArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmRegisterArg) GetDbIncarnationId() uint64 {
	if m != nil && m.DbIncarnationId != nil {
		return *m.DbIncarnationId
	}
	return 0
}

type VmRegisterRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmRegisterTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRegisterRet) Reset()         { *m = VmRegisterRet{} }
func (m *VmRegisterRet) String() string { return proto.CompactTextString(m) }
func (*VmRegisterRet) ProtoMessage()    {}
func (*VmRegisterRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{186}
}

func (m *VmRegisterRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRegisterRet.Unmarshal(m, b)
}
func (m *VmRegisterRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRegisterRet.Marshal(b, m, deterministic)
}
func (m *VmRegisterRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRegisterRet.Merge(m, src)
}
func (m *VmRegisterRet) XXX_Size() int {
	return xxx_messageInfo_VmRegisterRet.Size(m)
}
func (m *VmRegisterRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRegisterRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmRegisterRet proto.InternalMessageInfo

func (m *VmRegisterRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmRegisterTaskRet struct {
	// The hyperint result VM registration.
	Result               *hyperint.RegisterVmRet_VmResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *VmRegisterTaskRet) Reset()         { *m = VmRegisterTaskRet{} }
func (m *VmRegisterTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmRegisterTaskRet) ProtoMessage()    {}
func (*VmRegisterTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{187}
}

func (m *VmRegisterTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRegisterTaskRet.Unmarshal(m, b)
}
func (m *VmRegisterTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRegisterTaskRet.Marshal(b, m, deterministic)
}
func (m *VmRegisterTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRegisterTaskRet.Merge(m, src)
}
func (m *VmRegisterTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmRegisterTaskRet.Size(m)
}
func (m *VmRegisterTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRegisterTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmRegisterTaskRet proto.InternalMessageInfo

func (m *VmRegisterTaskRet) GetResult() *hyperint.RegisterVmRet_VmResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type VmAttachVgArg struct {
	// UUID of volume group to attach/detach.
	VolumeGroupUuid []byte `protobuf:"bytes,1,opt,name=volume_group_uuid,json=volumeGroupUuid" json:"volume_group_uuid,omitempty"`
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The logical timestamp of the VM
	LogicalTimestamp *int64 `protobuf:"varint,3,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// The index on the scsi bus to attach the VM to.
	// Note that we support only scsi bus for volume group attachments.
	Index     *uint32                  `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	Operation *VmAttachVgArg_Operation `protobuf:"varint,5,opt,name=operation,enum=nutanix.acropolis.VmAttachVgArg_Operation,def=1" json:"operation,omitempty"`
	// Index of volume disks being added/removed to the VG.
	// This param is required when the operation type is
	// kVolumeRemove.
	VolumeDiskIndexList []uint32 `protobuf:"varint,6,rep,name=volume_disk_index_list,json=volumeDiskIndexList" json:"volume_disk_index_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,7,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,8,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,9,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmAttachVgArg) Reset()         { *m = VmAttachVgArg{} }
func (m *VmAttachVgArg) String() string { return proto.CompactTextString(m) }
func (*VmAttachVgArg) ProtoMessage()    {}
func (*VmAttachVgArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{188}
}

func (m *VmAttachVgArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmAttachVgArg.Unmarshal(m, b)
}
func (m *VmAttachVgArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmAttachVgArg.Marshal(b, m, deterministic)
}
func (m *VmAttachVgArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmAttachVgArg.Merge(m, src)
}
func (m *VmAttachVgArg) XXX_Size() int {
	return xxx_messageInfo_VmAttachVgArg.Size(m)
}
func (m *VmAttachVgArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmAttachVgArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmAttachVgArg proto.InternalMessageInfo

const Default_VmAttachVgArg_LogicalTimestamp int64 = -1
const Default_VmAttachVgArg_Operation VmAttachVgArg_Operation = VmAttachVgArg_kAttach

func (m *VmAttachVgArg) GetVolumeGroupUuid() []byte {
	if m != nil {
		return m.VolumeGroupUuid
	}
	return nil
}

func (m *VmAttachVgArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmAttachVgArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_VmAttachVgArg_LogicalTimestamp
}

func (m *VmAttachVgArg) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *VmAttachVgArg) GetOperation() VmAttachVgArg_Operation {
	if m != nil && m.Operation != nil {
		return *m.Operation
	}
	return Default_VmAttachVgArg_Operation
}

func (m *VmAttachVgArg) GetVolumeDiskIndexList() []uint32 {
	if m != nil {
		return m.VolumeDiskIndexList
	}
	return nil
}

func (m *VmAttachVgArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmAttachVgArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmAttachVgArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmAttachVgRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmAttachVgTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmAttachVgRet) Reset()         { *m = VmAttachVgRet{} }
func (m *VmAttachVgRet) String() string { return proto.CompactTextString(m) }
func (*VmAttachVgRet) ProtoMessage()    {}
func (*VmAttachVgRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{189}
}

func (m *VmAttachVgRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmAttachVgRet.Unmarshal(m, b)
}
func (m *VmAttachVgRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmAttachVgRet.Marshal(b, m, deterministic)
}
func (m *VmAttachVgRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmAttachVgRet.Merge(m, src)
}
func (m *VmAttachVgRet) XXX_Size() int {
	return xxx_messageInfo_VmAttachVgRet.Size(m)
}
func (m *VmAttachVgRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmAttachVgRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmAttachVgRet proto.InternalMessageInfo

func (m *VmAttachVgRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmAttachVgTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmAttachVgTaskRet) Reset()         { *m = VmAttachVgTaskRet{} }
func (m *VmAttachVgTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmAttachVgTaskRet) ProtoMessage()    {}
func (*VmAttachVgTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{190}
}

func (m *VmAttachVgTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmAttachVgTaskRet.Unmarshal(m, b)
}
func (m *VmAttachVgTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmAttachVgTaskRet.Marshal(b, m, deterministic)
}
func (m *VmAttachVgTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmAttachVgTaskRet.Merge(m, src)
}
func (m *VmAttachVgTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmAttachVgTaskRet.Size(m)
}
func (m *VmAttachVgTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmAttachVgTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmAttachVgTaskRet proto.InternalMessageInfo

type ImageCreateArg struct {
	// Image create spec.
	Spec *ImageCreateSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	// Boolean indicating whether we need to compute a checksum for the image
	// after creating.
	ComputeChecksum *bool `protobuf:"varint,2,opt,name=compute_checksum,json=computeChecksum,def=0" json:"compute_checksum,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// The Xi tenant UUID. Only set when called from Xi portal.
	TenantUuid []byte `protobuf:"bytes,6,opt,name=tenant_uuid,json=tenantUuid" json:"tenant_uuid,omitempty"`
	// The Xi user UUID. Only set when called from Xi portal.
	UserUuid []byte `protobuf:"bytes,7,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
	// Root Task Uuid, can be used to trace the root task that spawned the task.
	// Example in case of image create from PC, aplos task spawns a catalog task that
	// spawans a acropolis image create task.
	RootTaskUuid []byte `protobuf:"bytes,8,opt,name=root_task_uuid,json=rootTaskUuid" json:"root_task_uuid,omitempty"`
	// Set this flag to True if the task needs to be internal
	InternalTask         *bool    `protobuf:"varint,9,opt,name=internal_task,json=internalTask,def=0" json:"internal_task,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageCreateArg) Reset()         { *m = ImageCreateArg{} }
func (m *ImageCreateArg) String() string { return proto.CompactTextString(m) }
func (*ImageCreateArg) ProtoMessage()    {}
func (*ImageCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{191}
}

func (m *ImageCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageCreateArg.Unmarshal(m, b)
}
func (m *ImageCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageCreateArg.Marshal(b, m, deterministic)
}
func (m *ImageCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageCreateArg.Merge(m, src)
}
func (m *ImageCreateArg) XXX_Size() int {
	return xxx_messageInfo_ImageCreateArg.Size(m)
}
func (m *ImageCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_ImageCreateArg proto.InternalMessageInfo

const Default_ImageCreateArg_ComputeChecksum bool = false
const Default_ImageCreateArg_InternalTask bool = false

func (m *ImageCreateArg) GetSpec() *ImageCreateSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ImageCreateArg) GetComputeChecksum() bool {
	if m != nil && m.ComputeChecksum != nil {
		return *m.ComputeChecksum
	}
	return Default_ImageCreateArg_ComputeChecksum
}

func (m *ImageCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *ImageCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *ImageCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *ImageCreateArg) GetTenantUuid() []byte {
	if m != nil {
		return m.TenantUuid
	}
	return nil
}

func (m *ImageCreateArg) GetUserUuid() []byte {
	if m != nil {
		return m.UserUuid
	}
	return nil
}

func (m *ImageCreateArg) GetRootTaskUuid() []byte {
	if m != nil {
		return m.RootTaskUuid
	}
	return nil
}

func (m *ImageCreateArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return Default_ImageCreateArg_InternalTask
}

type ImageCreateRet struct {
	// A task to poll for completion. On success, the task will contain an
	// ImageCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageCreateRet) Reset()         { *m = ImageCreateRet{} }
func (m *ImageCreateRet) String() string { return proto.CompactTextString(m) }
func (*ImageCreateRet) ProtoMessage()    {}
func (*ImageCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{192}
}

func (m *ImageCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageCreateRet.Unmarshal(m, b)
}
func (m *ImageCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageCreateRet.Marshal(b, m, deterministic)
}
func (m *ImageCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageCreateRet.Merge(m, src)
}
func (m *ImageCreateRet) XXX_Size() int {
	return xxx_messageInfo_ImageCreateRet.Size(m)
}
func (m *ImageCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_ImageCreateRet proto.InternalMessageInfo

func (m *ImageCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type ImageCreateTaskRet struct {
	// Newly created image UUID.
	ImageUuid            []byte   `protobuf:"bytes,1,opt,name=image_uuid,json=imageUuid" json:"image_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageCreateTaskRet) Reset()         { *m = ImageCreateTaskRet{} }
func (m *ImageCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*ImageCreateTaskRet) ProtoMessage()    {}
func (*ImageCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{193}
}

func (m *ImageCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageCreateTaskRet.Unmarshal(m, b)
}
func (m *ImageCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *ImageCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageCreateTaskRet.Merge(m, src)
}
func (m *ImageCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_ImageCreateTaskRet.Size(m)
}
func (m *ImageCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_ImageCreateTaskRet proto.InternalMessageInfo

func (m *ImageCreateTaskRet) GetImageUuid() []byte {
	if m != nil {
		return m.ImageUuid
	}
	return nil
}

type ImageDeleteArg struct {
	// UUID of image to delete.
	ImageUuid []byte `protobuf:"bytes,1,opt,name=image_uuid,json=imageUuid" json:"image_uuid,omitempty"`
	// Image logical timestamp provided for synchronization.
	LogicalTimestamp *int64 `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// The Xi tenant UUID. Only set when called from Xi portal.
	TenantUuid []byte `protobuf:"bytes,6,opt,name=tenant_uuid,json=tenantUuid" json:"tenant_uuid,omitempty"`
	// The Xi user UUID. Only set when called from Xi portal.
	UserUuid             []byte   `protobuf:"bytes,7,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageDeleteArg) Reset()         { *m = ImageDeleteArg{} }
func (m *ImageDeleteArg) String() string { return proto.CompactTextString(m) }
func (*ImageDeleteArg) ProtoMessage()    {}
func (*ImageDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{194}
}

func (m *ImageDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageDeleteArg.Unmarshal(m, b)
}
func (m *ImageDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageDeleteArg.Marshal(b, m, deterministic)
}
func (m *ImageDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageDeleteArg.Merge(m, src)
}
func (m *ImageDeleteArg) XXX_Size() int {
	return xxx_messageInfo_ImageDeleteArg.Size(m)
}
func (m *ImageDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_ImageDeleteArg proto.InternalMessageInfo

const Default_ImageDeleteArg_LogicalTimestamp int64 = -1

func (m *ImageDeleteArg) GetImageUuid() []byte {
	if m != nil {
		return m.ImageUuid
	}
	return nil
}

func (m *ImageDeleteArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_ImageDeleteArg_LogicalTimestamp
}

func (m *ImageDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *ImageDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *ImageDeleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *ImageDeleteArg) GetTenantUuid() []byte {
	if m != nil {
		return m.TenantUuid
	}
	return nil
}

func (m *ImageDeleteArg) GetUserUuid() []byte {
	if m != nil {
		return m.UserUuid
	}
	return nil
}

type ImageDeleteRet struct {
	// A task to poll for completion. On success, the task will contain an
	// ImageDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageDeleteRet) Reset()         { *m = ImageDeleteRet{} }
func (m *ImageDeleteRet) String() string { return proto.CompactTextString(m) }
func (*ImageDeleteRet) ProtoMessage()    {}
func (*ImageDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{195}
}

func (m *ImageDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageDeleteRet.Unmarshal(m, b)
}
func (m *ImageDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageDeleteRet.Marshal(b, m, deterministic)
}
func (m *ImageDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageDeleteRet.Merge(m, src)
}
func (m *ImageDeleteRet) XXX_Size() int {
	return xxx_messageInfo_ImageDeleteRet.Size(m)
}
func (m *ImageDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_ImageDeleteRet proto.InternalMessageInfo

func (m *ImageDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type ImageDeleteTaskRet struct {
	DeletedVmdiskUuid    []byte   `protobuf:"bytes,1,opt,name=deleted_vmdisk_uuid,json=deletedVmdiskUuid" json:"deleted_vmdisk_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageDeleteTaskRet) Reset()         { *m = ImageDeleteTaskRet{} }
func (m *ImageDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*ImageDeleteTaskRet) ProtoMessage()    {}
func (*ImageDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{196}
}

func (m *ImageDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageDeleteTaskRet.Unmarshal(m, b)
}
func (m *ImageDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *ImageDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageDeleteTaskRet.Merge(m, src)
}
func (m *ImageDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_ImageDeleteTaskRet.Size(m)
}
func (m *ImageDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_ImageDeleteTaskRet proto.InternalMessageInfo

func (m *ImageDeleteTaskRet) GetDeletedVmdiskUuid() []byte {
	if m != nil {
		return m.DeletedVmdiskUuid
	}
	return nil
}

type ImageGetArg struct {
	// List of image UUIDs to lookup.
	ImageUuidList [][]byte `protobuf:"bytes,1,rep,name=image_uuid_list,json=imageUuidList" json:"image_uuid_list,omitempty"`
	// If True, the image_size attribute will be filled in for each image.
	IncludeVmdiskSizes *bool `protobuf:"varint,2,opt,name=include_vmdisk_sizes,json=includeVmdiskSizes" json:"include_vmdisk_sizes,omitempty"`
	// Whether to resolve vmdisk paths.
	IncludeVmdiskPaths *bool `protobuf:"varint,3,opt,name=include_vmdisk_paths,json=includeVmdiskPaths" json:"include_vmdisk_paths,omitempty"`
	// Whether to include hidden images created as part of catalog items
	IncludeHidden        *bool    `protobuf:"varint,4,opt,name=include_hidden,json=includeHidden,def=0" json:"include_hidden,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageGetArg) Reset()         { *m = ImageGetArg{} }
func (m *ImageGetArg) String() string { return proto.CompactTextString(m) }
func (*ImageGetArg) ProtoMessage()    {}
func (*ImageGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{197}
}

func (m *ImageGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageGetArg.Unmarshal(m, b)
}
func (m *ImageGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageGetArg.Marshal(b, m, deterministic)
}
func (m *ImageGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageGetArg.Merge(m, src)
}
func (m *ImageGetArg) XXX_Size() int {
	return xxx_messageInfo_ImageGetArg.Size(m)
}
func (m *ImageGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_ImageGetArg proto.InternalMessageInfo

const Default_ImageGetArg_IncludeHidden bool = false

func (m *ImageGetArg) GetImageUuidList() [][]byte {
	if m != nil {
		return m.ImageUuidList
	}
	return nil
}

func (m *ImageGetArg) GetIncludeVmdiskSizes() bool {
	if m != nil && m.IncludeVmdiskSizes != nil {
		return *m.IncludeVmdiskSizes
	}
	return false
}

func (m *ImageGetArg) GetIncludeVmdiskPaths() bool {
	if m != nil && m.IncludeVmdiskPaths != nil {
		return *m.IncludeVmdiskPaths
	}
	return false
}

func (m *ImageGetArg) GetIncludeHidden() bool {
	if m != nil && m.IncludeHidden != nil {
		return *m.IncludeHidden
	}
	return Default_ImageGetArg_IncludeHidden
}

type ImageGetRet struct {
	// List of lookup results.
	ImageInfoList        []*ImageInfo `protobuf:"bytes,1,rep,name=image_info_list,json=imageInfoList" json:"image_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ImageGetRet) Reset()         { *m = ImageGetRet{} }
func (m *ImageGetRet) String() string { return proto.CompactTextString(m) }
func (*ImageGetRet) ProtoMessage()    {}
func (*ImageGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{198}
}

func (m *ImageGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageGetRet.Unmarshal(m, b)
}
func (m *ImageGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageGetRet.Marshal(b, m, deterministic)
}
func (m *ImageGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageGetRet.Merge(m, src)
}
func (m *ImageGetRet) XXX_Size() int {
	return xxx_messageInfo_ImageGetRet.Size(m)
}
func (m *ImageGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_ImageGetRet proto.InternalMessageInfo

func (m *ImageGetRet) GetImageInfoList() []*ImageInfo {
	if m != nil {
		return m.ImageInfoList
	}
	return nil
}

type ImageUpdateArg struct {
	// Image logical timestamp provided for synchronization.
	LogicalTimestamp *int64 `protobuf:"varint,4,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// Image update spec.
	Spec *ImageCreateSpec `protobuf:"bytes,5,opt,name=spec" json:"spec,omitempty"`
	// Boolean indicating whether we need to compute a checksum for the image
	// after creating.
	ComputeChecksum *bool `protobuf:"varint,6,opt,name=compute_checksum,json=computeChecksum,def=0" json:"compute_checksum,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,7,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,8,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,9,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// The Xi tenant UUID. Only set when called from Xi portal.
	TenantUuid []byte `protobuf:"bytes,10,opt,name=tenant_uuid,json=tenantUuid" json:"tenant_uuid,omitempty"`
	// The Xi user UUID. Only set when called from Xi portal.
	UserUuid             []byte   `protobuf:"bytes,11,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageUpdateArg) Reset()         { *m = ImageUpdateArg{} }
func (m *ImageUpdateArg) String() string { return proto.CompactTextString(m) }
func (*ImageUpdateArg) ProtoMessage()    {}
func (*ImageUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{199}
}

func (m *ImageUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageUpdateArg.Unmarshal(m, b)
}
func (m *ImageUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageUpdateArg.Marshal(b, m, deterministic)
}
func (m *ImageUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageUpdateArg.Merge(m, src)
}
func (m *ImageUpdateArg) XXX_Size() int {
	return xxx_messageInfo_ImageUpdateArg.Size(m)
}
func (m *ImageUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_ImageUpdateArg proto.InternalMessageInfo

const Default_ImageUpdateArg_LogicalTimestamp int64 = -1
const Default_ImageUpdateArg_ComputeChecksum bool = false

func (m *ImageUpdateArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_ImageUpdateArg_LogicalTimestamp
}

func (m *ImageUpdateArg) GetSpec() *ImageCreateSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ImageUpdateArg) GetComputeChecksum() bool {
	if m != nil && m.ComputeChecksum != nil {
		return *m.ComputeChecksum
	}
	return Default_ImageUpdateArg_ComputeChecksum
}

func (m *ImageUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *ImageUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *ImageUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *ImageUpdateArg) GetTenantUuid() []byte {
	if m != nil {
		return m.TenantUuid
	}
	return nil
}

func (m *ImageUpdateArg) GetUserUuid() []byte {
	if m != nil {
		return m.UserUuid
	}
	return nil
}

type ImageUpdateRet struct {
	// A task to poll for completion. On success, the task will contain an
	// ImageUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageUpdateRet) Reset()         { *m = ImageUpdateRet{} }
func (m *ImageUpdateRet) String() string { return proto.CompactTextString(m) }
func (*ImageUpdateRet) ProtoMessage()    {}
func (*ImageUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{200}
}

func (m *ImageUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageUpdateRet.Unmarshal(m, b)
}
func (m *ImageUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageUpdateRet.Marshal(b, m, deterministic)
}
func (m *ImageUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageUpdateRet.Merge(m, src)
}
func (m *ImageUpdateRet) XXX_Size() int {
	return xxx_messageInfo_ImageUpdateRet.Size(m)
}
func (m *ImageUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_ImageUpdateRet proto.InternalMessageInfo

func (m *ImageUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type ImageUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageUpdateTaskRet) Reset()         { *m = ImageUpdateTaskRet{} }
func (m *ImageUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*ImageUpdateTaskRet) ProtoMessage()    {}
func (*ImageUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{201}
}

func (m *ImageUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageUpdateTaskRet.Unmarshal(m, b)
}
func (m *ImageUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *ImageUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageUpdateTaskRet.Merge(m, src)
}
func (m *ImageUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_ImageUpdateTaskRet.Size(m)
}
func (m *ImageUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_ImageUpdateTaskRet proto.InternalMessageInfo

type VolumeGroupCreateArg struct {
	Spec *VolumeGroupCreateSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Only set during entity migration between clusters for a transient volume
	// group entity. Acropolis will use the incarnation_id to call AttachEntity
	// on EDB entity. The caller needs to pass in an incarnation_id greater
	// than the incarnation_id of the entity on the source cluster.
	IncarnationId        *uint64  `protobuf:"varint,5,opt,name=incarnation_id,json=incarnationId" json:"incarnation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupCreateArg) Reset()         { *m = VolumeGroupCreateArg{} }
func (m *VolumeGroupCreateArg) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupCreateArg) ProtoMessage()    {}
func (*VolumeGroupCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{202}
}

func (m *VolumeGroupCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupCreateArg.Unmarshal(m, b)
}
func (m *VolumeGroupCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupCreateArg.Marshal(b, m, deterministic)
}
func (m *VolumeGroupCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupCreateArg.Merge(m, src)
}
func (m *VolumeGroupCreateArg) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupCreateArg.Size(m)
}
func (m *VolumeGroupCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupCreateArg proto.InternalMessageInfo

func (m *VolumeGroupCreateArg) GetSpec() *VolumeGroupCreateSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *VolumeGroupCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VolumeGroupCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VolumeGroupCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VolumeGroupCreateArg) GetIncarnationId() uint64 {
	if m != nil && m.IncarnationId != nil {
		return *m.IncarnationId
	}
	return 0
}

type VolumeGroupCreateRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupCreateRet) Reset()         { *m = VolumeGroupCreateRet{} }
func (m *VolumeGroupCreateRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupCreateRet) ProtoMessage()    {}
func (*VolumeGroupCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{203}
}

func (m *VolumeGroupCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupCreateRet.Unmarshal(m, b)
}
func (m *VolumeGroupCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupCreateRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupCreateRet.Merge(m, src)
}
func (m *VolumeGroupCreateRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupCreateRet.Size(m)
}
func (m *VolumeGroupCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupCreateRet proto.InternalMessageInfo

func (m *VolumeGroupCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VolumeGroupCreateTaskRet struct {
	VolumeGroupUuid      []byte   `protobuf:"bytes,1,opt,name=volume_group_uuid,json=volumeGroupUuid" json:"volume_group_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupCreateTaskRet) Reset()         { *m = VolumeGroupCreateTaskRet{} }
func (m *VolumeGroupCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupCreateTaskRet) ProtoMessage()    {}
func (*VolumeGroupCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{204}
}

func (m *VolumeGroupCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupCreateTaskRet.Unmarshal(m, b)
}
func (m *VolumeGroupCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupCreateTaskRet.Merge(m, src)
}
func (m *VolumeGroupCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupCreateTaskRet.Size(m)
}
func (m *VolumeGroupCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupCreateTaskRet proto.InternalMessageInfo

func (m *VolumeGroupCreateTaskRet) GetVolumeGroupUuid() []byte {
	if m != nil {
		return m.VolumeGroupUuid
	}
	return nil
}

type VolumeGroupGetArg struct {
	// Fetch configuration for these VG UUIDs. Note: If none of the query fields
	// (volume_group_uuid_list/attached_vm_uuid_list/attached_initiator_name_list
	// attached_initiator_network_id_list) are explicitly specified, the semantics
	// are to fetch all VGs. If more than one is specified, query matching will be
	// done using OR semantics.
	VolumeGroupUuidList [][]byte `protobuf:"bytes,1,rep,name=volume_group_uuid_list,json=volumeGroupUuidList" json:"volume_group_uuid_list,omitempty"`
	// Whether to fetch the current disk sizes.
	IncludeVmdiskSizes *bool `protobuf:"varint,2,opt,name=include_vmdisk_sizes,json=includeVmdiskSizes" json:"include_vmdisk_sizes,omitempty"`
	// Whether to resolve vmdisk paths.
	IncludeVmdiskPaths *bool `protobuf:"varint,3,opt,name=include_vmdisk_paths,json=includeVmdiskPaths" json:"include_vmdisk_paths,omitempty"`
	// Fetch configuration for VGs attached to these VMs.
	AttachedVmUuidList [][]byte `protobuf:"bytes,4,rep,name=attached_vm_uuid_list,json=attachedVmUuidList" json:"attached_vm_uuid_list,omitempty"`
	// Fetch configuration for VGs attached to these iscsi initiators
	// identified by initiator name.
	AttachedInitiatorNameList []string `protobuf:"bytes,5,rep,name=attached_initiator_name_list,json=attachedInitiatorNameList" json:"attached_initiator_name_list,omitempty"`
	// Fetch configuration for VGs attached to these iscsi initiators
	// identified by network id.
	AttachedInitiatorNetworkIdList []string `protobuf:"bytes,6,rep,name=attached_initiator_network_id_list,json=attachedInitiatorNetworkIdList" json:"attached_initiator_network_id_list,omitempty"`
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *VolumeGroupGetArg) Reset()         { *m = VolumeGroupGetArg{} }
func (m *VolumeGroupGetArg) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupGetArg) ProtoMessage()    {}
func (*VolumeGroupGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{205}
}

func (m *VolumeGroupGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupGetArg.Unmarshal(m, b)
}
func (m *VolumeGroupGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupGetArg.Marshal(b, m, deterministic)
}
func (m *VolumeGroupGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupGetArg.Merge(m, src)
}
func (m *VolumeGroupGetArg) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupGetArg.Size(m)
}
func (m *VolumeGroupGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupGetArg proto.InternalMessageInfo

func (m *VolumeGroupGetArg) GetVolumeGroupUuidList() [][]byte {
	if m != nil {
		return m.VolumeGroupUuidList
	}
	return nil
}

func (m *VolumeGroupGetArg) GetIncludeVmdiskSizes() bool {
	if m != nil && m.IncludeVmdiskSizes != nil {
		return *m.IncludeVmdiskSizes
	}
	return false
}

func (m *VolumeGroupGetArg) GetIncludeVmdiskPaths() bool {
	if m != nil && m.IncludeVmdiskPaths != nil {
		return *m.IncludeVmdiskPaths
	}
	return false
}

func (m *VolumeGroupGetArg) GetAttachedVmUuidList() [][]byte {
	if m != nil {
		return m.AttachedVmUuidList
	}
	return nil
}

func (m *VolumeGroupGetArg) GetAttachedInitiatorNameList() []string {
	if m != nil {
		return m.AttachedInitiatorNameList
	}
	return nil
}

func (m *VolumeGroupGetArg) GetAttachedInitiatorNetworkIdList() []string {
	if m != nil {
		return m.AttachedInitiatorNetworkIdList
	}
	return nil
}

type VolumeGroupGetRet struct {
	VolumeGroupList      []*pithos.VolumeGroupConfig `protobuf:"bytes,1,rep,name=volume_group_list,json=volumeGroupList" json:"volume_group_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *VolumeGroupGetRet) Reset()         { *m = VolumeGroupGetRet{} }
func (m *VolumeGroupGetRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupGetRet) ProtoMessage()    {}
func (*VolumeGroupGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{206}
}

func (m *VolumeGroupGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupGetRet.Unmarshal(m, b)
}
func (m *VolumeGroupGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupGetRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupGetRet.Merge(m, src)
}
func (m *VolumeGroupGetRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupGetRet.Size(m)
}
func (m *VolumeGroupGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupGetRet proto.InternalMessageInfo

func (m *VolumeGroupGetRet) GetVolumeGroupList() []*pithos.VolumeGroupConfig {
	if m != nil {
		return m.VolumeGroupList
	}
	return nil
}

type VolumeGroupUpdateArg struct {
	// UUID of volume group to update.
	VolumeGroupUuid []byte `protobuf:"bytes,1,opt,name=volume_group_uuid,json=volumeGroupUuid" json:"volume_group_uuid,omitempty"`
	// The logical timestamp.
	LogicalTimestamp *int64 `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// If present, update volume group name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// If present, update annotation.
	Annotation *string `protobuf:"bytes,4,opt,name=annotation" json:"annotation,omitempty"`
	// If present, change shared/exclusive.
	Shared *bool `protobuf:"varint,5,opt,name=shared" json:"shared,omitempty"`
	// If present, change iSCSI target name.
	IscsiTargetName          *string                       `protobuf:"bytes,6,opt,name=iscsi_target_name,json=iscsiTargetName" json:"iscsi_target_name,omitempty"`
	ExternalInitiatorIqnList *VolumeGroupUpdateArg_IqnList `protobuf:"bytes,8,opt,name=external_initiator_iqn_list,json=externalInitiatorIqnList" json:"external_initiator_iqn_list,omitempty"`
	// If set to a non-empty string, this VG should be considered incompatible
	// with DR workflows.
	CbrNotCapableReason *string `protobuf:"bytes,9,opt,name=cbr_not_capable_reason,json=cbrNotCapableReason" json:"cbr_not_capable_reason,omitempty"`
	// Whether to enable/disable flash mode.
	FlashMode *bool `protobuf:"varint,10,opt,name=flash_mode,json=flashMode" json:"flash_mode,omitempty"`
	// target_secret for CHAP authentication to be used by clients
	TargetSecret *string `protobuf:"bytes,11,opt,name=target_secret,json=targetSecret" json:"target_secret,omitempty"`
	// If present, change iSCSI target prefix.
	IscsiTargetPrefix *string                                   `protobuf:"bytes,12,opt,name=iscsi_target_prefix,json=iscsiTargetPrefix" json:"iscsi_target_prefix,omitempty"`
	ClientSpecList    *VolumeGroupUpdateArg_IscsiClientSpecList `protobuf:"bytes,13,opt,name=client_spec_list,json=clientSpecList" json:"client_spec_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,14,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,15,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,16,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether VG load balance VM attachments is enabled/disabled.
	LoadBalanceVmAttachments *bool `protobuf:"varint,17,opt,name=load_balance_vm_attachments,json=loadBalanceVmAttachments" json:"load_balance_vm_attachments,omitempty"`
	// Name of the service/user which created this VG.
	CreatedBy            *string  `protobuf:"bytes,18,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupUpdateArg) Reset()         { *m = VolumeGroupUpdateArg{} }
func (m *VolumeGroupUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupUpdateArg) ProtoMessage()    {}
func (*VolumeGroupUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{207}
}

func (m *VolumeGroupUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupUpdateArg.Unmarshal(m, b)
}
func (m *VolumeGroupUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupUpdateArg.Marshal(b, m, deterministic)
}
func (m *VolumeGroupUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupUpdateArg.Merge(m, src)
}
func (m *VolumeGroupUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupUpdateArg.Size(m)
}
func (m *VolumeGroupUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupUpdateArg proto.InternalMessageInfo

const Default_VolumeGroupUpdateArg_LogicalTimestamp int64 = -1

func (m *VolumeGroupUpdateArg) GetVolumeGroupUuid() []byte {
	if m != nil {
		return m.VolumeGroupUuid
	}
	return nil
}

func (m *VolumeGroupUpdateArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_VolumeGroupUpdateArg_LogicalTimestamp
}

func (m *VolumeGroupUpdateArg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VolumeGroupUpdateArg) GetAnnotation() string {
	if m != nil && m.Annotation != nil {
		return *m.Annotation
	}
	return ""
}

func (m *VolumeGroupUpdateArg) GetShared() bool {
	if m != nil && m.Shared != nil {
		return *m.Shared
	}
	return false
}

func (m *VolumeGroupUpdateArg) GetIscsiTargetName() string {
	if m != nil && m.IscsiTargetName != nil {
		return *m.IscsiTargetName
	}
	return ""
}

func (m *VolumeGroupUpdateArg) GetExternalInitiatorIqnList() *VolumeGroupUpdateArg_IqnList {
	if m != nil {
		return m.ExternalInitiatorIqnList
	}
	return nil
}

func (m *VolumeGroupUpdateArg) GetCbrNotCapableReason() string {
	if m != nil && m.CbrNotCapableReason != nil {
		return *m.CbrNotCapableReason
	}
	return ""
}

func (m *VolumeGroupUpdateArg) GetFlashMode() bool {
	if m != nil && m.FlashMode != nil {
		return *m.FlashMode
	}
	return false
}

func (m *VolumeGroupUpdateArg) GetTargetSecret() string {
	if m != nil && m.TargetSecret != nil {
		return *m.TargetSecret
	}
	return ""
}

func (m *VolumeGroupUpdateArg) GetIscsiTargetPrefix() string {
	if m != nil && m.IscsiTargetPrefix != nil {
		return *m.IscsiTargetPrefix
	}
	return ""
}

func (m *VolumeGroupUpdateArg) GetClientSpecList() *VolumeGroupUpdateArg_IscsiClientSpecList {
	if m != nil {
		return m.ClientSpecList
	}
	return nil
}

func (m *VolumeGroupUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VolumeGroupUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VolumeGroupUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VolumeGroupUpdateArg) GetLoadBalanceVmAttachments() bool {
	if m != nil && m.LoadBalanceVmAttachments != nil {
		return *m.LoadBalanceVmAttachments
	}
	return false
}

func (m *VolumeGroupUpdateArg) GetCreatedBy() string {
	if m != nil && m.CreatedBy != nil {
		return *m.CreatedBy
	}
	return ""
}

// Deprecated. If present, update the list of external initiator IQNs.
// Newer clients are suggested to use spec_list for this purpose.
type VolumeGroupUpdateArg_IqnList struct {
	IqnList              []string `protobuf:"bytes,1,rep,name=iqn_list,json=iqnList" json:"iqn_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupUpdateArg_IqnList) Reset()         { *m = VolumeGroupUpdateArg_IqnList{} }
func (m *VolumeGroupUpdateArg_IqnList) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupUpdateArg_IqnList) ProtoMessage()    {}
func (*VolumeGroupUpdateArg_IqnList) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{207, 0}
}

func (m *VolumeGroupUpdateArg_IqnList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupUpdateArg_IqnList.Unmarshal(m, b)
}
func (m *VolumeGroupUpdateArg_IqnList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupUpdateArg_IqnList.Marshal(b, m, deterministic)
}
func (m *VolumeGroupUpdateArg_IqnList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupUpdateArg_IqnList.Merge(m, src)
}
func (m *VolumeGroupUpdateArg_IqnList) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupUpdateArg_IqnList.Size(m)
}
func (m *VolumeGroupUpdateArg_IqnList) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupUpdateArg_IqnList.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupUpdateArg_IqnList proto.InternalMessageInfo

func (m *VolumeGroupUpdateArg_IqnList) GetIqnList() []string {
	if m != nil {
		return m.IqnList
	}
	return nil
}

// If present, replaces older attachments with given list along with
// their associated params such as client secret.
type VolumeGroupUpdateArg_IscsiClientSpecList struct {
	SpecList             []*IscsiClientSpec `protobuf:"bytes,1,rep,name=spec_list,json=specList" json:"spec_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VolumeGroupUpdateArg_IscsiClientSpecList) Reset() {
	*m = VolumeGroupUpdateArg_IscsiClientSpecList{}
}
func (m *VolumeGroupUpdateArg_IscsiClientSpecList) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupUpdateArg_IscsiClientSpecList) ProtoMessage()    {}
func (*VolumeGroupUpdateArg_IscsiClientSpecList) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{207, 1}
}

func (m *VolumeGroupUpdateArg_IscsiClientSpecList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupUpdateArg_IscsiClientSpecList.Unmarshal(m, b)
}
func (m *VolumeGroupUpdateArg_IscsiClientSpecList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupUpdateArg_IscsiClientSpecList.Marshal(b, m, deterministic)
}
func (m *VolumeGroupUpdateArg_IscsiClientSpecList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupUpdateArg_IscsiClientSpecList.Merge(m, src)
}
func (m *VolumeGroupUpdateArg_IscsiClientSpecList) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupUpdateArg_IscsiClientSpecList.Size(m)
}
func (m *VolumeGroupUpdateArg_IscsiClientSpecList) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupUpdateArg_IscsiClientSpecList.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupUpdateArg_IscsiClientSpecList proto.InternalMessageInfo

func (m *VolumeGroupUpdateArg_IscsiClientSpecList) GetSpecList() []*IscsiClientSpec {
	if m != nil {
		return m.SpecList
	}
	return nil
}

type VolumeGroupUpdateRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupUpdateRet) Reset()         { *m = VolumeGroupUpdateRet{} }
func (m *VolumeGroupUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupUpdateRet) ProtoMessage()    {}
func (*VolumeGroupUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{208}
}

func (m *VolumeGroupUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupUpdateRet.Unmarshal(m, b)
}
func (m *VolumeGroupUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupUpdateRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupUpdateRet.Merge(m, src)
}
func (m *VolumeGroupUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupUpdateRet.Size(m)
}
func (m *VolumeGroupUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupUpdateRet proto.InternalMessageInfo

func (m *VolumeGroupUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VolumeGroupUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupUpdateTaskRet) Reset()         { *m = VolumeGroupUpdateTaskRet{} }
func (m *VolumeGroupUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupUpdateTaskRet) ProtoMessage()    {}
func (*VolumeGroupUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{209}
}

func (m *VolumeGroupUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupUpdateTaskRet.Unmarshal(m, b)
}
func (m *VolumeGroupUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupUpdateTaskRet.Merge(m, src)
}
func (m *VolumeGroupUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupUpdateTaskRet.Size(m)
}
func (m *VolumeGroupUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupUpdateTaskRet proto.InternalMessageInfo

type VolumeGroupDeleteArg struct {
	// UUID of volume group to update.
	VolumeGroupUuid []byte `protobuf:"bytes,1,opt,name=volume_group_uuid,json=volumeGroupUuid" json:"volume_group_uuid,omitempty"`
	// The logical timestamp.
	LogicalTimestamp *int64 `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Only set during entity migration between clusters to indicate
	// transient state of the volume group entity. Acropolis will internally call
	// DetachEntity on EDB entity which will delete the entity from PE but will
	// be kept in a detached state at the PC.
	MovedToClusterUuid   []byte   `protobuf:"bytes,6,opt,name=moved_to_cluster_uuid,json=movedToClusterUuid" json:"moved_to_cluster_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupDeleteArg) Reset()         { *m = VolumeGroupDeleteArg{} }
func (m *VolumeGroupDeleteArg) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupDeleteArg) ProtoMessage()    {}
func (*VolumeGroupDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{210}
}

func (m *VolumeGroupDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupDeleteArg.Unmarshal(m, b)
}
func (m *VolumeGroupDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupDeleteArg.Marshal(b, m, deterministic)
}
func (m *VolumeGroupDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupDeleteArg.Merge(m, src)
}
func (m *VolumeGroupDeleteArg) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupDeleteArg.Size(m)
}
func (m *VolumeGroupDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupDeleteArg proto.InternalMessageInfo

const Default_VolumeGroupDeleteArg_LogicalTimestamp int64 = -1

func (m *VolumeGroupDeleteArg) GetVolumeGroupUuid() []byte {
	if m != nil {
		return m.VolumeGroupUuid
	}
	return nil
}

func (m *VolumeGroupDeleteArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_VolumeGroupDeleteArg_LogicalTimestamp
}

func (m *VolumeGroupDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VolumeGroupDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VolumeGroupDeleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VolumeGroupDeleteArg) GetMovedToClusterUuid() []byte {
	if m != nil {
		return m.MovedToClusterUuid
	}
	return nil
}

type VolumeGroupDeleteRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupDeleteRet) Reset()         { *m = VolumeGroupDeleteRet{} }
func (m *VolumeGroupDeleteRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupDeleteRet) ProtoMessage()    {}
func (*VolumeGroupDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{211}
}

func (m *VolumeGroupDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupDeleteRet.Unmarshal(m, b)
}
func (m *VolumeGroupDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupDeleteRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupDeleteRet.Merge(m, src)
}
func (m *VolumeGroupDeleteRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupDeleteRet.Size(m)
}
func (m *VolumeGroupDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupDeleteRet proto.InternalMessageInfo

func (m *VolumeGroupDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VolumeGroupDeleteTaskRet struct {
	DeletedVmdiskUuidList [][]byte `protobuf:"bytes,1,rep,name=deleted_vmdisk_uuid_list,json=deletedVmdiskUuidList" json:"deleted_vmdisk_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VolumeGroupDeleteTaskRet) Reset()         { *m = VolumeGroupDeleteTaskRet{} }
func (m *VolumeGroupDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupDeleteTaskRet) ProtoMessage()    {}
func (*VolumeGroupDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{212}
}

func (m *VolumeGroupDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupDeleteTaskRet.Unmarshal(m, b)
}
func (m *VolumeGroupDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupDeleteTaskRet.Merge(m, src)
}
func (m *VolumeGroupDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupDeleteTaskRet.Size(m)
}
func (m *VolumeGroupDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupDeleteTaskRet proto.InternalMessageInfo

func (m *VolumeGroupDeleteTaskRet) GetDeletedVmdiskUuidList() [][]byte {
	if m != nil {
		return m.DeletedVmdiskUuidList
	}
	return nil
}

type VolumeGroupCloneArg struct {
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,2,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// The source volume group uuid to clone from.
	SourceVgUuid []byte `protobuf:"bytes,3,opt,name=source_vg_uuid,json=sourceVgUuid" json:"source_vg_uuid,omitempty"`
	// The caller may optionally provide a logical VG timestamp.
	SourceVgLogicalTimestamp *int64 `protobuf:"varint,4,opt,name=source_vg_logical_timestamp,json=sourceVgLogicalTimestamp,def=-1" json:"source_vg_logical_timestamp,omitempty"`
	// List of clone specifications.
	SpecList []*VolumeGroupCloneSpec `protobuf:"bytes,5,rep,name=spec_list,json=specList" json:"spec_list,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupCloneArg) Reset()         { *m = VolumeGroupCloneArg{} }
func (m *VolumeGroupCloneArg) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupCloneArg) ProtoMessage()    {}
func (*VolumeGroupCloneArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{213}
}

func (m *VolumeGroupCloneArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupCloneArg.Unmarshal(m, b)
}
func (m *VolumeGroupCloneArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupCloneArg.Marshal(b, m, deterministic)
}
func (m *VolumeGroupCloneArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupCloneArg.Merge(m, src)
}
func (m *VolumeGroupCloneArg) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupCloneArg.Size(m)
}
func (m *VolumeGroupCloneArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupCloneArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupCloneArg proto.InternalMessageInfo

const Default_VolumeGroupCloneArg_SourceVgLogicalTimestamp int64 = -1

func (m *VolumeGroupCloneArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VolumeGroupCloneArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VolumeGroupCloneArg) GetSourceVgUuid() []byte {
	if m != nil {
		return m.SourceVgUuid
	}
	return nil
}

func (m *VolumeGroupCloneArg) GetSourceVgLogicalTimestamp() int64 {
	if m != nil && m.SourceVgLogicalTimestamp != nil {
		return *m.SourceVgLogicalTimestamp
	}
	return Default_VolumeGroupCloneArg_SourceVgLogicalTimestamp
}

func (m *VolumeGroupCloneArg) GetSpecList() []*VolumeGroupCloneSpec {
	if m != nil {
		return m.SpecList
	}
	return nil
}

func (m *VolumeGroupCloneArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VolumeGroupCloneRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VolumeGroupCloneTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupCloneRet) Reset()         { *m = VolumeGroupCloneRet{} }
func (m *VolumeGroupCloneRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupCloneRet) ProtoMessage()    {}
func (*VolumeGroupCloneRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{214}
}

func (m *VolumeGroupCloneRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupCloneRet.Unmarshal(m, b)
}
func (m *VolumeGroupCloneRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupCloneRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupCloneRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupCloneRet.Merge(m, src)
}
func (m *VolumeGroupCloneRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupCloneRet.Size(m)
}
func (m *VolumeGroupCloneRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupCloneRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupCloneRet proto.InternalMessageInfo

func (m *VolumeGroupCloneRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VolumeGroupCloneTaskRet struct {
	// Information about the resulting clones. The inner ret value is a
	// VolumeGroupCreateTaskRet.
	ResponseList         []*MetaResponse `protobuf:"bytes,1,rep,name=response_list,json=responseList" json:"response_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VolumeGroupCloneTaskRet) Reset()         { *m = VolumeGroupCloneTaskRet{} }
func (m *VolumeGroupCloneTaskRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupCloneTaskRet) ProtoMessage()    {}
func (*VolumeGroupCloneTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{215}
}

func (m *VolumeGroupCloneTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupCloneTaskRet.Unmarshal(m, b)
}
func (m *VolumeGroupCloneTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupCloneTaskRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupCloneTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupCloneTaskRet.Merge(m, src)
}
func (m *VolumeGroupCloneTaskRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupCloneTaskRet.Size(m)
}
func (m *VolumeGroupCloneTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupCloneTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupCloneTaskRet proto.InternalMessageInfo

func (m *VolumeGroupCloneTaskRet) GetResponseList() []*MetaResponse {
	if m != nil {
		return m.ResponseList
	}
	return nil
}

type VolumeDiskCreateArg struct {
	// UUID of volume group to update.
	VolumeGroupUuid []byte `protobuf:"bytes,1,opt,name=volume_group_uuid,json=volumeGroupUuid" json:"volume_group_uuid,omitempty"`
	// The logical timestamp.
	LogicalTimestamp *int64                  `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	SpecList         []*VolumeDiskCreateSpec `protobuf:"bytes,3,rep,name=spec_list,json=specList" json:"spec_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeDiskCreateArg) Reset()         { *m = VolumeDiskCreateArg{} }
func (m *VolumeDiskCreateArg) String() string { return proto.CompactTextString(m) }
func (*VolumeDiskCreateArg) ProtoMessage()    {}
func (*VolumeDiskCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{216}
}

func (m *VolumeDiskCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeDiskCreateArg.Unmarshal(m, b)
}
func (m *VolumeDiskCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeDiskCreateArg.Marshal(b, m, deterministic)
}
func (m *VolumeDiskCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeDiskCreateArg.Merge(m, src)
}
func (m *VolumeDiskCreateArg) XXX_Size() int {
	return xxx_messageInfo_VolumeDiskCreateArg.Size(m)
}
func (m *VolumeDiskCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeDiskCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeDiskCreateArg proto.InternalMessageInfo

const Default_VolumeDiskCreateArg_LogicalTimestamp int64 = -1

func (m *VolumeDiskCreateArg) GetVolumeGroupUuid() []byte {
	if m != nil {
		return m.VolumeGroupUuid
	}
	return nil
}

func (m *VolumeDiskCreateArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_VolumeDiskCreateArg_LogicalTimestamp
}

func (m *VolumeDiskCreateArg) GetSpecList() []*VolumeDiskCreateSpec {
	if m != nil {
		return m.SpecList
	}
	return nil
}

func (m *VolumeDiskCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VolumeDiskCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VolumeDiskCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VolumeDiskCreateRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeDiskCreateRet) Reset()         { *m = VolumeDiskCreateRet{} }
func (m *VolumeDiskCreateRet) String() string { return proto.CompactTextString(m) }
func (*VolumeDiskCreateRet) ProtoMessage()    {}
func (*VolumeDiskCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{217}
}

func (m *VolumeDiskCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeDiskCreateRet.Unmarshal(m, b)
}
func (m *VolumeDiskCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeDiskCreateRet.Marshal(b, m, deterministic)
}
func (m *VolumeDiskCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeDiskCreateRet.Merge(m, src)
}
func (m *VolumeDiskCreateRet) XXX_Size() int {
	return xxx_messageInfo_VolumeDiskCreateRet.Size(m)
}
func (m *VolumeDiskCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeDiskCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeDiskCreateRet proto.InternalMessageInfo

func (m *VolumeDiskCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VolumeDiskCreateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeDiskCreateTaskRet) Reset()         { *m = VolumeDiskCreateTaskRet{} }
func (m *VolumeDiskCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VolumeDiskCreateTaskRet) ProtoMessage()    {}
func (*VolumeDiskCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{218}
}

func (m *VolumeDiskCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeDiskCreateTaskRet.Unmarshal(m, b)
}
func (m *VolumeDiskCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeDiskCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *VolumeDiskCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeDiskCreateTaskRet.Merge(m, src)
}
func (m *VolumeDiskCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VolumeDiskCreateTaskRet.Size(m)
}
func (m *VolumeDiskCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeDiskCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeDiskCreateTaskRet proto.InternalMessageInfo

type VolumeDiskDeleteArg struct {
	// UUID of volume group to update.
	VolumeGroupUuid []byte `protobuf:"bytes,1,opt,name=volume_group_uuid,json=volumeGroupUuid" json:"volume_group_uuid,omitempty"`
	// The logical timestamp.
	LogicalTimestamp *int64 `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// Index of disk to delete.
	// Specify exactly one of 'disk_index_list' and 'disk_uuid_list'.
	DiskIndexList []uint32 `protobuf:"varint,3,rep,name=disk_index_list,json=diskIndexList" json:"disk_index_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// List of UUIDs of disks to be deleted.
	// Specify exactly one of 'disk_index_list' and 'disk_uuid_list'.
	DiskUuidList         [][]byte `protobuf:"bytes,7,rep,name=disk_uuid_list,json=diskUuidList" json:"disk_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeDiskDeleteArg) Reset()         { *m = VolumeDiskDeleteArg{} }
func (m *VolumeDiskDeleteArg) String() string { return proto.CompactTextString(m) }
func (*VolumeDiskDeleteArg) ProtoMessage()    {}
func (*VolumeDiskDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{219}
}

func (m *VolumeDiskDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeDiskDeleteArg.Unmarshal(m, b)
}
func (m *VolumeDiskDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeDiskDeleteArg.Marshal(b, m, deterministic)
}
func (m *VolumeDiskDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeDiskDeleteArg.Merge(m, src)
}
func (m *VolumeDiskDeleteArg) XXX_Size() int {
	return xxx_messageInfo_VolumeDiskDeleteArg.Size(m)
}
func (m *VolumeDiskDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeDiskDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeDiskDeleteArg proto.InternalMessageInfo

const Default_VolumeDiskDeleteArg_LogicalTimestamp int64 = -1

func (m *VolumeDiskDeleteArg) GetVolumeGroupUuid() []byte {
	if m != nil {
		return m.VolumeGroupUuid
	}
	return nil
}

func (m *VolumeDiskDeleteArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_VolumeDiskDeleteArg_LogicalTimestamp
}

func (m *VolumeDiskDeleteArg) GetDiskIndexList() []uint32 {
	if m != nil {
		return m.DiskIndexList
	}
	return nil
}

func (m *VolumeDiskDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VolumeDiskDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VolumeDiskDeleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VolumeDiskDeleteArg) GetDiskUuidList() [][]byte {
	if m != nil {
		return m.DiskUuidList
	}
	return nil
}

type VolumeDiskDeleteRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeDiskDeleteRet) Reset()         { *m = VolumeDiskDeleteRet{} }
func (m *VolumeDiskDeleteRet) String() string { return proto.CompactTextString(m) }
func (*VolumeDiskDeleteRet) ProtoMessage()    {}
func (*VolumeDiskDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{220}
}

func (m *VolumeDiskDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeDiskDeleteRet.Unmarshal(m, b)
}
func (m *VolumeDiskDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeDiskDeleteRet.Marshal(b, m, deterministic)
}
func (m *VolumeDiskDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeDiskDeleteRet.Merge(m, src)
}
func (m *VolumeDiskDeleteRet) XXX_Size() int {
	return xxx_messageInfo_VolumeDiskDeleteRet.Size(m)
}
func (m *VolumeDiskDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeDiskDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeDiskDeleteRet proto.InternalMessageInfo

func (m *VolumeDiskDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VolumeDiskDeleteTaskRet struct {
	DeletedVmdiskUuidList [][]byte `protobuf:"bytes,1,rep,name=deleted_vmdisk_uuid_list,json=deletedVmdiskUuidList" json:"deleted_vmdisk_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VolumeDiskDeleteTaskRet) Reset()         { *m = VolumeDiskDeleteTaskRet{} }
func (m *VolumeDiskDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*VolumeDiskDeleteTaskRet) ProtoMessage()    {}
func (*VolumeDiskDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{221}
}

func (m *VolumeDiskDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeDiskDeleteTaskRet.Unmarshal(m, b)
}
func (m *VolumeDiskDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeDiskDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *VolumeDiskDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeDiskDeleteTaskRet.Merge(m, src)
}
func (m *VolumeDiskDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_VolumeDiskDeleteTaskRet.Size(m)
}
func (m *VolumeDiskDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeDiskDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeDiskDeleteTaskRet proto.InternalMessageInfo

func (m *VolumeDiskDeleteTaskRet) GetDeletedVmdiskUuidList() [][]byte {
	if m != nil {
		return m.DeletedVmdiskUuidList
	}
	return nil
}

type VolumeDiskUpdateArg struct {
	// UUID of volume group to update.
	VolumeGroupUuid []byte `protobuf:"bytes,1,opt,name=volume_group_uuid,json=volumeGroupUuid" json:"volume_group_uuid,omitempty"`
	// The logical timestamp.
	LogicalTimestamp *int64 `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// A list of disks to update.
	UpdateList []*VolumeDiskUpdateArg_VolumeDiskUpdateSpec `protobuf:"bytes,3,rep,name=update_list,json=updateList" json:"update_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeDiskUpdateArg) Reset()         { *m = VolumeDiskUpdateArg{} }
func (m *VolumeDiskUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VolumeDiskUpdateArg) ProtoMessage()    {}
func (*VolumeDiskUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{222}
}

func (m *VolumeDiskUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeDiskUpdateArg.Unmarshal(m, b)
}
func (m *VolumeDiskUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeDiskUpdateArg.Marshal(b, m, deterministic)
}
func (m *VolumeDiskUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeDiskUpdateArg.Merge(m, src)
}
func (m *VolumeDiskUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VolumeDiskUpdateArg.Size(m)
}
func (m *VolumeDiskUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeDiskUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeDiskUpdateArg proto.InternalMessageInfo

const Default_VolumeDiskUpdateArg_LogicalTimestamp int64 = -1

func (m *VolumeDiskUpdateArg) GetVolumeGroupUuid() []byte {
	if m != nil {
		return m.VolumeGroupUuid
	}
	return nil
}

func (m *VolumeDiskUpdateArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_VolumeDiskUpdateArg_LogicalTimestamp
}

func (m *VolumeDiskUpdateArg) GetUpdateList() []*VolumeDiskUpdateArg_VolumeDiskUpdateSpec {
	if m != nil {
		return m.UpdateList
	}
	return nil
}

func (m *VolumeDiskUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VolumeDiskUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VolumeDiskUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VolumeDiskUpdateArg_VolumeDiskUpdateSpec struct {
	// Index of the disk to be updated.
	// Specify exactly one of the 'index' and 'volume_disk_uuid'.
	Index *uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// The new disk spec. This cannot be specified along with 'new_size',
	// 'flash_mode' and 'new_annotation'.
	Spec *VolumeDiskCreateSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// New disk size in bytes. This cannot be specified along with 'spec'.
	NewSize *uint64 `protobuf:"varint,3,opt,name=new_size,json=newSize" json:"new_size,omitempty"`
	// Whether to enable/disable flash mode. This cannot be specified along
	// with 'spec'.
	FlashMode *bool `protobuf:"varint,4,opt,name=flash_mode,json=flashMode" json:"flash_mode,omitempty"`
	// UUID of the disk to be updated.
	// Specify exactly one of the 'index' and 'volume_disk_uuid'.
	VolumeDiskUuid []byte `protobuf:"bytes,5,opt,name=volume_disk_uuid,json=volumeDiskUuid" json:"volume_disk_uuid,omitempty"`
	// If present, update annotation string of the disk. This cannot be
	// specified along with 'spec'.
	NewAnnotation        *string  `protobuf:"bytes,6,opt,name=new_annotation,json=newAnnotation" json:"new_annotation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) Reset() {
	*m = VolumeDiskUpdateArg_VolumeDiskUpdateSpec{}
}
func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) String() string { return proto.CompactTextString(m) }
func (*VolumeDiskUpdateArg_VolumeDiskUpdateSpec) ProtoMessage()    {}
func (*VolumeDiskUpdateArg_VolumeDiskUpdateSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{222, 0}
}

func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeDiskUpdateArg_VolumeDiskUpdateSpec.Unmarshal(m, b)
}
func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeDiskUpdateArg_VolumeDiskUpdateSpec.Marshal(b, m, deterministic)
}
func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeDiskUpdateArg_VolumeDiskUpdateSpec.Merge(m, src)
}
func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) XXX_Size() int {
	return xxx_messageInfo_VolumeDiskUpdateArg_VolumeDiskUpdateSpec.Size(m)
}
func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeDiskUpdateArg_VolumeDiskUpdateSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeDiskUpdateArg_VolumeDiskUpdateSpec proto.InternalMessageInfo

func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) GetSpec() *VolumeDiskCreateSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) GetNewSize() uint64 {
	if m != nil && m.NewSize != nil {
		return *m.NewSize
	}
	return 0
}

func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) GetFlashMode() bool {
	if m != nil && m.FlashMode != nil {
		return *m.FlashMode
	}
	return false
}

func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) GetVolumeDiskUuid() []byte {
	if m != nil {
		return m.VolumeDiskUuid
	}
	return nil
}

func (m *VolumeDiskUpdateArg_VolumeDiskUpdateSpec) GetNewAnnotation() string {
	if m != nil && m.NewAnnotation != nil {
		return *m.NewAnnotation
	}
	return ""
}

type VolumeDiskUpdateRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeDiskUpdateRet) Reset()         { *m = VolumeDiskUpdateRet{} }
func (m *VolumeDiskUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VolumeDiskUpdateRet) ProtoMessage()    {}
func (*VolumeDiskUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{223}
}

func (m *VolumeDiskUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeDiskUpdateRet.Unmarshal(m, b)
}
func (m *VolumeDiskUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeDiskUpdateRet.Marshal(b, m, deterministic)
}
func (m *VolumeDiskUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeDiskUpdateRet.Merge(m, src)
}
func (m *VolumeDiskUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VolumeDiskUpdateRet.Size(m)
}
func (m *VolumeDiskUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeDiskUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeDiskUpdateRet proto.InternalMessageInfo

func (m *VolumeDiskUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VolumeDiskUpdateTaskRet struct {
	DeletedVmdiskUuidList [][]byte `protobuf:"bytes,1,rep,name=deleted_vmdisk_uuid_list,json=deletedVmdiskUuidList" json:"deleted_vmdisk_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VolumeDiskUpdateTaskRet) Reset()         { *m = VolumeDiskUpdateTaskRet{} }
func (m *VolumeDiskUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VolumeDiskUpdateTaskRet) ProtoMessage()    {}
func (*VolumeDiskUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{224}
}

func (m *VolumeDiskUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeDiskUpdateTaskRet.Unmarshal(m, b)
}
func (m *VolumeDiskUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeDiskUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VolumeDiskUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeDiskUpdateTaskRet.Merge(m, src)
}
func (m *VolumeDiskUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VolumeDiskUpdateTaskRet.Size(m)
}
func (m *VolumeDiskUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeDiskUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeDiskUpdateTaskRet proto.InternalMessageInfo

func (m *VolumeDiskUpdateTaskRet) GetDeletedVmdiskUuidList() [][]byte {
	if m != nil {
		return m.DeletedVmdiskUuidList
	}
	return nil
}

type VolumeGroupAttachExternalArg struct {
	// UUID of volume group to update.
	VolumeGroupUuid []byte `protobuf:"bytes,1,opt,name=volume_group_uuid,json=volumeGroupUuid" json:"volume_group_uuid,omitempty"`
	// The logical timestamp.
	LogicalTimestamp *int64 `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// Name of external initiator.
	// Deprecated. Use client_spec_list field to populate the initiator_name instead.
	InitiatorName *string                                 `protobuf:"bytes,3,opt,name=initiator_name,json=initiatorName" json:"initiator_name,omitempty"`
	Operation     *VolumeGroupAttachExternalArg_Operation `protobuf:"varint,4,opt,name=operation,enum=nutanix.acropolis.VolumeGroupAttachExternalArg_Operation,def=1" json:"operation,omitempty"`
	TargetParams  *pithos.IscsiClientParams_TargetParams  `protobuf:"bytes,5,opt,name=target_params,json=targetParams" json:"target_params,omitempty"`
	// External client attachment spec.
	ClientSpec           *IscsiClientSpec `protobuf:"bytes,7,opt,name=client_spec,json=clientSpec" json:"client_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *VolumeGroupAttachExternalArg) Reset()         { *m = VolumeGroupAttachExternalArg{} }
func (m *VolumeGroupAttachExternalArg) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupAttachExternalArg) ProtoMessage()    {}
func (*VolumeGroupAttachExternalArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{225}
}

func (m *VolumeGroupAttachExternalArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupAttachExternalArg.Unmarshal(m, b)
}
func (m *VolumeGroupAttachExternalArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupAttachExternalArg.Marshal(b, m, deterministic)
}
func (m *VolumeGroupAttachExternalArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupAttachExternalArg.Merge(m, src)
}
func (m *VolumeGroupAttachExternalArg) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupAttachExternalArg.Size(m)
}
func (m *VolumeGroupAttachExternalArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupAttachExternalArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupAttachExternalArg proto.InternalMessageInfo

const Default_VolumeGroupAttachExternalArg_LogicalTimestamp int64 = -1
const Default_VolumeGroupAttachExternalArg_Operation VolumeGroupAttachExternalArg_Operation = VolumeGroupAttachExternalArg_kAttach

func (m *VolumeGroupAttachExternalArg) GetVolumeGroupUuid() []byte {
	if m != nil {
		return m.VolumeGroupUuid
	}
	return nil
}

func (m *VolumeGroupAttachExternalArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_VolumeGroupAttachExternalArg_LogicalTimestamp
}

func (m *VolumeGroupAttachExternalArg) GetInitiatorName() string {
	if m != nil && m.InitiatorName != nil {
		return *m.InitiatorName
	}
	return ""
}

func (m *VolumeGroupAttachExternalArg) GetOperation() VolumeGroupAttachExternalArg_Operation {
	if m != nil && m.Operation != nil {
		return *m.Operation
	}
	return Default_VolumeGroupAttachExternalArg_Operation
}

func (m *VolumeGroupAttachExternalArg) GetTargetParams() *pithos.IscsiClientParams_TargetParams {
	if m != nil {
		return m.TargetParams
	}
	return nil
}

func (m *VolumeGroupAttachExternalArg) GetClientSpec() *IscsiClientSpec {
	if m != nil {
		return m.ClientSpec
	}
	return nil
}

type VolumeGroupAttachExternalRet struct {
	//  UUID of the attached/detached Iscsi Client
	ClientUuid           []byte   `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid" json:"client_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupAttachExternalRet) Reset()         { *m = VolumeGroupAttachExternalRet{} }
func (m *VolumeGroupAttachExternalRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupAttachExternalRet) ProtoMessage()    {}
func (*VolumeGroupAttachExternalRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{226}
}

func (m *VolumeGroupAttachExternalRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupAttachExternalRet.Unmarshal(m, b)
}
func (m *VolumeGroupAttachExternalRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupAttachExternalRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupAttachExternalRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupAttachExternalRet.Merge(m, src)
}
func (m *VolumeGroupAttachExternalRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupAttachExternalRet.Size(m)
}
func (m *VolumeGroupAttachExternalRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupAttachExternalRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupAttachExternalRet proto.InternalMessageInfo

func (m *VolumeGroupAttachExternalRet) GetClientUuid() []byte {
	if m != nil {
		return m.ClientUuid
	}
	return nil
}

type VolumeGroupAttachIscsiClientArg struct {
	// UUID of volume group to update.
	VolumeGroupUuid []byte `protobuf:"bytes,1,opt,name=volume_group_uuid,json=volumeGroupUuid" json:"volume_group_uuid,omitempty"`
	// The logical timestamp.
	LogicalTimestamp *int64                                     `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	Operation        *VolumeGroupAttachIscsiClientArg_Operation `protobuf:"varint,3,opt,name=operation,enum=nutanix.acropolis.VolumeGroupAttachIscsiClientArg_Operation,def=1" json:"operation,omitempty"`
	TargetParams     *pithos.IscsiClientParams_TargetParams     `protobuf:"bytes,4,opt,name=target_params,json=targetParams" json:"target_params,omitempty"`
	// External client attachment spec.
	ClientSpec *IscsiClientSpec `protobuf:"bytes,5,opt,name=client_spec,json=clientSpec" json:"client_spec,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,6,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid       []byte   `protobuf:"bytes,7,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupAttachIscsiClientArg) Reset()         { *m = VolumeGroupAttachIscsiClientArg{} }
func (m *VolumeGroupAttachIscsiClientArg) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupAttachIscsiClientArg) ProtoMessage()    {}
func (*VolumeGroupAttachIscsiClientArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{227}
}

func (m *VolumeGroupAttachIscsiClientArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupAttachIscsiClientArg.Unmarshal(m, b)
}
func (m *VolumeGroupAttachIscsiClientArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupAttachIscsiClientArg.Marshal(b, m, deterministic)
}
func (m *VolumeGroupAttachIscsiClientArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupAttachIscsiClientArg.Merge(m, src)
}
func (m *VolumeGroupAttachIscsiClientArg) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupAttachIscsiClientArg.Size(m)
}
func (m *VolumeGroupAttachIscsiClientArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupAttachIscsiClientArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupAttachIscsiClientArg proto.InternalMessageInfo

const Default_VolumeGroupAttachIscsiClientArg_LogicalTimestamp int64 = -1
const Default_VolumeGroupAttachIscsiClientArg_Operation VolumeGroupAttachIscsiClientArg_Operation = VolumeGroupAttachIscsiClientArg_kAttach

func (m *VolumeGroupAttachIscsiClientArg) GetVolumeGroupUuid() []byte {
	if m != nil {
		return m.VolumeGroupUuid
	}
	return nil
}

func (m *VolumeGroupAttachIscsiClientArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_VolumeGroupAttachIscsiClientArg_LogicalTimestamp
}

func (m *VolumeGroupAttachIscsiClientArg) GetOperation() VolumeGroupAttachIscsiClientArg_Operation {
	if m != nil && m.Operation != nil {
		return *m.Operation
	}
	return Default_VolumeGroupAttachIscsiClientArg_Operation
}

func (m *VolumeGroupAttachIscsiClientArg) GetTargetParams() *pithos.IscsiClientParams_TargetParams {
	if m != nil {
		return m.TargetParams
	}
	return nil
}

func (m *VolumeGroupAttachIscsiClientArg) GetClientSpec() *IscsiClientSpec {
	if m != nil {
		return m.ClientSpec
	}
	return nil
}

func (m *VolumeGroupAttachIscsiClientArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VolumeGroupAttachIscsiClientArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type VolumeGroupAttachIscsiClientRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupAttachIscsiClientRet) Reset()         { *m = VolumeGroupAttachIscsiClientRet{} }
func (m *VolumeGroupAttachIscsiClientRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupAttachIscsiClientRet) ProtoMessage()    {}
func (*VolumeGroupAttachIscsiClientRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{228}
}

func (m *VolumeGroupAttachIscsiClientRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupAttachIscsiClientRet.Unmarshal(m, b)
}
func (m *VolumeGroupAttachIscsiClientRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupAttachIscsiClientRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupAttachIscsiClientRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupAttachIscsiClientRet.Merge(m, src)
}
func (m *VolumeGroupAttachIscsiClientRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupAttachIscsiClientRet.Size(m)
}
func (m *VolumeGroupAttachIscsiClientRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupAttachIscsiClientRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupAttachIscsiClientRet proto.InternalMessageInfo

func (m *VolumeGroupAttachIscsiClientRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VolumeGroupAttachIscsiClientTaskRet struct {
	IscsiClientUuid      []byte   `protobuf:"bytes,1,opt,name=iscsi_client_uuid,json=iscsiClientUuid" json:"iscsi_client_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupAttachIscsiClientTaskRet) Reset()         { *m = VolumeGroupAttachIscsiClientTaskRet{} }
func (m *VolumeGroupAttachIscsiClientTaskRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupAttachIscsiClientTaskRet) ProtoMessage()    {}
func (*VolumeGroupAttachIscsiClientTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{229}
}

func (m *VolumeGroupAttachIscsiClientTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupAttachIscsiClientTaskRet.Unmarshal(m, b)
}
func (m *VolumeGroupAttachIscsiClientTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupAttachIscsiClientTaskRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupAttachIscsiClientTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupAttachIscsiClientTaskRet.Merge(m, src)
}
func (m *VolumeGroupAttachIscsiClientTaskRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupAttachIscsiClientTaskRet.Size(m)
}
func (m *VolumeGroupAttachIscsiClientTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupAttachIscsiClientTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupAttachIscsiClientTaskRet proto.InternalMessageInfo

func (m *VolumeGroupAttachIscsiClientTaskRet) GetIscsiClientUuid() []byte {
	if m != nil {
		return m.IscsiClientUuid
	}
	return nil
}

type VolumeGroupUpdateExternalArg struct {
	// UUID of volume group to update.
	VolumeGroupUuid []byte `protobuf:"bytes,1,opt,name=volume_group_uuid,json=volumeGroupUuid" json:"volume_group_uuid,omitempty"`
	// The logical timestamp.
	LogicalTimestamp *int64 `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// Name of external initiator.
	InitiatorName *string `protobuf:"bytes,3,opt,name=initiator_name,json=initiatorName" json:"initiator_name,omitempty"`
	// set target_params.preferred_svm_id to -1 to reset host preference.
	TargetParams *pithos.IscsiClientParams_TargetParams `protobuf:"bytes,4,opt,name=target_params,json=targetParams" json:"target_params,omitempty"`
	// External client attachment spec.
	ClientSpec           *IscsiClientSpec `protobuf:"bytes,6,opt,name=client_spec,json=clientSpec" json:"client_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *VolumeGroupUpdateExternalArg) Reset()         { *m = VolumeGroupUpdateExternalArg{} }
func (m *VolumeGroupUpdateExternalArg) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupUpdateExternalArg) ProtoMessage()    {}
func (*VolumeGroupUpdateExternalArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{230}
}

func (m *VolumeGroupUpdateExternalArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupUpdateExternalArg.Unmarshal(m, b)
}
func (m *VolumeGroupUpdateExternalArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupUpdateExternalArg.Marshal(b, m, deterministic)
}
func (m *VolumeGroupUpdateExternalArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupUpdateExternalArg.Merge(m, src)
}
func (m *VolumeGroupUpdateExternalArg) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupUpdateExternalArg.Size(m)
}
func (m *VolumeGroupUpdateExternalArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupUpdateExternalArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupUpdateExternalArg proto.InternalMessageInfo

const Default_VolumeGroupUpdateExternalArg_LogicalTimestamp int64 = -1

func (m *VolumeGroupUpdateExternalArg) GetVolumeGroupUuid() []byte {
	if m != nil {
		return m.VolumeGroupUuid
	}
	return nil
}

func (m *VolumeGroupUpdateExternalArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_VolumeGroupUpdateExternalArg_LogicalTimestamp
}

func (m *VolumeGroupUpdateExternalArg) GetInitiatorName() string {
	if m != nil && m.InitiatorName != nil {
		return *m.InitiatorName
	}
	return ""
}

func (m *VolumeGroupUpdateExternalArg) GetTargetParams() *pithos.IscsiClientParams_TargetParams {
	if m != nil {
		return m.TargetParams
	}
	return nil
}

func (m *VolumeGroupUpdateExternalArg) GetClientSpec() *IscsiClientSpec {
	if m != nil {
		return m.ClientSpec
	}
	return nil
}

type VolumeGroupUpdateExternalRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupUpdateExternalRet) Reset()         { *m = VolumeGroupUpdateExternalRet{} }
func (m *VolumeGroupUpdateExternalRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupUpdateExternalRet) ProtoMessage()    {}
func (*VolumeGroupUpdateExternalRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{231}
}

func (m *VolumeGroupUpdateExternalRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupUpdateExternalRet.Unmarshal(m, b)
}
func (m *VolumeGroupUpdateExternalRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupUpdateExternalRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupUpdateExternalRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupUpdateExternalRet.Merge(m, src)
}
func (m *VolumeGroupUpdateExternalRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupUpdateExternalRet.Size(m)
}
func (m *VolumeGroupUpdateExternalRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupUpdateExternalRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupUpdateExternalRet proto.InternalMessageInfo

type VolumeGroupAttachVmArg struct {
	// UUID of volume group to attach/detach.
	VolumeGroupUuid []byte `protobuf:"bytes,1,opt,name=volume_group_uuid,json=volumeGroupUuid" json:"volume_group_uuid,omitempty"`
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The logical timestamp of the VG
	VgLogicalTimestamp *int64 `protobuf:"varint,3,opt,name=vg_logical_timestamp,json=vgLogicalTimestamp,def=-1" json:"vg_logical_timestamp,omitempty"`
	// The logical timestamp of the VM
	VmLogicalTimestamp *int64 `protobuf:"varint,4,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// The index on the scsi bus to attach the VM to.
	// Note that we support only scsi bus for volume group attachments.
	Index     *uint32                           `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Operation *VolumeGroupAttachVmArg_Operation `protobuf:"varint,6,opt,name=operation,enum=nutanix.acropolis.VolumeGroupAttachVmArg_Operation,def=1" json:"operation,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,7,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,8,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Whether to delete the VolumeGroup when it is detached from a VM.
	// Note: This is nutanix-internal only (used by cerebro) and must not be
	// exposed to user-facing endpoints such as ACLI/REST.
	DeleteOnDetach *bool `protobuf:"varint,9,opt,name=delete_on_detach,json=deleteOnDetach" json:"delete_on_detach,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,10,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupAttachVmArg) Reset()         { *m = VolumeGroupAttachVmArg{} }
func (m *VolumeGroupAttachVmArg) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupAttachVmArg) ProtoMessage()    {}
func (*VolumeGroupAttachVmArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{232}
}

func (m *VolumeGroupAttachVmArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupAttachVmArg.Unmarshal(m, b)
}
func (m *VolumeGroupAttachVmArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupAttachVmArg.Marshal(b, m, deterministic)
}
func (m *VolumeGroupAttachVmArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupAttachVmArg.Merge(m, src)
}
func (m *VolumeGroupAttachVmArg) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupAttachVmArg.Size(m)
}
func (m *VolumeGroupAttachVmArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupAttachVmArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupAttachVmArg proto.InternalMessageInfo

const Default_VolumeGroupAttachVmArg_VgLogicalTimestamp int64 = -1
const Default_VolumeGroupAttachVmArg_VmLogicalTimestamp int64 = -1
const Default_VolumeGroupAttachVmArg_Operation VolumeGroupAttachVmArg_Operation = VolumeGroupAttachVmArg_kAttach

func (m *VolumeGroupAttachVmArg) GetVolumeGroupUuid() []byte {
	if m != nil {
		return m.VolumeGroupUuid
	}
	return nil
}

func (m *VolumeGroupAttachVmArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VolumeGroupAttachVmArg) GetVgLogicalTimestamp() int64 {
	if m != nil && m.VgLogicalTimestamp != nil {
		return *m.VgLogicalTimestamp
	}
	return Default_VolumeGroupAttachVmArg_VgLogicalTimestamp
}

func (m *VolumeGroupAttachVmArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VolumeGroupAttachVmArg_VmLogicalTimestamp
}

func (m *VolumeGroupAttachVmArg) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *VolumeGroupAttachVmArg) GetOperation() VolumeGroupAttachVmArg_Operation {
	if m != nil && m.Operation != nil {
		return *m.Operation
	}
	return Default_VolumeGroupAttachVmArg_Operation
}

func (m *VolumeGroupAttachVmArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VolumeGroupAttachVmArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VolumeGroupAttachVmArg) GetDeleteOnDetach() bool {
	if m != nil && m.DeleteOnDetach != nil {
		return *m.DeleteOnDetach
	}
	return false
}

func (m *VolumeGroupAttachVmArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VolumeGroupAttachVmRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VolumeGroupAttachVmTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupAttachVmRet) Reset()         { *m = VolumeGroupAttachVmRet{} }
func (m *VolumeGroupAttachVmRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupAttachVmRet) ProtoMessage()    {}
func (*VolumeGroupAttachVmRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{233}
}

func (m *VolumeGroupAttachVmRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupAttachVmRet.Unmarshal(m, b)
}
func (m *VolumeGroupAttachVmRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupAttachVmRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupAttachVmRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupAttachVmRet.Merge(m, src)
}
func (m *VolumeGroupAttachVmRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupAttachVmRet.Size(m)
}
func (m *VolumeGroupAttachVmRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupAttachVmRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupAttachVmRet proto.InternalMessageInfo

func (m *VolumeGroupAttachVmRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VolumeGroupAttachVmTaskRet struct {
	// Vmdisks deleted if delete_on_detach flag is set.
	DeletedVmdiskUuidList [][]byte `protobuf:"bytes,1,rep,name=deleted_vmdisk_uuid_list,json=deletedVmdiskUuidList" json:"deleted_vmdisk_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VolumeGroupAttachVmTaskRet) Reset()         { *m = VolumeGroupAttachVmTaskRet{} }
func (m *VolumeGroupAttachVmTaskRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupAttachVmTaskRet) ProtoMessage()    {}
func (*VolumeGroupAttachVmTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{234}
}

func (m *VolumeGroupAttachVmTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupAttachVmTaskRet.Unmarshal(m, b)
}
func (m *VolumeGroupAttachVmTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupAttachVmTaskRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupAttachVmTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupAttachVmTaskRet.Merge(m, src)
}
func (m *VolumeGroupAttachVmTaskRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupAttachVmTaskRet.Size(m)
}
func (m *VolumeGroupAttachVmTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupAttachVmTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupAttachVmTaskRet proto.InternalMessageInfo

func (m *VolumeGroupAttachVmTaskRet) GetDeletedVmdiskUuidList() [][]byte {
	if m != nil {
		return m.DeletedVmdiskUuidList
	}
	return nil
}

type VolumeGroupRegisterArg struct {
	// The hyperint argument for registering a volume.
	RegisterVm *hyperint.RegisterVmArg_RegisterVm `protobuf:"bytes,1,opt,name=register_vm,json=registerVm" json:"register_vm,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupRegisterArg) Reset()         { *m = VolumeGroupRegisterArg{} }
func (m *VolumeGroupRegisterArg) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupRegisterArg) ProtoMessage()    {}
func (*VolumeGroupRegisterArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{235}
}

func (m *VolumeGroupRegisterArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupRegisterArg.Unmarshal(m, b)
}
func (m *VolumeGroupRegisterArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupRegisterArg.Marshal(b, m, deterministic)
}
func (m *VolumeGroupRegisterArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupRegisterArg.Merge(m, src)
}
func (m *VolumeGroupRegisterArg) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupRegisterArg.Size(m)
}
func (m *VolumeGroupRegisterArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupRegisterArg.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupRegisterArg proto.InternalMessageInfo

func (m *VolumeGroupRegisterArg) GetRegisterVm() *hyperint.RegisterVmArg_RegisterVm {
	if m != nil {
		return m.RegisterVm
	}
	return nil
}

func (m *VolumeGroupRegisterArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VolumeGroupRegisterArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VolumeGroupRegisterArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VolumeGroupRegisterRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VolumeGroupRegisterTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupRegisterRet) Reset()         { *m = VolumeGroupRegisterRet{} }
func (m *VolumeGroupRegisterRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupRegisterRet) ProtoMessage()    {}
func (*VolumeGroupRegisterRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{236}
}

func (m *VolumeGroupRegisterRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupRegisterRet.Unmarshal(m, b)
}
func (m *VolumeGroupRegisterRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupRegisterRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupRegisterRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupRegisterRet.Merge(m, src)
}
func (m *VolumeGroupRegisterRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupRegisterRet.Size(m)
}
func (m *VolumeGroupRegisterRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupRegisterRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupRegisterRet proto.InternalMessageInfo

func (m *VolumeGroupRegisterRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VolumeGroupRegisterTaskRet struct {
	// The hyperint result VM registration.
	Result               *hyperint.RegisterVmRet_VmResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *VolumeGroupRegisterTaskRet) Reset()         { *m = VolumeGroupRegisterTaskRet{} }
func (m *VolumeGroupRegisterTaskRet) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupRegisterTaskRet) ProtoMessage()    {}
func (*VolumeGroupRegisterTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{237}
}

func (m *VolumeGroupRegisterTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupRegisterTaskRet.Unmarshal(m, b)
}
func (m *VolumeGroupRegisterTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupRegisterTaskRet.Marshal(b, m, deterministic)
}
func (m *VolumeGroupRegisterTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupRegisterTaskRet.Merge(m, src)
}
func (m *VolumeGroupRegisterTaskRet) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupRegisterTaskRet.Size(m)
}
func (m *VolumeGroupRegisterTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupRegisterTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupRegisterTaskRet proto.InternalMessageInfo

func (m *VolumeGroupRegisterTaskRet) GetResult() *hyperint.RegisterVmRet_VmResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type IscsiClientGetArg struct {
	// List of client identifiers. If none specified, then return all clients.
	ClientIdList         []*pithos.IscsiClientParams_IscsiClientIdentifier `protobuf:"bytes,1,rep,name=client_id_list,json=clientIdList" json:"client_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *IscsiClientGetArg) Reset()         { *m = IscsiClientGetArg{} }
func (m *IscsiClientGetArg) String() string { return proto.CompactTextString(m) }
func (*IscsiClientGetArg) ProtoMessage()    {}
func (*IscsiClientGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{238}
}

func (m *IscsiClientGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IscsiClientGetArg.Unmarshal(m, b)
}
func (m *IscsiClientGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IscsiClientGetArg.Marshal(b, m, deterministic)
}
func (m *IscsiClientGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscsiClientGetArg.Merge(m, src)
}
func (m *IscsiClientGetArg) XXX_Size() int {
	return xxx_messageInfo_IscsiClientGetArg.Size(m)
}
func (m *IscsiClientGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_IscsiClientGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_IscsiClientGetArg proto.InternalMessageInfo

func (m *IscsiClientGetArg) GetClientIdList() []*pithos.IscsiClientParams_IscsiClientIdentifier {
	if m != nil {
		return m.ClientIdList
	}
	return nil
}

type IscsiClientGetRet struct {
	ClientList           []*pithos.IscsiClientParams `protobuf:"bytes,1,rep,name=client_list,json=clientList" json:"client_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *IscsiClientGetRet) Reset()         { *m = IscsiClientGetRet{} }
func (m *IscsiClientGetRet) String() string { return proto.CompactTextString(m) }
func (*IscsiClientGetRet) ProtoMessage()    {}
func (*IscsiClientGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{239}
}

func (m *IscsiClientGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IscsiClientGetRet.Unmarshal(m, b)
}
func (m *IscsiClientGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IscsiClientGetRet.Marshal(b, m, deterministic)
}
func (m *IscsiClientGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscsiClientGetRet.Merge(m, src)
}
func (m *IscsiClientGetRet) XXX_Size() int {
	return xxx_messageInfo_IscsiClientGetRet.Size(m)
}
func (m *IscsiClientGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_IscsiClientGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_IscsiClientGetRet proto.InternalMessageInfo

func (m *IscsiClientGetRet) GetClientList() []*pithos.IscsiClientParams {
	if m != nil {
		return m.ClientList
	}
	return nil
}

type IscsiClientUpdateArg struct {
	// Iscsi client id.
	ClientId *pithos.IscsiClientParams_IscsiClientIdentifier `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// Client secret used in CHAP authentication.
	ClientSecret         *string  `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret" json:"client_secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IscsiClientUpdateArg) Reset()         { *m = IscsiClientUpdateArg{} }
func (m *IscsiClientUpdateArg) String() string { return proto.CompactTextString(m) }
func (*IscsiClientUpdateArg) ProtoMessage()    {}
func (*IscsiClientUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{240}
}

func (m *IscsiClientUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IscsiClientUpdateArg.Unmarshal(m, b)
}
func (m *IscsiClientUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IscsiClientUpdateArg.Marshal(b, m, deterministic)
}
func (m *IscsiClientUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscsiClientUpdateArg.Merge(m, src)
}
func (m *IscsiClientUpdateArg) XXX_Size() int {
	return xxx_messageInfo_IscsiClientUpdateArg.Size(m)
}
func (m *IscsiClientUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_IscsiClientUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_IscsiClientUpdateArg proto.InternalMessageInfo

func (m *IscsiClientUpdateArg) GetClientId() *pithos.IscsiClientParams_IscsiClientIdentifier {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *IscsiClientUpdateArg) GetClientSecret() string {
	if m != nil && m.ClientSecret != nil {
		return *m.ClientSecret
	}
	return ""
}

type IscsiClientUpdateRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IscsiClientUpdateRet) Reset()         { *m = IscsiClientUpdateRet{} }
func (m *IscsiClientUpdateRet) String() string { return proto.CompactTextString(m) }
func (*IscsiClientUpdateRet) ProtoMessage()    {}
func (*IscsiClientUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{241}
}

func (m *IscsiClientUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IscsiClientUpdateRet.Unmarshal(m, b)
}
func (m *IscsiClientUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IscsiClientUpdateRet.Marshal(b, m, deterministic)
}
func (m *IscsiClientUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscsiClientUpdateRet.Merge(m, src)
}
func (m *IscsiClientUpdateRet) XXX_Size() int {
	return xxx_messageInfo_IscsiClientUpdateRet.Size(m)
}
func (m *IscsiClientUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_IscsiClientUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_IscsiClientUpdateRet proto.InternalMessageInfo

type IscsiClientUpdateAsyncArg struct {
	// Iscsi client id.
	ClientId *pithos.IscsiClientParams_IscsiClientIdentifier `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// Client secret used in CHAP authentication.
	ClientSecret *string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret" json:"client_secret,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid       []byte   `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IscsiClientUpdateAsyncArg) Reset()         { *m = IscsiClientUpdateAsyncArg{} }
func (m *IscsiClientUpdateAsyncArg) String() string { return proto.CompactTextString(m) }
func (*IscsiClientUpdateAsyncArg) ProtoMessage()    {}
func (*IscsiClientUpdateAsyncArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{242}
}

func (m *IscsiClientUpdateAsyncArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IscsiClientUpdateAsyncArg.Unmarshal(m, b)
}
func (m *IscsiClientUpdateAsyncArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IscsiClientUpdateAsyncArg.Marshal(b, m, deterministic)
}
func (m *IscsiClientUpdateAsyncArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscsiClientUpdateAsyncArg.Merge(m, src)
}
func (m *IscsiClientUpdateAsyncArg) XXX_Size() int {
	return xxx_messageInfo_IscsiClientUpdateAsyncArg.Size(m)
}
func (m *IscsiClientUpdateAsyncArg) XXX_DiscardUnknown() {
	xxx_messageInfo_IscsiClientUpdateAsyncArg.DiscardUnknown(m)
}

var xxx_messageInfo_IscsiClientUpdateAsyncArg proto.InternalMessageInfo

func (m *IscsiClientUpdateAsyncArg) GetClientId() *pithos.IscsiClientParams_IscsiClientIdentifier {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *IscsiClientUpdateAsyncArg) GetClientSecret() string {
	if m != nil && m.ClientSecret != nil {
		return *m.ClientSecret
	}
	return ""
}

func (m *IscsiClientUpdateAsyncArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *IscsiClientUpdateAsyncArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type IscsiClientUpdateAsyncRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IscsiClientUpdateAsyncRet) Reset()         { *m = IscsiClientUpdateAsyncRet{} }
func (m *IscsiClientUpdateAsyncRet) String() string { return proto.CompactTextString(m) }
func (*IscsiClientUpdateAsyncRet) ProtoMessage()    {}
func (*IscsiClientUpdateAsyncRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{243}
}

func (m *IscsiClientUpdateAsyncRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IscsiClientUpdateAsyncRet.Unmarshal(m, b)
}
func (m *IscsiClientUpdateAsyncRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IscsiClientUpdateAsyncRet.Marshal(b, m, deterministic)
}
func (m *IscsiClientUpdateAsyncRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscsiClientUpdateAsyncRet.Merge(m, src)
}
func (m *IscsiClientUpdateAsyncRet) XXX_Size() int {
	return xxx_messageInfo_IscsiClientUpdateAsyncRet.Size(m)
}
func (m *IscsiClientUpdateAsyncRet) XXX_DiscardUnknown() {
	xxx_messageInfo_IscsiClientUpdateAsyncRet.DiscardUnknown(m)
}

var xxx_messageInfo_IscsiClientUpdateAsyncRet proto.InternalMessageInfo

func (m *IscsiClientUpdateAsyncRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type IscsiClientUpdateAsyncTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IscsiClientUpdateAsyncTaskRet) Reset()         { *m = IscsiClientUpdateAsyncTaskRet{} }
func (m *IscsiClientUpdateAsyncTaskRet) String() string { return proto.CompactTextString(m) }
func (*IscsiClientUpdateAsyncTaskRet) ProtoMessage()    {}
func (*IscsiClientUpdateAsyncTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{244}
}

func (m *IscsiClientUpdateAsyncTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IscsiClientUpdateAsyncTaskRet.Unmarshal(m, b)
}
func (m *IscsiClientUpdateAsyncTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IscsiClientUpdateAsyncTaskRet.Marshal(b, m, deterministic)
}
func (m *IscsiClientUpdateAsyncTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscsiClientUpdateAsyncTaskRet.Merge(m, src)
}
func (m *IscsiClientUpdateAsyncTaskRet) XXX_Size() int {
	return xxx_messageInfo_IscsiClientUpdateAsyncTaskRet.Size(m)
}
func (m *IscsiClientUpdateAsyncTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_IscsiClientUpdateAsyncTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_IscsiClientUpdateAsyncTaskRet proto.InternalMessageInfo

//-----------------------------------------------------------------------------
type SchedulerNodeGetArg struct {
	// List of host UUIDs. If none is specified, then return info for all hosts
	NodeUuidList         [][]byte `protobuf:"bytes,1,rep,name=node_uuid_list,json=nodeUuidList" json:"node_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchedulerNodeGetArg) Reset()         { *m = SchedulerNodeGetArg{} }
func (m *SchedulerNodeGetArg) String() string { return proto.CompactTextString(m) }
func (*SchedulerNodeGetArg) ProtoMessage()    {}
func (*SchedulerNodeGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{245}
}

func (m *SchedulerNodeGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulerNodeGetArg.Unmarshal(m, b)
}
func (m *SchedulerNodeGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulerNodeGetArg.Marshal(b, m, deterministic)
}
func (m *SchedulerNodeGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerNodeGetArg.Merge(m, src)
}
func (m *SchedulerNodeGetArg) XXX_Size() int {
	return xxx_messageInfo_SchedulerNodeGetArg.Size(m)
}
func (m *SchedulerNodeGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerNodeGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerNodeGetArg proto.InternalMessageInfo

func (m *SchedulerNodeGetArg) GetNodeUuidList() [][]byte {
	if m != nil {
		return m.NodeUuidList
	}
	return nil
}

type SchedulerNodeGetRet struct {
	// A list of hosts' scheduler information.
	NodeInfoList         []*SchedulerNodeInfo `protobuf:"bytes,1,rep,name=node_info_list,json=nodeInfoList" json:"node_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SchedulerNodeGetRet) Reset()         { *m = SchedulerNodeGetRet{} }
func (m *SchedulerNodeGetRet) String() string { return proto.CompactTextString(m) }
func (*SchedulerNodeGetRet) ProtoMessage()    {}
func (*SchedulerNodeGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{246}
}

func (m *SchedulerNodeGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulerNodeGetRet.Unmarshal(m, b)
}
func (m *SchedulerNodeGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulerNodeGetRet.Marshal(b, m, deterministic)
}
func (m *SchedulerNodeGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerNodeGetRet.Merge(m, src)
}
func (m *SchedulerNodeGetRet) XXX_Size() int {
	return xxx_messageInfo_SchedulerNodeGetRet.Size(m)
}
func (m *SchedulerNodeGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerNodeGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerNodeGetRet proto.InternalMessageInfo

func (m *SchedulerNodeGetRet) GetNodeInfoList() []*SchedulerNodeInfo {
	if m != nil {
		return m.NodeInfoList
	}
	return nil
}

type SchedulerSegmentAssignmentGetArg struct {
	// List of host UUIDs. If none is specified, then return info for all hosts
	NodeUuidList         [][]byte `protobuf:"bytes,1,rep,name=node_uuid_list,json=nodeUuidList" json:"node_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchedulerSegmentAssignmentGetArg) Reset()         { *m = SchedulerSegmentAssignmentGetArg{} }
func (m *SchedulerSegmentAssignmentGetArg) String() string { return proto.CompactTextString(m) }
func (*SchedulerSegmentAssignmentGetArg) ProtoMessage()    {}
func (*SchedulerSegmentAssignmentGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{247}
}

func (m *SchedulerSegmentAssignmentGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulerSegmentAssignmentGetArg.Unmarshal(m, b)
}
func (m *SchedulerSegmentAssignmentGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulerSegmentAssignmentGetArg.Marshal(b, m, deterministic)
}
func (m *SchedulerSegmentAssignmentGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerSegmentAssignmentGetArg.Merge(m, src)
}
func (m *SchedulerSegmentAssignmentGetArg) XXX_Size() int {
	return xxx_messageInfo_SchedulerSegmentAssignmentGetArg.Size(m)
}
func (m *SchedulerSegmentAssignmentGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerSegmentAssignmentGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerSegmentAssignmentGetArg proto.InternalMessageInfo

func (m *SchedulerSegmentAssignmentGetArg) GetNodeUuidList() [][]byte {
	if m != nil {
		return m.NodeUuidList
	}
	return nil
}

type SchedulerSegmentAssignmentGetRet struct {
	// A list of hosts' segment assignment information.
	SegmentAssignmentList []*SchedulerSegmentAssignmentRecord `protobuf:"bytes,1,rep,name=segment_assignment_list,json=segmentAssignmentList" json:"segment_assignment_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                            `json:"-"`
	XXX_unrecognized      []byte                              `json:"-"`
	XXX_sizecache         int32                               `json:"-"`
}

func (m *SchedulerSegmentAssignmentGetRet) Reset()         { *m = SchedulerSegmentAssignmentGetRet{} }
func (m *SchedulerSegmentAssignmentGetRet) String() string { return proto.CompactTextString(m) }
func (*SchedulerSegmentAssignmentGetRet) ProtoMessage()    {}
func (*SchedulerSegmentAssignmentGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{248}
}

func (m *SchedulerSegmentAssignmentGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulerSegmentAssignmentGetRet.Unmarshal(m, b)
}
func (m *SchedulerSegmentAssignmentGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulerSegmentAssignmentGetRet.Marshal(b, m, deterministic)
}
func (m *SchedulerSegmentAssignmentGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerSegmentAssignmentGetRet.Merge(m, src)
}
func (m *SchedulerSegmentAssignmentGetRet) XXX_Size() int {
	return xxx_messageInfo_SchedulerSegmentAssignmentGetRet.Size(m)
}
func (m *SchedulerSegmentAssignmentGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerSegmentAssignmentGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerSegmentAssignmentGetRet proto.InternalMessageInfo

func (m *SchedulerSegmentAssignmentGetRet) GetSegmentAssignmentList() []*SchedulerSegmentAssignmentRecord {
	if m != nil {
		return m.SegmentAssignmentList
	}
	return nil
}

type HostRestoreVmLocalityArg struct {
	// The UUID of the host.
	HostUuid []byte `protobuf:"bytes,1,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostRestoreVmLocalityArg) Reset()         { *m = HostRestoreVmLocalityArg{} }
func (m *HostRestoreVmLocalityArg) String() string { return proto.CompactTextString(m) }
func (*HostRestoreVmLocalityArg) ProtoMessage()    {}
func (*HostRestoreVmLocalityArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{249}
}

func (m *HostRestoreVmLocalityArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostRestoreVmLocalityArg.Unmarshal(m, b)
}
func (m *HostRestoreVmLocalityArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostRestoreVmLocalityArg.Marshal(b, m, deterministic)
}
func (m *HostRestoreVmLocalityArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostRestoreVmLocalityArg.Merge(m, src)
}
func (m *HostRestoreVmLocalityArg) XXX_Size() int {
	return xxx_messageInfo_HostRestoreVmLocalityArg.Size(m)
}
func (m *HostRestoreVmLocalityArg) XXX_DiscardUnknown() {
	xxx_messageInfo_HostRestoreVmLocalityArg.DiscardUnknown(m)
}

var xxx_messageInfo_HostRestoreVmLocalityArg proto.InternalMessageInfo

func (m *HostRestoreVmLocalityArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *HostRestoreVmLocalityArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *HostRestoreVmLocalityArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *HostRestoreVmLocalityArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type HostRestoreVmLocalityRet struct {
	// A task to poll for completion. On success, the task will contain a
	// HostRestoreVmLocalityTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostRestoreVmLocalityRet) Reset()         { *m = HostRestoreVmLocalityRet{} }
func (m *HostRestoreVmLocalityRet) String() string { return proto.CompactTextString(m) }
func (*HostRestoreVmLocalityRet) ProtoMessage()    {}
func (*HostRestoreVmLocalityRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{250}
}

func (m *HostRestoreVmLocalityRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostRestoreVmLocalityRet.Unmarshal(m, b)
}
func (m *HostRestoreVmLocalityRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostRestoreVmLocalityRet.Marshal(b, m, deterministic)
}
func (m *HostRestoreVmLocalityRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostRestoreVmLocalityRet.Merge(m, src)
}
func (m *HostRestoreVmLocalityRet) XXX_Size() int {
	return xxx_messageInfo_HostRestoreVmLocalityRet.Size(m)
}
func (m *HostRestoreVmLocalityRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HostRestoreVmLocalityRet.DiscardUnknown(m)
}

var xxx_messageInfo_HostRestoreVmLocalityRet proto.InternalMessageInfo

func (m *HostRestoreVmLocalityRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type HostRestoreVmLocalityTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostRestoreVmLocalityTaskRet) Reset()         { *m = HostRestoreVmLocalityTaskRet{} }
func (m *HostRestoreVmLocalityTaskRet) String() string { return proto.CompactTextString(m) }
func (*HostRestoreVmLocalityTaskRet) ProtoMessage()    {}
func (*HostRestoreVmLocalityTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{251}
}

func (m *HostRestoreVmLocalityTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostRestoreVmLocalityTaskRet.Unmarshal(m, b)
}
func (m *HostRestoreVmLocalityTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostRestoreVmLocalityTaskRet.Marshal(b, m, deterministic)
}
func (m *HostRestoreVmLocalityTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostRestoreVmLocalityTaskRet.Merge(m, src)
}
func (m *HostRestoreVmLocalityTaskRet) XXX_Size() int {
	return xxx_messageInfo_HostRestoreVmLocalityTaskRet.Size(m)
}
func (m *HostRestoreVmLocalityTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HostRestoreVmLocalityTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_HostRestoreVmLocalityTaskRet proto.InternalMessageInfo

type StretchGetArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StretchGetArg) Reset()         { *m = StretchGetArg{} }
func (m *StretchGetArg) String() string { return proto.CompactTextString(m) }
func (*StretchGetArg) ProtoMessage()    {}
func (*StretchGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{252}
}

func (m *StretchGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StretchGetArg.Unmarshal(m, b)
}
func (m *StretchGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StretchGetArg.Marshal(b, m, deterministic)
}
func (m *StretchGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StretchGetArg.Merge(m, src)
}
func (m *StretchGetArg) XXX_Size() int {
	return xxx_messageInfo_StretchGetArg.Size(m)
}
func (m *StretchGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_StretchGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_StretchGetArg proto.InternalMessageInfo

type StretchGetRet struct {
	// Acropolis stretch configuration for this cluster.
	StretchConfig        *StretchConfig `protobuf:"bytes,1,opt,name=stretch_config,json=stretchConfig" json:"stretch_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StretchGetRet) Reset()         { *m = StretchGetRet{} }
func (m *StretchGetRet) String() string { return proto.CompactTextString(m) }
func (*StretchGetRet) ProtoMessage()    {}
func (*StretchGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{253}
}

func (m *StretchGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StretchGetRet.Unmarshal(m, b)
}
func (m *StretchGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StretchGetRet.Marshal(b, m, deterministic)
}
func (m *StretchGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StretchGetRet.Merge(m, src)
}
func (m *StretchGetRet) XXX_Size() int {
	return xxx_messageInfo_StretchGetRet.Size(m)
}
func (m *StretchGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_StretchGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_StretchGetRet proto.InternalMessageInfo

func (m *StretchGetRet) GetStretchConfig() *StretchConfig {
	if m != nil {
		return m.StretchConfig
	}
	return nil
}

type StretchConfigureArg struct {
	Operation *StretchConfigureArg_Operation `protobuf:"varint,1,opt,name=operation,enum=nutanix.acropolis.StretchConfigureArg_Operation" json:"operation,omitempty"`
	// VStore to enable/disable stretch on.
	VstoreId             *int64   `protobuf:"varint,2,opt,name=vstore_id,json=vstoreId" json:"vstore_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StretchConfigureArg) Reset()         { *m = StretchConfigureArg{} }
func (m *StretchConfigureArg) String() string { return proto.CompactTextString(m) }
func (*StretchConfigureArg) ProtoMessage()    {}
func (*StretchConfigureArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{254}
}

func (m *StretchConfigureArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StretchConfigureArg.Unmarshal(m, b)
}
func (m *StretchConfigureArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StretchConfigureArg.Marshal(b, m, deterministic)
}
func (m *StretchConfigureArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StretchConfigureArg.Merge(m, src)
}
func (m *StretchConfigureArg) XXX_Size() int {
	return xxx_messageInfo_StretchConfigureArg.Size(m)
}
func (m *StretchConfigureArg) XXX_DiscardUnknown() {
	xxx_messageInfo_StretchConfigureArg.DiscardUnknown(m)
}

var xxx_messageInfo_StretchConfigureArg proto.InternalMessageInfo

func (m *StretchConfigureArg) GetOperation() StretchConfigureArg_Operation {
	if m != nil && m.Operation != nil {
		return *m.Operation
	}
	return StretchConfigureArg_kEnable
}

func (m *StretchConfigureArg) GetVstoreId() int64 {
	if m != nil && m.VstoreId != nil {
		return *m.VstoreId
	}
	return 0
}

type StretchConfigureRet struct {
	// A task to poll for completion. On success, the task will contain a
	// StretchConfigureTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StretchConfigureRet) Reset()         { *m = StretchConfigureRet{} }
func (m *StretchConfigureRet) String() string { return proto.CompactTextString(m) }
func (*StretchConfigureRet) ProtoMessage()    {}
func (*StretchConfigureRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{255}
}

func (m *StretchConfigureRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StretchConfigureRet.Unmarshal(m, b)
}
func (m *StretchConfigureRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StretchConfigureRet.Marshal(b, m, deterministic)
}
func (m *StretchConfigureRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StretchConfigureRet.Merge(m, src)
}
func (m *StretchConfigureRet) XXX_Size() int {
	return xxx_messageInfo_StretchConfigureRet.Size(m)
}
func (m *StretchConfigureRet) XXX_DiscardUnknown() {
	xxx_messageInfo_StretchConfigureRet.DiscardUnknown(m)
}

var xxx_messageInfo_StretchConfigureRet proto.InternalMessageInfo

func (m *StretchConfigureRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type StretchConfigureTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StretchConfigureTaskRet) Reset()         { *m = StretchConfigureTaskRet{} }
func (m *StretchConfigureTaskRet) String() string { return proto.CompactTextString(m) }
func (*StretchConfigureTaskRet) ProtoMessage()    {}
func (*StretchConfigureTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{256}
}

func (m *StretchConfigureTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StretchConfigureTaskRet.Unmarshal(m, b)
}
func (m *StretchConfigureTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StretchConfigureTaskRet.Marshal(b, m, deterministic)
}
func (m *StretchConfigureTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StretchConfigureTaskRet.Merge(m, src)
}
func (m *StretchConfigureTaskRet) XXX_Size() int {
	return xxx_messageInfo_StretchConfigureTaskRet.Size(m)
}
func (m *StretchConfigureTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_StretchConfigureTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_StretchConfigureTaskRet proto.InternalMessageInfo

type StretchRecoverArg struct {
	// VStore to recover stretch metadata from.
	VstoreId *int64 `protobuf:"varint,1,opt,name=vstore_id,json=vstoreId" json:"vstore_id,omitempty"`
	// Network mapping from source(primary) to destination(secondary).
	NetworkMapping *hyperint.HostNetworkMapping `protobuf:"bytes,2,opt,name=network_mapping,json=networkMapping" json:"network_mapping,omitempty"`
	// Whether to recover VMs or not. Atleast one of include_vms and include_vgs
	// must be true.
	IncludeVms *bool `protobuf:"varint,3,opt,name=include_vms,json=includeVms,def=1" json:"include_vms,omitempty"`
	// Whether to recover VGs or not.
	IncludeVgs           *bool    `protobuf:"varint,4,opt,name=include_vgs,json=includeVgs,def=1" json:"include_vgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StretchRecoverArg) Reset()         { *m = StretchRecoverArg{} }
func (m *StretchRecoverArg) String() string { return proto.CompactTextString(m) }
func (*StretchRecoverArg) ProtoMessage()    {}
func (*StretchRecoverArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{257}
}

func (m *StretchRecoverArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StretchRecoverArg.Unmarshal(m, b)
}
func (m *StretchRecoverArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StretchRecoverArg.Marshal(b, m, deterministic)
}
func (m *StretchRecoverArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StretchRecoverArg.Merge(m, src)
}
func (m *StretchRecoverArg) XXX_Size() int {
	return xxx_messageInfo_StretchRecoverArg.Size(m)
}
func (m *StretchRecoverArg) XXX_DiscardUnknown() {
	xxx_messageInfo_StretchRecoverArg.DiscardUnknown(m)
}

var xxx_messageInfo_StretchRecoverArg proto.InternalMessageInfo

const Default_StretchRecoverArg_IncludeVms bool = true
const Default_StretchRecoverArg_IncludeVgs bool = true

func (m *StretchRecoverArg) GetVstoreId() int64 {
	if m != nil && m.VstoreId != nil {
		return *m.VstoreId
	}
	return 0
}

func (m *StretchRecoverArg) GetNetworkMapping() *hyperint.HostNetworkMapping {
	if m != nil {
		return m.NetworkMapping
	}
	return nil
}

func (m *StretchRecoverArg) GetIncludeVms() bool {
	if m != nil && m.IncludeVms != nil {
		return *m.IncludeVms
	}
	return Default_StretchRecoverArg_IncludeVms
}

func (m *StretchRecoverArg) GetIncludeVgs() bool {
	if m != nil && m.IncludeVgs != nil {
		return *m.IncludeVgs
	}
	return Default_StretchRecoverArg_IncludeVgs
}

type StretchRecoverRet struct {
	// A task to poll for completion. On success, the task will contain a
	// StretchRecoverTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StretchRecoverRet) Reset()         { *m = StretchRecoverRet{} }
func (m *StretchRecoverRet) String() string { return proto.CompactTextString(m) }
func (*StretchRecoverRet) ProtoMessage()    {}
func (*StretchRecoverRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{258}
}

func (m *StretchRecoverRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StretchRecoverRet.Unmarshal(m, b)
}
func (m *StretchRecoverRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StretchRecoverRet.Marshal(b, m, deterministic)
}
func (m *StretchRecoverRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StretchRecoverRet.Merge(m, src)
}
func (m *StretchRecoverRet) XXX_Size() int {
	return xxx_messageInfo_StretchRecoverRet.Size(m)
}
func (m *StretchRecoverRet) XXX_DiscardUnknown() {
	xxx_messageInfo_StretchRecoverRet.DiscardUnknown(m)
}

var xxx_messageInfo_StretchRecoverRet proto.InternalMessageInfo

func (m *StretchRecoverRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type StretchRecoverTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StretchRecoverTaskRet) Reset()         { *m = StretchRecoverTaskRet{} }
func (m *StretchRecoverTaskRet) String() string { return proto.CompactTextString(m) }
func (*StretchRecoverTaskRet) ProtoMessage()    {}
func (*StretchRecoverTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{259}
}

func (m *StretchRecoverTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StretchRecoverTaskRet.Unmarshal(m, b)
}
func (m *StretchRecoverTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StretchRecoverTaskRet.Marshal(b, m, deterministic)
}
func (m *StretchRecoverTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StretchRecoverTaskRet.Merge(m, src)
}
func (m *StretchRecoverTaskRet) XXX_Size() int {
	return xxx_messageInfo_StretchRecoverTaskRet.Size(m)
}
func (m *StretchRecoverTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_StretchRecoverTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_StretchRecoverTaskRet proto.InternalMessageInfo

type VmGroupCreateArg struct {
	// VmGroup name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Affinity rule.
	Affinity *Affinity `protobuf:"bytes,2,opt,name=affinity" json:"affinity,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// A version 4 UUID that the client may specify for idempotence.
	Uuid                 []byte   `protobuf:"bytes,6,opt,name=uuid" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupCreateArg) Reset()         { *m = VmGroupCreateArg{} }
func (m *VmGroupCreateArg) String() string { return proto.CompactTextString(m) }
func (*VmGroupCreateArg) ProtoMessage()    {}
func (*VmGroupCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{260}
}

func (m *VmGroupCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupCreateArg.Unmarshal(m, b)
}
func (m *VmGroupCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupCreateArg.Marshal(b, m, deterministic)
}
func (m *VmGroupCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupCreateArg.Merge(m, src)
}
func (m *VmGroupCreateArg) XXX_Size() int {
	return xxx_messageInfo_VmGroupCreateArg.Size(m)
}
func (m *VmGroupCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupCreateArg proto.InternalMessageInfo

func (m *VmGroupCreateArg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VmGroupCreateArg) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *VmGroupCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmGroupCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmGroupCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmGroupCreateArg) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type VmGroupCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmGroupCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupCreateRet) Reset()         { *m = VmGroupCreateRet{} }
func (m *VmGroupCreateRet) String() string { return proto.CompactTextString(m) }
func (*VmGroupCreateRet) ProtoMessage()    {}
func (*VmGroupCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{261}
}

func (m *VmGroupCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupCreateRet.Unmarshal(m, b)
}
func (m *VmGroupCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupCreateRet.Marshal(b, m, deterministic)
}
func (m *VmGroupCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupCreateRet.Merge(m, src)
}
func (m *VmGroupCreateRet) XXX_Size() int {
	return xxx_messageInfo_VmGroupCreateRet.Size(m)
}
func (m *VmGroupCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupCreateRet proto.InternalMessageInfo

func (m *VmGroupCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmGroupCreateTaskRet struct {
	// Newly created VmGroup UUID.
	VmGroupUuid          []byte   `protobuf:"bytes,1,opt,name=vm_group_uuid,json=vmGroupUuid" json:"vm_group_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupCreateTaskRet) Reset()         { *m = VmGroupCreateTaskRet{} }
func (m *VmGroupCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmGroupCreateTaskRet) ProtoMessage()    {}
func (*VmGroupCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{262}
}

func (m *VmGroupCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupCreateTaskRet.Unmarshal(m, b)
}
func (m *VmGroupCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmGroupCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupCreateTaskRet.Merge(m, src)
}
func (m *VmGroupCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmGroupCreateTaskRet.Size(m)
}
func (m *VmGroupCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupCreateTaskRet proto.InternalMessageInfo

func (m *VmGroupCreateTaskRet) GetVmGroupUuid() []byte {
	if m != nil {
		return m.VmGroupUuid
	}
	return nil
}

type VmGroupDeleteArg struct {
	// The VmGroup UUID.
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupDeleteArg) Reset()         { *m = VmGroupDeleteArg{} }
func (m *VmGroupDeleteArg) String() string { return proto.CompactTextString(m) }
func (*VmGroupDeleteArg) ProtoMessage()    {}
func (*VmGroupDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{263}
}

func (m *VmGroupDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupDeleteArg.Unmarshal(m, b)
}
func (m *VmGroupDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupDeleteArg.Marshal(b, m, deterministic)
}
func (m *VmGroupDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupDeleteArg.Merge(m, src)
}
func (m *VmGroupDeleteArg) XXX_Size() int {
	return xxx_messageInfo_VmGroupDeleteArg.Size(m)
}
func (m *VmGroupDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupDeleteArg proto.InternalMessageInfo

func (m *VmGroupDeleteArg) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *VmGroupDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmGroupDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmGroupDeleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmGroupDeleteRet struct {
	// A task to poll for completion (if the caller cares). On success, the task
	// will contain a VmGroupDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupDeleteRet) Reset()         { *m = VmGroupDeleteRet{} }
func (m *VmGroupDeleteRet) String() string { return proto.CompactTextString(m) }
func (*VmGroupDeleteRet) ProtoMessage()    {}
func (*VmGroupDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{264}
}

func (m *VmGroupDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupDeleteRet.Unmarshal(m, b)
}
func (m *VmGroupDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupDeleteRet.Marshal(b, m, deterministic)
}
func (m *VmGroupDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupDeleteRet.Merge(m, src)
}
func (m *VmGroupDeleteRet) XXX_Size() int {
	return xxx_messageInfo_VmGroupDeleteRet.Size(m)
}
func (m *VmGroupDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupDeleteRet proto.InternalMessageInfo

func (m *VmGroupDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmGroupDeleteTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupDeleteTaskRet) Reset()         { *m = VmGroupDeleteTaskRet{} }
func (m *VmGroupDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmGroupDeleteTaskRet) ProtoMessage()    {}
func (*VmGroupDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{265}
}

func (m *VmGroupDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupDeleteTaskRet.Unmarshal(m, b)
}
func (m *VmGroupDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *VmGroupDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupDeleteTaskRet.Merge(m, src)
}
func (m *VmGroupDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmGroupDeleteTaskRet.Size(m)
}
func (m *VmGroupDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupDeleteTaskRet proto.InternalMessageInfo

type VmGroupListArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupListArg) Reset()         { *m = VmGroupListArg{} }
func (m *VmGroupListArg) String() string { return proto.CompactTextString(m) }
func (*VmGroupListArg) ProtoMessage()    {}
func (*VmGroupListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{266}
}

func (m *VmGroupListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupListArg.Unmarshal(m, b)
}
func (m *VmGroupListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupListArg.Marshal(b, m, deterministic)
}
func (m *VmGroupListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupListArg.Merge(m, src)
}
func (m *VmGroupListArg) XXX_Size() int {
	return xxx_messageInfo_VmGroupListArg.Size(m)
}
func (m *VmGroupListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupListArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupListArg proto.InternalMessageInfo

type VmGroupListRet struct {
	// A list of VmGroup UUIDs.
	VmGroupUuidList      [][]byte `protobuf:"bytes,1,rep,name=vm_group_uuid_list,json=vmGroupUuidList" json:"vm_group_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupListRet) Reset()         { *m = VmGroupListRet{} }
func (m *VmGroupListRet) String() string { return proto.CompactTextString(m) }
func (*VmGroupListRet) ProtoMessage()    {}
func (*VmGroupListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{267}
}

func (m *VmGroupListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupListRet.Unmarshal(m, b)
}
func (m *VmGroupListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupListRet.Marshal(b, m, deterministic)
}
func (m *VmGroupListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupListRet.Merge(m, src)
}
func (m *VmGroupListRet) XXX_Size() int {
	return xxx_messageInfo_VmGroupListRet.Size(m)
}
func (m *VmGroupListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupListRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupListRet proto.InternalMessageInfo

func (m *VmGroupListRet) GetVmGroupUuidList() [][]byte {
	if m != nil {
		return m.VmGroupUuidList
	}
	return nil
}

type VmGroupGetArg struct {
	// Whether to include deleted entries.
	IncludeDeleted *bool `protobuf:"varint,1,opt,name=include_deleted,json=includeDeleted" json:"include_deleted,omitempty"`
	// List of VmGroup UUIDs. If none is specified, then return info for all
	// VmGroups.
	VmGroupUuidList      [][]byte `protobuf:"bytes,2,rep,name=vm_group_uuid_list,json=vmGroupUuidList" json:"vm_group_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupGetArg) Reset()         { *m = VmGroupGetArg{} }
func (m *VmGroupGetArg) String() string { return proto.CompactTextString(m) }
func (*VmGroupGetArg) ProtoMessage()    {}
func (*VmGroupGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{268}
}

func (m *VmGroupGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupGetArg.Unmarshal(m, b)
}
func (m *VmGroupGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupGetArg.Marshal(b, m, deterministic)
}
func (m *VmGroupGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupGetArg.Merge(m, src)
}
func (m *VmGroupGetArg) XXX_Size() int {
	return xxx_messageInfo_VmGroupGetArg.Size(m)
}
func (m *VmGroupGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupGetArg proto.InternalMessageInfo

func (m *VmGroupGetArg) GetIncludeDeleted() bool {
	if m != nil && m.IncludeDeleted != nil {
		return *m.IncludeDeleted
	}
	return false
}

func (m *VmGroupGetArg) GetVmGroupUuidList() [][]byte {
	if m != nil {
		return m.VmGroupUuidList
	}
	return nil
}

type VmGroupGetRet struct {
	// A list of VmGroups.
	VmGroupList          []*VmGroup `protobuf:"bytes,1,rep,name=vm_group_list,json=vmGroupList" json:"vm_group_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VmGroupGetRet) Reset()         { *m = VmGroupGetRet{} }
func (m *VmGroupGetRet) String() string { return proto.CompactTextString(m) }
func (*VmGroupGetRet) ProtoMessage()    {}
func (*VmGroupGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{269}
}

func (m *VmGroupGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupGetRet.Unmarshal(m, b)
}
func (m *VmGroupGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupGetRet.Marshal(b, m, deterministic)
}
func (m *VmGroupGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupGetRet.Merge(m, src)
}
func (m *VmGroupGetRet) XXX_Size() int {
	return xxx_messageInfo_VmGroupGetRet.Size(m)
}
func (m *VmGroupGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupGetRet proto.InternalMessageInfo

func (m *VmGroupGetRet) GetVmGroupList() []*VmGroup {
	if m != nil {
		return m.VmGroupList
	}
	return nil
}

type VmGroupUpdateArg struct {
	// The VmGroup identifier.
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// VmGroup name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Affinity rule.
	Affinity *Affinity `protobuf:"bytes,3,opt,name=affinity" json:"affinity,omitempty"`
	// Clear affinity rule.
	ClearAffinity *bool `protobuf:"varint,4,opt,name=clear_affinity,json=clearAffinity" json:"clear_affinity,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,7,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupUpdateArg) Reset()         { *m = VmGroupUpdateArg{} }
func (m *VmGroupUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VmGroupUpdateArg) ProtoMessage()    {}
func (*VmGroupUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{270}
}

func (m *VmGroupUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupUpdateArg.Unmarshal(m, b)
}
func (m *VmGroupUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupUpdateArg.Marshal(b, m, deterministic)
}
func (m *VmGroupUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupUpdateArg.Merge(m, src)
}
func (m *VmGroupUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VmGroupUpdateArg.Size(m)
}
func (m *VmGroupUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupUpdateArg proto.InternalMessageInfo

func (m *VmGroupUpdateArg) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *VmGroupUpdateArg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VmGroupUpdateArg) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *VmGroupUpdateArg) GetClearAffinity() bool {
	if m != nil && m.ClearAffinity != nil {
		return *m.ClearAffinity
	}
	return false
}

func (m *VmGroupUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmGroupUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmGroupUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmGroupUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmGroupUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupUpdateRet) Reset()         { *m = VmGroupUpdateRet{} }
func (m *VmGroupUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmGroupUpdateRet) ProtoMessage()    {}
func (*VmGroupUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{271}
}

func (m *VmGroupUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupUpdateRet.Unmarshal(m, b)
}
func (m *VmGroupUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmGroupUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupUpdateRet.Merge(m, src)
}
func (m *VmGroupUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmGroupUpdateRet.Size(m)
}
func (m *VmGroupUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupUpdateRet proto.InternalMessageInfo

func (m *VmGroupUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmGroupUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupUpdateTaskRet) Reset()         { *m = VmGroupUpdateTaskRet{} }
func (m *VmGroupUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmGroupUpdateTaskRet) ProtoMessage()    {}
func (*VmGroupUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{272}
}

func (m *VmGroupUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmGroupUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmGroupUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupUpdateTaskRet.Merge(m, src)
}
func (m *VmGroupUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmGroupUpdateTaskRet.Size(m)
}
func (m *VmGroupUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupUpdateTaskRet proto.InternalMessageInfo

type VmGroupListVmArg struct {
	// VmGroup identifier.
	Uuid                 []byte   `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupListVmArg) Reset()         { *m = VmGroupListVmArg{} }
func (m *VmGroupListVmArg) String() string { return proto.CompactTextString(m) }
func (*VmGroupListVmArg) ProtoMessage()    {}
func (*VmGroupListVmArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{273}
}

func (m *VmGroupListVmArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupListVmArg.Unmarshal(m, b)
}
func (m *VmGroupListVmArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupListVmArg.Marshal(b, m, deterministic)
}
func (m *VmGroupListVmArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupListVmArg.Merge(m, src)
}
func (m *VmGroupListVmArg) XXX_Size() int {
	return xxx_messageInfo_VmGroupListVmArg.Size(m)
}
func (m *VmGroupListVmArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupListVmArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupListVmArg proto.InternalMessageInfo

func (m *VmGroupListVmArg) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type VmGroupListVmRet struct {
	// A list of VMs.
	VmUuidList           [][]byte `protobuf:"bytes,1,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGroupListVmRet) Reset()         { *m = VmGroupListVmRet{} }
func (m *VmGroupListVmRet) String() string { return proto.CompactTextString(m) }
func (*VmGroupListVmRet) ProtoMessage()    {}
func (*VmGroupListVmRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{274}
}

func (m *VmGroupListVmRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGroupListVmRet.Unmarshal(m, b)
}
func (m *VmGroupListVmRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGroupListVmRet.Marshal(b, m, deterministic)
}
func (m *VmGroupListVmRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGroupListVmRet.Merge(m, src)
}
func (m *VmGroupListVmRet) XXX_Size() int {
	return xxx_messageInfo_VmGroupListVmRet.Size(m)
}
func (m *VmGroupListVmRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGroupListVmRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGroupListVmRet proto.InternalMessageInfo

func (m *VmGroupListVmRet) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

type WatchCallbackRet struct {
	// Boolean to indicate success of start of Watch Callback
	Success              *bool    `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchCallbackRet) Reset()         { *m = WatchCallbackRet{} }
func (m *WatchCallbackRet) String() string { return proto.CompactTextString(m) }
func (*WatchCallbackRet) ProtoMessage()    {}
func (*WatchCallbackRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{275}
}

func (m *WatchCallbackRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchCallbackRet.Unmarshal(m, b)
}
func (m *WatchCallbackRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchCallbackRet.Marshal(b, m, deterministic)
}
func (m *WatchCallbackRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchCallbackRet.Merge(m, src)
}
func (m *WatchCallbackRet) XXX_Size() int {
	return xxx_messageInfo_WatchCallbackRet.Size(m)
}
func (m *WatchCallbackRet) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchCallbackRet.DiscardUnknown(m)
}

var xxx_messageInfo_WatchCallbackRet proto.InternalMessageInfo

func (m *WatchCallbackRet) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

type EnterMaintenanceModeCheckArg struct {
	// The UUID of the host.
	NodeUuid []byte `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	// Indicates the action we take for non-migratable VMs.
	NonmigratableVmAction *EnterMaintenanceModeTypes_VmNonMigratableOption `protobuf:"varint,2,opt,name=nonmigratable_vm_action,json=nonmigratableVmAction,enum=nutanix.acropolis.EnterMaintenanceModeTypes_VmNonMigratableOption,def=1" json:"nonmigratable_vm_action,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                         `json:"-"`
	XXX_unrecognized      []byte                                           `json:"-"`
	XXX_sizecache         int32                                            `json:"-"`
}

func (m *EnterMaintenanceModeCheckArg) Reset()         { *m = EnterMaintenanceModeCheckArg{} }
func (m *EnterMaintenanceModeCheckArg) String() string { return proto.CompactTextString(m) }
func (*EnterMaintenanceModeCheckArg) ProtoMessage()    {}
func (*EnterMaintenanceModeCheckArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{276}
}

func (m *EnterMaintenanceModeCheckArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnterMaintenanceModeCheckArg.Unmarshal(m, b)
}
func (m *EnterMaintenanceModeCheckArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnterMaintenanceModeCheckArg.Marshal(b, m, deterministic)
}
func (m *EnterMaintenanceModeCheckArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterMaintenanceModeCheckArg.Merge(m, src)
}
func (m *EnterMaintenanceModeCheckArg) XXX_Size() int {
	return xxx_messageInfo_EnterMaintenanceModeCheckArg.Size(m)
}
func (m *EnterMaintenanceModeCheckArg) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterMaintenanceModeCheckArg.DiscardUnknown(m)
}

var xxx_messageInfo_EnterMaintenanceModeCheckArg proto.InternalMessageInfo

const Default_EnterMaintenanceModeCheckArg_NonmigratableVmAction EnterMaintenanceModeTypes_VmNonMigratableOption = EnterMaintenanceModeTypes_kBlock

func (m *EnterMaintenanceModeCheckArg) GetNodeUuid() []byte {
	if m != nil {
		return m.NodeUuid
	}
	return nil
}

func (m *EnterMaintenanceModeCheckArg) GetNonmigratableVmAction() EnterMaintenanceModeTypes_VmNonMigratableOption {
	if m != nil && m.NonmigratableVmAction != nil {
		return *m.NonmigratableVmAction
	}
	return Default_EnterMaintenanceModeCheckArg_NonmigratableVmAction
}

type EnterMaintenanceModeCheckRet struct {
	// List of VMs which would be powered off if nonmigratable_vm_action is
	// set as kAcpiShutdownAndPowerOff. Such VMs are neither live migratable nor
	// HA protected.
	PoweredOffVmList [][]byte `protobuf:"bytes,1,rep,name=powered_off_vm_list,json=poweredOffVmList" json:"powered_off_vm_list,omitempty"`
	// List of VMs which might get powered off if nonmigratable_vm_action is
	// set as kAcpiShutdownAndPowerOff since such VMs are live migratable but
	// not HA protected.
	MaybePoweredOffVmList [][]byte `protobuf:"bytes,2,rep,name=maybe_powered_off_vm_list,json=maybePoweredOffVmList" json:"maybe_powered_off_vm_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *EnterMaintenanceModeCheckRet) Reset()         { *m = EnterMaintenanceModeCheckRet{} }
func (m *EnterMaintenanceModeCheckRet) String() string { return proto.CompactTextString(m) }
func (*EnterMaintenanceModeCheckRet) ProtoMessage()    {}
func (*EnterMaintenanceModeCheckRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{277}
}

func (m *EnterMaintenanceModeCheckRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnterMaintenanceModeCheckRet.Unmarshal(m, b)
}
func (m *EnterMaintenanceModeCheckRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnterMaintenanceModeCheckRet.Marshal(b, m, deterministic)
}
func (m *EnterMaintenanceModeCheckRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterMaintenanceModeCheckRet.Merge(m, src)
}
func (m *EnterMaintenanceModeCheckRet) XXX_Size() int {
	return xxx_messageInfo_EnterMaintenanceModeCheckRet.Size(m)
}
func (m *EnterMaintenanceModeCheckRet) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterMaintenanceModeCheckRet.DiscardUnknown(m)
}

var xxx_messageInfo_EnterMaintenanceModeCheckRet proto.InternalMessageInfo

func (m *EnterMaintenanceModeCheckRet) GetPoweredOffVmList() [][]byte {
	if m != nil {
		return m.PoweredOffVmList
	}
	return nil
}

func (m *EnterMaintenanceModeCheckRet) GetMaybePoweredOffVmList() [][]byte {
	if m != nil {
		return m.MaybePoweredOffVmList
	}
	return nil
}

type UpdateAffinityRuleArg struct {
	// UUID that uniquely identifies the update. Used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Rule list.
	RuleList []*UpdateAffinityRuleArg_CategoryAffinityRuleInfo `protobuf:"bytes,2,rep,name=rule_list,json=ruleList" json:"rule_list,omitempty"`
	// Legacy rule deletion list.
	LegacyUpdateList     []*UpdateAffinityRuleArg_LegacyRuleUpdateInfo `protobuf:"bytes,3,rep,name=legacy_update_list,json=legacyUpdateList" json:"legacy_update_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *UpdateAffinityRuleArg) Reset()         { *m = UpdateAffinityRuleArg{} }
func (m *UpdateAffinityRuleArg) String() string { return proto.CompactTextString(m) }
func (*UpdateAffinityRuleArg) ProtoMessage()    {}
func (*UpdateAffinityRuleArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{278}
}

func (m *UpdateAffinityRuleArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAffinityRuleArg.Unmarshal(m, b)
}
func (m *UpdateAffinityRuleArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAffinityRuleArg.Marshal(b, m, deterministic)
}
func (m *UpdateAffinityRuleArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAffinityRuleArg.Merge(m, src)
}
func (m *UpdateAffinityRuleArg) XXX_Size() int {
	return xxx_messageInfo_UpdateAffinityRuleArg.Size(m)
}
func (m *UpdateAffinityRuleArg) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAffinityRuleArg.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAffinityRuleArg proto.InternalMessageInfo

func (m *UpdateAffinityRuleArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *UpdateAffinityRuleArg) GetRuleList() []*UpdateAffinityRuleArg_CategoryAffinityRuleInfo {
	if m != nil {
		return m.RuleList
	}
	return nil
}

func (m *UpdateAffinityRuleArg) GetLegacyUpdateList() []*UpdateAffinityRuleArg_LegacyRuleUpdateInfo {
	if m != nil {
		return m.LegacyUpdateList
	}
	return nil
}

type UpdateAffinityRuleArg_CategoryAffinityRuleInfo struct {
	// Rule UUID.
	RuleUuid []byte `protobuf:"bytes,1,opt,name=rule_uuid,json=ruleUuid" json:"rule_uuid,omitempty"`
	// Host UUIDs associated with the rule.
	HostUuidList [][]byte `protobuf:"bytes,2,rep,name=host_uuid_list,json=hostUuidList" json:"host_uuid_list,omitempty"`
	// VM UUIDs associated with the rule.
	VmUuidList           [][]byte `protobuf:"bytes,3,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAffinityRuleArg_CategoryAffinityRuleInfo) Reset() {
	*m = UpdateAffinityRuleArg_CategoryAffinityRuleInfo{}
}
func (m *UpdateAffinityRuleArg_CategoryAffinityRuleInfo) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateAffinityRuleArg_CategoryAffinityRuleInfo) ProtoMessage() {}
func (*UpdateAffinityRuleArg_CategoryAffinityRuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{278, 0}
}

func (m *UpdateAffinityRuleArg_CategoryAffinityRuleInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAffinityRuleArg_CategoryAffinityRuleInfo.Unmarshal(m, b)
}
func (m *UpdateAffinityRuleArg_CategoryAffinityRuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAffinityRuleArg_CategoryAffinityRuleInfo.Marshal(b, m, deterministic)
}
func (m *UpdateAffinityRuleArg_CategoryAffinityRuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAffinityRuleArg_CategoryAffinityRuleInfo.Merge(m, src)
}
func (m *UpdateAffinityRuleArg_CategoryAffinityRuleInfo) XXX_Size() int {
	return xxx_messageInfo_UpdateAffinityRuleArg_CategoryAffinityRuleInfo.Size(m)
}
func (m *UpdateAffinityRuleArg_CategoryAffinityRuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAffinityRuleArg_CategoryAffinityRuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAffinityRuleArg_CategoryAffinityRuleInfo proto.InternalMessageInfo

func (m *UpdateAffinityRuleArg_CategoryAffinityRuleInfo) GetRuleUuid() []byte {
	if m != nil {
		return m.RuleUuid
	}
	return nil
}

func (m *UpdateAffinityRuleArg_CategoryAffinityRuleInfo) GetHostUuidList() [][]byte {
	if m != nil {
		return m.HostUuidList
	}
	return nil
}

func (m *UpdateAffinityRuleArg_CategoryAffinityRuleInfo) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

type UpdateAffinityRuleArg_LegacyRuleUpdateInfo struct {
	// VM UUID.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Legacy node affinities that need to go away.
	NodeUuidList         [][]byte `protobuf:"bytes,2,rep,name=node_uuid_list,json=nodeUuidList" json:"node_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAffinityRuleArg_LegacyRuleUpdateInfo) Reset() {
	*m = UpdateAffinityRuleArg_LegacyRuleUpdateInfo{}
}
func (m *UpdateAffinityRuleArg_LegacyRuleUpdateInfo) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateAffinityRuleArg_LegacyRuleUpdateInfo) ProtoMessage() {}
func (*UpdateAffinityRuleArg_LegacyRuleUpdateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{278, 1}
}

func (m *UpdateAffinityRuleArg_LegacyRuleUpdateInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAffinityRuleArg_LegacyRuleUpdateInfo.Unmarshal(m, b)
}
func (m *UpdateAffinityRuleArg_LegacyRuleUpdateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAffinityRuleArg_LegacyRuleUpdateInfo.Marshal(b, m, deterministic)
}
func (m *UpdateAffinityRuleArg_LegacyRuleUpdateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAffinityRuleArg_LegacyRuleUpdateInfo.Merge(m, src)
}
func (m *UpdateAffinityRuleArg_LegacyRuleUpdateInfo) XXX_Size() int {
	return xxx_messageInfo_UpdateAffinityRuleArg_LegacyRuleUpdateInfo.Size(m)
}
func (m *UpdateAffinityRuleArg_LegacyRuleUpdateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAffinityRuleArg_LegacyRuleUpdateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAffinityRuleArg_LegacyRuleUpdateInfo proto.InternalMessageInfo

func (m *UpdateAffinityRuleArg_LegacyRuleUpdateInfo) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *UpdateAffinityRuleArg_LegacyRuleUpdateInfo) GetNodeUuidList() [][]byte {
	if m != nil {
		return m.NodeUuidList
	}
	return nil
}

type UpdateAffinityRuleRet struct {
	// Task UUID.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAffinityRuleRet) Reset()         { *m = UpdateAffinityRuleRet{} }
func (m *UpdateAffinityRuleRet) String() string { return proto.CompactTextString(m) }
func (*UpdateAffinityRuleRet) ProtoMessage()    {}
func (*UpdateAffinityRuleRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{279}
}

func (m *UpdateAffinityRuleRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAffinityRuleRet.Unmarshal(m, b)
}
func (m *UpdateAffinityRuleRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAffinityRuleRet.Marshal(b, m, deterministic)
}
func (m *UpdateAffinityRuleRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAffinityRuleRet.Merge(m, src)
}
func (m *UpdateAffinityRuleRet) XXX_Size() int {
	return xxx_messageInfo_UpdateAffinityRuleRet.Size(m)
}
func (m *UpdateAffinityRuleRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAffinityRuleRet.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAffinityRuleRet proto.InternalMessageInfo

func (m *UpdateAffinityRuleRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type UpdateAffinityRuleTaskRet struct {
	RuleUpdateStatus     []*UpdateAffinityRuleTaskRet_RuleUpdateStatus `protobuf:"bytes,1,rep,name=rule_update_status,json=ruleUpdateStatus" json:"rule_update_status,omitempty"`
	VmUpdateStatus       []*UpdateAffinityRuleTaskRet_VmUpdateStatus   `protobuf:"bytes,2,rep,name=vm_update_status,json=vmUpdateStatus" json:"vm_update_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *UpdateAffinityRuleTaskRet) Reset()         { *m = UpdateAffinityRuleTaskRet{} }
func (m *UpdateAffinityRuleTaskRet) String() string { return proto.CompactTextString(m) }
func (*UpdateAffinityRuleTaskRet) ProtoMessage()    {}
func (*UpdateAffinityRuleTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{280}
}

func (m *UpdateAffinityRuleTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAffinityRuleTaskRet.Unmarshal(m, b)
}
func (m *UpdateAffinityRuleTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAffinityRuleTaskRet.Marshal(b, m, deterministic)
}
func (m *UpdateAffinityRuleTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAffinityRuleTaskRet.Merge(m, src)
}
func (m *UpdateAffinityRuleTaskRet) XXX_Size() int {
	return xxx_messageInfo_UpdateAffinityRuleTaskRet.Size(m)
}
func (m *UpdateAffinityRuleTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAffinityRuleTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAffinityRuleTaskRet proto.InternalMessageInfo

func (m *UpdateAffinityRuleTaskRet) GetRuleUpdateStatus() []*UpdateAffinityRuleTaskRet_RuleUpdateStatus {
	if m != nil {
		return m.RuleUpdateStatus
	}
	return nil
}

func (m *UpdateAffinityRuleTaskRet) GetVmUpdateStatus() []*UpdateAffinityRuleTaskRet_VmUpdateStatus {
	if m != nil {
		return m.VmUpdateStatus
	}
	return nil
}

type UpdateAffinityRuleTaskRet_RuleUpdateStatus struct {
	RuleUuid             []byte                                  `protobuf:"bytes,1,opt,name=rule_uuid,json=ruleUuid" json:"rule_uuid,omitempty"`
	Status               *UpdateAffinityRuleTaskRet_UpdateStatus `protobuf:"varint,2,opt,name=status,enum=nutanix.acropolis.UpdateAffinityRuleTaskRet_UpdateStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *UpdateAffinityRuleTaskRet_RuleUpdateStatus) Reset() {
	*m = UpdateAffinityRuleTaskRet_RuleUpdateStatus{}
}
func (m *UpdateAffinityRuleTaskRet_RuleUpdateStatus) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateAffinityRuleTaskRet_RuleUpdateStatus) ProtoMessage() {}
func (*UpdateAffinityRuleTaskRet_RuleUpdateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{280, 0}
}

func (m *UpdateAffinityRuleTaskRet_RuleUpdateStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAffinityRuleTaskRet_RuleUpdateStatus.Unmarshal(m, b)
}
func (m *UpdateAffinityRuleTaskRet_RuleUpdateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAffinityRuleTaskRet_RuleUpdateStatus.Marshal(b, m, deterministic)
}
func (m *UpdateAffinityRuleTaskRet_RuleUpdateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAffinityRuleTaskRet_RuleUpdateStatus.Merge(m, src)
}
func (m *UpdateAffinityRuleTaskRet_RuleUpdateStatus) XXX_Size() int {
	return xxx_messageInfo_UpdateAffinityRuleTaskRet_RuleUpdateStatus.Size(m)
}
func (m *UpdateAffinityRuleTaskRet_RuleUpdateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAffinityRuleTaskRet_RuleUpdateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAffinityRuleTaskRet_RuleUpdateStatus proto.InternalMessageInfo

func (m *UpdateAffinityRuleTaskRet_RuleUpdateStatus) GetRuleUuid() []byte {
	if m != nil {
		return m.RuleUuid
	}
	return nil
}

func (m *UpdateAffinityRuleTaskRet_RuleUpdateStatus) GetStatus() UpdateAffinityRuleTaskRet_UpdateStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UpdateAffinityRuleTaskRet_kUpdateOk
}

type UpdateAffinityRuleTaskRet_VmUpdateStatus struct {
	VmUuid               []byte                                  `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	Status               *UpdateAffinityRuleTaskRet_UpdateStatus `protobuf:"varint,2,opt,name=status,enum=nutanix.acropolis.UpdateAffinityRuleTaskRet_UpdateStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *UpdateAffinityRuleTaskRet_VmUpdateStatus) Reset() {
	*m = UpdateAffinityRuleTaskRet_VmUpdateStatus{}
}
func (m *UpdateAffinityRuleTaskRet_VmUpdateStatus) String() string { return proto.CompactTextString(m) }
func (*UpdateAffinityRuleTaskRet_VmUpdateStatus) ProtoMessage()    {}
func (*UpdateAffinityRuleTaskRet_VmUpdateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{280, 1}
}

func (m *UpdateAffinityRuleTaskRet_VmUpdateStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAffinityRuleTaskRet_VmUpdateStatus.Unmarshal(m, b)
}
func (m *UpdateAffinityRuleTaskRet_VmUpdateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAffinityRuleTaskRet_VmUpdateStatus.Marshal(b, m, deterministic)
}
func (m *UpdateAffinityRuleTaskRet_VmUpdateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAffinityRuleTaskRet_VmUpdateStatus.Merge(m, src)
}
func (m *UpdateAffinityRuleTaskRet_VmUpdateStatus) XXX_Size() int {
	return xxx_messageInfo_UpdateAffinityRuleTaskRet_VmUpdateStatus.Size(m)
}
func (m *UpdateAffinityRuleTaskRet_VmUpdateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAffinityRuleTaskRet_VmUpdateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAffinityRuleTaskRet_VmUpdateStatus proto.InternalMessageInfo

func (m *UpdateAffinityRuleTaskRet_VmUpdateStatus) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *UpdateAffinityRuleTaskRet_VmUpdateStatus) GetStatus() UpdateAffinityRuleTaskRet_UpdateStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return UpdateAffinityRuleTaskRet_kUpdateOk
}

type ParcelsCreateArg struct {
	// A list of parcel spec.
	SpecList   []*ParcelCreateSpec          `protobuf:"bytes,1,rep,name=spec_list,json=specList" json:"spec_list,omitempty"`
	Preference *ParcelsCreateArg_Preference `protobuf:"varint,2,opt,name=preference,enum=nutanix.acropolis.ParcelsCreateArg_Preference" json:"preference,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Check if parcels can be allocated without actually changing any resource
	// reservations.
	DryRun *bool `protobuf:"varint,6,opt,name=dry_run,json=dryRun,def=0" json:"dry_run,omitempty"`
	// Whether this is an internal task and is not meant to be displayed in UI.
	InternalTask *bool `protobuf:"varint,7,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures *bool `protobuf:"varint,8,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	// UUID of the task that owns the parcel.
	OwnerTaskUuid        []byte   `protobuf:"bytes,9,opt,name=owner_task_uuid,json=ownerTaskUuid" json:"owner_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParcelsCreateArg) Reset()         { *m = ParcelsCreateArg{} }
func (m *ParcelsCreateArg) String() string { return proto.CompactTextString(m) }
func (*ParcelsCreateArg) ProtoMessage()    {}
func (*ParcelsCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{281}
}

func (m *ParcelsCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParcelsCreateArg.Unmarshal(m, b)
}
func (m *ParcelsCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParcelsCreateArg.Marshal(b, m, deterministic)
}
func (m *ParcelsCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParcelsCreateArg.Merge(m, src)
}
func (m *ParcelsCreateArg) XXX_Size() int {
	return xxx_messageInfo_ParcelsCreateArg.Size(m)
}
func (m *ParcelsCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ParcelsCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_ParcelsCreateArg proto.InternalMessageInfo

const Default_ParcelsCreateArg_DryRun bool = false

func (m *ParcelsCreateArg) GetSpecList() []*ParcelCreateSpec {
	if m != nil {
		return m.SpecList
	}
	return nil
}

func (m *ParcelsCreateArg) GetPreference() ParcelsCreateArg_Preference {
	if m != nil && m.Preference != nil {
		return *m.Preference
	}
	return ParcelsCreateArg_kAll
}

func (m *ParcelsCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *ParcelsCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *ParcelsCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *ParcelsCreateArg) GetDryRun() bool {
	if m != nil && m.DryRun != nil {
		return *m.DryRun
	}
	return Default_ParcelsCreateArg_DryRun
}

func (m *ParcelsCreateArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *ParcelsCreateArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

func (m *ParcelsCreateArg) GetOwnerTaskUuid() []byte {
	if m != nil {
		return m.OwnerTaskUuid
	}
	return nil
}

type ParcelsCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// ParcelsCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParcelsCreateRet) Reset()         { *m = ParcelsCreateRet{} }
func (m *ParcelsCreateRet) String() string { return proto.CompactTextString(m) }
func (*ParcelsCreateRet) ProtoMessage()    {}
func (*ParcelsCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{282}
}

func (m *ParcelsCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParcelsCreateRet.Unmarshal(m, b)
}
func (m *ParcelsCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParcelsCreateRet.Marshal(b, m, deterministic)
}
func (m *ParcelsCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParcelsCreateRet.Merge(m, src)
}
func (m *ParcelsCreateRet) XXX_Size() int {
	return xxx_messageInfo_ParcelsCreateRet.Size(m)
}
func (m *ParcelsCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ParcelsCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_ParcelsCreateRet proto.InternalMessageInfo

func (m *ParcelsCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type ParcelsCreateTaskRet struct {
	// List of responses corresponding to each parcel request.
	ResponseList []*MetaResponse `protobuf:"bytes,1,rep,name=response_list,json=responseList" json:"response_list,omitempty"`
	// List of parcels that are successfully created. None if corresponding
	// parcel is not created.
	ParcelUuidList       [][]byte `protobuf:"bytes,2,rep,name=parcel_uuid_list,json=parcelUuidList" json:"parcel_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParcelsCreateTaskRet) Reset()         { *m = ParcelsCreateTaskRet{} }
func (m *ParcelsCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*ParcelsCreateTaskRet) ProtoMessage()    {}
func (*ParcelsCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{283}
}

func (m *ParcelsCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParcelsCreateTaskRet.Unmarshal(m, b)
}
func (m *ParcelsCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParcelsCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *ParcelsCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParcelsCreateTaskRet.Merge(m, src)
}
func (m *ParcelsCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_ParcelsCreateTaskRet.Size(m)
}
func (m *ParcelsCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ParcelsCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_ParcelsCreateTaskRet proto.InternalMessageInfo

func (m *ParcelsCreateTaskRet) GetResponseList() []*MetaResponse {
	if m != nil {
		return m.ResponseList
	}
	return nil
}

func (m *ParcelsCreateTaskRet) GetParcelUuidList() [][]byte {
	if m != nil {
		return m.ParcelUuidList
	}
	return nil
}

type ParcelGetArg struct {
	// List of Parcel UUIDs. If none is specified, then return info for all
	// Parcels.
	ParcelUuidList       [][]byte `protobuf:"bytes,1,rep,name=parcel_uuid_list,json=parcelUuidList" json:"parcel_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParcelGetArg) Reset()         { *m = ParcelGetArg{} }
func (m *ParcelGetArg) String() string { return proto.CompactTextString(m) }
func (*ParcelGetArg) ProtoMessage()    {}
func (*ParcelGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{284}
}

func (m *ParcelGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParcelGetArg.Unmarshal(m, b)
}
func (m *ParcelGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParcelGetArg.Marshal(b, m, deterministic)
}
func (m *ParcelGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParcelGetArg.Merge(m, src)
}
func (m *ParcelGetArg) XXX_Size() int {
	return xxx_messageInfo_ParcelGetArg.Size(m)
}
func (m *ParcelGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ParcelGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_ParcelGetArg proto.InternalMessageInfo

func (m *ParcelGetArg) GetParcelUuidList() [][]byte {
	if m != nil {
		return m.ParcelUuidList
	}
	return nil
}

type ParcelGetRet struct {
	// A list of Parcel infos.
	ParcelInfoList       []*ParcelInfo `protobuf:"bytes,1,rep,name=parcel_info_list,json=parcelInfoList" json:"parcel_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ParcelGetRet) Reset()         { *m = ParcelGetRet{} }
func (m *ParcelGetRet) String() string { return proto.CompactTextString(m) }
func (*ParcelGetRet) ProtoMessage()    {}
func (*ParcelGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{285}
}

func (m *ParcelGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParcelGetRet.Unmarshal(m, b)
}
func (m *ParcelGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParcelGetRet.Marshal(b, m, deterministic)
}
func (m *ParcelGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParcelGetRet.Merge(m, src)
}
func (m *ParcelGetRet) XXX_Size() int {
	return xxx_messageInfo_ParcelGetRet.Size(m)
}
func (m *ParcelGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ParcelGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_ParcelGetRet proto.InternalMessageInfo

func (m *ParcelGetRet) GetParcelInfoList() []*ParcelInfo {
	if m != nil {
		return m.ParcelInfoList
	}
	return nil
}

type LazanParcelUpdateArg struct {
	// Entity UUID.
	EntityUuid []byte `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid" json:"entity_uuid,omitempty"`
	// Number of vCPUs (sockets).
	NumCpus *uint64 `protobuf:"varint,2,opt,name=num_cpus,json=numCpus" json:"num_cpus,omitempty"`
	// The amount of RAM, in bytes.
	MemoryBytes *uint64 `protobuf:"varint,3,opt,name=memory_bytes,json=memoryBytes" json:"memory_bytes,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,7,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether this is an internal task and is not meant to be displayed in UI.
	InternalTask *bool `protobuf:"varint,8,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures *bool `protobuf:"varint,9,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	// Whether the Entity is HA-protected.
	HaProtected *bool `protobuf:"varint,10,opt,name=ha_protected,json=haProtected" json:"ha_protected,omitempty"`
	// New VM group UUID.
	VmGroupUuid []byte `protobuf:"bytes,11,opt,name=vm_group_uuid,json=vmGroupUuid" json:"vm_group_uuid,omitempty"`
	// Whether to clear the parcels' VM group UUID field.
	ClearVmGroup *bool `protobuf:"varint,12,opt,name=clear_vm_group,json=clearVmGroup" json:"clear_vm_group,omitempty"`
	// Whether cross cluster live migration of this entity to another cluster is
	// in progress.
	CrossClusterLiveMigrateInProgress *bool `protobuf:"varint,13,opt,name=cross_cluster_live_migrate_in_progress,json=crossClusterLiveMigrateInProgress" json:"cross_cluster_live_migrate_in_progress,omitempty"`
	// Number of vNICs.
	NumVnics *uint64 `protobuf:"varint,14,opt,name=num_vnics,json=numVnics" json:"num_vnics,omitempty"`
	// UUID of the task that owns the parcel for this vm.
	OwnerTaskUuid        []byte   `protobuf:"bytes,15,opt,name=owner_task_uuid,json=ownerTaskUuid" json:"owner_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanParcelUpdateArg) Reset()         { *m = LazanParcelUpdateArg{} }
func (m *LazanParcelUpdateArg) String() string { return proto.CompactTextString(m) }
func (*LazanParcelUpdateArg) ProtoMessage()    {}
func (*LazanParcelUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{286}
}

func (m *LazanParcelUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanParcelUpdateArg.Unmarshal(m, b)
}
func (m *LazanParcelUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanParcelUpdateArg.Marshal(b, m, deterministic)
}
func (m *LazanParcelUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanParcelUpdateArg.Merge(m, src)
}
func (m *LazanParcelUpdateArg) XXX_Size() int {
	return xxx_messageInfo_LazanParcelUpdateArg.Size(m)
}
func (m *LazanParcelUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanParcelUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanParcelUpdateArg proto.InternalMessageInfo

func (m *LazanParcelUpdateArg) GetEntityUuid() []byte {
	if m != nil {
		return m.EntityUuid
	}
	return nil
}

func (m *LazanParcelUpdateArg) GetNumCpus() uint64 {
	if m != nil && m.NumCpus != nil {
		return *m.NumCpus
	}
	return 0
}

func (m *LazanParcelUpdateArg) GetMemoryBytes() uint64 {
	if m != nil && m.MemoryBytes != nil {
		return *m.MemoryBytes
	}
	return 0
}

func (m *LazanParcelUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *LazanParcelUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *LazanParcelUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *LazanParcelUpdateArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *LazanParcelUpdateArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

func (m *LazanParcelUpdateArg) GetHaProtected() bool {
	if m != nil && m.HaProtected != nil {
		return *m.HaProtected
	}
	return false
}

func (m *LazanParcelUpdateArg) GetVmGroupUuid() []byte {
	if m != nil {
		return m.VmGroupUuid
	}
	return nil
}

func (m *LazanParcelUpdateArg) GetClearVmGroup() bool {
	if m != nil && m.ClearVmGroup != nil {
		return *m.ClearVmGroup
	}
	return false
}

func (m *LazanParcelUpdateArg) GetCrossClusterLiveMigrateInProgress() bool {
	if m != nil && m.CrossClusterLiveMigrateInProgress != nil {
		return *m.CrossClusterLiveMigrateInProgress
	}
	return false
}

func (m *LazanParcelUpdateArg) GetNumVnics() uint64 {
	if m != nil && m.NumVnics != nil {
		return *m.NumVnics
	}
	return 0
}

func (m *LazanParcelUpdateArg) GetOwnerTaskUuid() []byte {
	if m != nil {
		return m.OwnerTaskUuid
	}
	return nil
}

type LazanParcelUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// LazanParcelUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanParcelUpdateRet) Reset()         { *m = LazanParcelUpdateRet{} }
func (m *LazanParcelUpdateRet) String() string { return proto.CompactTextString(m) }
func (*LazanParcelUpdateRet) ProtoMessage()    {}
func (*LazanParcelUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{287}
}

func (m *LazanParcelUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanParcelUpdateRet.Unmarshal(m, b)
}
func (m *LazanParcelUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanParcelUpdateRet.Marshal(b, m, deterministic)
}
func (m *LazanParcelUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanParcelUpdateRet.Merge(m, src)
}
func (m *LazanParcelUpdateRet) XXX_Size() int {
	return xxx_messageInfo_LazanParcelUpdateRet.Size(m)
}
func (m *LazanParcelUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanParcelUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanParcelUpdateRet proto.InternalMessageInfo

func (m *LazanParcelUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type LazanParcelUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanParcelUpdateTaskRet) Reset()         { *m = LazanParcelUpdateTaskRet{} }
func (m *LazanParcelUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*LazanParcelUpdateTaskRet) ProtoMessage()    {}
func (*LazanParcelUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{288}
}

func (m *LazanParcelUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanParcelUpdateTaskRet.Unmarshal(m, b)
}
func (m *LazanParcelUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanParcelUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *LazanParcelUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanParcelUpdateTaskRet.Merge(m, src)
}
func (m *LazanParcelUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_LazanParcelUpdateTaskRet.Size(m)
}
func (m *LazanParcelUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanParcelUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanParcelUpdateTaskRet proto.InternalMessageInfo

type ParcelDeleteArg struct {
	// The Parcel identifier.
	ParcelUuid []byte `protobuf:"bytes,1,opt,name=parcel_uuid,json=parcelUuid" json:"parcel_uuid,omitempty"`
	// Entity UUID.
	EntityUuid []byte `protobuf:"bytes,2,opt,name=entity_uuid,json=entityUuid" json:"entity_uuid,omitempty"`
	// The Parcel logical timestamp, optional for consistency.
	ParcelLogicalTimestamp *int64 `protobuf:"varint,3,opt,name=parcel_logical_timestamp,json=parcelLogicalTimestamp,def=-1" json:"parcel_logical_timestamp,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether this is an internal task and is not meant to be displayed in UI.
	InternalTask *bool `protobuf:"varint,7,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures *bool `protobuf:"varint,8,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	// Logical timestamp for the segment assignment at task creation.
	SegmentsTimestamp *int64 `protobuf:"varint,9,opt,name=segments_timestamp,json=segmentsTimestamp" json:"segments_timestamp,omitempty"`
	// UUID of the node that is in the process of failover or entering
	// maintenance mode.
	FailedNodeUuid []byte `protobuf:"bytes,10,opt,name=failed_node_uuid,json=failedNodeUuid" json:"failed_node_uuid,omitempty"`
	// Multiplication factor for mem_assigned_bytes that needs to be added to the
	// destination of VM's assignment.
	AddedMabFactor *AssignedMemoryUpdateType `protobuf:"varint,11,opt,name=added_mab_factor,json=addedMabFactor,enum=nutanix.acropolis.AssignedMemoryUpdateType" json:"added_mab_factor,omitempty"`
	// Whether the VM's assignment needs to be deleted.
	CanDeleteSegment     *bool    `protobuf:"varint,12,opt,name=can_delete_segment,json=canDeleteSegment" json:"can_delete_segment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParcelDeleteArg) Reset()         { *m = ParcelDeleteArg{} }
func (m *ParcelDeleteArg) String() string { return proto.CompactTextString(m) }
func (*ParcelDeleteArg) ProtoMessage()    {}
func (*ParcelDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{289}
}

func (m *ParcelDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParcelDeleteArg.Unmarshal(m, b)
}
func (m *ParcelDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParcelDeleteArg.Marshal(b, m, deterministic)
}
func (m *ParcelDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParcelDeleteArg.Merge(m, src)
}
func (m *ParcelDeleteArg) XXX_Size() int {
	return xxx_messageInfo_ParcelDeleteArg.Size(m)
}
func (m *ParcelDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ParcelDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_ParcelDeleteArg proto.InternalMessageInfo

const Default_ParcelDeleteArg_ParcelLogicalTimestamp int64 = -1

func (m *ParcelDeleteArg) GetParcelUuid() []byte {
	if m != nil {
		return m.ParcelUuid
	}
	return nil
}

func (m *ParcelDeleteArg) GetEntityUuid() []byte {
	if m != nil {
		return m.EntityUuid
	}
	return nil
}

func (m *ParcelDeleteArg) GetParcelLogicalTimestamp() int64 {
	if m != nil && m.ParcelLogicalTimestamp != nil {
		return *m.ParcelLogicalTimestamp
	}
	return Default_ParcelDeleteArg_ParcelLogicalTimestamp
}

func (m *ParcelDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *ParcelDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *ParcelDeleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *ParcelDeleteArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *ParcelDeleteArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

func (m *ParcelDeleteArg) GetSegmentsTimestamp() int64 {
	if m != nil && m.SegmentsTimestamp != nil {
		return *m.SegmentsTimestamp
	}
	return 0
}

func (m *ParcelDeleteArg) GetFailedNodeUuid() []byte {
	if m != nil {
		return m.FailedNodeUuid
	}
	return nil
}

func (m *ParcelDeleteArg) GetAddedMabFactor() AssignedMemoryUpdateType {
	if m != nil && m.AddedMabFactor != nil {
		return *m.AddedMabFactor
	}
	return AssignedMemoryUpdateType_kNoChange
}

func (m *ParcelDeleteArg) GetCanDeleteSegment() bool {
	if m != nil && m.CanDeleteSegment != nil {
		return *m.CanDeleteSegment
	}
	return false
}

type ParcelDeleteRet struct {
	// A task to poll for completion (if the caller cares). On success, the task
	// will contain a ParcelDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParcelDeleteRet) Reset()         { *m = ParcelDeleteRet{} }
func (m *ParcelDeleteRet) String() string { return proto.CompactTextString(m) }
func (*ParcelDeleteRet) ProtoMessage()    {}
func (*ParcelDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{290}
}

func (m *ParcelDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParcelDeleteRet.Unmarshal(m, b)
}
func (m *ParcelDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParcelDeleteRet.Marshal(b, m, deterministic)
}
func (m *ParcelDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParcelDeleteRet.Merge(m, src)
}
func (m *ParcelDeleteRet) XXX_Size() int {
	return xxx_messageInfo_ParcelDeleteRet.Size(m)
}
func (m *ParcelDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ParcelDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_ParcelDeleteRet proto.InternalMessageInfo

func (m *ParcelDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type ParcelDeleteTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParcelDeleteTaskRet) Reset()         { *m = ParcelDeleteTaskRet{} }
func (m *ParcelDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*ParcelDeleteTaskRet) ProtoMessage()    {}
func (*ParcelDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{291}
}

func (m *ParcelDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParcelDeleteTaskRet.Unmarshal(m, b)
}
func (m *ParcelDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParcelDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *ParcelDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParcelDeleteTaskRet.Merge(m, src)
}
func (m *ParcelDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_ParcelDeleteTaskRet.Size(m)
}
func (m *ParcelDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ParcelDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_ParcelDeleteTaskRet proto.InternalMessageInfo

type LazanGetVMsOnHostArg struct {
	// Host UUID.
	HostUuid []byte `protobuf:"bytes,1,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// Include VMs that are assigned to failover to given host.
	IncludeFailover *bool `protobuf:"varint,2,opt,name=include_failover,json=includeFailover" json:"include_failover,omitempty"`
	// Whether to wait for the node to become unschedulable before gathering all
	// VMs on the node.
	WaitUnschedulable *bool `protobuf:"varint,3,opt,name=wait_unschedulable,json=waitUnschedulable" json:"wait_unschedulable,omitempty"`
	// Whether to exclude VMs with cross cluster live migration in progress.
	ExcludeCrossClusterLiveMigrateVmsInProgress *bool    `protobuf:"varint,4,opt,name=exclude_cross_cluster_live_migrate_vms_in_progress,json=excludeCrossClusterLiveMigrateVmsInProgress" json:"exclude_cross_cluster_live_migrate_vms_in_progress,omitempty"`
	XXX_NoUnkeyedLiteral                        struct{} `json:"-"`
	XXX_unrecognized                            []byte   `json:"-"`
	XXX_sizecache                               int32    `json:"-"`
}

func (m *LazanGetVMsOnHostArg) Reset()         { *m = LazanGetVMsOnHostArg{} }
func (m *LazanGetVMsOnHostArg) String() string { return proto.CompactTextString(m) }
func (*LazanGetVMsOnHostArg) ProtoMessage()    {}
func (*LazanGetVMsOnHostArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{292}
}

func (m *LazanGetVMsOnHostArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetVMsOnHostArg.Unmarshal(m, b)
}
func (m *LazanGetVMsOnHostArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetVMsOnHostArg.Marshal(b, m, deterministic)
}
func (m *LazanGetVMsOnHostArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetVMsOnHostArg.Merge(m, src)
}
func (m *LazanGetVMsOnHostArg) XXX_Size() int {
	return xxx_messageInfo_LazanGetVMsOnHostArg.Size(m)
}
func (m *LazanGetVMsOnHostArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetVMsOnHostArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetVMsOnHostArg proto.InternalMessageInfo

func (m *LazanGetVMsOnHostArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *LazanGetVMsOnHostArg) GetIncludeFailover() bool {
	if m != nil && m.IncludeFailover != nil {
		return *m.IncludeFailover
	}
	return false
}

func (m *LazanGetVMsOnHostArg) GetWaitUnschedulable() bool {
	if m != nil && m.WaitUnschedulable != nil {
		return *m.WaitUnschedulable
	}
	return false
}

func (m *LazanGetVMsOnHostArg) GetExcludeCrossClusterLiveMigrateVmsInProgress() bool {
	if m != nil && m.ExcludeCrossClusterLiveMigrateVmsInProgress != nil {
		return *m.ExcludeCrossClusterLiveMigrateVmsInProgress
	}
	return false
}

type LazanGetVMsOnHostRet struct {
	// A list of VM UUIDs.
	VmUuidList           [][]byte `protobuf:"bytes,1,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetVMsOnHostRet) Reset()         { *m = LazanGetVMsOnHostRet{} }
func (m *LazanGetVMsOnHostRet) String() string { return proto.CompactTextString(m) }
func (*LazanGetVMsOnHostRet) ProtoMessage()    {}
func (*LazanGetVMsOnHostRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{293}
}

func (m *LazanGetVMsOnHostRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetVMsOnHostRet.Unmarshal(m, b)
}
func (m *LazanGetVMsOnHostRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetVMsOnHostRet.Marshal(b, m, deterministic)
}
func (m *LazanGetVMsOnHostRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetVMsOnHostRet.Merge(m, src)
}
func (m *LazanGetVMsOnHostRet) XXX_Size() int {
	return xxx_messageInfo_LazanGetVMsOnHostRet.Size(m)
}
func (m *LazanGetVMsOnHostRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetVMsOnHostRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetVMsOnHostRet proto.InternalMessageInfo

func (m *LazanGetVMsOnHostRet) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

type LazanSetHostFailuresArg struct {
	// Number of host failures to tolerate.
	NumHostFailures *uint64 `protobuf:"varint,1,opt,name=num_host_failures,json=numHostFailures" json:"num_host_failures,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether this is an internal task and is not meant to be displayed in UI.
	InternalTask *bool `protobuf:"varint,5,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures      *bool    `protobuf:"varint,6,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanSetHostFailuresArg) Reset()         { *m = LazanSetHostFailuresArg{} }
func (m *LazanSetHostFailuresArg) String() string { return proto.CompactTextString(m) }
func (*LazanSetHostFailuresArg) ProtoMessage()    {}
func (*LazanSetHostFailuresArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{294}
}

func (m *LazanSetHostFailuresArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanSetHostFailuresArg.Unmarshal(m, b)
}
func (m *LazanSetHostFailuresArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanSetHostFailuresArg.Marshal(b, m, deterministic)
}
func (m *LazanSetHostFailuresArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanSetHostFailuresArg.Merge(m, src)
}
func (m *LazanSetHostFailuresArg) XXX_Size() int {
	return xxx_messageInfo_LazanSetHostFailuresArg.Size(m)
}
func (m *LazanSetHostFailuresArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanSetHostFailuresArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanSetHostFailuresArg proto.InternalMessageInfo

func (m *LazanSetHostFailuresArg) GetNumHostFailures() uint64 {
	if m != nil && m.NumHostFailures != nil {
		return *m.NumHostFailures
	}
	return 0
}

func (m *LazanSetHostFailuresArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *LazanSetHostFailuresArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *LazanSetHostFailuresArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *LazanSetHostFailuresArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *LazanSetHostFailuresArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

type LazanSetHostFailuresRet struct {
	// A task to poll for completion. On success, the task will contain a
	// LazanSetHostFailuresTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanSetHostFailuresRet) Reset()         { *m = LazanSetHostFailuresRet{} }
func (m *LazanSetHostFailuresRet) String() string { return proto.CompactTextString(m) }
func (*LazanSetHostFailuresRet) ProtoMessage()    {}
func (*LazanSetHostFailuresRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{295}
}

func (m *LazanSetHostFailuresRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanSetHostFailuresRet.Unmarshal(m, b)
}
func (m *LazanSetHostFailuresRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanSetHostFailuresRet.Marshal(b, m, deterministic)
}
func (m *LazanSetHostFailuresRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanSetHostFailuresRet.Merge(m, src)
}
func (m *LazanSetHostFailuresRet) XXX_Size() int {
	return xxx_messageInfo_LazanSetHostFailuresRet.Size(m)
}
func (m *LazanSetHostFailuresRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanSetHostFailuresRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanSetHostFailuresRet proto.InternalMessageInfo

func (m *LazanSetHostFailuresRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type LazanSetHostFailuresTaskRet struct {
	// If the cluster can tolerate the specified number of host failures.
	CanTolerateHostFailures *bool    `protobuf:"varint,1,opt,name=can_tolerate_host_failures,json=canTolerateHostFailures" json:"can_tolerate_host_failures,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *LazanSetHostFailuresTaskRet) Reset()         { *m = LazanSetHostFailuresTaskRet{} }
func (m *LazanSetHostFailuresTaskRet) String() string { return proto.CompactTextString(m) }
func (*LazanSetHostFailuresTaskRet) ProtoMessage()    {}
func (*LazanSetHostFailuresTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{296}
}

func (m *LazanSetHostFailuresTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanSetHostFailuresTaskRet.Unmarshal(m, b)
}
func (m *LazanSetHostFailuresTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanSetHostFailuresTaskRet.Marshal(b, m, deterministic)
}
func (m *LazanSetHostFailuresTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanSetHostFailuresTaskRet.Merge(m, src)
}
func (m *LazanSetHostFailuresTaskRet) XXX_Size() int {
	return xxx_messageInfo_LazanSetHostFailuresTaskRet.Size(m)
}
func (m *LazanSetHostFailuresTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanSetHostFailuresTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanSetHostFailuresTaskRet proto.InternalMessageInfo

func (m *LazanSetHostFailuresTaskRet) GetCanTolerateHostFailures() bool {
	if m != nil && m.CanTolerateHostFailures != nil {
		return *m.CanTolerateHostFailures
	}
	return false
}

type LazanNotifyFailoverCompleteArg struct {
	// UUID of the node that is done with failover.
	NodeUuid []byte `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	// If not specified, all entities on the node are marked to be done
	// with segments.
	ListEntityUuids [][]byte `protobuf:"bytes,2,rep,name=list_entity_uuids,json=listEntityUuids" json:"list_entity_uuids,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether this is an internal task and is not meant to be displayed in UI.
	InternalTask *bool `protobuf:"varint,6,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures      *bool    `protobuf:"varint,7,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanNotifyFailoverCompleteArg) Reset()         { *m = LazanNotifyFailoverCompleteArg{} }
func (m *LazanNotifyFailoverCompleteArg) String() string { return proto.CompactTextString(m) }
func (*LazanNotifyFailoverCompleteArg) ProtoMessage()    {}
func (*LazanNotifyFailoverCompleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{297}
}

func (m *LazanNotifyFailoverCompleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanNotifyFailoverCompleteArg.Unmarshal(m, b)
}
func (m *LazanNotifyFailoverCompleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanNotifyFailoverCompleteArg.Marshal(b, m, deterministic)
}
func (m *LazanNotifyFailoverCompleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanNotifyFailoverCompleteArg.Merge(m, src)
}
func (m *LazanNotifyFailoverCompleteArg) XXX_Size() int {
	return xxx_messageInfo_LazanNotifyFailoverCompleteArg.Size(m)
}
func (m *LazanNotifyFailoverCompleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanNotifyFailoverCompleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanNotifyFailoverCompleteArg proto.InternalMessageInfo

func (m *LazanNotifyFailoverCompleteArg) GetNodeUuid() []byte {
	if m != nil {
		return m.NodeUuid
	}
	return nil
}

func (m *LazanNotifyFailoverCompleteArg) GetListEntityUuids() [][]byte {
	if m != nil {
		return m.ListEntityUuids
	}
	return nil
}

func (m *LazanNotifyFailoverCompleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *LazanNotifyFailoverCompleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *LazanNotifyFailoverCompleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *LazanNotifyFailoverCompleteArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *LazanNotifyFailoverCompleteArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

type LazanNotifyFailoverCompleteRet struct {
	// A task to poll for completion. On success, the task will contain a
	// LazanNotifyFailoverCompleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanNotifyFailoverCompleteRet) Reset()         { *m = LazanNotifyFailoverCompleteRet{} }
func (m *LazanNotifyFailoverCompleteRet) String() string { return proto.CompactTextString(m) }
func (*LazanNotifyFailoverCompleteRet) ProtoMessage()    {}
func (*LazanNotifyFailoverCompleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{298}
}

func (m *LazanNotifyFailoverCompleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanNotifyFailoverCompleteRet.Unmarshal(m, b)
}
func (m *LazanNotifyFailoverCompleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanNotifyFailoverCompleteRet.Marshal(b, m, deterministic)
}
func (m *LazanNotifyFailoverCompleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanNotifyFailoverCompleteRet.Merge(m, src)
}
func (m *LazanNotifyFailoverCompleteRet) XXX_Size() int {
	return xxx_messageInfo_LazanNotifyFailoverCompleteRet.Size(m)
}
func (m *LazanNotifyFailoverCompleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanNotifyFailoverCompleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanNotifyFailoverCompleteRet proto.InternalMessageInfo

func (m *LazanNotifyFailoverCompleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type LazanNotifyFailoverCompleteTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanNotifyFailoverCompleteTaskRet) Reset()         { *m = LazanNotifyFailoverCompleteTaskRet{} }
func (m *LazanNotifyFailoverCompleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*LazanNotifyFailoverCompleteTaskRet) ProtoMessage()    {}
func (*LazanNotifyFailoverCompleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{299}
}

func (m *LazanNotifyFailoverCompleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanNotifyFailoverCompleteTaskRet.Unmarshal(m, b)
}
func (m *LazanNotifyFailoverCompleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanNotifyFailoverCompleteTaskRet.Marshal(b, m, deterministic)
}
func (m *LazanNotifyFailoverCompleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanNotifyFailoverCompleteTaskRet.Merge(m, src)
}
func (m *LazanNotifyFailoverCompleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_LazanNotifyFailoverCompleteTaskRet.Size(m)
}
func (m *LazanNotifyFailoverCompleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanNotifyFailoverCompleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanNotifyFailoverCompleteTaskRet proto.InternalMessageInfo

type LazanAssignSegmentsArg struct {
	// UUID of the failed node whose parcels need to be moved.
	NodeUuid []byte `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	// Task that owns the segment assignments.
	OwnerTaskUuid []byte `protobuf:"bytes,2,opt,name=owner_task_uuid,json=ownerTaskUuid" json:"owner_task_uuid,omitempty"`
	// Segments are requested for HA failover.
	Failover *bool `protobuf:"varint,3,opt,name=failover" json:"failover,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether this is an internal task and is not meant to be displayed in UI.
	InternalTask *bool `protobuf:"varint,7,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures      *bool    `protobuf:"varint,8,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanAssignSegmentsArg) Reset()         { *m = LazanAssignSegmentsArg{} }
func (m *LazanAssignSegmentsArg) String() string { return proto.CompactTextString(m) }
func (*LazanAssignSegmentsArg) ProtoMessage()    {}
func (*LazanAssignSegmentsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{300}
}

func (m *LazanAssignSegmentsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanAssignSegmentsArg.Unmarshal(m, b)
}
func (m *LazanAssignSegmentsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanAssignSegmentsArg.Marshal(b, m, deterministic)
}
func (m *LazanAssignSegmentsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanAssignSegmentsArg.Merge(m, src)
}
func (m *LazanAssignSegmentsArg) XXX_Size() int {
	return xxx_messageInfo_LazanAssignSegmentsArg.Size(m)
}
func (m *LazanAssignSegmentsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanAssignSegmentsArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanAssignSegmentsArg proto.InternalMessageInfo

func (m *LazanAssignSegmentsArg) GetNodeUuid() []byte {
	if m != nil {
		return m.NodeUuid
	}
	return nil
}

func (m *LazanAssignSegmentsArg) GetOwnerTaskUuid() []byte {
	if m != nil {
		return m.OwnerTaskUuid
	}
	return nil
}

func (m *LazanAssignSegmentsArg) GetFailover() bool {
	if m != nil && m.Failover != nil {
		return *m.Failover
	}
	return false
}

func (m *LazanAssignSegmentsArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *LazanAssignSegmentsArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *LazanAssignSegmentsArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *LazanAssignSegmentsArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *LazanAssignSegmentsArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

type LazanAssignSegmentsRet struct {
	// A task to poll for completion. On success, the task will contain a
	// LazanAssignSegmentsTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanAssignSegmentsRet) Reset()         { *m = LazanAssignSegmentsRet{} }
func (m *LazanAssignSegmentsRet) String() string { return proto.CompactTextString(m) }
func (*LazanAssignSegmentsRet) ProtoMessage()    {}
func (*LazanAssignSegmentsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{301}
}

func (m *LazanAssignSegmentsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanAssignSegmentsRet.Unmarshal(m, b)
}
func (m *LazanAssignSegmentsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanAssignSegmentsRet.Marshal(b, m, deterministic)
}
func (m *LazanAssignSegmentsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanAssignSegmentsRet.Merge(m, src)
}
func (m *LazanAssignSegmentsRet) XXX_Size() int {
	return xxx_messageInfo_LazanAssignSegmentsRet.Size(m)
}
func (m *LazanAssignSegmentsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanAssignSegmentsRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanAssignSegmentsRet proto.InternalMessageInfo

func (m *LazanAssignSegmentsRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type LazanAssignSegmentsTaskRet struct {
	// The update segment assignment logical timestamp on successfully assigning
	// segments, -1 otherwise.
	SegmentsTimestamp    *int64   `protobuf:"varint,1,opt,name=segments_timestamp,json=segmentsTimestamp" json:"segments_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanAssignSegmentsTaskRet) Reset()         { *m = LazanAssignSegmentsTaskRet{} }
func (m *LazanAssignSegmentsTaskRet) String() string { return proto.CompactTextString(m) }
func (*LazanAssignSegmentsTaskRet) ProtoMessage()    {}
func (*LazanAssignSegmentsTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{302}
}

func (m *LazanAssignSegmentsTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanAssignSegmentsTaskRet.Unmarshal(m, b)
}
func (m *LazanAssignSegmentsTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanAssignSegmentsTaskRet.Marshal(b, m, deterministic)
}
func (m *LazanAssignSegmentsTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanAssignSegmentsTaskRet.Merge(m, src)
}
func (m *LazanAssignSegmentsTaskRet) XXX_Size() int {
	return xxx_messageInfo_LazanAssignSegmentsTaskRet.Size(m)
}
func (m *LazanAssignSegmentsTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanAssignSegmentsTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanAssignSegmentsTaskRet proto.InternalMessageInfo

func (m *LazanAssignSegmentsTaskRet) GetSegmentsTimestamp() int64 {
	if m != nil && m.SegmentsTimestamp != nil {
		return *m.SegmentsTimestamp
	}
	return 0
}

type LazanNotifyPowerTransitionArg struct {
	// Entity UUID.
	EntityUuid []byte `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid" json:"entity_uuid,omitempty"`
	// Migrate parcel UUID.
	ParcelUuid []byte `protobuf:"bytes,2,opt,name=parcel_uuid,json=parcelUuid" json:"parcel_uuid,omitempty"`
	// VM is removed.
	Removed *bool `protobuf:"varint,3,opt,name=removed" json:"removed,omitempty"`
	// VM migration success or failure.
	MigrateComplete *bool `protobuf:"varint,4,opt,name=migrate_complete,json=migrateComplete" json:"migrate_complete,omitempty"`
	// VM power on success or failure.
	PowerOnComplete *bool `protobuf:"varint,5,opt,name=power_on_complete,json=powerOnComplete" json:"power_on_complete,omitempty"`
	// UUID of the node VM has to be migrated to.
	MigrateToNodeUuid []byte `protobuf:"bytes,6,opt,name=migrate_to_node_uuid,json=migrateToNodeUuid" json:"migrate_to_node_uuid,omitempty"`
	// VM power on is started.
	PoweringOn *bool `protobuf:"varint,7,opt,name=powering_on,json=poweringOn" json:"powering_on,omitempty"`
	// VM's affinity spec.
	AffinitySpec *EntityAffinitySpec `protobuf:"bytes,8,opt,name=affinity_spec,json=affinitySpec" json:"affinity_spec,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,9,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,10,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,11,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether this is an internal task and is not meant to be displayed in UI.
	InternalTask *bool `protobuf:"varint,12,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures *bool `protobuf:"varint,13,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	// UUID of the task that owns the parcel for this vm.
	OwnerTaskUuid []byte `protobuf:"bytes,14,opt,name=owner_task_uuid,json=ownerTaskUuid" json:"owner_task_uuid,omitempty"`
	// Whether cross cluster live migration of this entity to another cluster is
	// in progress.
	CrossClusterLiveMigrateInProgress *bool    `protobuf:"varint,15,opt,name=cross_cluster_live_migrate_in_progress,json=crossClusterLiveMigrateInProgress" json:"cross_cluster_live_migrate_in_progress,omitempty"`
	XXX_NoUnkeyedLiteral              struct{} `json:"-"`
	XXX_unrecognized                  []byte   `json:"-"`
	XXX_sizecache                     int32    `json:"-"`
}

func (m *LazanNotifyPowerTransitionArg) Reset()         { *m = LazanNotifyPowerTransitionArg{} }
func (m *LazanNotifyPowerTransitionArg) String() string { return proto.CompactTextString(m) }
func (*LazanNotifyPowerTransitionArg) ProtoMessage()    {}
func (*LazanNotifyPowerTransitionArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{303}
}

func (m *LazanNotifyPowerTransitionArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanNotifyPowerTransitionArg.Unmarshal(m, b)
}
func (m *LazanNotifyPowerTransitionArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanNotifyPowerTransitionArg.Marshal(b, m, deterministic)
}
func (m *LazanNotifyPowerTransitionArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanNotifyPowerTransitionArg.Merge(m, src)
}
func (m *LazanNotifyPowerTransitionArg) XXX_Size() int {
	return xxx_messageInfo_LazanNotifyPowerTransitionArg.Size(m)
}
func (m *LazanNotifyPowerTransitionArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanNotifyPowerTransitionArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanNotifyPowerTransitionArg proto.InternalMessageInfo

func (m *LazanNotifyPowerTransitionArg) GetEntityUuid() []byte {
	if m != nil {
		return m.EntityUuid
	}
	return nil
}

func (m *LazanNotifyPowerTransitionArg) GetParcelUuid() []byte {
	if m != nil {
		return m.ParcelUuid
	}
	return nil
}

func (m *LazanNotifyPowerTransitionArg) GetRemoved() bool {
	if m != nil && m.Removed != nil {
		return *m.Removed
	}
	return false
}

func (m *LazanNotifyPowerTransitionArg) GetMigrateComplete() bool {
	if m != nil && m.MigrateComplete != nil {
		return *m.MigrateComplete
	}
	return false
}

func (m *LazanNotifyPowerTransitionArg) GetPowerOnComplete() bool {
	if m != nil && m.PowerOnComplete != nil {
		return *m.PowerOnComplete
	}
	return false
}

func (m *LazanNotifyPowerTransitionArg) GetMigrateToNodeUuid() []byte {
	if m != nil {
		return m.MigrateToNodeUuid
	}
	return nil
}

func (m *LazanNotifyPowerTransitionArg) GetPoweringOn() bool {
	if m != nil && m.PoweringOn != nil {
		return *m.PoweringOn
	}
	return false
}

func (m *LazanNotifyPowerTransitionArg) GetAffinitySpec() *EntityAffinitySpec {
	if m != nil {
		return m.AffinitySpec
	}
	return nil
}

func (m *LazanNotifyPowerTransitionArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *LazanNotifyPowerTransitionArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *LazanNotifyPowerTransitionArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *LazanNotifyPowerTransitionArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *LazanNotifyPowerTransitionArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

func (m *LazanNotifyPowerTransitionArg) GetOwnerTaskUuid() []byte {
	if m != nil {
		return m.OwnerTaskUuid
	}
	return nil
}

func (m *LazanNotifyPowerTransitionArg) GetCrossClusterLiveMigrateInProgress() bool {
	if m != nil && m.CrossClusterLiveMigrateInProgress != nil {
		return *m.CrossClusterLiveMigrateInProgress
	}
	return false
}

type LazanNotifyPowerTransitionRet struct {
	// A task to poll for completion. On success, the task will contain a
	// LazanNotifyPowerTransitionTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanNotifyPowerTransitionRet) Reset()         { *m = LazanNotifyPowerTransitionRet{} }
func (m *LazanNotifyPowerTransitionRet) String() string { return proto.CompactTextString(m) }
func (*LazanNotifyPowerTransitionRet) ProtoMessage()    {}
func (*LazanNotifyPowerTransitionRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{304}
}

func (m *LazanNotifyPowerTransitionRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanNotifyPowerTransitionRet.Unmarshal(m, b)
}
func (m *LazanNotifyPowerTransitionRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanNotifyPowerTransitionRet.Marshal(b, m, deterministic)
}
func (m *LazanNotifyPowerTransitionRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanNotifyPowerTransitionRet.Merge(m, src)
}
func (m *LazanNotifyPowerTransitionRet) XXX_Size() int {
	return xxx_messageInfo_LazanNotifyPowerTransitionRet.Size(m)
}
func (m *LazanNotifyPowerTransitionRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanNotifyPowerTransitionRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanNotifyPowerTransitionRet proto.InternalMessageInfo

func (m *LazanNotifyPowerTransitionRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type LazanNotifyPowerTransitionTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanNotifyPowerTransitionTaskRet) Reset()         { *m = LazanNotifyPowerTransitionTaskRet{} }
func (m *LazanNotifyPowerTransitionTaskRet) String() string { return proto.CompactTextString(m) }
func (*LazanNotifyPowerTransitionTaskRet) ProtoMessage()    {}
func (*LazanNotifyPowerTransitionTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{305}
}

func (m *LazanNotifyPowerTransitionTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanNotifyPowerTransitionTaskRet.Unmarshal(m, b)
}
func (m *LazanNotifyPowerTransitionTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanNotifyPowerTransitionTaskRet.Marshal(b, m, deterministic)
}
func (m *LazanNotifyPowerTransitionTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanNotifyPowerTransitionTaskRet.Merge(m, src)
}
func (m *LazanNotifyPowerTransitionTaskRet) XXX_Size() int {
	return xxx_messageInfo_LazanNotifyPowerTransitionTaskRet.Size(m)
}
func (m *LazanNotifyPowerTransitionTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanNotifyPowerTransitionTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanNotifyPowerTransitionTaskRet proto.InternalMessageInfo

type LazanCompleteMigrateVmArg struct {
	// VM UUID.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Migrate (destination) parcel UUID.
	MigrateParcelUuid []byte `protobuf:"bytes,2,opt,name=migrate_parcel_uuid,json=migrateParcelUuid" json:"migrate_parcel_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// True if migration was successful.
	Success *bool `protobuf:"varint,6,opt,name=success" json:"success,omitempty"`
	// The parcel to delete (source on success, destination on failure).
	ToDeleteParcelUuid []byte `protobuf:"bytes,7,opt,name=to_delete_parcel_uuid,json=toDeleteParcelUuid" json:"to_delete_parcel_uuid,omitempty"`
	// Whether this is an internal task and is not meant to be displayed in UI.
	InternalTask *bool `protobuf:"varint,8,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures *bool `protobuf:"varint,9,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	// Logical timestamp for the segment assignment at task creation.
	SegmentsTimestamp *int64 `protobuf:"varint,10,opt,name=segments_timestamp,json=segmentsTimestamp" json:"segments_timestamp,omitempty"`
	// UUID of the node that is in the process of failover or entering
	// maintenance mode.
	FailedNodeUuid       []byte   `protobuf:"bytes,11,opt,name=failed_node_uuid,json=failedNodeUuid" json:"failed_node_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanCompleteMigrateVmArg) Reset()         { *m = LazanCompleteMigrateVmArg{} }
func (m *LazanCompleteMigrateVmArg) String() string { return proto.CompactTextString(m) }
func (*LazanCompleteMigrateVmArg) ProtoMessage()    {}
func (*LazanCompleteMigrateVmArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{306}
}

func (m *LazanCompleteMigrateVmArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanCompleteMigrateVmArg.Unmarshal(m, b)
}
func (m *LazanCompleteMigrateVmArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanCompleteMigrateVmArg.Marshal(b, m, deterministic)
}
func (m *LazanCompleteMigrateVmArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanCompleteMigrateVmArg.Merge(m, src)
}
func (m *LazanCompleteMigrateVmArg) XXX_Size() int {
	return xxx_messageInfo_LazanCompleteMigrateVmArg.Size(m)
}
func (m *LazanCompleteMigrateVmArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanCompleteMigrateVmArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanCompleteMigrateVmArg proto.InternalMessageInfo

func (m *LazanCompleteMigrateVmArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *LazanCompleteMigrateVmArg) GetMigrateParcelUuid() []byte {
	if m != nil {
		return m.MigrateParcelUuid
	}
	return nil
}

func (m *LazanCompleteMigrateVmArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *LazanCompleteMigrateVmArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *LazanCompleteMigrateVmArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *LazanCompleteMigrateVmArg) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *LazanCompleteMigrateVmArg) GetToDeleteParcelUuid() []byte {
	if m != nil {
		return m.ToDeleteParcelUuid
	}
	return nil
}

func (m *LazanCompleteMigrateVmArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *LazanCompleteMigrateVmArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

func (m *LazanCompleteMigrateVmArg) GetSegmentsTimestamp() int64 {
	if m != nil && m.SegmentsTimestamp != nil {
		return *m.SegmentsTimestamp
	}
	return 0
}

func (m *LazanCompleteMigrateVmArg) GetFailedNodeUuid() []byte {
	if m != nil {
		return m.FailedNodeUuid
	}
	return nil
}

type LazanCompleteMigrateVmRet struct {
	// A task to poll for completion. On success, the task will contain a
	// LazanCompleteMigrateVmTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanCompleteMigrateVmRet) Reset()         { *m = LazanCompleteMigrateVmRet{} }
func (m *LazanCompleteMigrateVmRet) String() string { return proto.CompactTextString(m) }
func (*LazanCompleteMigrateVmRet) ProtoMessage()    {}
func (*LazanCompleteMigrateVmRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{307}
}

func (m *LazanCompleteMigrateVmRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanCompleteMigrateVmRet.Unmarshal(m, b)
}
func (m *LazanCompleteMigrateVmRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanCompleteMigrateVmRet.Marshal(b, m, deterministic)
}
func (m *LazanCompleteMigrateVmRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanCompleteMigrateVmRet.Merge(m, src)
}
func (m *LazanCompleteMigrateVmRet) XXX_Size() int {
	return xxx_messageInfo_LazanCompleteMigrateVmRet.Size(m)
}
func (m *LazanCompleteMigrateVmRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanCompleteMigrateVmRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanCompleteMigrateVmRet proto.InternalMessageInfo

func (m *LazanCompleteMigrateVmRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type LazanCompleteMigrateVmTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanCompleteMigrateVmTaskRet) Reset()         { *m = LazanCompleteMigrateVmTaskRet{} }
func (m *LazanCompleteMigrateVmTaskRet) String() string { return proto.CompactTextString(m) }
func (*LazanCompleteMigrateVmTaskRet) ProtoMessage()    {}
func (*LazanCompleteMigrateVmTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{308}
}

func (m *LazanCompleteMigrateVmTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanCompleteMigrateVmTaskRet.Unmarshal(m, b)
}
func (m *LazanCompleteMigrateVmTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanCompleteMigrateVmTaskRet.Marshal(b, m, deterministic)
}
func (m *LazanCompleteMigrateVmTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanCompleteMigrateVmTaskRet.Merge(m, src)
}
func (m *LazanCompleteMigrateVmTaskRet) XXX_Size() int {
	return xxx_messageInfo_LazanCompleteMigrateVmTaskRet.Size(m)
}
func (m *LazanCompleteMigrateVmTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanCompleteMigrateVmTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanCompleteMigrateVmTaskRet proto.InternalMessageInfo

type LazanIsTaskPendingArg struct {
	// VM UUID.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Host UUID.
	HostUuid             []byte   `protobuf:"bytes,2,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanIsTaskPendingArg) Reset()         { *m = LazanIsTaskPendingArg{} }
func (m *LazanIsTaskPendingArg) String() string { return proto.CompactTextString(m) }
func (*LazanIsTaskPendingArg) ProtoMessage()    {}
func (*LazanIsTaskPendingArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{309}
}

func (m *LazanIsTaskPendingArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanIsTaskPendingArg.Unmarshal(m, b)
}
func (m *LazanIsTaskPendingArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanIsTaskPendingArg.Marshal(b, m, deterministic)
}
func (m *LazanIsTaskPendingArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanIsTaskPendingArg.Merge(m, src)
}
func (m *LazanIsTaskPendingArg) XXX_Size() int {
	return xxx_messageInfo_LazanIsTaskPendingArg.Size(m)
}
func (m *LazanIsTaskPendingArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanIsTaskPendingArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanIsTaskPendingArg proto.InternalMessageInfo

func (m *LazanIsTaskPendingArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *LazanIsTaskPendingArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

type LazanIsTaskPendingRet struct {
	// True if a transition task is pending, False otherwise.
	TaskPending *bool `protobuf:"varint,1,opt,name=task_pending,json=taskPending" json:"task_pending,omitempty"`
	// Whether cross cluster live migration is in progress.
	CrossClusterLiveMigrateInProgress *bool    `protobuf:"varint,2,opt,name=cross_cluster_live_migrate_in_progress,json=crossClusterLiveMigrateInProgress" json:"cross_cluster_live_migrate_in_progress,omitempty"`
	XXX_NoUnkeyedLiteral              struct{} `json:"-"`
	XXX_unrecognized                  []byte   `json:"-"`
	XXX_sizecache                     int32    `json:"-"`
}

func (m *LazanIsTaskPendingRet) Reset()         { *m = LazanIsTaskPendingRet{} }
func (m *LazanIsTaskPendingRet) String() string { return proto.CompactTextString(m) }
func (*LazanIsTaskPendingRet) ProtoMessage()    {}
func (*LazanIsTaskPendingRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{310}
}

func (m *LazanIsTaskPendingRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanIsTaskPendingRet.Unmarshal(m, b)
}
func (m *LazanIsTaskPendingRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanIsTaskPendingRet.Marshal(b, m, deterministic)
}
func (m *LazanIsTaskPendingRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanIsTaskPendingRet.Merge(m, src)
}
func (m *LazanIsTaskPendingRet) XXX_Size() int {
	return xxx_messageInfo_LazanIsTaskPendingRet.Size(m)
}
func (m *LazanIsTaskPendingRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanIsTaskPendingRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanIsTaskPendingRet proto.InternalMessageInfo

func (m *LazanIsTaskPendingRet) GetTaskPending() bool {
	if m != nil && m.TaskPending != nil {
		return *m.TaskPending
	}
	return false
}

func (m *LazanIsTaskPendingRet) GetCrossClusterLiveMigrateInProgress() bool {
	if m != nil && m.CrossClusterLiveMigrateInProgress != nil {
		return *m.CrossClusterLiveMigrateInProgress
	}
	return false
}

type LazanGetEntityParcelsArg struct {
	// Entity UUID.
	EntityUuid           []byte   `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid" json:"entity_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetEntityParcelsArg) Reset()         { *m = LazanGetEntityParcelsArg{} }
func (m *LazanGetEntityParcelsArg) String() string { return proto.CompactTextString(m) }
func (*LazanGetEntityParcelsArg) ProtoMessage()    {}
func (*LazanGetEntityParcelsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{311}
}

func (m *LazanGetEntityParcelsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetEntityParcelsArg.Unmarshal(m, b)
}
func (m *LazanGetEntityParcelsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetEntityParcelsArg.Marshal(b, m, deterministic)
}
func (m *LazanGetEntityParcelsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetEntityParcelsArg.Merge(m, src)
}
func (m *LazanGetEntityParcelsArg) XXX_Size() int {
	return xxx_messageInfo_LazanGetEntityParcelsArg.Size(m)
}
func (m *LazanGetEntityParcelsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetEntityParcelsArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetEntityParcelsArg proto.InternalMessageInfo

func (m *LazanGetEntityParcelsArg) GetEntityUuid() []byte {
	if m != nil {
		return m.EntityUuid
	}
	return nil
}

type LazanGetEntityParcelsRet struct {
	// A list of Parcel UUIDs.
	ParcelUuidList       [][]byte `protobuf:"bytes,1,rep,name=parcel_uuid_list,json=parcelUuidList" json:"parcel_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetEntityParcelsRet) Reset()         { *m = LazanGetEntityParcelsRet{} }
func (m *LazanGetEntityParcelsRet) String() string { return proto.CompactTextString(m) }
func (*LazanGetEntityParcelsRet) ProtoMessage()    {}
func (*LazanGetEntityParcelsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{312}
}

func (m *LazanGetEntityParcelsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetEntityParcelsRet.Unmarshal(m, b)
}
func (m *LazanGetEntityParcelsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetEntityParcelsRet.Marshal(b, m, deterministic)
}
func (m *LazanGetEntityParcelsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetEntityParcelsRet.Merge(m, src)
}
func (m *LazanGetEntityParcelsRet) XXX_Size() int {
	return xxx_messageInfo_LazanGetEntityParcelsRet.Size(m)
}
func (m *LazanGetEntityParcelsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetEntityParcelsRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetEntityParcelsRet proto.InternalMessageInfo

func (m *LazanGetEntityParcelsRet) GetParcelUuidList() [][]byte {
	if m != nil {
		return m.ParcelUuidList
	}
	return nil
}

type LazanAffinityHAComplianceCheckArg struct {
	// VM UUID.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Host UUID.
	HostUuid []byte `protobuf:"bytes,2,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// VM group UUID.
	VmGroupUuid []byte `protobuf:"bytes,3,opt,name=vm_group_uuid,json=vmGroupUuid" json:"vm_group_uuid,omitempty"`
	// Host Affinity.
	HostAffinity *Affinity `protobuf:"bytes,4,opt,name=host_affinity,json=hostAffinity" json:"host_affinity,omitempty"`
	// Skip HA compliance check.
	SkipHa *bool `protobuf:"varint,5,opt,name=skip_ha,json=skipHa" json:"skip_ha,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,6,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,7,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,8,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether this is an internal task and is not meant to be displayed in UI.
	InternalTask *bool `protobuf:"varint,9,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures      *bool    `protobuf:"varint,10,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanAffinityHAComplianceCheckArg) Reset()         { *m = LazanAffinityHAComplianceCheckArg{} }
func (m *LazanAffinityHAComplianceCheckArg) String() string { return proto.CompactTextString(m) }
func (*LazanAffinityHAComplianceCheckArg) ProtoMessage()    {}
func (*LazanAffinityHAComplianceCheckArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{313}
}

func (m *LazanAffinityHAComplianceCheckArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanAffinityHAComplianceCheckArg.Unmarshal(m, b)
}
func (m *LazanAffinityHAComplianceCheckArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanAffinityHAComplianceCheckArg.Marshal(b, m, deterministic)
}
func (m *LazanAffinityHAComplianceCheckArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanAffinityHAComplianceCheckArg.Merge(m, src)
}
func (m *LazanAffinityHAComplianceCheckArg) XXX_Size() int {
	return xxx_messageInfo_LazanAffinityHAComplianceCheckArg.Size(m)
}
func (m *LazanAffinityHAComplianceCheckArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanAffinityHAComplianceCheckArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanAffinityHAComplianceCheckArg proto.InternalMessageInfo

func (m *LazanAffinityHAComplianceCheckArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *LazanAffinityHAComplianceCheckArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *LazanAffinityHAComplianceCheckArg) GetVmGroupUuid() []byte {
	if m != nil {
		return m.VmGroupUuid
	}
	return nil
}

func (m *LazanAffinityHAComplianceCheckArg) GetHostAffinity() *Affinity {
	if m != nil {
		return m.HostAffinity
	}
	return nil
}

func (m *LazanAffinityHAComplianceCheckArg) GetSkipHa() bool {
	if m != nil && m.SkipHa != nil {
		return *m.SkipHa
	}
	return false
}

func (m *LazanAffinityHAComplianceCheckArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *LazanAffinityHAComplianceCheckArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *LazanAffinityHAComplianceCheckArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *LazanAffinityHAComplianceCheckArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *LazanAffinityHAComplianceCheckArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

type LazanAffinityHAComplianceCheckRet struct {
	// A task to poll for completion. On success, the task will contain a
	// LazanAffinityHAComplianceCheckTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanAffinityHAComplianceCheckRet) Reset()         { *m = LazanAffinityHAComplianceCheckRet{} }
func (m *LazanAffinityHAComplianceCheckRet) String() string { return proto.CompactTextString(m) }
func (*LazanAffinityHAComplianceCheckRet) ProtoMessage()    {}
func (*LazanAffinityHAComplianceCheckRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{314}
}

func (m *LazanAffinityHAComplianceCheckRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanAffinityHAComplianceCheckRet.Unmarshal(m, b)
}
func (m *LazanAffinityHAComplianceCheckRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanAffinityHAComplianceCheckRet.Marshal(b, m, deterministic)
}
func (m *LazanAffinityHAComplianceCheckRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanAffinityHAComplianceCheckRet.Merge(m, src)
}
func (m *LazanAffinityHAComplianceCheckRet) XXX_Size() int {
	return xxx_messageInfo_LazanAffinityHAComplianceCheckRet.Size(m)
}
func (m *LazanAffinityHAComplianceCheckRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanAffinityHAComplianceCheckRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanAffinityHAComplianceCheckRet proto.InternalMessageInfo

func (m *LazanAffinityHAComplianceCheckRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type LazanAffinityHAComplianceCheckTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanAffinityHAComplianceCheckTaskRet) Reset()         { *m = LazanAffinityHAComplianceCheckTaskRet{} }
func (m *LazanAffinityHAComplianceCheckTaskRet) String() string { return proto.CompactTextString(m) }
func (*LazanAffinityHAComplianceCheckTaskRet) ProtoMessage()    {}
func (*LazanAffinityHAComplianceCheckTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{315}
}

func (m *LazanAffinityHAComplianceCheckTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanAffinityHAComplianceCheckTaskRet.Unmarshal(m, b)
}
func (m *LazanAffinityHAComplianceCheckTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanAffinityHAComplianceCheckTaskRet.Marshal(b, m, deterministic)
}
func (m *LazanAffinityHAComplianceCheckTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanAffinityHAComplianceCheckTaskRet.Merge(m, src)
}
func (m *LazanAffinityHAComplianceCheckTaskRet) XXX_Size() int {
	return xxx_messageInfo_LazanAffinityHAComplianceCheckTaskRet.Size(m)
}
func (m *LazanAffinityHAComplianceCheckTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanAffinityHAComplianceCheckTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanAffinityHAComplianceCheckTaskRet proto.InternalMessageInfo

type LazanCheckCurrentNodeFailuresArg struct {
	// Task UUID. This is used as an idempotence token.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanCheckCurrentNodeFailuresArg) Reset()         { *m = LazanCheckCurrentNodeFailuresArg{} }
func (m *LazanCheckCurrentNodeFailuresArg) String() string { return proto.CompactTextString(m) }
func (*LazanCheckCurrentNodeFailuresArg) ProtoMessage()    {}
func (*LazanCheckCurrentNodeFailuresArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{316}
}

func (m *LazanCheckCurrentNodeFailuresArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanCheckCurrentNodeFailuresArg.Unmarshal(m, b)
}
func (m *LazanCheckCurrentNodeFailuresArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanCheckCurrentNodeFailuresArg.Marshal(b, m, deterministic)
}
func (m *LazanCheckCurrentNodeFailuresArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanCheckCurrentNodeFailuresArg.Merge(m, src)
}
func (m *LazanCheckCurrentNodeFailuresArg) XXX_Size() int {
	return xxx_messageInfo_LazanCheckCurrentNodeFailuresArg.Size(m)
}
func (m *LazanCheckCurrentNodeFailuresArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanCheckCurrentNodeFailuresArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanCheckCurrentNodeFailuresArg proto.InternalMessageInfo

func (m *LazanCheckCurrentNodeFailuresArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type LazanCheckCurrentNodeFailuresRet struct {
	// Current number of node failures we can tolerate.
	NumNodeFailures      *uint64  `protobuf:"varint,1,opt,name=num_node_failures,json=numNodeFailures" json:"num_node_failures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanCheckCurrentNodeFailuresRet) Reset()         { *m = LazanCheckCurrentNodeFailuresRet{} }
func (m *LazanCheckCurrentNodeFailuresRet) String() string { return proto.CompactTextString(m) }
func (*LazanCheckCurrentNodeFailuresRet) ProtoMessage()    {}
func (*LazanCheckCurrentNodeFailuresRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{317}
}

func (m *LazanCheckCurrentNodeFailuresRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanCheckCurrentNodeFailuresRet.Unmarshal(m, b)
}
func (m *LazanCheckCurrentNodeFailuresRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanCheckCurrentNodeFailuresRet.Marshal(b, m, deterministic)
}
func (m *LazanCheckCurrentNodeFailuresRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanCheckCurrentNodeFailuresRet.Merge(m, src)
}
func (m *LazanCheckCurrentNodeFailuresRet) XXX_Size() int {
	return xxx_messageInfo_LazanCheckCurrentNodeFailuresRet.Size(m)
}
func (m *LazanCheckCurrentNodeFailuresRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanCheckCurrentNodeFailuresRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanCheckCurrentNodeFailuresRet proto.InternalMessageInfo

func (m *LazanCheckCurrentNodeFailuresRet) GetNumNodeFailures() uint64 {
	if m != nil && m.NumNodeFailures != nil {
		return *m.NumNodeFailures
	}
	return 0
}

type LazanIsFailoverInProgressArg struct {
	// Task UUID. This is used as an idempotence token.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanIsFailoverInProgressArg) Reset()         { *m = LazanIsFailoverInProgressArg{} }
func (m *LazanIsFailoverInProgressArg) String() string { return proto.CompactTextString(m) }
func (*LazanIsFailoverInProgressArg) ProtoMessage()    {}
func (*LazanIsFailoverInProgressArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{318}
}

func (m *LazanIsFailoverInProgressArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanIsFailoverInProgressArg.Unmarshal(m, b)
}
func (m *LazanIsFailoverInProgressArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanIsFailoverInProgressArg.Marshal(b, m, deterministic)
}
func (m *LazanIsFailoverInProgressArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanIsFailoverInProgressArg.Merge(m, src)
}
func (m *LazanIsFailoverInProgressArg) XXX_Size() int {
	return xxx_messageInfo_LazanIsFailoverInProgressArg.Size(m)
}
func (m *LazanIsFailoverInProgressArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanIsFailoverInProgressArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanIsFailoverInProgressArg proto.InternalMessageInfo

func (m *LazanIsFailoverInProgressArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type LazanIsFailoverInProgressRet struct {
	// True if HA failover is in progress.
	InProgress           *bool    `protobuf:"varint,1,opt,name=in_progress,json=inProgress" json:"in_progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanIsFailoverInProgressRet) Reset()         { *m = LazanIsFailoverInProgressRet{} }
func (m *LazanIsFailoverInProgressRet) String() string { return proto.CompactTextString(m) }
func (*LazanIsFailoverInProgressRet) ProtoMessage()    {}
func (*LazanIsFailoverInProgressRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{319}
}

func (m *LazanIsFailoverInProgressRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanIsFailoverInProgressRet.Unmarshal(m, b)
}
func (m *LazanIsFailoverInProgressRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanIsFailoverInProgressRet.Marshal(b, m, deterministic)
}
func (m *LazanIsFailoverInProgressRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanIsFailoverInProgressRet.Merge(m, src)
}
func (m *LazanIsFailoverInProgressRet) XXX_Size() int {
	return xxx_messageInfo_LazanIsFailoverInProgressRet.Size(m)
}
func (m *LazanIsFailoverInProgressRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanIsFailoverInProgressRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanIsFailoverInProgressRet proto.InternalMessageInfo

func (m *LazanIsFailoverInProgressRet) GetInProgress() bool {
	if m != nil && m.InProgress != nil {
		return *m.InProgress
	}
	return false
}

type LazanScheduleVmArg struct {
	// Info of a VM that needs a node assigned.
	VmInfo *VmInfo `protobuf:"bytes,1,opt,name=vm_info,json=vmInfo" json:"vm_info,omitempty"`
	// Attempt to schedule on specific node.
	NodeUuid []byte `protobuf:"bytes,2,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	// Force CPU overcommit.
	ForceOvercommit *bool `protobuf:"varint,3,opt,name=force_overcommit,json=forceOvercommit" json:"force_overcommit,omitempty"`
	// List of host uuid's that we should not schedule on.
	IgnoreHostsList [][]byte `protobuf:"bytes,4,rep,name=ignore_hosts_list,json=ignoreHostsList" json:"ignore_hosts_list,omitempty"`
	// True if this schedule request is part of HA failover.
	Failover *bool `protobuf:"varint,5,opt,name=failover" json:"failover,omitempty"`
	// If true, use segments assigned for HA failover.
	UseSegments *bool `protobuf:"varint,6,opt,name=use_segments,json=useSegments" json:"use_segments,omitempty"`
	// This operation is part of HA healing, and hence
	// not subject to admission control.
	HaHealing *bool `protobuf:"varint,7,opt,name=ha_healing,json=haHealing" json:"ha_healing,omitempty"`
	// True if memory or cpu is being hot added to a VM
	HotplugAdd *bool `protobuf:"varint,8,opt,name=hotplug_add,json=hotplugAdd" json:"hotplug_add,omitempty"`
	// Affinity spec to uphold.
	NewAffinitySpec *EntityAffinitySpec `protobuf:"bytes,9,opt,name=new_affinity_spec,json=newAffinitySpec" json:"new_affinity_spec,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,10,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,11,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,12,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether this is an internal task and is not meant to be displayed in UI.
	InternalTask *bool `protobuf:"varint,13,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures *bool `protobuf:"varint,14,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	// UUID of the node that is in the process of failover or entering
	// maintenance mode.
	FailedNodeUuid []byte `protobuf:"bytes,15,opt,name=failed_node_uuid,json=failedNodeUuid" json:"failed_node_uuid,omitempty"`
	// Logical timestamp for the segment assignment at task creation.
	SegmentsTimestamp *int64 `protobuf:"varint,16,opt,name=segments_timestamp,json=segmentsTimestamp" json:"segments_timestamp,omitempty"`
	// UUID of the task that owns the parcel for this vm. It should be used in
	// hotplug cases only. Using this in general can cause scheduler to see
	// VMs tasks pending which were never created, especially for dry run parcels.
	OwnerTaskUuid []byte `protobuf:"bytes,17,opt,name=owner_task_uuid,json=ownerTaskUuid" json:"owner_task_uuid,omitempty"`
	// vGPU live migration compatible host SBDFs
	VgpuMigrateSpec []*VGPUMigrateSpec `protobuf:"bytes,18,rep,name=vgpu_migrate_spec,json=vgpuMigrateSpec" json:"vgpu_migrate_spec,omitempty"`
	// Total number of vNICs at the end of a hot add operation.
	NumVnics *uint64 `protobuf:"varint,19,opt,name=num_vnics,json=numVnics" json:"num_vnics,omitempty"`
	// List of vGpu assignments to sbdf of pGpus. This field should only be
	// populated from placement solver.
	VgpuSbdfList         []*VGPUBootSpec `protobuf:"bytes,20,rep,name=vgpu_sbdf_list,json=vgpuSbdfList" json:"vgpu_sbdf_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LazanScheduleVmArg) Reset()         { *m = LazanScheduleVmArg{} }
func (m *LazanScheduleVmArg) String() string { return proto.CompactTextString(m) }
func (*LazanScheduleVmArg) ProtoMessage()    {}
func (*LazanScheduleVmArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{320}
}

func (m *LazanScheduleVmArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanScheduleVmArg.Unmarshal(m, b)
}
func (m *LazanScheduleVmArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanScheduleVmArg.Marshal(b, m, deterministic)
}
func (m *LazanScheduleVmArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanScheduleVmArg.Merge(m, src)
}
func (m *LazanScheduleVmArg) XXX_Size() int {
	return xxx_messageInfo_LazanScheduleVmArg.Size(m)
}
func (m *LazanScheduleVmArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanScheduleVmArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanScheduleVmArg proto.InternalMessageInfo

func (m *LazanScheduleVmArg) GetVmInfo() *VmInfo {
	if m != nil {
		return m.VmInfo
	}
	return nil
}

func (m *LazanScheduleVmArg) GetNodeUuid() []byte {
	if m != nil {
		return m.NodeUuid
	}
	return nil
}

func (m *LazanScheduleVmArg) GetForceOvercommit() bool {
	if m != nil && m.ForceOvercommit != nil {
		return *m.ForceOvercommit
	}
	return false
}

func (m *LazanScheduleVmArg) GetIgnoreHostsList() [][]byte {
	if m != nil {
		return m.IgnoreHostsList
	}
	return nil
}

func (m *LazanScheduleVmArg) GetFailover() bool {
	if m != nil && m.Failover != nil {
		return *m.Failover
	}
	return false
}

func (m *LazanScheduleVmArg) GetUseSegments() bool {
	if m != nil && m.UseSegments != nil {
		return *m.UseSegments
	}
	return false
}

func (m *LazanScheduleVmArg) GetHaHealing() bool {
	if m != nil && m.HaHealing != nil {
		return *m.HaHealing
	}
	return false
}

func (m *LazanScheduleVmArg) GetHotplugAdd() bool {
	if m != nil && m.HotplugAdd != nil {
		return *m.HotplugAdd
	}
	return false
}

func (m *LazanScheduleVmArg) GetNewAffinitySpec() *EntityAffinitySpec {
	if m != nil {
		return m.NewAffinitySpec
	}
	return nil
}

func (m *LazanScheduleVmArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *LazanScheduleVmArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *LazanScheduleVmArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *LazanScheduleVmArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *LazanScheduleVmArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

func (m *LazanScheduleVmArg) GetFailedNodeUuid() []byte {
	if m != nil {
		return m.FailedNodeUuid
	}
	return nil
}

func (m *LazanScheduleVmArg) GetSegmentsTimestamp() int64 {
	if m != nil && m.SegmentsTimestamp != nil {
		return *m.SegmentsTimestamp
	}
	return 0
}

func (m *LazanScheduleVmArg) GetOwnerTaskUuid() []byte {
	if m != nil {
		return m.OwnerTaskUuid
	}
	return nil
}

func (m *LazanScheduleVmArg) GetVgpuMigrateSpec() []*VGPUMigrateSpec {
	if m != nil {
		return m.VgpuMigrateSpec
	}
	return nil
}

func (m *LazanScheduleVmArg) GetNumVnics() uint64 {
	if m != nil && m.NumVnics != nil {
		return *m.NumVnics
	}
	return 0
}

func (m *LazanScheduleVmArg) GetVgpuSbdfList() []*VGPUBootSpec {
	if m != nil {
		return m.VgpuSbdfList
	}
	return nil
}

type LazanScheduleVmRet struct {
	// A task to poll for completion. On success, the task will contain a
	// LazanScheduleVmTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanScheduleVmRet) Reset()         { *m = LazanScheduleVmRet{} }
func (m *LazanScheduleVmRet) String() string { return proto.CompactTextString(m) }
func (*LazanScheduleVmRet) ProtoMessage()    {}
func (*LazanScheduleVmRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{321}
}

func (m *LazanScheduleVmRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanScheduleVmRet.Unmarshal(m, b)
}
func (m *LazanScheduleVmRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanScheduleVmRet.Marshal(b, m, deterministic)
}
func (m *LazanScheduleVmRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanScheduleVmRet.Merge(m, src)
}
func (m *LazanScheduleVmRet) XXX_Size() int {
	return xxx_messageInfo_LazanScheduleVmRet.Size(m)
}
func (m *LazanScheduleVmRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanScheduleVmRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanScheduleVmRet proto.InternalMessageInfo

func (m *LazanScheduleVmRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type LazanScheduleVmTaskRet struct {
	// The uuid of the parcel that is created for the VM.
	ParcelUuid           []byte   `protobuf:"bytes,1,opt,name=parcel_uuid,json=parcelUuid" json:"parcel_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanScheduleVmTaskRet) Reset()         { *m = LazanScheduleVmTaskRet{} }
func (m *LazanScheduleVmTaskRet) String() string { return proto.CompactTextString(m) }
func (*LazanScheduleVmTaskRet) ProtoMessage()    {}
func (*LazanScheduleVmTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{322}
}

func (m *LazanScheduleVmTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanScheduleVmTaskRet.Unmarshal(m, b)
}
func (m *LazanScheduleVmTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanScheduleVmTaskRet.Marshal(b, m, deterministic)
}
func (m *LazanScheduleVmTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanScheduleVmTaskRet.Merge(m, src)
}
func (m *LazanScheduleVmTaskRet) XXX_Size() int {
	return xxx_messageInfo_LazanScheduleVmTaskRet.Size(m)
}
func (m *LazanScheduleVmTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanScheduleVmTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanScheduleVmTaskRet proto.InternalMessageInfo

func (m *LazanScheduleVmTaskRet) GetParcelUuid() []byte {
	if m != nil {
		return m.ParcelUuid
	}
	return nil
}

type LazanGetSegmentAssignmentArg struct {
	// UUID of the source node.
	NodeUuid []byte `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	// UUID of the VM that is moving.
	VmUuid               []byte   `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetSegmentAssignmentArg) Reset()         { *m = LazanGetSegmentAssignmentArg{} }
func (m *LazanGetSegmentAssignmentArg) String() string { return proto.CompactTextString(m) }
func (*LazanGetSegmentAssignmentArg) ProtoMessage()    {}
func (*LazanGetSegmentAssignmentArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{323}
}

func (m *LazanGetSegmentAssignmentArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetSegmentAssignmentArg.Unmarshal(m, b)
}
func (m *LazanGetSegmentAssignmentArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetSegmentAssignmentArg.Marshal(b, m, deterministic)
}
func (m *LazanGetSegmentAssignmentArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetSegmentAssignmentArg.Merge(m, src)
}
func (m *LazanGetSegmentAssignmentArg) XXX_Size() int {
	return xxx_messageInfo_LazanGetSegmentAssignmentArg.Size(m)
}
func (m *LazanGetSegmentAssignmentArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetSegmentAssignmentArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetSegmentAssignmentArg proto.InternalMessageInfo

func (m *LazanGetSegmentAssignmentArg) GetNodeUuid() []byte {
	if m != nil {
		return m.NodeUuid
	}
	return nil
}

func (m *LazanGetSegmentAssignmentArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

type LazanGetSegmentAssignmentRet struct {
	// UUID of the destination node, or None if no assignment available.
	DestNodeUuid         []byte   `protobuf:"bytes,1,opt,name=dest_node_uuid,json=destNodeUuid" json:"dest_node_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetSegmentAssignmentRet) Reset()         { *m = LazanGetSegmentAssignmentRet{} }
func (m *LazanGetSegmentAssignmentRet) String() string { return proto.CompactTextString(m) }
func (*LazanGetSegmentAssignmentRet) ProtoMessage()    {}
func (*LazanGetSegmentAssignmentRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{324}
}

func (m *LazanGetSegmentAssignmentRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetSegmentAssignmentRet.Unmarshal(m, b)
}
func (m *LazanGetSegmentAssignmentRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetSegmentAssignmentRet.Marshal(b, m, deterministic)
}
func (m *LazanGetSegmentAssignmentRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetSegmentAssignmentRet.Merge(m, src)
}
func (m *LazanGetSegmentAssignmentRet) XXX_Size() int {
	return xxx_messageInfo_LazanGetSegmentAssignmentRet.Size(m)
}
func (m *LazanGetSegmentAssignmentRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetSegmentAssignmentRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetSegmentAssignmentRet proto.InternalMessageInfo

func (m *LazanGetSegmentAssignmentRet) GetDestNodeUuid() []byte {
	if m != nil {
		return m.DestNodeUuid
	}
	return nil
}

type LazanGetHighPriorityHostsArg struct {
	// Number of host UUIDs requested.
	NumHosts             *uint64  `protobuf:"varint,1,opt,name=num_hosts,json=numHosts" json:"num_hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetHighPriorityHostsArg) Reset()         { *m = LazanGetHighPriorityHostsArg{} }
func (m *LazanGetHighPriorityHostsArg) String() string { return proto.CompactTextString(m) }
func (*LazanGetHighPriorityHostsArg) ProtoMessage()    {}
func (*LazanGetHighPriorityHostsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{325}
}

func (m *LazanGetHighPriorityHostsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetHighPriorityHostsArg.Unmarshal(m, b)
}
func (m *LazanGetHighPriorityHostsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetHighPriorityHostsArg.Marshal(b, m, deterministic)
}
func (m *LazanGetHighPriorityHostsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetHighPriorityHostsArg.Merge(m, src)
}
func (m *LazanGetHighPriorityHostsArg) XXX_Size() int {
	return xxx_messageInfo_LazanGetHighPriorityHostsArg.Size(m)
}
func (m *LazanGetHighPriorityHostsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetHighPriorityHostsArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetHighPriorityHostsArg proto.InternalMessageInfo

func (m *LazanGetHighPriorityHostsArg) GetNumHosts() uint64 {
	if m != nil && m.NumHosts != nil {
		return *m.NumHosts
	}
	return 0
}

type LazanGetHighPriorityHostsRet struct {
	// A list of host UUIDs.
	HostUuidList         [][]byte `protobuf:"bytes,1,rep,name=host_uuid_list,json=hostUuidList" json:"host_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetHighPriorityHostsRet) Reset()         { *m = LazanGetHighPriorityHostsRet{} }
func (m *LazanGetHighPriorityHostsRet) String() string { return proto.CompactTextString(m) }
func (*LazanGetHighPriorityHostsRet) ProtoMessage()    {}
func (*LazanGetHighPriorityHostsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{326}
}

func (m *LazanGetHighPriorityHostsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetHighPriorityHostsRet.Unmarshal(m, b)
}
func (m *LazanGetHighPriorityHostsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetHighPriorityHostsRet.Marshal(b, m, deterministic)
}
func (m *LazanGetHighPriorityHostsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetHighPriorityHostsRet.Merge(m, src)
}
func (m *LazanGetHighPriorityHostsRet) XXX_Size() int {
	return xxx_messageInfo_LazanGetHighPriorityHostsRet.Size(m)
}
func (m *LazanGetHighPriorityHostsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetHighPriorityHostsRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetHighPriorityHostsRet proto.InternalMessageInfo

func (m *LazanGetHighPriorityHostsRet) GetHostUuidList() [][]byte {
	if m != nil {
		return m.HostUuidList
	}
	return nil
}

type LazanGetSchedulerStateArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetSchedulerStateArg) Reset()         { *m = LazanGetSchedulerStateArg{} }
func (m *LazanGetSchedulerStateArg) String() string { return proto.CompactTextString(m) }
func (*LazanGetSchedulerStateArg) ProtoMessage()    {}
func (*LazanGetSchedulerStateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{327}
}

func (m *LazanGetSchedulerStateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetSchedulerStateArg.Unmarshal(m, b)
}
func (m *LazanGetSchedulerStateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetSchedulerStateArg.Marshal(b, m, deterministic)
}
func (m *LazanGetSchedulerStateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetSchedulerStateArg.Merge(m, src)
}
func (m *LazanGetSchedulerStateArg) XXX_Size() int {
	return xxx_messageInfo_LazanGetSchedulerStateArg.Size(m)
}
func (m *LazanGetSchedulerStateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetSchedulerStateArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetSchedulerStateArg proto.InternalMessageInfo

type LazanGetSchedulerStateRet struct {
	// A list of host's scheduler information.
	NodeInfoList []*SchedulerNodeInfo `protobuf:"bytes,1,rep,name=node_info_list,json=nodeInfoList" json:"node_info_list,omitempty"`
	// Parcel infromation.
	Record []*LazanGetSchedulerStateRet_SchedulerRecord `protobuf:"bytes,2,rep,name=record" json:"record,omitempty"`
	// Scheduler's internal memory details for every host.
	SchedInternalState []*LazanGetSchedulerStateRet_SchedulerInternalNodeState `protobuf:"bytes,3,rep,name=sched_internal_state,json=schedInternalState" json:"sched_internal_state,omitempty"`
	// Parcel specification of the VMs for which failure has occured.
	ParcelSpecs []*ParcelCreateSpec `protobuf:"bytes,5,rep,name=parcel_specs,json=parcelSpecs" json:"parcel_specs,omitempty"`
	// Segment information.
	AssignmentRecord     []*LazanGetSchedulerStateRet_AssignmentRecord `protobuf:"bytes,6,rep,name=assignment_record,json=assignmentRecord" json:"assignment_record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *LazanGetSchedulerStateRet) Reset()         { *m = LazanGetSchedulerStateRet{} }
func (m *LazanGetSchedulerStateRet) String() string { return proto.CompactTextString(m) }
func (*LazanGetSchedulerStateRet) ProtoMessage()    {}
func (*LazanGetSchedulerStateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{328}
}

func (m *LazanGetSchedulerStateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetSchedulerStateRet.Unmarshal(m, b)
}
func (m *LazanGetSchedulerStateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetSchedulerStateRet.Marshal(b, m, deterministic)
}
func (m *LazanGetSchedulerStateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetSchedulerStateRet.Merge(m, src)
}
func (m *LazanGetSchedulerStateRet) XXX_Size() int {
	return xxx_messageInfo_LazanGetSchedulerStateRet.Size(m)
}
func (m *LazanGetSchedulerStateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetSchedulerStateRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetSchedulerStateRet proto.InternalMessageInfo

func (m *LazanGetSchedulerStateRet) GetNodeInfoList() []*SchedulerNodeInfo {
	if m != nil {
		return m.NodeInfoList
	}
	return nil
}

func (m *LazanGetSchedulerStateRet) GetRecord() []*LazanGetSchedulerStateRet_SchedulerRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *LazanGetSchedulerStateRet) GetSchedInternalState() []*LazanGetSchedulerStateRet_SchedulerInternalNodeState {
	if m != nil {
		return m.SchedInternalState
	}
	return nil
}

func (m *LazanGetSchedulerStateRet) GetParcelSpecs() []*ParcelCreateSpec {
	if m != nil {
		return m.ParcelSpecs
	}
	return nil
}

func (m *LazanGetSchedulerStateRet) GetAssignmentRecord() []*LazanGetSchedulerStateRet_AssignmentRecord {
	if m != nil {
		return m.AssignmentRecord
	}
	return nil
}

type LazanGetSchedulerStateRet_SchedulerRecord struct {
	// The uuid of the entity to which this record applies.
	EntityUuid []byte `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid" json:"entity_uuid,omitempty"`
	// Entity's memory size. In case of memory overcommit, this indicates the
	// amount of memory allocated currently which is different from the
	// configured memory for the entity.
	MemorySizeBytes *int64 `protobuf:"varint,2,opt,name=memory_size_bytes,json=memorySizeBytes" json:"memory_size_bytes,omitempty"`
	// Number of VCPUs.
	NumCpus *int64 `protobuf:"varint,3,opt,name=num_cpus,json=numCpus" json:"num_cpus,omitempty"`
	// Cpu usage.
	CpuUsagePpm *int64 `protobuf:"varint,4,opt,name=cpu_usage_ppm,json=cpuUsagePpm" json:"cpu_usage_ppm,omitempty"`
	// Node on which this VM was scheduled.
	NodeUuid []byte `protobuf:"bytes,5,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	// Hypervisor memory overhead for this entity.
	HvOverhead *int64 `protobuf:"varint,6,opt,name=hv_overhead,json=hvOverhead" json:"hv_overhead,omitempty"`
	// Whether the entity is HA-protected.
	HaProtected *bool `protobuf:"varint,7,opt,name=ha_protected,json=haProtected" json:"ha_protected,omitempty"`
	// Number of vNICs.
	NumVnics *uint64 `protobuf:"varint,8,opt,name=num_vnics,json=numVnics" json:"num_vnics,omitempty"`
	// Affinity spec to uphold.
	HostAffinity *Affinity `protobuf:"bytes,9,opt,name=host_affinity,json=hostAffinity" json:"host_affinity,omitempty"`
	// Whether the entity is memory overcommitted.
	MemoryOvercommit *bool `protobuf:"varint,10,opt,name=memory_overcommit,json=memoryOvercommit" json:"memory_overcommit,omitempty"`
	// Entity's configured memory size.
	ConfiguredMemorySizeBytes *int64   `protobuf:"varint,11,opt,name=configured_memory_size_bytes,json=configuredMemorySizeBytes" json:"configured_memory_size_bytes,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) Reset() {
	*m = LazanGetSchedulerStateRet_SchedulerRecord{}
}
func (m *LazanGetSchedulerStateRet_SchedulerRecord) String() string { return proto.CompactTextString(m) }
func (*LazanGetSchedulerStateRet_SchedulerRecord) ProtoMessage()    {}
func (*LazanGetSchedulerStateRet_SchedulerRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{328, 0}
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerRecord.Unmarshal(m, b)
}
func (m *LazanGetSchedulerStateRet_SchedulerRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerRecord.Marshal(b, m, deterministic)
}
func (m *LazanGetSchedulerStateRet_SchedulerRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerRecord.Merge(m, src)
}
func (m *LazanGetSchedulerStateRet_SchedulerRecord) XXX_Size() int {
	return xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerRecord.Size(m)
}
func (m *LazanGetSchedulerStateRet_SchedulerRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerRecord proto.InternalMessageInfo

func (m *LazanGetSchedulerStateRet_SchedulerRecord) GetEntityUuid() []byte {
	if m != nil {
		return m.EntityUuid
	}
	return nil
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) GetMemorySizeBytes() int64 {
	if m != nil && m.MemorySizeBytes != nil {
		return *m.MemorySizeBytes
	}
	return 0
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) GetNumCpus() int64 {
	if m != nil && m.NumCpus != nil {
		return *m.NumCpus
	}
	return 0
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) GetCpuUsagePpm() int64 {
	if m != nil && m.CpuUsagePpm != nil {
		return *m.CpuUsagePpm
	}
	return 0
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) GetNodeUuid() []byte {
	if m != nil {
		return m.NodeUuid
	}
	return nil
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) GetHvOverhead() int64 {
	if m != nil && m.HvOverhead != nil {
		return *m.HvOverhead
	}
	return 0
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) GetHaProtected() bool {
	if m != nil && m.HaProtected != nil {
		return *m.HaProtected
	}
	return false
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) GetNumVnics() uint64 {
	if m != nil && m.NumVnics != nil {
		return *m.NumVnics
	}
	return 0
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) GetHostAffinity() *Affinity {
	if m != nil {
		return m.HostAffinity
	}
	return nil
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) GetMemoryOvercommit() bool {
	if m != nil && m.MemoryOvercommit != nil {
		return *m.MemoryOvercommit
	}
	return false
}

func (m *LazanGetSchedulerStateRet_SchedulerRecord) GetConfiguredMemorySizeBytes() int64 {
	if m != nil && m.ConfiguredMemorySizeBytes != nil {
		return *m.ConfiguredMemorySizeBytes
	}
	return 0
}

// A structure to store host information as per the scheduler for debugging
// wrong memory accounting.
type LazanGetSchedulerStateRet_SchedulerInternalNodeState struct {
	// UUID of the scheduler host.
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// Total memory used on the node as a part of host overheads.
	HostMemOverhead *uint64 `protobuf:"varint,2,opt,name=host_mem_overhead,json=hostMemOverhead" json:"host_mem_overhead,omitempty"`
	// Extra memory considered by scheduler as a part of overheads on the host.
	// It is calculated by summing up VM overheads, host overheads and VM's
	// configured memory and then subtracting actual host memory usage.
	MemBuffer *int64 `protobuf:"varint,3,opt,name=mem_buffer,json=memBuffer" json:"mem_buffer,omitempty"`
	// Amount of memory on the host that could not be converted to hugepages due
	// to fragmentation.
	HugepageFragmentation *uint64  `protobuf:"varint,4,opt,name=hugepage_fragmentation,json=hugepageFragmentation" json:"hugepage_fragmentation,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *LazanGetSchedulerStateRet_SchedulerInternalNodeState) Reset() {
	*m = LazanGetSchedulerStateRet_SchedulerInternalNodeState{}
}
func (m *LazanGetSchedulerStateRet_SchedulerInternalNodeState) String() string {
	return proto.CompactTextString(m)
}
func (*LazanGetSchedulerStateRet_SchedulerInternalNodeState) ProtoMessage() {}
func (*LazanGetSchedulerStateRet_SchedulerInternalNodeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{328, 1}
}

func (m *LazanGetSchedulerStateRet_SchedulerInternalNodeState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerInternalNodeState.Unmarshal(m, b)
}
func (m *LazanGetSchedulerStateRet_SchedulerInternalNodeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerInternalNodeState.Marshal(b, m, deterministic)
}
func (m *LazanGetSchedulerStateRet_SchedulerInternalNodeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerInternalNodeState.Merge(m, src)
}
func (m *LazanGetSchedulerStateRet_SchedulerInternalNodeState) XXX_Size() int {
	return xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerInternalNodeState.Size(m)
}
func (m *LazanGetSchedulerStateRet_SchedulerInternalNodeState) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerInternalNodeState.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetSchedulerStateRet_SchedulerInternalNodeState proto.InternalMessageInfo

func (m *LazanGetSchedulerStateRet_SchedulerInternalNodeState) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *LazanGetSchedulerStateRet_SchedulerInternalNodeState) GetHostMemOverhead() uint64 {
	if m != nil && m.HostMemOverhead != nil {
		return *m.HostMemOverhead
	}
	return 0
}

func (m *LazanGetSchedulerStateRet_SchedulerInternalNodeState) GetMemBuffer() int64 {
	if m != nil && m.MemBuffer != nil {
		return *m.MemBuffer
	}
	return 0
}

func (m *LazanGetSchedulerStateRet_SchedulerInternalNodeState) GetHugepageFragmentation() uint64 {
	if m != nil && m.HugepageFragmentation != nil {
		return *m.HugepageFragmentation
	}
	return 0
}

type LazanGetSchedulerStateRet_AssignmentRecord struct {
	// UUID of the scheduler host.
	NodeUuid []byte `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	// Memory assigned for this failover entity.
	EntityUsage *uint64 `protobuf:"varint,2,opt,name=entity_usage,json=entityUsage" json:"entity_usage,omitempty"`
	// Affinity spec to uphold.
	HostAffinity *Affinity `protobuf:"bytes,3,opt,name=host_affinity,json=hostAffinity" json:"host_affinity,omitempty"`
	// UUID of the corresponding entity to which this segment belongs.
	EntityUuid           []byte   `protobuf:"bytes,4,opt,name=entity_uuid,json=entityUuid" json:"entity_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetSchedulerStateRet_AssignmentRecord) Reset() {
	*m = LazanGetSchedulerStateRet_AssignmentRecord{}
}
func (m *LazanGetSchedulerStateRet_AssignmentRecord) String() string {
	return proto.CompactTextString(m)
}
func (*LazanGetSchedulerStateRet_AssignmentRecord) ProtoMessage() {}
func (*LazanGetSchedulerStateRet_AssignmentRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{328, 2}
}

func (m *LazanGetSchedulerStateRet_AssignmentRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetSchedulerStateRet_AssignmentRecord.Unmarshal(m, b)
}
func (m *LazanGetSchedulerStateRet_AssignmentRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetSchedulerStateRet_AssignmentRecord.Marshal(b, m, deterministic)
}
func (m *LazanGetSchedulerStateRet_AssignmentRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetSchedulerStateRet_AssignmentRecord.Merge(m, src)
}
func (m *LazanGetSchedulerStateRet_AssignmentRecord) XXX_Size() int {
	return xxx_messageInfo_LazanGetSchedulerStateRet_AssignmentRecord.Size(m)
}
func (m *LazanGetSchedulerStateRet_AssignmentRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetSchedulerStateRet_AssignmentRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetSchedulerStateRet_AssignmentRecord proto.InternalMessageInfo

func (m *LazanGetSchedulerStateRet_AssignmentRecord) GetNodeUuid() []byte {
	if m != nil {
		return m.NodeUuid
	}
	return nil
}

func (m *LazanGetSchedulerStateRet_AssignmentRecord) GetEntityUsage() uint64 {
	if m != nil && m.EntityUsage != nil {
		return *m.EntityUsage
	}
	return 0
}

func (m *LazanGetSchedulerStateRet_AssignmentRecord) GetHostAffinity() *Affinity {
	if m != nil {
		return m.HostAffinity
	}
	return nil
}

func (m *LazanGetSchedulerStateRet_AssignmentRecord) GetEntityUuid() []byte {
	if m != nil {
		return m.EntityUuid
	}
	return nil
}

type LazanGetVmParcelsArg struct {
	// Entity UUID.
	EntityUuid []byte `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid" json:"entity_uuid,omitempty"`
	// Host UUID where VM is currently powered on. It is used to identify the
	// current parcel.
	HostUuid             []byte   `protobuf:"bytes,2,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetVmParcelsArg) Reset()         { *m = LazanGetVmParcelsArg{} }
func (m *LazanGetVmParcelsArg) String() string { return proto.CompactTextString(m) }
func (*LazanGetVmParcelsArg) ProtoMessage()    {}
func (*LazanGetVmParcelsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{329}
}

func (m *LazanGetVmParcelsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetVmParcelsArg.Unmarshal(m, b)
}
func (m *LazanGetVmParcelsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetVmParcelsArg.Marshal(b, m, deterministic)
}
func (m *LazanGetVmParcelsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetVmParcelsArg.Merge(m, src)
}
func (m *LazanGetVmParcelsArg) XXX_Size() int {
	return xxx_messageInfo_LazanGetVmParcelsArg.Size(m)
}
func (m *LazanGetVmParcelsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetVmParcelsArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetVmParcelsArg proto.InternalMessageInfo

func (m *LazanGetVmParcelsArg) GetEntityUuid() []byte {
	if m != nil {
		return m.EntityUuid
	}
	return nil
}

func (m *LazanGetVmParcelsArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

type LazanGetVmParcelsRet struct {
	// Current parcel UUID that VM owns.
	CurrentParcelUuid []byte `protobuf:"bytes,1,opt,name=current_parcel_uuid,json=currentParcelUuid" json:"current_parcel_uuid,omitempty"`
	// Migrate parcel UUID that VM is migrating to.
	MigrateParcelUuid    []byte   `protobuf:"bytes,2,opt,name=migrate_parcel_uuid,json=migrateParcelUuid" json:"migrate_parcel_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetVmParcelsRet) Reset()         { *m = LazanGetVmParcelsRet{} }
func (m *LazanGetVmParcelsRet) String() string { return proto.CompactTextString(m) }
func (*LazanGetVmParcelsRet) ProtoMessage()    {}
func (*LazanGetVmParcelsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{330}
}

func (m *LazanGetVmParcelsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetVmParcelsRet.Unmarshal(m, b)
}
func (m *LazanGetVmParcelsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetVmParcelsRet.Marshal(b, m, deterministic)
}
func (m *LazanGetVmParcelsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetVmParcelsRet.Merge(m, src)
}
func (m *LazanGetVmParcelsRet) XXX_Size() int {
	return xxx_messageInfo_LazanGetVmParcelsRet.Size(m)
}
func (m *LazanGetVmParcelsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetVmParcelsRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetVmParcelsRet proto.InternalMessageInfo

func (m *LazanGetVmParcelsRet) GetCurrentParcelUuid() []byte {
	if m != nil {
		return m.CurrentParcelUuid
	}
	return nil
}

func (m *LazanGetVmParcelsRet) GetMigrateParcelUuid() []byte {
	if m != nil {
		return m.MigrateParcelUuid
	}
	return nil
}

type LazanGetEntityNodesArg struct {
	// Entity UUID.
	EntityUuid           []byte   `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid" json:"entity_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetEntityNodesArg) Reset()         { *m = LazanGetEntityNodesArg{} }
func (m *LazanGetEntityNodesArg) String() string { return proto.CompactTextString(m) }
func (*LazanGetEntityNodesArg) ProtoMessage()    {}
func (*LazanGetEntityNodesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{331}
}

func (m *LazanGetEntityNodesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetEntityNodesArg.Unmarshal(m, b)
}
func (m *LazanGetEntityNodesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetEntityNodesArg.Marshal(b, m, deterministic)
}
func (m *LazanGetEntityNodesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetEntityNodesArg.Merge(m, src)
}
func (m *LazanGetEntityNodesArg) XXX_Size() int {
	return xxx_messageInfo_LazanGetEntityNodesArg.Size(m)
}
func (m *LazanGetEntityNodesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetEntityNodesArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetEntityNodesArg proto.InternalMessageInfo

func (m *LazanGetEntityNodesArg) GetEntityUuid() []byte {
	if m != nil {
		return m.EntityUuid
	}
	return nil
}

type LazanGetEntityNodesRet struct {
	// A list of node UUIDs.
	NodeUuidList         [][]byte `protobuf:"bytes,1,rep,name=node_uuid_list,json=nodeUuidList" json:"node_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetEntityNodesRet) Reset()         { *m = LazanGetEntityNodesRet{} }
func (m *LazanGetEntityNodesRet) String() string { return proto.CompactTextString(m) }
func (*LazanGetEntityNodesRet) ProtoMessage()    {}
func (*LazanGetEntityNodesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{332}
}

func (m *LazanGetEntityNodesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetEntityNodesRet.Unmarshal(m, b)
}
func (m *LazanGetEntityNodesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetEntityNodesRet.Marshal(b, m, deterministic)
}
func (m *LazanGetEntityNodesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetEntityNodesRet.Merge(m, src)
}
func (m *LazanGetEntityNodesRet) XXX_Size() int {
	return xxx_messageInfo_LazanGetEntityNodesRet.Size(m)
}
func (m *LazanGetEntityNodesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetEntityNodesRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetEntityNodesRet proto.InternalMessageInfo

func (m *LazanGetEntityNodesRet) GetNodeUuidList() [][]byte {
	if m != nil {
		return m.NodeUuidList
	}
	return nil
}

type LazanGetMigrateDestinationArg struct {
	// Entity UUID.
	EntityUuid []byte `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid" json:"entity_uuid,omitempty"`
	// Host UUID where VM is currently powered on. It is used to identify the
	// migrate parcel.
	HostUuid             []byte   `protobuf:"bytes,2,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetMigrateDestinationArg) Reset()         { *m = LazanGetMigrateDestinationArg{} }
func (m *LazanGetMigrateDestinationArg) String() string { return proto.CompactTextString(m) }
func (*LazanGetMigrateDestinationArg) ProtoMessage()    {}
func (*LazanGetMigrateDestinationArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{333}
}

func (m *LazanGetMigrateDestinationArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetMigrateDestinationArg.Unmarshal(m, b)
}
func (m *LazanGetMigrateDestinationArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetMigrateDestinationArg.Marshal(b, m, deterministic)
}
func (m *LazanGetMigrateDestinationArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetMigrateDestinationArg.Merge(m, src)
}
func (m *LazanGetMigrateDestinationArg) XXX_Size() int {
	return xxx_messageInfo_LazanGetMigrateDestinationArg.Size(m)
}
func (m *LazanGetMigrateDestinationArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetMigrateDestinationArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetMigrateDestinationArg proto.InternalMessageInfo

func (m *LazanGetMigrateDestinationArg) GetEntityUuid() []byte {
	if m != nil {
		return m.EntityUuid
	}
	return nil
}

func (m *LazanGetMigrateDestinationArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

type LazanGetMigrateDestinationRet struct {
	// Migration node UUID if any, else None.
	NodeUuid             []byte   `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanGetMigrateDestinationRet) Reset()         { *m = LazanGetMigrateDestinationRet{} }
func (m *LazanGetMigrateDestinationRet) String() string { return proto.CompactTextString(m) }
func (*LazanGetMigrateDestinationRet) ProtoMessage()    {}
func (*LazanGetMigrateDestinationRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{334}
}

func (m *LazanGetMigrateDestinationRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanGetMigrateDestinationRet.Unmarshal(m, b)
}
func (m *LazanGetMigrateDestinationRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanGetMigrateDestinationRet.Marshal(b, m, deterministic)
}
func (m *LazanGetMigrateDestinationRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanGetMigrateDestinationRet.Merge(m, src)
}
func (m *LazanGetMigrateDestinationRet) XXX_Size() int {
	return xxx_messageInfo_LazanGetMigrateDestinationRet.Size(m)
}
func (m *LazanGetMigrateDestinationRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanGetMigrateDestinationRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanGetMigrateDestinationRet proto.InternalMessageInfo

func (m *LazanGetMigrateDestinationRet) GetNodeUuid() []byte {
	if m != nil {
		return m.NodeUuid
	}
	return nil
}

type GetVmsToRebootArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVmsToRebootArg) Reset()         { *m = GetVmsToRebootArg{} }
func (m *GetVmsToRebootArg) String() string { return proto.CompactTextString(m) }
func (*GetVmsToRebootArg) ProtoMessage()    {}
func (*GetVmsToRebootArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{335}
}

func (m *GetVmsToRebootArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVmsToRebootArg.Unmarshal(m, b)
}
func (m *GetVmsToRebootArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVmsToRebootArg.Marshal(b, m, deterministic)
}
func (m *GetVmsToRebootArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVmsToRebootArg.Merge(m, src)
}
func (m *GetVmsToRebootArg) XXX_Size() int {
	return xxx_messageInfo_GetVmsToRebootArg.Size(m)
}
func (m *GetVmsToRebootArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVmsToRebootArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetVmsToRebootArg proto.InternalMessageInfo

type GetVmsToRebootRet struct {
	// List of VMs that need to reboot to align with the cluster's new baseline
	// cpu feature set.
	VmsToRebootCpuFeatures [][]byte `protobuf:"bytes,1,rep,name=vms_to_reboot_cpu_features,json=vmsToRebootCpuFeatures" json:"vms_to_reboot_cpu_features,omitempty"`
	// List of VMs that need to reboot to reset cpu topology so that migration
	// of VMs is successful during AHV upgrade.
	VmsToRebootCpuTopo   [][]byte `protobuf:"bytes,2,rep,name=vms_to_reboot_cpu_topo,json=vmsToRebootCpuTopo" json:"vms_to_reboot_cpu_topo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVmsToRebootRet) Reset()         { *m = GetVmsToRebootRet{} }
func (m *GetVmsToRebootRet) String() string { return proto.CompactTextString(m) }
func (*GetVmsToRebootRet) ProtoMessage()    {}
func (*GetVmsToRebootRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{336}
}

func (m *GetVmsToRebootRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVmsToRebootRet.Unmarshal(m, b)
}
func (m *GetVmsToRebootRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVmsToRebootRet.Marshal(b, m, deterministic)
}
func (m *GetVmsToRebootRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVmsToRebootRet.Merge(m, src)
}
func (m *GetVmsToRebootRet) XXX_Size() int {
	return xxx_messageInfo_GetVmsToRebootRet.Size(m)
}
func (m *GetVmsToRebootRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVmsToRebootRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetVmsToRebootRet proto.InternalMessageInfo

func (m *GetVmsToRebootRet) GetVmsToRebootCpuFeatures() [][]byte {
	if m != nil {
		return m.VmsToRebootCpuFeatures
	}
	return nil
}

func (m *GetVmsToRebootRet) GetVmsToRebootCpuTopo() [][]byte {
	if m != nil {
		return m.VmsToRebootCpuTopo
	}
	return nil
}

type LazanMaybeUpdateAffinityArg struct {
	// The UUID of the VM whose affinity mayhap to update.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The new affinity spec.
	NewAffinitySpec *EntityAffinitySpec `protobuf:"bytes,2,opt,name=new_affinity_spec,json=newAffinitySpec" json:"new_affinity_spec,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether this is an internal task not meant to be displayed in the UI.
	InternalTask *bool `protobuf:"varint,6,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether the UI should display failures from this task.
	DisplayFailures      *bool    `protobuf:"varint,7,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanMaybeUpdateAffinityArg) Reset()         { *m = LazanMaybeUpdateAffinityArg{} }
func (m *LazanMaybeUpdateAffinityArg) String() string { return proto.CompactTextString(m) }
func (*LazanMaybeUpdateAffinityArg) ProtoMessage()    {}
func (*LazanMaybeUpdateAffinityArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{337}
}

func (m *LazanMaybeUpdateAffinityArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanMaybeUpdateAffinityArg.Unmarshal(m, b)
}
func (m *LazanMaybeUpdateAffinityArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanMaybeUpdateAffinityArg.Marshal(b, m, deterministic)
}
func (m *LazanMaybeUpdateAffinityArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanMaybeUpdateAffinityArg.Merge(m, src)
}
func (m *LazanMaybeUpdateAffinityArg) XXX_Size() int {
	return xxx_messageInfo_LazanMaybeUpdateAffinityArg.Size(m)
}
func (m *LazanMaybeUpdateAffinityArg) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanMaybeUpdateAffinityArg.DiscardUnknown(m)
}

var xxx_messageInfo_LazanMaybeUpdateAffinityArg proto.InternalMessageInfo

func (m *LazanMaybeUpdateAffinityArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *LazanMaybeUpdateAffinityArg) GetNewAffinitySpec() *EntityAffinitySpec {
	if m != nil {
		return m.NewAffinitySpec
	}
	return nil
}

func (m *LazanMaybeUpdateAffinityArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *LazanMaybeUpdateAffinityArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *LazanMaybeUpdateAffinityArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *LazanMaybeUpdateAffinityArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *LazanMaybeUpdateAffinityArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

type LazanMaybeUpdateAffinityRet struct {
	// A task to poll for completion. On success, the task will contain a
	// LazanMaybeUpdateAffinityTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanMaybeUpdateAffinityRet) Reset()         { *m = LazanMaybeUpdateAffinityRet{} }
func (m *LazanMaybeUpdateAffinityRet) String() string { return proto.CompactTextString(m) }
func (*LazanMaybeUpdateAffinityRet) ProtoMessage()    {}
func (*LazanMaybeUpdateAffinityRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{338}
}

func (m *LazanMaybeUpdateAffinityRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanMaybeUpdateAffinityRet.Unmarshal(m, b)
}
func (m *LazanMaybeUpdateAffinityRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanMaybeUpdateAffinityRet.Marshal(b, m, deterministic)
}
func (m *LazanMaybeUpdateAffinityRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanMaybeUpdateAffinityRet.Merge(m, src)
}
func (m *LazanMaybeUpdateAffinityRet) XXX_Size() int {
	return xxx_messageInfo_LazanMaybeUpdateAffinityRet.Size(m)
}
func (m *LazanMaybeUpdateAffinityRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanMaybeUpdateAffinityRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanMaybeUpdateAffinityRet proto.InternalMessageInfo

func (m *LazanMaybeUpdateAffinityRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type LazanMaybeUpdateAffinityTaskRet struct {
	// Whether the update was performed.
	UpdatePerformed      *bool    `protobuf:"varint,1,opt,name=update_performed,json=updatePerformed" json:"update_performed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LazanMaybeUpdateAffinityTaskRet) Reset()         { *m = LazanMaybeUpdateAffinityTaskRet{} }
func (m *LazanMaybeUpdateAffinityTaskRet) String() string { return proto.CompactTextString(m) }
func (*LazanMaybeUpdateAffinityTaskRet) ProtoMessage()    {}
func (*LazanMaybeUpdateAffinityTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{339}
}

func (m *LazanMaybeUpdateAffinityTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LazanMaybeUpdateAffinityTaskRet.Unmarshal(m, b)
}
func (m *LazanMaybeUpdateAffinityTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LazanMaybeUpdateAffinityTaskRet.Marshal(b, m, deterministic)
}
func (m *LazanMaybeUpdateAffinityTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazanMaybeUpdateAffinityTaskRet.Merge(m, src)
}
func (m *LazanMaybeUpdateAffinityTaskRet) XXX_Size() int {
	return xxx_messageInfo_LazanMaybeUpdateAffinityTaskRet.Size(m)
}
func (m *LazanMaybeUpdateAffinityTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LazanMaybeUpdateAffinityTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_LazanMaybeUpdateAffinityTaskRet proto.InternalMessageInfo

func (m *LazanMaybeUpdateAffinityTaskRet) GetUpdatePerformed() bool {
	if m != nil && m.UpdatePerformed != nil {
		return *m.UpdatePerformed
	}
	return false
}

type ReservePerHostMemoryArg struct {
	// Amount of desired user space memory overhead to be reserved, in bytes.
	UserMemoryBytes *uint64 `protobuf:"varint,1,opt,name=user_memory_bytes,json=userMemoryBytes" json:"user_memory_bytes,omitempty"`
	// Amount of desired kernel space memory overhead to be reserved, in bytes.
	KernelMemoryBytes *uint64 `protobuf:"varint,2,opt,name=kernel_memory_bytes,json=kernelMemoryBytes" json:"kernel_memory_bytes,omitempty"`
	// Name of the component requesting adding or removing memory reservations
	// per host.
	ComponentName *string `protobuf:"bytes,3,opt,name=component_name,json=componentName" json:"component_name,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether this is an internal task not meant to be displayed in the UI.
	InternalTask *bool `protobuf:"varint,6,opt,name=internal_task,json=internalTask" json:"internal_task,omitempty"`
	// Whether the UI should display failures from this task.
	DisplayFailures      *bool    `protobuf:"varint,7,opt,name=display_failures,json=displayFailures" json:"display_failures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReservePerHostMemoryArg) Reset()         { *m = ReservePerHostMemoryArg{} }
func (m *ReservePerHostMemoryArg) String() string { return proto.CompactTextString(m) }
func (*ReservePerHostMemoryArg) ProtoMessage()    {}
func (*ReservePerHostMemoryArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{340}
}

func (m *ReservePerHostMemoryArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReservePerHostMemoryArg.Unmarshal(m, b)
}
func (m *ReservePerHostMemoryArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReservePerHostMemoryArg.Marshal(b, m, deterministic)
}
func (m *ReservePerHostMemoryArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReservePerHostMemoryArg.Merge(m, src)
}
func (m *ReservePerHostMemoryArg) XXX_Size() int {
	return xxx_messageInfo_ReservePerHostMemoryArg.Size(m)
}
func (m *ReservePerHostMemoryArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ReservePerHostMemoryArg.DiscardUnknown(m)
}

var xxx_messageInfo_ReservePerHostMemoryArg proto.InternalMessageInfo

func (m *ReservePerHostMemoryArg) GetUserMemoryBytes() uint64 {
	if m != nil && m.UserMemoryBytes != nil {
		return *m.UserMemoryBytes
	}
	return 0
}

func (m *ReservePerHostMemoryArg) GetKernelMemoryBytes() uint64 {
	if m != nil && m.KernelMemoryBytes != nil {
		return *m.KernelMemoryBytes
	}
	return 0
}

func (m *ReservePerHostMemoryArg) GetComponentName() string {
	if m != nil && m.ComponentName != nil {
		return *m.ComponentName
	}
	return ""
}

func (m *ReservePerHostMemoryArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *ReservePerHostMemoryArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *ReservePerHostMemoryArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return false
}

func (m *ReservePerHostMemoryArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return false
}

type ReservePerHostMemoryRet struct {
	// A task to poll for completion. On success, the task will contain a
	// ReservePerHostMemoryTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReservePerHostMemoryRet) Reset()         { *m = ReservePerHostMemoryRet{} }
func (m *ReservePerHostMemoryRet) String() string { return proto.CompactTextString(m) }
func (*ReservePerHostMemoryRet) ProtoMessage()    {}
func (*ReservePerHostMemoryRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{341}
}

func (m *ReservePerHostMemoryRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReservePerHostMemoryRet.Unmarshal(m, b)
}
func (m *ReservePerHostMemoryRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReservePerHostMemoryRet.Marshal(b, m, deterministic)
}
func (m *ReservePerHostMemoryRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReservePerHostMemoryRet.Merge(m, src)
}
func (m *ReservePerHostMemoryRet) XXX_Size() int {
	return xxx_messageInfo_ReservePerHostMemoryRet.Size(m)
}
func (m *ReservePerHostMemoryRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ReservePerHostMemoryRet.DiscardUnknown(m)
}

var xxx_messageInfo_ReservePerHostMemoryRet proto.InternalMessageInfo

func (m *ReservePerHostMemoryRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type ReservePerHostMemoryTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReservePerHostMemoryTaskRet) Reset()         { *m = ReservePerHostMemoryTaskRet{} }
func (m *ReservePerHostMemoryTaskRet) String() string { return proto.CompactTextString(m) }
func (*ReservePerHostMemoryTaskRet) ProtoMessage()    {}
func (*ReservePerHostMemoryTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{342}
}

func (m *ReservePerHostMemoryTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReservePerHostMemoryTaskRet.Unmarshal(m, b)
}
func (m *ReservePerHostMemoryTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReservePerHostMemoryTaskRet.Marshal(b, m, deterministic)
}
func (m *ReservePerHostMemoryTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReservePerHostMemoryTaskRet.Merge(m, src)
}
func (m *ReservePerHostMemoryTaskRet) XXX_Size() int {
	return xxx_messageInfo_ReservePerHostMemoryTaskRet.Size(m)
}
func (m *ReservePerHostMemoryTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ReservePerHostMemoryTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_ReservePerHostMemoryTaskRet proto.InternalMessageInfo

type ComponentMemoryReservationsGetArg struct {
	// Name of the component for which information about its memory reservations
	// is requested.
	ComponentName        *string  `protobuf:"bytes,1,opt,name=component_name,json=componentName" json:"component_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComponentMemoryReservationsGetArg) Reset()         { *m = ComponentMemoryReservationsGetArg{} }
func (m *ComponentMemoryReservationsGetArg) String() string { return proto.CompactTextString(m) }
func (*ComponentMemoryReservationsGetArg) ProtoMessage()    {}
func (*ComponentMemoryReservationsGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{343}
}

func (m *ComponentMemoryReservationsGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComponentMemoryReservationsGetArg.Unmarshal(m, b)
}
func (m *ComponentMemoryReservationsGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComponentMemoryReservationsGetArg.Marshal(b, m, deterministic)
}
func (m *ComponentMemoryReservationsGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentMemoryReservationsGetArg.Merge(m, src)
}
func (m *ComponentMemoryReservationsGetArg) XXX_Size() int {
	return xxx_messageInfo_ComponentMemoryReservationsGetArg.Size(m)
}
func (m *ComponentMemoryReservationsGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentMemoryReservationsGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentMemoryReservationsGetArg proto.InternalMessageInfo

func (m *ComponentMemoryReservationsGetArg) GetComponentName() string {
	if m != nil && m.ComponentName != nil {
		return *m.ComponentName
	}
	return ""
}

type ComponentMemoryReservationsGetRet struct {
	// Amount of user space memory overhead reserved per host in megabytes for the
	// requested component.
	UserMemoryMb *uint64 `protobuf:"varint,1,opt,name=user_memory_mb,json=userMemoryMb" json:"user_memory_mb,omitempty"`
	// Amount of kernel space memory overhead reserved per host in megabytes for
	// the requested component.
	KernelMemoryMb       *uint64  `protobuf:"varint,2,opt,name=kernel_memory_mb,json=kernelMemoryMb" json:"kernel_memory_mb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComponentMemoryReservationsGetRet) Reset()         { *m = ComponentMemoryReservationsGetRet{} }
func (m *ComponentMemoryReservationsGetRet) String() string { return proto.CompactTextString(m) }
func (*ComponentMemoryReservationsGetRet) ProtoMessage()    {}
func (*ComponentMemoryReservationsGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{344}
}

func (m *ComponentMemoryReservationsGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComponentMemoryReservationsGetRet.Unmarshal(m, b)
}
func (m *ComponentMemoryReservationsGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComponentMemoryReservationsGetRet.Marshal(b, m, deterministic)
}
func (m *ComponentMemoryReservationsGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentMemoryReservationsGetRet.Merge(m, src)
}
func (m *ComponentMemoryReservationsGetRet) XXX_Size() int {
	return xxx_messageInfo_ComponentMemoryReservationsGetRet.Size(m)
}
func (m *ComponentMemoryReservationsGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentMemoryReservationsGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentMemoryReservationsGetRet proto.InternalMessageInfo

func (m *ComponentMemoryReservationsGetRet) GetUserMemoryMb() uint64 {
	if m != nil && m.UserMemoryMb != nil {
		return *m.UserMemoryMb
	}
	return 0
}

func (m *ComponentMemoryReservationsGetRet) GetKernelMemoryMb() uint64 {
	if m != nil && m.KernelMemoryMb != nil {
		return *m.KernelMemoryMb
	}
	return 0
}

type ClusterVswitchCreateArg struct {
	// ClusterVswitch config.
	Config               *ClusterVswitchConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ClusterVswitchCreateArg) Reset()         { *m = ClusterVswitchCreateArg{} }
func (m *ClusterVswitchCreateArg) String() string { return proto.CompactTextString(m) }
func (*ClusterVswitchCreateArg) ProtoMessage()    {}
func (*ClusterVswitchCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{345}
}

func (m *ClusterVswitchCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterVswitchCreateArg.Unmarshal(m, b)
}
func (m *ClusterVswitchCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterVswitchCreateArg.Marshal(b, m, deterministic)
}
func (m *ClusterVswitchCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterVswitchCreateArg.Merge(m, src)
}
func (m *ClusterVswitchCreateArg) XXX_Size() int {
	return xxx_messageInfo_ClusterVswitchCreateArg.Size(m)
}
func (m *ClusterVswitchCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterVswitchCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterVswitchCreateArg proto.InternalMessageInfo

func (m *ClusterVswitchCreateArg) GetConfig() *ClusterVswitchConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type ClusterVswitchCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// ClusterVswitchCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterVswitchCreateRet) Reset()         { *m = ClusterVswitchCreateRet{} }
func (m *ClusterVswitchCreateRet) String() string { return proto.CompactTextString(m) }
func (*ClusterVswitchCreateRet) ProtoMessage()    {}
func (*ClusterVswitchCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{346}
}

func (m *ClusterVswitchCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterVswitchCreateRet.Unmarshal(m, b)
}
func (m *ClusterVswitchCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterVswitchCreateRet.Marshal(b, m, deterministic)
}
func (m *ClusterVswitchCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterVswitchCreateRet.Merge(m, src)
}
func (m *ClusterVswitchCreateRet) XXX_Size() int {
	return xxx_messageInfo_ClusterVswitchCreateRet.Size(m)
}
func (m *ClusterVswitchCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterVswitchCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterVswitchCreateRet proto.InternalMessageInfo

func (m *ClusterVswitchCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type ClusterVswitchCreateTaskRet struct {
	// Newly created cluster vswitch UUID.
	ClusterVswitchUuid   []byte   `protobuf:"bytes,1,opt,name=cluster_vswitch_uuid,json=clusterVswitchUuid" json:"cluster_vswitch_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterVswitchCreateTaskRet) Reset()         { *m = ClusterVswitchCreateTaskRet{} }
func (m *ClusterVswitchCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*ClusterVswitchCreateTaskRet) ProtoMessage()    {}
func (*ClusterVswitchCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{347}
}

func (m *ClusterVswitchCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterVswitchCreateTaskRet.Unmarshal(m, b)
}
func (m *ClusterVswitchCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterVswitchCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *ClusterVswitchCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterVswitchCreateTaskRet.Merge(m, src)
}
func (m *ClusterVswitchCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_ClusterVswitchCreateTaskRet.Size(m)
}
func (m *ClusterVswitchCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterVswitchCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterVswitchCreateTaskRet proto.InternalMessageInfo

func (m *ClusterVswitchCreateTaskRet) GetClusterVswitchUuid() []byte {
	if m != nil {
		return m.ClusterVswitchUuid
	}
	return nil
}

type ClusterVswitchUpdateArg struct {
	// ClusterVswitch config.
	Config               *ClusterVswitchConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ClusterVswitchUpdateArg) Reset()         { *m = ClusterVswitchUpdateArg{} }
func (m *ClusterVswitchUpdateArg) String() string { return proto.CompactTextString(m) }
func (*ClusterVswitchUpdateArg) ProtoMessage()    {}
func (*ClusterVswitchUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{348}
}

func (m *ClusterVswitchUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterVswitchUpdateArg.Unmarshal(m, b)
}
func (m *ClusterVswitchUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterVswitchUpdateArg.Marshal(b, m, deterministic)
}
func (m *ClusterVswitchUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterVswitchUpdateArg.Merge(m, src)
}
func (m *ClusterVswitchUpdateArg) XXX_Size() int {
	return xxx_messageInfo_ClusterVswitchUpdateArg.Size(m)
}
func (m *ClusterVswitchUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterVswitchUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterVswitchUpdateArg proto.InternalMessageInfo

func (m *ClusterVswitchUpdateArg) GetConfig() *ClusterVswitchConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type ClusterVswitchUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// ClusterVswitchUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterVswitchUpdateRet) Reset()         { *m = ClusterVswitchUpdateRet{} }
func (m *ClusterVswitchUpdateRet) String() string { return proto.CompactTextString(m) }
func (*ClusterVswitchUpdateRet) ProtoMessage()    {}
func (*ClusterVswitchUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{349}
}

func (m *ClusterVswitchUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterVswitchUpdateRet.Unmarshal(m, b)
}
func (m *ClusterVswitchUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterVswitchUpdateRet.Marshal(b, m, deterministic)
}
func (m *ClusterVswitchUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterVswitchUpdateRet.Merge(m, src)
}
func (m *ClusterVswitchUpdateRet) XXX_Size() int {
	return xxx_messageInfo_ClusterVswitchUpdateRet.Size(m)
}
func (m *ClusterVswitchUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterVswitchUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterVswitchUpdateRet proto.InternalMessageInfo

func (m *ClusterVswitchUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type ClusterVswitchUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterVswitchUpdateTaskRet) Reset()         { *m = ClusterVswitchUpdateTaskRet{} }
func (m *ClusterVswitchUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*ClusterVswitchUpdateTaskRet) ProtoMessage()    {}
func (*ClusterVswitchUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{350}
}

func (m *ClusterVswitchUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterVswitchUpdateTaskRet.Unmarshal(m, b)
}
func (m *ClusterVswitchUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterVswitchUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *ClusterVswitchUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterVswitchUpdateTaskRet.Merge(m, src)
}
func (m *ClusterVswitchUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_ClusterVswitchUpdateTaskRet.Size(m)
}
func (m *ClusterVswitchUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterVswitchUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterVswitchUpdateTaskRet proto.InternalMessageInfo

type ClusterVswitchGetArg struct {
	// The list of UUID of the bridges to lookup.
	ClusterVswitchUuidList [][]byte `protobuf:"bytes,1,rep,name=cluster_vswitch_uuid_list,json=clusterVswitchUuidList" json:"cluster_vswitch_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ClusterVswitchGetArg) Reset()         { *m = ClusterVswitchGetArg{} }
func (m *ClusterVswitchGetArg) String() string { return proto.CompactTextString(m) }
func (*ClusterVswitchGetArg) ProtoMessage()    {}
func (*ClusterVswitchGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{351}
}

func (m *ClusterVswitchGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterVswitchGetArg.Unmarshal(m, b)
}
func (m *ClusterVswitchGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterVswitchGetArg.Marshal(b, m, deterministic)
}
func (m *ClusterVswitchGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterVswitchGetArg.Merge(m, src)
}
func (m *ClusterVswitchGetArg) XXX_Size() int {
	return xxx_messageInfo_ClusterVswitchGetArg.Size(m)
}
func (m *ClusterVswitchGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterVswitchGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterVswitchGetArg proto.InternalMessageInfo

func (m *ClusterVswitchGetArg) GetClusterVswitchUuidList() [][]byte {
	if m != nil {
		return m.ClusterVswitchUuidList
	}
	return nil
}

type ClusterVswitchGetRet struct {
	// The list of lookup results.
	ClusterVswitchConfigList []*ClusterVswitchConfig `protobuf:"bytes,1,rep,name=cluster_vswitch_config_list,json=clusterVswitchConfigList" json:"cluster_vswitch_config_list,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                `json:"-"`
	XXX_unrecognized         []byte                  `json:"-"`
	XXX_sizecache            int32                   `json:"-"`
}

func (m *ClusterVswitchGetRet) Reset()         { *m = ClusterVswitchGetRet{} }
func (m *ClusterVswitchGetRet) String() string { return proto.CompactTextString(m) }
func (*ClusterVswitchGetRet) ProtoMessage()    {}
func (*ClusterVswitchGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{352}
}

func (m *ClusterVswitchGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterVswitchGetRet.Unmarshal(m, b)
}
func (m *ClusterVswitchGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterVswitchGetRet.Marshal(b, m, deterministic)
}
func (m *ClusterVswitchGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterVswitchGetRet.Merge(m, src)
}
func (m *ClusterVswitchGetRet) XXX_Size() int {
	return xxx_messageInfo_ClusterVswitchGetRet.Size(m)
}
func (m *ClusterVswitchGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterVswitchGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterVswitchGetRet proto.InternalMessageInfo

func (m *ClusterVswitchGetRet) GetClusterVswitchConfigList() []*ClusterVswitchConfig {
	if m != nil {
		return m.ClusterVswitchConfigList
	}
	return nil
}

type ClusterVswitchDeleteArg struct {
	// The bridge identifier.
	BridgeUuid           []byte   `protobuf:"bytes,1,opt,name=bridge_uuid,json=bridgeUuid" json:"bridge_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterVswitchDeleteArg) Reset()         { *m = ClusterVswitchDeleteArg{} }
func (m *ClusterVswitchDeleteArg) String() string { return proto.CompactTextString(m) }
func (*ClusterVswitchDeleteArg) ProtoMessage()    {}
func (*ClusterVswitchDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{353}
}

func (m *ClusterVswitchDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterVswitchDeleteArg.Unmarshal(m, b)
}
func (m *ClusterVswitchDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterVswitchDeleteArg.Marshal(b, m, deterministic)
}
func (m *ClusterVswitchDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterVswitchDeleteArg.Merge(m, src)
}
func (m *ClusterVswitchDeleteArg) XXX_Size() int {
	return xxx_messageInfo_ClusterVswitchDeleteArg.Size(m)
}
func (m *ClusterVswitchDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterVswitchDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterVswitchDeleteArg proto.InternalMessageInfo

func (m *ClusterVswitchDeleteArg) GetBridgeUuid() []byte {
	if m != nil {
		return m.BridgeUuid
	}
	return nil
}

type ClusterVswitchDeleteRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterVswitchDeleteRet) Reset()         { *m = ClusterVswitchDeleteRet{} }
func (m *ClusterVswitchDeleteRet) String() string { return proto.CompactTextString(m) }
func (*ClusterVswitchDeleteRet) ProtoMessage()    {}
func (*ClusterVswitchDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{354}
}

func (m *ClusterVswitchDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterVswitchDeleteRet.Unmarshal(m, b)
}
func (m *ClusterVswitchDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterVswitchDeleteRet.Marshal(b, m, deterministic)
}
func (m *ClusterVswitchDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterVswitchDeleteRet.Merge(m, src)
}
func (m *ClusterVswitchDeleteRet) XXX_Size() int {
	return xxx_messageInfo_ClusterVswitchDeleteRet.Size(m)
}
func (m *ClusterVswitchDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterVswitchDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterVswitchDeleteRet proto.InternalMessageInfo

type DistributedVswitchValidateArg struct {
	// Distributed vswitch config.
	Config *DistributedVirtualSwitch `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	// Distributed vswitch operation type.
	OperationType *DistributedVswitchValidateArg_OperationType `protobuf:"varint,2,opt,name=operation_type,json=operationType,enum=nutanix.acropolis.DistributedVswitchValidateArg_OperationType" json:"operation_type,omitempty"`
	// True means quick mode is used
	IsQuickMode          *bool    `protobuf:"varint,3,opt,name=is_quick_mode,json=isQuickMode" json:"is_quick_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedVswitchValidateArg) Reset()         { *m = DistributedVswitchValidateArg{} }
func (m *DistributedVswitchValidateArg) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchValidateArg) ProtoMessage()    {}
func (*DistributedVswitchValidateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{355}
}

func (m *DistributedVswitchValidateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchValidateArg.Unmarshal(m, b)
}
func (m *DistributedVswitchValidateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchValidateArg.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchValidateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchValidateArg.Merge(m, src)
}
func (m *DistributedVswitchValidateArg) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchValidateArg.Size(m)
}
func (m *DistributedVswitchValidateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchValidateArg.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchValidateArg proto.InternalMessageInfo

func (m *DistributedVswitchValidateArg) GetConfig() *DistributedVirtualSwitch {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *DistributedVswitchValidateArg) GetOperationType() DistributedVswitchValidateArg_OperationType {
	if m != nil && m.OperationType != nil {
		return *m.OperationType
	}
	return DistributedVswitchValidateArg_kCreate
}

func (m *DistributedVswitchValidateArg) GetIsQuickMode() bool {
	if m != nil && m.IsQuickMode != nil {
		return *m.IsQuickMode
	}
	return false
}

type DistributedVswitchValidateRet struct {
	// True means validation passed, false on failure
	Valid *bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	// Detailed error message about failure, empty
	// when validation passed
	ErrorMsg *string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	// True means operation requires rolling restart task
	RollingRestartRequired *bool `protobuf:"varint,3,opt,name=rolling_restart_required,json=rollingRestartRequired" json:"rolling_restart_required,omitempty"`
	// True means operation requires host reboot
	HostRebootRequired   *bool    `protobuf:"varint,4,opt,name=host_reboot_required,json=hostRebootRequired" json:"host_reboot_required,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedVswitchValidateRet) Reset()         { *m = DistributedVswitchValidateRet{} }
func (m *DistributedVswitchValidateRet) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchValidateRet) ProtoMessage()    {}
func (*DistributedVswitchValidateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{356}
}

func (m *DistributedVswitchValidateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchValidateRet.Unmarshal(m, b)
}
func (m *DistributedVswitchValidateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchValidateRet.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchValidateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchValidateRet.Merge(m, src)
}
func (m *DistributedVswitchValidateRet) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchValidateRet.Size(m)
}
func (m *DistributedVswitchValidateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchValidateRet.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchValidateRet proto.InternalMessageInfo

func (m *DistributedVswitchValidateRet) GetValid() bool {
	if m != nil && m.Valid != nil {
		return *m.Valid
	}
	return false
}

func (m *DistributedVswitchValidateRet) GetErrorMsg() string {
	if m != nil && m.ErrorMsg != nil {
		return *m.ErrorMsg
	}
	return ""
}

func (m *DistributedVswitchValidateRet) GetRollingRestartRequired() bool {
	if m != nil && m.RollingRestartRequired != nil {
		return *m.RollingRestartRequired
	}
	return false
}

func (m *DistributedVswitchValidateRet) GetHostRebootRequired() bool {
	if m != nil && m.HostRebootRequired != nil {
		return *m.HostRebootRequired
	}
	return false
}

type DistributedVswitchCreateArg struct {
	// Distributed vswitch config.
	Config               *DistributedVirtualSwitch `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DistributedVswitchCreateArg) Reset()         { *m = DistributedVswitchCreateArg{} }
func (m *DistributedVswitchCreateArg) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchCreateArg) ProtoMessage()    {}
func (*DistributedVswitchCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{357}
}

func (m *DistributedVswitchCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchCreateArg.Unmarshal(m, b)
}
func (m *DistributedVswitchCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchCreateArg.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchCreateArg.Merge(m, src)
}
func (m *DistributedVswitchCreateArg) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchCreateArg.Size(m)
}
func (m *DistributedVswitchCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchCreateArg proto.InternalMessageInfo

func (m *DistributedVswitchCreateArg) GetConfig() *DistributedVirtualSwitch {
	if m != nil {
		return m.Config
	}
	return nil
}

type DistributedVswitchCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// DistributedVswitchCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedVswitchCreateRet) Reset()         { *m = DistributedVswitchCreateRet{} }
func (m *DistributedVswitchCreateRet) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchCreateRet) ProtoMessage()    {}
func (*DistributedVswitchCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{358}
}

func (m *DistributedVswitchCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchCreateRet.Unmarshal(m, b)
}
func (m *DistributedVswitchCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchCreateRet.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchCreateRet.Merge(m, src)
}
func (m *DistributedVswitchCreateRet) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchCreateRet.Size(m)
}
func (m *DistributedVswitchCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchCreateRet proto.InternalMessageInfo

func (m *DistributedVswitchCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type DistributedVswitchCreateTaskRet struct {
	// Newly created distributed vswitch UUID.
	VswitchUuid          []byte   `protobuf:"bytes,1,opt,name=vswitch_uuid,json=vswitchUuid" json:"vswitch_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedVswitchCreateTaskRet) Reset()         { *m = DistributedVswitchCreateTaskRet{} }
func (m *DistributedVswitchCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchCreateTaskRet) ProtoMessage()    {}
func (*DistributedVswitchCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{359}
}

func (m *DistributedVswitchCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchCreateTaskRet.Unmarshal(m, b)
}
func (m *DistributedVswitchCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchCreateTaskRet.Merge(m, src)
}
func (m *DistributedVswitchCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchCreateTaskRet.Size(m)
}
func (m *DistributedVswitchCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchCreateTaskRet proto.InternalMessageInfo

func (m *DistributedVswitchCreateTaskRet) GetVswitchUuid() []byte {
	if m != nil {
		return m.VswitchUuid
	}
	return nil
}

type DistributedVswitchUpdateArg struct {
	// Distributed vswitch UUID.
	VswitchUuid []byte `protobuf:"bytes,1,opt,name=vswitch_uuid,json=vswitchUuid" json:"vswitch_uuid,omitempty"`
	// Distributed vswitch config.
	Config               *DistributedVirtualSwitch `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DistributedVswitchUpdateArg) Reset()         { *m = DistributedVswitchUpdateArg{} }
func (m *DistributedVswitchUpdateArg) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchUpdateArg) ProtoMessage()    {}
func (*DistributedVswitchUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{360}
}

func (m *DistributedVswitchUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchUpdateArg.Unmarshal(m, b)
}
func (m *DistributedVswitchUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchUpdateArg.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchUpdateArg.Merge(m, src)
}
func (m *DistributedVswitchUpdateArg) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchUpdateArg.Size(m)
}
func (m *DistributedVswitchUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchUpdateArg proto.InternalMessageInfo

func (m *DistributedVswitchUpdateArg) GetVswitchUuid() []byte {
	if m != nil {
		return m.VswitchUuid
	}
	return nil
}

func (m *DistributedVswitchUpdateArg) GetConfig() *DistributedVirtualSwitch {
	if m != nil {
		return m.Config
	}
	return nil
}

type DistributedVswitchUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// DistributedVswitchUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedVswitchUpdateRet) Reset()         { *m = DistributedVswitchUpdateRet{} }
func (m *DistributedVswitchUpdateRet) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchUpdateRet) ProtoMessage()    {}
func (*DistributedVswitchUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{361}
}

func (m *DistributedVswitchUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchUpdateRet.Unmarshal(m, b)
}
func (m *DistributedVswitchUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchUpdateRet.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchUpdateRet.Merge(m, src)
}
func (m *DistributedVswitchUpdateRet) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchUpdateRet.Size(m)
}
func (m *DistributedVswitchUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchUpdateRet proto.InternalMessageInfo

func (m *DistributedVswitchUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type DistributedVswitchUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedVswitchUpdateTaskRet) Reset()         { *m = DistributedVswitchUpdateTaskRet{} }
func (m *DistributedVswitchUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchUpdateTaskRet) ProtoMessage()    {}
func (*DistributedVswitchUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{362}
}

func (m *DistributedVswitchUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchUpdateTaskRet.Unmarshal(m, b)
}
func (m *DistributedVswitchUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchUpdateTaskRet.Merge(m, src)
}
func (m *DistributedVswitchUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchUpdateTaskRet.Size(m)
}
func (m *DistributedVswitchUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchUpdateTaskRet proto.InternalMessageInfo

type DistributedVswitchGetArg struct {
	// The list of UUID of the DVS to lookup.
	// If none is specified, then return info for all
	VswitchUuidList      [][]byte `protobuf:"bytes,1,rep,name=vswitch_uuid_list,json=vswitchUuidList" json:"vswitch_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedVswitchGetArg) Reset()         { *m = DistributedVswitchGetArg{} }
func (m *DistributedVswitchGetArg) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchGetArg) ProtoMessage()    {}
func (*DistributedVswitchGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{363}
}

func (m *DistributedVswitchGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchGetArg.Unmarshal(m, b)
}
func (m *DistributedVswitchGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchGetArg.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchGetArg.Merge(m, src)
}
func (m *DistributedVswitchGetArg) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchGetArg.Size(m)
}
func (m *DistributedVswitchGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchGetArg proto.InternalMessageInfo

func (m *DistributedVswitchGetArg) GetVswitchUuidList() [][]byte {
	if m != nil {
		return m.VswitchUuidList
	}
	return nil
}

type DistributedVswitchGetRet struct {
	// The list of lookup results.
	VswitchConfigList    []*DistributedVirtualSwitch `protobuf:"bytes,1,rep,name=vswitch_config_list,json=vswitchConfigList" json:"vswitch_config_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DistributedVswitchGetRet) Reset()         { *m = DistributedVswitchGetRet{} }
func (m *DistributedVswitchGetRet) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchGetRet) ProtoMessage()    {}
func (*DistributedVswitchGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{364}
}

func (m *DistributedVswitchGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchGetRet.Unmarshal(m, b)
}
func (m *DistributedVswitchGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchGetRet.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchGetRet.Merge(m, src)
}
func (m *DistributedVswitchGetRet) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchGetRet.Size(m)
}
func (m *DistributedVswitchGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchGetRet proto.InternalMessageInfo

func (m *DistributedVswitchGetRet) GetVswitchConfigList() []*DistributedVirtualSwitch {
	if m != nil {
		return m.VswitchConfigList
	}
	return nil
}

type DistributedVswitchDeleteArg struct {
	// Distributed vswitch UUID.
	VswitchUuid          []byte   `protobuf:"bytes,1,opt,name=vswitch_uuid,json=vswitchUuid" json:"vswitch_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedVswitchDeleteArg) Reset()         { *m = DistributedVswitchDeleteArg{} }
func (m *DistributedVswitchDeleteArg) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchDeleteArg) ProtoMessage()    {}
func (*DistributedVswitchDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{365}
}

func (m *DistributedVswitchDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchDeleteArg.Unmarshal(m, b)
}
func (m *DistributedVswitchDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchDeleteArg.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchDeleteArg.Merge(m, src)
}
func (m *DistributedVswitchDeleteArg) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchDeleteArg.Size(m)
}
func (m *DistributedVswitchDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchDeleteArg proto.InternalMessageInfo

func (m *DistributedVswitchDeleteArg) GetVswitchUuid() []byte {
	if m != nil {
		return m.VswitchUuid
	}
	return nil
}

type DistributedVswitchDeleteRet struct {
	// A task to poll for completion (if the caller cares). On success, the
	// task will contain a DistributedVswitchDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedVswitchDeleteRet) Reset()         { *m = DistributedVswitchDeleteRet{} }
func (m *DistributedVswitchDeleteRet) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchDeleteRet) ProtoMessage()    {}
func (*DistributedVswitchDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{366}
}

func (m *DistributedVswitchDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchDeleteRet.Unmarshal(m, b)
}
func (m *DistributedVswitchDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchDeleteRet.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchDeleteRet.Merge(m, src)
}
func (m *DistributedVswitchDeleteRet) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchDeleteRet.Size(m)
}
func (m *DistributedVswitchDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchDeleteRet proto.InternalMessageInfo

func (m *DistributedVswitchDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type DistributedVswitchDeleteTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedVswitchDeleteTaskRet) Reset()         { *m = DistributedVswitchDeleteTaskRet{} }
func (m *DistributedVswitchDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*DistributedVswitchDeleteTaskRet) ProtoMessage()    {}
func (*DistributedVswitchDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{367}
}

func (m *DistributedVswitchDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedVswitchDeleteTaskRet.Unmarshal(m, b)
}
func (m *DistributedVswitchDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedVswitchDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *DistributedVswitchDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedVswitchDeleteTaskRet.Merge(m, src)
}
func (m *DistributedVswitchDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_DistributedVswitchDeleteTaskRet.Size(m)
}
func (m *DistributedVswitchDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedVswitchDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedVswitchDeleteTaskRet proto.InternalMessageInfo

type MigrateBridgeToDistributedVswitchArg struct {
	// UUID of the cluster where the bridge to be migrated is present
	ClusterUuid []byte `protobuf:"bytes,1,opt,name=cluster_uuid,json=clusterUuid" json:"cluster_uuid,omitempty"`
	// Name of Bridge to be migrated to Distributed Vswitch.
	BridgeName *string `protobuf:"bytes,2,opt,name=bridge_name,json=bridgeName" json:"bridge_name,omitempty"`
	// Name of the Distributed Vswitch to create.
	DvsName *string `protobuf:"bytes,3,opt,name=dvs_name,json=dvsName" json:"dvs_name,omitempty"`
	// Description for the Distributed Vswitch.
	DvsDescription *string `protobuf:"bytes,4,opt,name=dvs_description,json=dvsDescription" json:"dvs_description,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid       []byte   `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MigrateBridgeToDistributedVswitchArg) Reset()         { *m = MigrateBridgeToDistributedVswitchArg{} }
func (m *MigrateBridgeToDistributedVswitchArg) String() string { return proto.CompactTextString(m) }
func (*MigrateBridgeToDistributedVswitchArg) ProtoMessage()    {}
func (*MigrateBridgeToDistributedVswitchArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{368}
}

func (m *MigrateBridgeToDistributedVswitchArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MigrateBridgeToDistributedVswitchArg.Unmarshal(m, b)
}
func (m *MigrateBridgeToDistributedVswitchArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MigrateBridgeToDistributedVswitchArg.Marshal(b, m, deterministic)
}
func (m *MigrateBridgeToDistributedVswitchArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrateBridgeToDistributedVswitchArg.Merge(m, src)
}
func (m *MigrateBridgeToDistributedVswitchArg) XXX_Size() int {
	return xxx_messageInfo_MigrateBridgeToDistributedVswitchArg.Size(m)
}
func (m *MigrateBridgeToDistributedVswitchArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrateBridgeToDistributedVswitchArg.DiscardUnknown(m)
}

var xxx_messageInfo_MigrateBridgeToDistributedVswitchArg proto.InternalMessageInfo

func (m *MigrateBridgeToDistributedVswitchArg) GetClusterUuid() []byte {
	if m != nil {
		return m.ClusterUuid
	}
	return nil
}

func (m *MigrateBridgeToDistributedVswitchArg) GetBridgeName() string {
	if m != nil && m.BridgeName != nil {
		return *m.BridgeName
	}
	return ""
}

func (m *MigrateBridgeToDistributedVswitchArg) GetDvsName() string {
	if m != nil && m.DvsName != nil {
		return *m.DvsName
	}
	return ""
}

func (m *MigrateBridgeToDistributedVswitchArg) GetDvsDescription() string {
	if m != nil && m.DvsDescription != nil {
		return *m.DvsDescription
	}
	return ""
}

func (m *MigrateBridgeToDistributedVswitchArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *MigrateBridgeToDistributedVswitchArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type MigrateBridgeToDistributedVswitchRet struct {
	// A task to poll for completion. On success, the task will contain a
	// MigrateBridgeToDistributedVswitchTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MigrateBridgeToDistributedVswitchRet) Reset()         { *m = MigrateBridgeToDistributedVswitchRet{} }
func (m *MigrateBridgeToDistributedVswitchRet) String() string { return proto.CompactTextString(m) }
func (*MigrateBridgeToDistributedVswitchRet) ProtoMessage()    {}
func (*MigrateBridgeToDistributedVswitchRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{369}
}

func (m *MigrateBridgeToDistributedVswitchRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MigrateBridgeToDistributedVswitchRet.Unmarshal(m, b)
}
func (m *MigrateBridgeToDistributedVswitchRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MigrateBridgeToDistributedVswitchRet.Marshal(b, m, deterministic)
}
func (m *MigrateBridgeToDistributedVswitchRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrateBridgeToDistributedVswitchRet.Merge(m, src)
}
func (m *MigrateBridgeToDistributedVswitchRet) XXX_Size() int {
	return xxx_messageInfo_MigrateBridgeToDistributedVswitchRet.Size(m)
}
func (m *MigrateBridgeToDistributedVswitchRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrateBridgeToDistributedVswitchRet.DiscardUnknown(m)
}

var xxx_messageInfo_MigrateBridgeToDistributedVswitchRet proto.InternalMessageInfo

func (m *MigrateBridgeToDistributedVswitchRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type MigrateBridgeToDistributedVswitchTaskRet struct {
	// Newly created distributed vswitch UUID.
	VswitchUuid          []byte   `protobuf:"bytes,1,opt,name=vswitch_uuid,json=vswitchUuid" json:"vswitch_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MigrateBridgeToDistributedVswitchTaskRet) Reset() {
	*m = MigrateBridgeToDistributedVswitchTaskRet{}
}
func (m *MigrateBridgeToDistributedVswitchTaskRet) String() string { return proto.CompactTextString(m) }
func (*MigrateBridgeToDistributedVswitchTaskRet) ProtoMessage()    {}
func (*MigrateBridgeToDistributedVswitchTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{370}
}

func (m *MigrateBridgeToDistributedVswitchTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MigrateBridgeToDistributedVswitchTaskRet.Unmarshal(m, b)
}
func (m *MigrateBridgeToDistributedVswitchTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MigrateBridgeToDistributedVswitchTaskRet.Marshal(b, m, deterministic)
}
func (m *MigrateBridgeToDistributedVswitchTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrateBridgeToDistributedVswitchTaskRet.Merge(m, src)
}
func (m *MigrateBridgeToDistributedVswitchTaskRet) XXX_Size() int {
	return xxx_messageInfo_MigrateBridgeToDistributedVswitchTaskRet.Size(m)
}
func (m *MigrateBridgeToDistributedVswitchTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrateBridgeToDistributedVswitchTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_MigrateBridgeToDistributedVswitchTaskRet proto.InternalMessageInfo

func (m *MigrateBridgeToDistributedVswitchTaskRet) GetVswitchUuid() []byte {
	if m != nil {
		return m.VswitchUuid
	}
	return nil
}

type AtlasConfigGetArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AtlasConfigGetArg) Reset()         { *m = AtlasConfigGetArg{} }
func (m *AtlasConfigGetArg) String() string { return proto.CompactTextString(m) }
func (*AtlasConfigGetArg) ProtoMessage()    {}
func (*AtlasConfigGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{371}
}

func (m *AtlasConfigGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtlasConfigGetArg.Unmarshal(m, b)
}
func (m *AtlasConfigGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtlasConfigGetArg.Marshal(b, m, deterministic)
}
func (m *AtlasConfigGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtlasConfigGetArg.Merge(m, src)
}
func (m *AtlasConfigGetArg) XXX_Size() int {
	return xxx_messageInfo_AtlasConfigGetArg.Size(m)
}
func (m *AtlasConfigGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_AtlasConfigGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_AtlasConfigGetArg proto.InternalMessageInfo

type AtlasConfigGetRet struct {
	Config               *AcropolisAtlasConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AtlasConfigGetRet) Reset()         { *m = AtlasConfigGetRet{} }
func (m *AtlasConfigGetRet) String() string { return proto.CompactTextString(m) }
func (*AtlasConfigGetRet) ProtoMessage()    {}
func (*AtlasConfigGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{372}
}

func (m *AtlasConfigGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtlasConfigGetRet.Unmarshal(m, b)
}
func (m *AtlasConfigGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtlasConfigGetRet.Marshal(b, m, deterministic)
}
func (m *AtlasConfigGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtlasConfigGetRet.Merge(m, src)
}
func (m *AtlasConfigGetRet) XXX_Size() int {
	return xxx_messageInfo_AtlasConfigGetRet.Size(m)
}
func (m *AtlasConfigGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_AtlasConfigGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_AtlasConfigGetRet proto.InternalMessageInfo

func (m *AtlasConfigGetRet) GetConfig() *AcropolisAtlasConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type AtlasConfigUpdateArg struct {
	Config *AcropolisAtlasConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	// Whether Acropolis should provision a new keypair for OVN, if
	// an SSL connection is requested.
	ForceGenerateOvnKeys *bool    `protobuf:"varint,2,opt,name=force_generate_ovn_keys,json=forceGenerateOvnKeys" json:"force_generate_ovn_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AtlasConfigUpdateArg) Reset()         { *m = AtlasConfigUpdateArg{} }
func (m *AtlasConfigUpdateArg) String() string { return proto.CompactTextString(m) }
func (*AtlasConfigUpdateArg) ProtoMessage()    {}
func (*AtlasConfigUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{373}
}

func (m *AtlasConfigUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtlasConfigUpdateArg.Unmarshal(m, b)
}
func (m *AtlasConfigUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtlasConfigUpdateArg.Marshal(b, m, deterministic)
}
func (m *AtlasConfigUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtlasConfigUpdateArg.Merge(m, src)
}
func (m *AtlasConfigUpdateArg) XXX_Size() int {
	return xxx_messageInfo_AtlasConfigUpdateArg.Size(m)
}
func (m *AtlasConfigUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_AtlasConfigUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_AtlasConfigUpdateArg proto.InternalMessageInfo

func (m *AtlasConfigUpdateArg) GetConfig() *AcropolisAtlasConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *AtlasConfigUpdateArg) GetForceGenerateOvnKeys() bool {
	if m != nil && m.ForceGenerateOvnKeys != nil {
		return *m.ForceGenerateOvnKeys
	}
	return false
}

type AtlasConfigUpdateRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AtlasConfigUpdateRet) Reset()         { *m = AtlasConfigUpdateRet{} }
func (m *AtlasConfigUpdateRet) String() string { return proto.CompactTextString(m) }
func (*AtlasConfigUpdateRet) ProtoMessage()    {}
func (*AtlasConfigUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{374}
}

func (m *AtlasConfigUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtlasConfigUpdateRet.Unmarshal(m, b)
}
func (m *AtlasConfigUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtlasConfigUpdateRet.Marshal(b, m, deterministic)
}
func (m *AtlasConfigUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtlasConfigUpdateRet.Merge(m, src)
}
func (m *AtlasConfigUpdateRet) XXX_Size() int {
	return xxx_messageInfo_AtlasConfigUpdateRet.Size(m)
}
func (m *AtlasConfigUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_AtlasConfigUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_AtlasConfigUpdateRet proto.InternalMessageInfo

//------------------------------------------------------------------------------
// VmSyncRepEnable is a RPC to enable sync rep on a VM.
type VmSyncRepEnableArg struct {
	// UUID of the VM to be sync rep enabled.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Stretch parameters that define the stretch relationship.
	StretchParams        *stretch_params.StretchParams `protobuf:"bytes,5,opt,name=stretch_params,json=stretchParams" json:"stretch_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *VmSyncRepEnableArg) Reset()         { *m = VmSyncRepEnableArg{} }
func (m *VmSyncRepEnableArg) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepEnableArg) ProtoMessage()    {}
func (*VmSyncRepEnableArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{375}
}

func (m *VmSyncRepEnableArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepEnableArg.Unmarshal(m, b)
}
func (m *VmSyncRepEnableArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepEnableArg.Marshal(b, m, deterministic)
}
func (m *VmSyncRepEnableArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepEnableArg.Merge(m, src)
}
func (m *VmSyncRepEnableArg) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepEnableArg.Size(m)
}
func (m *VmSyncRepEnableArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepEnableArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepEnableArg proto.InternalMessageInfo

func (m *VmSyncRepEnableArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmSyncRepEnableArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmSyncRepEnableArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmSyncRepEnableArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmSyncRepEnableArg) GetStretchParams() *stretch_params.StretchParams {
	if m != nil {
		return m.StretchParams
	}
	return nil
}

type VmSyncRepEnableRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSyncRepEnableRet) Reset()         { *m = VmSyncRepEnableRet{} }
func (m *VmSyncRepEnableRet) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepEnableRet) ProtoMessage()    {}
func (*VmSyncRepEnableRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{376}
}

func (m *VmSyncRepEnableRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepEnableRet.Unmarshal(m, b)
}
func (m *VmSyncRepEnableRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepEnableRet.Marshal(b, m, deterministic)
}
func (m *VmSyncRepEnableRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepEnableRet.Merge(m, src)
}
func (m *VmSyncRepEnableRet) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepEnableRet.Size(m)
}
func (m *VmSyncRepEnableRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepEnableRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepEnableRet proto.InternalMessageInfo

func (m *VmSyncRepEnableRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmSyncRepEnableTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSyncRepEnableTaskRet) Reset()         { *m = VmSyncRepEnableTaskRet{} }
func (m *VmSyncRepEnableTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepEnableTaskRet) ProtoMessage()    {}
func (*VmSyncRepEnableTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{377}
}

func (m *VmSyncRepEnableTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepEnableTaskRet.Unmarshal(m, b)
}
func (m *VmSyncRepEnableTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepEnableTaskRet.Marshal(b, m, deterministic)
}
func (m *VmSyncRepEnableTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepEnableTaskRet.Merge(m, src)
}
func (m *VmSyncRepEnableTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepEnableTaskRet.Size(m)
}
func (m *VmSyncRepEnableTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepEnableTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepEnableTaskRet proto.InternalMessageInfo

// VmSyncRepMigrate is a RPC for migrating a VM. It is invoked
// by Magneto on the primary site.
type VmSyncRepMigrateArg struct {
	// UUID of the VM to be migrated.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Stretch parameters that define the stretch relationship.
	StretchParams        *stretch_params.StretchParams `protobuf:"bytes,5,opt,name=stretch_params,json=stretchParams" json:"stretch_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *VmSyncRepMigrateArg) Reset()         { *m = VmSyncRepMigrateArg{} }
func (m *VmSyncRepMigrateArg) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepMigrateArg) ProtoMessage()    {}
func (*VmSyncRepMigrateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{378}
}

func (m *VmSyncRepMigrateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepMigrateArg.Unmarshal(m, b)
}
func (m *VmSyncRepMigrateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepMigrateArg.Marshal(b, m, deterministic)
}
func (m *VmSyncRepMigrateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepMigrateArg.Merge(m, src)
}
func (m *VmSyncRepMigrateArg) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepMigrateArg.Size(m)
}
func (m *VmSyncRepMigrateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepMigrateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepMigrateArg proto.InternalMessageInfo

func (m *VmSyncRepMigrateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmSyncRepMigrateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmSyncRepMigrateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmSyncRepMigrateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmSyncRepMigrateArg) GetStretchParams() *stretch_params.StretchParams {
	if m != nil {
		return m.StretchParams
	}
	return nil
}

type VmSyncRepMigrateRet struct {
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSyncRepMigrateRet) Reset()         { *m = VmSyncRepMigrateRet{} }
func (m *VmSyncRepMigrateRet) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepMigrateRet) ProtoMessage()    {}
func (*VmSyncRepMigrateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{379}
}

func (m *VmSyncRepMigrateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepMigrateRet.Unmarshal(m, b)
}
func (m *VmSyncRepMigrateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepMigrateRet.Marshal(b, m, deterministic)
}
func (m *VmSyncRepMigrateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepMigrateRet.Merge(m, src)
}
func (m *VmSyncRepMigrateRet) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepMigrateRet.Size(m)
}
func (m *VmSyncRepMigrateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepMigrateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepMigrateRet proto.InternalMessageInfo

func (m *VmSyncRepMigrateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmSyncRepMigrateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSyncRepMigrateTaskRet) Reset()         { *m = VmSyncRepMigrateTaskRet{} }
func (m *VmSyncRepMigrateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepMigrateTaskRet) ProtoMessage()    {}
func (*VmSyncRepMigrateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{380}
}

func (m *VmSyncRepMigrateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepMigrateTaskRet.Unmarshal(m, b)
}
func (m *VmSyncRepMigrateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepMigrateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmSyncRepMigrateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepMigrateTaskRet.Merge(m, src)
}
func (m *VmSyncRepMigrateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepMigrateTaskRet.Size(m)
}
func (m *VmSyncRepMigrateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepMigrateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepMigrateTaskRet proto.InternalMessageInfo

//-----------------------------------------------------------------------------
// Update VM sync rep configurations for a VM.
type VmSyncRepConfigUpdateArg struct {
	// VM UUID.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// The list of VM sync rep configurations to be applied to the VM.
	SyncRepConfigList    []*VmSyncRepConfig `protobuf:"bytes,5,rep,name=sync_rep_config_list,json=syncRepConfigList" json:"sync_rep_config_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VmSyncRepConfigUpdateArg) Reset()         { *m = VmSyncRepConfigUpdateArg{} }
func (m *VmSyncRepConfigUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepConfigUpdateArg) ProtoMessage()    {}
func (*VmSyncRepConfigUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{381}
}

func (m *VmSyncRepConfigUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepConfigUpdateArg.Unmarshal(m, b)
}
func (m *VmSyncRepConfigUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepConfigUpdateArg.Marshal(b, m, deterministic)
}
func (m *VmSyncRepConfigUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepConfigUpdateArg.Merge(m, src)
}
func (m *VmSyncRepConfigUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepConfigUpdateArg.Size(m)
}
func (m *VmSyncRepConfigUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepConfigUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepConfigUpdateArg proto.InternalMessageInfo

func (m *VmSyncRepConfigUpdateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmSyncRepConfigUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmSyncRepConfigUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmSyncRepConfigUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmSyncRepConfigUpdateArg) GetSyncRepConfigList() []*VmSyncRepConfig {
	if m != nil {
		return m.SyncRepConfigList
	}
	return nil
}

type VmSyncRepConfigUpdateRet struct {
	// A task to poll for completion.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSyncRepConfigUpdateRet) Reset()         { *m = VmSyncRepConfigUpdateRet{} }
func (m *VmSyncRepConfigUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepConfigUpdateRet) ProtoMessage()    {}
func (*VmSyncRepConfigUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{382}
}

func (m *VmSyncRepConfigUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepConfigUpdateRet.Unmarshal(m, b)
}
func (m *VmSyncRepConfigUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepConfigUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmSyncRepConfigUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepConfigUpdateRet.Merge(m, src)
}
func (m *VmSyncRepConfigUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepConfigUpdateRet.Size(m)
}
func (m *VmSyncRepConfigUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepConfigUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepConfigUpdateRet proto.InternalMessageInfo

func (m *VmSyncRepConfigUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmSyncRepConfigUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSyncRepConfigUpdateTaskRet) Reset()         { *m = VmSyncRepConfigUpdateTaskRet{} }
func (m *VmSyncRepConfigUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmSyncRepConfigUpdateTaskRet) ProtoMessage()    {}
func (*VmSyncRepConfigUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{383}
}

func (m *VmSyncRepConfigUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSyncRepConfigUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmSyncRepConfigUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSyncRepConfigUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmSyncRepConfigUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSyncRepConfigUpdateTaskRet.Merge(m, src)
}
func (m *VmSyncRepConfigUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmSyncRepConfigUpdateTaskRet.Size(m)
}
func (m *VmSyncRepConfigUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSyncRepConfigUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSyncRepConfigUpdateTaskRet proto.InternalMessageInfo

//-----------------------------------------------------------------------------
// Delete disks associated with a dormant VM.
type DormantVmDiskDeleteArg struct {
	// The list of disks to delete from the VM.
	DormantVmdiskUuidList [][]byte `protobuf:"bytes,1,rep,name=dormant_vmdisk_uuid_list,json=dormantVmdiskUuidList" json:"dormant_vmdisk_uuid_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid       []byte   `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DormantVmDiskDeleteArg) Reset()         { *m = DormantVmDiskDeleteArg{} }
func (m *DormantVmDiskDeleteArg) String() string { return proto.CompactTextString(m) }
func (*DormantVmDiskDeleteArg) ProtoMessage()    {}
func (*DormantVmDiskDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{384}
}

func (m *DormantVmDiskDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DormantVmDiskDeleteArg.Unmarshal(m, b)
}
func (m *DormantVmDiskDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DormantVmDiskDeleteArg.Marshal(b, m, deterministic)
}
func (m *DormantVmDiskDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DormantVmDiskDeleteArg.Merge(m, src)
}
func (m *DormantVmDiskDeleteArg) XXX_Size() int {
	return xxx_messageInfo_DormantVmDiskDeleteArg.Size(m)
}
func (m *DormantVmDiskDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_DormantVmDiskDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_DormantVmDiskDeleteArg proto.InternalMessageInfo

func (m *DormantVmDiskDeleteArg) GetDormantVmdiskUuidList() [][]byte {
	if m != nil {
		return m.DormantVmdiskUuidList
	}
	return nil
}

func (m *DormantVmDiskDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *DormantVmDiskDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type DormantVmDiskDeleteRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmDiskDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DormantVmDiskDeleteRet) Reset()         { *m = DormantVmDiskDeleteRet{} }
func (m *DormantVmDiskDeleteRet) String() string { return proto.CompactTextString(m) }
func (*DormantVmDiskDeleteRet) ProtoMessage()    {}
func (*DormantVmDiskDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{385}
}

func (m *DormantVmDiskDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DormantVmDiskDeleteRet.Unmarshal(m, b)
}
func (m *DormantVmDiskDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DormantVmDiskDeleteRet.Marshal(b, m, deterministic)
}
func (m *DormantVmDiskDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DormantVmDiskDeleteRet.Merge(m, src)
}
func (m *DormantVmDiskDeleteRet) XXX_Size() int {
	return xxx_messageInfo_DormantVmDiskDeleteRet.Size(m)
}
func (m *DormantVmDiskDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DormantVmDiskDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_DormantVmDiskDeleteRet proto.InternalMessageInfo

func (m *DormantVmDiskDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type DormantVmDiskDeleteTaskRet struct {
	DeletedVmdiskUuidList [][]byte `protobuf:"bytes,1,rep,name=deleted_vmdisk_uuid_list,json=deletedVmdiskUuidList" json:"deleted_vmdisk_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *DormantVmDiskDeleteTaskRet) Reset()         { *m = DormantVmDiskDeleteTaskRet{} }
func (m *DormantVmDiskDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*DormantVmDiskDeleteTaskRet) ProtoMessage()    {}
func (*DormantVmDiskDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{386}
}

func (m *DormantVmDiskDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DormantVmDiskDeleteTaskRet.Unmarshal(m, b)
}
func (m *DormantVmDiskDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DormantVmDiskDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *DormantVmDiskDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DormantVmDiskDeleteTaskRet.Merge(m, src)
}
func (m *DormantVmDiskDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_DormantVmDiskDeleteTaskRet.Size(m)
}
func (m *DormantVmDiskDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DormantVmDiskDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_DormantVmDiskDeleteTaskRet proto.InternalMessageInfo

func (m *DormantVmDiskDeleteTaskRet) GetDeletedVmdiskUuidList() [][]byte {
	if m != nil {
		return m.DeletedVmdiskUuidList
	}
	return nil
}

//-----------------------------------------------------------------------------
type DormantVmGetArg struct {
	// List of VM UUIDs. If none is specified, then return dormant VM for all VMs.
	VmUuidList           [][]byte `protobuf:"bytes,1,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DormantVmGetArg) Reset()         { *m = DormantVmGetArg{} }
func (m *DormantVmGetArg) String() string { return proto.CompactTextString(m) }
func (*DormantVmGetArg) ProtoMessage()    {}
func (*DormantVmGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{387}
}

func (m *DormantVmGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DormantVmGetArg.Unmarshal(m, b)
}
func (m *DormantVmGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DormantVmGetArg.Marshal(b, m, deterministic)
}
func (m *DormantVmGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DormantVmGetArg.Merge(m, src)
}
func (m *DormantVmGetArg) XXX_Size() int {
	return xxx_messageInfo_DormantVmGetArg.Size(m)
}
func (m *DormantVmGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_DormantVmGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_DormantVmGetArg proto.InternalMessageInfo

func (m *DormantVmGetArg) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

type DormantVmGetRet struct {
	// The list of Dormant VMs.
	DormantVmList        []*db_schema.DormantVm `protobuf:"bytes,1,rep,name=dormant_vm_list,json=dormantVmList" json:"dormant_vm_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DormantVmGetRet) Reset()         { *m = DormantVmGetRet{} }
func (m *DormantVmGetRet) String() string { return proto.CompactTextString(m) }
func (*DormantVmGetRet) ProtoMessage()    {}
func (*DormantVmGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{388}
}

func (m *DormantVmGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DormantVmGetRet.Unmarshal(m, b)
}
func (m *DormantVmGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DormantVmGetRet.Marshal(b, m, deterministic)
}
func (m *DormantVmGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DormantVmGetRet.Merge(m, src)
}
func (m *DormantVmGetRet) XXX_Size() int {
	return xxx_messageInfo_DormantVmGetRet.Size(m)
}
func (m *DormantVmGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DormantVmGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_DormantVmGetRet proto.InternalMessageInfo

func (m *DormantVmGetRet) GetDormantVmList() []*db_schema.DormantVm {
	if m != nil {
		return m.DormantVmList
	}
	return nil
}

type UpdateVmDbStateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Cerebro information.
	CerebroVmInfo *uhura.CerebroVmInfo `protobuf:"bytes,2,opt,name=cerebro_vm_info,json=cerebroVmInfo" json:"cerebro_vm_info,omitempty"`
	// NGT information.
	NgtVmInfo *uhura.NgtVmInfo `protobuf:"bytes,3,opt,name=ngt_vm_info,json=ngtVmInfo" json:"ngt_vm_info,omitempty"`
	// QOS information.
	QosVmInfo *uhura.QosVmInfo `protobuf:"bytes,4,opt,name=qos_vm_info,json=qosVmInfo" json:"qos_vm_info,omitempty"`
	// Boolean that indicates whether the update requires a logical timestamp
	// update. This is required for changes that result in a VM configuration
	// update.
	RequiresLogicalTimestampUpdate *bool `protobuf:"varint,5,opt,name=requires_logical_timestamp_update,json=requiresLogicalTimestampUpdate" json:"requires_logical_timestamp_update,omitempty"`
	// Task uuid field which will be populated by anduril while proxying the
	// request to acropolis.
	TaskUuid             []byte   `protobuf:"bytes,6,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateVmDbStateArg) Reset()         { *m = UpdateVmDbStateArg{} }
func (m *UpdateVmDbStateArg) String() string { return proto.CompactTextString(m) }
func (*UpdateVmDbStateArg) ProtoMessage()    {}
func (*UpdateVmDbStateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{389}
}

func (m *UpdateVmDbStateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateVmDbStateArg.Unmarshal(m, b)
}
func (m *UpdateVmDbStateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateVmDbStateArg.Marshal(b, m, deterministic)
}
func (m *UpdateVmDbStateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVmDbStateArg.Merge(m, src)
}
func (m *UpdateVmDbStateArg) XXX_Size() int {
	return xxx_messageInfo_UpdateVmDbStateArg.Size(m)
}
func (m *UpdateVmDbStateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVmDbStateArg.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVmDbStateArg proto.InternalMessageInfo

func (m *UpdateVmDbStateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *UpdateVmDbStateArg) GetCerebroVmInfo() *uhura.CerebroVmInfo {
	if m != nil {
		return m.CerebroVmInfo
	}
	return nil
}

func (m *UpdateVmDbStateArg) GetNgtVmInfo() *uhura.NgtVmInfo {
	if m != nil {
		return m.NgtVmInfo
	}
	return nil
}

func (m *UpdateVmDbStateArg) GetQosVmInfo() *uhura.QosVmInfo {
	if m != nil {
		return m.QosVmInfo
	}
	return nil
}

func (m *UpdateVmDbStateArg) GetRequiresLogicalTimestampUpdate() bool {
	if m != nil && m.RequiresLogicalTimestampUpdate != nil {
		return *m.RequiresLogicalTimestampUpdate
	}
	return false
}

func (m *UpdateVmDbStateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type UpdateVmDbStateRet struct {
	// A task to poll for completion. On success, the task will contain
	// UpdateVmDbStateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateVmDbStateRet) Reset()         { *m = UpdateVmDbStateRet{} }
func (m *UpdateVmDbStateRet) String() string { return proto.CompactTextString(m) }
func (*UpdateVmDbStateRet) ProtoMessage()    {}
func (*UpdateVmDbStateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{390}
}

func (m *UpdateVmDbStateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateVmDbStateRet.Unmarshal(m, b)
}
func (m *UpdateVmDbStateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateVmDbStateRet.Marshal(b, m, deterministic)
}
func (m *UpdateVmDbStateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVmDbStateRet.Merge(m, src)
}
func (m *UpdateVmDbStateRet) XXX_Size() int {
	return xxx_messageInfo_UpdateVmDbStateRet.Size(m)
}
func (m *UpdateVmDbStateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVmDbStateRet.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVmDbStateRet proto.InternalMessageInfo

func (m *UpdateVmDbStateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type UpdateVmDbStateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateVmDbStateTaskRet) Reset()         { *m = UpdateVmDbStateTaskRet{} }
func (m *UpdateVmDbStateTaskRet) String() string { return proto.CompactTextString(m) }
func (*UpdateVmDbStateTaskRet) ProtoMessage()    {}
func (*UpdateVmDbStateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{391}
}

func (m *UpdateVmDbStateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateVmDbStateTaskRet.Unmarshal(m, b)
}
func (m *UpdateVmDbStateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateVmDbStateTaskRet.Marshal(b, m, deterministic)
}
func (m *UpdateVmDbStateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVmDbStateTaskRet.Merge(m, src)
}
func (m *UpdateVmDbStateTaskRet) XXX_Size() int {
	return xxx_messageInfo_UpdateVmDbStateTaskRet.Size(m)
}
func (m *UpdateVmDbStateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVmDbStateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVmDbStateTaskRet proto.InternalMessageInfo

type VmCrossClusterLiveMigrateArg struct {
	// UUID of the VM that we are live migrating to another cluster.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Stretch parameters that define the stretch relationship.
	StretchParams *stretch_params.StretchParams `protobuf:"bytes,5,opt,name=stretch_params,json=stretchParams" json:"stretch_params,omitempty"`
	// IP address of the destination host where the VM is to be migrated.
	DestinationHostIp *string `protobuf:"bytes,6,opt,name=destination_host_ip,json=destinationHostIp" json:"destination_host_ip,omitempty"`
	// The mapping between the MAC address and the tap device name created on the
	// destination.
	TapDeviceMapping []*TapDeviceMapping `protobuf:"bytes,7,rep,name=tap_device_mapping,json=tapDeviceMapping" json:"tap_device_mapping,omitempty"`
	// The instance backing the above VM when the migration task was started.
	// This will be used for validating state changes on the VM while the task
	// is running.
	VmInfo *VmInfo `protobuf:"bytes,8,opt,name=vm_info,json=vmInfo" json:"vm_info,omitempty"`
	// Port to be used for the destination host where the VM is to be migrated.
	DestinationHostPort *uint64 `protobuf:"varint,10,opt,name=destination_host_port,json=destinationHostPort" json:"destination_host_port,omitempty"`
	// The public key of the destination host where the VM is to be migrated.
	DestinationPublicKey *string `protobuf:"bytes,11,opt,name=destination_public_key,json=destinationPublicKey" json:"destination_public_key,omitempty"`
	// The SSH signature of the destination host where the VM is to be migrated.
	DestinationSshSignature *string  `protobuf:"bytes,12,opt,name=destination_ssh_signature,json=destinationSshSignature" json:"destination_ssh_signature,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *VmCrossClusterLiveMigrateArg) Reset()         { *m = VmCrossClusterLiveMigrateArg{} }
func (m *VmCrossClusterLiveMigrateArg) String() string { return proto.CompactTextString(m) }
func (*VmCrossClusterLiveMigrateArg) ProtoMessage()    {}
func (*VmCrossClusterLiveMigrateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{392}
}

func (m *VmCrossClusterLiveMigrateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCrossClusterLiveMigrateArg.Unmarshal(m, b)
}
func (m *VmCrossClusterLiveMigrateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCrossClusterLiveMigrateArg.Marshal(b, m, deterministic)
}
func (m *VmCrossClusterLiveMigrateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCrossClusterLiveMigrateArg.Merge(m, src)
}
func (m *VmCrossClusterLiveMigrateArg) XXX_Size() int {
	return xxx_messageInfo_VmCrossClusterLiveMigrateArg.Size(m)
}
func (m *VmCrossClusterLiveMigrateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCrossClusterLiveMigrateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmCrossClusterLiveMigrateArg proto.InternalMessageInfo

func (m *VmCrossClusterLiveMigrateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmCrossClusterLiveMigrateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmCrossClusterLiveMigrateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmCrossClusterLiveMigrateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmCrossClusterLiveMigrateArg) GetStretchParams() *stretch_params.StretchParams {
	if m != nil {
		return m.StretchParams
	}
	return nil
}

func (m *VmCrossClusterLiveMigrateArg) GetDestinationHostIp() string {
	if m != nil && m.DestinationHostIp != nil {
		return *m.DestinationHostIp
	}
	return ""
}

func (m *VmCrossClusterLiveMigrateArg) GetTapDeviceMapping() []*TapDeviceMapping {
	if m != nil {
		return m.TapDeviceMapping
	}
	return nil
}

func (m *VmCrossClusterLiveMigrateArg) GetVmInfo() *VmInfo {
	if m != nil {
		return m.VmInfo
	}
	return nil
}

func (m *VmCrossClusterLiveMigrateArg) GetDestinationHostPort() uint64 {
	if m != nil && m.DestinationHostPort != nil {
		return *m.DestinationHostPort
	}
	return 0
}

func (m *VmCrossClusterLiveMigrateArg) GetDestinationPublicKey() string {
	if m != nil && m.DestinationPublicKey != nil {
		return *m.DestinationPublicKey
	}
	return ""
}

func (m *VmCrossClusterLiveMigrateArg) GetDestinationSshSignature() string {
	if m != nil && m.DestinationSshSignature != nil {
		return *m.DestinationSshSignature
	}
	return ""
}

type VmCrossClusterLiveMigrateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmCrossClusterLiveMigrateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCrossClusterLiveMigrateRet) Reset()         { *m = VmCrossClusterLiveMigrateRet{} }
func (m *VmCrossClusterLiveMigrateRet) String() string { return proto.CompactTextString(m) }
func (*VmCrossClusterLiveMigrateRet) ProtoMessage()    {}
func (*VmCrossClusterLiveMigrateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{393}
}

func (m *VmCrossClusterLiveMigrateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCrossClusterLiveMigrateRet.Unmarshal(m, b)
}
func (m *VmCrossClusterLiveMigrateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCrossClusterLiveMigrateRet.Marshal(b, m, deterministic)
}
func (m *VmCrossClusterLiveMigrateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCrossClusterLiveMigrateRet.Merge(m, src)
}
func (m *VmCrossClusterLiveMigrateRet) XXX_Size() int {
	return xxx_messageInfo_VmCrossClusterLiveMigrateRet.Size(m)
}
func (m *VmCrossClusterLiveMigrateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCrossClusterLiveMigrateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCrossClusterLiveMigrateRet proto.InternalMessageInfo

func (m *VmCrossClusterLiveMigrateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmCrossClusterLiveMigrateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCrossClusterLiveMigrateTaskRet) Reset()         { *m = VmCrossClusterLiveMigrateTaskRet{} }
func (m *VmCrossClusterLiveMigrateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmCrossClusterLiveMigrateTaskRet) ProtoMessage()    {}
func (*VmCrossClusterLiveMigrateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{394}
}

func (m *VmCrossClusterLiveMigrateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCrossClusterLiveMigrateTaskRet.Unmarshal(m, b)
}
func (m *VmCrossClusterLiveMigrateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCrossClusterLiveMigrateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmCrossClusterLiveMigrateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCrossClusterLiveMigrateTaskRet.Merge(m, src)
}
func (m *VmCrossClusterLiveMigrateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmCrossClusterLiveMigrateTaskRet.Size(m)
}
func (m *VmCrossClusterLiveMigrateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCrossClusterLiveMigrateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCrossClusterLiveMigrateTaskRet proto.InternalMessageInfo

type PrepareVmCrossClusterLiveMigrateArg struct {
	// UUID of the VM that we are live migrating to another cluster.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Network mapping applicable to the above VM.
	NetworkMapping *RecoveryPlanNetworkMappings `protobuf:"bytes,2,opt,name=network_mapping,json=networkMapping" json:"network_mapping,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Stretch parameters that define the stretch relationship.
	StretchParams *stretch_params.StretchParams `protobuf:"bytes,6,opt,name=stretch_params,json=stretchParams" json:"stretch_params,omitempty"`
	// The instance backing the above VM which will be used for preparation for
	// the incoming migration.
	VmInfo *VmInfo `protobuf:"bytes,7,opt,name=vm_info,json=vmInfo" json:"vm_info,omitempty"`
	// IP address of the source host where the VM is currently running and will
	// be migrated from.
	SourceHostIp *string `protobuf:"bytes,8,opt,name=source_host_ip,json=sourceHostIp" json:"source_host_ip,omitempty"`
	// The public key of the source host where the VM is currently running and
	// will be migrated from.
	SourcePublicKey *string `protobuf:"bytes,9,opt,name=source_public_key,json=sourcePublicKey" json:"source_public_key,omitempty"`
	// The SSH signature of the source host where the VM is curently running and
	// will be migrated from.
	SourceSshSignature   *string  `protobuf:"bytes,10,opt,name=source_ssh_signature,json=sourceSshSignature" json:"source_ssh_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareVmCrossClusterLiveMigrateArg) Reset()         { *m = PrepareVmCrossClusterLiveMigrateArg{} }
func (m *PrepareVmCrossClusterLiveMigrateArg) String() string { return proto.CompactTextString(m) }
func (*PrepareVmCrossClusterLiveMigrateArg) ProtoMessage()    {}
func (*PrepareVmCrossClusterLiveMigrateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{395}
}

func (m *PrepareVmCrossClusterLiveMigrateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareVmCrossClusterLiveMigrateArg.Unmarshal(m, b)
}
func (m *PrepareVmCrossClusterLiveMigrateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareVmCrossClusterLiveMigrateArg.Marshal(b, m, deterministic)
}
func (m *PrepareVmCrossClusterLiveMigrateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareVmCrossClusterLiveMigrateArg.Merge(m, src)
}
func (m *PrepareVmCrossClusterLiveMigrateArg) XXX_Size() int {
	return xxx_messageInfo_PrepareVmCrossClusterLiveMigrateArg.Size(m)
}
func (m *PrepareVmCrossClusterLiveMigrateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareVmCrossClusterLiveMigrateArg.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareVmCrossClusterLiveMigrateArg proto.InternalMessageInfo

func (m *PrepareVmCrossClusterLiveMigrateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *PrepareVmCrossClusterLiveMigrateArg) GetNetworkMapping() *RecoveryPlanNetworkMappings {
	if m != nil {
		return m.NetworkMapping
	}
	return nil
}

func (m *PrepareVmCrossClusterLiveMigrateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *PrepareVmCrossClusterLiveMigrateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *PrepareVmCrossClusterLiveMigrateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *PrepareVmCrossClusterLiveMigrateArg) GetStretchParams() *stretch_params.StretchParams {
	if m != nil {
		return m.StretchParams
	}
	return nil
}

func (m *PrepareVmCrossClusterLiveMigrateArg) GetVmInfo() *VmInfo {
	if m != nil {
		return m.VmInfo
	}
	return nil
}

func (m *PrepareVmCrossClusterLiveMigrateArg) GetSourceHostIp() string {
	if m != nil && m.SourceHostIp != nil {
		return *m.SourceHostIp
	}
	return ""
}

func (m *PrepareVmCrossClusterLiveMigrateArg) GetSourcePublicKey() string {
	if m != nil && m.SourcePublicKey != nil {
		return *m.SourcePublicKey
	}
	return ""
}

func (m *PrepareVmCrossClusterLiveMigrateArg) GetSourceSshSignature() string {
	if m != nil && m.SourceSshSignature != nil {
		return *m.SourceSshSignature
	}
	return ""
}

type PrepareVmCrossClusterLiveMigrateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// PrepareVmCrossClusterLiveMigrateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareVmCrossClusterLiveMigrateRet) Reset()         { *m = PrepareVmCrossClusterLiveMigrateRet{} }
func (m *PrepareVmCrossClusterLiveMigrateRet) String() string { return proto.CompactTextString(m) }
func (*PrepareVmCrossClusterLiveMigrateRet) ProtoMessage()    {}
func (*PrepareVmCrossClusterLiveMigrateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{396}
}

func (m *PrepareVmCrossClusterLiveMigrateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareVmCrossClusterLiveMigrateRet.Unmarshal(m, b)
}
func (m *PrepareVmCrossClusterLiveMigrateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareVmCrossClusterLiveMigrateRet.Marshal(b, m, deterministic)
}
func (m *PrepareVmCrossClusterLiveMigrateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareVmCrossClusterLiveMigrateRet.Merge(m, src)
}
func (m *PrepareVmCrossClusterLiveMigrateRet) XXX_Size() int {
	return xxx_messageInfo_PrepareVmCrossClusterLiveMigrateRet.Size(m)
}
func (m *PrepareVmCrossClusterLiveMigrateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareVmCrossClusterLiveMigrateRet.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareVmCrossClusterLiveMigrateRet proto.InternalMessageInfo

func (m *PrepareVmCrossClusterLiveMigrateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type PrepareVmCrossClusterLiveMigrateTaskRet struct {
	// IP address of the destination host where the parcel is allocated.
	DestinationHostIp *string `protobuf:"bytes,1,opt,name=destination_host_ip,json=destinationHostIp" json:"destination_host_ip,omitempty"`
	// The mapping between the MAC address and the tap device name created on the
	// destination.
	TapDeviceMapping []*TapDeviceMapping `protobuf:"bytes,2,rep,name=tap_device_mapping,json=tapDeviceMapping" json:"tap_device_mapping,omitempty"`
	// Port to be used for the destination host where the VM is to be migrated.
	DestinationHostPort *uint64 `protobuf:"varint,3,opt,name=destination_host_port,json=destinationHostPort" json:"destination_host_port,omitempty"`
	// The public key of the destination host where the parcel is allocated.
	DestinationPublicKey *string `protobuf:"bytes,4,opt,name=destination_public_key,json=destinationPublicKey" json:"destination_public_key,omitempty"`
	// The SSH signature of the destination host where the parcel is allocated.
	DestinationSshSignature *string  `protobuf:"bytes,5,opt,name=destination_ssh_signature,json=destinationSshSignature" json:"destination_ssh_signature,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *PrepareVmCrossClusterLiveMigrateTaskRet) Reset() {
	*m = PrepareVmCrossClusterLiveMigrateTaskRet{}
}
func (m *PrepareVmCrossClusterLiveMigrateTaskRet) String() string { return proto.CompactTextString(m) }
func (*PrepareVmCrossClusterLiveMigrateTaskRet) ProtoMessage()    {}
func (*PrepareVmCrossClusterLiveMigrateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{397}
}

func (m *PrepareVmCrossClusterLiveMigrateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareVmCrossClusterLiveMigrateTaskRet.Unmarshal(m, b)
}
func (m *PrepareVmCrossClusterLiveMigrateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareVmCrossClusterLiveMigrateTaskRet.Marshal(b, m, deterministic)
}
func (m *PrepareVmCrossClusterLiveMigrateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareVmCrossClusterLiveMigrateTaskRet.Merge(m, src)
}
func (m *PrepareVmCrossClusterLiveMigrateTaskRet) XXX_Size() int {
	return xxx_messageInfo_PrepareVmCrossClusterLiveMigrateTaskRet.Size(m)
}
func (m *PrepareVmCrossClusterLiveMigrateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareVmCrossClusterLiveMigrateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareVmCrossClusterLiveMigrateTaskRet proto.InternalMessageInfo

func (m *PrepareVmCrossClusterLiveMigrateTaskRet) GetDestinationHostIp() string {
	if m != nil && m.DestinationHostIp != nil {
		return *m.DestinationHostIp
	}
	return ""
}

func (m *PrepareVmCrossClusterLiveMigrateTaskRet) GetTapDeviceMapping() []*TapDeviceMapping {
	if m != nil {
		return m.TapDeviceMapping
	}
	return nil
}

func (m *PrepareVmCrossClusterLiveMigrateTaskRet) GetDestinationHostPort() uint64 {
	if m != nil && m.DestinationHostPort != nil {
		return *m.DestinationHostPort
	}
	return 0
}

func (m *PrepareVmCrossClusterLiveMigrateTaskRet) GetDestinationPublicKey() string {
	if m != nil && m.DestinationPublicKey != nil {
		return *m.DestinationPublicKey
	}
	return ""
}

func (m *PrepareVmCrossClusterLiveMigrateTaskRet) GetDestinationSshSignature() string {
	if m != nil && m.DestinationSshSignature != nil {
		return *m.DestinationSshSignature
	}
	return ""
}

type CleanupPrepareVmCrossClusterLiveMigrateArg struct {
	// UUID of the VM that we are live migrating to another cluster.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// IP address of the destination host where the cleanup is to be performed.
	DestinationHostIp *string `protobuf:"bytes,5,opt,name=destination_host_ip,json=destinationHostIp" json:"destination_host_ip,omitempty"`
	// The mapping between the MAC address and the tap device name that needs to
	// be cleaned up on the destination.
	TapDeviceMapping     []*TapDeviceMapping `protobuf:"bytes,6,rep,name=tap_device_mapping,json=tapDeviceMapping" json:"tap_device_mapping,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) Reset() {
	*m = CleanupPrepareVmCrossClusterLiveMigrateArg{}
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) String() string {
	return proto.CompactTextString(m)
}
func (*CleanupPrepareVmCrossClusterLiveMigrateArg) ProtoMessage() {}
func (*CleanupPrepareVmCrossClusterLiveMigrateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{398}
}

func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateArg.Unmarshal(m, b)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateArg.Marshal(b, m, deterministic)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateArg.Merge(m, src)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) XXX_Size() int {
	return xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateArg.Size(m)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateArg.DiscardUnknown(m)
}

var xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateArg proto.InternalMessageInfo

func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) GetDestinationHostIp() string {
	if m != nil && m.DestinationHostIp != nil {
		return *m.DestinationHostIp
	}
	return ""
}

func (m *CleanupPrepareVmCrossClusterLiveMigrateArg) GetTapDeviceMapping() []*TapDeviceMapping {
	if m != nil {
		return m.TapDeviceMapping
	}
	return nil
}

type CleanupPrepareVmCrossClusterLiveMigrateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// CleanupPrepareVmCrossClusterLiveMigrateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanupPrepareVmCrossClusterLiveMigrateRet) Reset() {
	*m = CleanupPrepareVmCrossClusterLiveMigrateRet{}
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateRet) String() string {
	return proto.CompactTextString(m)
}
func (*CleanupPrepareVmCrossClusterLiveMigrateRet) ProtoMessage() {}
func (*CleanupPrepareVmCrossClusterLiveMigrateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{399}
}

func (m *CleanupPrepareVmCrossClusterLiveMigrateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateRet.Unmarshal(m, b)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateRet.Marshal(b, m, deterministic)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateRet.Merge(m, src)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateRet) XXX_Size() int {
	return xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateRet.Size(m)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateRet.DiscardUnknown(m)
}

var xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateRet proto.InternalMessageInfo

func (m *CleanupPrepareVmCrossClusterLiveMigrateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type CleanupPrepareVmCrossClusterLiveMigrateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanupPrepareVmCrossClusterLiveMigrateTaskRet) Reset() {
	*m = CleanupPrepareVmCrossClusterLiveMigrateTaskRet{}
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateTaskRet) String() string {
	return proto.CompactTextString(m)
}
func (*CleanupPrepareVmCrossClusterLiveMigrateTaskRet) ProtoMessage() {}
func (*CleanupPrepareVmCrossClusterLiveMigrateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{400}
}

func (m *CleanupPrepareVmCrossClusterLiveMigrateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateTaskRet.Unmarshal(m, b)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateTaskRet.Marshal(b, m, deterministic)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateTaskRet.Merge(m, src)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateTaskRet) XXX_Size() int {
	return xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateTaskRet.Size(m)
}
func (m *CleanupPrepareVmCrossClusterLiveMigrateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_CleanupPrepareVmCrossClusterLiveMigrateTaskRet proto.InternalMessageInfo

type PrechecksCrossClusterLiveMigrateArg struct {
	// UUID of the VM that we are live migrating to another cluster.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Stretch parameters that define the stretch relationship.
	StretchParams *stretch_params.StretchParams `protobuf:"bytes,2,opt,name=stretch_params,json=stretchParams" json:"stretch_params,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Network mapping applicable to the above VM.
	NetworkMapping *RecoveryPlanNetworkMappings `protobuf:"bytes,6,opt,name=network_mapping,json=networkMapping" json:"network_mapping,omitempty"`
	// The VM's CPU feature set.
	CpuFeatureSet []string `protobuf:"bytes,7,rep,name=cpu_feature_set,json=cpuFeatureSet" json:"cpu_feature_set,omitempty"`
	// The AHV host version on the primary cluster.
	AhvVersion *string `protobuf:"bytes,8,opt,name=ahv_version,json=ahvVersion" json:"ahv_version,omitempty"`
	// If set to True, disable updates to the VM if prechecks succeeded.
	DisableUpdates *bool `protobuf:"varint,9,opt,name=disable_updates,json=disableUpdates" json:"disable_updates,omitempty"`
	// Whether the VM is powered off on source cluster.
	VmState *VmState_State `protobuf:"varint,10,opt,name=vm_state,json=vmState,enum=nutanix.acropolis.VmState_State" json:"vm_state,omitempty"`
	// The AOS version on the primary cluster.
	AosVersion           *string  `protobuf:"bytes,11,opt,name=aos_version,json=aosVersion" json:"aos_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrechecksCrossClusterLiveMigrateArg) Reset()         { *m = PrechecksCrossClusterLiveMigrateArg{} }
func (m *PrechecksCrossClusterLiveMigrateArg) String() string { return proto.CompactTextString(m) }
func (*PrechecksCrossClusterLiveMigrateArg) ProtoMessage()    {}
func (*PrechecksCrossClusterLiveMigrateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{401}
}

func (m *PrechecksCrossClusterLiveMigrateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateArg.Unmarshal(m, b)
}
func (m *PrechecksCrossClusterLiveMigrateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateArg.Marshal(b, m, deterministic)
}
func (m *PrechecksCrossClusterLiveMigrateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateArg.Merge(m, src)
}
func (m *PrechecksCrossClusterLiveMigrateArg) XXX_Size() int {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateArg.Size(m)
}
func (m *PrechecksCrossClusterLiveMigrateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateArg.DiscardUnknown(m)
}

var xxx_messageInfo_PrechecksCrossClusterLiveMigrateArg proto.InternalMessageInfo

func (m *PrechecksCrossClusterLiveMigrateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *PrechecksCrossClusterLiveMigrateArg) GetStretchParams() *stretch_params.StretchParams {
	if m != nil {
		return m.StretchParams
	}
	return nil
}

func (m *PrechecksCrossClusterLiveMigrateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *PrechecksCrossClusterLiveMigrateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *PrechecksCrossClusterLiveMigrateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *PrechecksCrossClusterLiveMigrateArg) GetNetworkMapping() *RecoveryPlanNetworkMappings {
	if m != nil {
		return m.NetworkMapping
	}
	return nil
}

func (m *PrechecksCrossClusterLiveMigrateArg) GetCpuFeatureSet() []string {
	if m != nil {
		return m.CpuFeatureSet
	}
	return nil
}

func (m *PrechecksCrossClusterLiveMigrateArg) GetAhvVersion() string {
	if m != nil && m.AhvVersion != nil {
		return *m.AhvVersion
	}
	return ""
}

func (m *PrechecksCrossClusterLiveMigrateArg) GetDisableUpdates() bool {
	if m != nil && m.DisableUpdates != nil {
		return *m.DisableUpdates
	}
	return false
}

func (m *PrechecksCrossClusterLiveMigrateArg) GetVmState() VmState_State {
	if m != nil && m.VmState != nil {
		return *m.VmState
	}
	return VmState_kUnknown
}

func (m *PrechecksCrossClusterLiveMigrateArg) GetAosVersion() string {
	if m != nil && m.AosVersion != nil {
		return *m.AosVersion
	}
	return ""
}

type PrechecksCrossClusterLiveMigrateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// PrechecksCrossClusterLiveMigrateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrechecksCrossClusterLiveMigrateRet) Reset()         { *m = PrechecksCrossClusterLiveMigrateRet{} }
func (m *PrechecksCrossClusterLiveMigrateRet) String() string { return proto.CompactTextString(m) }
func (*PrechecksCrossClusterLiveMigrateRet) ProtoMessage()    {}
func (*PrechecksCrossClusterLiveMigrateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{402}
}

func (m *PrechecksCrossClusterLiveMigrateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateRet.Unmarshal(m, b)
}
func (m *PrechecksCrossClusterLiveMigrateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateRet.Marshal(b, m, deterministic)
}
func (m *PrechecksCrossClusterLiveMigrateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateRet.Merge(m, src)
}
func (m *PrechecksCrossClusterLiveMigrateRet) XXX_Size() int {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateRet.Size(m)
}
func (m *PrechecksCrossClusterLiveMigrateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateRet.DiscardUnknown(m)
}

var xxx_messageInfo_PrechecksCrossClusterLiveMigrateRet proto.InternalMessageInfo

func (m *PrechecksCrossClusterLiveMigrateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type PrechecksCrossClusterLiveMigrateTaskRet struct {
	// The result of the prechecks.
	PrecheckResults []*CrossClusterLiveMigratePrecheckResult `protobuf:"bytes,1,rep,name=precheck_results,json=precheckResults" json:"precheck_results,omitempty"`
	// The VM's VmInfo.
	AcropolisVmInfo *VmInfo `protobuf:"bytes,2,opt,name=acropolis_vm_info,json=acropolisVmInfo" json:"acropolis_vm_info,omitempty"`
	// The list of host IPs on secondary cluster.
	HostIpAdressList [][]byte `protobuf:"bytes,3,rep,name=host_ip_adress_list,json=hostIpAdressList" json:"host_ip_adress_list,omitempty"`
	// IP address of the source host where the VM is currently running and will
	// be migrated from.
	SourceHostIp *string `protobuf:"bytes,4,opt,name=source_host_ip,json=sourceHostIp" json:"source_host_ip,omitempty"`
	// The public SSH key of the source host where the VM is currently running.
	SourcePublicKey *string `protobuf:"bytes,5,opt,name=source_public_key,json=sourcePublicKey" json:"source_public_key,omitempty"`
	// The SSH signature of the source host where the VM is currently running.
	SourceSshSignature   *string  `protobuf:"bytes,6,opt,name=source_ssh_signature,json=sourceSshSignature" json:"source_ssh_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrechecksCrossClusterLiveMigrateTaskRet) Reset() {
	*m = PrechecksCrossClusterLiveMigrateTaskRet{}
}
func (m *PrechecksCrossClusterLiveMigrateTaskRet) String() string { return proto.CompactTextString(m) }
func (*PrechecksCrossClusterLiveMigrateTaskRet) ProtoMessage()    {}
func (*PrechecksCrossClusterLiveMigrateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{403}
}

func (m *PrechecksCrossClusterLiveMigrateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateTaskRet.Unmarshal(m, b)
}
func (m *PrechecksCrossClusterLiveMigrateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateTaskRet.Marshal(b, m, deterministic)
}
func (m *PrechecksCrossClusterLiveMigrateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateTaskRet.Merge(m, src)
}
func (m *PrechecksCrossClusterLiveMigrateTaskRet) XXX_Size() int {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateTaskRet.Size(m)
}
func (m *PrechecksCrossClusterLiveMigrateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_PrechecksCrossClusterLiveMigrateTaskRet proto.InternalMessageInfo

func (m *PrechecksCrossClusterLiveMigrateTaskRet) GetPrecheckResults() []*CrossClusterLiveMigratePrecheckResult {
	if m != nil {
		return m.PrecheckResults
	}
	return nil
}

func (m *PrechecksCrossClusterLiveMigrateTaskRet) GetAcropolisVmInfo() *VmInfo {
	if m != nil {
		return m.AcropolisVmInfo
	}
	return nil
}

func (m *PrechecksCrossClusterLiveMigrateTaskRet) GetHostIpAdressList() [][]byte {
	if m != nil {
		return m.HostIpAdressList
	}
	return nil
}

func (m *PrechecksCrossClusterLiveMigrateTaskRet) GetSourceHostIp() string {
	if m != nil && m.SourceHostIp != nil {
		return *m.SourceHostIp
	}
	return ""
}

func (m *PrechecksCrossClusterLiveMigrateTaskRet) GetSourcePublicKey() string {
	if m != nil && m.SourcePublicKey != nil {
		return *m.SourcePublicKey
	}
	return ""
}

func (m *PrechecksCrossClusterLiveMigrateTaskRet) GetSourceSshSignature() string {
	if m != nil && m.SourceSshSignature != nil {
		return *m.SourceSshSignature
	}
	return ""
}

type PrechecksCrossClusterLiveMigrateSyncArg struct {
	// List of VM UUIDs.
	VmUuidList           [][]byte `protobuf:"bytes,1,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrechecksCrossClusterLiveMigrateSyncArg) Reset() {
	*m = PrechecksCrossClusterLiveMigrateSyncArg{}
}
func (m *PrechecksCrossClusterLiveMigrateSyncArg) String() string { return proto.CompactTextString(m) }
func (*PrechecksCrossClusterLiveMigrateSyncArg) ProtoMessage()    {}
func (*PrechecksCrossClusterLiveMigrateSyncArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{404}
}

func (m *PrechecksCrossClusterLiveMigrateSyncArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncArg.Unmarshal(m, b)
}
func (m *PrechecksCrossClusterLiveMigrateSyncArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncArg.Marshal(b, m, deterministic)
}
func (m *PrechecksCrossClusterLiveMigrateSyncArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncArg.Merge(m, src)
}
func (m *PrechecksCrossClusterLiveMigrateSyncArg) XXX_Size() int {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncArg.Size(m)
}
func (m *PrechecksCrossClusterLiveMigrateSyncArg) XXX_DiscardUnknown() {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncArg.DiscardUnknown(m)
}

var xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncArg proto.InternalMessageInfo

func (m *PrechecksCrossClusterLiveMigrateSyncArg) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

type PrechecksCrossClusterLiveMigrateSyncRet struct {
	SyncPrecheckResults  []*PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult `protobuf:"bytes,1,rep,name=sync_precheck_results,json=syncPrecheckResults" json:"sync_precheck_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                              `json:"-"`
	XXX_unrecognized     []byte                                                                                `json:"-"`
	XXX_sizecache        int32                                                                                 `json:"-"`
}

func (m *PrechecksCrossClusterLiveMigrateSyncRet) Reset() {
	*m = PrechecksCrossClusterLiveMigrateSyncRet{}
}
func (m *PrechecksCrossClusterLiveMigrateSyncRet) String() string { return proto.CompactTextString(m) }
func (*PrechecksCrossClusterLiveMigrateSyncRet) ProtoMessage()    {}
func (*PrechecksCrossClusterLiveMigrateSyncRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{405}
}

func (m *PrechecksCrossClusterLiveMigrateSyncRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet.Unmarshal(m, b)
}
func (m *PrechecksCrossClusterLiveMigrateSyncRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet.Marshal(b, m, deterministic)
}
func (m *PrechecksCrossClusterLiveMigrateSyncRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet.Merge(m, src)
}
func (m *PrechecksCrossClusterLiveMigrateSyncRet) XXX_Size() int {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet.Size(m)
}
func (m *PrechecksCrossClusterLiveMigrateSyncRet) XXX_DiscardUnknown() {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet.DiscardUnknown(m)
}

var xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet proto.InternalMessageInfo

func (m *PrechecksCrossClusterLiveMigrateSyncRet) GetSyncPrecheckResults() []*PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult {
	if m != nil {
		return m.SyncPrecheckResults
	}
	return nil
}

type PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult struct {
	// The VM UUID.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The result of the prechecks.
	PrecheckResults      []*CrossClusterLiveMigratePrecheckResult `protobuf:"bytes,2,rep,name=precheck_results,json=precheckResults" json:"precheck_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult) Reset() {
	*m = PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult{}
}
func (m *PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult) String() string {
	return proto.CompactTextString(m)
}
func (*PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult) ProtoMessage() {
}
func (*PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{405, 0}
}

func (m *PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult.Unmarshal(m, b)
}
func (m *PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult.Marshal(b, m, deterministic)
}
func (m *PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult.Merge(m, src)
}
func (m *PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult) XXX_Size() int {
	return xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult.Size(m)
}
func (m *PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult.DiscardUnknown(m)
}

var xxx_messageInfo_PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult proto.InternalMessageInfo

func (m *PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult) GetPrecheckResults() []*CrossClusterLiveMigratePrecheckResult {
	if m != nil {
		return m.PrecheckResults
	}
	return nil
}

type VmRemoteForcePowerOffArg struct {
	// UUID of the VM.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Configuration of this VM.
	VmInfo *VmInfo `protobuf:"bytes,2,opt,name=vm_info,json=vmInfo" json:"vm_info,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRemoteForcePowerOffArg) Reset()         { *m = VmRemoteForcePowerOffArg{} }
func (m *VmRemoteForcePowerOffArg) String() string { return proto.CompactTextString(m) }
func (*VmRemoteForcePowerOffArg) ProtoMessage()    {}
func (*VmRemoteForcePowerOffArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{406}
}

func (m *VmRemoteForcePowerOffArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRemoteForcePowerOffArg.Unmarshal(m, b)
}
func (m *VmRemoteForcePowerOffArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRemoteForcePowerOffArg.Marshal(b, m, deterministic)
}
func (m *VmRemoteForcePowerOffArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRemoteForcePowerOffArg.Merge(m, src)
}
func (m *VmRemoteForcePowerOffArg) XXX_Size() int {
	return xxx_messageInfo_VmRemoteForcePowerOffArg.Size(m)
}
func (m *VmRemoteForcePowerOffArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRemoteForcePowerOffArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmRemoteForcePowerOffArg proto.InternalMessageInfo

func (m *VmRemoteForcePowerOffArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmRemoteForcePowerOffArg) GetVmInfo() *VmInfo {
	if m != nil {
		return m.VmInfo
	}
	return nil
}

func (m *VmRemoteForcePowerOffArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmRemoteForcePowerOffArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmRemoteForcePowerOffArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmRemoteForcePowerOffRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmRemoteForcePowerOffTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRemoteForcePowerOffRet) Reset()         { *m = VmRemoteForcePowerOffRet{} }
func (m *VmRemoteForcePowerOffRet) String() string { return proto.CompactTextString(m) }
func (*VmRemoteForcePowerOffRet) ProtoMessage()    {}
func (*VmRemoteForcePowerOffRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{407}
}

func (m *VmRemoteForcePowerOffRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRemoteForcePowerOffRet.Unmarshal(m, b)
}
func (m *VmRemoteForcePowerOffRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRemoteForcePowerOffRet.Marshal(b, m, deterministic)
}
func (m *VmRemoteForcePowerOffRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRemoteForcePowerOffRet.Merge(m, src)
}
func (m *VmRemoteForcePowerOffRet) XXX_Size() int {
	return xxx_messageInfo_VmRemoteForcePowerOffRet.Size(m)
}
func (m *VmRemoteForcePowerOffRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRemoteForcePowerOffRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmRemoteForcePowerOffRet proto.InternalMessageInfo

func (m *VmRemoteForcePowerOffRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmRemoteForcePowerOffTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRemoteForcePowerOffTaskRet) Reset()         { *m = VmRemoteForcePowerOffTaskRet{} }
func (m *VmRemoteForcePowerOffTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmRemoteForcePowerOffTaskRet) ProtoMessage()    {}
func (*VmRemoteForcePowerOffTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{408}
}

func (m *VmRemoteForcePowerOffTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRemoteForcePowerOffTaskRet.Unmarshal(m, b)
}
func (m *VmRemoteForcePowerOffTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRemoteForcePowerOffTaskRet.Marshal(b, m, deterministic)
}
func (m *VmRemoteForcePowerOffTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRemoteForcePowerOffTaskRet.Merge(m, src)
}
func (m *VmRemoteForcePowerOffTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmRemoteForcePowerOffTaskRet.Size(m)
}
func (m *VmRemoteForcePowerOffTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRemoteForcePowerOffTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmRemoteForcePowerOffTaskRet proto.InternalMessageInfo

type VmDisableUpdateArg struct {
	// UUID of the VM to enable/disable updates/deletes.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// If this list is not empty, all VM tasks for the specified VM UUID will fail
	// except for those tasks whose RPC names are found in the list. Note that if
	// we want to disable updates to a VM, we should at least put
	// "VmDisableUpdate" in the list so that we can issue this RPC to resume task
	// handling for the VM. If this list is empty, all VM tasks is allowed.
	DisableUpdateWhiteList []string `protobuf:"bytes,5,rep,name=disable_update_white_list,json=disableUpdateWhiteList" json:"disable_update_white_list,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *VmDisableUpdateArg) Reset()         { *m = VmDisableUpdateArg{} }
func (m *VmDisableUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VmDisableUpdateArg) ProtoMessage()    {}
func (*VmDisableUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{409}
}

func (m *VmDisableUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDisableUpdateArg.Unmarshal(m, b)
}
func (m *VmDisableUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDisableUpdateArg.Marshal(b, m, deterministic)
}
func (m *VmDisableUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDisableUpdateArg.Merge(m, src)
}
func (m *VmDisableUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VmDisableUpdateArg.Size(m)
}
func (m *VmDisableUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDisableUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDisableUpdateArg proto.InternalMessageInfo

func (m *VmDisableUpdateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmDisableUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmDisableUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmDisableUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmDisableUpdateArg) GetDisableUpdateWhiteList() []string {
	if m != nil {
		return m.DisableUpdateWhiteList
	}
	return nil
}

type VmDisableUpdateRet struct {
	// A task to poll for completion.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDisableUpdateRet) Reset()         { *m = VmDisableUpdateRet{} }
func (m *VmDisableUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmDisableUpdateRet) ProtoMessage()    {}
func (*VmDisableUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{410}
}

func (m *VmDisableUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDisableUpdateRet.Unmarshal(m, b)
}
func (m *VmDisableUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDisableUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmDisableUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDisableUpdateRet.Merge(m, src)
}
func (m *VmDisableUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmDisableUpdateRet.Size(m)
}
func (m *VmDisableUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDisableUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDisableUpdateRet proto.InternalMessageInfo

func (m *VmDisableUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmDisableUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDisableUpdateTaskRet) Reset()         { *m = VmDisableUpdateTaskRet{} }
func (m *VmDisableUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmDisableUpdateTaskRet) ProtoMessage()    {}
func (*VmDisableUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{411}
}

func (m *VmDisableUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDisableUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmDisableUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDisableUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmDisableUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDisableUpdateTaskRet.Merge(m, src)
}
func (m *VmDisableUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmDisableUpdateTaskRet.Size(m)
}
func (m *VmDisableUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDisableUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDisableUpdateTaskRet proto.InternalMessageInfo

type NodeResourceAllocationArg struct {
	// The UUID of the host.
	HostUuid               []byte                                              `protobuf:"bytes,1,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	ResourceAllocationList []*NodeResourceAllocationArg_ResourceAllocationInfo `protobuf:"bytes,2,rep,name=resource_allocation_list,json=resourceAllocationList" json:"resource_allocation_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeResourceAllocationArg) Reset()         { *m = NodeResourceAllocationArg{} }
func (m *NodeResourceAllocationArg) String() string { return proto.CompactTextString(m) }
func (*NodeResourceAllocationArg) ProtoMessage()    {}
func (*NodeResourceAllocationArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{412}
}

func (m *NodeResourceAllocationArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeResourceAllocationArg.Unmarshal(m, b)
}
func (m *NodeResourceAllocationArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeResourceAllocationArg.Marshal(b, m, deterministic)
}
func (m *NodeResourceAllocationArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResourceAllocationArg.Merge(m, src)
}
func (m *NodeResourceAllocationArg) XXX_Size() int {
	return xxx_messageInfo_NodeResourceAllocationArg.Size(m)
}
func (m *NodeResourceAllocationArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResourceAllocationArg.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResourceAllocationArg proto.InternalMessageInfo

func (m *NodeResourceAllocationArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *NodeResourceAllocationArg) GetResourceAllocationList() []*NodeResourceAllocationArg_ResourceAllocationInfo {
	if m != nil {
		return m.ResourceAllocationList
	}
	return nil
}

func (m *NodeResourceAllocationArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *NodeResourceAllocationArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *NodeResourceAllocationArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type NodeResourceAllocationArg_ResourceAllocationInfo struct {
	// Entity UUID.
	EntityUuid []byte `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid" json:"entity_uuid,omitempty"`
	// If the resource_type is kBufferMemory or kPoolMemory, host agent
	// shouldn't care about the entity_uuid here since the given
	// allocated_memory_bytes is for the node buffer or the node pool.
	ResourceType *NodeResourceAllocationArg_ResourceType `protobuf:"varint,2,opt,name=resource_type,json=resourceType,enum=nutanix.acropolis.NodeResourceAllocationArg_ResourceType" json:"resource_type,omitempty"`
	// Amount of memory that should be allocated currently to this entity, in
	// bytes.
	AllocatedMemoryBytes *uint64  `protobuf:"varint,3,opt,name=allocated_memory_bytes,json=allocatedMemoryBytes" json:"allocated_memory_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeResourceAllocationArg_ResourceAllocationInfo) Reset() {
	*m = NodeResourceAllocationArg_ResourceAllocationInfo{}
}
func (m *NodeResourceAllocationArg_ResourceAllocationInfo) String() string {
	return proto.CompactTextString(m)
}
func (*NodeResourceAllocationArg_ResourceAllocationInfo) ProtoMessage() {}
func (*NodeResourceAllocationArg_ResourceAllocationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{412, 0}
}

func (m *NodeResourceAllocationArg_ResourceAllocationInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeResourceAllocationArg_ResourceAllocationInfo.Unmarshal(m, b)
}
func (m *NodeResourceAllocationArg_ResourceAllocationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeResourceAllocationArg_ResourceAllocationInfo.Marshal(b, m, deterministic)
}
func (m *NodeResourceAllocationArg_ResourceAllocationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResourceAllocationArg_ResourceAllocationInfo.Merge(m, src)
}
func (m *NodeResourceAllocationArg_ResourceAllocationInfo) XXX_Size() int {
	return xxx_messageInfo_NodeResourceAllocationArg_ResourceAllocationInfo.Size(m)
}
func (m *NodeResourceAllocationArg_ResourceAllocationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResourceAllocationArg_ResourceAllocationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResourceAllocationArg_ResourceAllocationInfo proto.InternalMessageInfo

func (m *NodeResourceAllocationArg_ResourceAllocationInfo) GetEntityUuid() []byte {
	if m != nil {
		return m.EntityUuid
	}
	return nil
}

func (m *NodeResourceAllocationArg_ResourceAllocationInfo) GetResourceType() NodeResourceAllocationArg_ResourceType {
	if m != nil && m.ResourceType != nil {
		return *m.ResourceType
	}
	return NodeResourceAllocationArg_kVmMemory
}

func (m *NodeResourceAllocationArg_ResourceAllocationInfo) GetAllocatedMemoryBytes() uint64 {
	if m != nil && m.AllocatedMemoryBytes != nil {
		return *m.AllocatedMemoryBytes
	}
	return 0
}

type NodeResourceAllocationRet struct {
	// A task to poll for completion. On success, the task will contain a
	// NodeResourceAllocationTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeResourceAllocationRet) Reset()         { *m = NodeResourceAllocationRet{} }
func (m *NodeResourceAllocationRet) String() string { return proto.CompactTextString(m) }
func (*NodeResourceAllocationRet) ProtoMessage()    {}
func (*NodeResourceAllocationRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{413}
}

func (m *NodeResourceAllocationRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeResourceAllocationRet.Unmarshal(m, b)
}
func (m *NodeResourceAllocationRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeResourceAllocationRet.Marshal(b, m, deterministic)
}
func (m *NodeResourceAllocationRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResourceAllocationRet.Merge(m, src)
}
func (m *NodeResourceAllocationRet) XXX_Size() int {
	return xxx_messageInfo_NodeResourceAllocationRet.Size(m)
}
func (m *NodeResourceAllocationRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResourceAllocationRet.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResourceAllocationRet proto.InternalMessageInfo

func (m *NodeResourceAllocationRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type NodeResourceAllocationTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeResourceAllocationTaskRet) Reset()         { *m = NodeResourceAllocationTaskRet{} }
func (m *NodeResourceAllocationTaskRet) String() string { return proto.CompactTextString(m) }
func (*NodeResourceAllocationTaskRet) ProtoMessage()    {}
func (*NodeResourceAllocationTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{414}
}

func (m *NodeResourceAllocationTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeResourceAllocationTaskRet.Unmarshal(m, b)
}
func (m *NodeResourceAllocationTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeResourceAllocationTaskRet.Marshal(b, m, deterministic)
}
func (m *NodeResourceAllocationTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResourceAllocationTaskRet.Merge(m, src)
}
func (m *NodeResourceAllocationTaskRet) XXX_Size() int {
	return xxx_messageInfo_NodeResourceAllocationTaskRet.Size(m)
}
func (m *NodeResourceAllocationTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResourceAllocationTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResourceAllocationTaskRet proto.InternalMessageInfo

type HostSwapAttachArg struct {
	// Host UUID where the swap should be attached.
	HostUuid []byte `protobuf:"bytes,1,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostSwapAttachArg) Reset()         { *m = HostSwapAttachArg{} }
func (m *HostSwapAttachArg) String() string { return proto.CompactTextString(m) }
func (*HostSwapAttachArg) ProtoMessage()    {}
func (*HostSwapAttachArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{415}
}

func (m *HostSwapAttachArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostSwapAttachArg.Unmarshal(m, b)
}
func (m *HostSwapAttachArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostSwapAttachArg.Marshal(b, m, deterministic)
}
func (m *HostSwapAttachArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostSwapAttachArg.Merge(m, src)
}
func (m *HostSwapAttachArg) XXX_Size() int {
	return xxx_messageInfo_HostSwapAttachArg.Size(m)
}
func (m *HostSwapAttachArg) XXX_DiscardUnknown() {
	xxx_messageInfo_HostSwapAttachArg.DiscardUnknown(m)
}

var xxx_messageInfo_HostSwapAttachArg proto.InternalMessageInfo

func (m *HostSwapAttachArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *HostSwapAttachArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *HostSwapAttachArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *HostSwapAttachArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type HostSwapAttachRet struct {
	// A task to poll for completion.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostSwapAttachRet) Reset()         { *m = HostSwapAttachRet{} }
func (m *HostSwapAttachRet) String() string { return proto.CompactTextString(m) }
func (*HostSwapAttachRet) ProtoMessage()    {}
func (*HostSwapAttachRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{416}
}

func (m *HostSwapAttachRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostSwapAttachRet.Unmarshal(m, b)
}
func (m *HostSwapAttachRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostSwapAttachRet.Marshal(b, m, deterministic)
}
func (m *HostSwapAttachRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostSwapAttachRet.Merge(m, src)
}
func (m *HostSwapAttachRet) XXX_Size() int {
	return xxx_messageInfo_HostSwapAttachRet.Size(m)
}
func (m *HostSwapAttachRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HostSwapAttachRet.DiscardUnknown(m)
}

var xxx_messageInfo_HostSwapAttachRet proto.InternalMessageInfo

func (m *HostSwapAttachRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type HostSwapAttachTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostSwapAttachTaskRet) Reset()         { *m = HostSwapAttachTaskRet{} }
func (m *HostSwapAttachTaskRet) String() string { return proto.CompactTextString(m) }
func (*HostSwapAttachTaskRet) ProtoMessage()    {}
func (*HostSwapAttachTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{417}
}

func (m *HostSwapAttachTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostSwapAttachTaskRet.Unmarshal(m, b)
}
func (m *HostSwapAttachTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostSwapAttachTaskRet.Marshal(b, m, deterministic)
}
func (m *HostSwapAttachTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostSwapAttachTaskRet.Merge(m, src)
}
func (m *HostSwapAttachTaskRet) XXX_Size() int {
	return xxx_messageInfo_HostSwapAttachTaskRet.Size(m)
}
func (m *HostSwapAttachTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HostSwapAttachTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_HostSwapAttachTaskRet proto.InternalMessageInfo

type HostSwapDetachArg struct {
	// Host UUID where the swap should be detached.
	HostUuid []byte `protobuf:"bytes,1,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostSwapDetachArg) Reset()         { *m = HostSwapDetachArg{} }
func (m *HostSwapDetachArg) String() string { return proto.CompactTextString(m) }
func (*HostSwapDetachArg) ProtoMessage()    {}
func (*HostSwapDetachArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{418}
}

func (m *HostSwapDetachArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostSwapDetachArg.Unmarshal(m, b)
}
func (m *HostSwapDetachArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostSwapDetachArg.Marshal(b, m, deterministic)
}
func (m *HostSwapDetachArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostSwapDetachArg.Merge(m, src)
}
func (m *HostSwapDetachArg) XXX_Size() int {
	return xxx_messageInfo_HostSwapDetachArg.Size(m)
}
func (m *HostSwapDetachArg) XXX_DiscardUnknown() {
	xxx_messageInfo_HostSwapDetachArg.DiscardUnknown(m)
}

var xxx_messageInfo_HostSwapDetachArg proto.InternalMessageInfo

func (m *HostSwapDetachArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *HostSwapDetachArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *HostSwapDetachArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *HostSwapDetachArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type HostSwapDetachRet struct {
	// A task to poll for completion.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostSwapDetachRet) Reset()         { *m = HostSwapDetachRet{} }
func (m *HostSwapDetachRet) String() string { return proto.CompactTextString(m) }
func (*HostSwapDetachRet) ProtoMessage()    {}
func (*HostSwapDetachRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{419}
}

func (m *HostSwapDetachRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostSwapDetachRet.Unmarshal(m, b)
}
func (m *HostSwapDetachRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostSwapDetachRet.Marshal(b, m, deterministic)
}
func (m *HostSwapDetachRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostSwapDetachRet.Merge(m, src)
}
func (m *HostSwapDetachRet) XXX_Size() int {
	return xxx_messageInfo_HostSwapDetachRet.Size(m)
}
func (m *HostSwapDetachRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HostSwapDetachRet.DiscardUnknown(m)
}

var xxx_messageInfo_HostSwapDetachRet proto.InternalMessageInfo

func (m *HostSwapDetachRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type HostSwapDetachTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostSwapDetachTaskRet) Reset()         { *m = HostSwapDetachTaskRet{} }
func (m *HostSwapDetachTaskRet) String() string { return proto.CompactTextString(m) }
func (*HostSwapDetachTaskRet) ProtoMessage()    {}
func (*HostSwapDetachTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{420}
}

func (m *HostSwapDetachTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostSwapDetachTaskRet.Unmarshal(m, b)
}
func (m *HostSwapDetachTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostSwapDetachTaskRet.Marshal(b, m, deterministic)
}
func (m *HostSwapDetachTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostSwapDetachTaskRet.Merge(m, src)
}
func (m *HostSwapDetachTaskRet) XXX_Size() int {
	return xxx_messageInfo_HostSwapDetachTaskRet.Size(m)
}
func (m *HostSwapDetachTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_HostSwapDetachTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_HostSwapDetachTaskRet proto.InternalMessageInfo

type CleanupCrossClusterLiveMigrateSourceArg struct {
	// VM UUID for which cleanup should be done on source.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Host IP on which ssh keys for the VM were setup on the source cluster.
	SourceHostIp *string `protobuf:"bytes,2,opt,name=source_host_ip,json=sourceHostIp" json:"source_host_ip,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid       []byte   `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanupCrossClusterLiveMigrateSourceArg) Reset() {
	*m = CleanupCrossClusterLiveMigrateSourceArg{}
}
func (m *CleanupCrossClusterLiveMigrateSourceArg) String() string { return proto.CompactTextString(m) }
func (*CleanupCrossClusterLiveMigrateSourceArg) ProtoMessage()    {}
func (*CleanupCrossClusterLiveMigrateSourceArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{421}
}

func (m *CleanupCrossClusterLiveMigrateSourceArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceArg.Unmarshal(m, b)
}
func (m *CleanupCrossClusterLiveMigrateSourceArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceArg.Marshal(b, m, deterministic)
}
func (m *CleanupCrossClusterLiveMigrateSourceArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceArg.Merge(m, src)
}
func (m *CleanupCrossClusterLiveMigrateSourceArg) XXX_Size() int {
	return xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceArg.Size(m)
}
func (m *CleanupCrossClusterLiveMigrateSourceArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceArg.DiscardUnknown(m)
}

var xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceArg proto.InternalMessageInfo

func (m *CleanupCrossClusterLiveMigrateSourceArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *CleanupCrossClusterLiveMigrateSourceArg) GetSourceHostIp() string {
	if m != nil && m.SourceHostIp != nil {
		return *m.SourceHostIp
	}
	return ""
}

func (m *CleanupCrossClusterLiveMigrateSourceArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *CleanupCrossClusterLiveMigrateSourceArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type CleanupCrossClusterLiveMigrateSourceRet struct {
	// A task to poll for completion.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanupCrossClusterLiveMigrateSourceRet) Reset() {
	*m = CleanupCrossClusterLiveMigrateSourceRet{}
}
func (m *CleanupCrossClusterLiveMigrateSourceRet) String() string { return proto.CompactTextString(m) }
func (*CleanupCrossClusterLiveMigrateSourceRet) ProtoMessage()    {}
func (*CleanupCrossClusterLiveMigrateSourceRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{422}
}

func (m *CleanupCrossClusterLiveMigrateSourceRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceRet.Unmarshal(m, b)
}
func (m *CleanupCrossClusterLiveMigrateSourceRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceRet.Marshal(b, m, deterministic)
}
func (m *CleanupCrossClusterLiveMigrateSourceRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceRet.Merge(m, src)
}
func (m *CleanupCrossClusterLiveMigrateSourceRet) XXX_Size() int {
	return xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceRet.Size(m)
}
func (m *CleanupCrossClusterLiveMigrateSourceRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceRet.DiscardUnknown(m)
}

var xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceRet proto.InternalMessageInfo

func (m *CleanupCrossClusterLiveMigrateSourceRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type CleanupCrossClusterLiveMigrateSourceTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanupCrossClusterLiveMigrateSourceTaskRet) Reset() {
	*m = CleanupCrossClusterLiveMigrateSourceTaskRet{}
}
func (m *CleanupCrossClusterLiveMigrateSourceTaskRet) String() string {
	return proto.CompactTextString(m)
}
func (*CleanupCrossClusterLiveMigrateSourceTaskRet) ProtoMessage() {}
func (*CleanupCrossClusterLiveMigrateSourceTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{423}
}

func (m *CleanupCrossClusterLiveMigrateSourceTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceTaskRet.Unmarshal(m, b)
}
func (m *CleanupCrossClusterLiveMigrateSourceTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceTaskRet.Marshal(b, m, deterministic)
}
func (m *CleanupCrossClusterLiveMigrateSourceTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceTaskRet.Merge(m, src)
}
func (m *CleanupCrossClusterLiveMigrateSourceTaskRet) XXX_Size() int {
	return xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceTaskRet.Size(m)
}
func (m *CleanupCrossClusterLiveMigrateSourceTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_CleanupCrossClusterLiveMigrateSourceTaskRet proto.InternalMessageInfo

type VmUpdateIncarnationIdsArg struct {
	// A version 4 UUID if VM.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,4,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateIncarnationIdsArg) Reset()         { *m = VmUpdateIncarnationIdsArg{} }
func (m *VmUpdateIncarnationIdsArg) String() string { return proto.CompactTextString(m) }
func (*VmUpdateIncarnationIdsArg) ProtoMessage()    {}
func (*VmUpdateIncarnationIdsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{424}
}

func (m *VmUpdateIncarnationIdsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateIncarnationIdsArg.Unmarshal(m, b)
}
func (m *VmUpdateIncarnationIdsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateIncarnationIdsArg.Marshal(b, m, deterministic)
}
func (m *VmUpdateIncarnationIdsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateIncarnationIdsArg.Merge(m, src)
}
func (m *VmUpdateIncarnationIdsArg) XXX_Size() int {
	return xxx_messageInfo_VmUpdateIncarnationIdsArg.Size(m)
}
func (m *VmUpdateIncarnationIdsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateIncarnationIdsArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateIncarnationIdsArg proto.InternalMessageInfo

func (m *VmUpdateIncarnationIdsArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmUpdateIncarnationIdsArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmUpdateIncarnationIdsArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmUpdateIncarnationIdsArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmUpdateIncarnationIdsRet struct {
	// A task to poll for completion.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateIncarnationIdsRet) Reset()         { *m = VmUpdateIncarnationIdsRet{} }
func (m *VmUpdateIncarnationIdsRet) String() string { return proto.CompactTextString(m) }
func (*VmUpdateIncarnationIdsRet) ProtoMessage()    {}
func (*VmUpdateIncarnationIdsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{425}
}

func (m *VmUpdateIncarnationIdsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateIncarnationIdsRet.Unmarshal(m, b)
}
func (m *VmUpdateIncarnationIdsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateIncarnationIdsRet.Marshal(b, m, deterministic)
}
func (m *VmUpdateIncarnationIdsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateIncarnationIdsRet.Merge(m, src)
}
func (m *VmUpdateIncarnationIdsRet) XXX_Size() int {
	return xxx_messageInfo_VmUpdateIncarnationIdsRet.Size(m)
}
func (m *VmUpdateIncarnationIdsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateIncarnationIdsRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateIncarnationIdsRet proto.InternalMessageInfo

func (m *VmUpdateIncarnationIdsRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmUpdateIncarnationIdsTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateIncarnationIdsTaskRet) Reset()         { *m = VmUpdateIncarnationIdsTaskRet{} }
func (m *VmUpdateIncarnationIdsTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmUpdateIncarnationIdsTaskRet) ProtoMessage()    {}
func (*VmUpdateIncarnationIdsTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{426}
}

func (m *VmUpdateIncarnationIdsTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateIncarnationIdsTaskRet.Unmarshal(m, b)
}
func (m *VmUpdateIncarnationIdsTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateIncarnationIdsTaskRet.Marshal(b, m, deterministic)
}
func (m *VmUpdateIncarnationIdsTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateIncarnationIdsTaskRet.Merge(m, src)
}
func (m *VmUpdateIncarnationIdsTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmUpdateIncarnationIdsTaskRet.Size(m)
}
func (m *VmUpdateIncarnationIdsTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateIncarnationIdsTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateIncarnationIdsTaskRet proto.InternalMessageInfo

type ValidateTaskRequestArg struct {
	// Acropolis rpc task method name
	RpcMethodName *string `protobuf:"bytes,1,opt,name=rpc_method_name,json=rpcMethodName" json:"rpc_method_name,omitempty"`
	// Corresponding serialized Acropolis rpc task arg
	RpcArg               []byte   `protobuf:"bytes,2,opt,name=rpc_arg,json=rpcArg" json:"rpc_arg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateTaskRequestArg) Reset()         { *m = ValidateTaskRequestArg{} }
func (m *ValidateTaskRequestArg) String() string { return proto.CompactTextString(m) }
func (*ValidateTaskRequestArg) ProtoMessage()    {}
func (*ValidateTaskRequestArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{427}
}

func (m *ValidateTaskRequestArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateTaskRequestArg.Unmarshal(m, b)
}
func (m *ValidateTaskRequestArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateTaskRequestArg.Marshal(b, m, deterministic)
}
func (m *ValidateTaskRequestArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateTaskRequestArg.Merge(m, src)
}
func (m *ValidateTaskRequestArg) XXX_Size() int {
	return xxx_messageInfo_ValidateTaskRequestArg.Size(m)
}
func (m *ValidateTaskRequestArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateTaskRequestArg.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateTaskRequestArg proto.InternalMessageInfo

func (m *ValidateTaskRequestArg) GetRpcMethodName() string {
	if m != nil && m.RpcMethodName != nil {
		return *m.RpcMethodName
	}
	return ""
}

func (m *ValidateTaskRequestArg) GetRpcArg() []byte {
	if m != nil {
		return m.RpcArg
	}
	return nil
}

type ValidateTaskRequestRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateTaskRequestRet) Reset()         { *m = ValidateTaskRequestRet{} }
func (m *ValidateTaskRequestRet) String() string { return proto.CompactTextString(m) }
func (*ValidateTaskRequestRet) ProtoMessage()    {}
func (*ValidateTaskRequestRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77328fae309579fd, []int{428}
}

func (m *ValidateTaskRequestRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateTaskRequestRet.Unmarshal(m, b)
}
func (m *ValidateTaskRequestRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateTaskRequestRet.Marshal(b, m, deterministic)
}
func (m *ValidateTaskRequestRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateTaskRequestRet.Merge(m, src)
}
func (m *ValidateTaskRequestRet) XXX_Size() int {
	return xxx_messageInfo_ValidateTaskRequestRet.Size(m)
}
func (m *ValidateTaskRequestRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateTaskRequestRet.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateTaskRequestRet proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("nutanix.acropolis.MicrosegEnablementPreChecks", MicrosegEnablementPreChecks_name, MicrosegEnablementPreChecks_value)
	proto.RegisterEnum("nutanix.acropolis.MicrosegPreCheckStatus", MicrosegPreCheckStatus_name, MicrosegPreCheckStatus_value)
	proto.RegisterEnum("nutanix.acropolis.VmChangeDiskContainerUpdateArg_Operation", VmChangeDiskContainerUpdateArg_Operation_name, VmChangeDiskContainerUpdateArg_Operation_value)
	proto.RegisterEnum("nutanix.acropolis.MicrosegConfigSpec_MicrosegConfigMode", MicrosegConfigSpec_MicrosegConfigMode_name, MicrosegConfigSpec_MicrosegConfigMode_value)
	proto.RegisterEnum("nutanix.acropolis.NetworkReserveIpArg_Operation", NetworkReserveIpArg_Operation_name, NetworkReserveIpArg_Operation_value)
	proto.RegisterEnum("nutanix.acropolis.EnterMaintenanceModeArg_VmEvacuationOption", EnterMaintenanceModeArg_VmEvacuationOption_name, EnterMaintenanceModeArg_VmEvacuationOption_value)
	proto.RegisterEnum("nutanix.acropolis.VmAttachVgArg_Operation", VmAttachVgArg_Operation_name, VmAttachVgArg_Operation_value)
	proto.RegisterEnum("nutanix.acropolis.VolumeGroupAttachExternalArg_Operation", VolumeGroupAttachExternalArg_Operation_name, VolumeGroupAttachExternalArg_Operation_value)
	proto.RegisterEnum("nutanix.acropolis.VolumeGroupAttachIscsiClientArg_Operation", VolumeGroupAttachIscsiClientArg_Operation_name, VolumeGroupAttachIscsiClientArg_Operation_value)
	proto.RegisterEnum("nutanix.acropolis.VolumeGroupAttachVmArg_Operation", VolumeGroupAttachVmArg_Operation_name, VolumeGroupAttachVmArg_Operation_value)
	proto.RegisterEnum("nutanix.acropolis.StretchConfigureArg_Operation", StretchConfigureArg_Operation_name, StretchConfigureArg_Operation_value)
	proto.RegisterEnum("nutanix.acropolis.UpdateAffinityRuleTaskRet_RuleComplianceState", UpdateAffinityRuleTaskRet_RuleComplianceState_name, UpdateAffinityRuleTaskRet_RuleComplianceState_value)
	proto.RegisterEnum("nutanix.acropolis.UpdateAffinityRuleTaskRet_UpdateStatus", UpdateAffinityRuleTaskRet_UpdateStatus_name, UpdateAffinityRuleTaskRet_UpdateStatus_value)
	proto.RegisterEnum("nutanix.acropolis.ParcelsCreateArg_Preference", ParcelsCreateArg_Preference_name, ParcelsCreateArg_Preference_value)
	proto.RegisterEnum("nutanix.acropolis.DistributedVswitchValidateArg_OperationType", DistributedVswitchValidateArg_OperationType_name, DistributedVswitchValidateArg_OperationType_value)
	proto.RegisterEnum("nutanix.acropolis.NodeResourceAllocationArg_ResourceType", NodeResourceAllocationArg_ResourceType_name, NodeResourceAllocationArg_ResourceType_value)
	proto.RegisterType((*BatchRequestArg)(nil), "nutanix.acropolis.BatchRequestArg")
	proto.RegisterType((*BatchRequestRet)(nil), "nutanix.acropolis.BatchRequestRet")
	proto.RegisterType((*SnapshotCreateArg)(nil), "nutanix.acropolis.SnapshotCreateArg")
	proto.RegisterType((*SnapshotCreateRet)(nil), "nutanix.acropolis.SnapshotCreateRet")
	proto.RegisterType((*SnapshotCreateTaskRet)(nil), "nutanix.acropolis.SnapshotCreateTaskRet")
	proto.RegisterType((*SnapshotDeleteArg)(nil), "nutanix.acropolis.SnapshotDeleteArg")
	proto.RegisterType((*SnapshotDeleteRet)(nil), "nutanix.acropolis.SnapshotDeleteRet")
	proto.RegisterType((*SnapshotDeleteTaskRet)(nil), "nutanix.acropolis.SnapshotDeleteTaskRet")
	proto.RegisterType((*SnapshotGetArg)(nil), "nutanix.acropolis.SnapshotGetArg")
	proto.RegisterType((*SnapshotGetRet)(nil), "nutanix.acropolis.SnapshotGetRet")
	proto.RegisterType((*SnapshotListArg)(nil), "nutanix.acropolis.SnapshotListArg")
	proto.RegisterType((*SnapshotListRet)(nil), "nutanix.acropolis.SnapshotListRet")
	proto.RegisterType((*VmSnapshotListArg)(nil), "nutanix.acropolis.VmSnapshotListArg")
	proto.RegisterType((*VmSnapshotListRet)(nil), "nutanix.acropolis.VmSnapshotListRet")
	proto.RegisterType((*TaskPollArg)(nil), "nutanix.acropolis.TaskPollArg")
	proto.RegisterType((*TaskPollRet)(nil), "nutanix.acropolis.TaskPollRet")
	proto.RegisterType((*TaskListArg)(nil), "nutanix.acropolis.TaskListArg")
	proto.RegisterType((*TaskListRet)(nil), "nutanix.acropolis.TaskListRet")
	proto.RegisterType((*TaskGetArg)(nil), "nutanix.acropolis.TaskGetArg")
	proto.RegisterType((*TaskGetRet)(nil), "nutanix.acropolis.TaskGetRet")
	proto.RegisterType((*VpnLbRoutePrefixCreateArg)(nil), "nutanix.acropolis.VpnLbRoutePrefixCreateArg")
	proto.RegisterType((*VpnLbRoutePrefixCreateRet)(nil), "nutanix.acropolis.VpnLbRoutePrefixCreateRet")
	proto.RegisterType((*VpnLbRoutePrefixUpdateArg)(nil), "nutanix.acropolis.VpnLbRoutePrefixUpdateArg")
	proto.RegisterType((*VpnLbRoutePrefixUpdateRet)(nil), "nutanix.acropolis.VpnLbRoutePrefixUpdateRet")
	proto.RegisterType((*VpnLbRoutePrefixDeleteArg)(nil), "nutanix.acropolis.VpnLbRoutePrefixDeleteArg")
	proto.RegisterType((*VpnLbRoutePrefixDeleteRet)(nil), "nutanix.acropolis.VpnLbRoutePrefixDeleteRet")
	proto.RegisterType((*VmCreateArg)(nil), "nutanix.acropolis.VmCreateArg")
	proto.RegisterType((*VmCreateRet)(nil), "nutanix.acropolis.VmCreateRet")
	proto.RegisterType((*VmCreateTaskRet)(nil), "nutanix.acropolis.VmCreateTaskRet")
	proto.RegisterType((*VmGetArg)(nil), "nutanix.acropolis.VmGetArg")
	proto.RegisterType((*VmGetRet)(nil), "nutanix.acropolis.VmGetRet")
	proto.RegisterType((*VmSpecGetArg)(nil), "nutanix.acropolis.VmSpecGetArg")
	proto.RegisterType((*VmSpecGetRet)(nil), "nutanix.acropolis.VmSpecGetRet")
	proto.RegisterType((*DormantVmStateGetArg)(nil), "nutanix.acropolis.DormantVmStateGetArg")
	proto.RegisterType((*DormantVmStateGetRet)(nil), "nutanix.acropolis.DormantVmStateGetRet")
	proto.RegisterType((*DormantVmStateGetTaskRet)(nil), "nutanix.acropolis.DormantVmStateGetTaskRet")
	proto.RegisterType((*VmCloneArg)(nil), "nutanix.acropolis.VmCloneArg")
	proto.RegisterType((*VmCloneRet)(nil), "nutanix.acropolis.VmCloneRet")
	proto.RegisterType((*VmCloneTaskRet)(nil), "nutanix.acropolis.VmCloneTaskRet")
	proto.RegisterType((*VmRestoreArg)(nil), "nutanix.acropolis.VmRestoreArg")
	proto.RegisterType((*VmRestoreRet)(nil), "nutanix.acropolis.VmRestoreRet")
	proto.RegisterType((*VmRestoreTaskRet)(nil), "nutanix.acropolis.VmRestoreTaskRet")
	proto.RegisterType((*VmMigrateArg)(nil), "nutanix.acropolis.VmMigrateArg")
	proto.RegisterType((*VmMigrateRet)(nil), "nutanix.acropolis.VmMigrateRet")
	proto.RegisterType((*VmMigrateTaskRet)(nil), "nutanix.acropolis.VmMigrateTaskRet")
	proto.RegisterType((*VmMigrateAbortArg)(nil), "nutanix.acropolis.VmMigrateAbortArg")
	proto.RegisterType((*VmMigrateAbortRet)(nil), "nutanix.acropolis.VmMigrateAbortRet")
	proto.RegisterType((*VmUpdateArg)(nil), "nutanix.acropolis.VmUpdateArg")
	proto.RegisterType((*VmUpdateRet)(nil), "nutanix.acropolis.VmUpdateRet")
	proto.RegisterType((*VmUpdateTaskRet)(nil), "nutanix.acropolis.VmUpdateTaskRet")
	proto.RegisterType((*VmAffinityUpdateRet)(nil), "nutanix.acropolis.VmAffinityUpdateRet")
	proto.RegisterType((*VmAffinityUpdateTaskRet)(nil), "nutanix.acropolis.VmAffinityUpdateTaskRet")
	proto.RegisterType((*VmSetPowerStateArg)(nil), "nutanix.acropolis.VmSetPowerStateArg")
	proto.RegisterType((*VmSetPowerStateRet)(nil), "nutanix.acropolis.VmSetPowerStateRet")
	proto.RegisterType((*VmSetPowerStateTaskRet)(nil), "nutanix.acropolis.VmSetPowerStateTaskRet")
	proto.RegisterType((*VmForcePowerOffArg)(nil), "nutanix.acropolis.VmForcePowerOffArg")
	proto.RegisterType((*VmForcePowerOffRet)(nil), "nutanix.acropolis.VmForcePowerOffRet")
	proto.RegisterType((*VmForcePowerOffTaskRet)(nil), "nutanix.acropolis.VmForcePowerOffTaskRet")
	proto.RegisterType((*VmForceCompleteMigrationArg)(nil), "nutanix.acropolis.VmForceCompleteMigrationArg")
	proto.RegisterType((*VmForceCompleteMigrationRet)(nil), "nutanix.acropolis.VmForceCompleteMigrationRet")
	proto.RegisterType((*VmForceCompleteMigrationTaskRet)(nil), "nutanix.acropolis.VmForceCompleteMigrationTaskRet")
	proto.RegisterType((*VmDeleteArg)(nil), "nutanix.acropolis.VmDeleteArg")
	proto.RegisterType((*VmDeleteRet)(nil), "nutanix.acropolis.VmDeleteRet")
	proto.RegisterType((*VmDeleteTaskRet)(nil), "nutanix.acropolis.VmDeleteTaskRet")
	proto.RegisterType((*VmListArg)(nil), "nutanix.acropolis.VmListArg")
	proto.RegisterType((*VmListRet)(nil), "nutanix.acropolis.VmListRet")
	proto.RegisterType((*VmDiskCreateArg)(nil), "nutanix.acropolis.VmDiskCreateArg")
	proto.RegisterType((*VmDiskCreateRet)(nil), "nutanix.acropolis.VmDiskCreateRet")
	proto.RegisterType((*VmDiskCreateTaskRet)(nil), "nutanix.acropolis.VmDiskCreateTaskRet")
	proto.RegisterType((*VmDiskGetArg)(nil), "nutanix.acropolis.VmDiskGetArg")
	proto.RegisterType((*VmDiskGetRet)(nil), "nutanix.acropolis.VmDiskGetRet")
	proto.RegisterType((*VmDiskSpecCloneGetArg)(nil), "nutanix.acropolis.VmDiskSpecCloneGetArg")
	proto.RegisterType((*VmDiskSpecCloneDetails)(nil), "nutanix.acropolis.VmDiskSpecCloneDetails")
	proto.RegisterType((*VmDiskSpecCloneGetRet)(nil), "nutanix.acropolis.VmDiskSpecCloneGetRet")
	proto.RegisterType((*VmDiskUpdateArg)(nil), "nutanix.acropolis.VmDiskUpdateArg")
	proto.RegisterType((*VmDiskUpdateArg_VmDiskUpdateSpec)(nil), "nutanix.acropolis.VmDiskUpdateArg.VmDiskUpdateSpec")
	proto.RegisterType((*VmDiskUpdateRet)(nil), "nutanix.acropolis.VmDiskUpdateRet")
	proto.RegisterType((*VmDiskUpdateTaskRet)(nil), "nutanix.acropolis.VmDiskUpdateTaskRet")
	proto.RegisterType((*VmChangeDiskContainerUpdateArg)(nil), "nutanix.acropolis.VmChangeDiskContainerUpdateArg")
	proto.RegisterType((*VmChangeDiskContainerUpdateRet)(nil), "nutanix.acropolis.VmChangeDiskContainerUpdateRet")
	proto.RegisterType((*VmChangeDiskContainerUpdateTaskRet)(nil), "nutanix.acropolis.VmChangeDiskContainerUpdateTaskRet")
	proto.RegisterType((*VmDiskDeleteArg)(nil), "nutanix.acropolis.VmDiskDeleteArg")
	proto.RegisterType((*VmDiskDeleteRet)(nil), "nutanix.acropolis.VmDiskDeleteRet")
	proto.RegisterType((*VmDiskDeleteTaskRet)(nil), "nutanix.acropolis.VmDiskDeleteTaskRet")
	proto.RegisterType((*VmDiskListArg)(nil), "nutanix.acropolis.VmDiskListArg")
	proto.RegisterType((*VmDiskListRet)(nil), "nutanix.acropolis.VmDiskListRet")
	proto.RegisterType((*VmNicCreateArg)(nil), "nutanix.acropolis.VmNicCreateArg")
	proto.RegisterType((*VmNicCreateRet)(nil), "nutanix.acropolis.VmNicCreateRet")
	proto.RegisterType((*VmNicCreateTaskRet)(nil), "nutanix.acropolis.VmNicCreateTaskRet")
	proto.RegisterType((*VmNicGetArg)(nil), "nutanix.acropolis.VmNicGetArg")
	proto.RegisterType((*VmNicGetRet)(nil), "nutanix.acropolis.VmNicGetRet")
	proto.RegisterType((*VmNicUpdateArg)(nil), "nutanix.acropolis.VmNicUpdateArg")
	proto.RegisterType((*VmNicUpdateRet)(nil), "nutanix.acropolis.VmNicUpdateRet")
	proto.RegisterType((*VmNicUpdateTaskRet)(nil), "nutanix.acropolis.VmNicUpdateTaskRet")
	proto.RegisterType((*VmNicDeleteArg)(nil), "nutanix.acropolis.VmNicDeleteArg")
	proto.RegisterType((*VmNicDeleteRet)(nil), "nutanix.acropolis.VmNicDeleteRet")
	proto.RegisterType((*VmNicDeleteTaskRet)(nil), "nutanix.acropolis.VmNicDeleteTaskRet")
	proto.RegisterType((*VmNicListArg)(nil), "nutanix.acropolis.VmNicListArg")
	proto.RegisterType((*VmNicListRet)(nil), "nutanix.acropolis.VmNicListRet")
	proto.RegisterType((*VmFlushLearnedIPsArg)(nil), "nutanix.acropolis.VmFlushLearnedIPsArg")
	proto.RegisterType((*VmFlushLearnedIPsRet)(nil), "nutanix.acropolis.VmFlushLearnedIPsRet")
	proto.RegisterType((*VmGpuGetCompatibleHostsArg)(nil), "nutanix.acropolis.VmGpuGetCompatibleHostsArg")
	proto.RegisterType((*VmGpuGetCompatibleHostsRet)(nil), "nutanix.acropolis.VmGpuGetCompatibleHostsRet")
	proto.RegisterType((*MicrosegUpdateArg)(nil), "nutanix.acropolis.MicrosegUpdateArg")
	proto.RegisterType((*MicrosegUpdateRet)(nil), "nutanix.acropolis.MicrosegUpdateRet")
	proto.RegisterType((*MicrosegUpdateTaskRet)(nil), "nutanix.acropolis.MicrosegUpdateTaskRet")
	proto.RegisterType((*MicrosegUpdateGenNumArg)(nil), "nutanix.acropolis.MicrosegUpdateGenNumArg")
	proto.RegisterType((*MicrosegUpdateGenNumRet)(nil), "nutanix.acropolis.MicrosegUpdateGenNumRet")
	proto.RegisterType((*MicrosegUpdateGenNumTaskRet)(nil), "nutanix.acropolis.MicrosegUpdateGenNumTaskRet")
	proto.RegisterType((*MicrosegDeleteArg)(nil), "nutanix.acropolis.MicrosegDeleteArg")
	proto.RegisterType((*MicrosegDeleteRet)(nil), "nutanix.acropolis.MicrosegDeleteRet")
	proto.RegisterType((*MicrosegDeleteTaskRet)(nil), "nutanix.acropolis.MicrosegDeleteTaskRet")
	proto.RegisterType((*MicrosegBatchUpdateArg)(nil), "nutanix.acropolis.MicrosegBatchUpdateArg")
	proto.RegisterType((*MicrosegBatchUpdateRet)(nil), "nutanix.acropolis.MicrosegBatchUpdateRet")
	proto.RegisterType((*MicrosegMonitorEnableArg)(nil), "nutanix.acropolis.MicrosegMonitorEnableArg")
	proto.RegisterType((*MicrosegMonitorEnableRet)(nil), "nutanix.acropolis.MicrosegMonitorEnableRet")
	proto.RegisterType((*MicrosegEnablementPreCheckArg)(nil), "nutanix.acropolis.MicrosegEnablementPreCheckArg")
	proto.RegisterType((*MicrosegPreCheckRetType)(nil), "nutanix.acropolis.MicrosegPreCheckRetType")
	proto.RegisterType((*MicrosegEnablementPreCheckRet)(nil), "nutanix.acropolis.MicrosegEnablementPreCheckRet")
	proto.RegisterType((*MicrosegConfigSpec)(nil), "nutanix.acropolis.MicrosegConfigSpec")
	proto.RegisterType((*MicrosegConfigGetArg)(nil), "nutanix.acropolis.MicrosegConfigGetArg")
	proto.RegisterType((*MicrosegConfigGetRet)(nil), "nutanix.acropolis.MicrosegConfigGetRet")
	proto.RegisterType((*MicrosegConfigSetArg)(nil), "nutanix.acropolis.MicrosegConfigSetArg")
	proto.RegisterType((*MicrosegConfigSetRet)(nil), "nutanix.acropolis.MicrosegConfigSetRet")
	proto.RegisterType((*MicrosegSecurityMonitoringConfigSetArg)(nil), "nutanix.acropolis.MicrosegSecurityMonitoringConfigSetArg")
	proto.RegisterType((*MicrosegSecurityMonitoringConfigSetRet)(nil), "nutanix.acropolis.MicrosegSecurityMonitoringConfigSetRet")
	proto.RegisterType((*EchoArg)(nil), "nutanix.acropolis.EchoArg")
	proto.RegisterType((*EchoRet)(nil), "nutanix.acropolis.EchoRet")
	proto.RegisterType((*VmEventInfo)(nil), "nutanix.acropolis.VmEventInfo")
	proto.RegisterType((*VmEventResponse)(nil), "nutanix.acropolis.VmEventResponse")
	proto.RegisterType((*VmEventAddOnHostArg)(nil), "nutanix.acropolis.VmEventAddOnHostArg")
	proto.RegisterType((*VmEventAddOnHostRet)(nil), "nutanix.acropolis.VmEventAddOnHostRet")
	proto.RegisterType((*VmEventDeleteOnHostArg)(nil), "nutanix.acropolis.VmEventDeleteOnHostArg")
	proto.RegisterType((*VmEventDeleteOnHostRet)(nil), "nutanix.acropolis.VmEventDeleteOnHostRet")
	proto.RegisterType((*VmSyncRepReplicateArg)(nil), "nutanix.acropolis.VmSyncRepReplicateArg")
	proto.RegisterType((*VmSyncRepReplicateRet)(nil), "nutanix.acropolis.VmSyncRepReplicateRet")
	proto.RegisterType((*VmSyncRepReplicateTaskRet)(nil), "nutanix.acropolis.VmSyncRepReplicateTaskRet")
	proto.RegisterType((*NetworkCreateArg)(nil), "nutanix.acropolis.NetworkCreateArg")
	proto.RegisterType((*NetworkCreateRet)(nil), "nutanix.acropolis.NetworkCreateRet")
	proto.RegisterType((*NetworkGetArg)(nil), "nutanix.acropolis.NetworkGetArg")
	proto.RegisterType((*NetworkGetRet)(nil), "nutanix.acropolis.NetworkGetRet")
	proto.RegisterType((*NetworkUpdateArg)(nil), "nutanix.acropolis.NetworkUpdateArg")
	proto.RegisterType((*NetworkUpdateRet)(nil), "nutanix.acropolis.NetworkUpdateRet")
	proto.RegisterType((*NetworkDeleteArg)(nil), "nutanix.acropolis.NetworkDeleteArg")
	proto.RegisterType((*NetworkDeleteRet)(nil), "nutanix.acropolis.NetworkDeleteRet")
	proto.RegisterType((*NetworkListArg)(nil), "nutanix.acropolis.NetworkListArg")
	proto.RegisterType((*NetworkListRet)(nil), "nutanix.acropolis.NetworkListRet")
	proto.RegisterType((*NetworkReserveIpArg)(nil), "nutanix.acropolis.NetworkReserveIpArg")
	proto.RegisterType((*NetworkReserveIpRet)(nil), "nutanix.acropolis.NetworkReserveIpRet")
	proto.RegisterType((*NetworkAddressTableGetArg)(nil), "nutanix.acropolis.NetworkAddressTableGetArg")
	proto.RegisterType((*NetworkAddressTableGetRet)(nil), "nutanix.acropolis.NetworkAddressTableGetRet")
	proto.RegisterType((*NetworkFunctionChainConfigCreateArg)(nil), "nutanix.acropolis.NetworkFunctionChainConfigCreateArg")
	proto.RegisterType((*NetworkFunctionChainConfigCreateRet)(nil), "nutanix.acropolis.NetworkFunctionChainConfigCreateRet")
	proto.RegisterType((*NetworkFunctionChainConfigGetArg)(nil), "nutanix.acropolis.NetworkFunctionChainConfigGetArg")
	proto.RegisterType((*NetworkFunctionChainConfigGetRet)(nil), "nutanix.acropolis.NetworkFunctionChainConfigGetRet")
	proto.RegisterType((*NetworkFunctionChainConfigUpdateArg)(nil), "nutanix.acropolis.NetworkFunctionChainConfigUpdateArg")
	proto.RegisterType((*NetworkFunctionChainConfigUpdateRet)(nil), "nutanix.acropolis.NetworkFunctionChainConfigUpdateRet")
	proto.RegisterType((*NetworkFunctionChainConfigDeleteArg)(nil), "nutanix.acropolis.NetworkFunctionChainConfigDeleteArg")
	proto.RegisterType((*NetworkFunctionChainConfigDeleteRet)(nil), "nutanix.acropolis.NetworkFunctionChainConfigDeleteRet")
	proto.RegisterType((*NetworkFunctionChainConfigListArg)(nil), "nutanix.acropolis.NetworkFunctionChainConfigListArg")
	proto.RegisterType((*NetworkFunctionChainConfigListRet)(nil), "nutanix.acropolis.NetworkFunctionChainConfigListRet")
	proto.RegisterType((*VmAffinityNodeGetArg)(nil), "nutanix.acropolis.VmAffinityNodeGetArg")
	proto.RegisterType((*VmAffinityNodeGetRet)(nil), "nutanix.acropolis.VmAffinityNodeGetRet")
	proto.RegisterType((*VmAffinityNodeGetRet_AffinityNodeInfo)(nil), "nutanix.acropolis.VmAffinityNodeGetRet.AffinityNodeInfo")
	proto.RegisterType((*EnterMaintenanceModeArg)(nil), "nutanix.acropolis.EnterMaintenanceModeArg")
	proto.RegisterType((*EnterMaintenanceModeRet)(nil), "nutanix.acropolis.EnterMaintenanceModeRet")
	proto.RegisterType((*EnterMaintenanceModeTaskRet)(nil), "nutanix.acropolis.EnterMaintenanceModeTaskRet")
	proto.RegisterType((*ExitMaintenanceModeArg)(nil), "nutanix.acropolis.ExitMaintenanceModeArg")
	proto.RegisterType((*ExitMaintenanceModeRet)(nil), "nutanix.acropolis.ExitMaintenanceModeRet")
	proto.RegisterType((*ExitMaintenanceModeAsyncRet)(nil), "nutanix.acropolis.ExitMaintenanceModeAsyncRet")
	proto.RegisterType((*HaUpdateArg)(nil), "nutanix.acropolis.HaUpdateArg")
	proto.RegisterType((*HaUpdateRet)(nil), "nutanix.acropolis.HaUpdateRet")
	proto.RegisterType((*HaUpdateTaskRet)(nil), "nutanix.acropolis.HaUpdateTaskRet")
	proto.RegisterType((*HaGetArg)(nil), "nutanix.acropolis.HaGetArg")
	proto.RegisterType((*HaGetRet)(nil), "nutanix.acropolis.HaGetRet")
	proto.RegisterType((*HostRestartAllVmsArg)(nil), "nutanix.acropolis.HostRestartAllVmsArg")
	proto.RegisterType((*HostRestartAllVmsRet)(nil), "nutanix.acropolis.HostRestartAllVmsRet")
	proto.RegisterType((*HostRestartAllVmsTaskRet)(nil), "nutanix.acropolis.HostRestartAllVmsTaskRet")
	proto.RegisterType((*RestartVmGroupArg)(nil), "nutanix.acropolis.RestartVmGroupArg")
	proto.RegisterType((*RestartVmGroupRet)(nil), "nutanix.acropolis.RestartVmGroupRet")
	proto.RegisterType((*RestartVmGroupTaskRet)(nil), "nutanix.acropolis.RestartVmGroupTaskRet")
	proto.RegisterType((*StartHAFailoverArg)(nil), "nutanix.acropolis.StartHAFailoverArg")
	proto.RegisterType((*StartHAFailoverRet)(nil), "nutanix.acropolis.StartHAFailoverRet")
	proto.RegisterType((*StartHAFailoverTaskRet)(nil), "nutanix.acropolis.StartHAFailoverTaskRet")
	proto.RegisterType((*HaFailoverArg)(nil), "nutanix.acropolis.HaFailoverArg")
	proto.RegisterType((*HaFailoverRet)(nil), "nutanix.acropolis.HaFailoverRet")
	proto.RegisterType((*HaFailoverTaskRet)(nil), "nutanix.acropolis.HaFailoverTaskRet")
	proto.RegisterType((*VmRegisterArg)(nil), "nutanix.acropolis.VmRegisterArg")
	proto.RegisterType((*VmRegisterRet)(nil), "nutanix.acropolis.VmRegisterRet")
	proto.RegisterType((*VmRegisterTaskRet)(nil), "nutanix.acropolis.VmRegisterTaskRet")
	proto.RegisterType((*VmAttachVgArg)(nil), "nutanix.acropolis.VmAttachVgArg")
	proto.RegisterType((*VmAttachVgRet)(nil), "nutanix.acropolis.VmAttachVgRet")
	proto.RegisterType((*VmAttachVgTaskRet)(nil), "nutanix.acropolis.VmAttachVgTaskRet")
	proto.RegisterType((*ImageCreateArg)(nil), "nutanix.acropolis.ImageCreateArg")
	proto.RegisterType((*ImageCreateRet)(nil), "nutanix.acropolis.ImageCreateRet")
	proto.RegisterType((*ImageCreateTaskRet)(nil), "nutanix.acropolis.ImageCreateTaskRet")
	proto.RegisterType((*ImageDeleteArg)(nil), "nutanix.acropolis.ImageDeleteArg")
	proto.RegisterType((*ImageDeleteRet)(nil), "nutanix.acropolis.ImageDeleteRet")
	proto.RegisterType((*ImageDeleteTaskRet)(nil), "nutanix.acropolis.ImageDeleteTaskRet")
	proto.RegisterType((*ImageGetArg)(nil), "nutanix.acropolis.ImageGetArg")
	proto.RegisterType((*ImageGetRet)(nil), "nutanix.acropolis.ImageGetRet")
	proto.RegisterType((*ImageUpdateArg)(nil), "nutanix.acropolis.ImageUpdateArg")
	proto.RegisterType((*ImageUpdateRet)(nil), "nutanix.acropolis.ImageUpdateRet")
	proto.RegisterType((*ImageUpdateTaskRet)(nil), "nutanix.acropolis.ImageUpdateTaskRet")
	proto.RegisterType((*VolumeGroupCreateArg)(nil), "nutanix.acropolis.VolumeGroupCreateArg")
	proto.RegisterType((*VolumeGroupCreateRet)(nil), "nutanix.acropolis.VolumeGroupCreateRet")
	proto.RegisterType((*VolumeGroupCreateTaskRet)(nil), "nutanix.acropolis.VolumeGroupCreateTaskRet")
	proto.RegisterType((*VolumeGroupGetArg)(nil), "nutanix.acropolis.VolumeGroupGetArg")
	proto.RegisterType((*VolumeGroupGetRet)(nil), "nutanix.acropolis.VolumeGroupGetRet")
	proto.RegisterType((*VolumeGroupUpdateArg)(nil), "nutanix.acropolis.VolumeGroupUpdateArg")
	proto.RegisterType((*VolumeGroupUpdateArg_IqnList)(nil), "nutanix.acropolis.VolumeGroupUpdateArg.IqnList")
	proto.RegisterType((*VolumeGroupUpdateArg_IscsiClientSpecList)(nil), "nutanix.acropolis.VolumeGroupUpdateArg.IscsiClientSpecList")
	proto.RegisterType((*VolumeGroupUpdateRet)(nil), "nutanix.acropolis.VolumeGroupUpdateRet")
	proto.RegisterType((*VolumeGroupUpdateTaskRet)(nil), "nutanix.acropolis.VolumeGroupUpdateTaskRet")
	proto.RegisterType((*VolumeGroupDeleteArg)(nil), "nutanix.acropolis.VolumeGroupDeleteArg")
	proto.RegisterType((*VolumeGroupDeleteRet)(nil), "nutanix.acropolis.VolumeGroupDeleteRet")
	proto.RegisterType((*VolumeGroupDeleteTaskRet)(nil), "nutanix.acropolis.VolumeGroupDeleteTaskRet")
	proto.RegisterType((*VolumeGroupCloneArg)(nil), "nutanix.acropolis.VolumeGroupCloneArg")
	proto.RegisterType((*VolumeGroupCloneRet)(nil), "nutanix.acropolis.VolumeGroupCloneRet")
	proto.RegisterType((*VolumeGroupCloneTaskRet)(nil), "nutanix.acropolis.VolumeGroupCloneTaskRet")
	proto.RegisterType((*VolumeDiskCreateArg)(nil), "nutanix.acropolis.VolumeDiskCreateArg")
	proto.RegisterType((*VolumeDiskCreateRet)(nil), "nutanix.acropolis.VolumeDiskCreateRet")
	proto.RegisterType((*VolumeDiskCreateTaskRet)(nil), "nutanix.acropolis.VolumeDiskCreateTaskRet")
	proto.RegisterType((*VolumeDiskDeleteArg)(nil), "nutanix.acropolis.VolumeDiskDeleteArg")
	proto.RegisterType((*VolumeDiskDeleteRet)(nil), "nutanix.acropolis.VolumeDiskDeleteRet")
	proto.RegisterType((*VolumeDiskDeleteTaskRet)(nil), "nutanix.acropolis.VolumeDiskDeleteTaskRet")
	proto.RegisterType((*VolumeDiskUpdateArg)(nil), "nutanix.acropolis.VolumeDiskUpdateArg")
	proto.RegisterType((*VolumeDiskUpdateArg_VolumeDiskUpdateSpec)(nil), "nutanix.acropolis.VolumeDiskUpdateArg.VolumeDiskUpdateSpec")
	proto.RegisterType((*VolumeDiskUpdateRet)(nil), "nutanix.acropolis.VolumeDiskUpdateRet")
	proto.RegisterType((*VolumeDiskUpdateTaskRet)(nil), "nutanix.acropolis.VolumeDiskUpdateTaskRet")
	proto.RegisterType((*VolumeGroupAttachExternalArg)(nil), "nutanix.acropolis.VolumeGroupAttachExternalArg")
	proto.RegisterType((*VolumeGroupAttachExternalRet)(nil), "nutanix.acropolis.VolumeGroupAttachExternalRet")
	proto.RegisterType((*VolumeGroupAttachIscsiClientArg)(nil), "nutanix.acropolis.VolumeGroupAttachIscsiClientArg")
	proto.RegisterType((*VolumeGroupAttachIscsiClientRet)(nil), "nutanix.acropolis.VolumeGroupAttachIscsiClientRet")
	proto.RegisterType((*VolumeGroupAttachIscsiClientTaskRet)(nil), "nutanix.acropolis.VolumeGroupAttachIscsiClientTaskRet")
	proto.RegisterType((*VolumeGroupUpdateExternalArg)(nil), "nutanix.acropolis.VolumeGroupUpdateExternalArg")
	proto.RegisterType((*VolumeGroupUpdateExternalRet)(nil), "nutanix.acropolis.VolumeGroupUpdateExternalRet")
	proto.RegisterType((*VolumeGroupAttachVmArg)(nil), "nutanix.acropolis.VolumeGroupAttachVmArg")
	proto.RegisterType((*VolumeGroupAttachVmRet)(nil), "nutanix.acropolis.VolumeGroupAttachVmRet")
	proto.RegisterType((*VolumeGroupAttachVmTaskRet)(nil), "nutanix.acropolis.VolumeGroupAttachVmTaskRet")
	proto.RegisterType((*VolumeGroupRegisterArg)(nil), "nutanix.acropolis.VolumeGroupRegisterArg")
	proto.RegisterType((*VolumeGroupRegisterRet)(nil), "nutanix.acropolis.VolumeGroupRegisterRet")
	proto.RegisterType((*VolumeGroupRegisterTaskRet)(nil), "nutanix.acropolis.VolumeGroupRegisterTaskRet")
	proto.RegisterType((*IscsiClientGetArg)(nil), "nutanix.acropolis.IscsiClientGetArg")
	proto.RegisterType((*IscsiClientGetRet)(nil), "nutanix.acropolis.IscsiClientGetRet")
	proto.RegisterType((*IscsiClientUpdateArg)(nil), "nutanix.acropolis.IscsiClientUpdateArg")
	proto.RegisterType((*IscsiClientUpdateRet)(nil), "nutanix.acropolis.IscsiClientUpdateRet")
	proto.RegisterType((*IscsiClientUpdateAsyncArg)(nil), "nutanix.acropolis.IscsiClientUpdateAsyncArg")
	proto.RegisterType((*IscsiClientUpdateAsyncRet)(nil), "nutanix.acropolis.IscsiClientUpdateAsyncRet")
	proto.RegisterType((*IscsiClientUpdateAsyncTaskRet)(nil), "nutanix.acropolis.IscsiClientUpdateAsyncTaskRet")
	proto.RegisterType((*SchedulerNodeGetArg)(nil), "nutanix.acropolis.SchedulerNodeGetArg")
	proto.RegisterType((*SchedulerNodeGetRet)(nil), "nutanix.acropolis.SchedulerNodeGetRet")
	proto.RegisterType((*SchedulerSegmentAssignmentGetArg)(nil), "nutanix.acropolis.SchedulerSegmentAssignmentGetArg")
	proto.RegisterType((*SchedulerSegmentAssignmentGetRet)(nil), "nutanix.acropolis.SchedulerSegmentAssignmentGetRet")
	proto.RegisterType((*HostRestoreVmLocalityArg)(nil), "nutanix.acropolis.HostRestoreVmLocalityArg")
	proto.RegisterType((*HostRestoreVmLocalityRet)(nil), "nutanix.acropolis.HostRestoreVmLocalityRet")
	proto.RegisterType((*HostRestoreVmLocalityTaskRet)(nil), "nutanix.acropolis.HostRestoreVmLocalityTaskRet")
	proto.RegisterType((*StretchGetArg)(nil), "nutanix.acropolis.StretchGetArg")
	proto.RegisterType((*StretchGetRet)(nil), "nutanix.acropolis.StretchGetRet")
	proto.RegisterType((*StretchConfigureArg)(nil), "nutanix.acropolis.StretchConfigureArg")
	proto.RegisterType((*StretchConfigureRet)(nil), "nutanix.acropolis.StretchConfigureRet")
	proto.RegisterType((*StretchConfigureTaskRet)(nil), "nutanix.acropolis.StretchConfigureTaskRet")
	proto.RegisterType((*StretchRecoverArg)(nil), "nutanix.acropolis.StretchRecoverArg")
	proto.RegisterType((*StretchRecoverRet)(nil), "nutanix.acropolis.StretchRecoverRet")
	proto.RegisterType((*StretchRecoverTaskRet)(nil), "nutanix.acropolis.StretchRecoverTaskRet")
	proto.RegisterType((*VmGroupCreateArg)(nil), "nutanix.acropolis.VmGroupCreateArg")
	proto.RegisterType((*VmGroupCreateRet)(nil), "nutanix.acropolis.VmGroupCreateRet")
	proto.RegisterType((*VmGroupCreateTaskRet)(nil), "nutanix.acropolis.VmGroupCreateTaskRet")
	proto.RegisterType((*VmGroupDeleteArg)(nil), "nutanix.acropolis.VmGroupDeleteArg")
	proto.RegisterType((*VmGroupDeleteRet)(nil), "nutanix.acropolis.VmGroupDeleteRet")
	proto.RegisterType((*VmGroupDeleteTaskRet)(nil), "nutanix.acropolis.VmGroupDeleteTaskRet")
	proto.RegisterType((*VmGroupListArg)(nil), "nutanix.acropolis.VmGroupListArg")
	proto.RegisterType((*VmGroupListRet)(nil), "nutanix.acropolis.VmGroupListRet")
	proto.RegisterType((*VmGroupGetArg)(nil), "nutanix.acropolis.VmGroupGetArg")
	proto.RegisterType((*VmGroupGetRet)(nil), "nutanix.acropolis.VmGroupGetRet")
	proto.RegisterType((*VmGroupUpdateArg)(nil), "nutanix.acropolis.VmGroupUpdateArg")
	proto.RegisterType((*VmGroupUpdateRet)(nil), "nutanix.acropolis.VmGroupUpdateRet")
	proto.RegisterType((*VmGroupUpdateTaskRet)(nil), "nutanix.acropolis.VmGroupUpdateTaskRet")
	proto.RegisterType((*VmGroupListVmArg)(nil), "nutanix.acropolis.VmGroupListVmArg")
	proto.RegisterType((*VmGroupListVmRet)(nil), "nutanix.acropolis.VmGroupListVmRet")
	proto.RegisterType((*WatchCallbackRet)(nil), "nutanix.acropolis.WatchCallbackRet")
	proto.RegisterType((*EnterMaintenanceModeCheckArg)(nil), "nutanix.acropolis.EnterMaintenanceModeCheckArg")
	proto.RegisterType((*EnterMaintenanceModeCheckRet)(nil), "nutanix.acropolis.EnterMaintenanceModeCheckRet")
	proto.RegisterType((*UpdateAffinityRuleArg)(nil), "nutanix.acropolis.UpdateAffinityRuleArg")
	proto.RegisterType((*UpdateAffinityRuleArg_CategoryAffinityRuleInfo)(nil), "nutanix.acropolis.UpdateAffinityRuleArg.CategoryAffinityRuleInfo")
	proto.RegisterType((*UpdateAffinityRuleArg_LegacyRuleUpdateInfo)(nil), "nutanix.acropolis.UpdateAffinityRuleArg.LegacyRuleUpdateInfo")
	proto.RegisterType((*UpdateAffinityRuleRet)(nil), "nutanix.acropolis.UpdateAffinityRuleRet")
	proto.RegisterType((*UpdateAffinityRuleTaskRet)(nil), "nutanix.acropolis.UpdateAffinityRuleTaskRet")
	proto.RegisterType((*UpdateAffinityRuleTaskRet_RuleUpdateStatus)(nil), "nutanix.acropolis.UpdateAffinityRuleTaskRet.RuleUpdateStatus")
	proto.RegisterType((*UpdateAffinityRuleTaskRet_VmUpdateStatus)(nil), "nutanix.acropolis.UpdateAffinityRuleTaskRet.VmUpdateStatus")
	proto.RegisterType((*ParcelsCreateArg)(nil), "nutanix.acropolis.ParcelsCreateArg")
	proto.RegisterType((*ParcelsCreateRet)(nil), "nutanix.acropolis.ParcelsCreateRet")
	proto.RegisterType((*ParcelsCreateTaskRet)(nil), "nutanix.acropolis.ParcelsCreateTaskRet")
	proto.RegisterType((*ParcelGetArg)(nil), "nutanix.acropolis.ParcelGetArg")
	proto.RegisterType((*ParcelGetRet)(nil), "nutanix.acropolis.ParcelGetRet")
	proto.RegisterType((*LazanParcelUpdateArg)(nil), "nutanix.acropolis.LazanParcelUpdateArg")
	proto.RegisterType((*LazanParcelUpdateRet)(nil), "nutanix.acropolis.LazanParcelUpdateRet")
	proto.RegisterType((*LazanParcelUpdateTaskRet)(nil), "nutanix.acropolis.LazanParcelUpdateTaskRet")
	proto.RegisterType((*ParcelDeleteArg)(nil), "nutanix.acropolis.ParcelDeleteArg")
	proto.RegisterType((*ParcelDeleteRet)(nil), "nutanix.acropolis.ParcelDeleteRet")
	proto.RegisterType((*ParcelDeleteTaskRet)(nil), "nutanix.acropolis.ParcelDeleteTaskRet")
	proto.RegisterType((*LazanGetVMsOnHostArg)(nil), "nutanix.acropolis.LazanGetVMsOnHostArg")
	proto.RegisterType((*LazanGetVMsOnHostRet)(nil), "nutanix.acropolis.LazanGetVMsOnHostRet")
	proto.RegisterType((*LazanSetHostFailuresArg)(nil), "nutanix.acropolis.LazanSetHostFailuresArg")
	proto.RegisterType((*LazanSetHostFailuresRet)(nil), "nutanix.acropolis.LazanSetHostFailuresRet")
	proto.RegisterType((*LazanSetHostFailuresTaskRet)(nil), "nutanix.acropolis.LazanSetHostFailuresTaskRet")
	proto.RegisterType((*LazanNotifyFailoverCompleteArg)(nil), "nutanix.acropolis.LazanNotifyFailoverCompleteArg")
	proto.RegisterType((*LazanNotifyFailoverCompleteRet)(nil), "nutanix.acropolis.LazanNotifyFailoverCompleteRet")
	proto.RegisterType((*LazanNotifyFailoverCompleteTaskRet)(nil), "nutanix.acropolis.LazanNotifyFailoverCompleteTaskRet")
	proto.RegisterType((*LazanAssignSegmentsArg)(nil), "nutanix.acropolis.LazanAssignSegmentsArg")
	proto.RegisterType((*LazanAssignSegmentsRet)(nil), "nutanix.acropolis.LazanAssignSegmentsRet")
	proto.RegisterType((*LazanAssignSegmentsTaskRet)(nil), "nutanix.acropolis.LazanAssignSegmentsTaskRet")
	proto.RegisterType((*LazanNotifyPowerTransitionArg)(nil), "nutanix.acropolis.LazanNotifyPowerTransitionArg")
	proto.RegisterType((*LazanNotifyPowerTransitionRet)(nil), "nutanix.acropolis.LazanNotifyPowerTransitionRet")
	proto.RegisterType((*LazanNotifyPowerTransitionTaskRet)(nil), "nutanix.acropolis.LazanNotifyPowerTransitionTaskRet")
	proto.RegisterType((*LazanCompleteMigrateVmArg)(nil), "nutanix.acropolis.LazanCompleteMigrateVmArg")
	proto.RegisterType((*LazanCompleteMigrateVmRet)(nil), "nutanix.acropolis.LazanCompleteMigrateVmRet")
	proto.RegisterType((*LazanCompleteMigrateVmTaskRet)(nil), "nutanix.acropolis.LazanCompleteMigrateVmTaskRet")
	proto.RegisterType((*LazanIsTaskPendingArg)(nil), "nutanix.acropolis.LazanIsTaskPendingArg")
	proto.RegisterType((*LazanIsTaskPendingRet)(nil), "nutanix.acropolis.LazanIsTaskPendingRet")
	proto.RegisterType((*LazanGetEntityParcelsArg)(nil), "nutanix.acropolis.LazanGetEntityParcelsArg")
	proto.RegisterType((*LazanGetEntityParcelsRet)(nil), "nutanix.acropolis.LazanGetEntityParcelsRet")
	proto.RegisterType((*LazanAffinityHAComplianceCheckArg)(nil), "nutanix.acropolis.LazanAffinityHAComplianceCheckArg")
	proto.RegisterType((*LazanAffinityHAComplianceCheckRet)(nil), "nutanix.acropolis.LazanAffinityHAComplianceCheckRet")
	proto.RegisterType((*LazanAffinityHAComplianceCheckTaskRet)(nil), "nutanix.acropolis.LazanAffinityHAComplianceCheckTaskRet")
	proto.RegisterType((*LazanCheckCurrentNodeFailuresArg)(nil), "nutanix.acropolis.LazanCheckCurrentNodeFailuresArg")
	proto.RegisterType((*LazanCheckCurrentNodeFailuresRet)(nil), "nutanix.acropolis.LazanCheckCurrentNodeFailuresRet")
	proto.RegisterType((*LazanIsFailoverInProgressArg)(nil), "nutanix.acropolis.LazanIsFailoverInProgressArg")
	proto.RegisterType((*LazanIsFailoverInProgressRet)(nil), "nutanix.acropolis.LazanIsFailoverInProgressRet")
	proto.RegisterType((*LazanScheduleVmArg)(nil), "nutanix.acropolis.LazanScheduleVmArg")
	proto.RegisterType((*LazanScheduleVmRet)(nil), "nutanix.acropolis.LazanScheduleVmRet")
	proto.RegisterType((*LazanScheduleVmTaskRet)(nil), "nutanix.acropolis.LazanScheduleVmTaskRet")
	proto.RegisterType((*LazanGetSegmentAssignmentArg)(nil), "nutanix.acropolis.LazanGetSegmentAssignmentArg")
	proto.RegisterType((*LazanGetSegmentAssignmentRet)(nil), "nutanix.acropolis.LazanGetSegmentAssignmentRet")
	proto.RegisterType((*LazanGetHighPriorityHostsArg)(nil), "nutanix.acropolis.LazanGetHighPriorityHostsArg")
	proto.RegisterType((*LazanGetHighPriorityHostsRet)(nil), "nutanix.acropolis.LazanGetHighPriorityHostsRet")
	proto.RegisterType((*LazanGetSchedulerStateArg)(nil), "nutanix.acropolis.LazanGetSchedulerStateArg")
	proto.RegisterType((*LazanGetSchedulerStateRet)(nil), "nutanix.acropolis.LazanGetSchedulerStateRet")
	proto.RegisterType((*LazanGetSchedulerStateRet_SchedulerRecord)(nil), "nutanix.acropolis.LazanGetSchedulerStateRet.SchedulerRecord")
	proto.RegisterType((*LazanGetSchedulerStateRet_SchedulerInternalNodeState)(nil), "nutanix.acropolis.LazanGetSchedulerStateRet.SchedulerInternalNodeState")
	proto.RegisterType((*LazanGetSchedulerStateRet_AssignmentRecord)(nil), "nutanix.acropolis.LazanGetSchedulerStateRet.AssignmentRecord")
	proto.RegisterType((*LazanGetVmParcelsArg)(nil), "nutanix.acropolis.LazanGetVmParcelsArg")
	proto.RegisterType((*LazanGetVmParcelsRet)(nil), "nutanix.acropolis.LazanGetVmParcelsRet")
	proto.RegisterType((*LazanGetEntityNodesArg)(nil), "nutanix.acropolis.LazanGetEntityNodesArg")
	proto.RegisterType((*LazanGetEntityNodesRet)(nil), "nutanix.acropolis.LazanGetEntityNodesRet")
	proto.RegisterType((*LazanGetMigrateDestinationArg)(nil), "nutanix.acropolis.LazanGetMigrateDestinationArg")
	proto.RegisterType((*LazanGetMigrateDestinationRet)(nil), "nutanix.acropolis.LazanGetMigrateDestinationRet")
	proto.RegisterType((*GetVmsToRebootArg)(nil), "nutanix.acropolis.GetVmsToRebootArg")
	proto.RegisterType((*GetVmsToRebootRet)(nil), "nutanix.acropolis.GetVmsToRebootRet")
	proto.RegisterType((*LazanMaybeUpdateAffinityArg)(nil), "nutanix.acropolis.LazanMaybeUpdateAffinityArg")
	proto.RegisterType((*LazanMaybeUpdateAffinityRet)(nil), "nutanix.acropolis.LazanMaybeUpdateAffinityRet")
	proto.RegisterType((*LazanMaybeUpdateAffinityTaskRet)(nil), "nutanix.acropolis.LazanMaybeUpdateAffinityTaskRet")
	proto.RegisterType((*ReservePerHostMemoryArg)(nil), "nutanix.acropolis.ReservePerHostMemoryArg")
	proto.RegisterType((*ReservePerHostMemoryRet)(nil), "nutanix.acropolis.ReservePerHostMemoryRet")
	proto.RegisterType((*ReservePerHostMemoryTaskRet)(nil), "nutanix.acropolis.ReservePerHostMemoryTaskRet")
	proto.RegisterType((*ComponentMemoryReservationsGetArg)(nil), "nutanix.acropolis.ComponentMemoryReservationsGetArg")
	proto.RegisterType((*ComponentMemoryReservationsGetRet)(nil), "nutanix.acropolis.ComponentMemoryReservationsGetRet")
	proto.RegisterType((*ClusterVswitchCreateArg)(nil), "nutanix.acropolis.ClusterVswitchCreateArg")
	proto.RegisterType((*ClusterVswitchCreateRet)(nil), "nutanix.acropolis.ClusterVswitchCreateRet")
	proto.RegisterType((*ClusterVswitchCreateTaskRet)(nil), "nutanix.acropolis.ClusterVswitchCreateTaskRet")
	proto.RegisterType((*ClusterVswitchUpdateArg)(nil), "nutanix.acropolis.ClusterVswitchUpdateArg")
	proto.RegisterType((*ClusterVswitchUpdateRet)(nil), "nutanix.acropolis.ClusterVswitchUpdateRet")
	proto.RegisterType((*ClusterVswitchUpdateTaskRet)(nil), "nutanix.acropolis.ClusterVswitchUpdateTaskRet")
	proto.RegisterType((*ClusterVswitchGetArg)(nil), "nutanix.acropolis.ClusterVswitchGetArg")
	proto.RegisterType((*ClusterVswitchGetRet)(nil), "nutanix.acropolis.ClusterVswitchGetRet")
	proto.RegisterType((*ClusterVswitchDeleteArg)(nil), "nutanix.acropolis.ClusterVswitchDeleteArg")
	proto.RegisterType((*ClusterVswitchDeleteRet)(nil), "nutanix.acropolis.ClusterVswitchDeleteRet")
	proto.RegisterType((*DistributedVswitchValidateArg)(nil), "nutanix.acropolis.DistributedVswitchValidateArg")
	proto.RegisterType((*DistributedVswitchValidateRet)(nil), "nutanix.acropolis.DistributedVswitchValidateRet")
	proto.RegisterType((*DistributedVswitchCreateArg)(nil), "nutanix.acropolis.DistributedVswitchCreateArg")
	proto.RegisterType((*DistributedVswitchCreateRet)(nil), "nutanix.acropolis.DistributedVswitchCreateRet")
	proto.RegisterType((*DistributedVswitchCreateTaskRet)(nil), "nutanix.acropolis.DistributedVswitchCreateTaskRet")
	proto.RegisterType((*DistributedVswitchUpdateArg)(nil), "nutanix.acropolis.DistributedVswitchUpdateArg")
	proto.RegisterType((*DistributedVswitchUpdateRet)(nil), "nutanix.acropolis.DistributedVswitchUpdateRet")
	proto.RegisterType((*DistributedVswitchUpdateTaskRet)(nil), "nutanix.acropolis.DistributedVswitchUpdateTaskRet")
	proto.RegisterType((*DistributedVswitchGetArg)(nil), "nutanix.acropolis.DistributedVswitchGetArg")
	proto.RegisterType((*DistributedVswitchGetRet)(nil), "nutanix.acropolis.DistributedVswitchGetRet")
	proto.RegisterType((*DistributedVswitchDeleteArg)(nil), "nutanix.acropolis.DistributedVswitchDeleteArg")
	proto.RegisterType((*DistributedVswitchDeleteRet)(nil), "nutanix.acropolis.DistributedVswitchDeleteRet")
	proto.RegisterType((*DistributedVswitchDeleteTaskRet)(nil), "nutanix.acropolis.DistributedVswitchDeleteTaskRet")
	proto.RegisterType((*MigrateBridgeToDistributedVswitchArg)(nil), "nutanix.acropolis.MigrateBridgeToDistributedVswitchArg")
	proto.RegisterType((*MigrateBridgeToDistributedVswitchRet)(nil), "nutanix.acropolis.MigrateBridgeToDistributedVswitchRet")
	proto.RegisterType((*MigrateBridgeToDistributedVswitchTaskRet)(nil), "nutanix.acropolis.MigrateBridgeToDistributedVswitchTaskRet")
	proto.RegisterType((*AtlasConfigGetArg)(nil), "nutanix.acropolis.AtlasConfigGetArg")
	proto.RegisterType((*AtlasConfigGetRet)(nil), "nutanix.acropolis.AtlasConfigGetRet")
	proto.RegisterType((*AtlasConfigUpdateArg)(nil), "nutanix.acropolis.AtlasConfigUpdateArg")
	proto.RegisterType((*AtlasConfigUpdateRet)(nil), "nutanix.acropolis.AtlasConfigUpdateRet")
	proto.RegisterType((*VmSyncRepEnableArg)(nil), "nutanix.acropolis.VmSyncRepEnableArg")
	proto.RegisterType((*VmSyncRepEnableRet)(nil), "nutanix.acropolis.VmSyncRepEnableRet")
	proto.RegisterType((*VmSyncRepEnableTaskRet)(nil), "nutanix.acropolis.VmSyncRepEnableTaskRet")
	proto.RegisterType((*VmSyncRepMigrateArg)(nil), "nutanix.acropolis.VmSyncRepMigrateArg")
	proto.RegisterType((*VmSyncRepMigrateRet)(nil), "nutanix.acropolis.VmSyncRepMigrateRet")
	proto.RegisterType((*VmSyncRepMigrateTaskRet)(nil), "nutanix.acropolis.VmSyncRepMigrateTaskRet")
	proto.RegisterType((*VmSyncRepConfigUpdateArg)(nil), "nutanix.acropolis.VmSyncRepConfigUpdateArg")
	proto.RegisterType((*VmSyncRepConfigUpdateRet)(nil), "nutanix.acropolis.VmSyncRepConfigUpdateRet")
	proto.RegisterType((*VmSyncRepConfigUpdateTaskRet)(nil), "nutanix.acropolis.VmSyncRepConfigUpdateTaskRet")
	proto.RegisterType((*DormantVmDiskDeleteArg)(nil), "nutanix.acropolis.DormantVmDiskDeleteArg")
	proto.RegisterType((*DormantVmDiskDeleteRet)(nil), "nutanix.acropolis.DormantVmDiskDeleteRet")
	proto.RegisterType((*DormantVmDiskDeleteTaskRet)(nil), "nutanix.acropolis.DormantVmDiskDeleteTaskRet")
	proto.RegisterType((*DormantVmGetArg)(nil), "nutanix.acropolis.DormantVmGetArg")
	proto.RegisterType((*DormantVmGetRet)(nil), "nutanix.acropolis.DormantVmGetRet")
	proto.RegisterType((*UpdateVmDbStateArg)(nil), "nutanix.acropolis.UpdateVmDbStateArg")
	proto.RegisterType((*UpdateVmDbStateRet)(nil), "nutanix.acropolis.UpdateVmDbStateRet")
	proto.RegisterType((*UpdateVmDbStateTaskRet)(nil), "nutanix.acropolis.UpdateVmDbStateTaskRet")
	proto.RegisterType((*VmCrossClusterLiveMigrateArg)(nil), "nutanix.acropolis.VmCrossClusterLiveMigrateArg")
	proto.RegisterType((*VmCrossClusterLiveMigrateRet)(nil), "nutanix.acropolis.VmCrossClusterLiveMigrateRet")
	proto.RegisterType((*VmCrossClusterLiveMigrateTaskRet)(nil), "nutanix.acropolis.VmCrossClusterLiveMigrateTaskRet")
	proto.RegisterType((*PrepareVmCrossClusterLiveMigrateArg)(nil), "nutanix.acropolis.PrepareVmCrossClusterLiveMigrateArg")
	proto.RegisterType((*PrepareVmCrossClusterLiveMigrateRet)(nil), "nutanix.acropolis.PrepareVmCrossClusterLiveMigrateRet")
	proto.RegisterType((*PrepareVmCrossClusterLiveMigrateTaskRet)(nil), "nutanix.acropolis.PrepareVmCrossClusterLiveMigrateTaskRet")
	proto.RegisterType((*CleanupPrepareVmCrossClusterLiveMigrateArg)(nil), "nutanix.acropolis.CleanupPrepareVmCrossClusterLiveMigrateArg")
	proto.RegisterType((*CleanupPrepareVmCrossClusterLiveMigrateRet)(nil), "nutanix.acropolis.CleanupPrepareVmCrossClusterLiveMigrateRet")
	proto.RegisterType((*CleanupPrepareVmCrossClusterLiveMigrateTaskRet)(nil), "nutanix.acropolis.CleanupPrepareVmCrossClusterLiveMigrateTaskRet")
	proto.RegisterType((*PrechecksCrossClusterLiveMigrateArg)(nil), "nutanix.acropolis.PrechecksCrossClusterLiveMigrateArg")
	proto.RegisterType((*PrechecksCrossClusterLiveMigrateRet)(nil), "nutanix.acropolis.PrechecksCrossClusterLiveMigrateRet")
	proto.RegisterType((*PrechecksCrossClusterLiveMigrateTaskRet)(nil), "nutanix.acropolis.PrechecksCrossClusterLiveMigrateTaskRet")
	proto.RegisterType((*PrechecksCrossClusterLiveMigrateSyncArg)(nil), "nutanix.acropolis.PrechecksCrossClusterLiveMigrateSyncArg")
	proto.RegisterType((*PrechecksCrossClusterLiveMigrateSyncRet)(nil), "nutanix.acropolis.PrechecksCrossClusterLiveMigrateSyncRet")
	proto.RegisterType((*PrechecksCrossClusterLiveMigrateSyncRet_PrechecksCrossClusterLiveMigrateSyncResult)(nil), "nutanix.acropolis.PrechecksCrossClusterLiveMigrateSyncRet.PrechecksCrossClusterLiveMigrateSyncResult")
	proto.RegisterType((*VmRemoteForcePowerOffArg)(nil), "nutanix.acropolis.VmRemoteForcePowerOffArg")
	proto.RegisterType((*VmRemoteForcePowerOffRet)(nil), "nutanix.acropolis.VmRemoteForcePowerOffRet")
	proto.RegisterType((*VmRemoteForcePowerOffTaskRet)(nil), "nutanix.acropolis.VmRemoteForcePowerOffTaskRet")
	proto.RegisterType((*VmDisableUpdateArg)(nil), "nutanix.acropolis.VmDisableUpdateArg")
	proto.RegisterType((*VmDisableUpdateRet)(nil), "nutanix.acropolis.VmDisableUpdateRet")
	proto.RegisterType((*VmDisableUpdateTaskRet)(nil), "nutanix.acropolis.VmDisableUpdateTaskRet")
	proto.RegisterType((*NodeResourceAllocationArg)(nil), "nutanix.acropolis.NodeResourceAllocationArg")
	proto.RegisterType((*NodeResourceAllocationArg_ResourceAllocationInfo)(nil), "nutanix.acropolis.NodeResourceAllocationArg.ResourceAllocationInfo")
	proto.RegisterType((*NodeResourceAllocationRet)(nil), "nutanix.acropolis.NodeResourceAllocationRet")
	proto.RegisterType((*NodeResourceAllocationTaskRet)(nil), "nutanix.acropolis.NodeResourceAllocationTaskRet")
	proto.RegisterType((*HostSwapAttachArg)(nil), "nutanix.acropolis.HostSwapAttachArg")
	proto.RegisterType((*HostSwapAttachRet)(nil), "nutanix.acropolis.HostSwapAttachRet")
	proto.RegisterType((*HostSwapAttachTaskRet)(nil), "nutanix.acropolis.HostSwapAttachTaskRet")
	proto.RegisterType((*HostSwapDetachArg)(nil), "nutanix.acropolis.HostSwapDetachArg")
	proto.RegisterType((*HostSwapDetachRet)(nil), "nutanix.acropolis.HostSwapDetachRet")
	proto.RegisterType((*HostSwapDetachTaskRet)(nil), "nutanix.acropolis.HostSwapDetachTaskRet")
	proto.RegisterType((*CleanupCrossClusterLiveMigrateSourceArg)(nil), "nutanix.acropolis.CleanupCrossClusterLiveMigrateSourceArg")
	proto.RegisterType((*CleanupCrossClusterLiveMigrateSourceRet)(nil), "nutanix.acropolis.CleanupCrossClusterLiveMigrateSourceRet")
	proto.RegisterType((*CleanupCrossClusterLiveMigrateSourceTaskRet)(nil), "nutanix.acropolis.CleanupCrossClusterLiveMigrateSourceTaskRet")
	proto.RegisterType((*VmUpdateIncarnationIdsArg)(nil), "nutanix.acropolis.VmUpdateIncarnationIdsArg")
	proto.RegisterType((*VmUpdateIncarnationIdsRet)(nil), "nutanix.acropolis.VmUpdateIncarnationIdsRet")
	proto.RegisterType((*VmUpdateIncarnationIdsTaskRet)(nil), "nutanix.acropolis.VmUpdateIncarnationIdsTaskRet")
	proto.RegisterType((*ValidateTaskRequestArg)(nil), "nutanix.acropolis.ValidateTaskRequestArg")
	proto.RegisterType((*ValidateTaskRequestRet)(nil), "nutanix.acropolis.ValidateTaskRequestRet")
}

func init() {
	proto.RegisterFile("acropolis/acropolis_interface.proto", fileDescriptor_77328fae309579fd)
}

var fileDescriptor_77328fae309579fd = []byte{
	// 15991 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0xbd, 0x6d, 0x8c, 0x1c, 0x49,
	0x76, 0x20, 0xa6, 0xaa, 0x6e, 0xf6, 0xc7, 0xeb, 0x8f, 0xaa, 0xce, 0x6e, 0x36, 0x9b, 0xc5, 0xe1,
	0x90, 0x2c, 0x72, 0x38, 0x1c, 0x72, 0xa6, 0xc9, 0x21, 0xe7, 0x93, 0x33, 0xb3, 0x33, 0xcd, 0xe6,
	0xe7, 0xcc, 0x34, 0xd9, 0x53, 0xdd, 0xec, 0xd9, 0x5d, 0x49, 0x9b, 0xce, 0xce, 0x8a, 0xae, 0xca,
	0xed, 0xca, 0xcc, 0x9a, 0xcc, 0xac, 0x22, 0x7b, 0x60, 0xd9, 0x6b, 0x09, 0x96, 0x56, 0x8b, 0xb5,
	0x2d, 0x1b, 0x90, 0x6d, 0x59, 0x90, 0x6c, 0x18, 0x86, 0xd6, 0x90, 0x60, 0xc9, 0x16, 0xbc, 0x36,
	0x0c, 0x1b, 0xf2, 0x0a, 0x96, 0x25, 0x0b, 0xfe, 0x90, 0x4f, 0xb8, 0x1f, 0x77, 0x38, 0x9d, 0x4e,
	0x07, 0x1c, 0xee, 0xc7, 0xe9, 0xa0, 0xc3, 0xe9, 0x3e, 0x80, 0xfb, 0x75, 0x87, 0x88, 0x78, 0x91,
	0x19, 0x99, 0x19, 0xf9, 0x51, 0x9c, 0xe6, 0x70, 0xa4, 0x3f, 0x64, 0x57, 0xc4, 0x7b, 0x2f, 0x23,
	0x5e, 0xbc, 0x78, 0xf1, 0x22, 0xe2, 0xc5, 0x7b, 0x70, 0xd6, 0x30, 0x3d, 0xb7, 0xef, 0xf6, 0x2c,
	0xff, 0x72, 0xf8, 0x97, 0x6e, 0x39, 0x01, 0xf1, 0xf6, 0x0c, 0x93, 0xac, 0xf6, 0x3d, 0x37, 0x70,
	0xb5, 0x05, 0x67, 0x10, 0x18, 0x8e, 0xf5, 0x78, 0x35, 0x04, 0x69, 0x9c, 0x52, 0xe1, 0x11, 0xcf,
	0x73, 0x3d, 0x8e, 0xa3, 0x06, 0x08, 0x0e, 0xfa, 0xc4, 0x47, 0x80, 0x63, 0xdd, 0x83, 0x3e, 0xf1,
	0x2c, 0x27, 0xb8, 0x2c, 0xfe, 0xc0, 0x8a, 0xc5, 0xbe, 0x15, 0x74, 0x5d, 0xff, 0x32, 0xff, 0x0f,
	0x0b, 0x4f, 0x60, 0xa1, 0x1f, 0x78, 0x24, 0x30, 0xbb, 0x7a, 0xdf, 0xf0, 0x0c, 0x5b, 0x54, 0x1e,
	0xc7, 0xca, 0xa1, 0xdb, 0x1b, 0xd8, 0x44, 0xef, 0x78, 0xee, 0xa0, 0x2f, 0xbe, 0x32, 0xe8, 0x0e,
	0x3c, 0xe3, 0x32, 0xfb, 0x37, 0xf6, 0xf9, 0x53, 0x83, 0xc0, 0xea, 0x5d, 0xf6, 0x7b, 0xfa, 0xee,
	0x60, 0xcf, 0xbf, 0xbc, 0x6b, 0xf8, 0xe4, 0xb2, 0x4f, 0xbc, 0xa1, 0x25, 0x3a, 0xdd, 0xb8, 0x14,
	0x03, 0x68, 0xef, 0xea, 0xbe, 0xd9, 0x25, 0xb6, 0x71, 0xb9, 0xed, 0x7a, 0xb6, 0xe1, 0x04, 0x3a,
	0x71, 0x02, 0x2b, 0x38, 0x40, 0xe0, 0x46, 0x0c, 0xd8, 0x21, 0xc1, 0x65, 0xaf, 0x6f, 0x62, 0xdd,
	0xca, 0xe7, 0x64, 0xe0, 0x5f, 0x36, 0x5d, 0x67, 0xcf, 0xea, 0x0c, 0x3c, 0x23, 0xb0, 0x5c, 0x87,
	0xd7, 0x34, 0xb7, 0xa1, 0x76, 0xc3, 0x08, 0xcc, 0x6e, 0x8b, 0x7c, 0x36, 0x20, 0x7e, 0xb0, 0xe6,
	0x75, 0xb4, 0x35, 0x98, 0xf5, 0xf8, 0x2f, 0xbd, 0x67, 0xf9, 0xc1, 0x4a, 0xe5, 0xf4, 0xd8, 0x85,
	0x99, 0xab, 0xcf, 0xaf, 0xa6, 0x46, 0x60, 0x75, 0x83, 0x04, 0x06, 0x22, 0xb6, 0x66, 0x10, 0xe7,
	0x63, 0xcb, 0x0f, 0x9a, 0x9f, 0xc6, 0xa9, 0xb6, 0x48, 0xa0, 0xdd, 0x84, 0x39, 0x8f, 0xf8, 0x7d,
	0xd7, 0xf1, 0x89, 0x4c, 0xf6, 0x54, 0x26, 0x59, 0x0e, 0xdb, 0x9a, 0x15, 0x58, 0x8c, 0xf0, 0xff,
	0x55, 0x81, 0x85, 0x2d, 0xc7, 0xe8, 0xfb, 0x5d, 0x37, 0x58, 0xf7, 0x88, 0x11, 0x10, 0xda, 0xe2,
	0x77, 0x61, 0xda, 0xef, 0x13, 0xb3, 0x88, 0xae, 0x40, 0xdc, 0xea, 0x13, 0xb3, 0x35, 0x45, 0x31,
	0x28, 0x4d, 0xed, 0x04, 0x4c, 0x07, 0x86, 0xbf, 0xaf, 0x0f, 0x06, 0x56, 0x7b, 0xa5, 0x7a, 0xba,
	0x72, 0x61, 0xb6, 0x35, 0x45, 0x0b, 0x1e, 0x0e, 0xac, 0xb6, 0x76, 0x01, 0xea, 0x7d, 0xc3, 0x23,
	0x4e, 0xa0, 0x47, 0x30, 0x63, 0x0c, 0x66, 0x9e, 0x97, 0x6f, 0x0b, 0xc8, 0x55, 0x58, 0xf4, 0x07,
	0xbb, 0x0c, 0xca, 0xa7, 0xdd, 0x76, 0x4c, 0xa2, 0x5b, 0xed, 0x95, 0xf1, 0xd3, 0x95, 0x0b, 0xe3,
	0xad, 0x05, 0xac, 0xda, 0xc2, 0x9a, 0x7b, 0xed, 0xe6, 0x95, 0x64, 0x4f, 0x28, 0x97, 0x62, 0x6d,
	0xa9, 0xc4, 0xdb, 0xd2, 0xbc, 0x05, 0x47, 0xe3, 0x18, 0xf4, 0xdb, 0x14, 0xeb, 0x65, 0xd0, 0x7c,
	0xac, 0x60, 0x98, 0x11, 0x23, 0x66, 0x5b, 0x75, 0x51, 0x43, 0x49, 0x30, 0x1e, 0xfe, 0x99, 0xc4,
	0xc3, 0x9b, 0xa4, 0x47, 0x38, 0x0f, 0xcf, 0xc2, 0x5c, 0x8c, 0x06, 0x7e, 0x7d, 0x56, 0x46, 0xd7,
	0x2e, 0xc3, 0x42, 0xcf, 0xed, 0x58, 0xa6, 0xd1, 0xd3, 0x03, 0xcb, 0x26, 0x7e, 0x60, 0xd8, 0x7d,
	0xc6, 0xb2, 0xb1, 0xeb, 0xd5, 0x57, 0x5e, 0x6d, 0xd5, 0xb1, 0x72, 0x5b, 0xd4, 0xc5, 0xfb, 0x33,
	0x5e, 0x82, 0xb7, 0x47, 0x46, 0xe1, 0xed, 0x44, 0x09, 0xde, 0xf2, 0x1e, 0x16, 0xf2, 0xf6, 0x58,
	0xc4, 0x5b, 0x8e, 0x81, 0xbc, 0x6d, 0x7e, 0x0d, 0xe6, 0x45, 0xc5, 0x1d, 0xc2, 0xe6, 0xc7, 0x68,
	0xdc, 0xd6, 0x63, 0xf8, 0xb4, 0x1d, 0x1b, 0x12, 0xbe, 0xe5, 0xec, 0xb9, 0x65, 0xc5, 0xf6, 0x9e,
	0xb3, 0xe7, 0x46, 0x1f, 0xa0, 0xbf, 0xd8, 0x07, 0x16, 0xa0, 0x26, 0x20, 0xe8, 0xef, 0x35, 0xaf,
	0xd3, 0x7c, 0x3f, 0x5e, 0x34, 0xba, 0x88, 0xec, 0xc2, 0xc2, 0x8e, 0x9d, 0xa0, 0xaa, 0x9d, 0x86,
	0xd9, 0xa1, 0x9d, 0x42, 0x86, 0xa1, 0x2d, 0xd0, 0xb4, 0x4b, 0xb0, 0x60, 0x39, 0x66, 0x6f, 0xd0,
	0x26, 0xba, 0x20, 0xe9, 0x33, 0xf1, 0x98, 0x6a, 0xd5, 0xb1, 0x42, 0x10, 0xf5, 0x9b, 0xc3, 0xe4,
	0x37, 0x68, 0x33, 0x0d, 0x68, 0x0c, 0xed, 0x10, 0x59, 0x0f, 0x3c, 0x42, 0x52, 0x3c, 0x7a, 0x41,
	0xc1, 0xa3, 0x88, 0xd2, 0xb6, 0x47, 0x08, 0xe3, 0xd4, 0xf2, 0x30, 0x55, 0xc6, 0xfa, 0xf6, 0xbd,
	0x0a, 0xcc, 0xd0, 0xc1, 0xdd, 0x74, 0x7b, 0x3d, 0x2e, 0xf8, 0x33, 0x54, 0x96, 0xdd, 0x41, 0xa0,
	0xfb, 0xc4, 0x64, 0x82, 0x31, 0x76, 0xbd, 0x7a, 0xed, 0x4a, 0x0b, 0xb0, 0x78, 0x8b, 0x98, 0xda,
	0x39, 0x98, 0x0f, 0x65, 0x87, 0xb7, 0xa5, 0xca, 0x7a, 0x3f, 0x2b, 0x04, 0x88, 0xf5, 0xff, 0x0a,
	0x2c, 0x79, 0xc4, 0x77, 0x7b, 0x43, 0x82, 0xaa, 0x59, 0x77, 0x0c, 0x9b, 0xf8, 0x4c, 0x61, 0x4c,
	0xb5, 0x34, 0xac, 0xbb, 0xc5, 0xaa, 0xee, 0xd3, 0x9a, 0xe6, 0x7f, 0x25, 0x35, 0x46, 0xc8, 0xa8,
	0x65, 0x93, 0xb6, 0xee, 0x0e, 0x02, 0xd6, 0x94, 0xa9, 0xd6, 0x14, 0x2b, 0x78, 0x30, 0x08, 0xb4,
	0xf7, 0xa1, 0xe6, 0x11, 0xa3, 0x7d, 0xc0, 0xa7, 0x4b, 0xd8, 0x8a, 0x99, 0xab, 0xc7, 0x14, 0x1c,
	0x61, 0xf2, 0x3b, 0xc7, 0xe0, 0xe9, 0x9f, 0xac, 0x7d, 0xd7, 0x60, 0x79, 0xe0, 0xec, 0x3b, 0xee,
	0x23, 0x47, 0x4f, 0xf4, 0x66, 0x8c, 0xf5, 0x66, 0x11, 0x6b, 0xb7, 0xa5, 0x4e, 0x35, 0xff, 0xb8,
	0xca, 0x9b, 0x28, 0xc4, 0xe0, 0x2e, 0xd4, 0xb1, 0x73, 0x74, 0x2d, 0x8b, 0x06, 0x66, 0x5e, 0xb9,
	0x44, 0x50, 0xcc, 0x55, 0xde, 0xe3, 0xd6, 0x3c, 0xc7, 0xdb, 0x3e, 0xe8, 0x33, 0x65, 0x4e, 0xe7,
	0x3f, 0x52, 0x4a, 0xb2, 0x15, 0x21, 0x43, 0xc6, 0x3e, 0x84, 0x45, 0xb7, 0x4f, 0xf8, 0xc2, 0x25,
	0x7d, 0x76, 0x8c, 0x7d, 0xf6, 0x85, 0xac, 0xcf, 0x3e, 0x10, 0x28, 0xf4, 0x8b, 0xad, 0x05, 0x57,
	0xfe, 0xc9, 0xc8, 0x5e, 0x84, 0x05, 0x73, 0x10, 0xb8, 0x7b, 0x7b, 0x4c, 0x9b, 0xe9, 0x03, 0x9f,
	0x98, 0x3e, 0xd3, 0x52, 0x13, 0xad, 0x1a, 0xaf, 0xa0, 0x9a, 0xec, 0x21, 0x2d, 0xd6, 0xae, 0x46,
	0xb2, 0x6d, 0xba, 0x76, 0x9f, 0xaa, 0x08, 0xae, 0xad, 0xa6, 0xae, 0x1f, 0xd9, 0x33, 0x7a, 0x3e,
	0x09, 0x45, 0x7c, 0x5d, 0x54, 0x6b, 0x2b, 0x70, 0xa4, 0x67, 0xd9, 0x56, 0xc0, 0x14, 0x15, 0x57,
	0x91, 0xbc, 0xa0, 0x79, 0x2d, 0xe2, 0x29, 0x1d, 0xf6, 0xb4, 0x78, 0x55, 0xd2, 0xe2, 0xd5, 0x6c,
	0x03, 0x50, 0x24, 0x54, 0x43, 0xa5, 0x70, 0x32, 0x45, 0xb2, 0x9a, 0x29, 0x92, 0x37, 0xc2, 0xaf,
	0xd0, 0x96, 0xbd, 0x86, 0x4a, 0x53, 0x9a, 0x7f, 0x99, 0xd2, 0xc6, 0xb4, 0x29, 0x6b, 0xa9, 0x09,
	0xc7, 0x77, 0xfa, 0xce, 0xc7, 0xbb, 0x2d, 0x77, 0x10, 0x90, 0x4d, 0x8f, 0xec, 0x59, 0x8f, 0xa3,
	0xd5, 0xfa, 0x36, 0xcc, 0x7a, 0xb4, 0x5c, 0xe7, 0xf6, 0x08, 0x13, 0xf3, 0x99, 0xab, 0x67, 0x55,
	0xb3, 0x3a, 0xa4, 0xb1, 0xce, 0x40, 0x5b, 0x33, 0x5e, 0xf4, 0xa3, 0x79, 0x22, 0xeb, 0x23, 0x54,
	0x6d, 0x2b, 0x5a, 0xf0, 0xb0, 0xdf, 0x7e, 0xfa, 0x2d, 0xe0, 0x1f, 0xc9, 0x68, 0x41, 0xb4, 0xda,
	0x3e, 0xc5, 0x16, 0x84, 0x0b, 0x5e, 0xf3, 0x3f, 0xad, 0xc2, 0xcc, 0x8e, 0x1d, 0x31, 0xfe, 0x1a,
	0x8c, 0x53, 0xa3, 0x07, 0x3f, 0x76, 0x4a, 0xa9, 0x46, 0x39, 0x34, 0xb3, 0x90, 0x18, 0xf0, 0x33,
	0xb2, 0x8e, 0xe8, 0xd4, 0x6c, 0xef, 0xea, 0x96, 0x63, 0x1a, 0x9e, 0xc3, 0xa7, 0x3d, 0x1a, 0x07,
	0xe3, 0xad, 0x5a, 0x7b, 0xf7, 0x5e, 0x54, 0x7e, 0x2f, 0xc3, 0x2a, 0x99, 0xc8, 0xb6, 0x4a, 0x9a,
	0x17, 0x23, 0xbe, 0x14, 0x1a, 0x06, 0x17, 0xa1, 0x26, 0x60, 0x85, 0xb9, 0x75, 0x0c, 0x26, 0x71,
	0x21, 0x44, 0xe8, 0x09, 0xbe, 0x06, 0x36, 0xbf, 0x37, 0x06, 0x53, 0x3b, 0x36, 0xce, 0xcf, 0x0f,
	0x60, 0x12, 0x4d, 0x62, 0x64, 0xf8, 0x79, 0x05, 0xc3, 0xef, 0x10, 0x87, 0x78, 0x96, 0xf9, 0xc9,
	0x80, 0x78, 0x07, 0xc2, 0x58, 0x16, 0x68, 0x74, 0xee, 0x0a, 0x95, 0xe3, 0xb8, 0x8e, 0x4e, 0x1e,
	0x5b, 0x7e, 0x40, 0x9c, 0x40, 0xcc, 0x5d, 0xac, 0xbb, 0xef, 0x3a, 0xb7, 0xb0, 0x26, 0xb5, 0x44,
	0x8f, 0xa5, 0x96, 0x68, 0x89, 0xe6, 0xd0, 0x6e, 0x5b, 0x74, 0x38, 0xac, 0xcf, 0x09, 0xd7, 0x7a,
	0x11, 0xcd, 0x1d, 0x56, 0xb5, 0x45, 0x6b, 0xb4, 0xaf, 0xc1, 0x09, 0x81, 0x61, 0xb4, 0xdb, 0x1e,
	0xf1, 0x7d, 0xdd, 0xf0, 0x7d, 0xab, 0xe3, 0xd8, 0xc4, 0x09, 0x7c, 0xae, 0x02, 0x5b, 0xc7, 0x11,
	0x64, 0x8d, 0x43, 0xac, 0x45, 0x00, 0x8a, 0x2f, 0xf6, 0x8d, 0xa0, 0xeb, 0xb3, 0x01, 0x4a, 0x7e,
	0x71, 0x93, 0xd6, 0x68, 0x37, 0xe1, 0x54, 0x02, 0xa3, 0x6d, 0x04, 0x86, 0xee, 0xbb, 0x03, 0xcf,
	0x24, 0xfa, 0xc0, 0xeb, 0xf9, 0x2b, 0x93, 0x0c, 0xf9, 0x44, 0x0c, 0xf9, 0xa6, 0x11, 0x18, 0x5b,
	0x0c, 0xe6, 0xa1, 0xd7, 0xf3, 0x9b, 0xdf, 0xaf, 0xe0, 0x60, 0xd0, 0x21, 0x5b, 0x87, 0x29, 0xb1,
	0x8f, 0xc0, 0xd1, 0x78, 0xb1, 0x70, 0x34, 0x70, 0x03, 0x12, 0x22, 0x6a, 0xef, 0x30, 0xee, 0x46,
	0xe6, 0x08, 0x5f, 0x7c, 0x8f, 0x2b, 0xe7, 0x11, 0x33, 0x41, 0x60, 0x68, 0x87, 0x66, 0xc7, 0x15,
	0x98, 0xdd, 0xb1, 0xe9, 0xbc, 0x42, 0xf1, 0x28, 0xb4, 0xa6, 0x9a, 0x03, 0x09, 0xe3, 0xd0, 0xfa,
	0xc0, 0x3f, 0x1b, 0xed, 0x96, 0x68, 0x1f, 0xa6, 0xe9, 0x67, 0xb7, 0x70, 0x3b, 0xd4, 0xfc, 0x18,
	0x96, 0x6e, 0xf2, 0xfd, 0xe5, 0x8e, 0xbd, 0x15, 0x18, 0x01, 0xc1, 0x06, 0x67, 0x49, 0x3d, 0x9d,
	0x3e, 0x5d, 0xd7, 0x0f, 0x62, 0x1a, 0x82, 0x16, 0xb0, 0x29, 0x71, 0x4d, 0x41, 0xad, 0x70, 0xce,
	0x7d, 0x0a, 0x2b, 0x29, 0x24, 0x31, 0xf9, 0xde, 0x81, 0x29, 0xda, 0x01, 0x5a, 0xca, 0xf0, 0xe6,
	0xaf, 0x9e, 0x56, 0xdb, 0x83, 0x14, 0x62, 0x95, 0xfd, 0xdb, 0x9a, 0x1c, 0xf2, 0x9f, 0xcd, 0xbf,
	0x53, 0x05, 0xd8, 0xb1, 0xd7, 0x7b, 0xae, 0x43, 0x70, 0x09, 0x45, 0xa1, 0x8a, 0xf7, 0x6c, 0x96,
	0x97, 0xee, 0xf0, 0xfe, 0x5d, 0x81, 0x25, 0x84, 0x8a, 0x6f, 0x90, 0x78, 0x57, 0x35, 0x5e, 0xb7,
	0x25, 0x6f, 0x93, 0xd6, 0xe0, 0x44, 0x44, 0x37, 0xad, 0x9a, 0xc6, 0x42, 0xd5, 0xb4, 0x22, 0x3e,
	0xf4, 0x71, 0x72, 0xe3, 0xf4, 0x8e, 0xbc, 0xa5, 0x1d, 0xcf, 0xdc, 0x81, 0x63, 0x67, 0xf2, 0x76,
	0xb4, 0x47, 0x4a, 0xe8, 0xec, 0x89, 0x51, 0x74, 0xf6, 0x64, 0xd6, 0xae, 0xeb, 0xa5, 0x90, 0xb9,
	0x85, 0x23, 0xbc, 0x03, 0xf3, 0x08, 0x2a, 0xc6, 0xf5, 0x70, 0xce, 0x07, 0x7e, 0x58, 0xa5, 0x93,
	0xa6, 0x45, 0xfc, 0xc0, 0xf5, 0x48, 0xae, 0xd4, 0xbe, 0x06, 0x4b, 0xca, 0xc1, 0x89, 0x76, 0xb3,
	0xda, 0x30, 0x3d, 0x2c, 0xa9, 0x5d, 0xf2, 0x98, 0x62, 0x97, 0x7c, 0x1d, 0x96, 0x3d, 0xde, 0x02,
	0xdd, 0x21, 0xc1, 0x23, 0xd7, 0xdb, 0x17, 0xcb, 0x3c, 0xd3, 0xb2, 0xd7, 0xc7, 0x03, 0x6f, 0x40,
	0x5a, 0x4b, 0x08, 0x73, 0x9f, 0x83, 0xf0, 0x05, 0xfd, 0x59, 0x0d, 0xdd, 0x25, 0x89, 0x6d, 0x85,
	0x83, 0xa7, 0x41, 0x3d, 0x04, 0x16, 0xdb, 0xe4, 0x7f, 0x36, 0x41, 0x29, 0x6c, 0x58, 0x1d, 0x0f,
	0x8d, 0x8d, 0x43, 0x66, 0x7c, 0x4c, 0xc9, 0x8c, 0xc5, 0x95, 0x8c, 0xb6, 0x02, 0xe3, 0x3d, 0x6b,
	0x48, 0x62, 0xec, 0x65, 0x25, 0xda, 0x0b, 0x30, 0xbf, 0x6b, 0x38, 0xed, 0x47, 0x56, 0x3b, 0xe8,
	0xea, 0xf6, 0x6e, 0x9f, 0xaf, 0x57, 0x73, 0xad, 0xb9, 0xb0, 0x74, 0x63, 0xb7, 0xef, 0x6b, 0xaf,
	0xc2, 0x51, 0x9f, 0x04, 0xba, 0x47, 0x6c, 0x77, 0x48, 0xda, 0xfa, 0x9e, 0xe7, 0xda, 0x3a, 0xa5,
	0x2e, 0x16, 0x29, 0x9f, 0x2a, 0x2d, 0x56, 0x77, 0xdb, 0x73, 0xed, 0xbb, 0xae, 0x1f, 0x68, 0x27,
	0x01, 0xba, 0x86, 0xde, 0x25, 0x46, 0xcf, 0x72, 0x3a, 0xb8, 0x1e, 0x4d, 0x77, 0x8d, 0xbb, 0xbc,
	0x80, 0x6e, 0xb5, 0x6c, 0xce, 0x8c, 0x88, 0x1a, 0x6f, 0xfc, 0x14, 0x6b, 0xfc, 0x22, 0xd6, 0x0a,
	0x7a, 0xac, 0x1f, 0x67, 0x60, 0x76, 0xe0, 0x13, 0xdd, 0x27, 0x1d, 0xbe, 0xb6, 0x4e, 0x33, 0xaa,
	0x33, 0x03, 0x9f, 0x6c, 0x61, 0x91, 0xd6, 0x80, 0xa9, 0x3d, 0xc3, 0xea, 0xb9, 0x43, 0xe2, 0xad,
	0x00, 0xdf, 0x1f, 0x8a, 0xdf, 0xf1, 0x41, 0x9b, 0x29, 0x21, 0x3b, 0xb3, 0x4a, 0xd9, 0x39, 0x05,
	0x33, 0x7d, 0xc3, 0x33, 0x49, 0x8f, 0x03, 0xcd, 0x31, 0x20, 0xe0, 0x45, 0x79, 0xc2, 0x35, 0x9f,
	0x65, 0xcb, 0x5d, 0x86, 0x7a, 0xdb, 0xf2, 0xfb, 0x3d, 0xe3, 0x40, 0xa7, 0x6d, 0x1d, 0x78, 0xc4,
	0x5f, 0xa9, 0x49, 0x43, 0x55, 0xc3, 0xda, 0xdb, 0x58, 0xa9, 0xad, 0xc0, 0xa4, 0x4d, 0x7c, 0xdf,
	0xe8, 0x90, 0x95, 0xfa, 0xe9, 0xca, 0x85, 0xe9, 0x96, 0xf8, 0xa9, 0xbd, 0x01, 0x4b, 0x7e, 0xe0,
	0x59, 0x66, 0xa0, 0x0f, 0x9d, 0x81, 0x6d, 0xe8, 0x7d, 0xcb, 0x71, 0x28, 0xff, 0x17, 0x24, 0x72,
	0x1a, 0x87, 0xd8, 0xa1, 0x00, 0x9b, 0xbc, 0x5e, 0x3b, 0x0f, 0x35, 0xdb, 0x78, 0xac, 0xb7, 0xdd,
	0x47, 0x0e, 0xdb, 0xea, 0xd9, 0xfe, 0x8a, 0xc6, 0x9a, 0x3b, 0x67, 0x1b, 0x8f, 0x6f, 0x62, 0xe9,
	0x86, 0xaf, 0xbd, 0x09, 0x53, 0xc6, 0xde, 0x9e, 0xe5, 0x58, 0xc1, 0xc1, 0xca, 0x22, 0x5b, 0x63,
	0x4f, 0x28, 0x14, 0xd0, 0x1a, 0x82, 0xb4, 0x42, 0x60, 0xed, 0x15, 0xd0, 0xc4, 0xb0, 0x49, 0x32,
	0xbd, 0x44, 0x65, 0xba, 0xb5, 0x20, 0x6a, 0x22, 0x71, 0xbe, 0x05, 0xf3, 0xc3, 0x4e, 0x7f, 0xa0,
	0xfb, 0xbb, 0xed, 0x3d, 0xae, 0xee, 0x8e, 0x66, 0xaa, 0xbb, 0x9d, 0x3b, 0x9b, 0x0f, 0x6f, 0xb8,
	0x78, 0x6c, 0x39, 0x4b, 0xd1, 0xb6, 0x76, 0xdb, 0x7b, 0x4c, 0xdd, 0x5d, 0x92, 0x26, 0x5d, 0xb9,
	0x69, 0x8b, 0xc0, 0x62, 0xda, 0xb2, 0x83, 0x1e, 0x31, 0x6b, 0x77, 0x5d, 0x2f, 0x38, 0xfc, 0xa9,
	0xdb, 0x5c, 0x4c, 0x7e, 0x83, 0x7e, 0xf8, 0x0f, 0xea, 0xd4, 0x06, 0x8f, 0xb6, 0x64, 0x87, 0xac,
	0x2e, 0x34, 0x18, 0xa7, 0xfb, 0x5c, 0xa6, 0x29, 0xa6, 0x5b, 0xec, 0x6f, 0xed, 0x79, 0x00, 0xc3,
	0x71, 0xdc, 0x80, 0x6d, 0x1b, 0x98, 0xae, 0x98, 0x6e, 0x49, 0x25, 0x94, 0x79, 0xce, 0xc0, 0xd6,
	0x87, 0x66, 0x7f, 0xe0, 0xe3, 0x56, 0x63, 0xca, 0x19, 0xd8, 0x3b, 0xf4, 0x37, 0xad, 0xb4, 0x89,
	0xed, 0x7a, 0x07, 0xba, 0xbd, 0x8b, 0xe7, 0x8e, 0x53, 0xbc, 0x60, 0x63, 0x97, 0x6e, 0xac, 0x76,
	0x5d, 0x37, 0x60, 0x5a, 0x20, 0x6b, 0x63, 0x45, 0x47, 0x10, 0x77, 0x70, 0x0c, 0x58, 0x7b, 0x09,
	0xea, 0xdd, 0x47, 0x66, 0xcf, 0x35, 0xf7, 0x59, 0xaf, 0x3e, 0x77, 0x1d, 0xc2, 0x74, 0xc3, 0x74,
	0xab, 0x86, 0xe5, 0xdb, 0x58, 0x4c, 0x67, 0x64, 0xd7, 0xd0, 0xfb, 0x9e, 0xe5, 0x7a, 0x54, 0x30,
	0xa7, 0x99, 0x54, 0x41, 0xd7, 0xd8, 0xc4, 0x12, 0xed, 0x12, 0x68, 0xb4, 0xe9, 0xa6, 0xeb, 0x11,
	0x5f, 0xef, 0x13, 0x8f, 0x75, 0x82, 0xe9, 0x87, 0xb1, 0x56, 0xcd, 0x19, 0xd8, 0xeb, 0xb4, 0x62,
	0x93, 0x78, 0xb4, 0x2f, 0xda, 0xeb, 0x70, 0xcc, 0xec, 0x11, 0xc3, 0x53, 0xa8, 0xbb, 0x19, 0xa6,
	0x51, 0x96, 0x58, 0x75, 0x52, 0xe1, 0xc5, 0x64, 0x6b, 0xb6, 0x84, 0x76, 0x99, 0x53, 0x6a, 0x97,
	0x6b, 0xb0, 0x6c, 0xee, 0x7a, 0xba, 0xe3, 0x06, 0xba, 0x69, 0xf4, 0x8d, 0xdd, 0x1e, 0xd1, 0x3d,
	0x62, 0xf8, 0xae, 0xc3, 0xf4, 0xc7, 0x74, 0x6b, 0xd1, 0xdc, 0xf5, 0xee, 0xbb, 0xc1, 0x3a, 0xaf,
	0x6b, 0xb1, 0x2a, 0xda, 0xe4, 0x01, 0x13, 0x15, 0xdd, 0x27, 0x9e, 0x65, 0xf4, 0xf4, 0xbe, 0xeb,
	0xe1, 0xed, 0x44, 0x8d, 0x37, 0x99, 0x57, 0x6f, 0xb1, 0xda, 0x4d, 0xd7, 0x63, 0x07, 0x8a, 0xda,
	0x03, 0xa8, 0xa7, 0xe0, 0xeb, 0x79, 0x67, 0x88, 0x21, 0x3a, 0x8e, 0xd4, 0xbc, 0x1f, 0x27, 0x78,
	0x0a, 0x66, 0x86, 0x1d, 0x83, 0xae, 0xe6, 0xbe, 0xdb, 0x23, 0x5c, 0xeb, 0xb4, 0x60, 0xd8, 0x31,
	0xd6, 0x79, 0x49, 0x4c, 0x7f, 0x68, 0xa3, 0xe8, 0x8f, 0x17, 0xa1, 0x66, 0xf6, 0x07, 0x7a, 0xdf,
	0xf0, 0xfd, 0xa0, 0xeb, 0xb9, 0x83, 0x4e, 0x97, 0xe9, 0x9f, 0xa9, 0xd6, 0xbc, 0xd9, 0x1f, 0x6c,
	0x46, 0xa5, 0xda, 0x1d, 0x98, 0x21, 0x8f, 0x03, 0xcf, 0xd0, 0xf7, 0x7a, 0x46, 0xc7, 0x5f, 0x59,
	0x62, 0xdd, 0xc9, 0xd9, 0x5a, 0x7e, 0x44, 0x0e, 0x76, 0x8c, 0xde, 0x80, 0x6c, 0x1a, 0x96, 0xd7,
	0x02, 0x86, 0x7a, 0x9b, 0x62, 0x6a, 0x4d, 0x98, 0x1b, 0xda, 0xfc, 0xa2, 0x8a, 0x8f, 0xd7, 0x51,
	0x36, 0x5e, 0x33, 0x43, 0xfb, 0x0e, 0x2d, 0x63, 0x83, 0xf5, 0x02, 0xcc, 0x73, 0x51, 0x09, 0x3b,
	0xb5, 0xcc, 0x1a, 0x35, 0xc7, 0x4a, 0x45, 0x37, 0xb4, 0xe3, 0x30, 0x65, 0x74, 0xe8, 0xe0, 0x0f,
	0xed, 0x95, 0x63, 0x0c, 0x60, 0x92, 0xfd, 0xde, 0xb1, 0xb3, 0xd6, 0x8a, 0x95, 0xac, 0xb5, 0xe2,
	0x3c, 0xd4, 0x70, 0xa4, 0xa9, 0x7a, 0x64, 0x23, 0x76, 0x9c, 0x7f, 0x92, 0x17, 0xdf, 0xe9, 0x0f,
	0xd8, 0x48, 0xdc, 0x86, 0x1a, 0x05, 0xe0, 0x76, 0x15, 0x87, 0x6b, 0xe4, 0x58, 0xc9, 0x77, 0x36,
	0x1f, 0xe2, 0x90, 0xce, 0x75, 0xfa, 0x03, 0xfe, 0x27, 0xa3, 0x73, 0x1e, 0x6a, 0x6c, 0xd2, 0xb3,
	0xd5, 0xc4, 0x71, 0xdb, 0xc4, 0x5f, 0x39, 0xc1, 0x17, 0x06, 0x3a, 0xf5, 0x69, 0xe9, 0x7d, 0x5a,
	0x48, 0x67, 0x6b, 0xdb, 0xf2, 0x99, 0xb8, 0xee, 0x7a, 0x86, 0xd3, 0xa6, 0x8b, 0xce, 0x73, 0xac,
	0x61, 0x35, 0x2c, 0xbf, 0x81, 0xc5, 0xda, 0xbb, 0x4c, 0x95, 0x05, 0x07, 0x7d, 0xb2, 0x72, 0x92,
	0x6d, 0x50, 0xd4, 0x3b, 0xc4, 0xed, 0x83, 0x3e, 0xb9, 0x3e, 0xb5, 0x7f, 0x87, 0x6e, 0xf5, 0x77,
	0x36, 0xa8, 0xbe, 0xa3, 0x25, 0x94, 0xe5, 0xc4, 0x61, 0xdf, 0xb1, 0x09, 0x5d, 0xc7, 0xfc, 0x95,
	0xe7, 0x79, 0xff, 0x79, 0xe9, 0x06, 0x2f, 0xd4, 0xbe, 0x09, 0x47, 0xfb, 0xee, 0x23, 0xe2, 0xf1,
	0x9d, 0x90, 0x6e, 0x13, 0xb3, 0x6b, 0x38, 0x96, 0x6f, 0xaf, 0x9c, 0x62, 0x9f, 0x54, 0x09, 0xc4,
	0x26, 0x85, 0x67, 0xfb, 0xa0, 0x0d, 0x01, 0xdd, 0x5a, 0xec, 0xa7, 0x0b, 0xe9, 0x14, 0x75, 0x3a,
	0x81, 0x8e, 0xcd, 0xf0, 0x4d, 0xcf, 0xea, 0x07, 0x3a, 0x79, 0x4c, 0xcc, 0x95, 0xd3, 0xac, 0x29,
	0x8b, 0x4e, 0x27, 0xb8, 0xc5, 0x2a, 0xb7, 0x58, 0xdd, 0xad, 0xc7, 0xc4, 0xd4, 0xae, 0x43, 0x83,
	0x22, 0xd1, 0x05, 0x5e, 0x77, 0x1d, 0x81, 0x85, 0xeb, 0xfd, 0xca, 0x19, 0x86, 0x48, 0xc9, 0xd2,
	0x45, 0xfe, 0x81, 0xc3, 0x11, 0x71, 0xc1, 0xa7, 0xfb, 0x30, 0x2e, 0x66, 0x42, 0x20, 0x57, 0x9a,
	0x0c, 0x7e, 0x96, 0x95, 0xee, 0x70, 0x81, 0xd4, 0x2e, 0xc3, 0x12, 0x1d, 0xaa, 0xa0, 0xeb, 0x11,
	0xa3, 0xcd, 0xd5, 0x1c, 0x55, 0x78, 0x2b, 0x67, 0xf9, 0x22, 0xeb, 0x0c, 0xec, 0x6d, 0x5e, 0xb5,
	0x49, 0x3c, 0xaa, 0xf0, 0xb4, 0x77, 0xe1, 0x84, 0xd0, 0x1a, 0x07, 0x8e, 0xa9, 0x7b, 0xa4, 0x1f,
	0x93, 0x97, 0x73, 0xec, 0x1b, 0xa8, 0x58, 0xb6, 0x0e, 0x1c, 0xb3, 0x45, 0xfa, 0x92, 0x64, 0x6c,
	0xc1, 0x92, 0x12, 0xed, 0x05, 0x26, 0x66, 0x4d, 0xb5, 0x02, 0x91, 0xa9, 0xb4, 0x16, 0xfc, 0x14,
	0x51, 0x3a, 0xe9, 0xe8, 0x3c, 0xef, 0x1a, 0x5e, 0x9b, 0x1a, 0x2f, 0x2b, 0xe7, 0xb9, 0x89, 0x47,
	0x0b, 0xef, 0x1a, 0x5e, 0x7b, 0xd3, 0x72, 0xa8, 0x15, 0x68, 0x1b, 0x66, 0xd7, 0x72, 0x08, 0x17,
	0xa2, 0x17, 0x99, 0x5e, 0x9c, 0xc1, 0x32, 0x26, 0x24, 0x97, 0x60, 0x01, 0x57, 0x23, 0x6a, 0xf8,
	0x99, 0xae, 0x6d, 0x5b, 0xc1, 0xca, 0x05, 0x7e, 0xd1, 0xc2, 0x2b, 0x1e, 0x84, 0xe5, 0xda, 0xdb,
	0x70, 0x5c, 0x88, 0x2e, 0xb2, 0xe3, 0x51, 0xd7, 0x0a, 0x70, 0x97, 0xf5, 0x12, 0xdb, 0xff, 0x2f,
	0x23, 0x00, 0x5f, 0x8f, 0x3f, 0xa5, 0xd5, 0x78, 0xa1, 0xa3, 0x71, 0x29, 0x73, 0x1d, 0x3d, 0x5a,
	0xfe, 0x2e, 0xf2, 0x63, 0x38, 0x56, 0xf3, 0xc0, 0xd9, 0x10, 0xab, 0xe0, 0x45, 0x58, 0xb0, 0x2d,
	0xc7, 0xb2, 0x07, 0xb6, 0x04, 0x7b, 0x89, 0xc3, 0x62, 0x85, 0x04, 0x3b, 0x6f, 0xf4, 0x7a, 0xee,
	0x23, 0x9d, 0x6e, 0xa4, 0xfa, 0xbd, 0x41, 0x67, 0xe5, 0x65, 0xc9, 0x82, 0x9b, 0x65, 0x75, 0x77,
	0xdd, 0x60, 0xb3, 0x37, 0xe8, 0x50, 0x4b, 0x7b, 0xaf, 0x67, 0xf8, 0x5d, 0xdd, 0x76, 0xdb, 0x64,
	0xe5, 0x15, 0x6e, 0x69, 0xb3, 0x92, 0x0d, 0xb7, 0x4d, 0xf8, 0x61, 0x5e, 0x78, 0xec, 0x9a, 0x6f,
	0x02, 0x2d, 0x40, 0x4d, 0xc0, 0x0a, 0x0b, 0xe8, 0x2a, 0x2c, 0xee, 0xd8, 0x42, 0x93, 0x95, 0x24,
	0x73, 0x1c, 0x8e, 0x25, 0x71, 0x04, 0xb9, 0xbf, 0x98, 0x00, 0x8d, 0x2e, 0x24, 0x41, 0x34, 0xdb,
	0x9e, 0x82, 0x79, 0xf3, 0x00, 0x20, 0xf0, 0x0c, 0xc7, 0xb7, 0x98, 0x29, 0x33, 0xc6, 0xa6, 0xfc,
	0xe5, 0xec, 0x63, 0x90, 0xed, 0x10, 0x76, 0x35, 0xfa, 0xb3, 0x25, 0x91, 0xa0, 0x0b, 0x1b, 0x9d,
	0xfd, 0x1d, 0xc2, 0xed, 0x00, 0x7e, 0x1a, 0x08, 0xbc, 0x48, 0xac, 0xfe, 0xd1, 0x16, 0xe6, 0x48,
	0x62, 0xff, 0x25, 0x6f, 0x4a, 0x26, 0x12, 0x9b, 0x92, 0xcc, 0xad, 0xd5, 0x64, 0xe6, 0xd6, 0x2a,
	0xb9, 0x0d, 0x9a, 0x4a, 0x6f, 0x83, 0xe2, 0xbb, 0xaf, 0xe9, 0xe4, 0xee, 0x2b, 0x36, 0x7a, 0x50,
	0xc2, 0x56, 0x99, 0x19, 0x65, 0x17, 0x3d, 0x9b, 0xb5, 0x78, 0x65, 0xed, 0x4e, 0xe6, 0x0a, 0x76,
	0x27, 0xd7, 0x40, 0x53, 0x28, 0xdb, 0xf9, 0xd8, 0xe5, 0x12, 0x49, 0x2b, 0xdc, 0xe5, 0x0c, 0x65,
	0x5b, 0x93, 0x11, 0x17, 0xf7, 0x14, 0x0a, 0xf7, 0x02, 0xd4, 0x69, 0x31, 0x69, 0xb3, 0x25, 0x8f,
	0xb3, 0xa0, 0xce, 0x59, 0xc0, 0xcb, 0xe9, 0xa2, 0xc7, 0x58, 0xa0, 0xde, 0xd7, 0x2c, 0x64, 0xed,
	0x6b, 0x5e, 0x82, 0xba, 0x7f, 0xe0, 0x07, 0xc4, 0xd6, 0x03, 0xcf, 0xea, 0x74, 0x88, 0x47, 0xda,
	0xcc, 0x0e, 0x9a, 0x6a, 0xd5, 0x78, 0xf9, 0xb6, 0x28, 0x56, 0x6c, 0x81, 0x16, 0x9f, 0x64, 0x0b,
	0xf4, 0x6a, 0x6a, 0xbe, 0x15, 0x4e, 0xdf, 0x15, 0x58, 0x4e, 0xa0, 0x88, 0xd9, 0xfb, 0xff, 0x54,
	0x29, 0xb5, 0xdb, 0xae, 0x67, 0x12, 0x56, 0xf9, 0x60, 0x6f, 0xef, 0x29, 0xcc, 0xde, 0xcc, 0x29,
	0x31, 0x96, 0x39, 0x25, 0xde, 0x83, 0x95, 0xc0, 0x3b, 0xd0, 0x99, 0x9b, 0xd2, 0xd0, 0xf2, 0x5d,
	0x4f, 0x47, 0xbd, 0xbc, 0xb7, 0x17, 0x3b, 0xf5, 0x38, 0x1a, 0x78, 0x07, 0x77, 0x43, 0x20, 0xd1,
	0x87, 0x67, 0x75, 0xaa, 0xf4, 0x6a, 0x8a, 0x9b, 0xe5, 0xc6, 0x26, 0x86, 0x22, 0xc6, 0xe6, 0x77,
	0xab, 0x70, 0x02, 0xab, 0xc4, 0x0d, 0x2b, 0xdf, 0x54, 0x5a, 0xae, 0xf3, 0x14, 0x06, 0xe9, 0x32,
	0x2c, 0x89, 0x03, 0x9c, 0xc0, 0xd5, 0x93, 0x67, 0x4f, 0x0b, 0x58, 0xb7, 0xed, 0x86, 0x87, 0x37,
	0x74, 0x4d, 0x16, 0xed, 0xd1, 0xfd, 0x81, 0x69, 0x12, 0x5f, 0x5c, 0xab, 0xd4, 0xc3, 0x8a, 0x2d,
	0x5e, 0xfe, 0xac, 0x06, 0xe4, 0x7a, 0x36, 0x0b, 0x0b, 0x47, 0xe6, 0x0c, 0x9c, 0xca, 0xc2, 0x15,
	0x43, 0xf4, 0x5f, 0x8c, 0xd3, 0xb5, 0x38, 0xba, 0xe5, 0x3c, 0xe4, 0x21, 0xa1, 0x36, 0x38, 0xa3,
	0x2d, 0x79, 0x97, 0x8c, 0xa1, 0x0d, 0xce, 0xca, 0x43, 0xe7, 0x92, 0x67, 0xc4, 0x5f, 0x3a, 0xb3,
	0xf9, 0x9c, 0x0e, 0x5c, 0xdd, 0xec, 0x0d, 0xfc, 0x80, 0x78, 0xf2, 0xa1, 0x9f, 0xc6, 0x2a, 0xb7,
	0xdd, 0x75, 0x5e, 0xc5, 0x3e, 0xf1, 0x22, 0xcc, 0x62, 0xa7, 0xda, 0x96, 0xbf, 0x8f, 0x67, 0x7e,
	0x38, 0x9b, 0x67, 0x78, 0xcd, 0x4d, 0x5a, 0xa1, 0xed, 0xc1, 0x49, 0xb3, 0x6b, 0xf5, 0xda, 0xba,
	0xec, 0x7d, 0xd1, 0x26, 0x81, 0x61, 0x76, 0xb9, 0xfa, 0x04, 0xe6, 0x0d, 0x71, 0x4e, 0x7d, 0x4b,
	0x40, 0x31, 0x6f, 0x85, 0xee, 0x17, 0xad, 0xe3, 0x66, 0xbc, 0xe0, 0x26, 0xa3, 0x23, 0x4c, 0x54,
	0x7f, 0xdf, 0xea, 0x87, 0x36, 0x33, 0x1e, 0x0a, 0xcc, 0xd0, 0x42, 0xb4, 0x6f, 0xb5, 0xab, 0xb0,
	0xcc, 0x60, 0x42, 0x25, 0x44, 0x57, 0x21, 0xa6, 0xc2, 0x66, 0x51, 0x85, 0xed, 0x5b, 0x7d, 0x31,
	0x81, 0x1f, 0x38, 0x74, 0x8e, 0x70, 0x3b, 0xad, 0xa4, 0x37, 0xd6, 0x87, 0xd4, 0x4e, 0x8b, 0xf9,
	0x61, 0x69, 0x6f, 0xc2, 0x0a, 0xe7, 0x46, 0x5b, 0x5c, 0x0a, 0x26, 0xef, 0xce, 0x8e, 0x62, 0x3d,
	0xbf, 0x0d, 0x0c, 0xaf, 0xd1, 0x36, 0x60, 0x7a, 0xc7, 0x16, 0xce, 0x2b, 0x5f, 0xf8, 0x52, 0xb6,
	0x69, 0x0b, 0x72, 0x87, 0x76, 0x25, 0x77, 0x02, 0xa6, 0x93, 0xfe, 0x2f, 0x53, 0x03, 0xd1, 0xfa,
	0x7f, 0x55, 0x65, 0xac, 0xb0, 0xfc, 0xfd, 0xe8, 0x1e, 0xff, 0x90, 0xa7, 0xd5, 0x75, 0xf9, 0xaa,
	0x69, 0x8c, 0xad, 0xc1, 0x27, 0x95, 0x42, 0x44, 0x5b, 0x91, 0x77, 0xd3, 0xf4, 0xa5, 0xf9, 0xf7,
	0x69, 0xe7, 0x61, 0xc6, 0x64, 0xec, 0xd0, 0x5d, 0xa7, 0x77, 0xc0, 0x4d, 0x49, 0x61, 0xf0, 0x00,
	0xaf, 0x79, 0xe0, 0xf4, 0x0e, 0xb4, 0x77, 0x61, 0x9a, 0x89, 0x0a, 0xeb, 0xda, 0x54, 0xb6, 0x79,
	0xc1, 0x19, 0xcc, 0x77, 0x6d, 0x53, 0x14, 0x83, 0xf1, 0x7e, 0x35, 0xce, 0xfa, 0x42, 0xa9, 0xdd,
	0xa2, 0x5b, 0x89, 0x08, 0x5e, 0x48, 0x6e, 0xac, 0x11, 0x95, 0x51, 0x1b, 0xf1, 0x23, 0x76, 0xa3,
	0x45, 0xab, 0x8a, 0xee, 0x61, 0xd7, 0x61, 0x9e, 0x7d, 0xc7, 0x68, 0xb7, 0x3d, 0xf9, 0x82, 0x3a,
	0x7b, 0x30, 0xd7, 0xda, 0x6d, 0xaf, 0x35, 0xdb, 0xc6, 0xbf, 0x72, 0xfd, 0x03, 0xc6, 0x32, 0xfd,
	0x03, 0xb2, 0xee, 0xf7, 0xc7, 0x33, 0xef, 0xf7, 0x2f, 0x50, 0x3d, 0x3e, 0xb4, 0x4c, 0x22, 0x4d,
	0xe1, 0x23, 0xdc, 0xef, 0x8b, 0x97, 0x87, 0xde, 0x0a, 0x25, 0x3c, 0x01, 0x26, 0x8a, 0x3d, 0x01,
	0x3e, 0x96, 0x38, 0x98, 0x1a, 0x90, 0xea, 0xa8, 0x03, 0x62, 0xc2, 0xd1, 0x68, 0x2a, 0xb0, 0x2b,
	0x4c, 0x1c, 0x98, 0x0f, 0xa1, 0xc6, 0xe6, 0x91, 0x49, 0xcb, 0xe4, 0xd1, 0x6e, 0xe6, 0xce, 0x26,
	0x7e, 0x61, 0x3a, 0xe7, 0x8b, 0x3f, 0xd9, 0x47, 0x3e, 0xa2, 0x66, 0x50, 0x0c, 0x82, 0x6a, 0x68,
	0xab, 0x47, 0x77, 0x3e, 0x13, 0xcc, 0x11, 0xc4, 0xe7, 0xee, 0x81, 0x42, 0xea, 0xb1, 0x50, 0xd3,
	0x60, 0x9c, 0x0e, 0x18, 0x9b, 0xf2, 0xe3, 0x2d, 0xf6, 0xb7, 0xba, 0xc5, 0x94, 0x11, 0x1f, 0xc2,
	0x4c, 0x9b, 0x91, 0x95, 0x5b, 0xfb, 0x52, 0x71, 0x6b, 0xb1, 0x2d, 0x2d, 0xe0, 0xd8, 0xac, 0xc5,
	0xdf, 0x1f, 0x17, 0xb3, 0xe5, 0xa9, 0x1d, 0xea, 0x6f, 0xc3, 0x0c, 0x1e, 0x60, 0x48, 0xaa, 0xea,
	0x5a, 0x66, 0x73, 0xc3, 0x76, 0xc4, 0x7e, 0x33, 0x05, 0x06, 0x9c, 0xce, 0x33, 0x54, 0x61, 0x8d,
	0x3f, 0xa9, 0x40, 0x3d, 0xd9, 0x2e, 0xaa, 0x8a, 0xc3, 0x29, 0x8c, 0x0b, 0x4a, 0xc1, 0xec, 0x9d,
	0x12, 0xb3, 0x57, 0x7b, 0x15, 0xbd, 0xbb, 0xaa, 0x05, 0x68, 0x92, 0x6f, 0xd7, 0x71, 0x98, 0x72,
	0xc8, 0x23, 0x36, 0xc3, 0xd9, 0x04, 0x1f, 0x6f, 0x4d, 0x3a, 0xe4, 0x11, 0x9d, 0xd6, 0xda, 0x29,
	0x2a, 0x1a, 0xe1, 0x1c, 0x45, 0xbe, 0x40, 0x34, 0x3d, 0x13, 0xa7, 0x32, 0x47, 0x92, 0xa7, 0x32,
	0xab, 0x71, 0x69, 0x28, 0xd4, 0x9d, 0xf7, 0x85, 0xee, 0x8c, 0x1d, 0xa7, 0x3c, 0xf9, 0xaa, 0xff,
	0x3f, 0x8e, 0xc1, 0xf3, 0xd4, 0xec, 0x31, 0x9c, 0x0e, 0xc1, 0x69, 0x1c, 0x18, 0x96, 0x43, 0xbc,
	0xa7, 0x26, 0x9d, 0xb1, 0xee, 0x8d, 0x95, 0x90, 0xa3, 0xf1, 0x51, 0xe4, 0xe8, 0x48, 0xd6, 0x52,
	0xf8, 0x0d, 0x98, 0x0e, 0x1d, 0x5b, 0x99, 0xb4, 0xcd, 0x5f, 0x7d, 0x27, 0xc3, 0x04, 0xcc, 0xe6,
	0x45, 0xe4, 0x2a, 0xdb, 0x8a, 0xa8, 0x69, 0xf7, 0x64, 0xc3, 0x60, 0x92, 0xcd, 0xb6, 0x97, 0xcb,
	0x92, 0x8e, 0xdb, 0x09, 0xcd, 0xf3, 0x30, 0x1d, 0x7e, 0x42, 0x9b, 0x81, 0x49, 0x1c, 0xe6, 0x7a,
	0x45, 0x9b, 0x85, 0xa9, 0xfd, 0xf5, 0x1e, 0x31, 0x9c, 0x41, 0xbf, 0x5e, 0x6d, 0xbe, 0x97, 0x3b,
	0x6a, 0x85, 0x52, 0xf4, 0x08, 0x9a, 0x39, 0xe8, 0x42, 0xa8, 0x3e, 0x51, 0xbb, 0x9a, 0x8c, 0xd6,
	0xb7, 0xb8, 0xdf, 0xc9, 0xef, 0x87, 0x66, 0xda, 0x53, 0xdb, 0xfd, 0xa4, 0x97, 0xf7, 0xb1, 0xd1,
	0x97, 0xf7, 0x67, 0x64, 0xaf, 0xa9, 0x56, 0xfc, 0x49, 0xd5, 0x8a, 0x1f, 0xe9, 0x8d, 0x92, 0x3b,
	0x85, 0x50, 0x6f, 0x1c, 0xd2, 0x6e, 0xe1, 0x02, 0xcc, 0x71, 0x7a, 0x62, 0xc7, 0x90, 0xe9, 0xec,
	0xf9, 0x4b, 0x15, 0x19, 0xf4, 0xd0, 0x76, 0x03, 0x87, 0x61, 0xc5, 0x35, 0xff, 0xe3, 0x2a, 0xcc,
	0xef, 0xd8, 0xf7, 0x2d, 0xf3, 0xa9, 0x6d, 0x1a, 0xde, 0x4e, 0x6f, 0x1a, 0x9e, 0x53, 0xb6, 0xf0,
	0xbe, 0x65, 0x7e, 0x25, 0xf6, 0x0c, 0xcd, 0x57, 0x62, 0x2c, 0x29, 0x14, 0xac, 0x25, 0xd0, 0x24,
	0x70, 0x71, 0xc2, 0xf1, 0x9b, 0x15, 0xba, 0x8b, 0xbd, 0x6f, 0x99, 0x45, 0xc6, 0x78, 0x13, 0xe6,
	0x6c, 0xc3, 0x4c, 0x8c, 0xe2, 0x2c, 0xbb, 0xc5, 0x09, 0x27, 0x63, 0x81, 0x67, 0xed, 0x58, 0x91,
	0x67, 0x6d, 0x13, 0xe6, 0x1c, 0xcb, 0x94, 0x24, 0x7b, 0x9c, 0x7f, 0xc3, 0xb1, 0xcc, 0x50, 0x9e,
	0xef, 0x46, 0xed, 0xa5, 0x5d, 0x7e, 0x1b, 0xa6, 0x28, 0x8a, 0x24, 0x57, 0xcf, 0x67, 0x8d, 0x1a,
	0x1a, 0xbe, 0x93, 0x8e, 0xc5, 0x55, 0xf8, 0x2f, 0x0b, 0x99, 0x7a, 0x6a, 0x2b, 0xe8, 0xba, 0xca,
	0xbe, 0x6b, 0x66, 0xb5, 0xef, 0x2b, 0x65, 0xce, 0x85, 0xd2, 0x55, 0x72, 0xa1, 0x12, 0xd2, 0x15,
	0xbf, 0x3c, 0xfa, 0x55, 0xc1, 0xe2, 0xa7, 0xb6, 0x88, 0xa4, 0xc4, 0x72, 0x2c, 0x2d, 0x96, 0xcf,
	0x68, 0x8d, 0x48, 0x49, 0xf3, 0x64, 0x5a, 0x9a, 0x5f, 0x89, 0xf1, 0xa7, 0x34, 0x97, 0xe3, 0x2f,
	0xfa, 0x5e, 0xa4, 0xdb, 0xc1, 0xfb, 0x5c, 0xaa, 0x73, 0x35, 0xfc, 0x23, 0x09, 0xf0, 0xd0, 0xf4,
	0x7b, 0x09, 0xc5, 0xd0, 0xbc, 0x0c, 0x4b, 0x3b, 0xf6, 0xed, 0xde, 0xc0, 0xef, 0x7e, 0x4c, 0x0c,
	0xcf, 0x21, 0xed, 0x7b, 0x9b, 0x7e, 0x6e, 0x4b, 0x97, 0x15, 0x08, 0xb4, 0xab, 0x6f, 0x42, 0x63,
	0xc7, 0xbe, 0xd3, 0x1f, 0xdc, 0x21, 0xc1, 0xba, 0x6b, 0xf7, 0x8d, 0xc0, 0xda, 0xed, 0xb1, 0xfb,
	0x3c, 0x46, 0xee, 0x38, 0x73, 0xa5, 0xa6, 0xe4, 0x7c, 0x5c, 0x14, 0x27, 0x39, 0x3d, 0xbf, 0xd9,
	0xc9, 0x44, 0xa4, 0x8c, 0xb8, 0xc7, 0x9c, 0xc8, 0xd9, 0x99, 0x78, 0xa7, 0x3f, 0xf0, 0xd1, 0x7e,
	0x7a, 0x51, 0x6d, 0x3f, 0xc5, 0xd0, 0xef, 0xf4, 0x07, 0x7e, 0x0b, 0x86, 0xb6, 0xf8, 0xbb, 0xf9,
	0x4f, 0xaa, 0xb0, 0xb0, 0x61, 0x99, 0x9e, 0xeb, 0x93, 0x4e, 0xa4, 0x58, 0xde, 0x86, 0x89, 0xd8,
	0xc3, 0x98, 0x33, 0x2a, 0x2f, 0x60, 0xc4, 0x42, 0x3d, 0x85, 0x08, 0xda, 0x2d, 0x98, 0xb2, 0x49,
	0x60, 0xb4, 0x8d, 0xc0, 0xc0, 0xad, 0xd0, 0x4b, 0x85, 0xc8, 0x1b, 0x88, 0xd0, 0x0a, 0x51, 0x0f,
	0xcb, 0x9a, 0xff, 0x00, 0xc0, 0xed, 0xb5, 0x85, 0xfb, 0xef, 0x91, 0xb2, 0x9d, 0x99, 0x76, 0x7b,
	0x6d, 0x74, 0x08, 0x3e, 0x05, 0x33, 0x03, 0xc7, 0xfa, 0x6c, 0x40, 0xa2, 0x73, 0xea, 0xe9, 0x16,
	0xf0, 0xa2, 0xa2, 0x33, 0xea, 0x23, 0x19, 0x6f, 0x63, 0xe3, 0x0c, 0x2f, 0xf3, 0x36, 0x36, 0x8e,
	0x11, 0x5e, 0xc9, 0x54, 0xe0, 0x58, 0xbc, 0xe6, 0x0e, 0x71, 0xee, 0x0f, 0x6c, 0x3a, 0x84, 0x67,
	0x60, 0x36, 0x76, 0x02, 0x5e, 0x39, 0x5d, 0xbd, 0x30, 0xdd, 0x9a, 0x31, 0xa5, 0xa3, 0xef, 0x97,
	0x60, 0x8e, 0x3d, 0xf3, 0x77, 0xa8, 0x02, 0x33, 0xfc, 0x7d, 0xfe, 0xb0, 0x45, 0xf8, 0x00, 0x88,
	0x2a, 0xfa, 0xb1, 0xc3, 0x79, 0x68, 0xa4, 0x64, 0xc7, 0x1b, 0xea, 0x2e, 0x14, 0x32, 0xe5, 0x24,
	0x9c, 0x50, 0xe1, 0x09, 0xd6, 0xfc, 0xd3, 0x4a, 0xc4, 0xe6, 0x48, 0x9b, 0xaf, 0xc2, 0x42, 0x87,
	0xaa, 0x07, 0x7e, 0x49, 0xe4, 0x0c, 0xec, 0x5d, 0xe2, 0xe1, 0x8b, 0xd3, 0xca, 0x95, 0x56, 0x3d,
	0xaa, 0xbb, 0xcf, 0xaa, 0xb4, 0xb3, 0x4a, 0x0e, 0x25, 0x78, 0xf3, 0x0a, 0xd4, 0x2c, 0x5f, 0xef,
	0x9b, 0xba, 0x47, 0x4c, 0xd7, 0x31, 0xad, 0x1e, 0xdf, 0xcc, 0x87, 0x47, 0x43, 0x73, 0x96, 0xbf,
	0x69, 0xb6, 0x44, 0xdd, 0xe1, 0x6c, 0x45, 0x8b, 0x24, 0xab, 0xfc, 0xab, 0xeb, 0x38, 0x86, 0x60,
	0xdf, 0xef, 0x55, 0x61, 0x59, 0xd4, 0xb0, 0x48, 0x02, 0x91, 0x6e, 0xd8, 0x80, 0x9a, 0x8d, 0x35,
	0xe8, 0xcf, 0x82, 0xfa, 0xe7, 0x5c, 0xce, 0xbc, 0x0a, 0xd1, 0x5b, 0xf3, 0x76, 0xac, 0x28, 0x46,
	0x8e, 0x6f, 0x09, 0x50, 0x6d, 0xe4, 0x91, 0x0b, 0x47, 0x34, 0x22, 0xc7, 0x8b, 0xd2, 0x32, 0x3d,
	0x96, 0x29, 0xd3, 0x06, 0x1c, 0x4b, 0x74, 0x44, 0xef, 0x10, 0x26, 0x15, 0x6c, 0x3c, 0x66, 0xae,
	0x5e, 0x2c, 0xec, 0x50, 0x38, 0xdd, 0x5a, 0x4b, 0xb6, 0xa2, 0xa2, 0xf9, 0xb7, 0x2a, 0x4a, 0x36,
	0x16, 0x8d, 0x8b, 0x76, 0x0d, 0xc6, 0x88, 0xe7, 0xa1, 0x85, 0xa8, 0xd2, 0x57, 0x12, 0xb1, 0x5b,
	0x9e, 0xd7, 0xa2, 0xd0, 0xda, 0x6a, 0x9a, 0x93, 0x31, 0x39, 0x4c, 0xb2, 0xea, 0xdd, 0xfc, 0xfe,
	0x87, 0x78, 0xea, 0xae, 0x5d, 0x85, 0x15, 0xd1, 0xb3, 0x0d, 0xd7, 0xb1, 0x02, 0xd7, 0xe3, 0x2e,
	0x69, 0x54, 0x44, 0x96, 0x61, 0x82, 0xbb, 0x4b, 0xe0, 0x13, 0x6a, 0xfc, 0xd5, 0x6c, 0x64, 0xe0,
	0x50, 0x89, 0x7b, 0x04, 0x27, 0x45, 0x1d, 0x2f, 0xa4, 0x36, 0xf6, 0xa6, 0x47, 0xd6, 0xbb, 0xc4,
	0xdc, 0xa7, 0x44, 0x77, 0xa0, 0xd6, 0xf7, 0x88, 0x6e, 0xd2, 0xdf, 0xbe, 0xfc, 0xec, 0x79, 0x35,
	0x67, 0x98, 0xd2, 0xa4, 0xfc, 0xd6, 0x5c, 0x5f, 0xfc, 0xc9, 0x16, 0xfb, 0xff, 0x45, 0x52, 0xa2,
	0x02, 0xa8, 0x45, 0x02, 0xe6, 0xe7, 0x75, 0x03, 0xdd, 0x98, 0xf9, 0x43, 0xa7, 0x51, 0x3f, 0xc4,
	0xdd, 0x9e, 0xd7, 0x60, 0xc2, 0x0f, 0x8c, 0x60, 0xc0, 0xdf, 0xfc, 0xce, 0xe7, 0x2e, 0x87, 0x02,
	0x77, 0x8b, 0x21, 0xb4, 0x10, 0x91, 0xda, 0x1d, 0xc4, 0xf3, 0x74, 0xdb, 0xef, 0xa0, 0x43, 0xf5,
	0x04, 0xf1, 0xbc, 0x0d, 0xbf, 0xd3, 0x74, 0xf2, 0x98, 0xc6, 0x63, 0x1d, 0xcc, 0x32, 0x86, 0xe9,
	0xd8, 0x04, 0x3e, 0x53, 0x2f, 0x96, 0x68, 0x02, 0xb2, 0xa0, 0x35, 0x63, 0x46, 0x0d, 0x6a, 0xfe,
	0xc3, 0x0a, 0x68, 0xf1, 0xa5, 0x92, 0x1d, 0x9b, 0x66, 0x8c, 0xb7, 0xb6, 0x03, 0xe3, 0xec, 0x74,
	0x92, 0x77, 0xfc, 0xad, 0xc2, 0x75, 0x97, 0x12, 0x4b, 0x9a, 0x06, 0x6e, 0x9b, 0x5c, 0x9f, 0xda,
	0xbf, 0x49, 0xf6, 0x8c, 0x41, 0x2f, 0x68, 0x31, 0x7a, 0xda, 0xab, 0x70, 0x34, 0x74, 0x08, 0xd0,
	0xf7, 0x5c, 0xf4, 0xa4, 0x36, 0x7a, 0xb8, 0x24, 0x69, 0xc2, 0x31, 0xea, 0xb6, 0xcb, 0xbd, 0xa8,
	0x8d, 0x5e, 0xf3, 0x95, 0x64, 0xc3, 0x29, 0x61, 0x76, 0xf8, 0x85, 0xa4, 0xeb, 0x15, 0x6d, 0x1a,
	0x8e, 0xec, 0xdf, 0xee, 0xb9, 0x8f, 0xea, 0x55, 0x6a, 0xd0, 0xc5, 0xc1, 0xf9, 0x7e, 0xb3, 0xf9,
	0x50, 0x51, 0x4e, 0xf9, 0xfc, 0x5e, 0xc2, 0x60, 0x7a, 0xa1, 0x54, 0x5f, 0x85, 0xd1, 0x94, 0x26,
	0xbb, 0xc5, 0xb7, 0xb7, 0x5f, 0x90, 0xec, 0xb2, 0x82, 0x2c, 0x9d, 0x6b, 0x07, 0x70, 0x5e, 0x94,
	0x6f, 0x11, 0x73, 0xe0, 0x59, 0xc1, 0x01, 0xce, 0x47, 0xcb, 0x89, 0x37, 0xe0, 0x41, 0xa2, 0x01,
	0x6f, 0xe6, 0x34, 0x20, 0x93, 0x94, 0xdc, 0xa4, 0x0b, 0xa5, 0x3e, 0x4d, 0x1b, 0x39, 0x0d, 0x93,
	0xb7, 0xcc, 0xae, 0x4b, 0xb9, 0x8e, 0x7f, 0xd2, 0xd2, 0xef, 0xb2, 0x37, 0xd5, 0xb7, 0x86, 0xc4,
	0x61, 0x11, 0x38, 0x9e, 0xec, 0x55, 0xa4, 0x76, 0x1e, 0x6a, 0x56, 0x3f, 0xdc, 0xf4, 0x4b, 0x1b,
	0xb1, 0x39, 0xab, 0x8f, 0x1b, 0x7d, 0xb6, 0x15, 0x3b, 0x07, 0x60, 0xf9, 0x3a, 0xfa, 0x9a, 0xc4,
	0xb5, 0xe2, 0xb4, 0xe5, 0xe3, 0x9b, 0x0a, 0xba, 0xa2, 0x8b, 0x2d, 0x45, 0x48, 0x0e, 0xef, 0xd3,
	0x70, 0x57, 0x21, 0xe8, 0x7d, 0xc4, 0x37, 0x1f, 0xd1, 0x13, 0xd6, 0x89, 0x4c, 0xcb, 0x3d, 0x9c,
	0xd7, 0xb4, 0xab, 0x1b, 0x86, 0xc9, 0x1e, 0xb4, 0xd2, 0x5d, 0x4a, 0xf8, 0xa2, 0xf5, 0xeb, 0x50,
	0x43, 0x4e, 0x88, 0x6d, 0x8e, 0x76, 0x0b, 0x80, 0x05, 0x60, 0xd2, 0x4d, 0x3a, 0xed, 0x2a, 0x99,
	0xae, 0xc8, 0x6b, 0xe2, 0xaf, 0x5b, 0x2c, 0x5c, 0x13, 0x9b, 0xe8, 0xd3, 0x0c, 0x73, 0xdd, 0x6d,
	0x93, 0xe6, 0x3d, 0x58, 0x44, 0xca, 0x6b, 0xed, 0x36, 0x77, 0x1f, 0xa0, 0xc2, 0x70, 0x15, 0xc6,
	0x69, 0xcb, 0x51, 0x14, 0xd4, 0x07, 0x17, 0xe1, 0xc8, 0xb4, 0x18, 0x6c, 0xf3, 0x61, 0x9a, 0x14,
	0x9d, 0x2f, 0x5f, 0x4b, 0x6d, 0xe5, 0x9a, 0xd9, 0xe4, 0xd2, 0xbb, 0xb8, 0xe6, 0xc7, 0xb0, 0x8c,
	0x95, 0x7c, 0x31, 0xfb, 0x62, 0x8d, 0xfc, 0xba, 0x92, 0xda, 0x61, 0xb4, 0xf3, 0x0a, 0x1c, 0x0d,
	0xbd, 0x92, 0x5b, 0xa4, 0xdf, 0xb3, 0xcc, 0x82, 0xa3, 0x9b, 0xe6, 0x6b, 0x2a, 0x8c, 0x42, 0x43,
	0xee, 0x04, 0x1c, 0x4f, 0x63, 0x09, 0x63, 0xee, 0xbf, 0xae, 0x40, 0x5d, 0xbc, 0x72, 0x0c, 0xcf,
	0x23, 0xef, 0xc0, 0x7c, 0xe2, 0x71, 0x24, 0xef, 0x9f, 0xea, 0x35, 0x6f, 0xec, 0x89, 0x64, 0x6b,
	0xce, 0xc9, 0x7e, 0x31, 0xf9, 0xc4, 0x01, 0x0a, 0x9a, 0xaf, 0x27, 0xda, 0x48, 0xbb, 0x7c, 0x06,
	0x66, 0x45, 0x1b, 0xa5, 0x5e, 0xcf, 0x60, 0x19, 0x43, 0x7b, 0x07, 0xe6, 0x10, 0x0d, 0x4f, 0x04,
	0x2f, 0xc2, 0x82, 0x8c, 0x23, 0x1f, 0x39, 0xd7, 0x24, 0x44, 0x36, 0x83, 0x0c, 0x19, 0x99, 0x7e,
	0x70, 0x13, 0x16, 0xe3, 0x4c, 0x91, 0xef, 0x27, 0x8a, 0x39, 0xb3, 0x10, 0xe3, 0x0c, 0xfb, 0x84,
	0xc4, 0xfb, 0xc8, 0x84, 0x4e, 0xf3, 0xbe, 0x7a, 0x08, 0xbc, 0x7f, 0xe2, 0x5d, 0x72, 0x53, 0x4b,
	0xb4, 0x91, 0x0a, 0xcd, 0x7f, 0x17, 0x35, 0x3c, 0xda, 0x3f, 0x15, 0x0f, 0xc8, 0x17, 0x0c, 0x51,
	0x75, 0x18, 0x7d, 0x88, 0x02, 0x70, 0xd4, 0x61, 0x1e, 0xcb, 0x44, 0x64, 0xa6, 0x77, 0x63, 0x25,
	0x74, 0xc8, 0x47, 0x91, 0x97, 0x1f, 0x54, 0x61, 0x11, 0xd1, 0x5b, 0xc4, 0x27, 0xde, 0x90, 0xdc,
	0xeb, 0x97, 0x64, 0x8b, 0x62, 0xc5, 0xa9, 0xaa, 0x56, 0x9c, 0xaf, 0xcb, 0xd7, 0x89, 0xdc, 0xb1,
	0xfc, 0x4a, 0xb6, 0x54, 0xc8, 0xad, 0x88, 0xee, 0x10, 0xaf, 0x4f, 0x89, 0x0a, 0xf9, 0x36, 0xf1,
	0x02, 0xd4, 0x9d, 0x81, 0xad, 0x47, 0xad, 0xc0, 0xa8, 0x13, 0xe3, 0xad, 0x79, 0x67, 0x60, 0xdf,
	0x13, 0xad, 0x20, 0x3e, 0x35, 0xe7, 0x4c, 0xd7, 0xdd, 0xb7, 0xf8, 0xb5, 0xf2, 0x74, 0x0b, 0x7f,
	0x35, 0x5f, 0x92, 0x2f, 0x11, 0xa9, 0xe9, 0x84, 0x5f, 0xa9, 0x57, 0xb4, 0x79, 0x80, 0xfd, 0x87,
	0x8e, 0x87, 0xbf, 0xab, 0xcd, 0xf7, 0xd2, 0x8c, 0xa2, 0xcc, 0x56, 0x70, 0xa1, 0xa2, 0xe0, 0x42,
	0xf3, 0x6b, 0x70, 0x1c, 0xd1, 0xb1, 0x74, 0x9b, 0xda, 0x93, 0x38, 0xc3, 0x4b, 0x68, 0x85, 0x9f,
	0xab, 0x64, 0x11, 0xa0, 0xad, 0xf8, 0x36, 0xac, 0xa4, 0xcf, 0xfb, 0xf5, 0x20, 0x34, 0x60, 0x67,
	0xf2, 0x58, 0x9e, 0xba, 0x07, 0x60, 0x94, 0x5b, 0xcb, 0x86, 0xb2, 0xbc, 0xd9, 0x83, 0xb3, 0x88,
	0x78, 0x7b, 0xe0, 0x98, 0x94, 0x73, 0xeb, 0x5d, 0xc3, 0x72, 0xf8, 0xfc, 0x8d, 0xb4, 0xf1, 0x2d,
	0x98, 0x70, 0x77, 0xbf, 0x4d, 0x4c, 0xe1, 0x16, 0xf7, 0x4a, 0x76, 0x03, 0x14, 0x74, 0x5a, 0x88,
	0xdc, 0x7c, 0xbb, 0xf8, 0x6b, 0x94, 0x01, 0x1a, 0x8c, 0x4b, 0x9c, 0x63, 0x7f, 0x37, 0xdf, 0x87,
	0xd3, 0xd9, 0xa8, 0xc8, 0xf9, 0x98, 0xa7, 0x5c, 0x25, 0xe1, 0x29, 0xb7, 0x5f, 0x40, 0x80, 0x7e,
	0xf8, 0x0e, 0x4c, 0xf2, 0x96, 0x8a, 0x9d, 0xc8, 0x88, 0xfd, 0x14, 0xd8, 0xf9, 0x6c, 0x8d, 0x14,
	0xed, 0x21, 0xb1, 0xf5, 0x85, 0xe2, 0xaf, 0x51, 0x75, 0xf3, 0xed, 0x3c, 0xb0, 0x48, 0x89, 0x2a,
	0xb8, 0x3f, 0xb2, 0xd6, 0xcc, 0x6f, 0x52, 0xa4, 0x01, 0xcf, 0xc2, 0x99, 0x6c, 0x30, 0xa1, 0x14,
	0x3f, 0x28, 0x02, 0x42, 0xf3, 0x23, 0x7b, 0xec, 0xdf, 0x82, 0xa5, 0xe8, 0x41, 0xce, 0x7d, 0xb7,
	0x4d, 0x4a, 0x07, 0x59, 0xf9, 0xd3, 0x8a, 0x02, 0x95, 0x7e, 0x6f, 0x0f, 0x34, 0xf1, 0xe8, 0x91,
	0x3f, 0x92, 0x90, 0x56, 0xe2, 0xb7, 0x94, 0x36, 0x58, 0x9a, 0xc8, 0xaa, 0x5c, 0xc4, 0xc3, 0xf7,
	0x19, 0x52, 0x09, 0x6d, 0x40, 0xe3, 0x5b, 0x50, 0x4f, 0x42, 0x69, 0xe7, 0x60, 0x3e, 0x7c, 0x97,
	0x11, 0x0b, 0xed, 0xe5, 0xe0, 0xb3, 0x0c, 0xdc, 0x1c, 0xcc, 0xb7, 0xf9, 0xde, 0x51, 0x0f, 0x5c,
	0xdd, 0xe8, 0xf5, 0xc4, 0xe9, 0x20, 0x96, 0x6e, 0xbb, 0x6b, 0xbd, 0x5e, 0xf3, 0xf7, 0x8e, 0xc0,
	0xb1, 0x5b, 0x4e, 0x40, 0xbc, 0x0d, 0xc3, 0x72, 0x02, 0xe2, 0x18, 0x8e, 0x49, 0xe8, 0xde, 0x13,
	0xe7, 0x53, 0xb4, 0x47, 0xa9, 0x24, 0xf6, 0x28, 0x8f, 0x61, 0x81, 0x0c, 0x0d, 0x73, 0xc0, 0xcf,
	0x2a, 0xdd, 0x3e, 0x5b, 0x11, 0xf8, 0x4e, 0xfa, 0x3d, 0x45, 0xff, 0x33, 0xbe, 0xc1, 0x6c, 0x53,
	0x41, 0xe5, 0x01, 0x23, 0x72, 0x7d, 0x76, 0xff, 0x63, 0x6b, 0x48, 0xc4, 0xb3, 0xf5, 0x3a, 0x49,
	0xd4, 0xab, 0x85, 0x71, 0x2c, 0x67, 0x09, 0x7f, 0x05, 0x6a, 0xa8, 0xfa, 0xf9, 0x76, 0xbc, 0x6b,
	0xc4, 0xf7, 0x4a, 0x73, 0xa2, 0xf6, 0xb6, 0xeb, 0xdd, 0x35, 0xb4, 0xd7, 0x60, 0x71, 0xe0, 0x13,
	0xbd, 0x6b, 0xe8, 0xbc, 0x9c, 0x7d, 0x1b, 0x23, 0x19, 0xe1, 0x49, 0xdd, 0xc2, 0xc0, 0x27, 0x77,
	0x8d, 0x96, 0x54, 0xad, 0xbd, 0x99, 0x1b, 0x23, 0x22, 0x7c, 0xdd, 0x93, 0x7e, 0xbb, 0x11, 0x33,
	0x30, 0x26, 0x4b, 0x18, 0x18, 0x53, 0xa3, 0x9c, 0xc6, 0x4e, 0x67, 0xdd, 0xa7, 0xfd, 0x74, 0x05,
	0x8e, 0x39, 0xae, 0xc3, 0x37, 0x8f, 0xec, 0x71, 0xd1, 0xd0, 0xd6, 0x0d, 0x36, 0xbd, 0xd8, 0x93,
	0xa8, 0xf9, 0xab, 0x37, 0x4a, 0x0e, 0xe3, 0x36, 0x8b, 0x59, 0xbb, 0x63, 0xdf, 0x77, 0x9d, 0x8d,
	0x90, 0x1a, 0x8e, 0xe5, 0xc4, 0xfe, 0x8d, 0x9e, 0x6b, 0xee, 0xb7, 0x8e, 0xc6, 0x3e, 0xb5, 0x63,
	0xaf, 0xb1, 0x0f, 0x35, 0xef, 0x80, 0x96, 0x16, 0x00, 0x6d, 0x0e, 0xa6, 0xf7, 0x85, 0x77, 0x78,
	0xbd, 0xa2, 0xd5, 0x61, 0x76, 0x7f, 0xdd, 0xed, 0xb5, 0x51, 0x22, 0xea, 0x55, 0x56, 0x22, 0xc9,
	0x48, 0x7d, 0xac, 0xf9, 0x86, 0x5a, 0x8a, 0xcb, 0x1c, 0xd3, 0x2b, 0xbb, 0x84, 0x5b, 0x93, 0x3d,
	0x58, 0xbe, 0xf5, 0xd8, 0x0a, 0x46, 0x9d, 0x1b, 0x23, 0xab, 0xcb, 0x15, 0xe5, 0x77, 0x68, 0x0b,
	0xae, 0xc3, 0x09, 0x55, 0x0b, 0xf8, 0xd3, 0xd1, 0x82, 0xce, 0xfd, 0x0f, 0xe3, 0x30, 0x73, 0xd7,
	0x88, 0x96, 0x9b, 0x0f, 0xe0, 0x24, 0x35, 0xb1, 0x58, 0xbb, 0x45, 0xa4, 0x0d, 0xaa, 0x1b, 0x02,
	0xb7, 0x47, 0x3c, 0x11, 0x30, 0x69, 0xac, 0x75, 0xdc, 0x19, 0x30, 0xc9, 0x14, 0xf1, 0x36, 0xb6,
	0xdd, 0x6d, 0x04, 0x78, 0x86, 0x93, 0xfe, 0x45, 0xa8, 0xe1, 0x1b, 0xb8, 0xf0, 0x29, 0x21, 0x77,
	0x80, 0xc0, 0xe7, 0xd0, 0xb7, 0xc5, 0x83, 0x42, 0x25, 0xef, 0xc7, 0x73, 0xb4, 0xc3, 0x63, 0xa8,
	0x4b, 0xf3, 0x9c, 0xbf, 0xa9, 0xe5, 0x8e, 0x72, 0x1b, 0x61, 0x97, 0x3e, 0x27, 0x03, 0x7f, 0x75,
	0x5d, 0x8e, 0x8f, 0xbc, 0xe9, 0xb9, 0x81, 0x1b, 0x1d, 0x54, 0xdc, 0x5d, 0xe3, 0xb5, 0x72, 0x89,
	0xa4, 0x1e, 0xd8, 0x09, 0x46, 0xcd, 0x8b, 0x17, 0x68, 0x27, 0xe0, 0xc8, 0x9e, 0xeb, 0x99, 0x24,
	0xee, 0xa0, 0xce, 0xcb, 0xe2, 0x23, 0x3b, 0x55, 0x42, 0x2d, 0x4c, 0x8f, 0xa2, 0x16, 0x20, 0xcb,
	0x51, 0xe1, 0x62, 0x24, 0x32, 0x65, 0x9e, 0xcb, 0x0a, 0x58, 0x31, 0x61, 0x00, 0xa6, 0xee, 0x1a,
	0x78, 0x18, 0xf9, 0x87, 0xe3, 0xf8, 0x83, 0x12, 0x7a, 0x89, 0x3f, 0x29, 0xa4, 0x43, 0x84, 0x2f,
	0xc7, 0xdb, 0x78, 0x1a, 0x5b, 0x13, 0xe5, 0xfc, 0x88, 0xb8, 0x5d, 0x2c, 0xa6, 0xd5, 0x22, 0x31,
	0xbd, 0x94, 0xb9, 0x42, 0x28, 0xc6, 0x7f, 0x15, 0x16, 0xc3, 0xd5, 0x21, 0x9c, 0xd2, 0x3e, 0x3a,
	0xcb, 0x2c, 0x88, 0x2a, 0xf1, 0x8e, 0x8b, 0x85, 0x9f, 0x0b, 0x7b, 0x62, 0x39, 0x7a, 0xdf, 0x73,
	0x3b, 0xcc, 0x56, 0x97, 0x70, 0xf9, 0xe9, 0xda, 0x09, 0x01, 0x76, 0x8f, 0x4a, 0x0b, 0x03, 0x8a,
	0xa8, 0x7c, 0x0b, 0xa6, 0xba, 0x06, 0xc6, 0x29, 0x9b, 0x64, 0xd2, 0xb6, 0xfe, 0xc5, 0xa4, 0x0d,
	0x43, 0x99, 0x75, 0x0d, 0xf6, 0x87, 0x52, 0xaa, 0xa7, 0xbe, 0x14, 0xa9, 0xde, 0x82, 0x17, 0xe9,
	0xf0, 0x79, 0xc4, 0x36, 0x2c, 0xc7, 0x72, 0x3a, 0x39, 0x03, 0xc9, 0x23, 0x95, 0x34, 0x9d, 0x81,
	0xdd, 0x12, 0xd0, 0xea, 0x11, 0x6d, 0xfe, 0x46, 0x15, 0x96, 0xf8, 0xa1, 0x97, 0x1f, 0x18, 0x5e,
	0xb0, 0xd6, 0xeb, 0xed, 0xd8, 0x7e, 0xa1, 0x1e, 0x7e, 0x19, 0xb4, 0x70, 0xa8, 0x92, 0xa7, 0xad,
	0xa1, 0x38, 0x86, 0x2f, 0xf4, 0x56, 0x61, 0x31, 0x84, 0x66, 0x5f, 0x61, 0xc2, 0xc3, 0xe4, 0xa6,
	0xd2, 0x5a, 0x10, 0x55, 0x5b, 0xb4, 0x86, 0x4a, 0x4f, 0xea, 0x1d, 0xf2, 0x78, 0xfa, 0x1d, 0xf2,
	0x33, 0x7a, 0xc7, 0x77, 0x4d, 0xc1, 0xac, 0xc2, 0xd9, 0xdc, 0x80, 0x95, 0x14, 0x92, 0x98, 0xd6,
	0x7f, 0x58, 0x85, 0x05, 0xac, 0xc0, 0x70, 0x0b, 0x87, 0xcc, 0xfb, 0xe2, 0xc8, 0x94, 0xa3, 0x72,
	0x7b, 0xa2, 0x04, 0xb7, 0x27, 0x47, 0xe1, 0xf6, 0x54, 0x96, 0x25, 0xa5, 0x7e, 0x03, 0x3d, 0x9d,
	0xf1, 0x06, 0xba, 0x79, 0x25, 0xc9, 0xca, 0x32, 0xd7, 0xe0, 0x71, 0x0c, 0x31, 0x2c, 0xff, 0x6d,
	0x05, 0x34, 0x26, 0x8f, 0x77, 0xd7, 0xc4, 0xfa, 0x57, 0x38, 0x2e, 0xcf, 0x28, 0x9c, 0xfd, 0xab,
	0xa9, 0x96, 0x16, 0x76, 0x7b, 0x08, 0xcb, 0x09, 0x14, 0xe1, 0xbe, 0x9b, 0x31, 0x53, 0x2b, 0x59,
	0x33, 0x75, 0x24, 0x59, 0x6c, 0xfe, 0x7e, 0x05, 0xe6, 0xee, 0x1a, 0xa5, 0x19, 0x9a, 0x14, 0xcc,
	0x6a, 0x81, 0x60, 0x7e, 0x69, 0xbe, 0xff, 0xcd, 0x97, 0xe5, 0x7e, 0x14, 0xb2, 0x7b, 0x11, 0x16,
	0x22, 0x68, 0x21, 0x61, 0xff, 0x5f, 0x15, 0xe6, 0x76, 0xec, 0x16, 0xe9, 0x58, 0x7e, 0xc0, 0x79,
	0xf1, 0x11, 0xcc, 0x78, 0xf8, 0x53, 0x1f, 0xda, 0x78, 0x70, 0x11, 0xdd, 0xd8, 0x86, 0x99, 0x32,
	0x04, 0xce, 0x8e, 0x4d, 0x2d, 0xbe, 0xe8, 0x57, 0x0b, 0xbc, 0xf0, 0x6f, 0x6d, 0x03, 0xc4, 0x21,
	0xa6, 0x6e, 0x1b, 0xfd, 0xbe, 0xe5, 0x74, 0x52, 0xde, 0x15, 0x21, 0x41, 0x3a, 0x3e, 0x78, 0x0e,
	0xb0, 0xc1, 0x61, 0x5b, 0xe2, 0x98, 0x1a, 0x7f, 0x3f, 0xab, 0x37, 0x16, 0xca, 0x60, 0xc4, 0x13,
	0xca, 0x60, 0xc4, 0x74, 0x4c, 0x22, 0x7e, 0x16, 0x8e, 0xc9, 0x43, 0x58, 0x88, 0xa0, 0x85, 0xf4,
	0x7f, 0x00, 0x13, 0x1e, 0xf1, 0x07, 0x3d, 0x71, 0x6a, 0x74, 0x21, 0x8f, 0xf9, 0x2d, 0x12, 0xac,
	0xb2, 0x68, 0x8c, 0x83, 0x5e, 0xd0, 0x42, 0xbc, 0xe6, 0x3f, 0x18, 0xa3, 0xad, 0x58, 0x0b, 0x02,
	0xc3, 0xec, 0xee, 0x74, 0xf0, 0x5a, 0x42, 0x4e, 0x4d, 0x22, 0xb7, 0xa6, 0xc6, 0x2b, 0xa2, 0xa8,
	0x4f, 0xd2, 0xdd, 0x50, 0x35, 0x76, 0xa7, 0x39, 0xf2, 0xc6, 0x7c, 0x09, 0x8e, 0x58, 0x4e, 0x9b,
	0x3c, 0x66, 0xe3, 0x30, 0xd7, 0xe2, 0x3f, 0xb4, 0x4f, 0xe4, 0x33, 0xe6, 0x23, 0xcc, 0x66, 0xb9,
	0xa8, 0x3e, 0x51, 0x89, 0x3a, 0x20, 0x9d, 0x2e, 0x4f, 0xee, 0xf3, 0x72, 0xf9, 0x70, 0xf9, 0x1a,
	0x2c, 0x63, 0xf7, 0x98, 0xf3, 0x3c, 0xfb, 0x4e, 0x74, 0xc3, 0x39, 0xd7, 0x5a, 0xe4, 0xb5, 0x37,
	0x2d, 0x7f, 0xff, 0x1e, 0xad, 0x4b, 0x3b, 0xba, 0x7e, 0x69, 0x1b, 0xf3, 0xe6, 0xdd, 0xe4, 0x5b,
	0x18, 0xde, 0x9d, 0x7a, 0x85, 0xfd, 0xe0, 0x2f, 0xb1, 0xeb, 0x55, 0x76, 0xa4, 0xbd, 0xc3, 0x5a,
	0xbd, 0xd6, 0x6e, 0xd7, 0xc7, 0xb4, 0x05, 0x98, 0xc3, 0xdf, 0xfc, 0x80, 0xa1, 0x3e, 0xce, 0x65,
	0x4d, 0x30, 0xa9, 0xcc, 0xfc, 0x8f, 0xa0, 0xc5, 0xfc, 0xff, 0xf7, 0xc6, 0x60, 0xfe, 0x9e, 0x6d,
	0x74, 0x48, 0x74, 0x16, 0xfc, 0x46, 0x2c, 0x4c, 0xb8, 0xea, 0xbe, 0x51, 0x42, 0x90, 0x5e, 0x93,
	0x5d, 0x81, 0xba, 0xe9, 0xda, 0x7d, 0x16, 0xd5, 0x9c, 0x39, 0xa0, 0x0c, 0x6c, 0xf4, 0xe8, 0xc3,
	0x8d, 0x4f, 0x0d, 0xab, 0xd7, 0xb1, 0xf6, 0x59, 0x4d, 0xe7, 0x53, 0x30, 0xc3, 0xf6, 0xab, 0x81,
	0x6c, 0x48, 0x00, 0x2f, 0x12, 0x4b, 0xe8, 0xc0, 0x17, 0x8e, 0x8b, 0x28, 0x18, 0xb4, 0x80, 0x55,
	0x9e, 0x83, 0x79, 0xcf, 0x75, 0xd3, 0x62, 0x31, 0x4b, 0x4b, 0xc3, 0x36, 0x5d, 0x4c, 0xfa, 0x81,
	0x4d, 0xcb, 0x9c, 0x88, 0x39, 0x82, 0x35, 0x5f, 0x89, 0x0d, 0x41, 0xe1, 0x38, 0x5e, 0x03, 0x4d,
	0x02, 0x17, 0x4a, 0xe3, 0x24, 0x80, 0x45, 0x4b, 0x65, 0x9c, 0x69, 0x56, 0xc2, 0x90, 0x7e, 0xb1,
	0x8a, 0x1f, 0x89, 0xce, 0x81, 0xf3, 0x31, 0x9e, 0xd5, 0x45, 0xda, 0x97, 0x3b, 0x9a, 0x21, 0xef,
	0x4b, 0x3a, 0x2c, 0xde, 0x44, 0xde, 0xc7, 0x5f, 0x1b, 0xad, 0xc2, 0xa2, 0xe2, 0xb5, 0x11, 0x22,
	0x2f, 0xa4, 0x1e, 0x1a, 0x35, 0xff, 0xa0, 0x02, 0x33, 0x8c, 0x0c, 0x1e, 0x53, 0x9f, 0x87, 0x5a,
	0x34, 0x12, 0xf1, 0x6b, 0x29, 0x31, 0x1c, 0xb9, 0x8f, 0xb3, 0xab, 0x23, 0x3f, 0xce, 0x1e, 0xcb,
	0x7c, 0x9c, 0xfd, 0x32, 0xcc, 0x0b, 0x8c, 0xae, 0xd5, 0x6e, 0x13, 0x27, 0x71, 0x94, 0x8a, 0x95,
	0x77, 0x59, 0x5d, 0x73, 0x2b, 0xea, 0x08, 0x0f, 0xe2, 0x8c, 0x1d, 0x49, 0xe6, 0x6c, 0x79, 0x2e,
	0x4b, 0x8b, 0xb0, 0x53, 0x71, 0xde, 0xcd, 0xd0, 0xb1, 0xe4, 0xcf, 0x84, 0xac, 0x46, 0x27, 0x5b,
	0x23, 0x1f, 0xfa, 0x08, 0x25, 0x76, 0xe4, 0x10, 0x94, 0xd8, 0x44, 0x79, 0x25, 0xf6, 0xe5, 0x1d,
	0xef, 0x26, 0xc4, 0x1e, 0xf2, 0xc5, 0x7e, 0x26, 0x43, 0xec, 0xcb, 0x3f, 0x57, 0x91, 0xc0, 0xc5,
	0xda, 0xf1, 0x97, 0x15, 0x58, 0xda, 0x89, 0x6c, 0x07, 0x39, 0x1f, 0x97, 0xbc, 0x82, 0x5c, 0x50,
	0xad, 0xed, 0x49, 0xb4, 0x67, 0x9f, 0x71, 0xe2, 0x05, 0x26, 0xf8, 0xe9, 0x74, 0x13, 0x73, 0x56,
	0xcc, 0xbe, 0xbb, 0xa6, 0xe8, 0x73, 0x21, 0xff, 0x6e, 0xc3, 0x4a, 0x0a, 0x49, 0x28, 0x8f, 0x11,
	0x2c, 0xb3, 0xe6, 0x3f, 0xae, 0xc2, 0x82, 0x44, 0x08, 0xd5, 0x47, 0x64, 0xfc, 0x44, 0x14, 0x64,
	0x2d, 0xb2, 0x98, 0x20, 0xf3, 0xa5, 0xe9, 0x92, 0x57, 0xe1, 0xa8, 0xc1, 0xec, 0x0d, 0xa6, 0x18,
	0x53, 0x0f, 0xd5, 0x34, 0x51, 0xb9, 0x13, 0x9d, 0x02, 0xbc, 0x0f, 0xcf, 0x85, 0x28, 0x96, 0x63,
	0x05, 0x96, 0x11, 0xb8, 0x1e, 0xcb, 0x59, 0x13, 0xf9, 0xb5, 0x4d, 0xb7, 0x8e, 0x0b, 0x98, 0x7b,
	0x02, 0xe4, 0xbe, 0x61, 0xf3, 0xf7, 0x5f, 0x1f, 0x42, 0x53, 0x45, 0x00, 0x37, 0x21, 0xa2, 0x01,
	0x13, 0x8c, 0xcc, 0xf3, 0x69, 0x32, 0x1c, 0xee, 0x5e, 0x94, 0x06, 0x2b, 0xc6, 0x6d, 0xee, 0xd2,
	0x1a, 0x1f, 0x2f, 0x49, 0xcb, 0x45, 0x9e, 0xd2, 0x98, 0x38, 0x50, 0x1e, 0x74, 0x7e, 0xa5, 0x2b,
	0x0f, 0x29, 0xfb, 0xc6, 0xef, 0x4c, 0xc6, 0x04, 0x2a, 0x52, 0x79, 0xa3, 0x58, 0xec, 0x23, 0xaf,
	0xd5, 0x4f, 0x12, 0x1f, 0x79, 0x19, 0x26, 0xfc, 0xae, 0xe1, 0x89, 0xb4, 0x47, 0x2d, 0xfc, 0x45,
	0x1b, 0x6a, 0xf9, 0xa6, 0x6f, 0xe9, 0x81, 0xe1, 0x75, 0x48, 0xc0, 0x06, 0x0b, 0xdf, 0xa9, 0xd4,
	0x58, 0xc5, 0x36, 0x2b, 0xa7, 0x23, 0xa4, 0x39, 0x70, 0x82, 0x3c, 0x46, 0xb3, 0x28, 0x1a, 0x1d,
	0xeb, 0x33, 0x47, 0x84, 0x68, 0xa1, 0x0a, 0xe3, 0x72, 0xbe, 0xc2, 0x88, 0x5e, 0xad, 0xdf, 0xfb,
	0xcc, 0x61, 0xd7, 0xc3, 0x2b, 0x82, 0x66, 0x38, 0x8e, 0x58, 0x93, 0x13, 0x6d, 0x78, 0x3a, 0x3b,
	0xda, 0x70, 0x3c, 0xb4, 0x01, 0x24, 0x42, 0x1b, 0x68, 0x67, 0x61, 0x0e, 0x7b, 0xea, 0x13, 0xd3,
	0x23, 0x3c, 0x6a, 0xf2, 0x74, 0x6b, 0x96, 0x17, 0x6e, 0xb1, 0x32, 0xaa, 0x7d, 0x62, 0x4c, 0xe9,
	0xb3, 0xdc, 0x3c, 0x2c, 0x3c, 0xd2, 0x74, 0x6b, 0x41, 0x62, 0x0b, 0x4f, 0xda, 0xa3, 0x11, 0xa8,
	0x9b, 0x3d, 0x8b, 0xea, 0xb5, 0xe8, 0x59, 0xed, 0x1c, 0xe3, 0xc6, 0x3b, 0xa5, 0xb9, 0x41, 0x89,
	0xae, 0x33, 0x22, 0x22, 0x99, 0x47, 0x6b, 0xde, 0x8c, 0xfd, 0x8e, 0x6b, 0xa9, 0xf9, 0x12, 0xba,
	0xb5, 0x36, 0x8a, 0x6e, 0xad, 0x67, 0xe9, 0xd6, 0xf7, 0xe0, 0x44, 0xcf, 0x35, 0xda, 0xfa, 0xae,
	0xd1, 0x33, 0x1c, 0x9e, 0x16, 0x83, 0x4f, 0x3d, 0x7e, 0xa2, 0xc2, 0xe3, 0x28, 0xaf, 0x50, 0x90,
	0x1b, 0x1c, 0x42, 0x6c, 0x54, 0xc2, 0x68, 0x8f, 0x3c, 0xa8, 0x4f, 0x5b, 0xdf, 0xe5, 0x71, 0x95,
	0xa7, 0x5b, 0xd3, 0x58, 0x72, 0xe3, 0xa0, 0x71, 0x0e, 0x26, 0xc5, 0x78, 0x1f, 0x87, 0xa9, 0x50,
	0x98, 0x2a, 0x6c, 0x8e, 0x4f, 0x5a, 0xbc, 0xaa, 0xb1, 0x03, 0x8b, 0x0a, 0x0e, 0x69, 0xef, 0xa7,
	0x73, 0x47, 0x2a, 0xad, 0x85, 0x38, 0xaa, 0x14, 0xda, 0xe0, 0x9a, 0x62, 0xfe, 0x96, 0x39, 0x8b,
	0x4d, 0x21, 0x89, 0x65, 0xf5, 0x57, 0xaa, 0x31, 0x8a, 0x91, 0xc1, 0xfe, 0x54, 0x35, 0xc2, 0x33,
	0xb2, 0xde, 0x33, 0x23, 0xa6, 0x4d, 0x64, 0x45, 0x4c, 0x4b, 0x30, 0xbc, 0xa4, 0xe1, 0xbe, 0x15,
	0x63, 0xf8, 0x21, 0x05, 0x0b, 0xf8, 0x5f, 0xab, 0xb0, 0x28, 0xab, 0x78, 0x91, 0x57, 0x26, 0xf7,
	0x6d, 0x8d, 0x8a, 0x97, 0x55, 0x25, 0x2f, 0xa5, 0xf4, 0x34, 0x9d, 0x78, 0xb6, 0x11, 0x9e, 0x35,
	0xa6, 0x93, 0x4c, 0x36, 0xd3, 0xd1, 0xf3, 0x8c, 0x64, 0x91, 0x6c, 0xa6, 0x93, 0x7a, 0x15, 0x7c,
	0x53, 0x9e, 0x03, 0x47, 0xb2, 0x1f, 0x73, 0x26, 0xba, 0x9a, 0x78, 0xd7, 0x3f, 0xea, 0x93, 0xe9,
	0xab, 0x69, 0xe6, 0x15, 0x0e, 0xa3, 0x0e, 0xc7, 0x92, 0x38, 0x87, 0x9b, 0x40, 0xe6, 0xb7, 0xc2,
	0x21, 0x8d, 0xc7, 0x5c, 0x7b, 0xaa, 0x73, 0xef, 0x66, 0x3a, 0x98, 0x42, 0x36, 0xff, 0xa3, 0x76,
	0x7d, 0x35, 0xe2, 0x2a, 0x5c, 0x4d, 0x33, 0xac, 0x54, 0x00, 0xe5, 0x04, 0x8e, 0xd0, 0x7e, 0xff,
	0x73, 0x6c, 0x00, 0xbe, 0x24, 0xe5, 0x77, 0x1e, 0x6a, 0xc9, 0x73, 0xc3, 0x31, 0x76, 0x6e, 0x38,
	0xd7, 0xce, 0x3e, 0x31, 0xfc, 0xf2, 0x9e, 0xc6, 0x9f, 0xc3, 0x98, 0x20, 0xc9, 0xb7, 0xf1, 0xb3,
	0x31, 0x6d, 0x74, 0x35, 0xcd, 0xb8, 0xc2, 0x81, 0x68, 0xc9, 0x03, 0x71, 0x48, 0x5a, 0xf1, 0x77,
	0xc6, 0xe5, 0x86, 0x7c, 0x49, 0x06, 0xed, 0x4f, 0xa8, 0x62, 0x47, 0xbc, 0x93, 0x3b, 0x89, 0xa4,
	0xf8, 0x60, 0x89, 0xb2, 0xaf, 0x4a, 0x8c, 0xb0, 0x7f, 0x1e, 0x6e, 0xb0, 0x13, 0x71, 0xc2, 0xc2,
	0x73, 0xf5, 0x8a, 0x7c, 0xae, 0xfe, 0x4e, 0x2c, 0x02, 0x58, 0x69, 0x0d, 0x52, 0x18, 0x0b, 0x2c,
	0x6e, 0x0f, 0x8f, 0x27, 0xed, 0xe1, 0x0b, 0x50, 0x97, 0xcf, 0xde, 0xe5, 0xfe, 0x47, 0xa7, 0xee,
	0x22, 0x9d, 0x04, 0xfd, 0x86, 0xb4, 0xcb, 0xe0, 0xdb, 0x84, 0x39, 0x87, 0x3c, 0x5a, 0x0b, 0x0b,
	0xe3, 0x82, 0x5c, 0xd2, 0xa0, 0x8a, 0x09, 0xf2, 0x21, 0xc5, 0x10, 0xfb, 0x3f, 0xc7, 0xe0, 0x39,
	0x69, 0xb5, 0xe1, 0x16, 0xe9, 0x2d, 0xdc, 0x6a, 0x3c, 0x75, 0x89, 0x66, 0xe7, 0x11, 0xf2, 0x06,
	0x18, 0x37, 0x6b, 0x73, 0x96, 0xbc, 0xe7, 0xd5, 0xfe, 0x2d, 0xf9, 0x32, 0x65, 0x9c, 0x5d, 0xa6,
	0xbc, 0x9d, 0xbf, 0x76, 0xa7, 0xfa, 0x51, 0x70, 0xb7, 0xb2, 0x15, 0xee, 0x77, 0x78, 0xc6, 0x7b,
	0x3c, 0x53, 0x5b, 0x4d, 0x6e, 0x76, 0x25, 0x13, 0x79, 0x93, 0xa7, 0xc6, 0xc7, 0x1d, 0x0e, 0xfb,
	0x21, 0xf6, 0x47, 0xfc, 0x97, 0xb6, 0x0e, 0x33, 0xd2, 0x7e, 0x07, 0x33, 0xe7, 0x94, 0x31, 0xbc,
	0x21, 0xda, 0xd1, 0x34, 0x5f, 0x28, 0x75, 0x93, 0xd2, 0x7c, 0x3f, 0x67, 0x18, 0xa9, 0x80, 0x9c,
	0x0a, 0xdb, 0x22, 0x0d, 0x20, 0x7e, 0x87, 0x09, 0xd7, 0x9f, 0x8f, 0xc1, 0xa9, 0x14, 0x05, 0xa9,
	0x61, 0x4f, 0x5d, 0x16, 0xcc, 0xf4, 0xab, 0x8c, 0x77, 0xcb, 0x0c, 0x72, 0xbc, 0x8d, 0xa3, 0x8e,
	0xf3, 0xf8, 0xe1, 0x8f, 0xf3, 0x91, 0x27, 0x19, 0xe7, 0x43, 0xf2, 0xfb, 0x28, 0x2b, 0x2e, 0x5f,
	0xcb, 0x1f, 0xec, 0x42, 0x55, 0xf4, 0x09, 0x9c, 0xcd, 0xc3, 0x97, 0xce, 0xfd, 0xf8, 0x09, 0x41,
	0x5a, 0xf6, 0xf8, 0xb1, 0xc9, 0x7a, 0x24, 0x80, 0xff, 0x5b, 0x35, 0x26, 0xc2, 0xf8, 0xf0, 0xfe,
	0x2b, 0xa6, 0x89, 0xbe, 0x0c, 0xf9, 0x99, 0x78, 0x22, 0x3d, 0xf1, 0x7c, 0x0e, 0xf7, 0xa8, 0xcd,
	0xf9, 0x33, 0xe3, 0xb0, 0x9c, 0x1a, 0x32, 0xe6, 0xd7, 0x70, 0x38, 0xf7, 0xe6, 0xaf, 0xc1, 0x92,
	0x72, 0x6f, 0x36, 0x26, 0xc5, 0x6a, 0x4a, 0xef, 0xca, 0xb2, 0x22, 0x3c, 0x8d, 0xe7, 0x46, 0x78,
	0x0a, 0x4d, 0x83, 0x23, 0xb2, 0x69, 0xf0, 0xcd, 0x74, 0x94, 0xc8, 0x6b, 0x65, 0x14, 0x08, 0x77,
	0xee, 0xc8, 0xd7, 0x1b, 0x87, 0x74, 0x01, 0x72, 0x21, 0x8c, 0xee, 0xee, 0x3a, 0x18, 0xd7, 0x1c,
	0x13, 0x7b, 0xcc, 0xb7, 0xf1, 0x55, 0x2c, 0x9f, 0xa2, 0x23, 0xbb, 0xbc, 0x96, 0x9c, 0xf7, 0xaf,
	0x2b, 0x85, 0xa0, 0x84, 0x0b, 0x47, 0x43, 0x81, 0xf6, 0x85, 0x8d, 0x8f, 0x3f, 0xa9, 0xc4, 0x9a,
	0xf3, 0xd4, 0x3c, 0x74, 0x9e, 0x91, 0xbb, 0xd8, 0xeb, 0xca, 0xde, 0x15, 0x32, 0xfb, 0x5b, 0x31,
	0x66, 0x1f, 0xbe, 0xe3, 0x8c, 0x07, 0x0b, 0x92, 0x22, 0xc1, 0xfb, 0x95, 0x9f, 0x04, 0x3c, 0x46,
	0xd5, 0xe5, 0x91, 0x93, 0x83, 0x11, 0x64, 0x6a, 0x36, 0xa9, 0xe4, 0x5e, 0x9b, 0x38, 0x81, 0xb5,
	0x67, 0x11, 0xaf, 0x35, 0x6b, 0x62, 0x09, 0x1b, 0xe9, 0x4f, 0x93, 0xdf, 0xa4, 0x5d, 0xb9, 0x11,
	0xea, 0xbd, 0xbc, 0xfb, 0x85, 0xd4, 0x07, 0x85, 0xda, 0xe3, 0x51, 0x20, 0x2b, 0xb0, 0x24, 0x41,
	0x44, 0x3b, 0xb1, 0x6d, 0x98, 0x0e, 0x3b, 0x94, 0x0a, 0xac, 0x30, 0x62, 0x5f, 0xa6, 0x44, 0x5f,
	0xb4, 0xb3, 0x30, 0x27, 0x54, 0x35, 0x3f, 0x17, 0xaf, 0xf2, 0x73, 0x71, 0x54, 0xc4, 0xac, 0xac,
	0xb9, 0xac, 0x68, 0x12, 0x55, 0xc1, 0x7f, 0xb7, 0x02, 0xc7, 0xd3, 0x6d, 0xf5, 0x0f, 0x1c, 0xf3,
	0xd9, 0x36, 0xf8, 0xb0, 0x9e, 0x07, 0xbf, 0x95, 0xd5, 0xbd, 0x42, 0x91, 0x3f, 0x05, 0x27, 0xd5,
	0x98, 0xe2, 0xc4, 0xe4, 0x1d, 0x58, 0xdc, 0x32, 0xbb, 0xa4, 0x3d, 0xe8, 0x11, 0x4f, 0x7a, 0xfb,
	0x56, 0xea, 0x11, 0x59, 0xd3, 0x48, 0x23, 0xf3, 0xc8, 0xe0, 0x1c, 0x39, 0x79, 0x8f, 0xaf, 0x0a,
	0x8a, 0x14, 0xc3, 0x67, 0xf7, 0xf9, 0xec, 0x13, 0xe1, 0x75, 0xfe, 0x5d, 0x38, 0x1d, 0x82, 0xa0,
	0xc7, 0x64, 0xf4, 0x4a, 0x75, 0xa4, 0xc6, 0xfe, 0x47, 0x95, 0x02, 0x52, 0xb4, 0xe9, 0xfb, 0x70,
	0x0c, 0x5d, 0x35, 0xe5, 0xd7, 0xb5, 0x52, 0x1f, 0xae, 0xe5, 0xf5, 0x21, 0x45, 0xb5, 0x45, 0x4c,
	0xd7, 0x6b, 0xb7, 0x8e, 0xfa, 0xc9, 0x0a, 0xd6, 0xa2, 0xdf, 0xac, 0x44, 0x4e, 0xd5, 0xae, 0xc7,
	0x12, 0x79, 0x9b, 0x46, 0xcf, 0x0a, 0x0e, 0xbe, 0xaa, 0x6e, 0xba, 0x6f, 0x66, 0xb4, 0xb7, 0x50,
	0x0c, 0x9f, 0x87, 0xe7, 0x94, 0x88, 0x42, 0x0a, 0x6b, 0x30, 0xb7, 0x15, 0x78, 0x24, 0x30, 0xbb,
	0xf8, 0x3a, 0xe4, 0xeb, 0x72, 0x01, 0x7f, 0x7c, 0x3b, 0xef, 0xf3, 0x82, 0xe2, 0x88, 0x0f, 0x88,
	0x29, 0xa2, 0x0e, 0xf8, 0xf2, 0xcf, 0xe6, 0xaf, 0x57, 0x60, 0x31, 0x06, 0x30, 0xe0, 0xb9, 0xbe,
	0xef, 0xcb, 0x46, 0x4e, 0x25, 0xf3, 0xed, 0xba, 0x02, 0x55, 0x1d, 0xff, 0xfa, 0x04, 0x4c, 0x0f,
	0x79, 0x1a, 0x6f, 0x1c, 0xa2, 0xb1, 0xd6, 0x14, 0x2f, 0xb8, 0xd7, 0x4e, 0x47, 0xb4, 0xe6, 0xaf,
	0x5b, 0x30, 0xa2, 0xf5, 0x4d, 0x9e, 0x4f, 0xaf, 0x5e, 0x6d, 0x5e, 0x4d, 0xb7, 0xb5, 0xcc, 0xf1,
	0x68, 0x12, 0x47, 0xb0, 0xf9, 0xff, 0xad, 0xc0, 0x02, 0xd6, 0x51, 0xc9, 0x8c, 0xfc, 0x97, 0xa3,
	0x96, 0x56, 0xe2, 0x2d, 0x3d, 0x6c, 0x1f, 0xdc, 0x17, 0x60, 0x26, 0x72, 0x03, 0xf0, 0x63, 0xf1,
	0xcd, 0x20, 0xf4, 0x01, 0xf0, 0x63, 0x60, 0x1d, 0x3f, 0x96, 0xa4, 0x2a, 0x04, 0xeb, 0xf8, 0xcd,
	0x2b, 0xc9, 0xee, 0x94, 0x71, 0x96, 0x8f, 0x63, 0x08, 0xd6, 0xfc, 0x23, 0x16, 0x51, 0x3f, 0xe1,
	0x8a, 0xa2, 0x49, 0x11, 0xb4, 0xc4, 0x45, 0xb7, 0x9c, 0xa4, 0xb5, 0x3a, 0x4a, 0x92, 0xd6, 0x67,
	0x74, 0x47, 0x26, 0x1e, 0x6c, 0x4f, 0x48, 0xcf, 0xe5, 0x2f, 0x27, 0xfa, 0x5a, 0xc8, 0xb6, 0xeb,
	0xb0, 0x14, 0x43, 0x10, 0x36, 0x53, 0x2a, 0x0d, 0x6c, 0x25, 0x95, 0x06, 0xb6, 0xf9, 0x2b, 0x11,
	0x67, 0xf3, 0x9f, 0x91, 0x3f, 0x23, 0xa5, 0x76, 0x39, 0xd1, 0xbc, 0x42, 0x66, 0x2c, 0x87, 0xcc,
	0x88, 0x87, 0x1d, 0xac, 0xc3, 0x3c, 0x96, 0x8b, 0xb7, 0xe9, 0xef, 0xc5, 0x4a, 0x28, 0xe1, 0x4b,
	0xa0, 0xc5, 0x18, 0x16, 0x8b, 0xd8, 0x21, 0x71, 0x8d, 0xad, 0x0f, 0x04, 0xe6, 0x10, 0x1d, 0x17,
	0xba, 0x17, 0xa1, 0x26, 0xa6, 0x05, 0xda, 0xfd, 0xf8, 0x4a, 0x4e, 0x78, 0xdd, 0xf1, 0x06, 0xb5,
	0x33, 0x3e, 0x53, 0x55, 0x7f, 0xe6, 0x81, 0xfc, 0x19, 0x1e, 0x37, 0x28, 0x1a, 0x55, 0x69, 0xe9,
	0x6b, 0xa8, 0x93, 0xe3, 0x32, 0x5b, 0x5a, 0x8c, 0xb8, 0x08, 0x20, 0x2e, 0x58, 0x1a, 0x99, 0x8d,
	0xaa, 0x11, 0x17, 0xf3, 0xab, 0x9a, 0x31, 0xbf, 0xc6, 0x46, 0x99, 0x5f, 0xe9, 0x74, 0xc3, 0xe3,
	0xaa, 0x74, 0xc3, 0xcf, 0xe8, 0xd1, 0xd5, 0xe5, 0x04, 0x4b, 0x46, 0x90, 0xb2, 0xf8, 0x05, 0xff,
	0xf9, 0x90, 0x10, 0xe5, 0x35, 0x3f, 0x67, 0x50, 0x85, 0xc4, 0x78, 0x2d, 0x01, 0x47, 0x3f, 0x58,
	0x1c, 0xd1, 0xe0, 0x65, 0xa8, 0x7f, 0x6a, 0xd0, 0xa5, 0xc3, 0xe8, 0xf5, 0x76, 0x0d, 0x1e, 0x86,
	0x6f, 0x05, 0x26, 0x45, 0x46, 0x3a, 0x2e, 0x6d, 0xe2, 0x67, 0xf3, 0x47, 0x15, 0x78, 0x4e, 0xf5,
	0x8a, 0x37, 0x0c, 0x7b, 0x78, 0x02, 0xa6, 0xa3, 0x1c, 0x91, 0xd8, 0x43, 0x61, 0x94, 0xe5, 0xbe,
	0x31, 0xaf, 0x7e, 0x59, 0x6f, 0xcc, 0x7f, 0x2e, 0xaf, 0x0b, 0xb4, 0xf7, 0xaf, 0x00, 0x4f, 0x73,
	0x4c, 0xda, 0x2c, 0x55, 0xd9, 0xd0, 0x96, 0x59, 0x57, 0xc7, 0xaa, 0x07, 0x7b, 0x7b, 0x3c, 0xaf,
	0x97, 0xf6, 0x16, 0x1c, 0xb7, 0x8d, 0x83, 0x5d, 0xa2, 0xab, 0x90, 0xf8, 0x04, 0x3c, 0xca, 0x00,
	0x36, 0x13, 0x98, 0xcd, 0xbf, 0x3d, 0x06, 0x47, 0x71, 0xba, 0x08, 0xe1, 0x1e, 0xf4, 0x8a, 0x3d,
	0x02, 0xbe, 0x05, 0xd3, 0xde, 0xa0, 0x47, 0xe4, 0xa8, 0xec, 0x6b, 0x0a, 0xb6, 0x29, 0x29, 0xaf,
	0xae, 0x1b, 0x01, 0xe9, 0xb8, 0xde, 0x81, 0x5c, 0xce, 0x8c, 0xf0, 0x29, 0x4a, 0x93, 0x75, 0x68,
	0x1f, 0xb4, 0x1e, 0xe9, 0x18, 0xe6, 0x81, 0x9e, 0xbe, 0x22, 0x7b, 0xaf, 0xf4, 0x87, 0x3e, 0x66,
	0x24, 0xe8, 0x2f, 0x5e, 0xcf, 0xe3, 0x59, 0x70, 0xc2, 0x0f, 0xc3, 0xab, 0xb2, 0xc6, 0xbf, 0x0b,
	0x2b, 0x59, 0x4d, 0xa2, 0x5c, 0x60, 0x1d, 0x95, 0xb9, 0x40, 0x0b, 0x84, 0xb7, 0x43, 0x14, 0x54,
	0x51, 0xe2, 0xf5, 0xac, 0x30, 0x99, 0x59, 0x5f, 0x0a, 0xdf, 0x11, 0x36, 0x1e, 0xc2, 0x92, 0xaa,
	0xa9, 0xd9, 0x91, 0xfa, 0xd2, 0x7b, 0x8f, 0xaa, 0x62, 0xef, 0xf1, 0x9a, 0x6a, 0x68, 0x0b, 0x55,
	0xc0, 0xf7, 0x8e, 0xc0, 0xf1, 0x34, 0x9a, 0x58, 0x7b, 0xf7, 0x41, 0xe3, 0xfc, 0xc0, 0x2c, 0xd5,
	0x72, 0x8c, 0xcc, 0x72, 0x03, 0x83, 0x94, 0x56, 0xa3, 0xbe, 0x62, 0xe8, 0xce, 0xba, 0x97, 0x28,
	0xd1, 0x08, 0xd4, 0x69, 0xff, 0x63, 0x9f, 0xaa, 0x66, 0x5e, 0x93, 0x66, 0x7f, 0x4a, 0x24, 0x50,
	0xc6, 0x0f, 0xcd, 0x0f, 0x63, 0xbf, 0x1b, 0x3f, 0x5d, 0x81, 0x7a, 0xb2, 0x35, 0xf9, 0x03, 0xff,
	0x49, 0x22, 0x40, 0xe9, 0xdb, 0x23, 0x35, 0x27, 0xd6, 0x18, 0x24, 0xd4, 0xf8, 0xb7, 0xe9, 0xaa,
	0x1d, 0x6b, 0x41, 0xe6, 0xe8, 0x1f, 0xfe, 0xd7, 0x9b, 0x6d, 0x58, 0xa4, 0x30, 0x2c, 0x4d, 0xa6,
	0x45, 0xb5, 0x11, 0x7f, 0xb1, 0x4d, 0xf7, 0x05, 0xf7, 0x9c, 0xa1, 0xd1, 0xb3, 0xda, 0xf5, 0x0a,
	0x7b, 0xce, 0x73, 0xcf, 0x89, 0x60, 0xea, 0x55, 0x6d, 0x09, 0xea, 0xfb, 0x0f, 0x06, 0xc1, 0x83,
	0x3d, 0xa9, 0x74, 0x4c, 0x5b, 0x06, 0x6d, 0x7f, 0x93, 0xb0, 0xd4, 0xf2, 0x52, 0xf9, 0x78, 0xf3,
	0x0a, 0xcc, 0xc6, 0x7a, 0x38, 0x07, 0xd3, 0x78, 0xf1, 0xf9, 0x60, 0x1f, 0xe9, 0xf3, 0x9f, 0xb7,
	0x59, 0x46, 0xdf, 0x7a, 0x95, 0xaa, 0xa7, 0xfa, 0xa6, 0xe1, 0x99, 0xa4, 0xe7, 0x47, 0x06, 0xf2,
	0x07, 0x69, 0xff, 0xb7, 0xb3, 0xaa, 0xe4, 0xf1, 0x0c, 0x4f, 0xe9, 0x77, 0x72, 0x1f, 0xa0, 0xef,
	0x91, 0x3d, 0xe2, 0xd1, 0x75, 0x12, 0xb9, 0xb8, 0x9a, 0x49, 0x22, 0xfa, 0xf4, 0xea, 0x66, 0x88,
	0xd5, 0x92, 0x28, 0x3c, 0x2b, 0x2b, 0xfb, 0x79, 0x98, 0x6c, 0x7b, 0x07, 0xba, 0x37, 0x70, 0xe2,
	0x0e, 0xff, 0x13, 0x6d, 0xef, 0xa0, 0x35, 0x70, 0xd2, 0xb1, 0xb8, 0x27, 0x15, 0xb1, 0xb8, 0x5f,
	0x82, 0x7a, 0xdb, 0xf2, 0xfb, 0x3d, 0xe3, 0x20, 0x7c, 0x10, 0x8f, 0xe9, 0xab, 0x6b, 0x58, 0x2e,
	0xde, 0xbe, 0x6b, 0xe7, 0xa1, 0xe6, 0x3e, 0x72, 0x88, 0x97, 0x8a, 0xf0, 0x30, 0xc7, 0x8a, 0xc3,
	0x93, 0xa3, 0x73, 0x00, 0x11, 0xa3, 0xb4, 0x29, 0x18, 0xdf, 0x5f, 0xeb, 0xf5, 0x70, 0x9b, 0xb9,
	0x69, 0x78, 0x81, 0x65, 0xf4, 0xea, 0x55, 0x6a, 0x9c, 0xc4, 0xf8, 0x5b, 0xa8, 0x99, 0x7e, 0xb6,
	0x02, 0x4b, 0x31, 0x8c, 0x43, 0xf5, 0xa3, 0xc2, 0x71, 0x32, 0x49, 0x2f, 0xa5, 0x56, 0xe7, 0x79,
	0xf9, 0xc3, 0x28, 0x76, 0xd3, 0x2c, 0x6f, 0x07, 0x5a, 0xc8, 0x2a, 0xcc, 0x8a, 0x12, 0xf3, 0x53,
	0x09, 0x93, 0x1f, 0x30, 0x08, 0xcc, 0xe4, 0xb1, 0xd5, 0xc9, 0x4c, 0x71, 0x64, 0xab, 0x18, 0x12,
	0x0e, 0x4f, 0xac, 0x7e, 0x77, 0x1c, 0x96, 0x3e, 0x36, 0x3e, 0x37, 0x1c, 0x0e, 0x13, 0x59, 0xc0,
	0xa7, 0x60, 0x06, 0xb3, 0xaf, 0xca, 0x37, 0xc5, 0xbc, 0x88, 0x09, 0xdd, 0x71, 0x98, 0x72, 0x06,
	0xb6, 0x6e, 0xf6, 0x51, 0x9f, 0x8c, 0xb7, 0x26, 0x9d, 0x81, 0xbd, 0xde, 0x1f, 0xf8, 0x2c, 0xad,
	0x3f, 0x4f, 0x8b, 0xbf, 0x7b, 0x10, 0x60, 0x46, 0xc5, 0xf1, 0xd6, 0x0c, 0x2f, 0xbb, 0x41, 0x8b,
	0x9e, 0x55, 0xd6, 0xda, 0x94, 0x64, 0x4f, 0x95, 0x94, 0xec, 0x69, 0xb5, 0x64, 0x9f, 0x81, 0xd9,
	0xae, 0xa1, 0xf7, 0x3d, 0x37, 0x20, 0x26, 0xdd, 0xe0, 0x70, 0x0f, 0xea, 0x99, 0xae, 0xb1, 0x29,
	0x8a, 0xd2, 0xbb, 0xce, 0x99, 0xd4, 0xae, 0x93, 0xae, 0xcb, 0x7c, 0x37, 0x20, 0x20, 0x31, 0xb9,
	0xec, 0x2c, 0x2b, 0x45, 0xcb, 0x58, 0xfb, 0x04, 0xce, 0x9b, 0x9e, 0xeb, 0xfb, 0xa1, 0xf7, 0x68,
	0xcf, 0x1a, 0x12, 0x11, 0x32, 0x57, 0x8e, 0xdf, 0xc1, 0xb3, 0xb0, 0xb7, 0xce, 0x30, 0x68, 0xf4,
	0x27, 0x95, 0x42, 0xd2, 0x44, 0x31, 0x3c, 0x98, 0xc9, 0x3b, 0xb0, 0xf5, 0xa1, 0x63, 0x99, 0x3e,
	0x73, 0x92, 0x1e, 0x6f, 0xd1, 0x51, 0xdd, 0xa1, 0xbf, 0x55, 0xd3, 0xb6, 0xa6, 0x9a, 0xb6, 0xd7,
	0x14, 0x22, 0x54, 0xc6, 0x2d, 0x38, 0x85, 0x24, 0x76, 0x0d, 0xff, 0xd3, 0x38, 0xd4, 0x78, 0x79,
	0xb4, 0x07, 0x3f, 0x05, 0x33, 0xd2, 0x5c, 0x11, 0xf2, 0x18, 0x4d, 0x93, 0xa4, 0xc0, 0x56, 0x53,
	0x02, 0xfb, 0x2e, 0xac, 0x20, 0x85, 0xbc, 0xeb, 0xc9, 0x65, 0x0e, 0x93, 0x9f, 0xf3, 0xee, 0xcb,
	0xf3, 0x87, 0x3b, 0x6c, 0x55, 0x3c, 0x5a, 0x80, 0x07, 0x65, 0xf6, 0x7c, 0x50, 0x66, 0xcf, 0x7f,
	0x08, 0x75, 0xa3, 0xdd, 0x26, 0x6d, 0xdd, 0x36, 0x76, 0xf5, 0x3d, 0xc3, 0x0c, 0x5c, 0x8f, 0x49,
	0xfa, 0xfc, 0xd5, 0x4b, 0xaa, 0x1d, 0x31, 0x3b, 0x5b, 0x26, 0xed, 0x0d, 0xa6, 0x12, 0x70, 0xf4,
	0x0f, 0xfa, 0xa4, 0x35, 0xcf, 0x88, 0x6c, 0x18, 0xbb, 0xb7, 0x19, 0x09, 0xed, 0x65, 0xd0, 0x4c,
	0xc3, 0xd1, 0x45, 0x32, 0x6c, 0xde, 0x40, 0x9c, 0x1d, 0x75, 0xd3, 0x70, 0xb8, 0x80, 0xe0, 0x51,
	0x76, 0x73, 0x35, 0x2e, 0x37, 0x85, 0x42, 0x78, 0x14, 0x16, 0x65, 0x78, 0x21, 0x7f, 0xff, 0xb2,
	0x82, 0x12, 0x7d, 0x87, 0x04, 0x3b, 0x1b, 0x7e, 0x14, 0xf1, 0x38, 0xf7, 0x98, 0xfb, 0x25, 0xa8,
	0x8b, 0xf3, 0x8e, 0x30, 0xae, 0x13, 0x7f, 0x62, 0x24, 0xce, 0x41, 0xc2, 0xc0, 0x4e, 0xaf, 0x80,
	0xf6, 0xc8, 0xb0, 0x02, 0x7d, 0xe0, 0xf8, 0xfc, 0x34, 0x9e, 0x05, 0xc4, 0xe4, 0xaf, 0x8b, 0x16,
	0x68, 0xcd, 0x43, 0xb9, 0x42, 0xeb, 0xc0, 0x55, 0xf2, 0x98, 0x53, 0xce, 0x51, 0x00, 0x43, 0xdb,
	0x8f, 0x29, 0x01, 0x7e, 0xa0, 0x70, 0x09, 0x31, 0xd7, 0xd5, 0xba, 0x60, 0xc7, 0xf6, 0x23, 0x75,
	0xd0, 0x7c, 0x4b, 0xd1, 0xef, 0x72, 0x5b, 0xf1, 0xef, 0x57, 0xe1, 0x18, 0x43, 0xdd, 0x22, 0x81,
	0x1c, 0xf7, 0x46, 0xc4, 0x09, 0x4e, 0x06, 0x41, 0x62, 0xdc, 0x1b, 0x6f, 0xd5, 0x12, 0x81, 0x8f,
	0x9e, 0xd5, 0x8b, 0xb8, 0xd4, 0x34, 0x3b, 0x52, 0x72, 0x9a, 0x4d, 0x28, 0xa7, 0x59, 0xf3, 0x0d,
	0x35, 0x37, 0x0a, 0x05, 0xf2, 0x9b, 0x70, 0x42, 0x85, 0x27, 0x0c, 0x96, 0x77, 0xa0, 0x41, 0x67,
	0x83, 0x08, 0x3a, 0xa4, 0x60, 0xe9, 0x54, 0xeb, 0x98, 0x69, 0x38, 0x22, 0xd6, 0x90, 0x4c, 0xa3,
	0xf9, 0xdf, 0x57, 0xe1, 0x79, 0x46, 0xfc, 0xbe, 0x1b, 0x58, 0x7b, 0x07, 0x42, 0x18, 0x45, 0x8a,
	0xfb, 0xc2, 0x13, 0x90, 0x8b, 0xb0, 0x40, 0x07, 0x5f, 0x97, 0xb4, 0xac, 0x2f, 0x4e, 0xe9, 0x68,
	0xc5, 0xad, 0x50, 0xd5, 0x3e, 0xab, 0x28, 0x21, 0xe9, 0x61, 0x9c, 0x28, 0x39, 0x8c, 0x93, 0xea,
	0x61, 0x7c, 0x2f, 0x97, 0x63, 0x85, 0xa3, 0x79, 0x0e, 0x9a, 0x39, 0xe8, 0x42, 0xdb, 0xfc, 0xa8,
	0x0a, 0xcb, 0x0c, 0x8c, 0x2b, 0x45, 0x11, 0x69, 0xa5, 0x70, 0x3c, 0x14, 0xcb, 0x73, 0x55, 0xb1,
	0x3c, 0x6b, 0x0d, 0x98, 0x4a, 0xc4, 0x99, 0x0b, 0x7f, 0xff, 0x35, 0x59, 0xd5, 0x9a, 0xaf, 0x2b,
	0x39, 0x58, 0x38, 0x3e, 0x1f, 0x41, 0x43, 0x81, 0x26, 0x26, 0x9b, 0x7a, 0xa9, 0xac, 0x64, 0xc5,
	0x42, 0xfa, 0xed, 0x23, 0x70, 0x52, 0x1a, 0x6d, 0x76, 0x62, 0xb6, 0xed, 0x19, 0x8e, 0x6f, 0x05,
	0x96, 0xeb, 0x94, 0x32, 0xa9, 0x13, 0x36, 0x4e, 0x35, 0x65, 0xe3, 0xac, 0xc0, 0x24, 0x06, 0xe5,
	0xc4, 0x91, 0x14, 0x3f, 0x29, 0xb3, 0xc4, 0x3a, 0x60, 0xa2, 0x7c, 0xe1, 0x02, 0x50, 0xc3, 0x72,
	0x21, 0x76, 0x74, 0x1e, 0xb3, 0xe3, 0x3e, 0xdd, 0x75, 0x22, 0x58, 0xae, 0xef, 0x6a, 0xac, 0xe2,
	0x81, 0x13, 0xc2, 0x5e, 0x86, 0x25, 0x41, 0x36, 0x70, 0x25, 0x1b, 0x80, 0x5b, 0xe3, 0x0b, 0x58,
	0xb7, 0xed, 0x86, 0x66, 0x00, 0xed, 0x02, 0xa5, 0x61, 0x39, 0x1d, 0xdd, 0x75, 0x70, 0x5c, 0x41,
	0x14, 0x3d, 0x70, 0xb4, 0x0f, 0x61, 0x2e, 0x0c, 0x36, 0xcb, 0xfc, 0xdc, 0xa6, 0x32, 0xd3, 0x6d,
	0x70, 0x85, 0x22, 0xce, 0x22, 0x78, 0x2a, 0x5a, 0x43, 0xfa, 0x15, 0x1f, 0xdc, 0xe9, 0x12, 0xd2,
	0x0b, 0xa3, 0x48, 0xef, 0x4c, 0x69, 0xe9, 0x9d, 0x2d, 0x29, 0xbd, 0x73, 0xa5, 0xb7, 0xc7, 0xf3,
	0xaa, 0x89, 0x5c, 0xde, 0xfe, 0xaf, 0x95, 0xb4, 0xff, 0x9b, 0xef, 0xe6, 0xc9, 0x6c, 0xe1, 0xfc,
	0x39, 0x0b, 0x67, 0xb2, 0xb1, 0x85, 0x7a, 0xfb, 0x1b, 0x63, 0x70, 0x9c, 0x41, 0x09, 0xa1, 0x0a,
	0x2d, 0x8f, 0xdc, 0xa4, 0x8f, 0xab, 0xb0, 0x28, 0x7a, 0x96, 0x9e, 0x13, 0x42, 0xf0, 0x36, 0xa3,
	0xa9, 0xf1, 0x8c, 0x56, 0x1c, 0xe9, 0xba, 0x61, 0x22, 0x76, 0xdd, 0xa0, 0xbd, 0x0a, 0x47, 0x03,
	0x57, 0x18, 0xae, 0x72, 0x17, 0xb8, 0xdf, 0xa0, 0x16, 0xb8, 0xdc, 0xe8, 0x94, 0xfa, 0x70, 0xd8,
	0xbb, 0x53, 0xb5, 0x06, 0x83, 0x51, 0x8c, 0xfd, 0x19, 0x95, 0xb1, 0xdf, 0x7c, 0x2b, 0x6b, 0x48,
	0xcb, 0xb8, 0xf8, 0xa8, 0x31, 0x85, 0xb8, 0x6c, 0xc0, 0x51, 0x06, 0x70, 0x8f, 0xe9, 0x61, 0x3c,
	0x0d, 0xcc, 0x95, 0x94, 0xbc, 0xf4, 0x33, 0xcd, 0xff, 0xa0, 0xa2, 0xa2, 0x87, 0x19, 0x2f, 0x58,
	0x33, 0xfb, 0xbc, 0x08, 0xad, 0xa7, 0x99, 0x20, 0x82, 0x1a, 0x61, 0xc2, 0x55, 0xcb, 0x4e, 0xb8,
	0x77, 0x70, 0xdb, 0x7b, 0x87, 0xa0, 0xbd, 0x84, 0x07, 0x53, 0x65, 0xd6, 0x87, 0xe6, 0xcd, 0x0c,
	0x64, 0xda, 0x9d, 0xf2, 0x67, 0x49, 0xff, 0xe5, 0x18, 0x4e, 0x5b, 0xa1, 0x59, 0xef, 0xae, 0x45,
	0xa7, 0xad, 0xe1, 0x65, 0xd8, 0x93, 0x65, 0xfb, 0x49, 0x1d, 0x76, 0x8c, 0xa5, 0x0f, 0x3b, 0x3e,
	0x80, 0x39, 0x46, 0x20, 0x76, 0xf3, 0x59, 0x70, 0x71, 0xca, 0x6e, 0x46, 0xc2, 0x5b, 0xd1, 0x63,
	0x30, 0xe9, 0xef, 0x5b, 0x7d, 0xbd, 0x6b, 0x84, 0xef, 0xf3, 0xf7, 0xad, 0xfe, 0x5d, 0xe3, 0x59,
	0x45, 0x4d, 0x3c, 0xab, 0x8c, 0x80, 0x54, 0x62, 0xde, 0x82, 0xda, 0x9c, 0xf9, 0xa0, 0x68, 0x80,
	0x0a, 0xa7, 0xd9, 0x8b, 0xf0, 0x42, 0x3e, 0x05, 0x31, 0xdd, 0xde, 0x87, 0xd3, 0x7c, 0x3e, 0xd2,
	0xc2, 0xf5, 0x81, 0x47, 0xf9, 0x40, 0xa7, 0xb9, 0xbc, 0x7f, 0x2b, 0xc8, 0x4a, 0x9e, 0x4f, 0x40,
	0x24, 0xfe, 0x18, 0xd8, 0x5c, 0xab, 0x28, 0x36, 0x80, 0x32, 0x78, 0xf3, 0x1d, 0x78, 0x0e, 0xe7,
	0xeb, 0xed, 0x54, 0xc8, 0xd9, 0xc2, 0xc6, 0xbc, 0x9f, 0x83, 0x8c, 0xcf, 0x5f, 0xe4, 0x59, 0xcb,
	0xa7, 0x3c, 0x58, 0xd1, 0xf4, 0xfc, 0xde, 0x24, 0x68, 0x7c, 0x03, 0x86, 0x5e, 0x72, 0x7c, 0x95,
	0xba, 0xca, 0x26, 0x83, 0x94, 0xec, 0xe8, 0xb8, 0xd2, 0xbb, 0x80, 0x9d, 0xb0, 0x4e, 0x0c, 0x6d,
	0x71, 0x03, 0x18, 0xa9, 0xd1, 0x6a, 0xc2, 0x76, 0x7f, 0x09, 0xea, 0x2c, 0x34, 0xb2, 0x4e, 0xdb,
	0x68, 0xba, 0xb6, 0x6d, 0x05, 0x68, 0xd1, 0xd5, 0x58, 0xf9, 0x83, 0xb0, 0x98, 0x3d, 0x9e, 0xe8,
	0x38, 0xae, 0xc7, 0x77, 0x7b, 0xbe, 0x1c, 0x55, 0xa4, 0xc6, 0x2b, 0x58, 0xb2, 0x5a, 0x76, 0x14,
	0x2d, 0x9b, 0xfa, 0x47, 0x12, 0xa6, 0x7e, 0x32, 0xb6, 0xe3, 0x44, 0x3a, 0xb6, 0xe3, 0x49, 0x80,
	0xae, 0xa1, 0x77, 0x89, 0xd1, 0xa3, 0x0a, 0x91, 0xdb, 0x6e, 0xd3, 0x5d, 0xe3, 0x2e, 0x2f, 0xa0,
	0xdc, 0xeb, 0xba, 0x41, 0xbf, 0x37, 0xe8, 0xe8, 0x46, 0xbb, 0x8d, 0x8b, 0x13, 0x60, 0xd1, 0x5a,
	0x9b, 0x1a, 0x28, 0x0b, 0xec, 0xd1, 0x5b, 0xcc, 0xbe, 0x9b, 0x1e, 0xc5, 0xbe, 0xab, 0x39, 0xe4,
	0xd1, 0x5a, 0xa6, 0x89, 0x07, 0x25, 0x66, 0xf4, 0xcc, 0x28, 0x33, 0x7a, 0xb6, 0xf4, 0x8c, 0x9e,
	0x2b, 0x39, 0xa3, 0xe7, 0xd5, 0x2b, 0xb1, 0x6a, 0x69, 0xad, 0x29, 0xcf, 0xd1, 0xd4, 0x6b, 0x76,
	0x3d, 0x6b, 0xcd, 0x56, 0xd8, 0x8e, 0x0b, 0x2a, 0xdb, 0xf1, 0x3e, 0x2c, 0x0c, 0x3b, 0xfd, 0x41,
	0xb8, 0x78, 0xb1, 0xa1, 0xd1, 0xb2, 0xd3, 0x8e, 0xdf, 0xd9, 0x7c, 0x88, 0x8b, 0x17, 0x1f, 0x17,
	0x8a, 0x2c, 0x15, 0xc4, 0x0f, 0x8e, 0x17, 0x13, 0x07, 0xc7, 0xb7, 0x60, 0x9e, 0x7d, 0xcc, 0xdf,
	0x6d, 0xef, 0x71, 0x79, 0x5d, 0xca, 0xbc, 0x58, 0xa1, 0x5f, 0xba, 0xe1, 0xba, 0xfc, 0x25, 0xcb,
	0x2c, 0x45, 0xdb, 0xda, 0x6d, 0xef, 0xb1, 0x85, 0xea, 0xd5, 0xd4, 0x5c, 0x2c, 0xd4, 0x7b, 0x6f,
	0xe3, 0x46, 0x30, 0x42, 0x11, 0xbb, 0xb9, 0xa2, 0xf3, 0xe3, 0xe6, 0x36, 0xea, 0x8e, 0x3b, 0x24,
	0x48, 0x79, 0xc6, 0x16, 0xee, 0xc5, 0xb3, 0xde, 0xc3, 0x34, 0x6f, 0xe6, 0x50, 0xa5, 0xcd, 0x62,
	0x99, 0x2d, 0xfc, 0x40, 0x4f, 0x92, 0x9e, 0xa5, 0xa5, 0xa1, 0xbd, 0xf5, 0x4e, 0x44, 0xe5, 0xae,
	0xd5, 0xe9, 0x6e, 0x7a, 0x96, 0xeb, 0x51, 0xad, 0x2e, 0xd2, 0x5b, 0xe3, 0x68, 0x30, 0x05, 0x81,
	0x8a, 0x75, 0x0a, 0x4f, 0xd6, 0x7c, 0xb9, 0x09, 0x29, 0x64, 0x6c, 0x42, 0xc2, 0x1b, 0xa1, 0x92,
	0xf6, 0x46, 0x68, 0x9e, 0x40, 0x93, 0x8f, 0x76, 0x24, 0xf4, 0x20, 0x0e, 0xf8, 0x65, 0x51, 0xf3,
	0x07, 0x90, 0x55, 0x7b, 0xc8, 0x1e, 0xd6, 0xda, 0x36, 0x4c, 0x78, 0xcc, 0x4d, 0x19, 0x2f, 0xf4,
	0x55, 0x6f, 0x03, 0x33, 0x5b, 0x12, 0x51, 0x47, 0x57, 0x67, 0xa4, 0xa5, 0x1d, 0xc0, 0x92, 0x8f,
	0x61, 0x94, 0x70, 0xd2, 0xf3, 0x68, 0xe6, 0xdc, 0x71, 0xe4, 0xce, 0x93, 0x7d, 0xe3, 0x1e, 0xd2,
	0xa2, 0x3d, 0xe1, 0xb5, 0x9a, 0xcf, 0x23, 0x30, 0xf1, 0x72, 0x7e, 0x55, 0x7e, 0x1b, 0x66, 0x51,
	0x2e, 0xe9, 0x94, 0xf4, 0x31, 0x26, 0x45, 0xa9, 0x7b, 0x69, 0x14, 0x68, 0xfa, 0xb7, 0xaf, 0x7d,
	0x1b, 0x16, 0x24, 0x1f, 0x70, 0xe4, 0xd1, 0x44, 0xa6, 0x7f, 0x45, 0x76, 0xfb, 0x53, 0xfe, 0xe0,
	0x75, 0x23, 0x51, 0xd2, 0xf8, 0xbf, 0xc7, 0xa0, 0x96, 0x60, 0x65, 0xf1, 0xe1, 0xc6, 0x45, 0x58,
	0xc0, 0x4b, 0x41, 0xdf, 0xfa, 0x9c, 0xe0, 0xcd, 0x20, 0x77, 0x35, 0xae, 0xf1, 0x8a, 0x2d, 0xeb,
	0x73, 0xc2, 0x6f, 0x07, 0xe5, 0xbb, 0x45, 0x1e, 0xeb, 0x3e, 0xbc, 0x5b, 0x6c, 0xc2, 0x9c, 0xd9,
	0x1f, 0xe8, 0x03, 0xdf, 0xe8, 0x10, 0xbd, 0xdf, 0xe7, 0x09, 0x74, 0xc7, 0x5a, 0x33, 0x66, 0x7f,
	0xf0, 0x90, 0x96, 0x6d, 0xf6, 0xed, 0xf8, 0x54, 0x3d, 0x92, 0x98, 0xaa, 0x74, 0x15, 0x1b, 0xb2,
	0x75, 0xb7, 0x4b, 0x0c, 0x6e, 0x25, 0x8e, 0xb5, 0xa0, 0x3b, 0x7c, 0x80, 0x25, 0xa9, 0x3b, 0xbd,
	0xc9, 0xf4, 0x9d, 0x5e, 0x4c, 0xfb, 0x4d, 0x25, 0xb4, 0x5f, 0xca, 0xbe, 0x9d, 0x1e, 0xd5, 0xbe,
	0xbd, 0x14, 0xb2, 0x4a, 0x32, 0x0f, 0xb8, 0xad, 0x58, 0xe7, 0x15, 0x92, 0x7d, 0xf0, 0x3e, 0x3c,
	0x67, 0x0a, 0xd7, 0xe9, 0xb6, 0x9e, 0x66, 0xf1, 0x0c, 0xcf, 0x30, 0x10, 0xc1, 0x6c, 0xc4, 0x99,
	0xdd, 0xf8, 0xed, 0x0a, 0x34, 0xb2, 0x85, 0x56, 0xe9, 0x0a, 0x79, 0x11, 0x16, 0x58, 0x17, 0x6d,
	0x62, 0x47, 0x9c, 0xe4, 0x97, 0xc0, 0x35, 0x5a, 0xb1, 0x41, 0xec, 0x90, 0x9d, 0x27, 0x01, 0x28,
	0xd8, 0xee, 0x60, 0x6f, 0x0f, 0x0f, 0x20, 0xc7, 0x5a, 0xd3, 0x36, 0xb1, 0x6f, 0xb0, 0x02, 0xed,
	0x75, 0x58, 0xee, 0x0e, 0x3a, 0xa4, 0x4f, 0x87, 0x73, 0xcf, 0x33, 0x98, 0x8a, 0x8c, 0x5e, 0x78,
	0x8f, 0xb7, 0x8e, 0x8a, 0xda, 0xdb, 0x72, 0x65, 0xe3, 0x87, 0x15, 0xa8, 0x27, 0x25, 0x35, 0x5f,
	0x45, 0x9f, 0x81, 0x59, 0x21, 0xa0, 0x54, 0x4e, 0xb0, 0xb9, 0x28, 0xb4, 0x4c, 0x74, 0xd2, 0x23,
	0x37, 0x36, 0xea, 0xc8, 0x25, 0x66, 0xc1, 0x78, 0x6a, 0x0b, 0xb7, 0x2d, 0xdd, 0xb0, 0xd8, 0x23,
	0xec, 0xfd, 0xf2, 0x77, 0xb9, 0x43, 0x05, 0x55, 0x8c, 0xd6, 0x69, 0x72, 0x93, 0x5c, 0x4f, 0x2f,
	0x7e, 0x0b, 0x58, 0x25, 0x1d, 0x40, 0x8c, 0x78, 0xe8, 0x12, 0x2e, 0xb7, 0xe1, 0x86, 0x94, 0x8a,
	0x4d, 0xb9, 0xbd, 0xec, 0xd7, 0x94, 0xa8, 0xb8, 0x1e, 0x95, 0x78, 0x20, 0xf3, 0x93, 0x78, 0x90,
	0x70, 0x87, 0x04, 0x68, 0x97, 0xdc, 0x24, 0x7e, 0x60, 0xf1, 0xe0, 0x85, 0x5f, 0x9c, 0xa3, 0xef,
	0xe6, 0x91, 0x47, 0x33, 0x24, 0x53, 0xd6, 0x9a, 0x8b, 0xb0, 0xc0, 0x86, 0xc2, 0xdf, 0x76, 0x5b,
	0x64, 0xd7, 0x75, 0x99, 0x7f, 0xf5, 0xcf, 0x54, 0x92, 0xa5, 0x94, 0xce, 0x75, 0x68, 0x0c, 0x6d,
	0x96, 0x4a, 0xc2, 0x63, 0x65, 0x54, 0xe9, 0xe9, 0x7b, 0xc4, 0x08, 0x70, 0x93, 0x44, 0x7b, 0xbe,
	0x3c, 0x8c, 0x70, 0xd6, 0xfb, 0x83, 0xdb, 0x58, 0xab, 0x5d, 0x85, 0xe5, 0x34, 0x6e, 0xe0, 0xf6,
	0x5d, 0xbc, 0x96, 0xd1, 0xe2, 0x78, 0xdb, 0x6e, 0xdf, 0x6d, 0xfe, 0xff, 0x55, 0xbc, 0x62, 0xda,
	0x30, 0x0e, 0x76, 0x49, 0xdc, 0xdd, 0x2b, 0x77, 0xdf, 0xaf, 0x34, 0xee, 0xab, 0x87, 0x67, 0xdc,
	0xff, 0xd5, 0xbd, 0x25, 0xba, 0x9e, 0xcd, 0xd1, 0x42, 0x83, 0xf5, 0x63, 0x38, 0x95, 0x85, 0x2b,
	0x2c, 0xd7, 0x97, 0xa0, 0x8e, 0xae, 0x8c, 0x7d, 0xe2, 0xed, 0xb9, 0x9e, 0x1d, 0xa5, 0x9b, 0xe1,
	0xe5, 0x9b, 0xa2, 0xb8, 0xf9, 0xfb, 0x55, 0x38, 0x86, 0x59, 0x20, 0x37, 0x79, 0x16, 0x00, 0xae,
	0xec, 0xf1, 0x16, 0x96, 0x05, 0x49, 0x8d, 0x79, 0xe6, 0xe0, 0x26, 0x9c, 0x56, 0x6c, 0x48, 0xde,
	0x39, 0xab, 0xb0, 0xb8, 0x4f, 0x3c, 0x87, 0xf4, 0xe2, 0xd0, 0x5c, 0x65, 0x2e, 0xf0, 0x2a, 0x19,
	0xfe, 0x05, 0x98, 0x37, 0x5d, 0xbb, 0xef, 0x3a, 0x74, 0xb8, 0xe4, 0x67, 0xf3, 0x61, 0x29, 0x7b,
	0x36, 0xff, 0x57, 0x67, 0x48, 0xdf, 0x50, 0xf3, 0xb1, 0x4c, 0x0e, 0x2e, 0x15, 0x9e, 0x38, 0x6d,
	0xf9, 0x10, 0xce, 0xac, 0x0b, 0x8e, 0x08, 0x8a, 0x51, 0xde, 0x35, 0xf4, 0x0a, 0x4b, 0x33, 0xb3,
	0xa2, 0x60, 0x66, 0xd3, 0x2f, 0xa2, 0x85, 0xba, 0x54, 0x1e, 0x74, 0x7b, 0x17, 0x47, 0x7c, 0x36,
	0x1a, 0xf1, 0x8d, 0x5d, 0x3a, 0x2e, 0xf1, 0xe1, 0xb6, 0x77, 0x71, 0xac, 0xe7, 0xe5, 0xb1, 0xde,
	0xd8, 0x6d, 0x7e, 0x13, 0x8e, 0xe1, 0xf1, 0xe6, 0x8e, 0xff, 0xc8, 0x0a, 0xcc, 0x6e, 0xe4, 0x5d,
	0xf9, 0x7e, 0x22, 0x7f, 0xb9, 0x2a, 0x28, 0x4f, 0x02, 0x17, 0x53, 0x3f, 0x62, 0xbe, 0xf2, 0x37,
	0xd4, 0xb4, 0x0b, 0x79, 0xfe, 0x00, 0x4e, 0xa8, 0xf0, 0xc4, 0xf4, 0xb9, 0x02, 0x4b, 0xe2, 0xf8,
	0x76, 0xc8, 0xeb, 0x65, 0x32, 0x9a, 0x19, 0x43, 0xc5, 0x4b, 0xf8, 0x44, 0x43, 0x22, 0xaf, 0xb8,
	0xa8, 0x93, 0xd5, 0x43, 0xea, 0x64, 0x49, 0x77, 0xa9, 0x93, 0xc9, 0x4e, 0xc6, 0x3d, 0xa6, 0x3e,
	0x81, 0xa5, 0x78, 0x35, 0xca, 0xd2, 0xdb, 0x70, 0x5c, 0xd5, 0x79, 0x79, 0x59, 0x5d, 0x4e, 0x73,
	0x80, 0x2d, 0xb0, 0xff, 0x8e, 0x82, 0x24, 0xcf, 0x16, 0x79, 0x22, 0x49, 0x32, 0x9d, 0xc0, 0xb9,
	0x34, 0x5f, 0x56, 0x4c, 0x45, 0x29, 0xfb, 0xfe, 0xf5, 0x24, 0xa7, 0x62, 0xbe, 0x60, 0xbb, 0x9e,
	0xd5, 0x8e, 0xc7, 0x73, 0x07, 0x5e, 0x24, 0x5e, 0x15, 0xaa, 0x70, 0x29, 0xa7, 0x7e, 0x50, 0x85,
	0x93, 0x37, 0x2d, 0x3f, 0xf0, 0xac, 0xdd, 0x41, 0x40, 0xda, 0x58, 0xbf, 0x63, 0xf4, 0x2c, 0x31,
	0xc6, 0xeb, 0x09, 0x41, 0x56, 0xf9, 0x2f, 0xc9, 0x14, 0x2c, 0x2f, 0x18, 0x18, 0xbd, 0x2d, 0x46,
	0x47, 0x8c, 0xb3, 0x46, 0x60, 0x3e, 0x7c, 0x5d, 0xc9, 0x33, 0x56, 0x71, 0x6f, 0xe1, 0xaf, 0x15,
	0x10, 0x4b, 0x35, 0x27, 0x7a, 0xaf, 0xc9, 0xfc, 0xa3, 0xe6, 0x5c, 0xf9, 0x27, 0xdd, 0x0d, 0x59,
	0xbe, 0xfe, 0xd9, 0xc0, 0x32, 0xf7, 0x79, 0xc8, 0x2a, 0x7e, 0x88, 0x38, 0x63, 0xf9, 0x9f, 0xd0,
	0xb2, 0x0d, 0xb7, 0x4d, 0x9a, 0x6f, 0xc0, 0x5c, 0x8c, 0x06, 0x7b, 0xc2, 0xc9, 0xe7, 0x48, 0xfd,
	0xc7, 0xd8, 0x0f, 0x2e, 0x4b, 0x61, 0x90, 0x08, 0xca, 0xaa, 0x7a, 0xb5, 0xf9, 0x3b, 0x95, 0x3c,
	0x4e, 0x51, 0x51, 0x58, 0x82, 0x23, 0xcc, 0xc7, 0x1b, 0x97, 0x23, 0xfe, 0x83, 0xca, 0x31, 0xcf,
	0x8c, 0x6f, 0xfb, 0x1d, 0x7c, 0x2c, 0x35, 0xc5, 0x0a, 0x36, 0xfc, 0x8e, 0xf6, 0x16, 0xac, 0x78,
	0x6e, 0xaf, 0x67, 0x39, 0x1d, 0xdd, 0xe3, 0x79, 0x80, 0x74, 0x8f, 0x7c, 0x36, 0xb0, 0xbc, 0xf0,
	0x4a, 0x7b, 0x19, 0xeb, 0x31, 0x4d, 0x50, 0x0b, 0x6b, 0xe9, 0x3c, 0x66, 0xe6, 0x1a, 0x9a, 0x3a,
	0x21, 0x16, 0xbf, 0xe5, 0xd6, 0xba, 0xcc, 0x55, 0x89, 0x5b, 0x55, 0xbc, 0xa6, 0xb9, 0x0b, 0x27,
	0xd2, 0xed, 0x8f, 0x14, 0xd6, 0x61, 0x8c, 0x33, 0x5d, 0xfb, 0xb3, 0xbe, 0x51, 0x22, 0xc2, 0xfe,
	0xa9, 0x2c, 0x5c, 0xa1, 0xbc, 0xce, 0xc0, 0xac, 0x42, 0x69, 0xcd, 0x0c, 0x25, 0x6d, 0xf5, 0xef,
	0x57, 0x54, 0x4d, 0x88, 0x54, 0x56, 0x31, 0x09, 0x89, 0x13, 0xd5, 0x43, 0xe6, 0x44, 0x49, 0xed,
	0x76, 0x46, 0xc5, 0x89, 0xb8, 0x86, 0xbb, 0x0d, 0x2b, 0x69, 0x90, 0x28, 0x11, 0x7d, 0x96, 0x76,
	0xab, 0x0d, 0x13, 0x6a, 0xed, 0x51, 0x06, 0x1d, 0xda, 0xc6, 0x1f, 0x87, 0xc5, 0x6c, 0x95, 0x36,
	0x12, 0x53, 0x44, 0x7b, 0x24, 0x7d, 0xf6, 0x81, 0x8a, 0x3f, 0xb1, 0x7c, 0xef, 0x45, 0x23, 0x7d,
	0x3d, 0x9b, 0xc2, 0x93, 0x71, 0x38, 0xee, 0xf5, 0xf8, 0x2f, 0x2a, 0x70, 0x0e, 0xf7, 0x3a, 0x37,
	0x98, 0x2a, 0xdd, 0x76, 0xd3, 0x28, 0xd8, 0xd4, 0x58, 0xfc, 0x5a, 0x6c, 0xaa, 0x19, 0x05, 0xae,
	0x95, 0x34, 0xb4, 0xf4, 0x64, 0x12, 0x35, 0x34, 0x33, 0x05, 0x8f, 0xc3, 0x54, 0x7b, 0xe8, 0xcb,
	0xb6, 0xe2, 0x64, 0x7b, 0xe8, 0xb3, 0xaa, 0x17, 0xa1, 0x46, 0xab, 0xda, 0xc4, 0x37, 0x3d, 0xab,
	0x2f, 0x45, 0xe8, 0x9e, 0x6f, 0x0f, 0xfd, 0x9b, 0x51, 0xe9, 0x21, 0xf9, 0x90, 0x37, 0xd7, 0x4b,
	0x74, 0xbb, 0x90, 0xbf, 0x1b, 0x70, 0xa1, 0x90, 0xc8, 0x08, 0x93, 0x7a, 0x11, 0x16, 0xd6, 0x82,
	0x9e, 0xe1, 0xcb, 0x39, 0xc1, 0x9b, 0xdb, 0xc9, 0x42, 0x4a, 0xac, 0x8c, 0xd9, 0x15, 0xa6, 0x3c,
	0x94, 0xd0, 0xc3, 0x79, 0xfb, 0x1f, 0x56, 0x60, 0x49, 0x2a, 0x57, 0xd9, 0x3a, 0x4f, 0x46, 0x59,
	0x7b, 0x1d, 0x8e, 0xf1, 0x4b, 0xae, 0x0e, 0x71, 0xb8, 0xbf, 0xa2, 0x3b, 0x74, 0xf4, 0x7d, 0x72,
	0x20, 0xee, 0xcb, 0x97, 0x58, 0xf5, 0x1d, 0xac, 0x7d, 0x30, 0x74, 0x3e, 0x22, 0x07, 0x7e, 0x73,
	0x59, 0xd1, 0x1e, 0x7c, 0xf4, 0xae, 0xed, 0xd8, 0x5b, 0x2c, 0x90, 0x48, 0x9f, 0x87, 0x20, 0x28,
	0xba, 0xa8, 0x7e, 0x16, 0xae, 0xa4, 0x37, 0xa3, 0xd8, 0x0f, 0xb1, 0x20, 0x82, 0x27, 0x93, 0x51,
	0x5c, 0xf0, 0x69, 0x3f, 0x46, 0xb3, 0x11, 0x81, 0x1f, 0xf8, 0xcf, 0xe6, 0xab, 0xa9, 0xbe, 0x16,
	0x8a, 0xe0, 0x0a, 0x2c, 0x27, 0x50, 0xc4, 0xcc, 0xfe, 0xf3, 0x0a, 0x2c, 0x86, 0x55, 0x28, 0xa6,
	0x7f, 0x7d, 0x59, 0x77, 0x35, 0xdd, 0xd9, 0x52, 0x51, 0x7a, 0x13, 0x38, 0x82, 0x79, 0xff, 0xba,
	0x02, 0x2b, 0x61, 0x5d, 0x72, 0x8e, 0x7c, 0xd5, 0x38, 0xb8, 0x05, 0x4b, 0xfe, 0x81, 0x63, 0xea,
	0x1e, 0xe9, 0xc7, 0x96, 0xb0, 0x23, 0xd9, 0x37, 0x7d, 0xf1, 0xae, 0xb5, 0x16, 0x7c, 0xf9, 0x27,
	0x5b, 0xb9, 0xde, 0xcc, 0x60, 0x40, 0x99, 0x40, 0x2a, 0x4a, 0x44, 0xc1, 0xda, 0xff, 0xbc, 0x02,
	0xcb, 0x37, 0x5d, 0xcf, 0x36, 0x9c, 0x60, 0xc7, 0x8e, 0xc7, 0x40, 0x7e, 0x13, 0x56, 0xda, 0xbc,
	0x26, 0x3b, 0x98, 0x98, 0xc0, 0x94, 0x83, 0x89, 0x1d, 0x12, 0xe3, 0x9b, 0xaf, 0x2b, 0x5b, 0x56,
	0x26, 0x42, 0x9a, 0x02, 0xed, 0x0b, 0x47, 0x48, 0xbb, 0x06, 0xb5, 0x90, 0x6c, 0xe9, 0x7c, 0xff,
	0x9f, 0xc6, 0x91, 0x30, 0x69, 0x51, 0xc4, 0x55, 0x75, 0xd2, 0xa2, 0xf6, 0xae, 0xee, 0x9b, 0x5d,
	0x62, 0x1b, 0xab, 0x21, 0x72, 0x6b, 0x2e, 0x64, 0x35, 0x23, 0xfc, 0x47, 0x55, 0xd0, 0xf8, 0x40,
	0xee, 0xd8, 0x37, 0x77, 0xc5, 0x25, 0x60, 0xf6, 0x5c, 0xb8, 0x09, 0x35, 0x93, 0x78, 0x64, 0xd7,
	0x73, 0x75, 0xe1, 0x45, 0xc1, 0xed, 0xcc, 0xe8, 0xab, 0x83, 0xee, 0xc0, 0x33, 0x56, 0xd7, 0x39,
	0x14, 0x3a, 0x52, 0xcc, 0x99, 0xf2, 0x4f, 0xed, 0x2d, 0x98, 0x71, 0x3a, 0x41, 0x48, 0x81, 0x1f,
	0xcd, 0xaf, 0x24, 0x28, 0xdc, 0xef, 0x04, 0x88, 0x3d, 0xed, 0x88, 0x3f, 0x29, 0xe6, 0x67, 0xae,
	0x1f, 0x62, 0x8e, 0x2b, 0x31, 0x3f, 0x71, 0x7d, 0x81, 0xf9, 0x99, 0xf8, 0x53, 0xbb, 0x07, 0x67,
	0x70, 0x9f, 0xe1, 0xa7, 0x1f, 0x0d, 0xe1, 0x03, 0x63, 0x74, 0xb4, 0x78, 0x5e, 0x00, 0x26, 0x5f,
	0x0e, 0x71, 0x4e, 0xe5, 0xba, 0x26, 0x51, 0x6d, 0x9f, 0x60, 0x68, 0x19, 0x6d, 0x9f, 0x40, 0x09,
	0x1d, 0x2e, 0xc7, 0xe9, 0xb4, 0xcb, 0x78, 0xef, 0xf1, 0xd7, 0x56, 0xed, 0xf3, 0xcc, 0x64, 0xe1,
	0x11, 0x3d, 0x7f, 0x1a, 0x61, 0xf5, 0x31, 0xec, 0xf2, 0x82, 0x54, 0x75, 0xd7, 0xf5, 0x83, 0x7b,
	0x7d, 0xed, 0x13, 0xd0, 0x02, 0xa3, 0xaf, 0xb7, 0xc9, 0xd0, 0x32, 0x49, 0x18, 0x2e, 0x68, 0x32,
	0xf3, 0xfa, 0x75, 0xdb, 0xe8, 0xdf, 0x64, 0xb0, 0x22, 0x5a, 0x50, 0x3d, 0x48, 0x94, 0xc8, 0x6e,
	0x42, 0x53, 0x65, 0xdd, 0x84, 0xae, 0xc2, 0xd1, 0x54, 0xb3, 0xfb, 0xae, 0x17, 0x60, 0x8c, 0xc7,
	0xc5, 0x44, 0xc3, 0x37, 0x5d, 0x2f, 0xd0, 0x5e, 0x83, 0x65, 0x19, 0xa7, 0x3f, 0xd8, 0xed, 0x59,
	0x26, 0x35, 0xac, 0x30, 0x3f, 0xcb, 0x92, 0x54, 0xbb, 0xc9, 0x2a, 0x3f, 0x22, 0x07, 0xda, 0x75,
	0x38, 0x2e, 0x63, 0xf9, 0x7e, 0x57, 0xf7, 0xad, 0x8e, 0xc3, 0xee, 0x12, 0x30, 0x5b, 0xcb, 0x31,
	0x09, 0x60, 0xcb, 0xef, 0x6e, 0x89, 0xea, 0xe6, 0x3b, 0x39, 0x22, 0x55, 0x28, 0xaa, 0x4d, 0x38,
	0x9d, 0x89, 0x2c, 0x84, 0xf6, 0xfb, 0xe3, 0x70, 0x76, 0xd3, 0x23, 0x54, 0x92, 0x9e, 0x4c, 0x76,
	0x3f, 0xcd, 0x0a, 0xfd, 0xa4, 0x7a, 0x9f, 0x8d, 0xe1, 0x94, 0x0e, 0x36, 0x7b, 0x86, 0x13, 0x8f,
	0x01, 0xe5, 0x7f, 0x55, 0x12, 0xb1, 0xa6, 0x27, 0xc5, 0xc4, 0x13, 0x4c, 0x0a, 0x49, 0x22, 0x27,
	0xcb, 0x4a, 0x64, 0x94, 0x8b, 0x43, 0xcc, 0xa1, 0x29, 0x1e, 0x2c, 0x90, 0x97, 0xe2, 0xf4, 0xb9,
	0x08, 0x0b, 0x08, 0x25, 0x89, 0x1f, 0xcf, 0x34, 0x54, 0xe3, 0x15, 0x91, 0xe4, 0x5d, 0x81, 0x25,
	0x84, 0x8d, 0x0b, 0x1d, 0x30, 0x70, 0x8d, 0xd7, 0xc5, 0xe4, 0xed, 0x46, 0xb1, 0x34, 0x14, 0x8a,
	0xdd, 0x1f, 0x57, 0xe1, 0xc5, 0x22, 0x22, 0xb1, 0xb4, 0x86, 0x69, 0xe5, 0x51, 0x19, 0x4d, 0x79,
	0x54, 0xbf, 0x98, 0xf2, 0xc8, 0x50, 0x04, 0x63, 0x4f, 0xa2, 0x08, 0xc6, 0x9f, 0x54, 0x11, 0x1c,
	0xc9, 0x57, 0x04, 0xff, 0x7b, 0x15, 0x2e, 0xae, 0xf7, 0x88, 0xe1, 0x0c, 0xfa, 0x5f, 0x68, 0xba,
	0x3e, 0xa3, 0xa5, 0x26, 0x63, 0x9c, 0x8f, 0x8c, 0x36, 0xce, 0x13, 0x5f, 0x60, 0x9c, 0x9b, 0xf7,
	0x4a, 0x33, 0xb0, 0x50, 0xc2, 0xaf, 0xc0, 0x6a, 0x49, 0x52, 0x42, 0xcd, 0xfe, 0x37, 0x5c, 0xcd,
	0xf2, 0x7c, 0x8f, 0x4f, 0x32, 0x6e, 0x69, 0xb5, 0x54, 0x7d, 0x02, 0xb5, 0xf4, 0x8c, 0x74, 0xaa,
	0x62, 0x8d, 0x98, 0x38, 0x94, 0x35, 0xe2, 0x3c, 0xd4, 0xa4, 0x6b, 0x7b, 0xdd, 0x27, 0x3c, 0x6d,
	0xc9, 0x74, 0x6b, 0xce, 0x0c, 0xaf, 0xeb, 0xb7, 0xb8, 0x13, 0xa2, 0xd1, 0x1d, 0xea, 0x43, 0xe2,
	0xf9, 0x96, 0xeb, 0xa0, 0x5e, 0x05, 0xa3, 0x3b, 0xdc, 0xe1, 0x25, 0xec, 0xec, 0x8b, 0xc7, 0x53,
	0x44, 0xeb, 0xd2, 0x0f, 0x03, 0x43, 0xf3, 0x62, 0x6e, 0xf3, 0xf9, 0xda, 0x3b, 0x30, 0x35, 0xb4,
	0xd1, 0x4b, 0x0d, 0xd8, 0xcd, 0xc2, 0x69, 0xf5, 0xe6, 0x8e, 0x42, 0xac, 0x72, 0x93, 0x72, 0x72,
	0xc8, 0x7f, 0xb2, 0x66, 0x50, 0x83, 0x18, 0x9b, 0x31, 0x83, 0xcd, 0x70, 0x7d, 0x6c, 0x06, 0xaa,
	0xdf, 0x5c, 0x29, 0x29, 0x14, 0xce, 0xef, 0x8e, 0x31, 0xf5, 0x9b, 0x4b, 0x44, 0xa8, 0x5f, 0x13,
	0xea, 0x7d, 0x04, 0xd5, 0x79, 0x78, 0x62, 0x11, 0x1b, 0xe8, 0x2d, 0xd5, 0x45, 0x92, 0x9a, 0x98,
	0xf8, 0x18, 0xc6, 0x39, 0xae, 0xf5, 0x63, 0xbf, 0x7d, 0xed, 0x16, 0x2c, 0x84, 0x34, 0x12, 0x1b,
	0x91, 0x9c, 0x55, 0xb1, 0x16, 0x96, 0xe0, 0x9e, 0xe0, 0x15, 0x58, 0x44, 0xb5, 0xa1, 0x1b, 0x6d,
	0x8f, 0xf8, 0xbe, 0x1c, 0x9d, 0xa9, 0xde, 0x65, 0x7a, 0x63, 0x8d, 0x55, 0xb0, 0xfd, 0x68, 0x7a,
	0x35, 0x1d, 0x2f, 0xbb, 0x9a, 0x1e, 0x19, 0x6d, 0x35, 0x9d, 0xc8, 0x5c, 0x4d, 0x3f, 0x2a, 0x1e,
	0x89, 0x2d, 0x0c, 0x3f, 0x5c, 0xbc, 0xad, 0xfc, 0xcb, 0x6a, 0x39, 0x6a, 0x74, 0x5c, 0x7f, 0xa9,
	0x02, 0x47, 0xd9, 0x79, 0x44, 0xc6, 0xe8, 0x12, 0x95, 0x9b, 0x63, 0x39, 0xda, 0x25, 0xe1, 0x98,
	0x28, 0x2c, 0xd2, 0x36, 0xc4, 0xc5, 0xc3, 0x6f, 0xfc, 0x7a, 0x05, 0x2e, 0x96, 0xa7, 0x91, 0xad,
	0x11, 0x55, 0xb2, 0x5b, 0x3d, 0x64, 0xd9, 0x6d, 0xfe, 0x29, 0x3b, 0x84, 0x6a, 0x11, 0xdb, 0x0d,
	0xc8, 0x6d, 0x97, 0x8a, 0x03, 0x7b, 0xa8, 0xb9, 0xb7, 0x97, 0xab, 0xac, 0x25, 0xeb, 0xaf, 0x3a,
	0xc2, 0xb3, 0x85, 0x67, 0xa0, 0x9a, 0xf9, 0x19, 0x93, 0xa2, 0x7f, 0xe5, 0xce, 0x98, 0x14, 0x88,
	0x62, 0xc5, 0xfb, 0x7b, 0xec, 0xd4, 0xf8, 0xa6, 0xac, 0x3d, 0xbf, 0x8a, 0x86, 0xc9, 0xdb, 0x70,
	0x3c, 0xae, 0xf8, 0xf5, 0x47, 0x5d, 0x2b, 0x88, 0x65, 0x82, 0x5d, 0x8e, 0x2d, 0x01, 0x9f, 0xd2,
	0x6a, 0xe1, 0x26, 0x9f, 0xe8, 0x60, 0xb9, 0xa3, 0xe2, 0x18, 0x8a, 0x60, 0xd7, 0xff, 0x31, 0x0e,
	0xc7, 0xef, 0xbb, 0x6d, 0xd2, 0x22, 0x5c, 0x8f, 0xac, 0xf5, 0x7a, 0xae, 0x19, 0xfa, 0xd4, 0xe5,
	0xc6, 0xbf, 0xf8, 0x29, 0x58, 0xf1, 0x10, 0x4b, 0x37, 0x42, 0x34, 0x39, 0xd4, 0xdf, 0xba, 0x42,
	0xfc, 0x32, 0x3f, 0xb6, 0x9a, 0x2e, 0x65, 0x82, 0xba, 0xec, 0xa5, 0xca, 0xd3, 0x07, 0x7f, 0x5f,
	0x9a, 0xe0, 0x36, 0xfe, 0xa8, 0x02, 0xcb, 0xea, 0x96, 0x16, 0x7b, 0x20, 0x7e, 0x8b, 0xc5, 0x9f,
	0xe2, 0x1c, 0x93, 0x7c, 0x04, 0xde, 0x7e, 0x22, 0x36, 0x31, 0xf7, 0x80, 0x59, 0x4f, 0xfa, 0x45,
	0xb7, 0x07, 0x38, 0x10, 0x91, 0x67, 0xb0, 0x1c, 0x91, 0x69, 0x29, 0xac, 0x95, 0x9c, 0xb9, 0x9a,
	0x6b, 0x30, 0x2b, 0xd3, 0x64, 0xd1, 0xd6, 0x76, 0x6c, 0x0e, 0x81, 0xd1, 0xd6, 0xb8, 0xef, 0x2e,
	0x16, 0x55, 0xb5, 0x1a, 0xcc, 0xec, 0x6f, 0xba, 0x2e, 0xba, 0x09, 0xd5, 0xc7, 0x9a, 0x6f, 0x65,
	0x09, 0x51, 0x99, 0xf7, 0xa1, 0x6a, 0x4c, 0x21, 0xa0, 0x3f, 0xa8, 0xc0, 0x02, 0x5d, 0x34, 0xb7,
	0x1e, 0x19, 0x98, 0x81, 0xe2, 0xab, 0x1a, 0x7f, 0xfc, 0x4a, 0xb2, 0xa1, 0x65, 0xe2, 0x3d, 0xc7,
	0x31, 0x54, 0x9d, 0xe6, 0x49, 0x3c, 0xfe, 0x0a, 0x74, 0x9a, 0x37, 0x74, 0x94, 0x4e, 0x73, 0x0c,
	0xd1, 0xe9, 0xdf, 0xaa, 0xc0, 0x8b, 0xb8, 0xbd, 0xc9, 0x5a, 0x9e, 0xb9, 0x8c, 0xe4, 0xa9, 0xf3,
	0xb4, 0xf9, 0x55, 0x55, 0x98, 0x5f, 0x87, 0x94, 0xf9, 0xe0, 0x76, 0xb9, 0x06, 0x17, 0xb2, 0xe4,
	0x15, 0xb8, 0x54, 0x86, 0x8e, 0x60, 0xd4, 0x6f, 0x54, 0xe0, 0xb8, 0x88, 0x01, 0x79, 0x4f, 0xce,
	0xe0, 0xee, 0x7f, 0x05, 0x57, 0x3a, 0xaa, 0x1b, 0xd4, 0x8d, 0x2d, 0xa3, 0x1b, 0xd4, 0x98, 0x82,
	0x11, 0xdf, 0x80, 0x65, 0xe1, 0x9e, 0xc4, 0x8b, 0x3e, 0x1b, 0x10, 0x1e, 0xb8, 0xe9, 0x3c, 0xd4,
	0xbc, 0xbe, 0xa9, 0xdb, 0x24, 0xe8, 0xba, 0xed, 0x98, 0x53, 0xa5, 0xd7, 0x37, 0x37, 0x58, 0x29,
	0xf3, 0x3d, 0x38, 0x06, 0x93, 0x14, 0xce, 0xf0, 0x3a, 0xe2, 0x1d, 0x97, 0xd7, 0xa7, 0x76, 0x31,
	0x5b, 0x31, 0xd3, 0xa4, 0x5b, 0x24, 0xb8, 0xf8, 0xe3, 0x70, 0x62, 0xc3, 0x32, 0x3d, 0xd7, 0x27,
	0x1d, 0x7e, 0xeb, 0x6a, 0x13, 0x27, 0xd8, 0xf4, 0xf8, 0x33, 0x5b, 0x5f, 0x3b, 0x0e, 0x47, 0xf7,
	0x6f, 0xf7, 0xdc, 0x47, 0x9b, 0xeb, 0x9b, 0xb7, 0xd6, 0x5d, 0xc7, 0x21, 0x66, 0x60, 0x0d, 0xad,
	0x80, 0x6a, 0xd2, 0x33, 0x70, 0x92, 0x55, 0x71, 0x8f, 0x81, 0xf5, 0xae, 0x61, 0x39, 0x2c, 0xf2,
	0xa5, 0x78, 0xa8, 0x51, 0xaf, 0x5e, 0xfc, 0x49, 0x58, 0x16, 0xc4, 0x05, 0x49, 0x8c, 0x81, 0xb9,
	0x08, 0xb5, 0x7d, 0x51, 0xb4, 0x69, 0xf8, 0x3e, 0x69, 0xd7, 0x2b, 0xb1, 0x42, 0x11, 0x0b, 0x93,
	0xb5, 0x40, 0x14, 0xde, 0x77, 0x83, 0xad, 0x41, 0xbf, 0xef, 0x7a, 0x01, 0x69, 0xd7, 0xc7, 0xae,
	0xfe, 0xfd, 0x9f, 0xaf, 0x40, 0x2d, 0xbc, 0xc3, 0x6f, 0xf5, 0xcd, 0xad, 0xa1, 0xa9, 0xed, 0xc0,
	0xec, 0x0d, 0x83, 0xf9, 0x3c, 0xb0, 0x3e, 0x6a, 0xaa, 0x5b, 0x43, 0x19, 0x60, 0xcd, 0xeb, 0x34,
	0x8a, 0x60, 0xe8, 0xd8, 0xfe, 0x04, 0xcc, 0x6f, 0x39, 0x46, 0xdf, 0xef, 0xba, 0x01, 0x77, 0x72,
	0xd2, 0x94, 0x0f, 0xc0, 0x62, 0x20, 0x94, 0x76, 0x31, 0x54, 0x82, 0x3a, 0xbf, 0x74, 0xcb, 0xa5,
	0x1e, 0x5e, 0x34, 0x36, 0x8a, 0xa1, 0x28, 0xf5, 0x2d, 0x98, 0x11, 0x85, 0x77, 0x48, 0xa0, 0x9d,
	0xc9, 0x41, 0xe2, 0xf7, 0x73, 0x8d, 0x02, 0x10, 0x4a, 0x74, 0x07, 0x66, 0x45, 0x09, 0xb3, 0x60,
	0x9a, 0x39, 0x28, 0x18, 0xa4, 0xbd, 0x51, 0x04, 0x83, 0xac, 0xd8, 0xb1, 0x63, 0x94, 0xcf, 0xa9,
	0xcf, 0x06, 0x12, 0xb4, 0x8b, 0xa1, 0x28, 0xf5, 0x6f, 0xc2, 0x14, 0x8b, 0xa4, 0xe0, 0xf6, 0x7a,
	0xda, 0xf3, 0xca, 0x23, 0x30, 0x5e, 0x49, 0x29, 0xe6, 0xd5, 0xd3, 0x09, 0x3b, 0xff, 0x9d, 0x5f,
	0x3b, 0xf9, 0xa3, 0xbf, 0xb0, 0xbf, 0xfb, 0x6b, 0x27, 0x7f, 0xec, 0x17, 0x7e, 0xed, 0xe4, 0x8f,
	0x69, 0x1f, 0x72, 0xda, 0xac, 0xcd, 0x59, 0xb8, 0xa2, 0xb5, 0x79, 0xf5, 0x3c, 0x44, 0xe6, 0x24,
	0xfd, 0x49, 0x87, 0xeb, 0x64, 0x06, 0x28, 0x0e, 0x55, 0x4e, 0x35, 0x7f, 0xbe, 0x38, 0xb5, 0x63,
	0xa3, 0xc4, 0x3e, 0xaf, 0x64, 0x51, 0x24, 0xab, 0x79, 0xf5, 0x94, 0xd6, 0x1a, 0x1c, 0x61, 0x97,
	0xb1, 0xda, 0x09, 0x75, 0x78, 0x7a, 0xde, 0xa0, 0xcc, 0x4a, 0xec, 0xd7, 0x8e, 0xcd, 0xd2, 0x41,
	0x2b, 0xfb, 0x85, 0x75, 0x59, 0xfd, 0xc2, 0x6a, 0x4a, 0x68, 0x03, 0xa6, 0x59, 0x52, 0xa8, 0xc0,
	0xf5, 0x88, 0xa6, 0x7c, 0x9a, 0x2b, 0x6a, 0x29, 0xb1, 0x5c, 0x80, 0x90, 0x1c, 0xae, 0x4f, 0x19,
	0xe4, 0xa2, 0x03, 0xc6, 0x46, 0x2e, 0x40, 0x28, 0xc4, 0x02, 0x61, 0xd7, 0xf5, 0xb2, 0x84, 0x58,
	0x06, 0xc9, 0x16, 0x62, 0x19, 0x2a, 0x1c, 0x53, 0xbc, 0x99, 0x55, 0x8f, 0x59, 0xb8, 0x55, 0x6c,
	0xe4, 0xd5, 0x73, 0xaf, 0xc1, 0xfa, 0x8e, 0x2d, 0x1e, 0x6d, 0x20, 0xcd, 0xc2, 0xfe, 0x9f, 0x57,
	0x02, 0xc4, 0xa9, 0x50, 0xe2, 0x3a, 0xd4, 0x76, 0xec, 0x2d, 0x12, 0xb0, 0x6d, 0x2d, 0x3f, 0xbd,
	0x7b, 0x41, 0x3d, 0x4d, 0x65, 0x18, 0xfa, 0x85, 0x12, 0x60, 0xe1, 0x07, 0x62, 0x3b, 0xe7, 0x8c,
	0x0f, 0x24, 0x8f, 0x1d, 0x1a, 0x25, 0xc0, 0x42, 0x56, 0xa3, 0x4a, 0x56, 0xb3, 0x32, 0x52, 0xc6,
	0x79, 0xf5, 0xdc, 0x7f, 0x61, 0x02, 0x23, 0xd7, 0x3f, 0xa7, 0x84, 0x14, 0xba, 0x21, 0xbb, 0x16,
	0xf5, 0x2e, 0xf7, 0xce, 0xc0, 0x49, 0xad, 0x76, 0x8b, 0x89, 0x25, 0x45, 0x6f, 0x14, 0xc1, 0x84,
	0x33, 0x80, 0x16, 0xd1, 0x09, 0x7e, 0x2a, 0x13, 0x01, 0x27, 0x79, 0x2e, 0x00, 0x25, 0xd7, 0xc5,
	0x7d, 0xfd, 0xfe, 0x56, 0x9f, 0x98, 0x6c, 0xd6, 0x52, 0xba, 0x17, 0x32, 0xd1, 0x64, 0x30, 0xfa,
	0x81, 0x72, 0x90, 0x31, 0x86, 0xa0, 0xf4, 0x66, 0x77, 0x36, 0x9a, 0x15, 0x45, 0x30, 0x94, 0xee,
	0xcf, 0x54, 0xe0, 0xc4, 0x8e, 0xbd, 0xde, 0x35, 0x9c, 0x0e, 0xcf, 0xc4, 0xec, 0x3a, 0x81, 0x61,
	0x39, 0xc4, 0xc3, 0xef, 0xbc, 0xaa, 0x56, 0x50, 0x59, 0xf0, 0xf4, 0xb3, 0x23, 0xa2, 0xc4, 0x7a,
	0x87, 0x42, 0x98, 0xdd, 0xf2, 0x48, 0x10, 0x8b, 0x60, 0x28, 0xdd, 0x4d, 0x00, 0x5e, 0xc4, 0xa3,
	0xf5, 0x67, 0x62, 0x08, 0xa1, 0xcc, 0x87, 0x08, 0x29, 0x62, 0x5a, 0xc5, 0x4e, 0x06, 0x45, 0x51,
	0x9d, 0x4d, 0x51, 0x40, 0xa0, 0xdd, 0xb2, 0x63, 0xdf, 0xb7, 0x4c, 0x94, 0xf4, 0x33, 0x4a, 0x84,
	0xb0, 0x3e, 0xcb, 0x6e, 0x91, 0x40, 0xc2, 0x19, 0x7d, 0xdf, 0x32, 0xa9, 0x38, 0x3e, 0x9f, 0x05,
	0x8e, 0x42, 0x98, 0x57, 0x2f, 0x37, 0x10, 0x25, 0x22, 0xf3, 0xeb, 0x91, 0x04, 0x14, 0x80, 0xc8,
	0x44, 0x71, 0xc0, 0x33, 0x31, 0xa2, 0xf1, 0x2e, 0x00, 0x09, 0x67, 0xf7, 0x7d, 0x8b, 0x07, 0x82,
	0x3f, 0x95, 0x05, 0x2f, 0x06, 0x3b, 0x17, 0x80, 0x92, 0x23, 0xb0, 0xb0, 0x63, 0xdf, 0xee, 0x0d,
	0xfc, 0xee, 0xc7, 0xc4, 0xf0, 0x1c, 0xd2, 0xbe, 0xb7, 0xe9, 0x6b, 0x2f, 0xaa, 0x55, 0x6a, 0x1c,
	0x8a, 0x92, 0x2f, 0x05, 0x18, 0x7e, 0x46, 0x2c, 0x2b, 0x98, 0xf5, 0x2e, 0xe3, 0x33, 0x09, 0xa8,
	0xec, 0xcf, 0x24, 0x00, 0xe9, 0x67, 0xbe, 0x5f, 0x81, 0xe7, 0xf3, 0x5f, 0xa3, 0x69, 0xaf, 0xa9,
	0x4e, 0xc3, 0x8b, 0x1e, 0xc3, 0x35, 0x46, 0xc7, 0x42, 0xe3, 0x41, 0x6c, 0x9b, 0x50, 0xb0, 0x54,
	0x66, 0x41, 0x1c, 0x24, 0xcb, 0x78, 0x88, 0x43, 0x51, 0xea, 0x0e, 0x2c, 0xc5, 0x0b, 0xef, 0x10,
	0xe7, 0xfe, 0xc0, 0xd6, 0x2e, 0x16, 0x62, 0x73, 0x40, 0xfa, 0xa5, 0xb2, 0xb0, 0x89, 0xde, 0xe4,
	0x6c, 0x6d, 0xe2, 0x20, 0x45, 0xbd, 0x89, 0xe4, 0x7a, 0x1f, 0x16, 0x45, 0x21, 0xdb, 0xb1, 0x21,
	0xc3, 0x5e, 0xca, 0x41, 0x96, 0xe0, 0xe8, 0x77, 0x4a, 0x82, 0xd2, 0x8f, 0x7d, 0x06, 0x47, 0x45,
	0xcd, 0x86, 0xeb, 0x58, 0x81, 0xeb, 0xf1, 0x3d, 0xb3, 0x76, 0x29, 0x87, 0x46, 0x0c, 0x92, 0x7e,
	0xb0, 0x34, 0x30, 0xce, 0x00, 0x51, 0x17, 0x3a, 0xce, 0x2b, 0x67, 0x40, 0x0a, 0x2a, 0x6b, 0x06,
	0xa4, 0x00, 0x95, 0x9f, 0xd9, 0x2a, 0xf5, 0x99, 0xad, 0xb2, 0x9f, 0xd9, 0xe2, 0x9f, 0xf9, 0x4e,
	0x05, 0x1a, 0xd9, 0xc7, 0x0d, 0xda, 0x95, 0x1c, 0x3a, 0x69, 0x70, 0xfa, 0xe5, 0xd1, 0x30, 0x68,
	0x13, 0x7e, 0xb9, 0x02, 0x67, 0x05, 0xc4, 0x16, 0x31, 0x07, 0x9e, 0x15, 0x1c, 0x20, 0xd7, 0xc3,
	0xe3, 0x0b, 0xda, 0xf9, 0xb7, 0x73, 0x28, 0xe7, 0xe0, 0xd1, 0x46, 0x3d, 0x21, 0x2a, 0x4f, 0x07,
	0x36, 0x7e, 0xcb, 0xec, 0xba, 0x9a, 0x2a, 0xff, 0x17, 0xad, 0xa0, 0xe4, 0xb3, 0xea, 0x28, 0xfe,
	0x37, 0x60, 0x0e, 0x6f, 0xfb, 0x71, 0xcd, 0x54, 0xb9, 0x79, 0xc4, 0x20, 0x28, 0xc5, 0x42, 0x20,
	0x5c, 0xde, 0xb1, 0x8c, 0x8a, 0xe0, 0xe9, 0x6c, 0x14, 0x94, 0xbd, 0x7c, 0x88, 0x78, 0x63, 0x71,
	0xd6, 0xe6, 0xb4, 0x23, 0x9a, 0xaf, 0x85, 0x40, 0x71, 0xd2, 0xa8, 0x73, 0x72, 0xb0, 0x22, 0x95,
	0x53, 0x08, 0x84, 0xcb, 0x33, 0x96, 0xb1, 0xb5, 0xf4, 0x4c, 0x36, 0x8e, 0x58, 0x4d, 0x0b, 0x40,
	0x28, 0xd1, 0x5d, 0xa8, 0x63, 0x09, 0x3e, 0xc0, 0xbe, 0xd7, 0xd7, 0xce, 0x67, 0xa3, 0x85, 0x40,
	0x59, 0x9b, 0xb1, 0x24, 0x1c, 0xfd, 0x46, 0x00, 0xcb, 0x58, 0xbc, 0xd6, 0x66, 0x37, 0xfc, 0xdb,
	0x74, 0x7e, 0xd0, 0xc1, 0x7c, 0x39, 0x9b, 0x42, 0x02, 0x94, 0x7e, 0xaf, 0x3c, 0x34, 0xfd, 0xea,
	0x7f, 0x52, 0x81, 0xd3, 0x58, 0x7b, 0x7b, 0xe0, 0xb0, 0x44, 0x60, 0xec, 0xac, 0x90, 0x8b, 0x3d,
	0x4a, 0xe9, 0x1b, 0xd9, 0x24, 0x33, 0x91, 0x68, 0x53, 0x9e, 0x04, 0x8f, 0x36, 0xea, 0xe7, 0x2b,
	0x70, 0x32, 0x1b, 0x8e, 0xb2, 0xe4, 0xda, 0x48, 0x94, 0x91, 0x33, 0x23, 0x23, 0x15, 0x33, 0x08,
	0x67, 0xc6, 0x68, 0x1d, 0x8d, 0x26, 0xcb, 0x93, 0xe0, 0x15, 0x37, 0x0a, 0xe7, 0xd4, 0x68, 0xc4,
	0xa3, 0x69, 0xf6, 0x24, 0x78, 0xc2, 0x4c, 0xcb, 0x86, 0x63, 0xb3, 0xf1, 0xb5, 0x91, 0x48, 0x8b,
	0x09, 0x3a, 0x3a, 0x16, 0x1a, 0x52, 0xaa, 0x6c, 0x76, 0x4a, 0x43, 0x4a, 0x05, 0x98, 0x65, 0x48,
	0xa9, 0x60, 0xd1, 0xd4, 0xb9, 0xf5, 0xd8, 0x0a, 0x92, 0x9f, 0x53, 0xd9, 0x2f, 0x0a, 0xb8, 0x2c,
	0x53, 0x47, 0x01, 0x4a, 0x3f, 0x36, 0x80, 0x15, 0x15, 0x11, 0xff, 0xc0, 0x31, 0x47, 0xf9, 0xe2,
	0x6a, 0x49, 0x50, 0x91, 0x60, 0x7b, 0x0b, 0x66, 0xee, 0xd9, 0x46, 0x87, 0xe4, 0xec, 0xf8, 0xa4,
	0xfa, 0x2c, 0xe5, 0x2a, 0x81, 0xc8, 0x44, 0x73, 0x36, 0x54, 0x52, 0x7d, 0x2e, 0xd1, 0x48, 0x18,
	0x3f, 0x84, 0x29, 0x56, 0x92, 0xb5, 0x8d, 0x14, 0x95, 0x59, 0xdb, 0x48, 0x51, 0x2f, 0x37, 0x30,
	0x67, 0x1b, 0x29, 0xd5, 0xe7, 0x36, 0x30, 0x9a, 0xc2, 0x74, 0xef, 0x14, 0x65, 0xe0, 0x47, 0x86,
	0x2a, 0xb7, 0x44, 0x49, 0xa8, 0xcc, 0xbd, 0x53, 0x12, 0x50, 0x9c, 0x74, 0x46, 0xe5, 0x94, 0x1b,
	0xe7, 0xf2, 0x51, 0x91, 0x27, 0xc5, 0x50, 0xe9, 0x4e, 0x20, 0x7f, 0x0a, 0xda, 0x16, 0x71, 0xa9,
	0x14, 0x60, 0xfa, 0x33, 0x28, 0x27, 0x05, 0xd8, 0x91, 0xb4, 0x94, 0x02, 0xc4, 0x55, 0x5e, 0xe6,
	0x21, 0x3b, 0x05, 0x3f, 0x5f, 0xc0, 0x68, 0x71, 0x1c, 0x5e, 0x06, 0x2e, 0xf6, 0x0d, 0xe9, 0x88,
	0x30, 0x1b, 0x37, 0x7e, 0x4c, 0x58, 0x06, 0x2e, 0xf5, 0x0d, 0xe4, 0x56, 0x3e, 0x6e, 0xc4, 0xac,
	0x32, 0x70, 0xa9, 0x6f, 0xe0, 0xc0, 0xe7, 0xe3, 0x46, 0xe3, 0x5e, 0x06, 0x8e, 0x7e, 0xe3, 0xa7,
	0xe0, 0xb8, 0xc4, 0x42, 0x7e, 0xf2, 0x74, 0xeb, 0x31, 0x8f, 0xb9, 0xa3, 0x5d, 0xce, 0x67, 0x78,
	0x1c, 0x9a, 0x7e, 0x75, 0x24, 0x04, 0xfa, 0xf9, 0x9f, 0xad, 0xc0, 0x73, 0x29, 0x80, 0x7b, 0xbe,
	0xe9, 0x5b, 0xeb, 0x3d, 0x8b, 0x38, 0x81, 0x76, 0xb5, 0x0c, 0x45, 0x09, 0x81, 0xb6, 0x62, 0x54,
	0x9c, 0x34, 0x1f, 0x38, 0x7f, 0xca, 0xf2, 0x21, 0x0e, 0x5d, 0x82, 0x0f, 0x71, 0x04, 0x5c, 0xd8,
	0x52, 0x2d, 0xdc, 0xb1, 0x95, 0xcb, 0x8c, 0x02, 0x2e, 0x6b, 0x61, 0x53, 0x80, 0xa2, 0xbe, 0x92,
	0x7a, 0x9f, 0xa5, 0xaf, 0xe2, 0x20, 0x59, 0xfa, 0x2a, 0x0e, 0x85, 0x8a, 0x44, 0x2a, 0xcc, 0xd1,
	0x57, 0x29, 0xa8, 0x2c, 0x45, 0x92, 0x02, 0x44, 0x53, 0x3e, 0x4d, 0x80, 0xad, 0xcd, 0x2f, 0x97,
	0xfa, 0x96, 0xcf, 0xfd, 0x65, 0x1b, 0xe5, 0xa1, 0x71, 0xc9, 0xbb, 0x6b, 0xe4, 0x5c, 0x3b, 0x89,
	0xca, 0xac, 0x25, 0x4f, 0xd4, 0xe3, 0x55, 0xe2, 0x5d, 0x23, 0xeb, 0x2a, 0x91, 0xd5, 0x64, 0x5d,
	0x25, 0xb2, 0x4a, 0x3c, 0xd2, 0x0c, 0xb3, 0x0a, 0x2a, 0x8f, 0x34, 0xe5, 0x6c, 0x85, 0x8d, 0x5c,
	0x00, 0xdc, 0xdf, 0xa2, 0xd7, 0x7f, 0xd6, 0xfe, 0x36, 0xaa, 0xce, 0xda, 0xdf, 0x46, 0x10, 0xa8,
	0xc2, 0xb0, 0x20, 0xf4, 0x8a, 0x50, 0xaa, 0xb0, 0x24, 0x50, 0x96, 0x0a, 0x4b, 0xc2, 0x09, 0xc7,
	0x81, 0x58, 0x92, 0x7d, 0xb5, 0xe3, 0x40, 0x0c, 0x24, 0xd3, 0x71, 0x20, 0x95, 0xdf, 0xff, 0x1b,
	0x61, 0xba, 0xf2, 0x9c, 0xe3, 0x84, 0x64, 0x2a, 0xff, 0x46, 0x21, 0x50, 0x9c, 0x74, 0xce, 0x0e,
	0x3d, 0x99, 0xcb, 0xbe, 0x51, 0x08, 0x14, 0x1e, 0xa0, 0x87, 0xe9, 0xb8, 0x33, 0x0e, 0xd0, 0xe5,
	0xe4, 0xf1, 0x8d, 0x02, 0x90, 0xf0, 0x76, 0x23, 0xb4, 0x71, 0x4e, 0x67, 0x23, 0xe4, 0x88, 0x47,
	0x3c, 0xf5, 0x7b, 0xc4, 0x81, 0x9c, 0xe3, 0x8f, 0x64, 0x6e, 0xf7, 0x46, 0x21, 0x50, 0x9c, 0x34,
	0x4f, 0x48, 0x9e, 0x47, 0x3a, 0x4c, 0x6d, 0xde, 0x28, 0x04, 0xc2, 0x7b, 0xbd, 0x74, 0x96, 0x5d,
	0xe5, 0xbd, 0x9e, 0x32, 0x3b, 0x75, 0xa3, 0x1c, 0xa4, 0x58, 0x16, 0xd2, 0x4e, 0x4b, 0xea, 0x65,
	0x41, 0xe9, 0x37, 0xd5, 0x28, 0x09, 0x1a, 0x0e, 0x6f, 0x8b, 0x74, 0x2c, 0x3f, 0x20, 0x5e, 0xc6,
	0xf0, 0x8a, 0xea, 0xec, 0xe1, 0x15, 0x10, 0xb8, 0x14, 0xf0, 0x04, 0x74, 0x2c, 0x10, 0xd4, 0x5a,
	0xaf, 0xb7, 0x63, 0xab, 0xaf, 0x48, 0x52, 0x50, 0x59, 0x4b, 0x41, 0x0a, 0x10, 0x15, 0x00, 0x96,
	0x89, 0x44, 0x9b, 0xe7, 0x94, 0xcf, 0x81, 0x64, 0x90, 0x2c, 0x05, 0x10, 0x87, 0xc2, 0xfb, 0xf5,
	0x2d, 0x5a, 0x74, 0x77, 0x2d, 0xcc, 0xfe, 0xf7, 0x82, 0x52, 0x73, 0xc4, 0x60, 0xb2, 0xee, 0xd7,
	0x13, 0x60, 0xf4, 0x03, 0x9f, 0xc3, 0x0a, 0xde, 0xba, 0xc7, 0x73, 0xaa, 0x58, 0xae, 0xa3, 0xad,
	0x66, 0x5f, 0xd1, 0xa7, 0x80, 0xb3, 0x36, 0x9b, 0x59, 0xf0, 0x69, 0xbb, 0x23, 0x1c, 0xfc, 0x02,
	0x63, 0x42, 0x96, 0x82, 0x92, 0xa0, 0x62, 0x31, 0x90, 0xa3, 0x83, 0x53, 0x2d, 0x72, 0xbe, 0x28,
	0x84, 0x38, 0xea, 0x92, 0x32, 0x70, 0x28, 0xc4, 0x77, 0x8d, 0x70, 0xa0, 0x4e, 0x2b, 0x17, 0x4f,
	0x79, 0x8c, 0xf2, 0x21, 0xf0, 0xc6, 0x43, 0x48, 0x9d, 0xeb, 0x91, 0x1d, 0xfb, 0x63, 0xd7, 0x34,
	0x7a, 0x2c, 0xc8, 0x73, 0x8e, 0x7c, 0xc6, 0x20, 0xb3, 0x6e, 0x3c, 0x94, 0xc0, 0xf4, 0x93, 0xf7,
	0x61, 0xee, 0x53, 0x83, 0x2e, 0x73, 0x46, 0xaf, 0xb7, 0x6b, 0x98, 0xfb, 0xda, 0x8a, 0x2a, 0x74,
	0xd5, 0xee, 0x47, 0xe4, 0x40, 0xa9, 0xb0, 0x62, 0xb8, 0x68, 0xdc, 0xaa, 0x4e, 0x54, 0xf8, 0x8d,
	0xc3, 0xe5, 0x92, 0xe7, 0x2f, 0xe1, 0x85, 0xc3, 0x48, 0x08, 0xe2, 0xa8, 0x31, 0x0a, 0x53, 0x9e,
	0x0c, 0xa2, 0x9f, 0x75, 0xd4, 0x98, 0x8b, 0x91, 0x75, 0xd4, 0x98, 0x8b, 0x84, 0xcb, 0x42, 0x2c,
	0x93, 0xb4, 0x76, 0xb6, 0x44, 0xf6, 0xef, 0x46, 0x21, 0x10, 0xba, 0x29, 0xc8, 0xb9, 0x48, 0x95,
	0x6e, 0x0a, 0x89, 0xa4, 0xb8, 0x8d, 0x22, 0x18, 0xd4, 0xa2, 0xa9, 0x44, 0xbb, 0x4a, 0x2d, 0xaa,
	0x4a, 0x03, 0xdd, 0x28, 0x05, 0x28, 0x7f, 0x46, 0x4e, 0x1d, 0x9a, 0xfd, 0x99, 0x44, 0x62, 0xd5,
	0x46, 0x29, 0x40, 0x3c, 0x32, 0x54, 0x25, 0xc8, 0x54, 0x1e, 0x19, 0x66, 0xe4, 0x23, 0x6d, 0x94,
	0x85, 0x45, 0x0d, 0xa7, 0x48, 0x11, 0xa8, 0xd4, 0x70, 0xea, 0x1c, 0x8e, 0x8d, 0x92, 0xa0, 0xc2,
	0x5f, 0x26, 0x27, 0x61, 0xa4, 0xd2, 0x5f, 0x26, 0x3f, 0xa3, 0x67, 0x63, 0x44, 0x14, 0x71, 0xc5,
	0x98, 0x9d, 0xd6, 0x4d, 0x79, 0xc5, 0x98, 0x9b, 0xf7, 0xb0, 0x31, 0x1a, 0x06, 0xee, 0xce, 0xd4,
	0x59, 0xc2, 0x94, 0xbb, 0xb3, 0xcc, 0xec, 0x72, 0x8d, 0xf2, 0xd0, 0x68, 0x98, 0xa5, 0x53, 0x85,
	0x29, 0x0d, 0x33, 0x65, 0x86, 0xb2, 0x46, 0x39, 0x48, 0x5c, 0x14, 0x94, 0x89, 0xbc, 0x94, 0x8b,
	0x42, 0x56, 0xbe, 0xb0, 0x46, 0x69, 0x60, 0x71, 0xf4, 0x9f, 0x9f, 0x12, 0x4a, 0x79, 0xf4, 0x5f,
	0x98, 0x28, 0xac, 0x31, 0x3a, 0x96, 0x50, 0xea, 0xb9, 0x79, 0xa3, 0x94, 0x4a, 0xbd, 0x28, 0x55,
	0x55, 0x63, 0x64, 0x24, 0x5c, 0xdf, 0x32, 0xb3, 0x46, 0x29, 0xd7, 0xb7, 0xbc, 0x04, 0x55, 0x8d,
	0x91, 0x10, 0xd0, 0x42, 0x4c, 0xe4, 0xac, 0x51, 0x5a, 0x88, 0xe9, 0xb4, 0x54, 0x8d, 0x12, 0x60,
	0x68, 0x21, 0x66, 0xc5, 0x18, 0x57, 0x5a, 0x88, 0x39, 0xe1, 0xe1, 0x1b, 0xa3, 0xc0, 0xcb, 0xbc,
	0x55, 0xe5, 0xbf, 0xc9, 0xe6, 0x6d, 0x46, 0x0e, 0x9e, 0xc6, 0x48, 0x08, 0x89, 0xcf, 0xa7, 0x72,
	0xdf, 0xe4, 0x7e, 0x5e, 0x95, 0x66, 0xa7, 0x31, 0x12, 0x82, 0xac, 0xc7, 0x52, 0x89, 0x56, 0xb2,
	0xf5, 0x98, 0x2a, 0xbf, 0x4e, 0xe3, 0xe5, 0x51, 0x32, 0xb8, 0xc4, 0x96, 0x62, 0x91, 0x0d, 0x22,
	0x7f, 0x29, 0x96, 0x32, 0x51, 0x34, 0x4a, 0x01, 0xca, 0x4b, 0x63, 0x3c, 0x83, 0x43, 0xf6, 0xd2,
	0x98, 0x4a, 0x12, 0xd1, 0x28, 0x09, 0x1a, 0x5b, 0x94, 0x94, 0x09, 0x19, 0xb2, 0x17, 0xa5, 0xac,
	0xf4, 0x10, 0x8d, 0xd1, 0x30, 0x70, 0x9f, 0x18, 0x4f, 0xdf, 0xa0, 0xdc, 0x27, 0xa6, 0xf2, 0x3e,
	0x34, 0x8a, 0xa1, 0xd0, 0xb0, 0x51, 0x45, 0x8e, 0x57, 0x1a, 0x36, 0x19, 0x21, 0xfe, 0x1b, 0x65,
	0x61, 0xf1, 0x7b, 0xaa, 0xa8, 0xe9, 0xca, 0xef, 0x65, 0x84, 0x7c, 0x6f, 0x94, 0x85, 0x55, 0x7e,
	0x0f, 0x2d, 0xd1, 0x62, 0x1a, 0x91, 0x31, 0x5a, 0x16, 0x16, 0x27, 0x41, 0x2a, 0x7c, 0xb9, 0x56,
	0x1c, 0x96, 0x3c, 0xc7, 0xed, 0x4b, 0x19, 0x0d, 0x3d, 0xd5, 0x2d, 0xb4, 0xde, 0x8b, 0x9b, 0x1a,
	0x59, 0xf1, 0x65, 0x61, 0xc5, 0x3c, 0xc8, 0x0e, 0xca, 0xad, 0x9c, 0x07, 0xb9, 0xe1, 0xc5, 0x1b,
	0xa3, 0x61, 0xe0, 0x72, 0x92, 0x15, 0xb6, 0x5a, 0xb9, 0x9c, 0xe4, 0xc4, 0xe0, 0x6e, 0x8c, 0x02,
	0x9f, 0xf9, 0x6d, 0x94, 0xa4, 0x72, 0xb4, 0x22, 0x69, 0x1a, 0x05, 0x1e, 0x8d, 0x36, 0x65, 0xe4,
	0x68, 0xed, 0x52, 0x29, 0x42, 0x28, 0x59, 0xa5, 0x81, 0x33, 0xbb, 0x8b, 0x12, 0x56, 0xae, 0xf9,
	0x91, 0x94, 0x8d, 0x02, 0x4f, 0xbf, 0xfd, 0x8b, 0x15, 0x38, 0x53, 0x18, 0xd2, 0x58, 0x7b, 0x53,
	0xe9, 0xa9, 0x57, 0x1c, 0x44, 0xba, 0xf1, 0x44, 0x88, 0xe2, 0x5a, 0xd3, 0xbe, 0x35, 0xa4, 0x4b,
	0x7d, 0xbb, 0x8d, 0xfb, 0x4c, 0xf5, 0x6b, 0x9a, 0x38, 0x50, 0xf6, 0xab, 0x9b, 0x38, 0x9c, 0x38,
	0xd7, 0xe2, 0xc5, 0x9c, 0x1f, 0xf8, 0x99, 0x97, 0xb2, 0xd1, 0x65, 0xb8, 0xcc, 0x73, 0xad, 0x34,
	0x28, 0xae, 0x2b, 0xf1, 0xb0, 0xce, 0xca, 0x75, 0x25, 0x15, 0x0e, 0xba, 0x51, 0x0c, 0x85, 0x7a,
	0x30, 0x15, 0x4d, 0x59, 0xa9, 0x07, 0x55, 0x31, 0xa0, 0x1b, 0xa5, 0x00, 0xd1, 0x88, 0x4d, 0x84,
	0xa3, 0x54, 0x1a, 0xb1, 0xe9, 0xb0, 0xa1, 0x8d, 0x12, 0x60, 0xd1, 0x43, 0x28, 0x39, 0xba, 0x71,
	0xd6, 0x43, 0xa8, 0x44, 0x80, 0xe8, 0x46, 0x09, 0xb0, 0x50, 0xae, 0xe2, 0x21, 0x80, 0x33, 0xe4,
	0x2a, 0x15, 0x48, 0xb9, 0x51, 0x06, 0x0e, 0x55, 0x88, 0x32, 0x20, 0xae, 0x52, 0x85, 0x64, 0x05,
	0x1d, 0x6e, 0x94, 0x06, 0x46, 0x51, 0x56, 0x44, 0xa4, 0x55, 0x8a, 0xb2, 0x3a, 0x14, 0x6f, 0xa3,
	0x24, 0x28, 0x9e, 0x61, 0xc9, 0x21, 0x67, 0x95, 0x67, 0x58, 0x89, 0x40, 0xb6, 0x8d, 0x22, 0x98,
	0xf0, 0xed, 0xc5, 0x56, 0x9f, 0x98, 0xd9, 0x2f, 0xab, 0xb0, 0x36, 0xfb, 0xed, 0x05, 0x02, 0xe0,
	0x9c, 0x08, 0xbf, 0xc0, 0x04, 0x2c, 0xcb, 0x36, 0x48, 0x41, 0x65, 0xcd, 0x89, 0x14, 0x60, 0xf8,
	0x80, 0x0b, 0x87, 0xa5, 0x45, 0xfa, 0x3d, 0xcb, 0xa4, 0x43, 0x7d, 0x21, 0x6f, 0xf4, 0x42, 0xb0,
	0xec, 0x07, 0x5c, 0x49, 0x48, 0xe1, 0x7e, 0x90, 0x15, 0xfa, 0x4d, 0xed, 0x7e, 0x90, 0x13, 0xb4,
	0xaf, 0x31, 0x12, 0x82, 0xf0, 0x75, 0x2c, 0x8a, 0x40, 0xa7, 0xf4, 0x75, 0x2c, 0x11, 0x42, 0xb0,
	0xf1, 0x24, 0x78, 0xb4, 0x51, 0x3f, 0x88, 0xc2, 0x47, 0x14, 0xb6, 0xed, 0x3d, 0xa5, 0x05, 0x56,
	0x36, 0xca, 0x61, 0xe3, 0x0b, 0xa0, 0x4b, 0xec, 0xcb, 0x8d, 0x44, 0x95, 0xc5, 0xbe, 0xa2, 0x48,
	0x7e, 0x8d, 0x27, 0xc1, 0xa3, 0x8d, 0xfa, 0xd5, 0x0a, 0x9c, 0x2b, 0x13, 0x1e, 0x4b, 0xbb, 0xfe,
	0x84, 0x31, 0xbc, 0x68, 0xe3, 0xae, 0x3f, 0x79, 0xfc, 0x2f, 0xbe, 0x20, 0xc4, 0x62, 0x18, 0x65,
	0x2c, 0x08, 0xc9, 0xd8, 0x4f, 0x8d, 0x12, 0x60, 0xb8, 0x79, 0xdf, 0xe9, 0x3b, 0x1f, 0xef, 0xb6,
	0xdc, 0x01, 0x0b, 0xd0, 0xb5, 0x67, 0x3d, 0xc6, 0xef, 0xa8, 0xb6, 0xe3, 0x6a, 0xd0, 0xac, 0xcd,
	0xbb, 0x1a, 0x5a, 0xf8, 0x98, 0x2b, 0x03, 0xe0, 0xa8, 0x7d, 0xcc, 0xb3, 0xc2, 0x02, 0x35, 0xca,
	0x43, 0xa3, 0x0d, 0x12, 0x8f, 0x3c, 0xa3, 0xb4, 0x41, 0x52, 0x71, 0x77, 0x1a, 0xc5, 0x50, 0x09,
	0xea, 0x3c, 0xc4, 0x4b, 0x2e, 0xf5, 0x30, 0xc0, 0x4d, 0xa3, 0x18, 0x2a, 0x5c, 0x54, 0x15, 0x11,
	0xc0, 0x32, 0x16, 0x55, 0x75, 0x10, 0xb5, 0x46, 0x69, 0x60, 0x31, 0x39, 0xca, 0x44, 0x68, 0x51,
	0x4e, 0x8e, 0x92, 0x31, 0x6d, 0x1a, 0x4f, 0x8a, 0x4b, 0x1b, 0xf8, 0x08, 0x8e, 0xed, 0xd8, 0x77,
	0xfa, 0x83, 0x3b, 0x24, 0x58, 0x77, 0xed, 0xbe, 0x11, 0x58, 0xbb, 0x3d, 0x9e, 0x27, 0x5e, 0x7b,
	0x45, 0xed, 0xa3, 0xa0, 0x82, 0xa5, 0xad, 0x18, 0x01, 0x5c, 0x4c, 0x1a, 0x65, 0x8c, 0x16, 0xf5,
	0xa4, 0xc9, 0x8a, 0x5a, 0xd3, 0x28, 0x0f, 0xdd, 0x22, 0x41, 0xe3, 0xc4, 0x77, 0x7e, 0xb8, 0xf2,
	0x67, 0x7f, 0x73, 0xec, 0xbb, 0x3f, 0x5c, 0xa9, 0xfe, 0xc2, 0x0f, 0x57, 0x2a, 0x3f, 0xfd, 0x9f,
	0x35, 0xa7, 0x43, 0xb4, 0x1b, 0x97, 0xe0, 0xa8, 0xe9, 0xda, 0x69, 0x7a, 0xdf, 0x8c, 0x60, 0xbe,
	0x53, 0xa9, 0x7c, 0xb7, 0x52, 0xf9, 0x85, 0x4a, 0xe5, 0xdf, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb1,
	0x25, 0x20, 0x97, 0xa2, 0x33, 0x01, 0x00,
}

//Generated by ntnx_rpc plugin

// Service AcropolisRpcSvc
type IAcropolisRpcSvc interface {
	BeforeRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}) error
	AfterRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}, err error) error

	BatchRequest(*BatchRequestArg, *BatchRequestRet) error
	SnapshotCreate(*SnapshotCreateArg, *SnapshotCreateRet) error
	SnapshotDelete(*SnapshotDeleteArg, *SnapshotDeleteRet) error
	SnapshotGet(*SnapshotGetArg, *SnapshotGetRet) error
	SnapshotList(*SnapshotListArg, *SnapshotListRet) error
	VmSnapshotList(*VmSnapshotListArg, *VmSnapshotListRet) error
	TaskPoll(*TaskPollArg, *TaskPollRet) error
	TaskList(*TaskListArg, *TaskListRet) error
	TaskGet(*TaskGetArg, *TaskGetRet) error
	VmCreate(*VmCreateArg, *VmCreateRet) error
	VmGet(*VmGetArg, *VmGetRet) error
	VmClone(*VmCloneArg, *VmCloneRet) error
	VmRestore(*VmRestoreArg, *VmRestoreRet) error
	VmMigrate(*VmMigrateArg, *VmMigrateRet) error
	VmMigrateAbort(*VmMigrateAbortArg, *VmMigrateAbortRet) error
	VmUpdate(*VmUpdateArg, *VmUpdateRet) error
	VmAffinityUpdate(*VmMigrateArg, *VmAffinityUpdateRet) error
	VmSetPowerState(*VmSetPowerStateArg, *VmSetPowerStateRet) error
	VmForcePowerOff(*VmForcePowerOffArg, *VmForcePowerOffRet) error
	VmDelete(*VmDeleteArg, *VmDeleteRet) error
	VmList(*VmListArg, *VmListRet) error
	VmDiskCreate(*VmDiskCreateArg, *VmDiskCreateRet) error
	VmDiskGet(*VmDiskGetArg, *VmDiskGetRet) error
	VmDiskSpecCloneGet(*VmDiskSpecCloneGetArg, *VmDiskSpecCloneGetRet) error
	VmDiskUpdate(*VmDiskUpdateArg, *VmDiskUpdateRet) error
	VmChangeDiskContainerUpdate(*VmChangeDiskContainerUpdateArg, *VmChangeDiskContainerUpdateRet) error
	VmDiskDelete(*VmDiskDeleteArg, *VmDiskDeleteRet) error
	VmDiskList(*VmDiskListArg, *VmDiskListRet) error
	VmAttachVg(*VmAttachVgArg, *VmAttachVgRet) error
	VmNicCreate(*VmNicCreateArg, *VmNicCreateRet) error
	VmNicGet(*VmNicGetArg, *VmNicGetRet) error
	VmNicUpdate(*VmNicUpdateArg, *VmNicUpdateRet) error
	VmNicDelete(*VmNicDeleteArg, *VmNicDeleteRet) error
	VmNicList(*VmNicListArg, *VmNicListRet) error
	VmFlushLearnedIPs(*VmFlushLearnedIPsArg, *VmFlushLearnedIPsRet) error
	VmAffinityNodeGet(*VmAffinityNodeGetArg, *VmAffinityNodeGetRet) error
	ComponentMemoryReservationsGet(*ComponentMemoryReservationsGetArg, *ComponentMemoryReservationsGetRet) error
	MicrosegUpdate(*MicrosegUpdateArg, *MicrosegUpdateRet) error
	MicrosegUpdateGenNum(*MicrosegUpdateGenNumArg, *MicrosegUpdateGenNumRet) error
	MicrosegDelete(*MicrosegDeleteArg, *MicrosegDeleteRet) error
	MicrosegBatchUpdate(*MicrosegBatchUpdateArg, *MicrosegBatchUpdateRet) error
	MicrosegMonitorEnable(*MicrosegMonitorEnableArg, *MicrosegMonitorEnableRet) error
	MicrosegConfigGet(*MicrosegConfigGetArg, *MicrosegConfigGetRet) error
	MicrosegConfigSet(*MicrosegConfigSetArg, *MicrosegConfigSetRet) error
	MicrosegEnablementPreCheck(*MicrosegEnablementPreCheckArg, *MicrosegEnablementPreCheckRet) error
	MicrosegSecurityMonitoringConfigSet(*MicrosegSecurityMonitoringConfigSetArg, *MicrosegSecurityMonitoringConfigSetRet) error
	Echo(*EchoArg, *EchoRet) error
	NetworkCreate(*NetworkCreateArg, *NetworkCreateRet) error
	NetworkGet(*NetworkGetArg, *NetworkGetRet) error
	NetworkUpdate(*NetworkUpdateArg, *NetworkUpdateRet) error
	NetworkDelete(*NetworkDeleteArg, *NetworkDeleteRet) error
	NetworkList(*NetworkListArg, *NetworkListRet) error
	NetworkReserveIp(*NetworkReserveIpArg, *NetworkReserveIpRet) error
	NetworkAddressTableGet(*NetworkAddressTableGetArg, *NetworkAddressTableGetRet) error
	NetworkFunctionChainConfigCreate(*NetworkFunctionChainConfigCreateArg, *NetworkFunctionChainConfigCreateRet) error
	NetworkFunctionChainConfigGet(*NetworkFunctionChainConfigGetArg, *NetworkFunctionChainConfigGetRet) error
	NetworkFunctionChainConfigUpdate(*NetworkFunctionChainConfigUpdateArg, *NetworkFunctionChainConfigUpdateRet) error
	NetworkFunctionChainConfigDelete(*NetworkFunctionChainConfigDeleteArg, *NetworkFunctionChainConfigDeleteRet) error
	NetworkFunctionChainConfigList(*NetworkFunctionChainConfigListArg, *NetworkFunctionChainConfigListRet) error
	EnterMaintenanceMode(*EnterMaintenanceModeArg, *EnterMaintenanceModeRet) error
	ExitMaintenanceMode(*ExitMaintenanceModeArg, *ExitMaintenanceModeRet) error
	ExitMaintenanceModeAsync(*ExitMaintenanceModeArg, *ExitMaintenanceModeAsyncRet) error
	ImageCreate(*ImageCreateArg, *ImageCreateRet) error
	ImageDelete(*ImageDeleteArg, *ImageDeleteRet) error
	ImageGet(*ImageGetArg, *ImageGetRet) error
	ImageUpdate(*ImageUpdateArg, *ImageUpdateRet) error
	VolumeGroupCreate(*VolumeGroupCreateArg, *VolumeGroupCreateRet) error
	VolumeGroupGet(*VolumeGroupGetArg, *VolumeGroupGetRet) error
	VolumeGroupUpdate(*VolumeGroupUpdateArg, *VolumeGroupUpdateRet) error
	VolumeGroupDelete(*VolumeGroupDeleteArg, *VolumeGroupDeleteRet) error
	VolumeGroupClone(*VolumeGroupCloneArg, *VolumeGroupCloneRet) error
	VolumeDiskCreate(*VolumeDiskCreateArg, *VolumeDiskCreateRet) error
	VolumeDiskDelete(*VolumeDiskDeleteArg, *VolumeDiskDeleteRet) error
	VolumeDiskUpdate(*VolumeDiskUpdateArg, *VolumeDiskUpdateRet) error
	VolumeGroupAttachExternal(*VolumeGroupAttachExternalArg, *VolumeGroupAttachExternalRet) error
	VolumeGroupAttachIscsiClient(*VolumeGroupAttachIscsiClientArg, *VolumeGroupAttachIscsiClientRet) error
	VolumeGroupUpdateExternal(*VolumeGroupUpdateExternalArg, *VolumeGroupUpdateExternalRet) error
	VolumeGroupAttachVm(*VolumeGroupAttachVmArg, *VolumeGroupAttachVmRet) error
	IscsiClientGet(*IscsiClientGetArg, *IscsiClientGetRet) error
	IscsiClientUpdate(*IscsiClientUpdateArg, *IscsiClientUpdateRet) error
	IscsiClientUpdateAsync(*IscsiClientUpdateAsyncArg, *IscsiClientUpdateAsyncRet) error
	HaUpdate(*HaUpdateArg, *HaUpdateRet) error
	HaGet(*HaGetArg, *HaGetRet) error
	ParcelGet(*ParcelGetArg, *ParcelGetRet) error
	StretchGet(*StretchGetArg, *StretchGetRet) error
	StretchConfigure(*StretchConfigureArg, *StretchConfigureRet) error
	StretchRecover(*StretchRecoverArg, *StretchRecoverRet) error
	VmGroupCreate(*VmGroupCreateArg, *VmGroupCreateRet) error
	VmGroupDelete(*VmGroupDeleteArg, *VmGroupDeleteRet) error
	VmGroupList(*VmGroupListArg, *VmGroupListRet) error
	VmGroupGet(*VmGroupGetArg, *VmGroupGetRet) error
	VmGroupUpdate(*VmGroupUpdateArg, *VmGroupUpdateRet) error
	VmGroupListVm(*VmGroupListVmArg, *VmGroupListVmRet) error
	UpdateAffinityRule(*UpdateAffinityRuleArg, *UpdateAffinityRuleRet) error
	ValidateTaskRequest(*ValidateTaskRequestArg, *ValidateTaskRequestRet) error
	VmRegister(*VmRegisterArg, *VmRegisterRet) error
	HostRestartAllVms(*HostRestartAllVmsArg, *HostRestartAllVmsRet) error
	RestartVmGroup(*RestartVmGroupArg, *RestartVmGroupRet) error
	StartHAFailover(*StartHAFailoverArg, *StartHAFailoverRet) error
	VmForceCompleteMigration(*VmForceCompleteMigrationArg, *VmForceCompleteMigrationRet) error
	VolumeGroupRegister(*VolumeGroupRegisterArg, *VolumeGroupRegisterRet) error
	SchedulerNodeGet(*SchedulerNodeGetArg, *SchedulerNodeGetRet) error
	HaFailover(*HaFailoverArg, *HaFailoverRet) error
	HostRestoreVmLocality(*HostRestoreVmLocalityArg, *HostRestoreVmLocalityRet) error
	WatchCallback(*DbKey, *WatchCallbackRet) error
	EnterMaintenanceModeCheck(*EnterMaintenanceModeCheckArg, *EnterMaintenanceModeCheckRet) error
	SchedulerSegmentAssignmentGet(*SchedulerSegmentAssignmentGetArg, *SchedulerSegmentAssignmentGetRet) error
	ParcelsCreate(*ParcelsCreateArg, *ParcelsCreateRet) error
	ParcelDelete(*ParcelDeleteArg, *ParcelDeleteRet) error
	LazanParcelUpdate(*LazanParcelUpdateArg, *LazanParcelUpdateRet) error
	LazanGetVMsOnHost(*LazanGetVMsOnHostArg, *LazanGetVMsOnHostRet) error
	LazanSetHostFailures(*LazanSetHostFailuresArg, *LazanSetHostFailuresRet) error
	LazanAssignSegments(*LazanAssignSegmentsArg, *LazanAssignSegmentsRet) error
	LazanNotifyFailoverComplete(*LazanNotifyFailoverCompleteArg, *LazanNotifyFailoverCompleteRet) error
	LazanNotifyPowerTransition(*LazanNotifyPowerTransitionArg, *LazanNotifyPowerTransitionRet) error
	LazanCompleteMigrateVm(*LazanCompleteMigrateVmArg, *LazanCompleteMigrateVmRet) error
	LazanIsTaskPending(*LazanIsTaskPendingArg, *LazanIsTaskPendingRet) error
	LazanGetEntityParcels(*LazanGetEntityParcelsArg, *LazanGetEntityParcelsRet) error
	LazanAffinityHAComplianceCheck(*LazanAffinityHAComplianceCheckArg, *LazanAffinityHAComplianceCheckRet) error
	LazanCheckCurrentNodeFailures(*LazanCheckCurrentNodeFailuresArg, *LazanCheckCurrentNodeFailuresRet) error
	LazanIsFailoverInProgress(*LazanIsFailoverInProgressArg, *LazanIsFailoverInProgressRet) error
	LazanScheduleVm(*LazanScheduleVmArg, *LazanScheduleVmRet) error
	LazanMaybeUpdateAffinity(*LazanMaybeUpdateAffinityArg, *LazanMaybeUpdateAffinityRet) error
	LazanGetSegmentAssignment(*LazanGetSegmentAssignmentArg, *LazanGetSegmentAssignmentRet) error
	LazanGetHighPriorityHosts(*LazanGetHighPriorityHostsArg, *LazanGetHighPriorityHostsRet) error
	LazanGetSchedulerState(*LazanGetSchedulerStateArg, *LazanGetSchedulerStateRet) error
	LazanGetVmParcels(*LazanGetVmParcelsArg, *LazanGetVmParcelsRet) error
	LazanGetEntityNodes(*LazanGetEntityNodesArg, *LazanGetEntityNodesRet) error
	LazanGetMigrateDestination(*LazanGetMigrateDestinationArg, *LazanGetMigrateDestinationRet) error
	GetVmsToReboot(*GetVmsToRebootArg, *GetVmsToRebootRet) error
	ReservePerHostMemory(*ReservePerHostMemoryArg, *ReservePerHostMemoryRet) error
	ClusterVswitchCreate(*ClusterVswitchCreateArg, *ClusterVswitchCreateRet) error
	ClusterVswitchUpdate(*ClusterVswitchUpdateArg, *ClusterVswitchUpdateRet) error
	ClusterVswitchGet(*ClusterVswitchGetArg, *ClusterVswitchGetRet) error
	ClusterVswitchDelete(*ClusterVswitchDeleteArg, *ClusterVswitchDeleteRet) error
	DistributedVswitchValidate(*DistributedVswitchValidateArg, *DistributedVswitchValidateRet) error
	DistributedVswitchCreate(*DistributedVswitchCreateArg, *DistributedVswitchCreateRet) error
	DistributedVswitchUpdate(*DistributedVswitchUpdateArg, *DistributedVswitchUpdateRet) error
	DistributedVswitchGet(*DistributedVswitchGetArg, *DistributedVswitchGetRet) error
	DistributedVswitchDelete(*DistributedVswitchDeleteArg, *DistributedVswitchDeleteRet) error
	MigrateBridgeToDistributedVswitch(*MigrateBridgeToDistributedVswitchArg, *MigrateBridgeToDistributedVswitchRet) error
	VmEventAddOnHost(*VmEventAddOnHostArg, *VmEventAddOnHostRet) error
	VmEventDeleteOnHost(*VmEventDeleteOnHostArg, *VmEventDeleteOnHostRet) error
	AtlasConfigGet(*AtlasConfigGetArg, *AtlasConfigGetRet) error
	AtlasConfigUpdate(*AtlasConfigUpdateArg, *AtlasConfigUpdateRet) error
	UpdateVmDbState(*UpdateVmDbStateArg, *UpdateVmDbStateRet) error
	VmSyncRepEnable(*VmSyncRepEnableArg, *VmSyncRepEnableRet) error
	VmSyncRepMigrate(*VmSyncRepMigrateArg, *VmSyncRepMigrateRet) error
	VmSyncRepConfigUpdate(*VmSyncRepConfigUpdateArg, *VmSyncRepConfigUpdateRet) error
	DormantVmDiskDelete(*DormantVmDiskDeleteArg, *DormantVmDiskDeleteRet) error
	DormantVmGet(*DormantVmGetArg, *DormantVmGetRet) error
	VmSpecGet(*VmSpecGetArg, *VmSpecGetRet) error
	DormantVmStateGet(*DormantVmStateGetArg, *DormantVmStateGetRet) error
	VmSyncRepReplicate(*VmSyncRepReplicateArg, *VmSyncRepReplicateRet) error
	VmCrossClusterLiveMigrate(*VmCrossClusterLiveMigrateArg, *VmCrossClusterLiveMigrateRet) error
	PrepareVmCrossClusterLiveMigrate(*PrepareVmCrossClusterLiveMigrateArg, *PrepareVmCrossClusterLiveMigrateRet) error
	CleanupPrepareVmCrossClusterLiveMigrate(*CleanupPrepareVmCrossClusterLiveMigrateArg, *CleanupPrepareVmCrossClusterLiveMigrateRet) error
	PrechecksCrossClusterLiveMigrate(*PrechecksCrossClusterLiveMigrateArg, *PrechecksCrossClusterLiveMigrateRet) error
	PrechecksCrossClusterLiveMigrateSync(*PrechecksCrossClusterLiveMigrateSyncArg, *PrechecksCrossClusterLiveMigrateSyncRet) error
	VmDisableUpdate(*VmDisableUpdateArg, *VmDisableUpdateRet) error
	VpnLbRoutePrefixUpdate(*VpnLbRoutePrefixUpdateArg, *VpnLbRoutePrefixUpdateRet) error
	NodeResourceAllocation(*NodeResourceAllocationArg, *NodeResourceAllocationRet) error
	HostSwapAttach(*HostSwapAttachArg, *HostSwapAttachRet) error
	HostSwapDetach(*HostSwapDetachArg, *HostSwapDetachRet) error
	VmRemoteForcePowerOff(*VmRemoteForcePowerOffArg, *VmRemoteForcePowerOffRet) error
	CleanupCrossClusterLiveMigrateSource(*CleanupCrossClusterLiveMigrateSourceArg, *CleanupCrossClusterLiveMigrateSourceRet) error
	VmGpuGetCompatibleHosts(*VmGpuGetCompatibleHostsArg, *VmGpuGetCompatibleHostsRet) error
	VmUpdateIncarnationIds(*VmUpdateIncarnationIdsArg, *VmUpdateIncarnationIdsRet) error
}

func _AcropolisRpcSvc_BatchRequest_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(BatchRequestArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &BatchRequestRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.BatchRequest(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_SnapshotCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(SnapshotCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &SnapshotCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SnapshotCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_SnapshotDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(SnapshotDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &SnapshotDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SnapshotDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_SnapshotGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(SnapshotGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &SnapshotGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SnapshotGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_SnapshotList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(SnapshotListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &SnapshotListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SnapshotList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmSnapshotList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmSnapshotListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmSnapshotListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmSnapshotList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_TaskPoll_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskPollArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskPollRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskPoll(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_TaskList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_TaskGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmClone_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmCloneArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmCloneRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmClone(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmRestore_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmRestoreArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmRestoreRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmRestore(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmMigrate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmMigrateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmMigrateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmMigrate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmMigrateAbort_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmMigrateAbortArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmMigrateAbortRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmMigrateAbort(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmAffinityUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmMigrateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmAffinityUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmAffinityUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmSetPowerState_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmSetPowerStateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmSetPowerStateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmSetPowerState(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmForcePowerOff_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmForcePowerOffArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmForcePowerOffRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmForcePowerOff(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmDiskCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDiskCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDiskCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDiskCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmDiskGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDiskGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDiskGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDiskGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmDiskSpecCloneGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDiskSpecCloneGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDiskSpecCloneGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDiskSpecCloneGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmDiskUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDiskUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDiskUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDiskUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmChangeDiskContainerUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmChangeDiskContainerUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmChangeDiskContainerUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmChangeDiskContainerUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmDiskDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDiskDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDiskDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDiskDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmDiskList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDiskListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDiskListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDiskList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmAttachVg_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmAttachVgArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmAttachVgRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmAttachVg(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmNicCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmNicCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmNicCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmNicCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmNicGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmNicGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmNicGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmNicGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmNicUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmNicUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmNicUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmNicUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmNicDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmNicDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmNicDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmNicDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmNicList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmNicListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmNicListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmNicList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmFlushLearnedIPs_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmFlushLearnedIPsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmFlushLearnedIPsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmFlushLearnedIPs(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmAffinityNodeGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmAffinityNodeGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmAffinityNodeGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmAffinityNodeGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ComponentMemoryReservationsGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ComponentMemoryReservationsGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ComponentMemoryReservationsGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ComponentMemoryReservationsGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_MicrosegUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(MicrosegUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &MicrosegUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MicrosegUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_MicrosegUpdateGenNum_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(MicrosegUpdateGenNumArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &MicrosegUpdateGenNumRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MicrosegUpdateGenNum(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_MicrosegDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(MicrosegDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &MicrosegDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MicrosegDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_MicrosegBatchUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(MicrosegBatchUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &MicrosegBatchUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MicrosegBatchUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_MicrosegMonitorEnable_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(MicrosegMonitorEnableArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &MicrosegMonitorEnableRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MicrosegMonitorEnable(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_MicrosegConfigGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(MicrosegConfigGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &MicrosegConfigGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MicrosegConfigGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_MicrosegConfigSet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(MicrosegConfigSetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &MicrosegConfigSetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MicrosegConfigSet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_MicrosegEnablementPreCheck_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(MicrosegEnablementPreCheckArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &MicrosegEnablementPreCheckRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MicrosegEnablementPreCheck(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_MicrosegSecurityMonitoringConfigSet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(MicrosegSecurityMonitoringConfigSetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &MicrosegSecurityMonitoringConfigSetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MicrosegSecurityMonitoringConfigSet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_Echo_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(EchoArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &EchoRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.Echo(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkReserveIp_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkReserveIpArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkReserveIpRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkReserveIp(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkAddressTableGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkAddressTableGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkAddressTableGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkAddressTableGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkFunctionChainConfigCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkFunctionChainConfigCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkFunctionChainConfigCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkFunctionChainConfigCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkFunctionChainConfigGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkFunctionChainConfigGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkFunctionChainConfigGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkFunctionChainConfigGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkFunctionChainConfigUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkFunctionChainConfigUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkFunctionChainConfigUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkFunctionChainConfigUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkFunctionChainConfigDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkFunctionChainConfigDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkFunctionChainConfigDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkFunctionChainConfigDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NetworkFunctionChainConfigList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkFunctionChainConfigListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkFunctionChainConfigListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkFunctionChainConfigList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_EnterMaintenanceMode_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(EnterMaintenanceModeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &EnterMaintenanceModeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.EnterMaintenanceMode(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ExitMaintenanceMode_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ExitMaintenanceModeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ExitMaintenanceModeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ExitMaintenanceMode(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ExitMaintenanceModeAsync_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ExitMaintenanceModeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ExitMaintenanceModeAsyncRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ExitMaintenanceModeAsync(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ImageCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ImageCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ImageCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ImageCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ImageDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ImageDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ImageDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ImageDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ImageGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ImageGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ImageGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ImageGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ImageUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ImageUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ImageUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ImageUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeGroupCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeGroupCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeGroupCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeGroupCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeGroupGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeGroupGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeGroupGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeGroupGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeGroupUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeGroupUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeGroupUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeGroupUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeGroupDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeGroupDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeGroupDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeGroupDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeGroupClone_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeGroupCloneArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeGroupCloneRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeGroupClone(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeDiskCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeDiskCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeDiskCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeDiskCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeDiskDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeDiskDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeDiskDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeDiskDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeDiskUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeDiskUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeDiskUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeDiskUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeGroupAttachExternal_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeGroupAttachExternalArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeGroupAttachExternalRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeGroupAttachExternal(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeGroupAttachIscsiClient_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeGroupAttachIscsiClientArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeGroupAttachIscsiClientRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeGroupAttachIscsiClient(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeGroupUpdateExternal_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeGroupUpdateExternalArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeGroupUpdateExternalRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeGroupUpdateExternal(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeGroupAttachVm_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeGroupAttachVmArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeGroupAttachVmRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeGroupAttachVm(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_IscsiClientGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(IscsiClientGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &IscsiClientGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.IscsiClientGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_IscsiClientUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(IscsiClientUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &IscsiClientUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.IscsiClientUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_IscsiClientUpdateAsync_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(IscsiClientUpdateAsyncArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &IscsiClientUpdateAsyncRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.IscsiClientUpdateAsync(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_HaUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(HaUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &HaUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.HaUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_HaGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(HaGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &HaGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.HaGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ParcelGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ParcelGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ParcelGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ParcelGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_StretchGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(StretchGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &StretchGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.StretchGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_StretchConfigure_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(StretchConfigureArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &StretchConfigureRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.StretchConfigure(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_StretchRecover_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(StretchRecoverArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &StretchRecoverRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.StretchRecover(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmGroupCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGroupCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGroupCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGroupCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmGroupDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGroupDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGroupDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGroupDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmGroupList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGroupListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGroupListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGroupList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmGroupGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGroupGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGroupGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGroupGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmGroupUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGroupUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGroupUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGroupUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmGroupListVm_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGroupListVmArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGroupListVmRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGroupListVm(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_UpdateAffinityRule_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(UpdateAffinityRuleArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &UpdateAffinityRuleRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.UpdateAffinityRule(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ValidateTaskRequest_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ValidateTaskRequestArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ValidateTaskRequestRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ValidateTaskRequest(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmRegister_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmRegisterArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmRegisterRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmRegister(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_HostRestartAllVms_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(HostRestartAllVmsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &HostRestartAllVmsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.HostRestartAllVms(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_RestartVmGroup_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(RestartVmGroupArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &RestartVmGroupRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.RestartVmGroup(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_StartHAFailover_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(StartHAFailoverArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &StartHAFailoverRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.StartHAFailover(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmForceCompleteMigration_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmForceCompleteMigrationArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmForceCompleteMigrationRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmForceCompleteMigration(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VolumeGroupRegister_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VolumeGroupRegisterArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VolumeGroupRegisterRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VolumeGroupRegister(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_SchedulerNodeGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(SchedulerNodeGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &SchedulerNodeGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SchedulerNodeGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_HaFailover_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(HaFailoverArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &HaFailoverRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.HaFailover(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_HostRestoreVmLocality_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(HostRestoreVmLocalityArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &HostRestoreVmLocalityRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.HostRestoreVmLocality(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_WatchCallback_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DbKey)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &WatchCallbackRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.WatchCallback(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_EnterMaintenanceModeCheck_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(EnterMaintenanceModeCheckArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &EnterMaintenanceModeCheckRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.EnterMaintenanceModeCheck(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_SchedulerSegmentAssignmentGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(SchedulerSegmentAssignmentGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &SchedulerSegmentAssignmentGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SchedulerSegmentAssignmentGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ParcelsCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ParcelsCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ParcelsCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ParcelsCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ParcelDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ParcelDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ParcelDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ParcelDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanParcelUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanParcelUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanParcelUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanParcelUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanGetVMsOnHost_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanGetVMsOnHostArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanGetVMsOnHostRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanGetVMsOnHost(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanSetHostFailures_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanSetHostFailuresArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanSetHostFailuresRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanSetHostFailures(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanAssignSegments_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanAssignSegmentsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanAssignSegmentsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanAssignSegments(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanNotifyFailoverComplete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanNotifyFailoverCompleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanNotifyFailoverCompleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanNotifyFailoverComplete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanNotifyPowerTransition_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanNotifyPowerTransitionArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanNotifyPowerTransitionRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanNotifyPowerTransition(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanCompleteMigrateVm_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanCompleteMigrateVmArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanCompleteMigrateVmRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanCompleteMigrateVm(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanIsTaskPending_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanIsTaskPendingArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanIsTaskPendingRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanIsTaskPending(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanGetEntityParcels_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanGetEntityParcelsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanGetEntityParcelsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanGetEntityParcels(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanAffinityHAComplianceCheck_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanAffinityHAComplianceCheckArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanAffinityHAComplianceCheckRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanAffinityHAComplianceCheck(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanCheckCurrentNodeFailures_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanCheckCurrentNodeFailuresArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanCheckCurrentNodeFailuresRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanCheckCurrentNodeFailures(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanIsFailoverInProgress_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanIsFailoverInProgressArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanIsFailoverInProgressRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanIsFailoverInProgress(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanScheduleVm_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanScheduleVmArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanScheduleVmRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanScheduleVm(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanMaybeUpdateAffinity_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanMaybeUpdateAffinityArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanMaybeUpdateAffinityRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanMaybeUpdateAffinity(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanGetSegmentAssignment_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanGetSegmentAssignmentArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanGetSegmentAssignmentRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanGetSegmentAssignment(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanGetHighPriorityHosts_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanGetHighPriorityHostsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanGetHighPriorityHostsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanGetHighPriorityHosts(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanGetSchedulerState_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanGetSchedulerStateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanGetSchedulerStateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanGetSchedulerState(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanGetVmParcels_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanGetVmParcelsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanGetVmParcelsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanGetVmParcels(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanGetEntityNodes_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanGetEntityNodesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanGetEntityNodesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanGetEntityNodes(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_LazanGetMigrateDestination_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(LazanGetMigrateDestinationArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &LazanGetMigrateDestinationRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LazanGetMigrateDestination(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_GetVmsToReboot_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetVmsToRebootArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetVmsToRebootRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetVmsToReboot(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ReservePerHostMemory_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ReservePerHostMemoryArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ReservePerHostMemoryRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ReservePerHostMemory(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ClusterVswitchCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ClusterVswitchCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ClusterVswitchCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ClusterVswitchCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ClusterVswitchUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ClusterVswitchUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ClusterVswitchUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ClusterVswitchUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ClusterVswitchGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ClusterVswitchGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ClusterVswitchGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ClusterVswitchGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_ClusterVswitchDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ClusterVswitchDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ClusterVswitchDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ClusterVswitchDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_DistributedVswitchValidate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DistributedVswitchValidateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &DistributedVswitchValidateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DistributedVswitchValidate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_DistributedVswitchCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DistributedVswitchCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &DistributedVswitchCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DistributedVswitchCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_DistributedVswitchUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DistributedVswitchUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &DistributedVswitchUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DistributedVswitchUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_DistributedVswitchGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DistributedVswitchGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &DistributedVswitchGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DistributedVswitchGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_DistributedVswitchDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DistributedVswitchDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &DistributedVswitchDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DistributedVswitchDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_MigrateBridgeToDistributedVswitch_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(MigrateBridgeToDistributedVswitchArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &MigrateBridgeToDistributedVswitchRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MigrateBridgeToDistributedVswitch(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmEventAddOnHost_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmEventAddOnHostArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmEventAddOnHostRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmEventAddOnHost(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmEventDeleteOnHost_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmEventDeleteOnHostArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmEventDeleteOnHostRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmEventDeleteOnHost(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_AtlasConfigGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(AtlasConfigGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &AtlasConfigGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.AtlasConfigGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_AtlasConfigUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(AtlasConfigUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &AtlasConfigUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.AtlasConfigUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_UpdateVmDbState_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(UpdateVmDbStateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &UpdateVmDbStateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.UpdateVmDbState(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmSyncRepEnable_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmSyncRepEnableArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmSyncRepEnableRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmSyncRepEnable(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmSyncRepMigrate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmSyncRepMigrateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmSyncRepMigrateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmSyncRepMigrate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmSyncRepConfigUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmSyncRepConfigUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmSyncRepConfigUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmSyncRepConfigUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_DormantVmDiskDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DormantVmDiskDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &DormantVmDiskDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DormantVmDiskDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_DormantVmGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DormantVmGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &DormantVmGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DormantVmGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmSpecGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmSpecGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmSpecGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmSpecGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_DormantVmStateGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DormantVmStateGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &DormantVmStateGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DormantVmStateGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmSyncRepReplicate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmSyncRepReplicateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmSyncRepReplicateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmSyncRepReplicate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmCrossClusterLiveMigrate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmCrossClusterLiveMigrateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmCrossClusterLiveMigrateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmCrossClusterLiveMigrate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_PrepareVmCrossClusterLiveMigrate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(PrepareVmCrossClusterLiveMigrateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &PrepareVmCrossClusterLiveMigrateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.PrepareVmCrossClusterLiveMigrate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_CleanupPrepareVmCrossClusterLiveMigrate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CleanupPrepareVmCrossClusterLiveMigrateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CleanupPrepareVmCrossClusterLiveMigrateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.CleanupPrepareVmCrossClusterLiveMigrate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_PrechecksCrossClusterLiveMigrate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(PrechecksCrossClusterLiveMigrateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &PrechecksCrossClusterLiveMigrateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.PrechecksCrossClusterLiveMigrate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_PrechecksCrossClusterLiveMigrateSync_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(PrechecksCrossClusterLiveMigrateSyncArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &PrechecksCrossClusterLiveMigrateSyncRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.PrechecksCrossClusterLiveMigrateSync(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmDisableUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDisableUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDisableUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDisableUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VpnLbRoutePrefixUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VpnLbRoutePrefixUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VpnLbRoutePrefixUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VpnLbRoutePrefixUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_NodeResourceAllocation_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NodeResourceAllocationArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NodeResourceAllocationRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NodeResourceAllocation(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_HostSwapAttach_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(HostSwapAttachArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &HostSwapAttachRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.HostSwapAttach(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_HostSwapDetach_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(HostSwapDetachArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &HostSwapDetachRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.HostSwapDetach(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmRemoteForcePowerOff_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmRemoteForcePowerOffArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmRemoteForcePowerOffRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmRemoteForcePowerOff(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_CleanupCrossClusterLiveMigrateSource_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CleanupCrossClusterLiveMigrateSourceArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CleanupCrossClusterLiveMigrateSourceRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.CleanupCrossClusterLiveMigrateSource(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmGpuGetCompatibleHosts_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGpuGetCompatibleHostsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGpuGetCompatibleHostsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGpuGetCompatibleHosts(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _AcropolisRpcSvc_VmUpdateIncarnationIds_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IAcropolisRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmUpdateIncarnationIdsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmUpdateIncarnationIdsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmUpdateIncarnationIds(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

var _AcropolisRpcSvcDesc = util_net.ServiceDesc{
	Name: "nutanix.acropolis.AcropolisRpcSvc",
	Methods: map[string]util_net.ServiceMethodFn{
		"BatchRequest":                            _AcropolisRpcSvc_BatchRequest_Handler,
		"SnapshotCreate":                          _AcropolisRpcSvc_SnapshotCreate_Handler,
		"SnapshotDelete":                          _AcropolisRpcSvc_SnapshotDelete_Handler,
		"SnapshotGet":                             _AcropolisRpcSvc_SnapshotGet_Handler,
		"SnapshotList":                            _AcropolisRpcSvc_SnapshotList_Handler,
		"VmSnapshotList":                          _AcropolisRpcSvc_VmSnapshotList_Handler,
		"TaskPoll":                                _AcropolisRpcSvc_TaskPoll_Handler,
		"TaskList":                                _AcropolisRpcSvc_TaskList_Handler,
		"TaskGet":                                 _AcropolisRpcSvc_TaskGet_Handler,
		"VmCreate":                                _AcropolisRpcSvc_VmCreate_Handler,
		"VmGet":                                   _AcropolisRpcSvc_VmGet_Handler,
		"VmClone":                                 _AcropolisRpcSvc_VmClone_Handler,
		"VmRestore":                               _AcropolisRpcSvc_VmRestore_Handler,
		"VmMigrate":                               _AcropolisRpcSvc_VmMigrate_Handler,
		"VmMigrateAbort":                          _AcropolisRpcSvc_VmMigrateAbort_Handler,
		"VmUpdate":                                _AcropolisRpcSvc_VmUpdate_Handler,
		"VmAffinityUpdate":                        _AcropolisRpcSvc_VmAffinityUpdate_Handler,
		"VmSetPowerState":                         _AcropolisRpcSvc_VmSetPowerState_Handler,
		"VmForcePowerOff":                         _AcropolisRpcSvc_VmForcePowerOff_Handler,
		"VmDelete":                                _AcropolisRpcSvc_VmDelete_Handler,
		"VmList":                                  _AcropolisRpcSvc_VmList_Handler,
		"VmDiskCreate":                            _AcropolisRpcSvc_VmDiskCreate_Handler,
		"VmDiskGet":                               _AcropolisRpcSvc_VmDiskGet_Handler,
		"VmDiskSpecCloneGet":                      _AcropolisRpcSvc_VmDiskSpecCloneGet_Handler,
		"VmDiskUpdate":                            _AcropolisRpcSvc_VmDiskUpdate_Handler,
		"VmChangeDiskContainerUpdate":             _AcropolisRpcSvc_VmChangeDiskContainerUpdate_Handler,
		"VmDiskDelete":                            _AcropolisRpcSvc_VmDiskDelete_Handler,
		"VmDiskList":                              _AcropolisRpcSvc_VmDiskList_Handler,
		"VmAttachVg":                              _AcropolisRpcSvc_VmAttachVg_Handler,
		"VmNicCreate":                             _AcropolisRpcSvc_VmNicCreate_Handler,
		"VmNicGet":                                _AcropolisRpcSvc_VmNicGet_Handler,
		"VmNicUpdate":                             _AcropolisRpcSvc_VmNicUpdate_Handler,
		"VmNicDelete":                             _AcropolisRpcSvc_VmNicDelete_Handler,
		"VmNicList":                               _AcropolisRpcSvc_VmNicList_Handler,
		"VmFlushLearnedIPs":                       _AcropolisRpcSvc_VmFlushLearnedIPs_Handler,
		"VmAffinityNodeGet":                       _AcropolisRpcSvc_VmAffinityNodeGet_Handler,
		"ComponentMemoryReservationsGet":          _AcropolisRpcSvc_ComponentMemoryReservationsGet_Handler,
		"MicrosegUpdate":                          _AcropolisRpcSvc_MicrosegUpdate_Handler,
		"MicrosegUpdateGenNum":                    _AcropolisRpcSvc_MicrosegUpdateGenNum_Handler,
		"MicrosegDelete":                          _AcropolisRpcSvc_MicrosegDelete_Handler,
		"MicrosegBatchUpdate":                     _AcropolisRpcSvc_MicrosegBatchUpdate_Handler,
		"MicrosegMonitorEnable":                   _AcropolisRpcSvc_MicrosegMonitorEnable_Handler,
		"MicrosegConfigGet":                       _AcropolisRpcSvc_MicrosegConfigGet_Handler,
		"MicrosegConfigSet":                       _AcropolisRpcSvc_MicrosegConfigSet_Handler,
		"MicrosegEnablementPreCheck":              _AcropolisRpcSvc_MicrosegEnablementPreCheck_Handler,
		"MicrosegSecurityMonitoringConfigSet":     _AcropolisRpcSvc_MicrosegSecurityMonitoringConfigSet_Handler,
		"Echo":                                    _AcropolisRpcSvc_Echo_Handler,
		"NetworkCreate":                           _AcropolisRpcSvc_NetworkCreate_Handler,
		"NetworkGet":                              _AcropolisRpcSvc_NetworkGet_Handler,
		"NetworkUpdate":                           _AcropolisRpcSvc_NetworkUpdate_Handler,
		"NetworkDelete":                           _AcropolisRpcSvc_NetworkDelete_Handler,
		"NetworkList":                             _AcropolisRpcSvc_NetworkList_Handler,
		"NetworkReserveIp":                        _AcropolisRpcSvc_NetworkReserveIp_Handler,
		"NetworkAddressTableGet":                  _AcropolisRpcSvc_NetworkAddressTableGet_Handler,
		"NetworkFunctionChainConfigCreate":        _AcropolisRpcSvc_NetworkFunctionChainConfigCreate_Handler,
		"NetworkFunctionChainConfigGet":           _AcropolisRpcSvc_NetworkFunctionChainConfigGet_Handler,
		"NetworkFunctionChainConfigUpdate":        _AcropolisRpcSvc_NetworkFunctionChainConfigUpdate_Handler,
		"NetworkFunctionChainConfigDelete":        _AcropolisRpcSvc_NetworkFunctionChainConfigDelete_Handler,
		"NetworkFunctionChainConfigList":          _AcropolisRpcSvc_NetworkFunctionChainConfigList_Handler,
		"EnterMaintenanceMode":                    _AcropolisRpcSvc_EnterMaintenanceMode_Handler,
		"ExitMaintenanceMode":                     _AcropolisRpcSvc_ExitMaintenanceMode_Handler,
		"ExitMaintenanceModeAsync":                _AcropolisRpcSvc_ExitMaintenanceModeAsync_Handler,
		"ImageCreate":                             _AcropolisRpcSvc_ImageCreate_Handler,
		"ImageDelete":                             _AcropolisRpcSvc_ImageDelete_Handler,
		"ImageGet":                                _AcropolisRpcSvc_ImageGet_Handler,
		"ImageUpdate":                             _AcropolisRpcSvc_ImageUpdate_Handler,
		"VolumeGroupCreate":                       _AcropolisRpcSvc_VolumeGroupCreate_Handler,
		"VolumeGroupGet":                          _AcropolisRpcSvc_VolumeGroupGet_Handler,
		"VolumeGroupUpdate":                       _AcropolisRpcSvc_VolumeGroupUpdate_Handler,
		"VolumeGroupDelete":                       _AcropolisRpcSvc_VolumeGroupDelete_Handler,
		"VolumeGroupClone":                        _AcropolisRpcSvc_VolumeGroupClone_Handler,
		"VolumeDiskCreate":                        _AcropolisRpcSvc_VolumeDiskCreate_Handler,
		"VolumeDiskDelete":                        _AcropolisRpcSvc_VolumeDiskDelete_Handler,
		"VolumeDiskUpdate":                        _AcropolisRpcSvc_VolumeDiskUpdate_Handler,
		"VolumeGroupAttachExternal":               _AcropolisRpcSvc_VolumeGroupAttachExternal_Handler,
		"VolumeGroupAttachIscsiClient":            _AcropolisRpcSvc_VolumeGroupAttachIscsiClient_Handler,
		"VolumeGroupUpdateExternal":               _AcropolisRpcSvc_VolumeGroupUpdateExternal_Handler,
		"VolumeGroupAttachVm":                     _AcropolisRpcSvc_VolumeGroupAttachVm_Handler,
		"IscsiClientGet":                          _AcropolisRpcSvc_IscsiClientGet_Handler,
		"IscsiClientUpdate":                       _AcropolisRpcSvc_IscsiClientUpdate_Handler,
		"IscsiClientUpdateAsync":                  _AcropolisRpcSvc_IscsiClientUpdateAsync_Handler,
		"HaUpdate":                                _AcropolisRpcSvc_HaUpdate_Handler,
		"HaGet":                                   _AcropolisRpcSvc_HaGet_Handler,
		"ParcelGet":                               _AcropolisRpcSvc_ParcelGet_Handler,
		"StretchGet":                              _AcropolisRpcSvc_StretchGet_Handler,
		"StretchConfigure":                        _AcropolisRpcSvc_StretchConfigure_Handler,
		"StretchRecover":                          _AcropolisRpcSvc_StretchRecover_Handler,
		"VmGroupCreate":                           _AcropolisRpcSvc_VmGroupCreate_Handler,
		"VmGroupDelete":                           _AcropolisRpcSvc_VmGroupDelete_Handler,
		"VmGroupList":                             _AcropolisRpcSvc_VmGroupList_Handler,
		"VmGroupGet":                              _AcropolisRpcSvc_VmGroupGet_Handler,
		"VmGroupUpdate":                           _AcropolisRpcSvc_VmGroupUpdate_Handler,
		"VmGroupListVm":                           _AcropolisRpcSvc_VmGroupListVm_Handler,
		"UpdateAffinityRule":                      _AcropolisRpcSvc_UpdateAffinityRule_Handler,
		"ValidateTaskRequest":                     _AcropolisRpcSvc_ValidateTaskRequest_Handler,
		"VmRegister":                              _AcropolisRpcSvc_VmRegister_Handler,
		"HostRestartAllVms":                       _AcropolisRpcSvc_HostRestartAllVms_Handler,
		"RestartVmGroup":                          _AcropolisRpcSvc_RestartVmGroup_Handler,
		"StartHAFailover":                         _AcropolisRpcSvc_StartHAFailover_Handler,
		"VmForceCompleteMigration":                _AcropolisRpcSvc_VmForceCompleteMigration_Handler,
		"VolumeGroupRegister":                     _AcropolisRpcSvc_VolumeGroupRegister_Handler,
		"SchedulerNodeGet":                        _AcropolisRpcSvc_SchedulerNodeGet_Handler,
		"HaFailover":                              _AcropolisRpcSvc_HaFailover_Handler,
		"HostRestoreVmLocality":                   _AcropolisRpcSvc_HostRestoreVmLocality_Handler,
		"WatchCallback":                           _AcropolisRpcSvc_WatchCallback_Handler,
		"EnterMaintenanceModeCheck":               _AcropolisRpcSvc_EnterMaintenanceModeCheck_Handler,
		"SchedulerSegmentAssignmentGet":           _AcropolisRpcSvc_SchedulerSegmentAssignmentGet_Handler,
		"ParcelsCreate":                           _AcropolisRpcSvc_ParcelsCreate_Handler,
		"ParcelDelete":                            _AcropolisRpcSvc_ParcelDelete_Handler,
		"LazanParcelUpdate":                       _AcropolisRpcSvc_LazanParcelUpdate_Handler,
		"LazanGetVMsOnHost":                       _AcropolisRpcSvc_LazanGetVMsOnHost_Handler,
		"LazanSetHostFailures":                    _AcropolisRpcSvc_LazanSetHostFailures_Handler,
		"LazanAssignSegments":                     _AcropolisRpcSvc_LazanAssignSegments_Handler,
		"LazanNotifyFailoverComplete":             _AcropolisRpcSvc_LazanNotifyFailoverComplete_Handler,
		"LazanNotifyPowerTransition":              _AcropolisRpcSvc_LazanNotifyPowerTransition_Handler,
		"LazanCompleteMigrateVm":                  _AcropolisRpcSvc_LazanCompleteMigrateVm_Handler,
		"LazanIsTaskPending":                      _AcropolisRpcSvc_LazanIsTaskPending_Handler,
		"LazanGetEntityParcels":                   _AcropolisRpcSvc_LazanGetEntityParcels_Handler,
		"LazanAffinityHAComplianceCheck":          _AcropolisRpcSvc_LazanAffinityHAComplianceCheck_Handler,
		"LazanCheckCurrentNodeFailures":           _AcropolisRpcSvc_LazanCheckCurrentNodeFailures_Handler,
		"LazanIsFailoverInProgress":               _AcropolisRpcSvc_LazanIsFailoverInProgress_Handler,
		"LazanScheduleVm":                         _AcropolisRpcSvc_LazanScheduleVm_Handler,
		"LazanMaybeUpdateAffinity":                _AcropolisRpcSvc_LazanMaybeUpdateAffinity_Handler,
		"LazanGetSegmentAssignment":               _AcropolisRpcSvc_LazanGetSegmentAssignment_Handler,
		"LazanGetHighPriorityHosts":               _AcropolisRpcSvc_LazanGetHighPriorityHosts_Handler,
		"LazanGetSchedulerState":                  _AcropolisRpcSvc_LazanGetSchedulerState_Handler,
		"LazanGetVmParcels":                       _AcropolisRpcSvc_LazanGetVmParcels_Handler,
		"LazanGetEntityNodes":                     _AcropolisRpcSvc_LazanGetEntityNodes_Handler,
		"LazanGetMigrateDestination":              _AcropolisRpcSvc_LazanGetMigrateDestination_Handler,
		"GetVmsToReboot":                          _AcropolisRpcSvc_GetVmsToReboot_Handler,
		"ReservePerHostMemory":                    _AcropolisRpcSvc_ReservePerHostMemory_Handler,
		"ClusterVswitchCreate":                    _AcropolisRpcSvc_ClusterVswitchCreate_Handler,
		"ClusterVswitchUpdate":                    _AcropolisRpcSvc_ClusterVswitchUpdate_Handler,
		"ClusterVswitchGet":                       _AcropolisRpcSvc_ClusterVswitchGet_Handler,
		"ClusterVswitchDelete":                    _AcropolisRpcSvc_ClusterVswitchDelete_Handler,
		"DistributedVswitchValidate":              _AcropolisRpcSvc_DistributedVswitchValidate_Handler,
		"DistributedVswitchCreate":                _AcropolisRpcSvc_DistributedVswitchCreate_Handler,
		"DistributedVswitchUpdate":                _AcropolisRpcSvc_DistributedVswitchUpdate_Handler,
		"DistributedVswitchGet":                   _AcropolisRpcSvc_DistributedVswitchGet_Handler,
		"DistributedVswitchDelete":                _AcropolisRpcSvc_DistributedVswitchDelete_Handler,
		"MigrateBridgeToDistributedVswitch":       _AcropolisRpcSvc_MigrateBridgeToDistributedVswitch_Handler,
		"VmEventAddOnHost":                        _AcropolisRpcSvc_VmEventAddOnHost_Handler,
		"VmEventDeleteOnHost":                     _AcropolisRpcSvc_VmEventDeleteOnHost_Handler,
		"AtlasConfigGet":                          _AcropolisRpcSvc_AtlasConfigGet_Handler,
		"AtlasConfigUpdate":                       _AcropolisRpcSvc_AtlasConfigUpdate_Handler,
		"UpdateVmDbState":                         _AcropolisRpcSvc_UpdateVmDbState_Handler,
		"VmSyncRepEnable":                         _AcropolisRpcSvc_VmSyncRepEnable_Handler,
		"VmSyncRepMigrate":                        _AcropolisRpcSvc_VmSyncRepMigrate_Handler,
		"VmSyncRepConfigUpdate":                   _AcropolisRpcSvc_VmSyncRepConfigUpdate_Handler,
		"DormantVmDiskDelete":                     _AcropolisRpcSvc_DormantVmDiskDelete_Handler,
		"DormantVmGet":                            _AcropolisRpcSvc_DormantVmGet_Handler,
		"VmSpecGet":                               _AcropolisRpcSvc_VmSpecGet_Handler,
		"DormantVmStateGet":                       _AcropolisRpcSvc_DormantVmStateGet_Handler,
		"VmSyncRepReplicate":                      _AcropolisRpcSvc_VmSyncRepReplicate_Handler,
		"VmCrossClusterLiveMigrate":               _AcropolisRpcSvc_VmCrossClusterLiveMigrate_Handler,
		"PrepareVmCrossClusterLiveMigrate":        _AcropolisRpcSvc_PrepareVmCrossClusterLiveMigrate_Handler,
		"CleanupPrepareVmCrossClusterLiveMigrate": _AcropolisRpcSvc_CleanupPrepareVmCrossClusterLiveMigrate_Handler,
		"PrechecksCrossClusterLiveMigrate":        _AcropolisRpcSvc_PrechecksCrossClusterLiveMigrate_Handler,
		"PrechecksCrossClusterLiveMigrateSync":    _AcropolisRpcSvc_PrechecksCrossClusterLiveMigrateSync_Handler,
		"VmDisableUpdate":                         _AcropolisRpcSvc_VmDisableUpdate_Handler,
		"VpnLbRoutePrefixUpdate":                  _AcropolisRpcSvc_VpnLbRoutePrefixUpdate_Handler,
		"NodeResourceAllocation":                  _AcropolisRpcSvc_NodeResourceAllocation_Handler,
		"HostSwapAttach":                          _AcropolisRpcSvc_HostSwapAttach_Handler,
		"HostSwapDetach":                          _AcropolisRpcSvc_HostSwapDetach_Handler,
		"VmRemoteForcePowerOff":                   _AcropolisRpcSvc_VmRemoteForcePowerOff_Handler,
		"CleanupCrossClusterLiveMigrateSource":    _AcropolisRpcSvc_CleanupCrossClusterLiveMigrateSource_Handler,
		"VmGpuGetCompatibleHosts":                 _AcropolisRpcSvc_VmGpuGetCompatibleHosts_Handler,
		"VmUpdateIncarnationIds":                  _AcropolisRpcSvc_VmUpdateIncarnationIds_Handler,
	},
}

func NewAcropolisRpcSvc(impl IAcropolisRpcSvc) *util_net.Service {
	return &util_net.Service{
		Desc: &_AcropolisRpcSvcDesc,
		Impl: impl,
	}
}

type IAcropolisRpcClient interface {
	BatchRequest(*BatchRequestArg) (*BatchRequestRet, error)
	SnapshotCreate(*SnapshotCreateArg) (*SnapshotCreateRet, error)
	SnapshotDelete(*SnapshotDeleteArg) (*SnapshotDeleteRet, error)
	SnapshotGet(*SnapshotGetArg) (*SnapshotGetRet, error)
	SnapshotList(*SnapshotListArg) (*SnapshotListRet, error)
	VmSnapshotList(*VmSnapshotListArg) (*VmSnapshotListRet, error)
	TaskPoll(*TaskPollArg) (*TaskPollRet, error)
	TaskList(*TaskListArg) (*TaskListRet, error)
	TaskGet(*TaskGetArg) (*TaskGetRet, error)
	VmCreate(*VmCreateArg) (*VmCreateRet, error)
	VmGet(*VmGetArg) (*VmGetRet, error)
	VmClone(*VmCloneArg) (*VmCloneRet, error)
	VmRestore(*VmRestoreArg) (*VmRestoreRet, error)
	VmMigrate(*VmMigrateArg) (*VmMigrateRet, error)
	VmMigrateAbort(*VmMigrateAbortArg) (*VmMigrateAbortRet, error)
	VmUpdate(*VmUpdateArg) (*VmUpdateRet, error)
	VmAffinityUpdate(*VmMigrateArg) (*VmAffinityUpdateRet, error)
	VmSetPowerState(*VmSetPowerStateArg) (*VmSetPowerStateRet, error)
	VmForcePowerOff(*VmForcePowerOffArg) (*VmForcePowerOffRet, error)
	VmDelete(*VmDeleteArg) (*VmDeleteRet, error)
	VmList(*VmListArg) (*VmListRet, error)
	VmDiskCreate(*VmDiskCreateArg) (*VmDiskCreateRet, error)
	VmDiskGet(*VmDiskGetArg) (*VmDiskGetRet, error)
	VmDiskSpecCloneGet(*VmDiskSpecCloneGetArg) (*VmDiskSpecCloneGetRet, error)
	VmDiskUpdate(*VmDiskUpdateArg) (*VmDiskUpdateRet, error)
	VmChangeDiskContainerUpdate(*VmChangeDiskContainerUpdateArg) (*VmChangeDiskContainerUpdateRet, error)
	VmDiskDelete(*VmDiskDeleteArg) (*VmDiskDeleteRet, error)
	VmDiskList(*VmDiskListArg) (*VmDiskListRet, error)
	VmAttachVg(*VmAttachVgArg) (*VmAttachVgRet, error)
	VmNicCreate(*VmNicCreateArg) (*VmNicCreateRet, error)
	VmNicGet(*VmNicGetArg) (*VmNicGetRet, error)
	VmNicUpdate(*VmNicUpdateArg) (*VmNicUpdateRet, error)
	VmNicDelete(*VmNicDeleteArg) (*VmNicDeleteRet, error)
	VmNicList(*VmNicListArg) (*VmNicListRet, error)
	VmFlushLearnedIPs(*VmFlushLearnedIPsArg) (*VmFlushLearnedIPsRet, error)
	VmAffinityNodeGet(*VmAffinityNodeGetArg) (*VmAffinityNodeGetRet, error)
	ComponentMemoryReservationsGet(*ComponentMemoryReservationsGetArg) (*ComponentMemoryReservationsGetRet, error)
	MicrosegUpdate(*MicrosegUpdateArg) (*MicrosegUpdateRet, error)
	MicrosegUpdateGenNum(*MicrosegUpdateGenNumArg) (*MicrosegUpdateGenNumRet, error)
	MicrosegDelete(*MicrosegDeleteArg) (*MicrosegDeleteRet, error)
	MicrosegBatchUpdate(*MicrosegBatchUpdateArg) (*MicrosegBatchUpdateRet, error)
	MicrosegMonitorEnable(*MicrosegMonitorEnableArg) (*MicrosegMonitorEnableRet, error)
	MicrosegConfigGet(*MicrosegConfigGetArg) (*MicrosegConfigGetRet, error)
	MicrosegConfigSet(*MicrosegConfigSetArg) (*MicrosegConfigSetRet, error)
	MicrosegEnablementPreCheck(*MicrosegEnablementPreCheckArg) (*MicrosegEnablementPreCheckRet, error)
	MicrosegSecurityMonitoringConfigSet(*MicrosegSecurityMonitoringConfigSetArg) (*MicrosegSecurityMonitoringConfigSetRet, error)
	Echo(*EchoArg) (*EchoRet, error)
	NetworkCreate(*NetworkCreateArg) (*NetworkCreateRet, error)
	NetworkGet(*NetworkGetArg) (*NetworkGetRet, error)
	NetworkUpdate(*NetworkUpdateArg) (*NetworkUpdateRet, error)
	NetworkDelete(*NetworkDeleteArg) (*NetworkDeleteRet, error)
	NetworkList(*NetworkListArg) (*NetworkListRet, error)
	NetworkReserveIp(*NetworkReserveIpArg) (*NetworkReserveIpRet, error)
	NetworkAddressTableGet(*NetworkAddressTableGetArg) (*NetworkAddressTableGetRet, error)
	NetworkFunctionChainConfigCreate(*NetworkFunctionChainConfigCreateArg) (*NetworkFunctionChainConfigCreateRet, error)
	NetworkFunctionChainConfigGet(*NetworkFunctionChainConfigGetArg) (*NetworkFunctionChainConfigGetRet, error)
	NetworkFunctionChainConfigUpdate(*NetworkFunctionChainConfigUpdateArg) (*NetworkFunctionChainConfigUpdateRet, error)
	NetworkFunctionChainConfigDelete(*NetworkFunctionChainConfigDeleteArg) (*NetworkFunctionChainConfigDeleteRet, error)
	NetworkFunctionChainConfigList(*NetworkFunctionChainConfigListArg) (*NetworkFunctionChainConfigListRet, error)
	EnterMaintenanceMode(*EnterMaintenanceModeArg) (*EnterMaintenanceModeRet, error)
	ExitMaintenanceMode(*ExitMaintenanceModeArg) (*ExitMaintenanceModeRet, error)
	ExitMaintenanceModeAsync(*ExitMaintenanceModeArg) (*ExitMaintenanceModeAsyncRet, error)
	ImageCreate(*ImageCreateArg) (*ImageCreateRet, error)
	ImageDelete(*ImageDeleteArg) (*ImageDeleteRet, error)
	ImageGet(*ImageGetArg) (*ImageGetRet, error)
	ImageUpdate(*ImageUpdateArg) (*ImageUpdateRet, error)
	VolumeGroupCreate(*VolumeGroupCreateArg) (*VolumeGroupCreateRet, error)
	VolumeGroupGet(*VolumeGroupGetArg) (*VolumeGroupGetRet, error)
	VolumeGroupUpdate(*VolumeGroupUpdateArg) (*VolumeGroupUpdateRet, error)
	VolumeGroupDelete(*VolumeGroupDeleteArg) (*VolumeGroupDeleteRet, error)
	VolumeGroupClone(*VolumeGroupCloneArg) (*VolumeGroupCloneRet, error)
	VolumeDiskCreate(*VolumeDiskCreateArg) (*VolumeDiskCreateRet, error)
	VolumeDiskDelete(*VolumeDiskDeleteArg) (*VolumeDiskDeleteRet, error)
	VolumeDiskUpdate(*VolumeDiskUpdateArg) (*VolumeDiskUpdateRet, error)
	VolumeGroupAttachExternal(*VolumeGroupAttachExternalArg) (*VolumeGroupAttachExternalRet, error)
	VolumeGroupAttachIscsiClient(*VolumeGroupAttachIscsiClientArg) (*VolumeGroupAttachIscsiClientRet, error)
	VolumeGroupUpdateExternal(*VolumeGroupUpdateExternalArg) (*VolumeGroupUpdateExternalRet, error)
	VolumeGroupAttachVm(*VolumeGroupAttachVmArg) (*VolumeGroupAttachVmRet, error)
	IscsiClientGet(*IscsiClientGetArg) (*IscsiClientGetRet, error)
	IscsiClientUpdate(*IscsiClientUpdateArg) (*IscsiClientUpdateRet, error)
	IscsiClientUpdateAsync(*IscsiClientUpdateAsyncArg) (*IscsiClientUpdateAsyncRet, error)
	HaUpdate(*HaUpdateArg) (*HaUpdateRet, error)
	HaGet(*HaGetArg) (*HaGetRet, error)
	ParcelGet(*ParcelGetArg) (*ParcelGetRet, error)
	StretchGet(*StretchGetArg) (*StretchGetRet, error)
	StretchConfigure(*StretchConfigureArg) (*StretchConfigureRet, error)
	StretchRecover(*StretchRecoverArg) (*StretchRecoverRet, error)
	VmGroupCreate(*VmGroupCreateArg) (*VmGroupCreateRet, error)
	VmGroupDelete(*VmGroupDeleteArg) (*VmGroupDeleteRet, error)
	VmGroupList(*VmGroupListArg) (*VmGroupListRet, error)
	VmGroupGet(*VmGroupGetArg) (*VmGroupGetRet, error)
	VmGroupUpdate(*VmGroupUpdateArg) (*VmGroupUpdateRet, error)
	VmGroupListVm(*VmGroupListVmArg) (*VmGroupListVmRet, error)
	UpdateAffinityRule(*UpdateAffinityRuleArg) (*UpdateAffinityRuleRet, error)
	ValidateTaskRequest(*ValidateTaskRequestArg) (*ValidateTaskRequestRet, error)
	VmRegister(*VmRegisterArg) (*VmRegisterRet, error)
	HostRestartAllVms(*HostRestartAllVmsArg) (*HostRestartAllVmsRet, error)
	RestartVmGroup(*RestartVmGroupArg) (*RestartVmGroupRet, error)
	StartHAFailover(*StartHAFailoverArg) (*StartHAFailoverRet, error)
	VmForceCompleteMigration(*VmForceCompleteMigrationArg) (*VmForceCompleteMigrationRet, error)
	VolumeGroupRegister(*VolumeGroupRegisterArg) (*VolumeGroupRegisterRet, error)
	SchedulerNodeGet(*SchedulerNodeGetArg) (*SchedulerNodeGetRet, error)
	HaFailover(*HaFailoverArg) (*HaFailoverRet, error)
	HostRestoreVmLocality(*HostRestoreVmLocalityArg) (*HostRestoreVmLocalityRet, error)
	WatchCallback(*DbKey) (*WatchCallbackRet, error)
	EnterMaintenanceModeCheck(*EnterMaintenanceModeCheckArg) (*EnterMaintenanceModeCheckRet, error)
	SchedulerSegmentAssignmentGet(*SchedulerSegmentAssignmentGetArg) (*SchedulerSegmentAssignmentGetRet, error)
	ParcelsCreate(*ParcelsCreateArg) (*ParcelsCreateRet, error)
	ParcelDelete(*ParcelDeleteArg) (*ParcelDeleteRet, error)
	LazanParcelUpdate(*LazanParcelUpdateArg) (*LazanParcelUpdateRet, error)
	LazanGetVMsOnHost(*LazanGetVMsOnHostArg) (*LazanGetVMsOnHostRet, error)
	LazanSetHostFailures(*LazanSetHostFailuresArg) (*LazanSetHostFailuresRet, error)
	LazanAssignSegments(*LazanAssignSegmentsArg) (*LazanAssignSegmentsRet, error)
	LazanNotifyFailoverComplete(*LazanNotifyFailoverCompleteArg) (*LazanNotifyFailoverCompleteRet, error)
	LazanNotifyPowerTransition(*LazanNotifyPowerTransitionArg) (*LazanNotifyPowerTransitionRet, error)
	LazanCompleteMigrateVm(*LazanCompleteMigrateVmArg) (*LazanCompleteMigrateVmRet, error)
	LazanIsTaskPending(*LazanIsTaskPendingArg) (*LazanIsTaskPendingRet, error)
	LazanGetEntityParcels(*LazanGetEntityParcelsArg) (*LazanGetEntityParcelsRet, error)
	LazanAffinityHAComplianceCheck(*LazanAffinityHAComplianceCheckArg) (*LazanAffinityHAComplianceCheckRet, error)
	LazanCheckCurrentNodeFailures(*LazanCheckCurrentNodeFailuresArg) (*LazanCheckCurrentNodeFailuresRet, error)
	LazanIsFailoverInProgress(*LazanIsFailoverInProgressArg) (*LazanIsFailoverInProgressRet, error)
	LazanScheduleVm(*LazanScheduleVmArg) (*LazanScheduleVmRet, error)
	LazanMaybeUpdateAffinity(*LazanMaybeUpdateAffinityArg) (*LazanMaybeUpdateAffinityRet, error)
	LazanGetSegmentAssignment(*LazanGetSegmentAssignmentArg) (*LazanGetSegmentAssignmentRet, error)
	LazanGetHighPriorityHosts(*LazanGetHighPriorityHostsArg) (*LazanGetHighPriorityHostsRet, error)
	LazanGetSchedulerState(*LazanGetSchedulerStateArg) (*LazanGetSchedulerStateRet, error)
	LazanGetVmParcels(*LazanGetVmParcelsArg) (*LazanGetVmParcelsRet, error)
	LazanGetEntityNodes(*LazanGetEntityNodesArg) (*LazanGetEntityNodesRet, error)
	LazanGetMigrateDestination(*LazanGetMigrateDestinationArg) (*LazanGetMigrateDestinationRet, error)
	GetVmsToReboot(*GetVmsToRebootArg) (*GetVmsToRebootRet, error)
	ReservePerHostMemory(*ReservePerHostMemoryArg) (*ReservePerHostMemoryRet, error)
	ClusterVswitchCreate(*ClusterVswitchCreateArg) (*ClusterVswitchCreateRet, error)
	ClusterVswitchUpdate(*ClusterVswitchUpdateArg) (*ClusterVswitchUpdateRet, error)
	ClusterVswitchGet(*ClusterVswitchGetArg) (*ClusterVswitchGetRet, error)
	ClusterVswitchDelete(*ClusterVswitchDeleteArg) (*ClusterVswitchDeleteRet, error)
	DistributedVswitchValidate(*DistributedVswitchValidateArg) (*DistributedVswitchValidateRet, error)
	DistributedVswitchCreate(*DistributedVswitchCreateArg) (*DistributedVswitchCreateRet, error)
	DistributedVswitchUpdate(*DistributedVswitchUpdateArg) (*DistributedVswitchUpdateRet, error)
	DistributedVswitchGet(*DistributedVswitchGetArg) (*DistributedVswitchGetRet, error)
	DistributedVswitchDelete(*DistributedVswitchDeleteArg) (*DistributedVswitchDeleteRet, error)
	MigrateBridgeToDistributedVswitch(*MigrateBridgeToDistributedVswitchArg) (*MigrateBridgeToDistributedVswitchRet, error)
	VmEventAddOnHost(*VmEventAddOnHostArg) (*VmEventAddOnHostRet, error)
	VmEventDeleteOnHost(*VmEventDeleteOnHostArg) (*VmEventDeleteOnHostRet, error)
	AtlasConfigGet(*AtlasConfigGetArg) (*AtlasConfigGetRet, error)
	AtlasConfigUpdate(*AtlasConfigUpdateArg) (*AtlasConfigUpdateRet, error)
	UpdateVmDbState(*UpdateVmDbStateArg) (*UpdateVmDbStateRet, error)
	VmSyncRepEnable(*VmSyncRepEnableArg) (*VmSyncRepEnableRet, error)
	VmSyncRepMigrate(*VmSyncRepMigrateArg) (*VmSyncRepMigrateRet, error)
	VmSyncRepConfigUpdate(*VmSyncRepConfigUpdateArg) (*VmSyncRepConfigUpdateRet, error)
	DormantVmDiskDelete(*DormantVmDiskDeleteArg) (*DormantVmDiskDeleteRet, error)
	DormantVmGet(*DormantVmGetArg) (*DormantVmGetRet, error)
	VmSpecGet(*VmSpecGetArg) (*VmSpecGetRet, error)
	DormantVmStateGet(*DormantVmStateGetArg) (*DormantVmStateGetRet, error)
	VmSyncRepReplicate(*VmSyncRepReplicateArg) (*VmSyncRepReplicateRet, error)
	VmCrossClusterLiveMigrate(*VmCrossClusterLiveMigrateArg) (*VmCrossClusterLiveMigrateRet, error)
	PrepareVmCrossClusterLiveMigrate(*PrepareVmCrossClusterLiveMigrateArg) (*PrepareVmCrossClusterLiveMigrateRet, error)
	CleanupPrepareVmCrossClusterLiveMigrate(*CleanupPrepareVmCrossClusterLiveMigrateArg) (*CleanupPrepareVmCrossClusterLiveMigrateRet, error)
	PrechecksCrossClusterLiveMigrate(*PrechecksCrossClusterLiveMigrateArg) (*PrechecksCrossClusterLiveMigrateRet, error)
	PrechecksCrossClusterLiveMigrateSync(*PrechecksCrossClusterLiveMigrateSyncArg) (*PrechecksCrossClusterLiveMigrateSyncRet, error)
	VmDisableUpdate(*VmDisableUpdateArg) (*VmDisableUpdateRet, error)
	VpnLbRoutePrefixUpdate(*VpnLbRoutePrefixUpdateArg) (*VpnLbRoutePrefixUpdateRet, error)
	NodeResourceAllocation(*NodeResourceAllocationArg) (*NodeResourceAllocationRet, error)
	HostSwapAttach(*HostSwapAttachArg) (*HostSwapAttachRet, error)
	HostSwapDetach(*HostSwapDetachArg) (*HostSwapDetachRet, error)
	VmRemoteForcePowerOff(*VmRemoteForcePowerOffArg) (*VmRemoteForcePowerOffRet, error)
	CleanupCrossClusterLiveMigrateSource(*CleanupCrossClusterLiveMigrateSourceArg) (*CleanupCrossClusterLiveMigrateSourceRet, error)
	VmGpuGetCompatibleHosts(*VmGpuGetCompatibleHostsArg) (*VmGpuGetCompatibleHostsRet, error)
	VmUpdateIncarnationIds(*VmUpdateIncarnationIdsArg) (*VmUpdateIncarnationIdsRet, error)
}

type AcropolisRpcClient struct {
	Impl util_net.ProtobufRPCClientIfc
}

func NewAcropolisRpcClient(impl util_net.ProtobufRPCClientIfc) IAcropolisRpcClient {
	return &AcropolisRpcClient{
		Impl: impl,
	}
}

func (client *AcropolisRpcClient) BatchRequest(
	arg *BatchRequestArg) (
	*BatchRequestRet, error) {

	ret := &BatchRequestRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "BatchRequest", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) SnapshotCreate(
	arg *SnapshotCreateArg) (
	*SnapshotCreateRet, error) {

	ret := &SnapshotCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "SnapshotCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) SnapshotDelete(
	arg *SnapshotDeleteArg) (
	*SnapshotDeleteRet, error) {

	ret := &SnapshotDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "SnapshotDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) SnapshotGet(
	arg *SnapshotGetArg) (
	*SnapshotGetRet, error) {

	ret := &SnapshotGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "SnapshotGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) SnapshotList(
	arg *SnapshotListArg) (
	*SnapshotListRet, error) {

	ret := &SnapshotListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "SnapshotList", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmSnapshotList(
	arg *VmSnapshotListArg) (
	*VmSnapshotListRet, error) {

	ret := &VmSnapshotListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmSnapshotList", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) TaskPoll(
	arg *TaskPollArg) (
	*TaskPollRet, error) {

	ret := &TaskPollRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "TaskPoll", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) TaskList(
	arg *TaskListArg) (
	*TaskListRet, error) {

	ret := &TaskListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "TaskList", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) TaskGet(
	arg *TaskGetArg) (
	*TaskGetRet, error) {

	ret := &TaskGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "TaskGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmCreate(
	arg *VmCreateArg) (
	*VmCreateRet, error) {

	ret := &VmCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmGet(
	arg *VmGetArg) (
	*VmGetRet, error) {

	ret := &VmGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmClone(
	arg *VmCloneArg) (
	*VmCloneRet, error) {

	ret := &VmCloneRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmClone", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmRestore(
	arg *VmRestoreArg) (
	*VmRestoreRet, error) {

	ret := &VmRestoreRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmRestore", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmMigrate(
	arg *VmMigrateArg) (
	*VmMigrateRet, error) {

	ret := &VmMigrateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmMigrate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmMigrateAbort(
	arg *VmMigrateAbortArg) (
	*VmMigrateAbortRet, error) {

	ret := &VmMigrateAbortRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmMigrateAbort", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmUpdate(
	arg *VmUpdateArg) (
	*VmUpdateRet, error) {

	ret := &VmUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmAffinityUpdate(
	arg *VmMigrateArg) (
	*VmAffinityUpdateRet, error) {

	ret := &VmAffinityUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmAffinityUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmSetPowerState(
	arg *VmSetPowerStateArg) (
	*VmSetPowerStateRet, error) {

	ret := &VmSetPowerStateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmSetPowerState", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmForcePowerOff(
	arg *VmForcePowerOffArg) (
	*VmForcePowerOffRet, error) {

	ret := &VmForcePowerOffRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmForcePowerOff", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmDelete(
	arg *VmDeleteArg) (
	*VmDeleteRet, error) {

	ret := &VmDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmList(
	arg *VmListArg) (
	*VmListRet, error) {

	ret := &VmListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmList", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmDiskCreate(
	arg *VmDiskCreateArg) (
	*VmDiskCreateRet, error) {

	ret := &VmDiskCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmDiskCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmDiskGet(
	arg *VmDiskGetArg) (
	*VmDiskGetRet, error) {

	ret := &VmDiskGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmDiskGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmDiskSpecCloneGet(
	arg *VmDiskSpecCloneGetArg) (
	*VmDiskSpecCloneGetRet, error) {

	ret := &VmDiskSpecCloneGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmDiskSpecCloneGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmDiskUpdate(
	arg *VmDiskUpdateArg) (
	*VmDiskUpdateRet, error) {

	ret := &VmDiskUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmDiskUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmChangeDiskContainerUpdate(
	arg *VmChangeDiskContainerUpdateArg) (
	*VmChangeDiskContainerUpdateRet, error) {

	ret := &VmChangeDiskContainerUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmChangeDiskContainerUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmDiskDelete(
	arg *VmDiskDeleteArg) (
	*VmDiskDeleteRet, error) {

	ret := &VmDiskDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmDiskDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmDiskList(
	arg *VmDiskListArg) (
	*VmDiskListRet, error) {

	ret := &VmDiskListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmDiskList", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmAttachVg(
	arg *VmAttachVgArg) (
	*VmAttachVgRet, error) {

	ret := &VmAttachVgRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmAttachVg", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmNicCreate(
	arg *VmNicCreateArg) (
	*VmNicCreateRet, error) {

	ret := &VmNicCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmNicCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmNicGet(
	arg *VmNicGetArg) (
	*VmNicGetRet, error) {

	ret := &VmNicGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmNicGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmNicUpdate(
	arg *VmNicUpdateArg) (
	*VmNicUpdateRet, error) {

	ret := &VmNicUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmNicUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmNicDelete(
	arg *VmNicDeleteArg) (
	*VmNicDeleteRet, error) {

	ret := &VmNicDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmNicDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmNicList(
	arg *VmNicListArg) (
	*VmNicListRet, error) {

	ret := &VmNicListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmNicList", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmFlushLearnedIPs(
	arg *VmFlushLearnedIPsArg) (
	*VmFlushLearnedIPsRet, error) {

	ret := &VmFlushLearnedIPsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmFlushLearnedIPs", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmAffinityNodeGet(
	arg *VmAffinityNodeGetArg) (
	*VmAffinityNodeGetRet, error) {

	ret := &VmAffinityNodeGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmAffinityNodeGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ComponentMemoryReservationsGet(
	arg *ComponentMemoryReservationsGetArg) (
	*ComponentMemoryReservationsGetRet, error) {

	ret := &ComponentMemoryReservationsGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ComponentMemoryReservationsGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) MicrosegUpdate(
	arg *MicrosegUpdateArg) (
	*MicrosegUpdateRet, error) {

	ret := &MicrosegUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "MicrosegUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) MicrosegUpdateGenNum(
	arg *MicrosegUpdateGenNumArg) (
	*MicrosegUpdateGenNumRet, error) {

	ret := &MicrosegUpdateGenNumRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "MicrosegUpdateGenNum", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) MicrosegDelete(
	arg *MicrosegDeleteArg) (
	*MicrosegDeleteRet, error) {

	ret := &MicrosegDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "MicrosegDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) MicrosegBatchUpdate(
	arg *MicrosegBatchUpdateArg) (
	*MicrosegBatchUpdateRet, error) {

	ret := &MicrosegBatchUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "MicrosegBatchUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) MicrosegMonitorEnable(
	arg *MicrosegMonitorEnableArg) (
	*MicrosegMonitorEnableRet, error) {

	ret := &MicrosegMonitorEnableRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "MicrosegMonitorEnable", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) MicrosegConfigGet(
	arg *MicrosegConfigGetArg) (
	*MicrosegConfigGetRet, error) {

	ret := &MicrosegConfigGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "MicrosegConfigGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) MicrosegConfigSet(
	arg *MicrosegConfigSetArg) (
	*MicrosegConfigSetRet, error) {

	ret := &MicrosegConfigSetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "MicrosegConfigSet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) MicrosegEnablementPreCheck(
	arg *MicrosegEnablementPreCheckArg) (
	*MicrosegEnablementPreCheckRet, error) {

	ret := &MicrosegEnablementPreCheckRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "MicrosegEnablementPreCheck", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) MicrosegSecurityMonitoringConfigSet(
	arg *MicrosegSecurityMonitoringConfigSetArg) (
	*MicrosegSecurityMonitoringConfigSetRet, error) {

	ret := &MicrosegSecurityMonitoringConfigSetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "MicrosegSecurityMonitoringConfigSet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) Echo(
	arg *EchoArg) (
	*EchoRet, error) {

	ret := &EchoRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "Echo", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkCreate(
	arg *NetworkCreateArg) (
	*NetworkCreateRet, error) {

	ret := &NetworkCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkGet(
	arg *NetworkGetArg) (
	*NetworkGetRet, error) {

	ret := &NetworkGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkUpdate(
	arg *NetworkUpdateArg) (
	*NetworkUpdateRet, error) {

	ret := &NetworkUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkDelete(
	arg *NetworkDeleteArg) (
	*NetworkDeleteRet, error) {

	ret := &NetworkDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkList(
	arg *NetworkListArg) (
	*NetworkListRet, error) {

	ret := &NetworkListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkList", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkReserveIp(
	arg *NetworkReserveIpArg) (
	*NetworkReserveIpRet, error) {

	ret := &NetworkReserveIpRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkReserveIp", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkAddressTableGet(
	arg *NetworkAddressTableGetArg) (
	*NetworkAddressTableGetRet, error) {

	ret := &NetworkAddressTableGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkAddressTableGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkFunctionChainConfigCreate(
	arg *NetworkFunctionChainConfigCreateArg) (
	*NetworkFunctionChainConfigCreateRet, error) {

	ret := &NetworkFunctionChainConfigCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkFunctionChainConfigCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkFunctionChainConfigGet(
	arg *NetworkFunctionChainConfigGetArg) (
	*NetworkFunctionChainConfigGetRet, error) {

	ret := &NetworkFunctionChainConfigGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkFunctionChainConfigGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkFunctionChainConfigUpdate(
	arg *NetworkFunctionChainConfigUpdateArg) (
	*NetworkFunctionChainConfigUpdateRet, error) {

	ret := &NetworkFunctionChainConfigUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkFunctionChainConfigUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkFunctionChainConfigDelete(
	arg *NetworkFunctionChainConfigDeleteArg) (
	*NetworkFunctionChainConfigDeleteRet, error) {

	ret := &NetworkFunctionChainConfigDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkFunctionChainConfigDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NetworkFunctionChainConfigList(
	arg *NetworkFunctionChainConfigListArg) (
	*NetworkFunctionChainConfigListRet, error) {

	ret := &NetworkFunctionChainConfigListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NetworkFunctionChainConfigList", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) EnterMaintenanceMode(
	arg *EnterMaintenanceModeArg) (
	*EnterMaintenanceModeRet, error) {

	ret := &EnterMaintenanceModeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "EnterMaintenanceMode", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ExitMaintenanceMode(
	arg *ExitMaintenanceModeArg) (
	*ExitMaintenanceModeRet, error) {

	ret := &ExitMaintenanceModeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ExitMaintenanceMode", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ExitMaintenanceModeAsync(
	arg *ExitMaintenanceModeArg) (
	*ExitMaintenanceModeAsyncRet, error) {

	ret := &ExitMaintenanceModeAsyncRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ExitMaintenanceModeAsync", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ImageCreate(
	arg *ImageCreateArg) (
	*ImageCreateRet, error) {

	ret := &ImageCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ImageCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ImageDelete(
	arg *ImageDeleteArg) (
	*ImageDeleteRet, error) {

	ret := &ImageDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ImageDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ImageGet(
	arg *ImageGetArg) (
	*ImageGetRet, error) {

	ret := &ImageGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ImageGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ImageUpdate(
	arg *ImageUpdateArg) (
	*ImageUpdateRet, error) {

	ret := &ImageUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ImageUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeGroupCreate(
	arg *VolumeGroupCreateArg) (
	*VolumeGroupCreateRet, error) {

	ret := &VolumeGroupCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeGroupCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeGroupGet(
	arg *VolumeGroupGetArg) (
	*VolumeGroupGetRet, error) {

	ret := &VolumeGroupGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeGroupGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeGroupUpdate(
	arg *VolumeGroupUpdateArg) (
	*VolumeGroupUpdateRet, error) {

	ret := &VolumeGroupUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeGroupUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeGroupDelete(
	arg *VolumeGroupDeleteArg) (
	*VolumeGroupDeleteRet, error) {

	ret := &VolumeGroupDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeGroupDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeGroupClone(
	arg *VolumeGroupCloneArg) (
	*VolumeGroupCloneRet, error) {

	ret := &VolumeGroupCloneRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeGroupClone", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeDiskCreate(
	arg *VolumeDiskCreateArg) (
	*VolumeDiskCreateRet, error) {

	ret := &VolumeDiskCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeDiskCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeDiskDelete(
	arg *VolumeDiskDeleteArg) (
	*VolumeDiskDeleteRet, error) {

	ret := &VolumeDiskDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeDiskDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeDiskUpdate(
	arg *VolumeDiskUpdateArg) (
	*VolumeDiskUpdateRet, error) {

	ret := &VolumeDiskUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeDiskUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeGroupAttachExternal(
	arg *VolumeGroupAttachExternalArg) (
	*VolumeGroupAttachExternalRet, error) {

	ret := &VolumeGroupAttachExternalRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeGroupAttachExternal", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeGroupAttachIscsiClient(
	arg *VolumeGroupAttachIscsiClientArg) (
	*VolumeGroupAttachIscsiClientRet, error) {

	ret := &VolumeGroupAttachIscsiClientRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeGroupAttachIscsiClient", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeGroupUpdateExternal(
	arg *VolumeGroupUpdateExternalArg) (
	*VolumeGroupUpdateExternalRet, error) {

	ret := &VolumeGroupUpdateExternalRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeGroupUpdateExternal", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeGroupAttachVm(
	arg *VolumeGroupAttachVmArg) (
	*VolumeGroupAttachVmRet, error) {

	ret := &VolumeGroupAttachVmRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeGroupAttachVm", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) IscsiClientGet(
	arg *IscsiClientGetArg) (
	*IscsiClientGetRet, error) {

	ret := &IscsiClientGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "IscsiClientGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) IscsiClientUpdate(
	arg *IscsiClientUpdateArg) (
	*IscsiClientUpdateRet, error) {

	ret := &IscsiClientUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "IscsiClientUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) IscsiClientUpdateAsync(
	arg *IscsiClientUpdateAsyncArg) (
	*IscsiClientUpdateAsyncRet, error) {

	ret := &IscsiClientUpdateAsyncRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "IscsiClientUpdateAsync", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) HaUpdate(
	arg *HaUpdateArg) (
	*HaUpdateRet, error) {

	ret := &HaUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "HaUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) HaGet(
	arg *HaGetArg) (
	*HaGetRet, error) {

	ret := &HaGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "HaGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ParcelGet(
	arg *ParcelGetArg) (
	*ParcelGetRet, error) {

	ret := &ParcelGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ParcelGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) StretchGet(
	arg *StretchGetArg) (
	*StretchGetRet, error) {

	ret := &StretchGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "StretchGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) StretchConfigure(
	arg *StretchConfigureArg) (
	*StretchConfigureRet, error) {

	ret := &StretchConfigureRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "StretchConfigure", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) StretchRecover(
	arg *StretchRecoverArg) (
	*StretchRecoverRet, error) {

	ret := &StretchRecoverRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "StretchRecover", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmGroupCreate(
	arg *VmGroupCreateArg) (
	*VmGroupCreateRet, error) {

	ret := &VmGroupCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmGroupCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmGroupDelete(
	arg *VmGroupDeleteArg) (
	*VmGroupDeleteRet, error) {

	ret := &VmGroupDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmGroupDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmGroupList(
	arg *VmGroupListArg) (
	*VmGroupListRet, error) {

	ret := &VmGroupListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmGroupList", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmGroupGet(
	arg *VmGroupGetArg) (
	*VmGroupGetRet, error) {

	ret := &VmGroupGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmGroupGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmGroupUpdate(
	arg *VmGroupUpdateArg) (
	*VmGroupUpdateRet, error) {

	ret := &VmGroupUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmGroupUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmGroupListVm(
	arg *VmGroupListVmArg) (
	*VmGroupListVmRet, error) {

	ret := &VmGroupListVmRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmGroupListVm", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) UpdateAffinityRule(
	arg *UpdateAffinityRuleArg) (
	*UpdateAffinityRuleRet, error) {

	ret := &UpdateAffinityRuleRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "UpdateAffinityRule", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ValidateTaskRequest(
	arg *ValidateTaskRequestArg) (
	*ValidateTaskRequestRet, error) {

	ret := &ValidateTaskRequestRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ValidateTaskRequest", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmRegister(
	arg *VmRegisterArg) (
	*VmRegisterRet, error) {

	ret := &VmRegisterRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmRegister", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) HostRestartAllVms(
	arg *HostRestartAllVmsArg) (
	*HostRestartAllVmsRet, error) {

	ret := &HostRestartAllVmsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "HostRestartAllVms", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) RestartVmGroup(
	arg *RestartVmGroupArg) (
	*RestartVmGroupRet, error) {

	ret := &RestartVmGroupRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "RestartVmGroup", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) StartHAFailover(
	arg *StartHAFailoverArg) (
	*StartHAFailoverRet, error) {

	ret := &StartHAFailoverRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "StartHAFailover", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmForceCompleteMigration(
	arg *VmForceCompleteMigrationArg) (
	*VmForceCompleteMigrationRet, error) {

	ret := &VmForceCompleteMigrationRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmForceCompleteMigration", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VolumeGroupRegister(
	arg *VolumeGroupRegisterArg) (
	*VolumeGroupRegisterRet, error) {

	ret := &VolumeGroupRegisterRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VolumeGroupRegister", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) SchedulerNodeGet(
	arg *SchedulerNodeGetArg) (
	*SchedulerNodeGetRet, error) {

	ret := &SchedulerNodeGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "SchedulerNodeGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) HaFailover(
	arg *HaFailoverArg) (
	*HaFailoverRet, error) {

	ret := &HaFailoverRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "HaFailover", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) HostRestoreVmLocality(
	arg *HostRestoreVmLocalityArg) (
	*HostRestoreVmLocalityRet, error) {

	ret := &HostRestoreVmLocalityRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "HostRestoreVmLocality", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) WatchCallback(
	arg *DbKey) (
	*WatchCallbackRet, error) {

	ret := &WatchCallbackRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "WatchCallback", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) EnterMaintenanceModeCheck(
	arg *EnterMaintenanceModeCheckArg) (
	*EnterMaintenanceModeCheckRet, error) {

	ret := &EnterMaintenanceModeCheckRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "EnterMaintenanceModeCheck", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) SchedulerSegmentAssignmentGet(
	arg *SchedulerSegmentAssignmentGetArg) (
	*SchedulerSegmentAssignmentGetRet, error) {

	ret := &SchedulerSegmentAssignmentGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "SchedulerSegmentAssignmentGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ParcelsCreate(
	arg *ParcelsCreateArg) (
	*ParcelsCreateRet, error) {

	ret := &ParcelsCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ParcelsCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ParcelDelete(
	arg *ParcelDeleteArg) (
	*ParcelDeleteRet, error) {

	ret := &ParcelDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ParcelDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanParcelUpdate(
	arg *LazanParcelUpdateArg) (
	*LazanParcelUpdateRet, error) {

	ret := &LazanParcelUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanParcelUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanGetVMsOnHost(
	arg *LazanGetVMsOnHostArg) (
	*LazanGetVMsOnHostRet, error) {

	ret := &LazanGetVMsOnHostRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanGetVMsOnHost", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanSetHostFailures(
	arg *LazanSetHostFailuresArg) (
	*LazanSetHostFailuresRet, error) {

	ret := &LazanSetHostFailuresRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanSetHostFailures", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanAssignSegments(
	arg *LazanAssignSegmentsArg) (
	*LazanAssignSegmentsRet, error) {

	ret := &LazanAssignSegmentsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanAssignSegments", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanNotifyFailoverComplete(
	arg *LazanNotifyFailoverCompleteArg) (
	*LazanNotifyFailoverCompleteRet, error) {

	ret := &LazanNotifyFailoverCompleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanNotifyFailoverComplete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanNotifyPowerTransition(
	arg *LazanNotifyPowerTransitionArg) (
	*LazanNotifyPowerTransitionRet, error) {

	ret := &LazanNotifyPowerTransitionRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanNotifyPowerTransition", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanCompleteMigrateVm(
	arg *LazanCompleteMigrateVmArg) (
	*LazanCompleteMigrateVmRet, error) {

	ret := &LazanCompleteMigrateVmRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanCompleteMigrateVm", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanIsTaskPending(
	arg *LazanIsTaskPendingArg) (
	*LazanIsTaskPendingRet, error) {

	ret := &LazanIsTaskPendingRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanIsTaskPending", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanGetEntityParcels(
	arg *LazanGetEntityParcelsArg) (
	*LazanGetEntityParcelsRet, error) {

	ret := &LazanGetEntityParcelsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanGetEntityParcels", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanAffinityHAComplianceCheck(
	arg *LazanAffinityHAComplianceCheckArg) (
	*LazanAffinityHAComplianceCheckRet, error) {

	ret := &LazanAffinityHAComplianceCheckRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanAffinityHAComplianceCheck", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanCheckCurrentNodeFailures(
	arg *LazanCheckCurrentNodeFailuresArg) (
	*LazanCheckCurrentNodeFailuresRet, error) {

	ret := &LazanCheckCurrentNodeFailuresRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanCheckCurrentNodeFailures", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanIsFailoverInProgress(
	arg *LazanIsFailoverInProgressArg) (
	*LazanIsFailoverInProgressRet, error) {

	ret := &LazanIsFailoverInProgressRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanIsFailoverInProgress", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanScheduleVm(
	arg *LazanScheduleVmArg) (
	*LazanScheduleVmRet, error) {

	ret := &LazanScheduleVmRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanScheduleVm", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanMaybeUpdateAffinity(
	arg *LazanMaybeUpdateAffinityArg) (
	*LazanMaybeUpdateAffinityRet, error) {

	ret := &LazanMaybeUpdateAffinityRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanMaybeUpdateAffinity", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanGetSegmentAssignment(
	arg *LazanGetSegmentAssignmentArg) (
	*LazanGetSegmentAssignmentRet, error) {

	ret := &LazanGetSegmentAssignmentRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanGetSegmentAssignment", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanGetHighPriorityHosts(
	arg *LazanGetHighPriorityHostsArg) (
	*LazanGetHighPriorityHostsRet, error) {

	ret := &LazanGetHighPriorityHostsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanGetHighPriorityHosts", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanGetSchedulerState(
	arg *LazanGetSchedulerStateArg) (
	*LazanGetSchedulerStateRet, error) {

	ret := &LazanGetSchedulerStateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanGetSchedulerState", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanGetVmParcels(
	arg *LazanGetVmParcelsArg) (
	*LazanGetVmParcelsRet, error) {

	ret := &LazanGetVmParcelsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanGetVmParcels", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanGetEntityNodes(
	arg *LazanGetEntityNodesArg) (
	*LazanGetEntityNodesRet, error) {

	ret := &LazanGetEntityNodesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanGetEntityNodes", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) LazanGetMigrateDestination(
	arg *LazanGetMigrateDestinationArg) (
	*LazanGetMigrateDestinationRet, error) {

	ret := &LazanGetMigrateDestinationRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "LazanGetMigrateDestination", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) GetVmsToReboot(
	arg *GetVmsToRebootArg) (
	*GetVmsToRebootRet, error) {

	ret := &GetVmsToRebootRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "GetVmsToReboot", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ReservePerHostMemory(
	arg *ReservePerHostMemoryArg) (
	*ReservePerHostMemoryRet, error) {

	ret := &ReservePerHostMemoryRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ReservePerHostMemory", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ClusterVswitchCreate(
	arg *ClusterVswitchCreateArg) (
	*ClusterVswitchCreateRet, error) {

	ret := &ClusterVswitchCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ClusterVswitchCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ClusterVswitchUpdate(
	arg *ClusterVswitchUpdateArg) (
	*ClusterVswitchUpdateRet, error) {

	ret := &ClusterVswitchUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ClusterVswitchUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ClusterVswitchGet(
	arg *ClusterVswitchGetArg) (
	*ClusterVswitchGetRet, error) {

	ret := &ClusterVswitchGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ClusterVswitchGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) ClusterVswitchDelete(
	arg *ClusterVswitchDeleteArg) (
	*ClusterVswitchDeleteRet, error) {

	ret := &ClusterVswitchDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "ClusterVswitchDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) DistributedVswitchValidate(
	arg *DistributedVswitchValidateArg) (
	*DistributedVswitchValidateRet, error) {

	ret := &DistributedVswitchValidateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "DistributedVswitchValidate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) DistributedVswitchCreate(
	arg *DistributedVswitchCreateArg) (
	*DistributedVswitchCreateRet, error) {

	ret := &DistributedVswitchCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "DistributedVswitchCreate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) DistributedVswitchUpdate(
	arg *DistributedVswitchUpdateArg) (
	*DistributedVswitchUpdateRet, error) {

	ret := &DistributedVswitchUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "DistributedVswitchUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) DistributedVswitchGet(
	arg *DistributedVswitchGetArg) (
	*DistributedVswitchGetRet, error) {

	ret := &DistributedVswitchGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "DistributedVswitchGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) DistributedVswitchDelete(
	arg *DistributedVswitchDeleteArg) (
	*DistributedVswitchDeleteRet, error) {

	ret := &DistributedVswitchDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "DistributedVswitchDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) MigrateBridgeToDistributedVswitch(
	arg *MigrateBridgeToDistributedVswitchArg) (
	*MigrateBridgeToDistributedVswitchRet, error) {

	ret := &MigrateBridgeToDistributedVswitchRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "MigrateBridgeToDistributedVswitch", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmEventAddOnHost(
	arg *VmEventAddOnHostArg) (
	*VmEventAddOnHostRet, error) {

	ret := &VmEventAddOnHostRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmEventAddOnHost", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmEventDeleteOnHost(
	arg *VmEventDeleteOnHostArg) (
	*VmEventDeleteOnHostRet, error) {

	ret := &VmEventDeleteOnHostRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmEventDeleteOnHost", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) AtlasConfigGet(
	arg *AtlasConfigGetArg) (
	*AtlasConfigGetRet, error) {

	ret := &AtlasConfigGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "AtlasConfigGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) AtlasConfigUpdate(
	arg *AtlasConfigUpdateArg) (
	*AtlasConfigUpdateRet, error) {

	ret := &AtlasConfigUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "AtlasConfigUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) UpdateVmDbState(
	arg *UpdateVmDbStateArg) (
	*UpdateVmDbStateRet, error) {

	ret := &UpdateVmDbStateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "UpdateVmDbState", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmSyncRepEnable(
	arg *VmSyncRepEnableArg) (
	*VmSyncRepEnableRet, error) {

	ret := &VmSyncRepEnableRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmSyncRepEnable", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmSyncRepMigrate(
	arg *VmSyncRepMigrateArg) (
	*VmSyncRepMigrateRet, error) {

	ret := &VmSyncRepMigrateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmSyncRepMigrate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmSyncRepConfigUpdate(
	arg *VmSyncRepConfigUpdateArg) (
	*VmSyncRepConfigUpdateRet, error) {

	ret := &VmSyncRepConfigUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmSyncRepConfigUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) DormantVmDiskDelete(
	arg *DormantVmDiskDeleteArg) (
	*DormantVmDiskDeleteRet, error) {

	ret := &DormantVmDiskDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "DormantVmDiskDelete", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) DormantVmGet(
	arg *DormantVmGetArg) (
	*DormantVmGetRet, error) {

	ret := &DormantVmGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "DormantVmGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmSpecGet(
	arg *VmSpecGetArg) (
	*VmSpecGetRet, error) {

	ret := &VmSpecGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmSpecGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) DormantVmStateGet(
	arg *DormantVmStateGetArg) (
	*DormantVmStateGetRet, error) {

	ret := &DormantVmStateGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "DormantVmStateGet", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmSyncRepReplicate(
	arg *VmSyncRepReplicateArg) (
	*VmSyncRepReplicateRet, error) {

	ret := &VmSyncRepReplicateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmSyncRepReplicate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmCrossClusterLiveMigrate(
	arg *VmCrossClusterLiveMigrateArg) (
	*VmCrossClusterLiveMigrateRet, error) {

	ret := &VmCrossClusterLiveMigrateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmCrossClusterLiveMigrate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) PrepareVmCrossClusterLiveMigrate(
	arg *PrepareVmCrossClusterLiveMigrateArg) (
	*PrepareVmCrossClusterLiveMigrateRet, error) {

	ret := &PrepareVmCrossClusterLiveMigrateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "PrepareVmCrossClusterLiveMigrate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) CleanupPrepareVmCrossClusterLiveMigrate(
	arg *CleanupPrepareVmCrossClusterLiveMigrateArg) (
	*CleanupPrepareVmCrossClusterLiveMigrateRet, error) {

	ret := &CleanupPrepareVmCrossClusterLiveMigrateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "CleanupPrepareVmCrossClusterLiveMigrate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) PrechecksCrossClusterLiveMigrate(
	arg *PrechecksCrossClusterLiveMigrateArg) (
	*PrechecksCrossClusterLiveMigrateRet, error) {

	ret := &PrechecksCrossClusterLiveMigrateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "PrechecksCrossClusterLiveMigrate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) PrechecksCrossClusterLiveMigrateSync(
	arg *PrechecksCrossClusterLiveMigrateSyncArg) (
	*PrechecksCrossClusterLiveMigrateSyncRet, error) {

	ret := &PrechecksCrossClusterLiveMigrateSyncRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "PrechecksCrossClusterLiveMigrateSync", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmDisableUpdate(
	arg *VmDisableUpdateArg) (
	*VmDisableUpdateRet, error) {

	ret := &VmDisableUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmDisableUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VpnLbRoutePrefixUpdate(
	arg *VpnLbRoutePrefixUpdateArg) (
	*VpnLbRoutePrefixUpdateRet, error) {

	ret := &VpnLbRoutePrefixUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VpnLbRoutePrefixUpdate", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) NodeResourceAllocation(
	arg *NodeResourceAllocationArg) (
	*NodeResourceAllocationRet, error) {

	ret := &NodeResourceAllocationRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "NodeResourceAllocation", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) HostSwapAttach(
	arg *HostSwapAttachArg) (
	*HostSwapAttachRet, error) {

	ret := &HostSwapAttachRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "HostSwapAttach", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) HostSwapDetach(
	arg *HostSwapDetachArg) (
	*HostSwapDetachRet, error) {

	ret := &HostSwapDetachRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "HostSwapDetach", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmRemoteForcePowerOff(
	arg *VmRemoteForcePowerOffArg) (
	*VmRemoteForcePowerOffRet, error) {

	ret := &VmRemoteForcePowerOffRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmRemoteForcePowerOff", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) CleanupCrossClusterLiveMigrateSource(
	arg *CleanupCrossClusterLiveMigrateSourceArg) (
	*CleanupCrossClusterLiveMigrateSourceRet, error) {

	ret := &CleanupCrossClusterLiveMigrateSourceRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "CleanupCrossClusterLiveMigrateSource", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmGpuGetCompatibleHosts(
	arg *VmGpuGetCompatibleHostsArg) (
	*VmGpuGetCompatibleHostsRet, error) {

	ret := &VmGpuGetCompatibleHostsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmGpuGetCompatibleHosts", arg, ret, 0)
	return ret, err
}

func (client *AcropolisRpcClient) VmUpdateIncarnationIds(
	arg *VmUpdateIncarnationIdsArg) (
	*VmUpdateIncarnationIdsRet, error) {

	ret := &VmUpdateIncarnationIdsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.acropolis.AcropolisRpcSvc", "VmUpdateIncarnationIds", arg, ret, 0)
	return ret, err
}
