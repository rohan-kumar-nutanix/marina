// Code generated by protoc-gen-go. DO NOT EDIT.
// source: insights/insights_interface/insights_interface.proto

package insights_interface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/net"
	math "math"
)

import (
	"errors"
	util_net "github.com/nutanix-core/acs-aos-go/nutanix/util-go/net"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GlobalDataReadConsistency int32

const (
	GlobalDataReadConsistency_kEventual GlobalDataReadConsistency = 0
	GlobalDataReadConsistency_kStrict   GlobalDataReadConsistency = 1
)

var GlobalDataReadConsistency_name = map[int32]string{
	0: "kEventual",
	1: "kStrict",
}

var GlobalDataReadConsistency_value = map[string]int32{
	"kEventual": 0,
	"kStrict":   1,
}

func (x GlobalDataReadConsistency) Enum() *GlobalDataReadConsistency {
	p := new(GlobalDataReadConsistency)
	*p = x
	return p
}

func (x GlobalDataReadConsistency) String() string {
	return proto.EnumName(GlobalDataReadConsistency_name, int32(x))
}

func (x *GlobalDataReadConsistency) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GlobalDataReadConsistency_value, data, "GlobalDataReadConsistency")
	if err != nil {
		return err
	}
	*x = GlobalDataReadConsistency(value)
	return nil
}

func (GlobalDataReadConsistency) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{0}
}

type LogLevel int32

const (
	LogLevel_DEBUG   LogLevel = 0
	LogLevel_INFO    LogLevel = 1
	LogLevel_WARNING LogLevel = 2
	LogLevel_ERROR   LogLevel = 3
	LogLevel_FATAL   LogLevel = 4
	LogLevel_UNKNOWN LogLevel = 5
)

var LogLevel_name = map[int32]string{
	0: "DEBUG",
	1: "INFO",
	2: "WARNING",
	3: "ERROR",
	4: "FATAL",
	5: "UNKNOWN",
}

var LogLevel_value = map[string]int32{
	"DEBUG":   0,
	"INFO":    1,
	"WARNING": 2,
	"ERROR":   3,
	"FATAL":   4,
	"UNKNOWN": 5,
}

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return proto.EnumName(LogLevel_name, int32(x))
}

func (x *LogLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogLevel_value, data, "LogLevel")
	if err != nil {
		return err
	}
	*x = LogLevel(value)
	return nil
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{1}
}

type InternalStateId int32

const (
	InternalStateId_kLocalTenantId InternalStateId = 0
	// Gives the entity wise memory usage of IDF cache across all nodes. This is
	// an expensive operation and can affect IDF performance when called. This
	// call is expected with frequency less than once per hour.
	InternalStateId_kEntityWiseMemoryusage InternalStateId = 1
	// To get overall server stats.
	InternalStateId_kOverallServerStats InternalStateId = 2
	// Check the upgrade version of this node.
	InternalStateId_kUpgradeVersion InternalStateId = 3
)

var InternalStateId_name = map[int32]string{
	0: "kLocalTenantId",
	1: "kEntityWiseMemoryusage",
	2: "kOverallServerStats",
	3: "kUpgradeVersion",
}

var InternalStateId_value = map[string]int32{
	"kLocalTenantId":         0,
	"kEntityWiseMemoryusage": 1,
	"kOverallServerStats":    2,
	"kUpgradeVersion":        3,
}

func (x InternalStateId) Enum() *InternalStateId {
	p := new(InternalStateId)
	*p = x
	return p
}

func (x InternalStateId) String() string {
	return proto.EnumName(InternalStateId_name, int32(x))
}

func (x *InternalStateId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InternalStateId_value, data, "InternalStateId")
	if err != nil {
		return err
	}
	*x = InternalStateId(value)
	return nil
}

func (InternalStateId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{2}
}

// Generic error types hit by Insights while processing requests.
type InsightsErrorProto_Type int32

const (
	InsightsErrorProto_kNoError        InsightsErrorProto_Type = 0
	InsightsErrorProto_kUnknown        InsightsErrorProto_Type = 1
	InsightsErrorProto_kCanceled       InsightsErrorProto_Type = 2
	InsightsErrorProto_kTimeout        InsightsErrorProto_Type = 3
	InsightsErrorProto_kTransportError InsightsErrorProto_Type = 4
	InsightsErrorProto_kRetry          InsightsErrorProto_Type = 5
	// For errors related to any failure in any of internal system like
	// db or internal service.
	InsightsErrorProto_kInternalError InsightsErrorProto_Type = 6
	// DB is unavailable. Retry after waiting for a considerable time.
	InsightsErrorProto_kUnavailable InsightsErrorProto_Type = 7
	// Non CAS update for a CAS entity.
	InsightsErrorProto_kNonCasUpdateForCasEntity InsightsErrorProto_Type = 8
	// CAS update for a non CAS entity.
	InsightsErrorProto_kCasUpdateForNonCasEntity InsightsErrorProto_Type = 9
	// Incorrect CAS Value.
	InsightsErrorProto_kIncorrectCasValue InsightsErrorProto_Type = 10
	// Incorrect Created Timestamp.
	InsightsErrorProto_kIncorrectCreatedTimestamp InsightsErrorProto_Type = 11
	// Partial Error. This is used to return the overall status of a batch RPC
	// when some of the individual mutations have succeeded
	// and some have failed.
	InsightsErrorProto_kPartial InsightsErrorProto_Type = 12
	// Entity Type is not registered.
	InsightsErrorProto_kEntityTypeNotRegistered InsightsErrorProto_Type = 13
	// Parent Entity Type not registered.
	InsightsErrorProto_kParentEntityTypeNotRegistered InsightsErrorProto_Type = 14
	// Shard Entity Type not registered.
	InsightsErrorProto_kShardEntityTypeNotRegistered InsightsErrorProto_Type = 15
	// MetricType not registered.
	InsightsErrorProto_kMetricTypeNotRegistered InsightsErrorProto_Type = 16
	// Entity is not present.
	InsightsErrorProto_kEntityNotPresent InsightsErrorProto_Type = 17
	// Value being read not found in backend. Example is if while trying to
	// delete an entity, the entity does not exist.
	InsightsErrorProto_kNotFound InsightsErrorProto_Type = 18
	// Same attribute specified multiple times while updating entity.
	InsightsErrorProto_kAttributeMultipleDefinition InsightsErrorProto_Type = 19
	// Watch client needs to reset itself.
	InsightsErrorProto_kResetWatchClient InsightsErrorProto_Type = 20
	// Attribute cannot be updated in PutMetricData RPC.
	InsightsErrorProto_kAttributeInPutMetricDataRPC InsightsErrorProto_Type = 21
	// Metric cannot be updated in UpdateEntity RPC.
	InsightsErrorProto_kMetricInUpdateEntityRPC InsightsErrorProto_Type = 22
	// Timestamp provided by the client is invalid. This could happen, for
	// example, if the client provides a timestamp for an entity update
	// that is less than the largest client timestamp known to the server
	// for that entity.
	InsightsErrorProto_kInvalidTimestamp InsightsErrorProto_Type = 23
	// Watch is already registered against the given watch client.
	InsightsErrorProto_kWatchAlreadyRegistered InsightsErrorProto_Type = 24
	// Replicated entity is read-only.
	InsightsErrorProto_kEntityReadOnly InsightsErrorProto_Type = 25
	// Watch Client is already registered.
	InsightsErrorProto_kWatchClientAlreadyRegistered InsightsErrorProto_Type = 26
	// Watch is not currently registered against the given watch client.
	InsightsErrorProto_kWatchNotRegistered InsightsErrorProto_Type = 27
	// Watch client's internal state is in an unexpected state.
	InsightsErrorProto_kWatchClientUnexpectedState InsightsErrorProto_Type = 28
	// Derived metric cannot be updated in PutMetricData RPC.
	InsightsErrorProto_kDerivedMetricInPutMetricDataRPC InsightsErrorProto_Type = 29
	// The watch id given in the UnregisterWatchArg doesn't match the watch id
	// registered on the server.
	InsightsErrorProto_kInvalidWatchIdForUnregistration InsightsErrorProto_Type = 30
	// Metric data samples are dropped by the retention policy.
	InsightsErrorProto_kMetricDataDroppedByRetentionPolicy InsightsErrorProto_Type = 31
	// Incorrect incarnation id.
	InsightsErrorProto_kIncorrectIncarnationId InsightsErrorProto_Type = 32
	// Entity already exists.
	InsightsErrorProto_kEntityAlreadyExists InsightsErrorProto_Type = 33
	// Attributes based out of nested fields cannot be updated directly. They
	// can be updated only via updates to its corresponding base attribute.
	InsightsErrorProto_kNestedFieldDirectUpdatesNotAllowed InsightsErrorProto_Type = 34
	// Watch Client is not registered.
	InsightsErrorProto_kWatchClientNotRegistered InsightsErrorProto_Type = 35
	// Tenant ID cannot be changed in any update / re-creation, once the entity
	// with the same entity_id has been created.
	InsightsErrorProto_kTenantIdChanged InsightsErrorProto_Type = 36
	// Out of order SyncUpdateEntity request.
	InsightsErrorProto_kEntityUpdateOutOfOrder InsightsErrorProto_Type = 37
	// Current state is not allowed for watch on evictable entity types.
	InsightsErrorProto_kCurrentStateNotAllowedForEvictableEntityTypeWatch InsightsErrorProto_Type = 38
	// Ancestor tree contians ambiguity.
	InsightsErrorProto_kAmbiguousAncestorTree InsightsErrorProto_Type = 39
	// Requested feature is disabled.
	InsightsErrorProto_kFeatureDisabled InsightsErrorProto_Type = 40
	// The cursor query information has either expired or the cursor query
	// received is out of order. Retry afresh.
	InsightsErrorProto_kRetryCursorQueryFromStart InsightsErrorProto_Type = 41
	// Error types with enum values in 1xxx are for input checking.
	//
	InsightsErrorProto_kInvalidRequest InsightsErrorProto_Type = 1000
	// Same entry defined multiple times in args.
	InsightsErrorProto_kMultipleDefinition InsightsErrorProto_Type = 1001
	// No metric name specified in args when a metric name is required.
	InsightsErrorProto_kNoMetricName InsightsErrorProto_Type = 1002
	// No entity type name specified in args when an entity type name is
	// required.
	InsightsErrorProto_kNoEntityTypeName InsightsErrorProto_Type = 1003
	// Bucketization parameters were set for an attribute.
	InsightsErrorProto_kAttributeIsBucketized InsightsErrorProto_Type = 1004
	// Invalid metric type name (e.g., metric type name is '_entity_id_').
	InsightsErrorProto_kInvalidMetricTypeName InsightsErrorProto_Type = 1005
	// Invalid metric type.
	InsightsErrorProto_kInvalidMetricTypeDefinition InsightsErrorProto_Type = 1006
	// Invalid Downsampling interval.
	InsightsErrorProto_kInvalidDownSamplingInterval InsightsErrorProto_Type = 1007
	// Downsampling parameters were set for an attribute.
	InsightsErrorProto_kAttributeIsDownsampled InsightsErrorProto_Type = 1008
	// Invalid Serialised proto.
	InsightsErrorProto_kInvalidSerialisedProto InsightsErrorProto_Type = 1009
	// Invalid Nested field info.
	InsightsErrorProto_kInvalidNestedFieldInfo InsightsErrorProto_Type = 1010
	// Invalid base attribute.
	InsightsErrorProto_kInvalidBaseAttribute InsightsErrorProto_Type = 1011
	// Cannot update Nested field info.
	InsightsErrorProto_kCannotUpdateNestedFieldInfo InsightsErrorProto_Type = 1012
	// Invalid PutMetricData value.
	InsightsErrorProto_kInvalidPutMetricData InsightsErrorProto_Type = 1013
	// Cannot clear base attribute metric type info.
	InsightsErrorProto_kCannotClearBaseAttributeSchema InsightsErrorProto_Type = 1014
	// Invalid serialised proto compression type.
	InsightsErrorProto_kInvalidSerialisedProtoCompressionType InsightsErrorProto_Type = 1015
	// Invalid evictable entity type definition.
	InsightsErrorProto_kInvalidEvictableEntityType InsightsErrorProto_Type = 1016
	// Invalid indexed metric type definition.
	InsightsErrorProto_kInvalidIndexColumn InsightsErrorProto_Type = 1017
	// Request for all entities of an evictable entity type in GetEntities.
	InsightsErrorProto_kGetAllEvictableEntitiesUnsupported InsightsErrorProto_Type = 1018
	// EntityWithMetric data cannot belong to Dimension Fact Table.
	InsightsErrorProto_kDimentsionFactTableInEntityWithMetric InsightsErrorProto_Type = 1019
	// MetricDataSample data cannot belong to Entity.
	InsightsErrorProto_kEntityInMetricDataSample InsightsErrorProto_Type = 1020
	// Missing primary key attribute in the MetricDataSample.
	InsightsErrorProto_kMissingPrimaryKeyAttribute InsightsErrorProto_Type = 1021
	// Primary key in MetricDataSample is not registered as attribute.
	InsightsErrorProto_kPrimaryKeyIsNotAttribute InsightsErrorProto_Type = 1022
	// The type of an entity's metric doesn't match the metric index type.
	InsightsErrorProto_kMetricTypeDoesNotMatchIndexType InsightsErrorProto_Type = 1033
	// Column is specified as an indexed column but no index type is provided.
	InsightsErrorProto_kMissingIndexType InsightsErrorProto_Type = 1034
	// The parent type name for an attribute cannot be added, deleted or
	// updated for evictable entity types.
	InsightsErrorProto_kCannotModifyParentTypeName InsightsErrorProto_Type = 1035
	// Error types with enum values in 2xxx suggest the client to retry the
	// request after sometime.
	//
	// Another DB update in progress, retry after some time.
	InsightsErrorProto_kDBUpdateInProgress InsightsErrorProto_Type = 2001
	// Cached copy sync with DB is in progress and new write cannot continue
	// till the cached copy is synced with the DB.
	InsightsErrorProto_kCacheSyncWithDBInProgress InsightsErrorProto_Type = 2002
	// Syncing cache with DB failed. Can be retried.
	InsightsErrorProto_kCacheSyncWithDBFailed InsightsErrorProto_Type = 2003
	// Cassandra mutation error.
	InsightsErrorProto_kCassandraMutateFailed InsightsErrorProto_Type = 2004
	// Epoch error when updating the Cassandra. This error is given when
	// the epoch provided is different from the epoch used in the first write
	// to the column.
	InsightsErrorProto_kCassandraMutateEpochError InsightsErrorProto_Type = 2005
	// Cassandra read failed.
	InsightsErrorProto_kCassandraReadFailed InsightsErrorProto_Type = 2006
)

var InsightsErrorProto_Type_name = map[int32]string{
	0:    "kNoError",
	1:    "kUnknown",
	2:    "kCanceled",
	3:    "kTimeout",
	4:    "kTransportError",
	5:    "kRetry",
	6:    "kInternalError",
	7:    "kUnavailable",
	8:    "kNonCasUpdateForCasEntity",
	9:    "kCasUpdateForNonCasEntity",
	10:   "kIncorrectCasValue",
	11:   "kIncorrectCreatedTimestamp",
	12:   "kPartial",
	13:   "kEntityTypeNotRegistered",
	14:   "kParentEntityTypeNotRegistered",
	15:   "kShardEntityTypeNotRegistered",
	16:   "kMetricTypeNotRegistered",
	17:   "kEntityNotPresent",
	18:   "kNotFound",
	19:   "kAttributeMultipleDefinition",
	20:   "kResetWatchClient",
	21:   "kAttributeInPutMetricDataRPC",
	22:   "kMetricInUpdateEntityRPC",
	23:   "kInvalidTimestamp",
	24:   "kWatchAlreadyRegistered",
	25:   "kEntityReadOnly",
	26:   "kWatchClientAlreadyRegistered",
	27:   "kWatchNotRegistered",
	28:   "kWatchClientUnexpectedState",
	29:   "kDerivedMetricInPutMetricDataRPC",
	30:   "kInvalidWatchIdForUnregistration",
	31:   "kMetricDataDroppedByRetentionPolicy",
	32:   "kIncorrectIncarnationId",
	33:   "kEntityAlreadyExists",
	34:   "kNestedFieldDirectUpdatesNotAllowed",
	35:   "kWatchClientNotRegistered",
	36:   "kTenantIdChanged",
	37:   "kEntityUpdateOutOfOrder",
	38:   "kCurrentStateNotAllowedForEvictableEntityTypeWatch",
	39:   "kAmbiguousAncestorTree",
	40:   "kFeatureDisabled",
	41:   "kRetryCursorQueryFromStart",
	1000: "kInvalidRequest",
	1001: "kMultipleDefinition",
	1002: "kNoMetricName",
	1003: "kNoEntityTypeName",
	1004: "kAttributeIsBucketized",
	1005: "kInvalidMetricTypeName",
	1006: "kInvalidMetricTypeDefinition",
	1007: "kInvalidDownSamplingInterval",
	1008: "kAttributeIsDownsampled",
	1009: "kInvalidSerialisedProto",
	1010: "kInvalidNestedFieldInfo",
	1011: "kInvalidBaseAttribute",
	1012: "kCannotUpdateNestedFieldInfo",
	1013: "kInvalidPutMetricData",
	1014: "kCannotClearBaseAttributeSchema",
	1015: "kInvalidSerialisedProtoCompressionType",
	1016: "kInvalidEvictableEntityType",
	1017: "kInvalidIndexColumn",
	1018: "kGetAllEvictableEntitiesUnsupported",
	1019: "kDimentsionFactTableInEntityWithMetric",
	1020: "kEntityInMetricDataSample",
	1021: "kMissingPrimaryKeyAttribute",
	1022: "kPrimaryKeyIsNotAttribute",
	1033: "kMetricTypeDoesNotMatchIndexType",
	1034: "kMissingIndexType",
	1035: "kCannotModifyParentTypeName",
	2001: "kDBUpdateInProgress",
	2002: "kCacheSyncWithDBInProgress",
	2003: "kCacheSyncWithDBFailed",
	2004: "kCassandraMutateFailed",
	2005: "kCassandraMutateEpochError",
	2006: "kCassandraReadFailed",
}

var InsightsErrorProto_Type_value = map[string]int32{
	"kNoError":                                           0,
	"kUnknown":                                           1,
	"kCanceled":                                          2,
	"kTimeout":                                           3,
	"kTransportError":                                    4,
	"kRetry":                                             5,
	"kInternalError":                                     6,
	"kUnavailable":                                       7,
	"kNonCasUpdateForCasEntity":                          8,
	"kCasUpdateForNonCasEntity":                          9,
	"kIncorrectCasValue":                                 10,
	"kIncorrectCreatedTimestamp":                         11,
	"kPartial":                                           12,
	"kEntityTypeNotRegistered":                           13,
	"kParentEntityTypeNotRegistered":                     14,
	"kShardEntityTypeNotRegistered":                      15,
	"kMetricTypeNotRegistered":                           16,
	"kEntityNotPresent":                                  17,
	"kNotFound":                                          18,
	"kAttributeMultipleDefinition":                       19,
	"kResetWatchClient":                                  20,
	"kAttributeInPutMetricDataRPC":                       21,
	"kMetricInUpdateEntityRPC":                           22,
	"kInvalidTimestamp":                                  23,
	"kWatchAlreadyRegistered":                            24,
	"kEntityReadOnly":                                    25,
	"kWatchClientAlreadyRegistered":                      26,
	"kWatchNotRegistered":                                27,
	"kWatchClientUnexpectedState":                        28,
	"kDerivedMetricInPutMetricDataRPC":                   29,
	"kInvalidWatchIdForUnregistration":                   30,
	"kMetricDataDroppedByRetentionPolicy":                31,
	"kIncorrectIncarnationId":                            32,
	"kEntityAlreadyExists":                               33,
	"kNestedFieldDirectUpdatesNotAllowed":                34,
	"kWatchClientNotRegistered":                          35,
	"kTenantIdChanged":                                   36,
	"kEntityUpdateOutOfOrder":                            37,
	"kCurrentStateNotAllowedForEvictableEntityTypeWatch": 38,
	"kAmbiguousAncestorTree":                             39,
	"kFeatureDisabled":                                   40,
	"kRetryCursorQueryFromStart":                         41,
	"kInvalidRequest":                                    1000,
	"kMultipleDefinition":                                1001,
	"kNoMetricName":                                      1002,
	"kNoEntityTypeName":                                  1003,
	"kAttributeIsBucketized":                             1004,
	"kInvalidMetricTypeName":                             1005,
	"kInvalidMetricTypeDefinition":                       1006,
	"kInvalidDownSamplingInterval":                       1007,
	"kAttributeIsDownsampled":                            1008,
	"kInvalidSerialisedProto":                            1009,
	"kInvalidNestedFieldInfo":                            1010,
	"kInvalidBaseAttribute":                              1011,
	"kCannotUpdateNestedFieldInfo":                       1012,
	"kInvalidPutMetricData":                              1013,
	"kCannotClearBaseAttributeSchema":                    1014,
	"kInvalidSerialisedProtoCompressionType":             1015,
	"kInvalidEvictableEntityType":                        1016,
	"kInvalidIndexColumn":                                1017,
	"kGetAllEvictableEntitiesUnsupported":                1018,
	"kDimentsionFactTableInEntityWithMetric":             1019,
	"kEntityInMetricDataSample":                          1020,
	"kMissingPrimaryKeyAttribute":                        1021,
	"kPrimaryKeyIsNotAttribute":                          1022,
	"kMetricTypeDoesNotMatchIndexType":                   1033,
	"kMissingIndexType":                                  1034,
	"kCannotModifyParentTypeName":                        1035,
	"kDBUpdateInProgress":                                2001,
	"kCacheSyncWithDBInProgress":                         2002,
	"kCacheSyncWithDBFailed":                             2003,
	"kCassandraMutateFailed":                             2004,
	"kCassandraMutateEpochError":                         2005,
	"kCassandraReadFailed":                               2006,
}

func (x InsightsErrorProto_Type) Enum() *InsightsErrorProto_Type {
	p := new(InsightsErrorProto_Type)
	*p = x
	return p
}

func (x InsightsErrorProto_Type) String() string {
	return proto.EnumName(InsightsErrorProto_Type_name, int32(x))
}

func (x *InsightsErrorProto_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InsightsErrorProto_Type_value, data, "InsightsErrorProto_Type")
	if err != nil {
		return err
	}
	*x = InsightsErrorProto_Type(value)
	return nil
}

func (InsightsErrorProto_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{0, 0}
}

// Descriptive suberror types hit by Insights while processing requests.
type InsightsErrorProto_SubType int32

const (
	InsightsErrorProto_kNotSet InsightsErrorProto_SubType = 0
	// message GetEntitiesWithMetricsArg errors.
	// Missing query arg.
	InsightsErrorProto_kGetEntitiesWithMetricsArgMissingQuery InsightsErrorProto_SubType = 1000
	// message Query errors.
	// Missing entity name.
	InsightsErrorProto_kQueryMissingEntityName InsightsErrorProto_SubType = 2000
	// Different entity types.
	InsightsErrorProto_kQueryInvalidEntityType InsightsErrorProto_SubType = 2001
	// Duplicate entity ids.
	InsightsErrorProto_kQueryDuplicateEntityId InsightsErrorProto_SubType = 2002
	// Mixed wildcard and non wildcard entities.
	InsightsErrorProto_kQueryInvalidEntityWildcard InsightsErrorProto_SubType = 2003
	// start time < 0.
	InsightsErrorProto_kQueryInvalidStartTime InsightsErrorProto_SubType = 2004
	// end time < start time.
	InsightsErrorProto_kQueryInvalidEndTime InsightsErrorProto_SubType = 2005
	// Where clause expression is too deep.
	InsightsErrorProto_kQueryWhereClauseIsTooDeep InsightsErrorProto_SubType = 2006
	// Data integrity check on relationship
	// tree failed.
	InsightsErrorProto_kQueryRelationshipTreeCheckFailed InsightsErrorProto_SubType = 2007
	// Unsupported.
	InsightsErrorProto_kQueryUnsupported InsightsErrorProto_SubType = 2008
	// Invalid shard id.
	InsightsErrorProto_kQueryInvalidShardId InsightsErrorProto_SubType = 2009
	// Missing Entity.
	InsightsErrorProto_kQueryMissingEntity InsightsErrorProto_SubType = 2010
	// Too many evictable entities after filtering.
	InsightsErrorProto_kQueryExceedsEvictableEntityLimit InsightsErrorProto_SubType = 2011
	// Regex in conditional expression is too long.
	InsightsErrorProto_kRegexTooLong InsightsErrorProto_SubType = 2012
	// message QueryGroupBy errors.
	// Invalid raw sort specified.
	InsightsErrorProto_kQueryGroupByInvalidRawSort InsightsErrorProto_SubType = 3000
	// Invalid raw limit specified.
	InsightsErrorProto_kQueryGroupByInvalidRawLimit InsightsErrorProto_SubType = 3001
	// Missing raw column.
	InsightsErrorProto_kQueryGroupByMissingRawCol InsightsErrorProto_SubType = 3002
	// Unsupported.
	InsightsErrorProto_kQueryGroupByUnsupported InsightsErrorProto_SubType = 3003
	// Invalid aggregate column.
	InsightsErrorProto_kQueryGroupByInvalidAggrCol InsightsErrorProto_SubType = 3004
	// Invalid group by column specification.
	InsightsErrorProto_kQueryGroupByInvalidGroupByCol InsightsErrorProto_SubType = 3005
	// Missing num buckets.
	InsightsErrorProto_kQueryGroupByInvalidNumBuckets InsightsErrorProto_SubType = 3006
	// Missing aggr column.
	InsightsErrorProto_kQueryGroupByMissingAggrCol InsightsErrorProto_SubType = 3007
	// Invalid raw column.
	InsightsErrorProto_kQueryGroupByInvalidRawCol InsightsErrorProto_SubType = 3008
	// Invalid group limit specified.
	InsightsErrorProto_kQueryGroupByInvalidGroupLimit InsightsErrorProto_SubType = 3009
	// Invalid boolean expression.
	InsightsErrorProto_kQueryGroupByInvalidBooleanExpr InsightsErrorProto_SubType = 3010
	// Invalid comparision expression.
	InsightsErrorProto_kQueryGroupByInvalidComparisionExpr InsightsErrorProto_SubType = 3011
	// Invalid preprocessed query.
	InsightsErrorProto_kQueryGroupByInvalidPreprocessed InsightsErrorProto_SubType = 3012
	// Aggregation error.
	InsightsErrorProto_kQueryGroupByAggrError InsightsErrorProto_SubType = 3013
	// Undefined metric type.
	InsightsErrorProto_kQueryUndefinedMetricType InsightsErrorProto_SubType = 3014
	// Invalid group-by column type.
	InsightsErrorProto_kQueryGroupByInvalidGroupByColType InsightsErrorProto_SubType = 3015
	InsightsErrorProto_kQueryInvalidDownSamplingInterval  InsightsErrorProto_SubType = 3016
	// Invalid bucket interval separators.
	InsightsErrorProto_kQueryGroupByInvalidBucketIntervals InsightsErrorProto_SubType = 3017
	// Invalid use of cursor queries.
	InsightsErrorProto_kCursorQueryForAggregateColumn InsightsErrorProto_SubType = 3018
	InsightsErrorProto_kCursorQueryForLookups         InsightsErrorProto_SubType = 3019
	InsightsErrorProto_kCursorQueryForGroupBy         InsightsErrorProto_SubType = 3020
	InsightsErrorProto_kCursorOutOfOrder              InsightsErrorProto_SubType = 3021
	InsightsErrorProto_kCursorObjectNotFound          InsightsErrorProto_SubType = 3022
	// Derived metric errors.
	// No numeric metric data found.
	InsightsErrorProto_kDerivedMetricNoNumericData InsightsErrorProto_SubType = 4000
	// Invalid time range.
	InsightsErrorProto_kDerivedMetricInvalidTimeRange InsightsErrorProto_SubType = 4001
	// Derived metric not found.
	InsightsErrorProto_kDerivedMetricNotFound InsightsErrorProto_SubType = 4002
	// Invalid derived metric.
	InsightsErrorProto_kDerivedMetricInvalidMetricType InsightsErrorProto_SubType = 4003
	// Invalid derived metric expression.
	InsightsErrorProto_kDerivedMetricInvalidExpression InsightsErrorProto_SubType = 4004
	// Invalid derived metric rollup query.
	InsightsErrorProto_kDerivedMetricInvalidRollupQuery InsightsErrorProto_SubType = 4005
	// Derived metric has a source metric that is also derived.
	InsightsErrorProto_kDerivedMetricDependsOnDerivedMetric InsightsErrorProto_SubType = 4006
	// Rollup derived metric computed on too many entities.
	InsightsErrorProto_kDerivedMetricMaxEntitiesExceeded InsightsErrorProto_SubType = 4007
	// Downsampling errors.
	// Invalid downsampling interval.
	InsightsErrorProto_kQueryDownsamplingInvalidInterval InsightsErrorProto_SubType = 5001
	// Multiple downsampling operators defined for a metric.
	InsightsErrorProto_kQueryDownsamplingConflictingOps InsightsErrorProto_SubType = 5002
	// Session not registered. This is caused by a server reset or by any other
	// cause not mentioned below.
	InsightsErrorProto_kWatchClientSessionNotPresent InsightsErrorProto_SubType = 6000
	// Watch client session unregistered due to inactivity.
	InsightsErrorProto_kWatchClientSessionStale InsightsErrorProto_SubType = 6001
	// Watch client session unregistered due to reaching maximum queued
	// watches limit.
	InsightsErrorProto_kWatchClientQueuedWatchesLimit InsightsErrorProto_SubType = 6002
	// Watch client session unregistered due to invalid sequence_id set in a
	// 'GetFiredWatchList' call.
	InsightsErrorProto_kWatchClientInvalidSequenceId InsightsErrorProto_SubType = 6003
	InsightsErrorProto_kMetricDataRPCDisabled        InsightsErrorProto_SubType = 6004
	// Watch client session unregistered due to an update in the schema of a
	// nested field attribute. This schema update leads to a re-computation of
	// the existing entities and all related watch clients need to be reset in
	// this process.
	InsightsErrorProto_kWatchClientNestedFieldSchemaUpdated InsightsErrorProto_SubType = 6005
	// Watch client session unregistered due to a new registration using the
	// same client id.
	InsightsErrorProto_kWatchClientMultipleRegistrations InsightsErrorProto_SubType = 6006
	// The metadata watch registration request was passed to a non-leader node.
	InsightsErrorProto_kMetadataWatchInNonLeader InsightsErrorProto_SubType = 6007
	// The leader node was not found in the current set of co-ordinator watch
	// clients.
	InsightsErrorProto_kMetadataWatchLeaderNotFound InsightsErrorProto_SubType = 6008
	// Watch client session unregistered due to shard unload at one of the
	// nodes. All related watch clients needs to be reset to be in sync with
	// node shard ownership.
	InsightsErrorProto_kWatchClientShardUnloaded InsightsErrorProto_SubType = 6009
	// Watch client session unregistered due to cluster registration.
	InsightsErrorProto_kWatchClientClusterRegistered InsightsErrorProto_SubType = 6010
	// Watch client session unregistered due to cluster unregistration.
	InsightsErrorProto_kWatchClientClusterUnregistered InsightsErrorProto_SubType = 6011
	// RegisterMetricType errors.
	// Down-sampling interval is not a multiple of metric_data_by_shard_secs.
	InsightsErrorProto_kDownSamplingIntervalNotMultiple InsightsErrorProto_SubType = 7000
	// Down-sampling interval is not aligned to the daily boundary.
	InsightsErrorProto_kDownSamplingIntervalNotAligned InsightsErrorProto_SubType = 7001
	// PutMetricData errors.
	// DataValue is empty.
	InsightsErrorProto_kMetricDataValueNotPresent   InsightsErrorProto_SubType = 8000
	InsightsErrorProto_kRetryPutMetricDataOverHiMem InsightsErrorProto_SubType = 8001
	// Scale-out related errors
	InsightsErrorProto_kShardInTransition      InsightsErrorProto_SubType = 9000
	InsightsErrorProto_kShardMapNotInitialized InsightsErrorProto_SubType = 9001
	// In scaleout, shard is not ready in the processing node.
	InsightsErrorProto_kShardNotReady InsightsErrorProto_SubType = 9002
	// Cassandra-related sub errors.
	InsightsErrorProto_kCassandraOpDropped InsightsErrorProto_SubType = 10000
	// Errors related to throttling of RPCs on IDF server side.
	// This sub error will be used while giving retry error because of RPC
	// queue full on IDF server side.
	InsightsErrorProto_kRPCQueueFull InsightsErrorProto_SubType = 11000
	// RPC was queued for over FLAGS_insights_max_rpc_queue_time_secs seconds
	// and subsequently dropped.
	InsightsErrorProto_kDroppedBecauseQueuedForTooLong InsightsErrorProto_SubType = 11001
)

var InsightsErrorProto_SubType_name = map[int32]string{
	0:     "kNotSet",
	1000:  "kGetEntitiesWithMetricsArgMissingQuery",
	2000:  "kQueryMissingEntityName",
	2001:  "kQueryInvalidEntityType",
	2002:  "kQueryDuplicateEntityId",
	2003:  "kQueryInvalidEntityWildcard",
	2004:  "kQueryInvalidStartTime",
	2005:  "kQueryInvalidEndTime",
	2006:  "kQueryWhereClauseIsTooDeep",
	2007:  "kQueryRelationshipTreeCheckFailed",
	2008:  "kQueryUnsupported",
	2009:  "kQueryInvalidShardId",
	2010:  "kQueryMissingEntity",
	2011:  "kQueryExceedsEvictableEntityLimit",
	2012:  "kRegexTooLong",
	3000:  "kQueryGroupByInvalidRawSort",
	3001:  "kQueryGroupByInvalidRawLimit",
	3002:  "kQueryGroupByMissingRawCol",
	3003:  "kQueryGroupByUnsupported",
	3004:  "kQueryGroupByInvalidAggrCol",
	3005:  "kQueryGroupByInvalidGroupByCol",
	3006:  "kQueryGroupByInvalidNumBuckets",
	3007:  "kQueryGroupByMissingAggrCol",
	3008:  "kQueryGroupByInvalidRawCol",
	3009:  "kQueryGroupByInvalidGroupLimit",
	3010:  "kQueryGroupByInvalidBooleanExpr",
	3011:  "kQueryGroupByInvalidComparisionExpr",
	3012:  "kQueryGroupByInvalidPreprocessed",
	3013:  "kQueryGroupByAggrError",
	3014:  "kQueryUndefinedMetricType",
	3015:  "kQueryGroupByInvalidGroupByColType",
	3016:  "kQueryInvalidDownSamplingInterval",
	3017:  "kQueryGroupByInvalidBucketIntervals",
	3018:  "kCursorQueryForAggregateColumn",
	3019:  "kCursorQueryForLookups",
	3020:  "kCursorQueryForGroupBy",
	3021:  "kCursorOutOfOrder",
	3022:  "kCursorObjectNotFound",
	4000:  "kDerivedMetricNoNumericData",
	4001:  "kDerivedMetricInvalidTimeRange",
	4002:  "kDerivedMetricNotFound",
	4003:  "kDerivedMetricInvalidMetricType",
	4004:  "kDerivedMetricInvalidExpression",
	4005:  "kDerivedMetricInvalidRollupQuery",
	4006:  "kDerivedMetricDependsOnDerivedMetric",
	4007:  "kDerivedMetricMaxEntitiesExceeded",
	5001:  "kQueryDownsamplingInvalidInterval",
	5002:  "kQueryDownsamplingConflictingOps",
	6000:  "kWatchClientSessionNotPresent",
	6001:  "kWatchClientSessionStale",
	6002:  "kWatchClientQueuedWatchesLimit",
	6003:  "kWatchClientInvalidSequenceId",
	6004:  "kMetricDataRPCDisabled",
	6005:  "kWatchClientNestedFieldSchemaUpdated",
	6006:  "kWatchClientMultipleRegistrations",
	6007:  "kMetadataWatchInNonLeader",
	6008:  "kMetadataWatchLeaderNotFound",
	6009:  "kWatchClientShardUnloaded",
	6010:  "kWatchClientClusterRegistered",
	6011:  "kWatchClientClusterUnregistered",
	7000:  "kDownSamplingIntervalNotMultiple",
	7001:  "kDownSamplingIntervalNotAligned",
	8000:  "kMetricDataValueNotPresent",
	8001:  "kRetryPutMetricDataOverHiMem",
	9000:  "kShardInTransition",
	9001:  "kShardMapNotInitialized",
	9002:  "kShardNotReady",
	10000: "kCassandraOpDropped",
	11000: "kRPCQueueFull",
	11001: "kDroppedBecauseQueuedForTooLong",
}

var InsightsErrorProto_SubType_value = map[string]int32{
	"kNotSet":                                0,
	"kGetEntitiesWithMetricsArgMissingQuery": 1000,
	"kQueryMissingEntityName":                2000,
	"kQueryInvalidEntityType":                2001,
	"kQueryDuplicateEntityId":                2002,
	"kQueryInvalidEntityWildcard":            2003,
	"kQueryInvalidStartTime":                 2004,
	"kQueryInvalidEndTime":                   2005,
	"kQueryWhereClauseIsTooDeep":             2006,
	"kQueryRelationshipTreeCheckFailed":      2007,
	"kQueryUnsupported":                      2008,
	"kQueryInvalidShardId":                   2009,
	"kQueryMissingEntity":                    2010,
	"kQueryExceedsEvictableEntityLimit":      2011,
	"kRegexTooLong":                          2012,
	"kQueryGroupByInvalidRawSort":            3000,
	"kQueryGroupByInvalidRawLimit":           3001,
	"kQueryGroupByMissingRawCol":             3002,
	"kQueryGroupByUnsupported":               3003,
	"kQueryGroupByInvalidAggrCol":            3004,
	"kQueryGroupByInvalidGroupByCol":         3005,
	"kQueryGroupByInvalidNumBuckets":         3006,
	"kQueryGroupByMissingAggrCol":            3007,
	"kQueryGroupByInvalidRawCol":             3008,
	"kQueryGroupByInvalidGroupLimit":         3009,
	"kQueryGroupByInvalidBooleanExpr":        3010,
	"kQueryGroupByInvalidComparisionExpr":    3011,
	"kQueryGroupByInvalidPreprocessed":       3012,
	"kQueryGroupByAggrError":                 3013,
	"kQueryUndefinedMetricType":              3014,
	"kQueryGroupByInvalidGroupByColType":     3015,
	"kQueryInvalidDownSamplingInterval":      3016,
	"kQueryGroupByInvalidBucketIntervals":    3017,
	"kCursorQueryForAggregateColumn":         3018,
	"kCursorQueryForLookups":                 3019,
	"kCursorQueryForGroupBy":                 3020,
	"kCursorOutOfOrder":                      3021,
	"kCursorObjectNotFound":                  3022,
	"kDerivedMetricNoNumericData":            4000,
	"kDerivedMetricInvalidTimeRange":         4001,
	"kDerivedMetricNotFound":                 4002,
	"kDerivedMetricInvalidMetricType":        4003,
	"kDerivedMetricInvalidExpression":        4004,
	"kDerivedMetricInvalidRollupQuery":       4005,
	"kDerivedMetricDependsOnDerivedMetric":   4006,
	"kDerivedMetricMaxEntitiesExceeded":      4007,
	"kQueryDownsamplingInvalidInterval":      5001,
	"kQueryDownsamplingConflictingOps":       5002,
	"kWatchClientSessionNotPresent":          6000,
	"kWatchClientSessionStale":               6001,
	"kWatchClientQueuedWatchesLimit":         6002,
	"kWatchClientInvalidSequenceId":          6003,
	"kMetricDataRPCDisabled":                 6004,
	"kWatchClientNestedFieldSchemaUpdated":   6005,
	"kWatchClientMultipleRegistrations":      6006,
	"kMetadataWatchInNonLeader":              6007,
	"kMetadataWatchLeaderNotFound":           6008,
	"kWatchClientShardUnloaded":              6009,
	"kWatchClientClusterRegistered":          6010,
	"kWatchClientClusterUnregistered":        6011,
	"kDownSamplingIntervalNotMultiple":       7000,
	"kDownSamplingIntervalNotAligned":        7001,
	"kMetricDataValueNotPresent":             8000,
	"kRetryPutMetricDataOverHiMem":           8001,
	"kShardInTransition":                     9000,
	"kShardMapNotInitialized":                9001,
	"kShardNotReady":                         9002,
	"kCassandraOpDropped":                    10000,
	"kRPCQueueFull":                          11000,
	"kDroppedBecauseQueuedForTooLong":        11001,
}

func (x InsightsErrorProto_SubType) Enum() *InsightsErrorProto_SubType {
	p := new(InsightsErrorProto_SubType)
	*p = x
	return p
}

func (x InsightsErrorProto_SubType) String() string {
	return proto.EnumName(InsightsErrorProto_SubType_name, int32(x))
}

func (x *InsightsErrorProto_SubType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InsightsErrorProto_SubType_value, data, "InsightsErrorProto_SubType")
	if err != nil {
		return err
	}
	*x = InsightsErrorProto_SubType(value)
	return nil
}

func (InsightsErrorProto_SubType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{0, 1}
}

// Aggregation and downsampling operators.
type MetricType_Operator int32

const (
	MetricType_kSum MetricType_Operator = 0
	MetricType_kMax MetricType_Operator = 1
	MetricType_kMin MetricType_Operator = 2
	MetricType_kAvg MetricType_Operator = 3
	// Last value will prevail.
	MetricType_kLast  MetricType_Operator = 4
	MetricType_kCount MetricType_Operator = 5
)

var MetricType_Operator_name = map[int32]string{
	0: "kSum",
	1: "kMax",
	2: "kMin",
	3: "kAvg",
	4: "kLast",
	5: "kCount",
}

var MetricType_Operator_value = map[string]int32{
	"kSum":   0,
	"kMax":   1,
	"kMin":   2,
	"kAvg":   3,
	"kLast":  4,
	"kCount": 5,
}

func (x MetricType_Operator) Enum() *MetricType_Operator {
	p := new(MetricType_Operator)
	*p = x
	return p
}

func (x MetricType_Operator) String() string {
	return proto.EnumName(MetricType_Operator_name, int32(x))
}

func (x *MetricType_Operator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricType_Operator_value, data, "MetricType_Operator")
	if err != nil {
		return err
	}
	*x = MetricType_Operator(value)
	return nil
}

func (MetricType_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{9, 0}
}

// Compression types for serialised protos as attribute values.
type MetricType_CompressionType int32

const (
	MetricType_kNone   MetricType_CompressionType = 0
	MetricType_kBzip2  MetricType_CompressionType = 1
	MetricType_kZlib   MetricType_CompressionType = 2
	MetricType_kSnappy MetricType_CompressionType = 3
)

var MetricType_CompressionType_name = map[int32]string{
	0: "kNone",
	1: "kBzip2",
	2: "kZlib",
	3: "kSnappy",
}

var MetricType_CompressionType_value = map[string]int32{
	"kNone":   0,
	"kBzip2":  1,
	"kZlib":   2,
	"kSnappy": 3,
}

func (x MetricType_CompressionType) Enum() *MetricType_CompressionType {
	p := new(MetricType_CompressionType)
	*p = x
	return p
}

func (x MetricType_CompressionType) String() string {
	return proto.EnumName(MetricType_CompressionType_name, int32(x))
}

func (x *MetricType_CompressionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricType_CompressionType_value, data, "MetricType_CompressionType")
	if err != nil {
		return err
	}
	*x = MetricType_CompressionType(value)
	return nil
}

func (MetricType_CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{9, 1}
}

// Personally Identifiable Information (PII) protection policy while
// collecting this attribute.
type MetricType_PiiType int32

const (
	// Does not contain PII.
	MetricType_kDoesNotContainPII MetricType_PiiType = 0
	// Mask the value when collecting.
	MetricType_kMaskValue MetricType_PiiType = 1
	// Remove the metric when collecting.
	MetricType_kRemoveMetric MetricType_PiiType = 2
	// Mask if the value of this field matches a regex. Applied only for string
	// data types.
	MetricType_kMaskIfValueMatchRegex MetricType_PiiType = 3
	// Remove if the value of this field matches a regex. Applied only for
	// string data types.
	MetricType_kRemoveIfValueMatchRegex MetricType_PiiType = 4
)

var MetricType_PiiType_name = map[int32]string{
	0: "kDoesNotContainPII",
	1: "kMaskValue",
	2: "kRemoveMetric",
	3: "kMaskIfValueMatchRegex",
	4: "kRemoveIfValueMatchRegex",
}

var MetricType_PiiType_value = map[string]int32{
	"kDoesNotContainPII":       0,
	"kMaskValue":               1,
	"kRemoveMetric":            2,
	"kMaskIfValueMatchRegex":   3,
	"kRemoveIfValueMatchRegex": 4,
}

func (x MetricType_PiiType) Enum() *MetricType_PiiType {
	p := new(MetricType_PiiType)
	*p = x
	return p
}

func (x MetricType_PiiType) String() string {
	return proto.EnumName(MetricType_PiiType_name, int32(x))
}

func (x *MetricType_PiiType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricType_PiiType_value, data, "MetricType_PiiType")
	if err != nil {
		return err
	}
	*x = MetricType_PiiType(value)
	return nil
}

func (MetricType_PiiType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{9, 2}
}

type MetricType_MaskType int32

const (
	MetricType_kDefaultMask  MetricType_MaskType = 0
	MetricType_kIpAddrMask   MetricType_MaskType = 1
	MetricType_kIpv4AddrMask MetricType_MaskType = 2
	MetricType_kIpv6AddrMask MetricType_MaskType = 3
	MetricType_kEmailMask    MetricType_MaskType = 4
	MetricType_kNameMask     MetricType_MaskType = 5
)

var MetricType_MaskType_name = map[int32]string{
	0: "kDefaultMask",
	1: "kIpAddrMask",
	2: "kIpv4AddrMask",
	3: "kIpv6AddrMask",
	4: "kEmailMask",
	5: "kNameMask",
}

var MetricType_MaskType_value = map[string]int32{
	"kDefaultMask":  0,
	"kIpAddrMask":   1,
	"kIpv4AddrMask": 2,
	"kIpv6AddrMask": 3,
	"kEmailMask":    4,
	"kNameMask":     5,
}

func (x MetricType_MaskType) Enum() *MetricType_MaskType {
	p := new(MetricType_MaskType)
	*p = x
	return p
}

func (x MetricType_MaskType) String() string {
	return proto.EnumName(MetricType_MaskType_name, int32(x))
}

func (x *MetricType_MaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricType_MaskType_value, data, "MetricType_MaskType")
	if err != nil {
		return err
	}
	*x = MetricType_MaskType(value)
	return nil
}

func (MetricType_MaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{9, 3}
}

// Required for index columns. This specifies the data type for
// reverse indexes on attributes, and is required because it helps
// catch invalid attribute values that can otherwise result in
// entities not being indexed (e.g., if one entity has a string
// value for an index attribute when all other entities of that type
// have an int value.)
//
// TODO (ramesh): Add support for floating point types. Floats are
// different from strings and ints, since equality comparison on
// floats isn't precise and hence storing them in a map like we do
// for strings and ints won't work. One way to solve this is to use
// the floor of the float as the key into the map and store the
// actual float value along with the entity id in the map entry's
// value.
type MetricType_IndexType int32

const (
	MetricType_kInt64   MetricType_IndexType = 0
	MetricType_kString  MetricType_IndexType = 1
	MetricType_kUInt64  MetricType_IndexType = 2
	MetricType_kBoolean MetricType_IndexType = 3
)

var MetricType_IndexType_name = map[int32]string{
	0: "kInt64",
	1: "kString",
	2: "kUInt64",
	3: "kBoolean",
}

var MetricType_IndexType_value = map[string]int32{
	"kInt64":   0,
	"kString":  1,
	"kUInt64":  2,
	"kBoolean": 3,
}

func (x MetricType_IndexType) Enum() *MetricType_IndexType {
	p := new(MetricType_IndexType)
	*p = x
	return p
}

func (x MetricType_IndexType) String() string {
	return proto.EnumName(MetricType_IndexType_name, int32(x))
}

func (x *MetricType_IndexType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricType_IndexType_value, data, "MetricType_IndexType")
	if err != nil {
		return err
	}
	*x = MetricType_IndexType(value)
	return nil
}

func (MetricType_IndexType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{9, 4}
}

// Optional.  Determine whether we calculate the ttl based on current time
// (kCurrentTimeBased) or the timestamp of the metric data (kTimestampBased).
// 1. For kCurrentTimeBased, we will keep this data for "ttl" time
//    (specified by the retention field in the metric type):
//        ttl = raw/hourly_retention_in_weeks
// 2. Otherwise, we will calculate the "ttl" as following:
//        ttl = max(insights_metric_data_min_raw_ttl_secs,
//                  timestamp - now + raw/hourly_retention_in_weeks)
type MetricType_TtlCalculation int32

const (
	// TTL is calculated relative to the data point timestamp.
	MetricType_kTimestampBased MetricType_TtlCalculation = 0
	// TTL is calculated relative to the current time.
	MetricType_kCurrentTimeBased MetricType_TtlCalculation = 1
)

var MetricType_TtlCalculation_name = map[int32]string{
	0: "kTimestampBased",
	1: "kCurrentTimeBased",
}

var MetricType_TtlCalculation_value = map[string]int32{
	"kTimestampBased":   0,
	"kCurrentTimeBased": 1,
}

func (x MetricType_TtlCalculation) Enum() *MetricType_TtlCalculation {
	p := new(MetricType_TtlCalculation)
	*p = x
	return p
}

func (x MetricType_TtlCalculation) String() string {
	return proto.EnumName(MetricType_TtlCalculation_name, int32(x))
}

func (x *MetricType_TtlCalculation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricType_TtlCalculation_value, data, "MetricType_TtlCalculation")
	if err != nil {
		return err
	}
	*x = MetricType_TtlCalculation(value)
	return nil
}

func (MetricType_TtlCalculation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{9, 5}
}

// Optional. Determine whether the given metric type is realtime metric
// or analytics metric (e.g. Capacity planning or VMBL stat)
type MetricType_Category int32

const (
	MetricType_kRealTime  MetricType_Category = 0
	MetricType_kAnalytics MetricType_Category = 1
)

var MetricType_Category_name = map[int32]string{
	0: "kRealTime",
	1: "kAnalytics",
}

var MetricType_Category_value = map[string]int32{
	"kRealTime":  0,
	"kAnalytics": 1,
}

func (x MetricType_Category) Enum() *MetricType_Category {
	p := new(MetricType_Category)
	*p = x
	return p
}

func (x MetricType_Category) String() string {
	return proto.EnumName(MetricType_Category_name, int32(x))
}

func (x *MetricType_Category) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricType_Category_value, data, "MetricType_Category")
	if err != nil {
		return err
	}
	*x = MetricType_Category(value)
	return nil
}

func (MetricType_Category) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{9, 6}
}

type NestedFieldInfo_ValueType int32

const (
	NestedFieldInfo_kString  NestedFieldInfo_ValueType = 0
	NestedFieldInfo_kBoolean NestedFieldInfo_ValueType = 1
	NestedFieldInfo_kDouble  NestedFieldInfo_ValueType = 2
	NestedFieldInfo_kFloat   NestedFieldInfo_ValueType = 3
	NestedFieldInfo_kInt64   NestedFieldInfo_ValueType = 4
	NestedFieldInfo_kUInt64  NestedFieldInfo_ValueType = 5
	NestedFieldInfo_kBytes   NestedFieldInfo_ValueType = 6
	// The enum integral value will be stored as int64 value.
	NestedFieldInfo_kEnum NestedFieldInfo_ValueType = 7
)

var NestedFieldInfo_ValueType_name = map[int32]string{
	0: "kString",
	1: "kBoolean",
	2: "kDouble",
	3: "kFloat",
	4: "kInt64",
	5: "kUInt64",
	6: "kBytes",
	7: "kEnum",
}

var NestedFieldInfo_ValueType_value = map[string]int32{
	"kString":  0,
	"kBoolean": 1,
	"kDouble":  2,
	"kFloat":   3,
	"kInt64":   4,
	"kUInt64":  5,
	"kBytes":   6,
	"kEnum":    7,
}

func (x NestedFieldInfo_ValueType) Enum() *NestedFieldInfo_ValueType {
	p := new(NestedFieldInfo_ValueType)
	*p = x
	return p
}

func (x NestedFieldInfo_ValueType) String() string {
	return proto.EnumName(NestedFieldInfo_ValueType_name, int32(x))
}

func (x *NestedFieldInfo_ValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NestedFieldInfo_ValueType_value, data, "NestedFieldInfo_ValueType")
	if err != nil {
		return err
	}
	*x = NestedFieldInfo_ValueType(value)
	return nil
}

func (NestedFieldInfo_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{10, 0}
}

// Specified the option to consider when 'has_repeated_fields' = false, and
// multiple values are found at the mentioned index.
type NestedFieldInfo_FieldOption int32

const (
	// If multiple values are present at the index, consider the first value.
	NestedFieldInfo_kFirst NestedFieldInfo_FieldOption = 0
	// If multiple values are present at the index, consider the last value.
	NestedFieldInfo_kLast NestedFieldInfo_FieldOption = 1
)

var NestedFieldInfo_FieldOption_name = map[int32]string{
	0: "kFirst",
	1: "kLast",
}

var NestedFieldInfo_FieldOption_value = map[string]int32{
	"kFirst": 0,
	"kLast":  1,
}

func (x NestedFieldInfo_FieldOption) Enum() *NestedFieldInfo_FieldOption {
	p := new(NestedFieldInfo_FieldOption)
	*p = x
	return p
}

func (x NestedFieldInfo_FieldOption) String() string {
	return proto.EnumName(NestedFieldInfo_FieldOption_name, int32(x))
}

func (x *NestedFieldInfo_FieldOption) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NestedFieldInfo_FieldOption_value, data, "NestedFieldInfo_FieldOption")
	if err != nil {
		return err
	}
	*x = NestedFieldInfo_FieldOption(value)
	return nil
}

func (NestedFieldInfo_FieldOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{10, 1}
}

type EntityTypeShard_ShardType int32

const (
	// Entities of this type will be sharded based on token ranges.
	// This option is preferred if the entity does not have affinity, stats,
	// or is not involved in parent entity rollups.
	// e.g:- Acropolis "Task" entity
	EntityTypeShard_kTokenRange EntityTypeShard_ShardType = 0
	// Entities of this type will be sharded based on entity relationships.
	// e.g:- "VM", "vDisk", "node", "cluster", "PD"
	EntityTypeShard_kEntityType EntityTypeShard_ShardType = 1
)

var EntityTypeShard_ShardType_name = map[int32]string{
	0: "kTokenRange",
	1: "kEntityType",
}

var EntityTypeShard_ShardType_value = map[string]int32{
	"kTokenRange": 0,
	"kEntityType": 1,
}

func (x EntityTypeShard_ShardType) Enum() *EntityTypeShard_ShardType {
	p := new(EntityTypeShard_ShardType)
	*p = x
	return p
}

func (x EntityTypeShard_ShardType) String() string {
	return proto.EnumName(EntityTypeShard_ShardType_name, int32(x))
}

func (x *EntityTypeShard_ShardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntityTypeShard_ShardType_value, data, "EntityTypeShard_ShardType")
	if err != nil {
		return err
	}
	*x = EntityTypeShard_ShardType(value)
	return nil
}

func (EntityTypeShard_ShardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{12, 0}
}

// The list of supported cluster functions. This enum should be a subset of
// the enum 'ClusterFunctions' in 'ConfigurationProto' at
// 'zeus/configuration.proto' and the enum elements should have the same
// value as in 'ConfigurationProto'. When a new cluster function is added
// here, a corresponding static_assert must be added to insights_server.cc
// to ensure that the value matches with the one in ConfigurationProto.
type TypeInfo_ClusterFunctions int32

const (
	// Regular NDFS serving user IOs (PE).
	TypeInfo_kNDFS TypeInfo_ClusterFunctions = 1
	// Multicluster analytics and managementi (PC).
	TypeInfo_kMulticluster TypeInfo_ClusterFunctions = 2
	// Cloud backup and DR gateway.
	TypeInfo_kCloudDataGateway TypeInfo_ClusterFunctions = 4
	// Minerva cluster for file server.
	TypeInfo_kMinerva TypeInfo_ClusterFunctions = 16
	// Xi VM cluster.
	TypeInfo_kXiVM TypeInfo_ClusterFunctions = 128
	// IAM.
	TypeInfo_kIAMCluster TypeInfo_ClusterFunctions = 4096
	// AGS.
	TypeInfo_kAGSCluster TypeInfo_ClusterFunctions = 256
)

var TypeInfo_ClusterFunctions_name = map[int32]string{
	1:    "kNDFS",
	2:    "kMulticluster",
	4:    "kCloudDataGateway",
	16:   "kMinerva",
	128:  "kXiVM",
	4096: "kIAMCluster",
	256:  "kAGSCluster",
}

var TypeInfo_ClusterFunctions_value = map[string]int32{
	"kNDFS":             1,
	"kMulticluster":     2,
	"kCloudDataGateway": 4,
	"kMinerva":          16,
	"kXiVM":             128,
	"kIAMCluster":       4096,
	"kAGSCluster":       256,
}

func (x TypeInfo_ClusterFunctions) Enum() *TypeInfo_ClusterFunctions {
	p := new(TypeInfo_ClusterFunctions)
	*p = x
	return p
}

func (x TypeInfo_ClusterFunctions) String() string {
	return proto.EnumName(TypeInfo_ClusterFunctions_name, int32(x))
}

func (x *TypeInfo_ClusterFunctions) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TypeInfo_ClusterFunctions_value, data, "TypeInfo_ClusterFunctions")
	if err != nil {
		return err
	}
	*x = TypeInfo_ClusterFunctions(value)
	return nil
}

func (TypeInfo_ClusterFunctions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{13, 0}
}

// Enum for backup workflow. kRegular - non backup related entities(default).
// Backup - when the sent entity is a backup. Restore - when the entity is
// sent as part of a restore payload.
type Entity_BackupStatus int32

const (
	Entity_kRegular Entity_BackupStatus = 0
	Entity_kBackup  Entity_BackupStatus = 1
	Entity_kRestore Entity_BackupStatus = 2
)

var Entity_BackupStatus_name = map[int32]string{
	0: "kRegular",
	1: "kBackup",
	2: "kRestore",
}

var Entity_BackupStatus_value = map[string]int32{
	"kRegular": 0,
	"kBackup":  1,
	"kRestore": 2,
}

func (x Entity_BackupStatus) Enum() *Entity_BackupStatus {
	p := new(Entity_BackupStatus)
	*p = x
	return p
}

func (x Entity_BackupStatus) String() string {
	return proto.EnumName(Entity_BackupStatus_name, int32(x))
}

func (x *Entity_BackupStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Entity_BackupStatus_value, data, "Entity_BackupStatus")
	if err != nil {
		return err
	}
	*x = Entity_BackupStatus(value)
	return nil
}

func (Entity_BackupStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{26, 0}
}

// Operation... set/clear.
type AttributeDataArg_AttributeOperation int32

const (
	AttributeDataArg_kSET   AttributeDataArg_AttributeOperation = 0
	AttributeDataArg_kCLEAR AttributeDataArg_AttributeOperation = 1
)

var AttributeDataArg_AttributeOperation_name = map[int32]string{
	0: "kSET",
	1: "kCLEAR",
}

var AttributeDataArg_AttributeOperation_value = map[string]int32{
	"kSET":   0,
	"kCLEAR": 1,
}

func (x AttributeDataArg_AttributeOperation) Enum() *AttributeDataArg_AttributeOperation {
	p := new(AttributeDataArg_AttributeOperation)
	*p = x
	return p
}

func (x AttributeDataArg_AttributeOperation) String() string {
	return proto.EnumName(AttributeDataArg_AttributeOperation_name, int32(x))
}

func (x *AttributeDataArg_AttributeOperation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AttributeDataArg_AttributeOperation_value, data, "AttributeDataArg_AttributeOperation")
	if err != nil {
		return err
	}
	*x = AttributeDataArg_AttributeOperation(value)
	return nil
}

func (AttributeDataArg_AttributeOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{30, 0}
}

// Operation performed on attribute.
type AttributeOperation_Op int32

const (
	AttributeOperation_kRename          AttributeOperation_Op = 0
	AttributeOperation_kDelete          AttributeOperation_Op = 1
	AttributeOperation_kEntityId        AttributeOperation_Op = 2
	AttributeOperation_kConvertToMetric AttributeOperation_Op = 3
	AttributeOperation_kConvertToList   AttributeOperation_Op = 4
	AttributeOperation_kCopy            AttributeOperation_Op = 5
	AttributeOperation_kCopyToMetric    AttributeOperation_Op = 6
)

var AttributeOperation_Op_name = map[int32]string{
	0: "kRename",
	1: "kDelete",
	2: "kEntityId",
	3: "kConvertToMetric",
	4: "kConvertToList",
	5: "kCopy",
	6: "kCopyToMetric",
}

var AttributeOperation_Op_value = map[string]int32{
	"kRename":          0,
	"kDelete":          1,
	"kEntityId":        2,
	"kConvertToMetric": 3,
	"kConvertToList":   4,
	"kCopy":            5,
	"kCopyToMetric":    6,
}

func (x AttributeOperation_Op) Enum() *AttributeOperation_Op {
	p := new(AttributeOperation_Op)
	*p = x
	return p
}

func (x AttributeOperation_Op) String() string {
	return proto.EnumName(AttributeOperation_Op_name, int32(x))
}

func (x *AttributeOperation_Op) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AttributeOperation_Op_value, data, "AttributeOperation_Op")
	if err != nil {
		return err
	}
	*x = AttributeOperation_Op(value)
	return nil
}

func (AttributeOperation_Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{31, 0}
}

type Expression_Operator int32

const (
	Expression_kPlus   Expression_Operator = 0
	Expression_kMinus  Expression_Operator = 1
	Expression_kMult   Expression_Operator = 2
	Expression_kDiv    Expression_Operator = 3
	Expression_kMod    Expression_Operator = 4
	Expression_kConcat Expression_Operator = 5
)

var Expression_Operator_name = map[int32]string{
	0: "kPlus",
	1: "kMinus",
	2: "kMult",
	3: "kDiv",
	4: "kMod",
	5: "kConcat",
}

var Expression_Operator_value = map[string]int32{
	"kPlus":   0,
	"kMinus":  1,
	"kMult":   2,
	"kDiv":    3,
	"kMod":    4,
	"kConcat": 5,
}

func (x Expression_Operator) Enum() *Expression_Operator {
	p := new(Expression_Operator)
	*p = x
	return p
}

func (x Expression_Operator) String() string {
	return proto.EnumName(Expression_Operator_name, int32(x))
}

func (x *Expression_Operator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Expression_Operator_value, data, "Expression_Operator")
	if err != nil {
		return err
	}
	*x = Expression_Operator(value)
	return nil
}

func (Expression_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{59, 0}
}

type ComparisonExpression_Operator int32

const (
	ComparisonExpression_kEQ ComparisonExpression_Operator = 0
	ComparisonExpression_kNE ComparisonExpression_Operator = 1
	ComparisonExpression_kLT ComparisonExpression_Operator = 2
	ComparisonExpression_kLE ComparisonExpression_Operator = 3
	ComparisonExpression_kGT ComparisonExpression_Operator = 4
	ComparisonExpression_kGE ComparisonExpression_Operator = 5
	// Performs a regex match for the specified column and includes those
	// entities for which the regex match with the specified 'value' succeeds.
	// If the column value is not specified in comparison expression
	// (wild card), insights server would iterate over all the attributes for
	// the entities and include those entities for which there is a regex match.
	ComparisonExpression_kLike ComparisonExpression_Operator = 6
	// Includes the entities for which the 'rhs' expression is a subset of the
	// metric values specified in the 'lhs'.
	ComparisonExpression_kContains ComparisonExpression_Operator = 7
	// Includes the entities for which the metric values specified in the 'lhs'
	// is a subset of 'rhs'.
	ComparisonExpression_kIN ComparisonExpression_Operator = 8
	// If the intersection of LHS and RHS is not empty, then kAny will evaluate
	// to true, otherwise false.
	// In the case of entity type attributes, the LHS is the set of the
	// ancestor UUIDs. All the UUIDs should be of the same ancestor type as the
	// type mentioned in the LHS column name.
	// In the case of the normal attributes, the LHS is the attribute value
	// list.
	ComparisonExpression_kAny ComparisonExpression_Operator = 9
	// This is a unary operator to check for the existence of a value for the
	// column specified in the LHS leaf expression.
	ComparisonExpression_kExists ComparisonExpression_Operator = 10
	// This operator is only valid for conditional watches(no support in query).
	// This is a unary operator to check that value for the attribute specified
	// has changed from the previous value. This includes changes from a null
	// value to a non-null value and vice versa.
	// For detailed semantics of this operator especially with respect to
	// current state filtering, please refer to:
	// main/insights/insights_server/watch/watches_framework_guarantee.txt
	ComparisonExpression_kChanged ComparisonExpression_Operator = 11
)

var ComparisonExpression_Operator_name = map[int32]string{
	0:  "kEQ",
	1:  "kNE",
	2:  "kLT",
	3:  "kLE",
	4:  "kGT",
	5:  "kGE",
	6:  "kLike",
	7:  "kContains",
	8:  "kIN",
	9:  "kAny",
	10: "kExists",
	11: "kChanged",
}

var ComparisonExpression_Operator_value = map[string]int32{
	"kEQ":       0,
	"kNE":       1,
	"kLT":       2,
	"kLE":       3,
	"kGT":       4,
	"kGE":       5,
	"kLike":     6,
	"kContains": 7,
	"kIN":       8,
	"kAny":      9,
	"kExists":   10,
	"kChanged":  11,
}

func (x ComparisonExpression_Operator) Enum() *ComparisonExpression_Operator {
	p := new(ComparisonExpression_Operator)
	*p = x
	return p
}

func (x ComparisonExpression_Operator) String() string {
	return proto.EnumName(ComparisonExpression_Operator_name, int32(x))
}

func (x *ComparisonExpression_Operator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ComparisonExpression_Operator_value, data, "ComparisonExpression_Operator")
	if err != nil {
		return err
	}
	*x = ComparisonExpression_Operator(value)
	return nil
}

func (ComparisonExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{60, 0}
}

type BooleanExpression_Operator int32

const (
	BooleanExpression_kAnd BooleanExpression_Operator = 0
	BooleanExpression_kOr  BooleanExpression_Operator = 1
	BooleanExpression_kNot BooleanExpression_Operator = 2
)

var BooleanExpression_Operator_name = map[int32]string{
	0: "kAnd",
	1: "kOr",
	2: "kNot",
}

var BooleanExpression_Operator_value = map[string]int32{
	"kAnd": 0,
	"kOr":  1,
	"kNot": 2,
}

func (x BooleanExpression_Operator) Enum() *BooleanExpression_Operator {
	p := new(BooleanExpression_Operator)
	*p = x
	return p
}

func (x BooleanExpression_Operator) String() string {
	return proto.EnumName(BooleanExpression_Operator_name, int32(x))
}

func (x *BooleanExpression_Operator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BooleanExpression_Operator_value, data, "BooleanExpression_Operator")
	if err != nil {
		return err
	}
	*x = BooleanExpression_Operator(value)
	return nil
}

func (BooleanExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{61, 0}
}

// Specifies whether the group_by_column is discrete-valued (e.g., VM power
// state), or is continuous (e.g., VM memory usage). For discrete-valued
// columns, grouping is done by exact matches, whereas for continuous
// columns, grouping is done by dividing the column values into buckets.
type QueryGroupBy_GroupByColumnType int32

const (
	QueryGroupBy_kDiscrete   QueryGroupBy_GroupByColumnType = 0
	QueryGroupBy_kContinuous QueryGroupBy_GroupByColumnType = 1
)

var QueryGroupBy_GroupByColumnType_name = map[int32]string{
	0: "kDiscrete",
	1: "kContinuous",
}

var QueryGroupBy_GroupByColumnType_value = map[string]int32{
	"kDiscrete":   0,
	"kContinuous": 1,
}

func (x QueryGroupBy_GroupByColumnType) Enum() *QueryGroupBy_GroupByColumnType {
	p := new(QueryGroupBy_GroupByColumnType)
	*p = x
	return p
}

func (x QueryGroupBy_GroupByColumnType) String() string {
	return proto.EnumName(QueryGroupBy_GroupByColumnType_name, int32(x))
}

func (x *QueryGroupBy_GroupByColumnType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QueryGroupBy_GroupByColumnType_value, data, "QueryGroupBy_GroupByColumnType")
	if err != nil {
		return err
	}
	*x = QueryGroupBy_GroupByColumnType(value)
	return nil
}

func (QueryGroupBy_GroupByColumnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{64, 0}
}

type QueryOrderBy_SortOrder int32

const (
	QueryOrderBy_kAscending  QueryOrderBy_SortOrder = 0
	QueryOrderBy_kDescending QueryOrderBy_SortOrder = 1
)

var QueryOrderBy_SortOrder_name = map[int32]string{
	0: "kAscending",
	1: "kDescending",
}

var QueryOrderBy_SortOrder_value = map[string]int32{
	"kAscending":  0,
	"kDescending": 1,
}

func (x QueryOrderBy_SortOrder) Enum() *QueryOrderBy_SortOrder {
	p := new(QueryOrderBy_SortOrder)
	*p = x
	return p
}

func (x QueryOrderBy_SortOrder) String() string {
	return proto.EnumName(QueryOrderBy_SortOrder_name, int32(x))
}

func (x *QueryOrderBy_SortOrder) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QueryOrderBy_SortOrder_value, data, "QueryOrderBy_SortOrder")
	if err != nil {
		return err
	}
	*x = QueryOrderBy_SortOrder(value)
	return nil
}

func (QueryOrderBy_SortOrder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{68, 0}
}

// When sorting using a time-series column, we need to map the multiple
// values in the time-series to a single value. This specifies how we do
// the mapping.
type QueryOrderBy_SortKey int32

const (
	// Use the maximum value of the column in the time range.
	QueryOrderBy_kMax QueryOrderBy_SortKey = 0
	// Use the minimum value of the column in the time range.
	QueryOrderBy_kMin QueryOrderBy_SortKey = 1
	// Use the first value of the column in the time range.
	QueryOrderBy_kFirst QueryOrderBy_SortKey = 2
	// Use the last value of the column in the time range.
	QueryOrderBy_kLast QueryOrderBy_SortKey = 3
	// Use the latest value of the column and ignore the other values
	// in the time range.
	QueryOrderBy_kLatest QueryOrderBy_SortKey = 4
	// Use the avg value of the column in the time range.
	// It takes non-numeric values as 0.
	// If all data are non-numeric, an error of kInvalidRequest will be thrown.
	// It only works for raw column sort and group sort on aggregate column.
	QueryOrderBy_kAvg QueryOrderBy_SortKey = 5
)

var QueryOrderBy_SortKey_name = map[int32]string{
	0: "kMax",
	1: "kMin",
	2: "kFirst",
	3: "kLast",
	4: "kLatest",
	5: "kAvg",
}

var QueryOrderBy_SortKey_value = map[string]int32{
	"kMax":    0,
	"kMin":    1,
	"kFirst":  2,
	"kLast":   3,
	"kLatest": 4,
	"kAvg":    5,
}

func (x QueryOrderBy_SortKey) Enum() *QueryOrderBy_SortKey {
	p := new(QueryOrderBy_SortKey)
	*p = x
	return p
}

func (x QueryOrderBy_SortKey) String() string {
	return proto.EnumName(QueryOrderBy_SortKey_name, int32(x))
}

func (x *QueryOrderBy_SortKey) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QueryOrderBy_SortKey_value, data, "QueryOrderBy_SortKey")
	if err != nil {
		return err
	}
	*x = QueryOrderBy_SortKey(value)
	return nil
}

func (QueryOrderBy_SortKey) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{68, 1}
}

type Query_FlagTypes int32

const (
	// If set, don't ignore undefined columns.
	Query_kReturnErrorForUndefinedColumn Query_FlagTypes = 1
	// If set, insights server will ignore sending the guids in query response
	// in case no raw columns are specified.
	Query_kSkipGuidsForEmptyRawColumns Query_FlagTypes = 2
	// Enable multi-phase fetching of raw column values in the query pipeline.
	// If set, IDF will first limit the entities it needs to return as defined
	// in 'raw_limit' and then fetches the raw columns requested. If disabled,
	// this happens the other way. Setting this to true provides performance
	// benefits in certain cases. This is purely a performance flag and has no
	// impact on the output.
	Query_kForceMultiPhaseRawColumnFetch Query_FlagTypes = 4
	// If not set, continuous grouping query with 'num_buckets' will be executed
	// into multiple(two) phases. In the first phase, we will fetch the max and
	// min values of 'group_by_column' from processor nodes. We will then
	// calculate the overall min and max value from the node responses, calculate
	// the buckets based on min/max, 'num_buckets' and 'bucket_boundary' and send
	// another query with these user defined buckets.
	// Note: This flag should strictly be set if the clients have a continuous
	// grouping query with 'num_buckets' and 'group_by_column' having non-numeric
	// values across all the entities.
	Query_kForceSinglePhaseFetchContinuousGrouping Query_FlagTypes = 8
)

var Query_FlagTypes_name = map[int32]string{
	1: "kReturnErrorForUndefinedColumn",
	2: "kSkipGuidsForEmptyRawColumns",
	4: "kForceMultiPhaseRawColumnFetch",
	8: "kForceSinglePhaseFetchContinuousGrouping",
}

var Query_FlagTypes_value = map[string]int32{
	"kReturnErrorForUndefinedColumn":           1,
	"kSkipGuidsForEmptyRawColumns":             2,
	"kForceMultiPhaseRawColumnFetch":           4,
	"kForceSinglePhaseFetchContinuousGrouping": 8,
}

func (x Query_FlagTypes) Enum() *Query_FlagTypes {
	p := new(Query_FlagTypes)
	*p = x
	return p
}

func (x Query_FlagTypes) String() string {
	return proto.EnumName(Query_FlagTypes_name, int32(x))
}

func (x *Query_FlagTypes) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Query_FlagTypes_value, data, "Query_FlagTypes")
	if err != nil {
		return err
	}
	*x = Query_FlagTypes(value)
	return nil
}

func (Query_FlagTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{71, 0}
}

type MetricDataDownSamplingInterval_Type int32

const (
	MetricDataDownSamplingInterval_kRaw    MetricDataDownSamplingInterval_Type = 0
	MetricDataDownSamplingInterval_kHourly MetricDataDownSamplingInterval_Type = 1
)

var MetricDataDownSamplingInterval_Type_name = map[int32]string{
	0: "kRaw",
	1: "kHourly",
}

var MetricDataDownSamplingInterval_Type_value = map[string]int32{
	"kRaw":    0,
	"kHourly": 1,
}

func (x MetricDataDownSamplingInterval_Type) Enum() *MetricDataDownSamplingInterval_Type {
	p := new(MetricDataDownSamplingInterval_Type)
	*p = x
	return p
}

func (x MetricDataDownSamplingInterval_Type) String() string {
	return proto.EnumName(MetricDataDownSamplingInterval_Type_name, int32(x))
}

func (x *MetricDataDownSamplingInterval_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricDataDownSamplingInterval_Type_value, data, "MetricDataDownSamplingInterval_Type")
	if err != nil {
		return err
	}
	*x = MetricDataDownSamplingInterval_Type(value)
	return nil
}

func (MetricDataDownSamplingInterval_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{80, 0}
}

// A list of stats that are requested.
type GetInsightsLeaderStatsArg_Type int32

const (
	GetInsightsLeaderStatsArg_kRpc    GetInsightsLeaderStatsArg_Type = 0
	GetInsightsLeaderStatsArg_kStore  GetInsightsLeaderStatsArg_Type = 1
	GetInsightsLeaderStatsArg_kServer GetInsightsLeaderStatsArg_Type = 2
)

var GetInsightsLeaderStatsArg_Type_name = map[int32]string{
	0: "kRpc",
	1: "kStore",
	2: "kServer",
}

var GetInsightsLeaderStatsArg_Type_value = map[string]int32{
	"kRpc":    0,
	"kStore":  1,
	"kServer": 2,
}

func (x GetInsightsLeaderStatsArg_Type) Enum() *GetInsightsLeaderStatsArg_Type {
	p := new(GetInsightsLeaderStatsArg_Type)
	*p = x
	return p
}

func (x GetInsightsLeaderStatsArg_Type) String() string {
	return proto.EnumName(GetInsightsLeaderStatsArg_Type_name, int32(x))
}

func (x *GetInsightsLeaderStatsArg_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GetInsightsLeaderStatsArg_Type_value, data, "GetInsightsLeaderStatsArg_Type")
	if err != nil {
		return err
	}
	*x = GetInsightsLeaderStatsArg_Type(value)
	return nil
}

func (GetInsightsLeaderStatsArg_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{101, 0}
}

// These enums apply to a watch defined at the entity type or entity level
// i.e. watch for an entity being created / updated / deleted. The enum
// values correspond to the value of the bit position they represent in a
// mode bitset. Next enum value: 8.
type EntityWatchCondition_EntityWatchType int32

const (
	EntityWatchCondition_kEntityCreate EntityWatchCondition_EntityWatchType = 1
	EntityWatchCondition_kEntityUpdate EntityWatchCondition_EntityWatchType = 2
	EntityWatchCondition_kEntityDelete EntityWatchCondition_EntityWatchType = 4
)

var EntityWatchCondition_EntityWatchType_name = map[int32]string{
	1: "kEntityCreate",
	2: "kEntityUpdate",
	4: "kEntityDelete",
}

var EntityWatchCondition_EntityWatchType_value = map[string]int32{
	"kEntityCreate": 1,
	"kEntityUpdate": 2,
	"kEntityDelete": 4,
}

func (x EntityWatchCondition_EntityWatchType) Enum() *EntityWatchCondition_EntityWatchType {
	p := new(EntityWatchCondition_EntityWatchType)
	*p = x
	return p
}

func (x EntityWatchCondition_EntityWatchType) String() string {
	return proto.EnumName(EntityWatchCondition_EntityWatchType_name, int32(x))
}

func (x *EntityWatchCondition_EntityWatchType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntityWatchCondition_EntityWatchType_value, data, "EntityWatchCondition_EntityWatchType")
	if err != nil {
		return err
	}
	*x = EntityWatchCondition_EntityWatchType(value)
	return nil
}

func (EntityWatchCondition_EntityWatchType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{106, 0}
}

type MetricWatchCondition_MetricWatchType int32

const (
	// To be used for conditions which are based on the new value of the
	// metric / attribute.
	MetricWatchCondition_kWatchExpression MetricWatchCondition_MetricWatchType = 1
	// To be used for conditions which are based on the magnitude of change in
	// the new value of the metric / attribute.
	MetricWatchCondition_kValueChange MetricWatchCondition_MetricWatchType = 2
)

var MetricWatchCondition_MetricWatchType_name = map[int32]string{
	1: "kWatchExpression",
	2: "kValueChange",
}

var MetricWatchCondition_MetricWatchType_value = map[string]int32{
	"kWatchExpression": 1,
	"kValueChange":     2,
}

func (x MetricWatchCondition_MetricWatchType) Enum() *MetricWatchCondition_MetricWatchType {
	p := new(MetricWatchCondition_MetricWatchType)
	*p = x
	return p
}

func (x MetricWatchCondition_MetricWatchType) String() string {
	return proto.EnumName(MetricWatchCondition_MetricWatchType_name, int32(x))
}

func (x *MetricWatchCondition_MetricWatchType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricWatchCondition_MetricWatchType_value, data, "MetricWatchCondition_MetricWatchType")
	if err != nil {
		return err
	}
	*x = MetricWatchCondition_MetricWatchType(value)
	return nil
}

func (MetricWatchCondition_MetricWatchType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{107, 0}
}

type MetricWatchCondition_WatchChange_ChangeType int32

const (
	// Absolute value of change.
	MetricWatchCondition_WatchChange_kAbs MetricWatchCondition_WatchChange_ChangeType = 1
	// Positive change i.e. increase.
	MetricWatchCondition_WatchChange_kPos MetricWatchCondition_WatchChange_ChangeType = 2
	// Negative change i.e. decrease.
	MetricWatchCondition_WatchChange_kNeg MetricWatchCondition_WatchChange_ChangeType = 3
	// Any change.
	MetricWatchCondition_WatchChange_kAny MetricWatchCondition_WatchChange_ChangeType = 4
)

var MetricWatchCondition_WatchChange_ChangeType_name = map[int32]string{
	1: "kAbs",
	2: "kPos",
	3: "kNeg",
	4: "kAny",
}

var MetricWatchCondition_WatchChange_ChangeType_value = map[string]int32{
	"kAbs": 1,
	"kPos": 2,
	"kNeg": 3,
	"kAny": 4,
}

func (x MetricWatchCondition_WatchChange_ChangeType) Enum() *MetricWatchCondition_WatchChange_ChangeType {
	p := new(MetricWatchCondition_WatchChange_ChangeType)
	*p = x
	return p
}

func (x MetricWatchCondition_WatchChange_ChangeType) String() string {
	return proto.EnumName(MetricWatchCondition_WatchChange_ChangeType_name, int32(x))
}

func (x *MetricWatchCondition_WatchChange_ChangeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricWatchCondition_WatchChange_ChangeType_value, data, "MetricWatchCondition_WatchChange_ChangeType")
	if err != nil {
		return err
	}
	*x = MetricWatchCondition_WatchChange_ChangeType(value)
	return nil
}

func (MetricWatchCondition_WatchChange_ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{107, 1, 0}
}

// The enum values correspond to the value of the bit position they represent
// in a mode bitset. Next enum value: 32
type EntitySchemaWatchCondition_SchemaWatchType int32

const (
	// Creation of any new entity type.
	EntitySchemaWatchCondition_kRegisterEntityType EntitySchemaWatchCondition_SchemaWatchType = 1
	// Update of the TypeInfo of an entity type.
	EntitySchemaWatchCondition_kUpdateEntityType EntitySchemaWatchCondition_SchemaWatchType = 2
	// Registration of any derived metric type.
	EntitySchemaWatchCondition_kRegisterMetricType EntitySchemaWatchCondition_SchemaWatchType = 4
	// Update of any registered metric type.
	EntitySchemaWatchCondition_kUpdateMetricType EntitySchemaWatchCondition_SchemaWatchType = 8
	// Unregistration of any derived metric type.
	EntitySchemaWatchCondition_kUnregisterMetricType EntitySchemaWatchCondition_SchemaWatchType = 16
)

var EntitySchemaWatchCondition_SchemaWatchType_name = map[int32]string{
	1:  "kRegisterEntityType",
	2:  "kUpdateEntityType",
	4:  "kRegisterMetricType",
	8:  "kUpdateMetricType",
	16: "kUnregisterMetricType",
}

var EntitySchemaWatchCondition_SchemaWatchType_value = map[string]int32{
	"kRegisterEntityType":   1,
	"kUpdateEntityType":     2,
	"kRegisterMetricType":   4,
	"kUpdateMetricType":     8,
	"kUnregisterMetricType": 16,
}

func (x EntitySchemaWatchCondition_SchemaWatchType) Enum() *EntitySchemaWatchCondition_SchemaWatchType {
	p := new(EntitySchemaWatchCondition_SchemaWatchType)
	*p = x
	return p
}

func (x EntitySchemaWatchCondition_SchemaWatchType) String() string {
	return proto.EnumName(EntitySchemaWatchCondition_SchemaWatchType_name, int32(x))
}

func (x *EntitySchemaWatchCondition_SchemaWatchType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntitySchemaWatchCondition_SchemaWatchType_value, data, "EntitySchemaWatchCondition_SchemaWatchType")
	if err != nil {
		return err
	}
	*x = EntitySchemaWatchCondition_SchemaWatchType(value)
	return nil
}

func (EntitySchemaWatchCondition_SchemaWatchType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{108, 0}
}

type Watch_WatchCategory int32

const (
	Watch_kEntityWatch       Watch_WatchCategory = 1
	Watch_kMetricWatch       Watch_WatchCategory = 2
	Watch_kEntitySchemaWatch Watch_WatchCategory = 3
)

var Watch_WatchCategory_name = map[int32]string{
	1: "kEntityWatch",
	2: "kMetricWatch",
	3: "kEntitySchemaWatch",
}

var Watch_WatchCategory_value = map[string]int32{
	"kEntityWatch":       1,
	"kMetricWatch":       2,
	"kEntitySchemaWatch": 3,
}

func (x Watch_WatchCategory) Enum() *Watch_WatchCategory {
	p := new(Watch_WatchCategory)
	*p = x
	return p
}

func (x Watch_WatchCategory) String() string {
	return proto.EnumName(Watch_WatchCategory_name, int32(x))
}

func (x *Watch_WatchCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Watch_WatchCategory_value, data, "Watch_WatchCategory")
	if err != nil {
		return err
	}
	*x = Watch_WatchCategory(value)
	return nil
}

func (Watch_WatchCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{109, 0}
}

type Watch_WatchPriority int32

const (
	Watch_kCritical Watch_WatchPriority = 0
	Watch_kNormal   Watch_WatchPriority = 1
	Watch_kLow      Watch_WatchPriority = 2
)

var Watch_WatchPriority_name = map[int32]string{
	0: "kCritical",
	1: "kNormal",
	2: "kLow",
}

var Watch_WatchPriority_value = map[string]int32{
	"kCritical": 0,
	"kNormal":   1,
	"kLow":      2,
}

func (x Watch_WatchPriority) Enum() *Watch_WatchPriority {
	p := new(Watch_WatchPriority)
	*p = x
	return p
}

func (x Watch_WatchPriority) String() string {
	return proto.EnumName(Watch_WatchPriority_name, int32(x))
}

func (x *Watch_WatchPriority) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Watch_WatchPriority_value, data, "Watch_WatchPriority")
	if err != nil {
		return err
	}
	*x = Watch_WatchPriority(value)
	return nil
}

func (Watch_WatchPriority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{109, 1}
}

type WatchClientProto_ResetWatchClientOnOperations int32

const (
	WatchClientProto_kNoReset                      WatchClientProto_ResetWatchClientOnOperations = 0
	WatchClientProto_kResetOnClusterRegistration   WatchClientProto_ResetWatchClientOnOperations = 1
	WatchClientProto_kResetOnClusterUnregistration WatchClientProto_ResetWatchClientOnOperations = 2
)

var WatchClientProto_ResetWatchClientOnOperations_name = map[int32]string{
	0: "kNoReset",
	1: "kResetOnClusterRegistration",
	2: "kResetOnClusterUnregistration",
}

var WatchClientProto_ResetWatchClientOnOperations_value = map[string]int32{
	"kNoReset":                      0,
	"kResetOnClusterRegistration":   1,
	"kResetOnClusterUnregistration": 2,
}

func (x WatchClientProto_ResetWatchClientOnOperations) Enum() *WatchClientProto_ResetWatchClientOnOperations {
	p := new(WatchClientProto_ResetWatchClientOnOperations)
	*p = x
	return p
}

func (x WatchClientProto_ResetWatchClientOnOperations) String() string {
	return proto.EnumName(WatchClientProto_ResetWatchClientOnOperations_name, int32(x))
}

func (x *WatchClientProto_ResetWatchClientOnOperations) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WatchClientProto_ResetWatchClientOnOperations_value, data, "WatchClientProto_ResetWatchClientOnOperations")
	if err != nil {
		return err
	}
	*x = WatchClientProto_ResetWatchClientOnOperations(value)
	return nil
}

func (WatchClientProto_ResetWatchClientOnOperations) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{112, 0}
}

type LogCollectorPayload_CompressionType int32

const (
	LogCollectorPayload_kNone   LogCollectorPayload_CompressionType = 0
	LogCollectorPayload_kZlib   LogCollectorPayload_CompressionType = 1
	LogCollectorPayload_kSnappy LogCollectorPayload_CompressionType = 2
)

var LogCollectorPayload_CompressionType_name = map[int32]string{
	0: "kNone",
	1: "kZlib",
	2: "kSnappy",
}

var LogCollectorPayload_CompressionType_value = map[string]int32{
	"kNone":   0,
	"kZlib":   1,
	"kSnappy": 2,
}

func (x LogCollectorPayload_CompressionType) Enum() *LogCollectorPayload_CompressionType {
	p := new(LogCollectorPayload_CompressionType)
	*p = x
	return p
}

func (x LogCollectorPayload_CompressionType) String() string {
	return proto.EnumName(LogCollectorPayload_CompressionType_name, int32(x))
}

func (x *LogCollectorPayload_CompressionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogCollectorPayload_CompressionType_value, data, "LogCollectorPayload_CompressionType")
	if err != nil {
		return err
	}
	*x = LogCollectorPayload_CompressionType(value)
	return nil
}

func (LogCollectorPayload_CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{133, 0}
}

type LogCollectorPayload_LogType int32

const (
	LogCollectorPayload_kLog     LogCollectorPayload_LogType = 0
	LogCollectorPayload_kCommand LogCollectorPayload_LogType = 1
)

var LogCollectorPayload_LogType_name = map[int32]string{
	0: "kLog",
	1: "kCommand",
}

var LogCollectorPayload_LogType_value = map[string]int32{
	"kLog":     0,
	"kCommand": 1,
}

func (x LogCollectorPayload_LogType) Enum() *LogCollectorPayload_LogType {
	p := new(LogCollectorPayload_LogType)
	*p = x
	return p
}

func (x LogCollectorPayload_LogType) String() string {
	return proto.EnumName(LogCollectorPayload_LogType_name, int32(x))
}

func (x *LogCollectorPayload_LogType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogCollectorPayload_LogType_value, data, "LogCollectorPayload_LogType")
	if err != nil {
		return err
	}
	*x = LogCollectorPayload_LogType(value)
	return nil
}

func (LogCollectorPayload_LogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{133, 1}
}

type InsightsErrorProto struct {
	// Required. Type of error encountered.
	ErrorType *InsightsErrorProto_Type `protobuf:"varint,1,opt,name=error_type,json=errorType,enum=nutanix.insights.interface.InsightsErrorProto_Type,def=0" json:"error_type,omitempty"`
	// Describes the error reason. Must be set only if there is an error
	// thrown i.e. 'error_type' is not equal to kNoError.
	//
	// NOTE: There is a bug in the RPC code which makes the RPC crash
	// if a long error string is set into the RPC object. So please keep
	// the error details string to about 80 characters since it's later
	// copied over to the RPC object.
	ErrorDetails *string `protobuf:"bytes,2,opt,name=error_details,json=errorDetails" json:"error_details,omitempty"`
	// Required. Subtype of errors encountered.
	SubErrorType         *InsightsErrorProto_SubType `protobuf:"varint,3,opt,name=sub_error_type,json=subErrorType,enum=nutanix.insights.interface.InsightsErrorProto_SubType,def=0" json:"sub_error_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *InsightsErrorProto) Reset()         { *m = InsightsErrorProto{} }
func (m *InsightsErrorProto) String() string { return proto.CompactTextString(m) }
func (*InsightsErrorProto) ProtoMessage()    {}
func (*InsightsErrorProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{0}
}

func (m *InsightsErrorProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsightsErrorProto.Unmarshal(m, b)
}
func (m *InsightsErrorProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsightsErrorProto.Marshal(b, m, deterministic)
}
func (m *InsightsErrorProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsightsErrorProto.Merge(m, src)
}
func (m *InsightsErrorProto) XXX_Size() int {
	return xxx_messageInfo_InsightsErrorProto.Size(m)
}
func (m *InsightsErrorProto) XXX_DiscardUnknown() {
	xxx_messageInfo_InsightsErrorProto.DiscardUnknown(m)
}

var xxx_messageInfo_InsightsErrorProto proto.InternalMessageInfo

const Default_InsightsErrorProto_ErrorType InsightsErrorProto_Type = InsightsErrorProto_kNoError
const Default_InsightsErrorProto_SubErrorType InsightsErrorProto_SubType = InsightsErrorProto_kNotSet

func (m *InsightsErrorProto) GetErrorType() InsightsErrorProto_Type {
	if m != nil && m.ErrorType != nil {
		return *m.ErrorType
	}
	return Default_InsightsErrorProto_ErrorType
}

func (m *InsightsErrorProto) GetErrorDetails() string {
	if m != nil && m.ErrorDetails != nil {
		return *m.ErrorDetails
	}
	return ""
}

func (m *InsightsErrorProto) GetSubErrorType() InsightsErrorProto_SubType {
	if m != nil && m.SubErrorType != nil {
		return *m.SubErrorType
	}
	return Default_InsightsErrorProto_SubErrorType
}

type GetMasterLocationArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMasterLocationArg) Reset()         { *m = GetMasterLocationArg{} }
func (m *GetMasterLocationArg) String() string { return proto.CompactTextString(m) }
func (*GetMasterLocationArg) ProtoMessage()    {}
func (*GetMasterLocationArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{1}
}

func (m *GetMasterLocationArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMasterLocationArg.Unmarshal(m, b)
}
func (m *GetMasterLocationArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMasterLocationArg.Marshal(b, m, deterministic)
}
func (m *GetMasterLocationArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMasterLocationArg.Merge(m, src)
}
func (m *GetMasterLocationArg) XXX_Size() int {
	return xxx_messageInfo_GetMasterLocationArg.Size(m)
}
func (m *GetMasterLocationArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMasterLocationArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetMasterLocationArg proto.InternalMessageInfo

type GetMasterLocationRet struct {
	// Required. The Insights master's handle.
	MasterHandle *string `protobuf:"bytes,1,opt,name=master_handle,json=masterHandle" json:"master_handle,omitempty"`
	// Required. The Insights master's incarnation id.
	MasterIncarnationId *int64 `protobuf:"varint,2,opt,name=master_incarnation_id,json=masterIncarnationId" json:"master_incarnation_id,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,3,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetMasterLocationRet) Reset()         { *m = GetMasterLocationRet{} }
func (m *GetMasterLocationRet) String() string { return proto.CompactTextString(m) }
func (*GetMasterLocationRet) ProtoMessage()    {}
func (*GetMasterLocationRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{2}
}

func (m *GetMasterLocationRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMasterLocationRet.Unmarshal(m, b)
}
func (m *GetMasterLocationRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMasterLocationRet.Marshal(b, m, deterministic)
}
func (m *GetMasterLocationRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMasterLocationRet.Merge(m, src)
}
func (m *GetMasterLocationRet) XXX_Size() int {
	return xxx_messageInfo_GetMasterLocationRet.Size(m)
}
func (m *GetMasterLocationRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMasterLocationRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetMasterLocationRet proto.InternalMessageInfo

func (m *GetMasterLocationRet) GetMasterHandle() string {
	if m != nil && m.MasterHandle != nil {
		return *m.MasterHandle
	}
	return ""
}

func (m *GetMasterLocationRet) GetMasterIncarnationId() int64 {
	if m != nil && m.MasterIncarnationId != nil {
		return *m.MasterIncarnationId
	}
	return 0
}

func (m *GetMasterLocationRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type GetNodeMapEntryProtoArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeMapEntryProtoArg) Reset()         { *m = GetNodeMapEntryProtoArg{} }
func (m *GetNodeMapEntryProtoArg) String() string { return proto.CompactTextString(m) }
func (*GetNodeMapEntryProtoArg) ProtoMessage()    {}
func (*GetNodeMapEntryProtoArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{3}
}

func (m *GetNodeMapEntryProtoArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeMapEntryProtoArg.Unmarshal(m, b)
}
func (m *GetNodeMapEntryProtoArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeMapEntryProtoArg.Marshal(b, m, deterministic)
}
func (m *GetNodeMapEntryProtoArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeMapEntryProtoArg.Merge(m, src)
}
func (m *GetNodeMapEntryProtoArg) XXX_Size() int {
	return xxx_messageInfo_GetNodeMapEntryProtoArg.Size(m)
}
func (m *GetNodeMapEntryProtoArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeMapEntryProtoArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeMapEntryProtoArg proto.InternalMessageInfo

type GetNodeMapEntryProtoRet struct {
	// Required. The Insights Node Map.
	NodeMap *NodeMapEntryProto `protobuf:"bytes,1,opt,name=node_map,json=nodeMap" json:"node_map,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetNodeMapEntryProtoRet) Reset()         { *m = GetNodeMapEntryProtoRet{} }
func (m *GetNodeMapEntryProtoRet) String() string { return proto.CompactTextString(m) }
func (*GetNodeMapEntryProtoRet) ProtoMessage()    {}
func (*GetNodeMapEntryProtoRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{4}
}

func (m *GetNodeMapEntryProtoRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeMapEntryProtoRet.Unmarshal(m, b)
}
func (m *GetNodeMapEntryProtoRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeMapEntryProtoRet.Marshal(b, m, deterministic)
}
func (m *GetNodeMapEntryProtoRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeMapEntryProtoRet.Merge(m, src)
}
func (m *GetNodeMapEntryProtoRet) XXX_Size() int {
	return xxx_messageInfo_GetNodeMapEntryProtoRet.Size(m)
}
func (m *GetNodeMapEntryProtoRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeMapEntryProtoRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeMapEntryProtoRet proto.InternalMessageInfo

func (m *GetNodeMapEntryProtoRet) GetNodeMap() *NodeMapEntryProto {
	if m != nil {
		return m.NodeMap
	}
	return nil
}

func (m *GetNodeMapEntryProtoRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Represents the generic list of data types supported.
type DataValue struct {
	// Types that are valid to be assigned to ValueType:
	//	*DataValue_StrValue
	//	*DataValue_Int64Value
	//	*DataValue_BoolValue
	//	*DataValue_Uint64Value
	//	*DataValue_FloatValue
	//	*DataValue_DoubleValue
	//	*DataValue_BytesValue
	//	*DataValue_StrList_
	//	*DataValue_Int64List_
	//	*DataValue_BoolList_
	//	*DataValue_Uint64List
	//	*DataValue_FloatList_
	//	*DataValue_DoubleList_
	//	*DataValue_BytesList_
	//	*DataValue_JsonObj
	//	*DataValue_HistogramObj
	ValueType isDataValue_ValueType `protobuf_oneof:"ValueType"`
	// This field should not be set by the client API.
	Count                *uint64  `protobuf:"varint,8,opt,name=count,def=1" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataValue) Reset()         { *m = DataValue{} }
func (m *DataValue) String() string { return proto.CompactTextString(m) }
func (*DataValue) ProtoMessage()    {}
func (*DataValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{5}
}

func (m *DataValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataValue.Unmarshal(m, b)
}
func (m *DataValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataValue.Marshal(b, m, deterministic)
}
func (m *DataValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValue.Merge(m, src)
}
func (m *DataValue) XXX_Size() int {
	return xxx_messageInfo_DataValue.Size(m)
}
func (m *DataValue) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValue.DiscardUnknown(m)
}

var xxx_messageInfo_DataValue proto.InternalMessageInfo

const Default_DataValue_Count uint64 = 1

type isDataValue_ValueType interface {
	isDataValue_ValueType()
}

type DataValue_StrValue struct {
	StrValue string `protobuf:"bytes,16,opt,name=str_value,json=strValue,oneof"`
}

type DataValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,17,opt,name=int64_value,json=int64Value,oneof"`
}

type DataValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,18,opt,name=bool_value,json=boolValue,oneof"`
}

type DataValue_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,19,opt,name=uint64_value,json=uint64Value,oneof"`
}

type DataValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,20,opt,name=float_value,json=floatValue,oneof"`
}

type DataValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,21,opt,name=double_value,json=doubleValue,oneof"`
}

type DataValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,22,opt,name=bytes_value,json=bytesValue,oneof"`
}

type DataValue_StrList_ struct {
	StrList *DataValue_StrList `protobuf:"bytes,23,opt,name=str_list,json=strList,oneof"`
}

type DataValue_Int64List_ struct {
	Int64List *DataValue_Int64List `protobuf:"bytes,24,opt,name=int64_list,json=int64List,oneof"`
}

type DataValue_BoolList_ struct {
	BoolList *DataValue_BoolList `protobuf:"bytes,25,opt,name=bool_list,json=boolList,oneof"`
}

type DataValue_Uint64List struct {
	Uint64List *DataValue_UInt64List `protobuf:"bytes,26,opt,name=uint64_list,json=uint64List,oneof"`
}

type DataValue_FloatList_ struct {
	FloatList *DataValue_FloatList `protobuf:"bytes,27,opt,name=float_list,json=floatList,oneof"`
}

type DataValue_DoubleList_ struct {
	DoubleList *DataValue_DoubleList `protobuf:"bytes,28,opt,name=double_list,json=doubleList,oneof"`
}

type DataValue_BytesList_ struct {
	BytesList *DataValue_BytesList `protobuf:"bytes,29,opt,name=bytes_list,json=bytesList,oneof"`
}

type DataValue_JsonObj struct {
	JsonObj []byte `protobuf:"bytes,30,opt,name=json_obj,json=jsonObj,oneof"`
}

type DataValue_HistogramObj struct {
	HistogramObj *DataValue_Histogram `protobuf:"bytes,31,opt,name=histogram_obj,json=histogramObj,oneof"`
}

func (*DataValue_StrValue) isDataValue_ValueType() {}

func (*DataValue_Int64Value) isDataValue_ValueType() {}

func (*DataValue_BoolValue) isDataValue_ValueType() {}

func (*DataValue_Uint64Value) isDataValue_ValueType() {}

func (*DataValue_FloatValue) isDataValue_ValueType() {}

func (*DataValue_DoubleValue) isDataValue_ValueType() {}

func (*DataValue_BytesValue) isDataValue_ValueType() {}

func (*DataValue_StrList_) isDataValue_ValueType() {}

func (*DataValue_Int64List_) isDataValue_ValueType() {}

func (*DataValue_BoolList_) isDataValue_ValueType() {}

func (*DataValue_Uint64List) isDataValue_ValueType() {}

func (*DataValue_FloatList_) isDataValue_ValueType() {}

func (*DataValue_DoubleList_) isDataValue_ValueType() {}

func (*DataValue_BytesList_) isDataValue_ValueType() {}

func (*DataValue_JsonObj) isDataValue_ValueType() {}

func (*DataValue_HistogramObj) isDataValue_ValueType() {}

func (m *DataValue) GetValueType() isDataValue_ValueType {
	if m != nil {
		return m.ValueType
	}
	return nil
}

func (m *DataValue) GetStrValue() string {
	if x, ok := m.GetValueType().(*DataValue_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (m *DataValue) GetInt64Value() int64 {
	if x, ok := m.GetValueType().(*DataValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *DataValue) GetBoolValue() bool {
	if x, ok := m.GetValueType().(*DataValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *DataValue) GetUint64Value() uint64 {
	if x, ok := m.GetValueType().(*DataValue_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (m *DataValue) GetFloatValue() float32 {
	if x, ok := m.GetValueType().(*DataValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *DataValue) GetDoubleValue() float64 {
	if x, ok := m.GetValueType().(*DataValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *DataValue) GetBytesValue() []byte {
	if x, ok := m.GetValueType().(*DataValue_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *DataValue) GetStrList() *DataValue_StrList {
	if x, ok := m.GetValueType().(*DataValue_StrList_); ok {
		return x.StrList
	}
	return nil
}

func (m *DataValue) GetInt64List() *DataValue_Int64List {
	if x, ok := m.GetValueType().(*DataValue_Int64List_); ok {
		return x.Int64List
	}
	return nil
}

func (m *DataValue) GetBoolList() *DataValue_BoolList {
	if x, ok := m.GetValueType().(*DataValue_BoolList_); ok {
		return x.BoolList
	}
	return nil
}

func (m *DataValue) GetUint64List() *DataValue_UInt64List {
	if x, ok := m.GetValueType().(*DataValue_Uint64List); ok {
		return x.Uint64List
	}
	return nil
}

func (m *DataValue) GetFloatList() *DataValue_FloatList {
	if x, ok := m.GetValueType().(*DataValue_FloatList_); ok {
		return x.FloatList
	}
	return nil
}

func (m *DataValue) GetDoubleList() *DataValue_DoubleList {
	if x, ok := m.GetValueType().(*DataValue_DoubleList_); ok {
		return x.DoubleList
	}
	return nil
}

func (m *DataValue) GetBytesList() *DataValue_BytesList {
	if x, ok := m.GetValueType().(*DataValue_BytesList_); ok {
		return x.BytesList
	}
	return nil
}

func (m *DataValue) GetJsonObj() []byte {
	if x, ok := m.GetValueType().(*DataValue_JsonObj); ok {
		return x.JsonObj
	}
	return nil
}

func (m *DataValue) GetHistogramObj() *DataValue_Histogram {
	if x, ok := m.GetValueType().(*DataValue_HistogramObj); ok {
		return x.HistogramObj
	}
	return nil
}

func (m *DataValue) GetCount() uint64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return Default_DataValue_Count
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DataValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DataValue_StrValue)(nil),
		(*DataValue_Int64Value)(nil),
		(*DataValue_BoolValue)(nil),
		(*DataValue_Uint64Value)(nil),
		(*DataValue_FloatValue)(nil),
		(*DataValue_DoubleValue)(nil),
		(*DataValue_BytesValue)(nil),
		(*DataValue_StrList_)(nil),
		(*DataValue_Int64List_)(nil),
		(*DataValue_BoolList_)(nil),
		(*DataValue_Uint64List)(nil),
		(*DataValue_FloatList_)(nil),
		(*DataValue_DoubleList_)(nil),
		(*DataValue_BytesList_)(nil),
		(*DataValue_JsonObj)(nil),
		(*DataValue_HistogramObj)(nil),
	}
}

type DataValue_StrList struct {
	// List of strings.
	ValueList            []string `protobuf:"bytes,1,rep,name=value_list,json=valueList" json:"value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataValue_StrList) Reset()         { *m = DataValue_StrList{} }
func (m *DataValue_StrList) String() string { return proto.CompactTextString(m) }
func (*DataValue_StrList) ProtoMessage()    {}
func (*DataValue_StrList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{5, 0}
}

func (m *DataValue_StrList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataValue_StrList.Unmarshal(m, b)
}
func (m *DataValue_StrList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataValue_StrList.Marshal(b, m, deterministic)
}
func (m *DataValue_StrList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValue_StrList.Merge(m, src)
}
func (m *DataValue_StrList) XXX_Size() int {
	return xxx_messageInfo_DataValue_StrList.Size(m)
}
func (m *DataValue_StrList) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValue_StrList.DiscardUnknown(m)
}

var xxx_messageInfo_DataValue_StrList proto.InternalMessageInfo

func (m *DataValue_StrList) GetValueList() []string {
	if m != nil {
		return m.ValueList
	}
	return nil
}

type DataValue_Int64List struct {
	// List of 64bit integers.
	ValueList            []int64  `protobuf:"varint,1,rep,name=value_list,json=valueList" json:"value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataValue_Int64List) Reset()         { *m = DataValue_Int64List{} }
func (m *DataValue_Int64List) String() string { return proto.CompactTextString(m) }
func (*DataValue_Int64List) ProtoMessage()    {}
func (*DataValue_Int64List) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{5, 1}
}

func (m *DataValue_Int64List) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataValue_Int64List.Unmarshal(m, b)
}
func (m *DataValue_Int64List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataValue_Int64List.Marshal(b, m, deterministic)
}
func (m *DataValue_Int64List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValue_Int64List.Merge(m, src)
}
func (m *DataValue_Int64List) XXX_Size() int {
	return xxx_messageInfo_DataValue_Int64List.Size(m)
}
func (m *DataValue_Int64List) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValue_Int64List.DiscardUnknown(m)
}

var xxx_messageInfo_DataValue_Int64List proto.InternalMessageInfo

func (m *DataValue_Int64List) GetValueList() []int64 {
	if m != nil {
		return m.ValueList
	}
	return nil
}

type DataValue_BoolList struct {
	// List of booleans.
	ValueList            []bool   `protobuf:"varint,1,rep,name=value_list,json=valueList" json:"value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataValue_BoolList) Reset()         { *m = DataValue_BoolList{} }
func (m *DataValue_BoolList) String() string { return proto.CompactTextString(m) }
func (*DataValue_BoolList) ProtoMessage()    {}
func (*DataValue_BoolList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{5, 2}
}

func (m *DataValue_BoolList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataValue_BoolList.Unmarshal(m, b)
}
func (m *DataValue_BoolList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataValue_BoolList.Marshal(b, m, deterministic)
}
func (m *DataValue_BoolList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValue_BoolList.Merge(m, src)
}
func (m *DataValue_BoolList) XXX_Size() int {
	return xxx_messageInfo_DataValue_BoolList.Size(m)
}
func (m *DataValue_BoolList) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValue_BoolList.DiscardUnknown(m)
}

var xxx_messageInfo_DataValue_BoolList proto.InternalMessageInfo

func (m *DataValue_BoolList) GetValueList() []bool {
	if m != nil {
		return m.ValueList
	}
	return nil
}

type DataValue_UInt64List struct {
	// List of 64bit unsigned integers.
	ValueList            []uint64 `protobuf:"varint,1,rep,name=value_list,json=valueList" json:"value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataValue_UInt64List) Reset()         { *m = DataValue_UInt64List{} }
func (m *DataValue_UInt64List) String() string { return proto.CompactTextString(m) }
func (*DataValue_UInt64List) ProtoMessage()    {}
func (*DataValue_UInt64List) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{5, 3}
}

func (m *DataValue_UInt64List) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataValue_UInt64List.Unmarshal(m, b)
}
func (m *DataValue_UInt64List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataValue_UInt64List.Marshal(b, m, deterministic)
}
func (m *DataValue_UInt64List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValue_UInt64List.Merge(m, src)
}
func (m *DataValue_UInt64List) XXX_Size() int {
	return xxx_messageInfo_DataValue_UInt64List.Size(m)
}
func (m *DataValue_UInt64List) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValue_UInt64List.DiscardUnknown(m)
}

var xxx_messageInfo_DataValue_UInt64List proto.InternalMessageInfo

func (m *DataValue_UInt64List) GetValueList() []uint64 {
	if m != nil {
		return m.ValueList
	}
	return nil
}

type DataValue_FloatList struct {
	// List of floats.
	ValueList            []float32 `protobuf:"fixed32,1,rep,name=value_list,json=valueList" json:"value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DataValue_FloatList) Reset()         { *m = DataValue_FloatList{} }
func (m *DataValue_FloatList) String() string { return proto.CompactTextString(m) }
func (*DataValue_FloatList) ProtoMessage()    {}
func (*DataValue_FloatList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{5, 4}
}

func (m *DataValue_FloatList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataValue_FloatList.Unmarshal(m, b)
}
func (m *DataValue_FloatList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataValue_FloatList.Marshal(b, m, deterministic)
}
func (m *DataValue_FloatList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValue_FloatList.Merge(m, src)
}
func (m *DataValue_FloatList) XXX_Size() int {
	return xxx_messageInfo_DataValue_FloatList.Size(m)
}
func (m *DataValue_FloatList) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValue_FloatList.DiscardUnknown(m)
}

var xxx_messageInfo_DataValue_FloatList proto.InternalMessageInfo

func (m *DataValue_FloatList) GetValueList() []float32 {
	if m != nil {
		return m.ValueList
	}
	return nil
}

type DataValue_DoubleList struct {
	// List of doubles.
	ValueList            []float64 `protobuf:"fixed64,1,rep,name=value_list,json=valueList" json:"value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DataValue_DoubleList) Reset()         { *m = DataValue_DoubleList{} }
func (m *DataValue_DoubleList) String() string { return proto.CompactTextString(m) }
func (*DataValue_DoubleList) ProtoMessage()    {}
func (*DataValue_DoubleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{5, 5}
}

func (m *DataValue_DoubleList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataValue_DoubleList.Unmarshal(m, b)
}
func (m *DataValue_DoubleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataValue_DoubleList.Marshal(b, m, deterministic)
}
func (m *DataValue_DoubleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValue_DoubleList.Merge(m, src)
}
func (m *DataValue_DoubleList) XXX_Size() int {
	return xxx_messageInfo_DataValue_DoubleList.Size(m)
}
func (m *DataValue_DoubleList) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValue_DoubleList.DiscardUnknown(m)
}

var xxx_messageInfo_DataValue_DoubleList proto.InternalMessageInfo

func (m *DataValue_DoubleList) GetValueList() []float64 {
	if m != nil {
		return m.ValueList
	}
	return nil
}

type DataValue_BytesList struct {
	// List of bytes.
	ValueList            [][]byte `protobuf:"bytes,1,rep,name=value_list,json=valueList" json:"value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataValue_BytesList) Reset()         { *m = DataValue_BytesList{} }
func (m *DataValue_BytesList) String() string { return proto.CompactTextString(m) }
func (*DataValue_BytesList) ProtoMessage()    {}
func (*DataValue_BytesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{5, 6}
}

func (m *DataValue_BytesList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataValue_BytesList.Unmarshal(m, b)
}
func (m *DataValue_BytesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataValue_BytesList.Marshal(b, m, deterministic)
}
func (m *DataValue_BytesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValue_BytesList.Merge(m, src)
}
func (m *DataValue_BytesList) XXX_Size() int {
	return xxx_messageInfo_DataValue_BytesList.Size(m)
}
func (m *DataValue_BytesList) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValue_BytesList.DiscardUnknown(m)
}

var xxx_messageInfo_DataValue_BytesList proto.InternalMessageInfo

func (m *DataValue_BytesList) GetValueList() [][]byte {
	if m != nil {
		return m.ValueList
	}
	return nil
}

// This is for storing histogram data. We support 2 different kind of
// histograms.
// Type 1:
// -------
// For histograms with keys which can be represented in a range,
// we have cumulative histogram. For example, histogram for latency, age, etc
// which can be bucketized based on upper bound. Sample buckets would be
// no. of requests under 1 sec latency, no. of requests under 5 sec latency,
// etc. So incase of cumulative histogram, the bucket_upper_bounds_list
// will be a list of numerically increasing numbers representing the upper
// bound value of each bucket and bucket_counts_list consist of cumulative
// count of data points whose value is less than or equal to upper bound.
// With this definition, the length of both the lists should always be the
// same.
// Example: bucket_upper_bounds_list: [10, 100, 500, 1000]
//                bucket_counts_list: [15, 25, 30, 50]
// This indicates that, there were 15 data points whose value is <= 10,
// 25 data points with value <= 100 and so on. Note that the count here is
// cumulative. The 25 data points under value 100 also includes the 15 data
// points under value 10.
//
// Type 2:
// -------
// For histograms with keys which cannot be represented as ranges, we have
// count based histograms. For example, histogram of RPC Error types, Gender,
// etc. Sample buckets would be no.of RPC errors with Timeout error, no. of
// RPC errors with Internal Server error, etc. So incase of count based
// histograms, bucket_keys_list will be a list of strings representing the
// key for each bucket and bucket_counts_list consist of total count of data
// points with that particular key. With this definition, the length of both
// the lists should always be the same.
// Example: bucket_keys_list: ["Error type1", "Error type2", "Error type3"]
//        bucket_counts_list: [15, 25, 30]
// This indicates that, there were 15 data points with Error typ1, 25 data
// points with Error type2 and so on.
type DataValue_Histogram struct {
	// Types that are valid to be assigned to BucketsList:
	//	*DataValue_Histogram_BucketUpperBoundsList
	//	*DataValue_Histogram_BucketKeysList
	BucketsList          isDataValue_Histogram_BucketsList `protobuf_oneof:"BucketsList"`
	BucketCountsList     []uint64                          `protobuf:"varint,3,rep,name=bucket_counts_list,json=bucketCountsList" json:"bucket_counts_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DataValue_Histogram) Reset()         { *m = DataValue_Histogram{} }
func (m *DataValue_Histogram) String() string { return proto.CompactTextString(m) }
func (*DataValue_Histogram) ProtoMessage()    {}
func (*DataValue_Histogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{5, 7}
}

func (m *DataValue_Histogram) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataValue_Histogram.Unmarshal(m, b)
}
func (m *DataValue_Histogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataValue_Histogram.Marshal(b, m, deterministic)
}
func (m *DataValue_Histogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValue_Histogram.Merge(m, src)
}
func (m *DataValue_Histogram) XXX_Size() int {
	return xxx_messageInfo_DataValue_Histogram.Size(m)
}
func (m *DataValue_Histogram) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValue_Histogram.DiscardUnknown(m)
}

var xxx_messageInfo_DataValue_Histogram proto.InternalMessageInfo

type isDataValue_Histogram_BucketsList interface {
	isDataValue_Histogram_BucketsList()
}

type DataValue_Histogram_BucketUpperBoundsList struct {
	BucketUpperBoundsList *DataValue_FloatList `protobuf:"bytes,1,opt,name=bucket_upper_bounds_list,json=bucketUpperBoundsList,oneof"`
}

type DataValue_Histogram_BucketKeysList struct {
	BucketKeysList *DataValue_StrList `protobuf:"bytes,2,opt,name=bucket_keys_list,json=bucketKeysList,oneof"`
}

func (*DataValue_Histogram_BucketUpperBoundsList) isDataValue_Histogram_BucketsList() {}

func (*DataValue_Histogram_BucketKeysList) isDataValue_Histogram_BucketsList() {}

func (m *DataValue_Histogram) GetBucketsList() isDataValue_Histogram_BucketsList {
	if m != nil {
		return m.BucketsList
	}
	return nil
}

func (m *DataValue_Histogram) GetBucketUpperBoundsList() *DataValue_FloatList {
	if x, ok := m.GetBucketsList().(*DataValue_Histogram_BucketUpperBoundsList); ok {
		return x.BucketUpperBoundsList
	}
	return nil
}

func (m *DataValue_Histogram) GetBucketKeysList() *DataValue_StrList {
	if x, ok := m.GetBucketsList().(*DataValue_Histogram_BucketKeysList); ok {
		return x.BucketKeysList
	}
	return nil
}

func (m *DataValue_Histogram) GetBucketCountsList() []uint64 {
	if m != nil {
		return m.BucketCountsList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DataValue_Histogram) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DataValue_Histogram_BucketUpperBoundsList)(nil),
		(*DataValue_Histogram_BucketKeysList)(nil),
	}
}

// TimeValuePair encapsulates a single entry in timeseries data. It contains a
// timestamp and a value corresponding to that timestamp.
type TimeValuePair struct {
	// Required.
	TimestampUsecs *uint64 `protobuf:"varint,1,opt,name=timestamp_usecs,json=timestampUsecs" json:"timestamp_usecs,omitempty"`
	// Required.
	Value                *DataValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TimeValuePair) Reset()         { *m = TimeValuePair{} }
func (m *TimeValuePair) String() string { return proto.CompactTextString(m) }
func (*TimeValuePair) ProtoMessage()    {}
func (*TimeValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{6}
}

func (m *TimeValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeValuePair.Unmarshal(m, b)
}
func (m *TimeValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeValuePair.Marshal(b, m, deterministic)
}
func (m *TimeValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeValuePair.Merge(m, src)
}
func (m *TimeValuePair) XXX_Size() int {
	return xxx_messageInfo_TimeValuePair.Size(m)
}
func (m *TimeValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_TimeValuePair proto.InternalMessageInfo

func (m *TimeValuePair) GetTimestampUsecs() uint64 {
	if m != nil && m.TimestampUsecs != nil {
		return *m.TimestampUsecs
	}
	return 0
}

func (m *TimeValuePair) GetValue() *DataValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type MetricNamespacePair struct {
	// Required.
	MetricName *string `protobuf:"bytes,1,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// Optional.
	Namespace            *string  `protobuf:"bytes,2,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricNamespacePair) Reset()         { *m = MetricNamespacePair{} }
func (m *MetricNamespacePair) String() string { return proto.CompactTextString(m) }
func (*MetricNamespacePair) ProtoMessage()    {}
func (*MetricNamespacePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{7}
}

func (m *MetricNamespacePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricNamespacePair.Unmarshal(m, b)
}
func (m *MetricNamespacePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricNamespacePair.Marshal(b, m, deterministic)
}
func (m *MetricNamespacePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricNamespacePair.Merge(m, src)
}
func (m *MetricNamespacePair) XXX_Size() int {
	return xxx_messageInfo_MetricNamespacePair.Size(m)
}
func (m *MetricNamespacePair) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricNamespacePair.DiscardUnknown(m)
}

var xxx_messageInfo_MetricNamespacePair proto.InternalMessageInfo

const Default_MetricNamespacePair_Namespace string = "_default_"

func (m *MetricNamespacePair) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *MetricNamespacePair) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_MetricNamespacePair_Namespace
}

// MetricData contains the name of the attribute along with the metric value at
// various times.
type MetricData struct {
	// Required.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	Namespace *string `protobuf:"bytes,3,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Optional.
	ValueList            []*TimeValuePair `protobuf:"bytes,2,rep,name=value_list,json=valueList" json:"value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MetricData) Reset()         { *m = MetricData{} }
func (m *MetricData) String() string { return proto.CompactTextString(m) }
func (*MetricData) ProtoMessage()    {}
func (*MetricData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{8}
}

func (m *MetricData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricData.Unmarshal(m, b)
}
func (m *MetricData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricData.Marshal(b, m, deterministic)
}
func (m *MetricData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricData.Merge(m, src)
}
func (m *MetricData) XXX_Size() int {
	return xxx_messageInfo_MetricData.Size(m)
}
func (m *MetricData) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricData.DiscardUnknown(m)
}

var xxx_messageInfo_MetricData proto.InternalMessageInfo

const Default_MetricData_Namespace string = "_default_"

func (m *MetricData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MetricData) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_MetricData_Namespace
}

func (m *MetricData) GetValueList() []*TimeValuePair {
	if m != nil {
		return m.ValueList
	}
	return nil
}

// These are the set of fields required to register any metric.
type MetricType struct {
	// Required. Describes if this is an attribute or a stat.
	//
	// Registering a metric as an attribute or not determines the consistency
	// guarantees and fail-safe guarantees provided by the DB for the metric.
	//
	// DB features for Attributes:
	//  CAS updates, read-after-write guarantee (paxos), RF3
	//  write-through update to DB (not buffered)
	//  every change tracked with precise timestamps in TSDB
	//
	// DB features for non Attributes (a.k.a stats):
	//  no CAS updates, eventually consistent, RF2
	//  asynchronous batch update to DB - lossy
	//  update can be persisted with precise timestamp or bucketized
	//
	// Examples of attributes: container_rf_level, container_compression
	// Examples of stats: hypervisor_cpu_usage_ppm, total_transformed_usage_bytes
	//
	// If 'is_dimension_fact_table' flag is set for the corresponding entity
	// type, then attributes of the entity type become dimensions and stats
	// become facts.
	IsAttribute *bool `protobuf:"varint,1,opt,name=is_attribute,json=isAttribute,def=0" json:"is_attribute,omitempty"`
	// Required. Name of the metric being registered.
	MetricName *string `protobuf:"bytes,2,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// Required. Name of the entity_type this metric is registered for.
	EntityTypeName *string `protobuf:"bytes,8,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Optional. The unit in which the values of the metric will be represented.
	Unit *string `protobuf:"bytes,3,opt,name=unit" json:"unit,omitempty"`
	// Optional. The default operator to be used when aggregating this metric
	// data from multiple entities.
	AggregationOperator *MetricType_Operator `protobuf:"varint,4,opt,name=aggregation_operator,json=aggregationOperator,enum=nutanix.insights.interface.MetricType_Operator" json:"aggregation_operator,omitempty"`
	// Optional. Expected only if 'is_attribute' is 'false'. Sampling interval
	// is in seconds. Only one value per interval will be stored in the database.
	DownSamplingIntervalInSecs *uint32 `protobuf:"varint,5,opt,name=down_sampling_interval_in_secs,json=downSamplingIntervalInSecs,def=30" json:"down_sampling_interval_in_secs,omitempty"`
	// Optional. Expected only if 'is_attribute' is 'false'. This is the operator
	// used to aggregate multiple updates received in one down_sampling_interval.
	DownSamplingOperator *MetricType_Operator `protobuf:"varint,6,opt,name=down_sampling_operator,json=downSamplingOperator,enum=nutanix.insights.interface.MetricType_Operator,def=4" json:"down_sampling_operator,omitempty"`
	// Optional. Expected only if 'is_attribute' is 'false'. This is the operator
	// used to aggregate multiple samples in one down_sampling_interval
	// for queries. If not specified then down_sampling_operator is used.
	QueryDownSamplingOperator *MetricType_Operator `protobuf:"varint,26,opt,name=query_down_sampling_operator,json=queryDownSamplingOperator,enum=nutanix.insights.interface.MetricType_Operator" json:"query_down_sampling_operator,omitempty"`
	// Optional. This option is considered only for non attribute metrics.
	// If this option is set to false, then precise timestamps (not bucketized)
	// are persisted in time series db.
	//
	// It is recommeded to be left to be the default for all stats/counters.
	// This value needs to be set to false only when the end application needs
	// to know the exact timestamp for the change in metric value or the update
	// frequency is random. For such metrics, also pay extra attention to how
	// the metric is collected in the first place.
	//
	// In general, most metrics that need precise timestamps are registered as
	// Attributes.
	//
	// Note: If down sampling interval is greater than an hour, changing the
	// down sampling interval after data is stored may not return all the
	// previously stored values in the DB.
	BucketizeTimestampsInTsdb *bool `protobuf:"varint,7,opt,name=bucketize_timestamps_in_tsdb,json=bucketizeTimestampsInTsdb,def=1" json:"bucketize_timestamps_in_tsdb,omitempty"`
	// Optional. This field is to store extra information about the metric and
	// is ignored by the database. Currently, the information is organized as
	// a json dictionary.
	UserMetadata *string `protobuf:"bytes,9,opt,name=user_metadata,json=userMetadata" json:"user_metadata,omitempty"`
	// Optional. This option should be set to true when registering derived
	// metrics. For a derived metric, exactly one of 'derived_metric_rollup_query'
	// or 'derived_metric_expression' should be set.
	IsDerivedMetric *bool `protobuf:"varint,10,opt,name=is_derived_metric,json=isDerivedMetric,def=0" json:"is_derived_metric,omitempty"`
	// Required for roll-up derived metrics. The query should be a group-by
	// query with grouping on an ancestor type and a single aggregation column.
	// Should not be set for per-entity derived metrics.
	DerivedMetricRollupQuery *Query `protobuf:"bytes,11,opt,name=derived_metric_rollup_query,json=derivedMetricRollupQuery" json:"derived_metric_rollup_query,omitempty"`
	// Required for per-entity derived metrics. Defines an expression on a set
	// of metrics on 'entity_type' that specifies how to compute this derived
	// metric. Should not be set for roll-up derived metrics.
	DerivedMetricExpression *Expression `protobuf:"bytes,12,opt,name=derived_metric_expression,json=derivedMetricExpression" json:"derived_metric_expression,omitempty"`
	// Optional. This can be set to override the default retention period for
	// raw data for this metric type. If not specified, then
	// "insights_metric_data_raw_retention_period_in_weeks" gflag value is
	// used to purge data.
	RawRetentionInWeeks *uint32 `protobuf:"varint,13,opt,name=raw_retention_in_weeks,json=rawRetentionInWeeks" json:"raw_retention_in_weeks,omitempty"`
	// Optional. This can be set to override the default retention period for
	// hourly data for this metric type. If not specified, then
	// "insights_metric_data_hourly_retention_period_in_weeks" gflag value is
	// used to purge data.
	HourlyRetentionInWeeks *uint32 `protobuf:"varint,14,opt,name=hourly_retention_in_weeks,json=hourlyRetentionInWeeks" json:"hourly_retention_in_weeks,omitempty"`
	// Optional. This controls whether the metric should be used in spotlight or
	// wildcard LIKE clause in query (GetEntitiesWithMetrics)
	IsWildcardSearchable *bool `protobuf:"varint,15,opt,name=is_wildcard_searchable,json=isWildcardSearchable,def=1" json:"is_wildcard_searchable,omitempty"`
	// Optional. This option is considered only for attribute metrics. This
	// specifies whether the attribute should be persisted as time series data.
	// This will allow historical information of this metric to be queried using
	// 'GetEntitiesWithMetrics()'. Attributes would be persisted as metrics also
	// iff this flag is set. This allows the flexibility to prevent persisting
	// certain attributes as metrics. For non-attribute metrics aka stats, this
	// flag will be ignored. Derived metrics are currently computed in-line so
	// the value of this flag will be ignored. This may change in future.
	PersistAttributeAsTimeSeries *bool `protobuf:"varint,16,opt,name=persist_attribute_as_time_series,json=persistAttributeAsTimeSeries" json:"persist_attribute_as_time_series,omitempty"`
	// Optional. Only valid for attributes. Specifies whether this attribute
	// contains a serialised value of a protobuf message. This proto can be
	// arbitrarily nested and the Insights server need not know its schema at
	// compile time. The expected data type of this attribute should be bytes for
	// compatibility across different languages. This flag is required for
	// supporting special handling of this kind of attributes; eg - whether to
	// parse nested fields from the serialised proto, etc.
	ContainsSerialisedProto *bool `protobuf:"varint,17,opt,name=contains_serialised_proto,json=containsSerialisedProto,def=0" json:"contains_serialised_proto,omitempty"`
	// Optional. Should be set only for attributes created out of nested fields
	// of a serialised protobuf message. Provides information about the attribute
	// holding the nested protobuf, the location of the nested field in terms of
	// its field positions, the datatype of the field and any other relevant
	// information.
	NestedFieldInfo *NestedFieldInfo `protobuf:"bytes,18,opt,name=nested_field_info,json=nestedFieldInfo" json:"nested_field_info,omitempty"`
	// Optional. Is valid only for attributes and only when
	// 'contains_serialised_proto' is set. Specifies the compression type used on
	// the serialised proto value.
	SerialisedProtoCompressionType *MetricType_CompressionType `protobuf:"varint,19,opt,name=serialised_proto_compression_type,json=serialisedProtoCompressionType,enum=nutanix.insights.interface.MetricType_CompressionType,def=0" json:"serialised_proto_compression_type,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	//
	// The namespace the metric is part of. If not specified, the metric belongs
	// to the '_default_' namespace. An entity can have metric types with the
	// same name belonging to different namespace's and they are different.
	Namespace *string `protobuf:"bytes,20,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Optional. This option is to enforce enabling the MetricData RPC irrespective
	// of whether the gflag insights_disable_metricdata_rpc is true or false.
	EnableMetricdataRpc *bool `protobuf:"varint,21,opt,name=enable_metricdata_rpc,json=enableMetricdataRpc,def=1" json:"enable_metricdata_rpc,omitempty"`
	// Optional. Flag specifying whether an inverted index should be created
	// for this metric type. Currently, indexing is supported on only
	// attributes and not on stats.
	IsIndexColumn *bool `protobuf:"varint,22,opt,name=is_index_column,json=isIndexColumn,def=0" json:"is_index_column,omitempty"`
	// Optional. The data type of this metric type's values. Applicable
	// only if this metric type is an index column. IDF uses this data
	// type when constructing a reverse index on this metric type, and
	// if the metric value for an entity is not of this type, IDF skips
	// indexing the entity on that metric. Once the 'index_type' is set
	// for a metric type, it cannot be subsequently changed.
	IndexType *MetricType_IndexType `protobuf:"varint,23,opt,name=index_type,json=indexType,enum=nutanix.insights.interface.MetricType_IndexType" json:"index_type,omitempty"`
	// Optional. This option indicates how do you want the collector to do
	// the pii of this field.
	PiiType *MetricType_PiiType `protobuf:"varint,24,opt,name=pii_type,json=piiType,enum=nutanix.insights.interface.MetricType_PiiType,def=0" json:"pii_type,omitempty"`
	// Optional. If PIIType is set to kMaskIfValueMatchRegex or
	// kRemoveIfValueMatchRegex and "pii_regex_for_value" matches with the value,
	// then the operation (mask/remove) is applied on the value.
	PiiRegexForValue *string `protobuf:"bytes,25,opt,name=pii_regex_for_value,json=piiRegexForValue,def=.*" json:"pii_regex_for_value,omitempty"`
	// Optional.  If set then metric_type is a alias for the entity type
	// specified by "parent_type_name" (with respect to ancestor references).
	ParentTypeName *string `protobuf:"bytes,28,opt,name=parent_type_name,json=parentTypeName" json:"parent_type_name,omitempty"`
	// If the value is left as kDefault, only the mask_types such as
	// IP, IPv6 and Email would be applied. If this attribute contains data
	// which does not match any of the above mentioned patterns,
	// please set the appropriate mask_type.
	MaskType       *MetricType_MaskType       `protobuf:"varint,30,opt,name=mask_type,json=maskType,enum=nutanix.insights.interface.MetricType_MaskType,def=0" json:"mask_type,omitempty"`
	TtlCalculation *MetricType_TtlCalculation `protobuf:"varint,27,opt,name=ttl_calculation,json=ttlCalculation,enum=nutanix.insights.interface.MetricType_TtlCalculation,def=0" json:"ttl_calculation,omitempty"`
	Category       *MetricType_Category       `protobuf:"varint,29,opt,name=category,enum=nutanix.insights.interface.MetricType_Category,def=0" json:"category,omitempty"`
	// Optional. Set it to false if the value of this attribute
	// (is_attribute = true) is scalar (vs. list).
	// This field is needed because MongoDB has different performance
	// characteristics for scalar-value and list-value fields. Knowing the
	// value type enables IDF to further optimize the queries.
	CanHaveListValues    *bool    `protobuf:"varint,31,opt,name=can_have_list_values,json=canHaveListValues,def=1" json:"can_have_list_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricType) Reset()         { *m = MetricType{} }
func (m *MetricType) String() string { return proto.CompactTextString(m) }
func (*MetricType) ProtoMessage()    {}
func (*MetricType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{9}
}

func (m *MetricType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricType.Unmarshal(m, b)
}
func (m *MetricType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricType.Marshal(b, m, deterministic)
}
func (m *MetricType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricType.Merge(m, src)
}
func (m *MetricType) XXX_Size() int {
	return xxx_messageInfo_MetricType.Size(m)
}
func (m *MetricType) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricType.DiscardUnknown(m)
}

var xxx_messageInfo_MetricType proto.InternalMessageInfo

const Default_MetricType_IsAttribute bool = false
const Default_MetricType_DownSamplingIntervalInSecs uint32 = 30
const Default_MetricType_DownSamplingOperator MetricType_Operator = MetricType_kLast
const Default_MetricType_BucketizeTimestampsInTsdb bool = true
const Default_MetricType_IsDerivedMetric bool = false
const Default_MetricType_IsWildcardSearchable bool = true
const Default_MetricType_ContainsSerialisedProto bool = false
const Default_MetricType_SerialisedProtoCompressionType MetricType_CompressionType = MetricType_kNone
const Default_MetricType_Namespace string = "_default_"
const Default_MetricType_EnableMetricdataRpc bool = true
const Default_MetricType_IsIndexColumn bool = false
const Default_MetricType_PiiType MetricType_PiiType = MetricType_kDoesNotContainPII
const Default_MetricType_PiiRegexForValue string = ".*"
const Default_MetricType_MaskType MetricType_MaskType = MetricType_kDefaultMask
const Default_MetricType_TtlCalculation MetricType_TtlCalculation = MetricType_kTimestampBased
const Default_MetricType_Category MetricType_Category = MetricType_kRealTime
const Default_MetricType_CanHaveListValues bool = true

func (m *MetricType) GetIsAttribute() bool {
	if m != nil && m.IsAttribute != nil {
		return *m.IsAttribute
	}
	return Default_MetricType_IsAttribute
}

func (m *MetricType) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *MetricType) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *MetricType) GetUnit() string {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return ""
}

func (m *MetricType) GetAggregationOperator() MetricType_Operator {
	if m != nil && m.AggregationOperator != nil {
		return *m.AggregationOperator
	}
	return MetricType_kSum
}

func (m *MetricType) GetDownSamplingIntervalInSecs() uint32 {
	if m != nil && m.DownSamplingIntervalInSecs != nil {
		return *m.DownSamplingIntervalInSecs
	}
	return Default_MetricType_DownSamplingIntervalInSecs
}

func (m *MetricType) GetDownSamplingOperator() MetricType_Operator {
	if m != nil && m.DownSamplingOperator != nil {
		return *m.DownSamplingOperator
	}
	return Default_MetricType_DownSamplingOperator
}

func (m *MetricType) GetQueryDownSamplingOperator() MetricType_Operator {
	if m != nil && m.QueryDownSamplingOperator != nil {
		return *m.QueryDownSamplingOperator
	}
	return MetricType_kSum
}

func (m *MetricType) GetBucketizeTimestampsInTsdb() bool {
	if m != nil && m.BucketizeTimestampsInTsdb != nil {
		return *m.BucketizeTimestampsInTsdb
	}
	return Default_MetricType_BucketizeTimestampsInTsdb
}

func (m *MetricType) GetUserMetadata() string {
	if m != nil && m.UserMetadata != nil {
		return *m.UserMetadata
	}
	return ""
}

func (m *MetricType) GetIsDerivedMetric() bool {
	if m != nil && m.IsDerivedMetric != nil {
		return *m.IsDerivedMetric
	}
	return Default_MetricType_IsDerivedMetric
}

func (m *MetricType) GetDerivedMetricRollupQuery() *Query {
	if m != nil {
		return m.DerivedMetricRollupQuery
	}
	return nil
}

func (m *MetricType) GetDerivedMetricExpression() *Expression {
	if m != nil {
		return m.DerivedMetricExpression
	}
	return nil
}

func (m *MetricType) GetRawRetentionInWeeks() uint32 {
	if m != nil && m.RawRetentionInWeeks != nil {
		return *m.RawRetentionInWeeks
	}
	return 0
}

func (m *MetricType) GetHourlyRetentionInWeeks() uint32 {
	if m != nil && m.HourlyRetentionInWeeks != nil {
		return *m.HourlyRetentionInWeeks
	}
	return 0
}

func (m *MetricType) GetIsWildcardSearchable() bool {
	if m != nil && m.IsWildcardSearchable != nil {
		return *m.IsWildcardSearchable
	}
	return Default_MetricType_IsWildcardSearchable
}

func (m *MetricType) GetPersistAttributeAsTimeSeries() bool {
	if m != nil && m.PersistAttributeAsTimeSeries != nil {
		return *m.PersistAttributeAsTimeSeries
	}
	return false
}

func (m *MetricType) GetContainsSerialisedProto() bool {
	if m != nil && m.ContainsSerialisedProto != nil {
		return *m.ContainsSerialisedProto
	}
	return Default_MetricType_ContainsSerialisedProto
}

func (m *MetricType) GetNestedFieldInfo() *NestedFieldInfo {
	if m != nil {
		return m.NestedFieldInfo
	}
	return nil
}

func (m *MetricType) GetSerialisedProtoCompressionType() MetricType_CompressionType {
	if m != nil && m.SerialisedProtoCompressionType != nil {
		return *m.SerialisedProtoCompressionType
	}
	return Default_MetricType_SerialisedProtoCompressionType
}

func (m *MetricType) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_MetricType_Namespace
}

func (m *MetricType) GetEnableMetricdataRpc() bool {
	if m != nil && m.EnableMetricdataRpc != nil {
		return *m.EnableMetricdataRpc
	}
	return Default_MetricType_EnableMetricdataRpc
}

func (m *MetricType) GetIsIndexColumn() bool {
	if m != nil && m.IsIndexColumn != nil {
		return *m.IsIndexColumn
	}
	return Default_MetricType_IsIndexColumn
}

func (m *MetricType) GetIndexType() MetricType_IndexType {
	if m != nil && m.IndexType != nil {
		return *m.IndexType
	}
	return MetricType_kInt64
}

func (m *MetricType) GetPiiType() MetricType_PiiType {
	if m != nil && m.PiiType != nil {
		return *m.PiiType
	}
	return Default_MetricType_PiiType
}

func (m *MetricType) GetPiiRegexForValue() string {
	if m != nil && m.PiiRegexForValue != nil {
		return *m.PiiRegexForValue
	}
	return Default_MetricType_PiiRegexForValue
}

func (m *MetricType) GetParentTypeName() string {
	if m != nil && m.ParentTypeName != nil {
		return *m.ParentTypeName
	}
	return ""
}

func (m *MetricType) GetMaskType() MetricType_MaskType {
	if m != nil && m.MaskType != nil {
		return *m.MaskType
	}
	return Default_MetricType_MaskType
}

func (m *MetricType) GetTtlCalculation() MetricType_TtlCalculation {
	if m != nil && m.TtlCalculation != nil {
		return *m.TtlCalculation
	}
	return Default_MetricType_TtlCalculation
}

func (m *MetricType) GetCategory() MetricType_Category {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return Default_MetricType_Category
}

func (m *MetricType) GetCanHaveListValues() bool {
	if m != nil && m.CanHaveListValues != nil {
		return *m.CanHaveListValues
	}
	return Default_MetricType_CanHaveListValues
}

// This message contains information about a nested field of a protobuf message
// which stored in a serialised format as an attribute value. This nested
// field will be parsed from this serialised proto using information stored in
// this NestedFieldInfo message; info such as the name of the attribute storing
// the serialised proto, the location of the nested field in terms of its field
// position, the datatype of this field, etc.  Insights server will internally
// populate an attribute of the entity with the value of this nested field.
// This will allow this nested field to be used for query purposes.
// Example:
// Say a protobuf is defined as follows:
//
// message Nested {
//  optional int64 value = 1;
//  optional unit64 count = 2;
// }
//
//  message Foo {
//    optional int64 bar = 1;
//    optional Nested xyz = 2;
//  }
//
// Say there is an entity_type "disk" which would contain a serialized
// version of protobuf Foo with an index built on field Foo.Nested.value.
//
// The base attribute can be defined as follows:
//
// metric_type_list {
//   is_attribute: true
//   metric_name: "foo"
//   entity_type_name: "disk"
//   contains_serialised_proto : true
//   serialised_proto_compression_type: kNone
// }
//
// Then a nested field attribute could be defined as follows:
//
// metric_type_list {
//   is_attribute: true
//   metric_name: "foo.xyz.value"
//   entity_type_name: "disk"
//   nested_field_info {
//     base_attribute: "foo"
//     nested_field_index: 2
//     nested_field_index: 1
//     nested_field_type: kInt64
//     has_repeated_fields: false
//    }
// }
//
// If the nested field attribute's value wont be present in existing entities,
// then it could be defined as follows to avoid unnecessary recomputation:
//
// metric_type_list {
//   is_attribute: true
//   metric_name: "foo.xyz.count"
//   entity_type_name: "disk"
//   nested_field_info {
//     base_attribute: "foo"
//     nested_field_index: 2
//     nested_field_index: 2
//     nested_field_type: kUInt64
//     has_repeated_fields: false
//     skip_nested_field_recomputation: true
//    }
// }
//
// Note that the user is encouraged, though not enforced, to fully qualify the
// nested field name starting from the top most message to avoid naming
// conflicts and for better clarity in general. Dot notation should be used to
// specify the fully qualifited nested field name. The nested field index
// should start from the top most field position and specify the position of
// each nested field.
type NestedFieldInfo struct {
	// Required. Specifies the name of the attribute which contains the
	// serialised protobuf. This serialised proto contains the nested field which
	// will be queried for.
	BaseAttribute *string `protobuf:"bytes,1,opt,name=base_attribute,json=baseAttribute" json:"base_attribute,omitempty"`
	// Required. The location of nested field within the serialised protobuf
	// specified under 'base_attribute'. The location of the nested field should
	// be specified in field positions starting from the top most protobuf.
	// When 'union_nested_field_info' is set, this will contain the common path
	// of the nested fields specified by the union upto the fork.
	NestedFieldIndex []uint32 `protobuf:"varint,2,rep,name=nested_field_index,json=nestedFieldIndex" json:"nested_field_index,omitempty"`
	// Required. The data type of the nested field value. This will be used to
	// appropriately parse the value from the serialised protobof.
	// When 'union_nested_field_info' is set, this field specifies the
	// destination type. Otherwise, this field specifies both the source and
	// destination type.
	NestedFieldType *NestedFieldInfo_ValueType `protobuf:"varint,3,opt,name=nested_field_type,json=nestedFieldType,enum=nutanix.insights.interface.NestedFieldInfo_ValueType,def=0" json:"nested_field_type,omitempty"`
	// Required. Specifies whether the nested field is to be treated as a
	// repeated field or not. This field should be set to true if
	// 1. The nested field is itself a repeated field.
	// 2. Any of the embedded message at any of the nesting level of this nested
	// field is part of a repeated field.
	// Otherwise, this field should be set to false.
	// Note that if this field is set to true, then the parsed values will be put
	// into the appropriate list based on the 'nested_field_type', even if a
	// single value is found during parsing. For example, bool_list, str_list,
	// int64_list etc.  The ordering of the repeated fields in the serialised
	// form of the protobuf will be preserved in this list form.
	// Otherwise, the parsed value will be put into the appropriate field based
	// on the 'nested_field_type'. For example, bool_value, str_value,
	// int64_value, etc. If this value is set to false and multiple values of
	// this field is found (probably due to a wrong configuration, or if a
	// non-standard parsing mechanism is used or if the client simply wants the
	// corresponding nested field attribute to hold a single value out of these
	// multiple values),then the value that is picked for this attribute out of
	// these multiple values is determined by the parameter 'nested_field_option'.
	// The default value of this parameter is kLast.
	// To avoid non-standard parsing mechanism issues, use the SerialiseAsString()
	// or SerialiseToString(&output) methods or their language specific equivalents.
	HasRepeatedFields *bool `protobuf:"varint,4,opt,name=has_repeated_fields,json=hasRepeatedFields,def=0" json:"has_repeated_fields,omitempty"`
	// Optional. Specifies the path to the field whose union needs to be taken
	// in continuation with NestedFieldInfo.nested_field_index.
	// and the ValueType of the field which will act as the source type.
	// Currently unions are only supported only at the leaf level, so
	// union_nested_field_info should contain only one nested_field_index.
	UnionNestedFieldInfo []*NestedFieldInfo_UnionNestedFieldInfo `protobuf:"bytes,5,rep,name=union_nested_field_info,json=unionNestedFieldInfo" json:"union_nested_field_info,omitempty"`
	// Optional. Only applicable when 'has_repeated_fields' is set to
	// false.
	// NOTE: Currently, nested_field_option is not supported along with
	//       union_nested_fields.
	// Specifies which field to consider when 'has_repeated_fields' is false but
	// multiple values are found at the mentioned index.
	// If 'has_repeated_fields' is set to true, the values are stored as
	// list_type e.g.  int64_list, str_list, etc.  If 'has_repeated_fields' is
	// set to false, the values are stored as bool_value, str_value etc. based on
	// the nested_field_type,
	// If multiple values are found at the index then 'nested_field_option' is
	// considered.
	NestedFieldOption *NestedFieldInfo_FieldOption `protobuf:"varint,6,opt,name=nested_field_option,json=nestedFieldOption,enum=nutanix.insights.interface.NestedFieldInfo_FieldOption,def=1" json:"nested_field_option,omitempty"`
	// Optional. Flag that indicates whether to perform nested field recomputation
	// for all the existing entities. This is a performance related flag that skips
	// recomputation as part of RegisterMetricTypes API thereby preventing timeouts
	// for entity types having a high number of IDF entities.
	// Setting this flag to true will have no impact on the normal nested field
	// recomputation done as part of IDF cache bootstrap or as part of the
	// UpdateEntity() API that modifies the nested fields base attribute value.
	// NOTE: Set this flag only while registering a new nested field which
	//       wont be populated for the existing entities, however an explicit update
	//       will make the metric value appear.
	//       This flag is relevant only for dynamically registered attributes
	//       via APIs and is not relevant for config driven attributes.
	SkipNestedFieldRecomputation *bool    `protobuf:"varint,31,opt,name=skip_nested_field_recomputation,json=skipNestedFieldRecomputation,def=0" json:"skip_nested_field_recomputation,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *NestedFieldInfo) Reset()         { *m = NestedFieldInfo{} }
func (m *NestedFieldInfo) String() string { return proto.CompactTextString(m) }
func (*NestedFieldInfo) ProtoMessage()    {}
func (*NestedFieldInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{10}
}

func (m *NestedFieldInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedFieldInfo.Unmarshal(m, b)
}
func (m *NestedFieldInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedFieldInfo.Marshal(b, m, deterministic)
}
func (m *NestedFieldInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedFieldInfo.Merge(m, src)
}
func (m *NestedFieldInfo) XXX_Size() int {
	return xxx_messageInfo_NestedFieldInfo.Size(m)
}
func (m *NestedFieldInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedFieldInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NestedFieldInfo proto.InternalMessageInfo

const Default_NestedFieldInfo_NestedFieldType NestedFieldInfo_ValueType = NestedFieldInfo_kString
const Default_NestedFieldInfo_HasRepeatedFields bool = false
const Default_NestedFieldInfo_NestedFieldOption NestedFieldInfo_FieldOption = NestedFieldInfo_kLast
const Default_NestedFieldInfo_SkipNestedFieldRecomputation bool = false

func (m *NestedFieldInfo) GetBaseAttribute() string {
	if m != nil && m.BaseAttribute != nil {
		return *m.BaseAttribute
	}
	return ""
}

func (m *NestedFieldInfo) GetNestedFieldIndex() []uint32 {
	if m != nil {
		return m.NestedFieldIndex
	}
	return nil
}

func (m *NestedFieldInfo) GetNestedFieldType() NestedFieldInfo_ValueType {
	if m != nil && m.NestedFieldType != nil {
		return *m.NestedFieldType
	}
	return Default_NestedFieldInfo_NestedFieldType
}

func (m *NestedFieldInfo) GetHasRepeatedFields() bool {
	if m != nil && m.HasRepeatedFields != nil {
		return *m.HasRepeatedFields
	}
	return Default_NestedFieldInfo_HasRepeatedFields
}

func (m *NestedFieldInfo) GetUnionNestedFieldInfo() []*NestedFieldInfo_UnionNestedFieldInfo {
	if m != nil {
		return m.UnionNestedFieldInfo
	}
	return nil
}

func (m *NestedFieldInfo) GetNestedFieldOption() NestedFieldInfo_FieldOption {
	if m != nil && m.NestedFieldOption != nil {
		return *m.NestedFieldOption
	}
	return Default_NestedFieldInfo_NestedFieldOption
}

func (m *NestedFieldInfo) GetSkipNestedFieldRecomputation() bool {
	if m != nil && m.SkipNestedFieldRecomputation != nil {
		return *m.SkipNestedFieldRecomputation
	}
	return Default_NestedFieldInfo_SkipNestedFieldRecomputation
}

// Example:
// Say a protobuf is defined as follows:
//
// Note that only one of these fields will be set at any given point.
// message Value {
//   optional bool bool_value = 1;
//   optional int64 int64_value = 2;
// }
//
// message Nested {
//  optional Value value = 1;
// }
//
//  message Foo {
//    optional int64 bar = 1;
//    optional Nested xyz = 2;
//  }
//
// Say there is an entity_type "disk" which would contain a serialized
// version of protobuf Foo and also needs to have nested attribute on
// either the value of Foo.Nested.bool_value or the value of
// Foo.Nested.int64_value with the assumption that only one of these fields
// will be set for any given time.
// In this case, the following can be done.
//
// The base attribute can be defined as follows:
//
// metric_type_list {
//   is_attribute: true
//   metric_name: "foo"
//   entity_type_name: "disk"
//   contains_serialised_proto : true
//   serialised_proto_compression_type: kNone
// }
//
// The union nested field attribute can be defined as follows:
// Note that the 'nested_field_index' points to the common location of
// these union fields uptil the fork while the individual
// 'union_nested_field_info.nested_field_index' continues the path from the
// fork upto the final location of the field which forms a part of the
// union.
//
// metric_type_list {
//   is_attribute: true
//   metric_name: "xyz.value"
//   entity_type_name: "disk"
//   user_metadata: "{\"data_type\":\"string\"}"
//   persist_attribute_as_time_series: false
//   nested_field_info {
//     nested_field_index: 2
//     nested_field_index: 1
//     base_attribute: "foo"
//     nested_field_type: kString
//     has_repeated_fields: false
//     union_nested_field_info {
//       nested_field_index: 1
//       nested_field_type: kBoolean
//     }
//     union_nested_field_info {
//       nested_field_index: 2
//       nested_field_type: kInt64
//     }
//   }
// }
type NestedFieldInfo_UnionNestedFieldInfo struct {
	// Required. The location of the nested field within serialised protobuf
	// in continuation with the index mentioned in
	// 'nested_field_info.nested_field_index'. Currently union is supported
	// only at the leaf entries. So, 'nested_field_index' for 'union_nested_field'
	// will only contain a single index.
	NestedFieldIndex []uint32 `protobuf:"varint,1,rep,name=nested_field_index,json=nestedFieldIndex" json:"nested_field_index,omitempty"`
	// Required. The data type of the nested field value. This will be used to
	// appropriately parse the value from the serialised protobof. This will be
	// the source type.
	// Valid conversions:
	//
	// |Source Types                                        | Destination Type|
	// | kBoolean                                           | kBoolean        |
	// | kEnum                                              | kEnum           |
	// | kUInt64, kEnum, kBoolean                           | kUInt64         |
	// | kUInt64, kInt64, kEnum, kBoolean                   | kInt64          |
	// | kUInt64, kInt64, kFloat, kEnum, kBoolean           | kFloat          |
	// | kUInt64, kInt64, kDouble, kFloat, kEnum, kBoolean  | kDouble         |
	// | kUInt64, kInt64, kDouble, kFloat, kEnum, kBoolean, | kString         |
	// | kBytes, kString                                    | kString         |
	// | kUInt64, kInt64, kDouble, kFloat, kEnum, kBoolean, | kBytes          |
	// | kBytes, kString                                    | kBytes          |
	NestedFieldType      *NestedFieldInfo_ValueType `protobuf:"varint,2,opt,name=nested_field_type,json=nestedFieldType,enum=nutanix.insights.interface.NestedFieldInfo_ValueType,def=0" json:"nested_field_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *NestedFieldInfo_UnionNestedFieldInfo) Reset()         { *m = NestedFieldInfo_UnionNestedFieldInfo{} }
func (m *NestedFieldInfo_UnionNestedFieldInfo) String() string { return proto.CompactTextString(m) }
func (*NestedFieldInfo_UnionNestedFieldInfo) ProtoMessage()    {}
func (*NestedFieldInfo_UnionNestedFieldInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{10, 0}
}

func (m *NestedFieldInfo_UnionNestedFieldInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedFieldInfo_UnionNestedFieldInfo.Unmarshal(m, b)
}
func (m *NestedFieldInfo_UnionNestedFieldInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedFieldInfo_UnionNestedFieldInfo.Marshal(b, m, deterministic)
}
func (m *NestedFieldInfo_UnionNestedFieldInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedFieldInfo_UnionNestedFieldInfo.Merge(m, src)
}
func (m *NestedFieldInfo_UnionNestedFieldInfo) XXX_Size() int {
	return xxx_messageInfo_NestedFieldInfo_UnionNestedFieldInfo.Size(m)
}
func (m *NestedFieldInfo_UnionNestedFieldInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedFieldInfo_UnionNestedFieldInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NestedFieldInfo_UnionNestedFieldInfo proto.InternalMessageInfo

const Default_NestedFieldInfo_UnionNestedFieldInfo_NestedFieldType NestedFieldInfo_ValueType = NestedFieldInfo_kString

func (m *NestedFieldInfo_UnionNestedFieldInfo) GetNestedFieldIndex() []uint32 {
	if m != nil {
		return m.NestedFieldIndex
	}
	return nil
}

func (m *NestedFieldInfo_UnionNestedFieldInfo) GetNestedFieldType() NestedFieldInfo_ValueType {
	if m != nil && m.NestedFieldType != nil {
		return *m.NestedFieldType
	}
	return Default_NestedFieldInfo_UnionNestedFieldInfo_NestedFieldType
}

// This is an empty protobuf message. This is used to deserialise any protobuf
// into a list of unknown fields which then can be accessed using their field
// positions. This technique allows the server to handle any type of incoming
// serialised protobuf without their definition available at compile time. Only
// the field positions and data type of the required fields should be specified
// and they can be appropriately parsed.
type GenericNestedProto struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericNestedProto) Reset()         { *m = GenericNestedProto{} }
func (m *GenericNestedProto) String() string { return proto.CompactTextString(m) }
func (*GenericNestedProto) ProtoMessage()    {}
func (*GenericNestedProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{11}
}

func (m *GenericNestedProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericNestedProto.Unmarshal(m, b)
}
func (m *GenericNestedProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericNestedProto.Marshal(b, m, deterministic)
}
func (m *GenericNestedProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericNestedProto.Merge(m, src)
}
func (m *GenericNestedProto) XXX_Size() int {
	return xxx_messageInfo_GenericNestedProto.Size(m)
}
func (m *GenericNestedProto) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericNestedProto.DiscardUnknown(m)
}

var xxx_messageInfo_GenericNestedProto proto.InternalMessageInfo

// This message describes how an entity gets sharded in a multi-node setup.
type EntityTypeShard struct {
	// Optional. Shard entities of this type based on token range or entity
	// affinity.
	ShardType *EntityTypeShard_ShardType `protobuf:"varint,1,opt,name=shard_type,json=shardType,enum=nutanix.insights.interface.EntityTypeShard_ShardType,def=0" json:"shard_type,omitempty"`
	// Optional. Expected to be set if 'shard_entity_type' is 'kEntityType'.
	// This field is set to the related entity type to be used for sharding.
	//
	// Entities will be sharded to the node that hosts the related shard entity.
	// If the related shard entity is not set when the entity is created,
	// then the entity will be sharded based on token range and re-sharded when
	// the relationship is specified. If the shard entity moves from one node
	// to another, then the entire subtree moves. Anchor entities are specified
	// by setting the shard_entity_type_name to itself.
	//
	// For the configuration below...
	//
	//  node  - shard_entity_type = kEntityType & shard_entity_type_name = node
	//  vm    - shard_entity_type = kEntityType & shard_entity_type_name = node
	//  vdisk - shard_entity_type = kEntityType & shard_entity_type_name = vm
	//
	// node is the anchor entity,
	// vm is sharded based on it's node relationship,
	// vdisk is sharded based on it's vm relationship
	//
	// Workflow that computes shards for node, vm and vdisk...
	//  shard_for_node = node_ip_address;
	//  if vm.node is set
	//    shard_for_vm = shard_for_node;
	//  else
	//    shard_for_vm = shard_based_on_token_value(vm_token_value);
	//  if vdisk.vm is set
	//    shard_for_vdisk = shard_for_vm
	//  else
	//    shard_for_vdisk = shard_based_on_token_value(vdisk_token_value);
	ShardEntityTypeName  *string  `protobuf:"bytes,2,opt,name=shard_entity_type_name,json=shardEntityTypeName" json:"shard_entity_type_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityTypeShard) Reset()         { *m = EntityTypeShard{} }
func (m *EntityTypeShard) String() string { return proto.CompactTextString(m) }
func (*EntityTypeShard) ProtoMessage()    {}
func (*EntityTypeShard) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{12}
}

func (m *EntityTypeShard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityTypeShard.Unmarshal(m, b)
}
func (m *EntityTypeShard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityTypeShard.Marshal(b, m, deterministic)
}
func (m *EntityTypeShard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityTypeShard.Merge(m, src)
}
func (m *EntityTypeShard) XXX_Size() int {
	return xxx_messageInfo_EntityTypeShard.Size(m)
}
func (m *EntityTypeShard) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityTypeShard.DiscardUnknown(m)
}

var xxx_messageInfo_EntityTypeShard proto.InternalMessageInfo

const Default_EntityTypeShard_ShardType EntityTypeShard_ShardType = EntityTypeShard_kTokenRange

func (m *EntityTypeShard) GetShardType() EntityTypeShard_ShardType {
	if m != nil && m.ShardType != nil {
		return *m.ShardType
	}
	return Default_EntityTypeShard_ShardType
}

func (m *EntityTypeShard) GetShardEntityTypeName() string {
	if m != nil && m.ShardEntityTypeName != nil {
		return *m.ShardEntityTypeName
	}
	return ""
}

// This represents information for an entity type.
type TypeInfo struct {
	// Optional. The list of parent entity type names.
	// The parent has to be registered prior to registering the child.
	ParentList []string `protobuf:"bytes,1,rep,name=parent_list,json=parentList" json:"parent_list,omitempty"`
	// Optional. Track changes to attributes and relationships over time.
	// If this option is set to false, then only the current state of the entity
	// is stored in DB. Every time, an attribute or a parent link changes, the
	// entity is overwritten with the latest value and the old value is not
	// written to entity trail log.
	TrackAttributeChanges *bool `protobuf:"varint,2,opt,name=track_attribute_changes,json=trackAttributeChanges,def=1" json:"track_attribute_changes,omitempty"`
	// Optional. This will specify how entities of this type will be sharded
	// in a multi node deployment.
	ShardStrategy *EntityTypeShard `protobuf:"bytes,3,opt,name=shard_strategy,json=shardStrategy" json:"shard_strategy,omitempty"`
	// Optional. Flag to indicate if DB -> DB replication should be
	// suppressed or not. If suppress_replication is set to false, then the
	// entities of this type created in clusters with configurations described by
	// 'replication_control_list' will get replicated.
	SuppressReplication *bool `protobuf:"varint,4,opt,name=suppress_replication,json=suppressReplication,def=0" json:"suppress_replication,omitempty"`
	// Optional. Flag to indicate if the entity type holds the configuration of a
	// dimensions-facts table or not.
	IsDimensionFactTable *bool `protobuf:"varint,5,opt,name=is_dimension_fact_table,json=isDimensionFactTable,def=0" json:"is_dimension_fact_table,omitempty"`
	// Optional. Flag to indicate whether entities of this entity type
	// can be evicted from in-memory cache. This cannot be changed after
	// the initial entity type registration.
	IsEvictable *bool `protobuf:"varint,6,opt,name=is_evictable,json=isEvictable,def=0" json:"is_evictable,omitempty"`
	// Optional. If 'suppress_replication' is set to false, then the list
	// determines the list of cluster configurations where replication is enabled
	// for this entity type. If this list is empty and 'suppress_replication' is
	// false, then replication is enabled from all cluster configurations.
	ReplicationControlList []*TypeInfo_ReplicationControl `protobuf:"bytes,7,rep,name=replication_control_list,json=replicationControlList" json:"replication_control_list,omitempty"`
	// Optional.  Flag to indicate the ttl (in secs) for deleted entities of
	// this entity type. They (deleted entities) will be thoroughly cleaned up
	// from DB after the specified time. If it is not set or set to invalid
	// value (<= 0), the gflag 'insights_deleted_entity_default_retention_in_secs'
	// will be applied.
	DeletedEntityRetentionInSecs *uint32 `protobuf:"varint,8,opt,name=deleted_entity_retention_in_secs,json=deletedEntityRetentionInSecs" json:"deleted_entity_retention_in_secs,omitempty"`
	// This field is deprecated and setting it to any value would have no effect
	// on queries on this entity type.
	// For doing ancestor traversal for filter clause and grouping on entity_type
	// attributes, set the value of 'suppress_ancestor_tree_traversal' field to
	// false in LeafExpression and QueryGroupBy respectively in the query arg.
	// An attribute name that matches any entity type would be considered a
	// regular attribute.
	SuppressAncestorTreeTraversal *bool `protobuf:"varint,9,opt,name=suppress_ancestor_tree_traversal,json=suppressAncestorTreeTraversal,def=1" json:"suppress_ancestor_tree_traversal,omitempty"`
	// Optional. Flag indicating whether the entity type is enabled for Pulse
	// HD data collection. If the entity type is ok be collected. Set to "true" if
	// the owner want this entity to be collected by the collectors.
	EnablePulsehdCollection *bool `protobuf:"varint,10,opt,name=enable_pulsehd_collection,json=enablePulsehdCollection,def=0" json:"enable_pulsehd_collection,omitempty"`
	// Optional. By default, entity types are not tenant-specific.
	// If false, entity type is tenant-general.
	TenantSpecific *bool `protobuf:"varint,11,opt,name=tenant_specific,json=tenantSpecific,def=0" json:"tenant_specific,omitempty"`
	// Optional. If specified, only those entities will be collected which
	// the boolean expression evaluates to true.
	// Currently, we support only attributes in the boolean expression
	// (i.e: no metrics/stats). We don't support 'kDelete' and 'kConvertToMetric'
	//  operations with boolean expression.
	// NOTE: Conditional watches ideally should be set on attributes which
	// are immutable. Otherwise the watches would be triggered only when the
	// attributes match the condition and this would result in an complete
	// trail of the entitiy on the PulseHD server.
	EnablePulsehdCondition *BooleanExpression `protobuf:"bytes,12,opt,name=enable_pulsehd_condition,json=enablePulsehdCondition" json:"enable_pulsehd_condition,omitempty"`
	// Optional. Flag indicating if the metrics of this entity type should be
	// collected for PulseHD data collection. The enable_pulsehd_collection
	// field has to be set to 'true' when this field is set to true.
	EnablePulsehdMetricCollection *bool `protobuf:"varint,13,opt,name=enable_pulsehd_metric_collection,json=enablePulsehdMetricCollection,def=0" json:"enable_pulsehd_metric_collection,omitempty"`
	// Optional. Determing the loading priority during bootstrap/shard loading.
	// The larger the number, the lower the priority. 0 is the highest.
	EntityLoadingPriority *int32 `protobuf:"varint,14,opt,name=entity_loading_priority,json=entityLoadingPriority,def=0" json:"entity_loading_priority,omitempty"`
	// Optional. Flag indicating whether to allow deletion of replicated
	// entities of this entity type on the replica or not.
	// This flag would allow only the existing replicated instance to be deleted
	// at the replica. Even if the entity is deleted on replica, a subsequent CUD
	// operation on the source on this entity would still be synced and become
	// available on the replica.
	AllowEntityDeletionOnReplica *bool `protobuf:"varint,15,opt,name=allow_entity_deletion_on_replica,json=allowEntityDeletionOnReplica,def=0" json:"allow_entity_deletion_on_replica,omitempty"`
	// Optional. Holds information about whether this entity type needs to be
	// backed up or restored.
	BackupReplicationControl *TypeInfo_BackupReplicationControl `protobuf:"bytes,16,opt,name=backup_replication_control,json=backupReplicationControl" json:"backup_replication_control,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                           `json:"-"`
	XXX_unrecognized         []byte                             `json:"-"`
	XXX_sizecache            int32                              `json:"-"`
}

func (m *TypeInfo) Reset()         { *m = TypeInfo{} }
func (m *TypeInfo) String() string { return proto.CompactTextString(m) }
func (*TypeInfo) ProtoMessage()    {}
func (*TypeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{13}
}

func (m *TypeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeInfo.Unmarshal(m, b)
}
func (m *TypeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeInfo.Marshal(b, m, deterministic)
}
func (m *TypeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeInfo.Merge(m, src)
}
func (m *TypeInfo) XXX_Size() int {
	return xxx_messageInfo_TypeInfo.Size(m)
}
func (m *TypeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TypeInfo proto.InternalMessageInfo

const Default_TypeInfo_TrackAttributeChanges bool = true
const Default_TypeInfo_SuppressReplication bool = false
const Default_TypeInfo_IsDimensionFactTable bool = false
const Default_TypeInfo_IsEvictable bool = false
const Default_TypeInfo_SuppressAncestorTreeTraversal bool = true
const Default_TypeInfo_EnablePulsehdCollection bool = false
const Default_TypeInfo_TenantSpecific bool = false
const Default_TypeInfo_EnablePulsehdMetricCollection bool = false
const Default_TypeInfo_EntityLoadingPriority int32 = 0
const Default_TypeInfo_AllowEntityDeletionOnReplica bool = false

func (m *TypeInfo) GetParentList() []string {
	if m != nil {
		return m.ParentList
	}
	return nil
}

func (m *TypeInfo) GetTrackAttributeChanges() bool {
	if m != nil && m.TrackAttributeChanges != nil {
		return *m.TrackAttributeChanges
	}
	return Default_TypeInfo_TrackAttributeChanges
}

func (m *TypeInfo) GetShardStrategy() *EntityTypeShard {
	if m != nil {
		return m.ShardStrategy
	}
	return nil
}

func (m *TypeInfo) GetSuppressReplication() bool {
	if m != nil && m.SuppressReplication != nil {
		return *m.SuppressReplication
	}
	return Default_TypeInfo_SuppressReplication
}

func (m *TypeInfo) GetIsDimensionFactTable() bool {
	if m != nil && m.IsDimensionFactTable != nil {
		return *m.IsDimensionFactTable
	}
	return Default_TypeInfo_IsDimensionFactTable
}

func (m *TypeInfo) GetIsEvictable() bool {
	if m != nil && m.IsEvictable != nil {
		return *m.IsEvictable
	}
	return Default_TypeInfo_IsEvictable
}

func (m *TypeInfo) GetReplicationControlList() []*TypeInfo_ReplicationControl {
	if m != nil {
		return m.ReplicationControlList
	}
	return nil
}

func (m *TypeInfo) GetDeletedEntityRetentionInSecs() uint32 {
	if m != nil && m.DeletedEntityRetentionInSecs != nil {
		return *m.DeletedEntityRetentionInSecs
	}
	return 0
}

func (m *TypeInfo) GetSuppressAncestorTreeTraversal() bool {
	if m != nil && m.SuppressAncestorTreeTraversal != nil {
		return *m.SuppressAncestorTreeTraversal
	}
	return Default_TypeInfo_SuppressAncestorTreeTraversal
}

func (m *TypeInfo) GetEnablePulsehdCollection() bool {
	if m != nil && m.EnablePulsehdCollection != nil {
		return *m.EnablePulsehdCollection
	}
	return Default_TypeInfo_EnablePulsehdCollection
}

func (m *TypeInfo) GetTenantSpecific() bool {
	if m != nil && m.TenantSpecific != nil {
		return *m.TenantSpecific
	}
	return Default_TypeInfo_TenantSpecific
}

func (m *TypeInfo) GetEnablePulsehdCondition() *BooleanExpression {
	if m != nil {
		return m.EnablePulsehdCondition
	}
	return nil
}

func (m *TypeInfo) GetEnablePulsehdMetricCollection() bool {
	if m != nil && m.EnablePulsehdMetricCollection != nil {
		return *m.EnablePulsehdMetricCollection
	}
	return Default_TypeInfo_EnablePulsehdMetricCollection
}

func (m *TypeInfo) GetEntityLoadingPriority() int32 {
	if m != nil && m.EntityLoadingPriority != nil {
		return *m.EntityLoadingPriority
	}
	return Default_TypeInfo_EntityLoadingPriority
}

func (m *TypeInfo) GetAllowEntityDeletionOnReplica() bool {
	if m != nil && m.AllowEntityDeletionOnReplica != nil {
		return *m.AllowEntityDeletionOnReplica
	}
	return Default_TypeInfo_AllowEntityDeletionOnReplica
}

func (m *TypeInfo) GetBackupReplicationControl() *TypeInfo_BackupReplicationControl {
	if m != nil {
		return m.BackupReplicationControl
	}
	return nil
}

// This message describes the cluster configurations where replication can
// take place.
type TypeInfo_ReplicationControl struct {
	// Optional. The cluster type from which replication is enabled.
	EnableReplicationFrom *TypeInfo_ClusterFunctions `protobuf:"varint,1,opt,name=enable_replication_from,json=enableReplicationFrom,enum=nutanix.insights.interface.TypeInfo_ClusterFunctions" json:"enable_replication_from,omitempty"`
	// Optional. The cluster type to which replication is enabled.
	// It is used to determine the global data type in IDF federation and
	// it should only be set in federation mode.
	// TODO(IDF Fed): this logic hasn't been implemented.
	EnableReplicationTo *TypeInfo_ClusterFunctions `protobuf:"varint,2,opt,name=enable_replication_to,json=enableReplicationTo,enum=nutanix.insights.interface.TypeInfo_ClusterFunctions" json:"enable_replication_to,omitempty"`
	// Attribute to be used for swapping entity ids from attribute before
	// sync of entity to remote cluster. This attribute should be registered
	// for the given entity type, If not registered or not present in entity
	// id won't be changed before sync and the remote side will have
	// replicated entity with same entity id as source.
	// Eg. for etype1, attr1 is set to be used for this option
	// Update(type = etype1, id = e_id1) without attr1
	// Remote will have (etype1, e_id1) entity
	// Update(type = etype1, id = e_id1, attr1 = val1) on source
	// Now remote contains e_id1, val1 entities and e_id1 will only be
	// deleted by active entities workflow (every 6 hours by default)
	//
	// If this option is used entity should always contain the attribute
	// which will be used to change id before sync. If at any time the entity
	// is updated such that the attribute value changes or if the attribute is
	// removed, it will lead to duplicate entries and inconsistent state on replica.
	// Eg. Update(type = etype1, id = e_id1, attr1 = val1)
	// Source entities = e_id1, Remote entities = val1
	// Update(type = etype1, id= eid_1, attr1 = val2)
	// Source entities = e_id1, Remote entities = val1, val2
	// Update(type = etype1, id= eid_1) full update
	// Source entities = e_id1, Remote entities = val1, val2, eid_1
	// In this scenario only e_id1 captures the latest entity from source
	// and val1, val2 entities will be deleted by active entities workflow.
	// It's client resposibility to maintain the attribute and not change/clear
	// the attribute value during any of the entity updates.
	AttributeUsedForEntityIdForSync *string  `protobuf:"bytes,3,opt,name=attribute_used_for_entity_id_for_sync,json=attributeUsedForEntityIdForSync" json:"attribute_used_for_entity_id_for_sync,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *TypeInfo_ReplicationControl) Reset()         { *m = TypeInfo_ReplicationControl{} }
func (m *TypeInfo_ReplicationControl) String() string { return proto.CompactTextString(m) }
func (*TypeInfo_ReplicationControl) ProtoMessage()    {}
func (*TypeInfo_ReplicationControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{13, 0}
}

func (m *TypeInfo_ReplicationControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeInfo_ReplicationControl.Unmarshal(m, b)
}
func (m *TypeInfo_ReplicationControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeInfo_ReplicationControl.Marshal(b, m, deterministic)
}
func (m *TypeInfo_ReplicationControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeInfo_ReplicationControl.Merge(m, src)
}
func (m *TypeInfo_ReplicationControl) XXX_Size() int {
	return xxx_messageInfo_TypeInfo_ReplicationControl.Size(m)
}
func (m *TypeInfo_ReplicationControl) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeInfo_ReplicationControl.DiscardUnknown(m)
}

var xxx_messageInfo_TypeInfo_ReplicationControl proto.InternalMessageInfo

func (m *TypeInfo_ReplicationControl) GetEnableReplicationFrom() TypeInfo_ClusterFunctions {
	if m != nil && m.EnableReplicationFrom != nil {
		return *m.EnableReplicationFrom
	}
	return TypeInfo_kNDFS
}

func (m *TypeInfo_ReplicationControl) GetEnableReplicationTo() TypeInfo_ClusterFunctions {
	if m != nil && m.EnableReplicationTo != nil {
		return *m.EnableReplicationTo
	}
	return TypeInfo_kNDFS
}

func (m *TypeInfo_ReplicationControl) GetAttributeUsedForEntityIdForSync() string {
	if m != nil && m.AttributeUsedForEntityIdForSync != nil {
		return *m.AttributeUsedForEntityIdForSync
	}
	return ""
}

// Message definition for entity type backup controls.
type TypeInfo_BackupReplicationControl struct {
	// Optional. Whether the entity type should be backed up to the backup
	// replica clusters via IDF-IDF sync.
	IsBackupRequired *bool `protobuf:"varint,1,opt,name=is_backup_required,json=isBackupRequired,def=0" json:"is_backup_required,omitempty"`
	// Optional. Whether the entity type should be restored up to the new
	// deployement during the restore workflow.
	IsRestoreRequired    *bool    `protobuf:"varint,2,opt,name=is_restore_required,json=isRestoreRequired,def=0" json:"is_restore_required,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypeInfo_BackupReplicationControl) Reset()         { *m = TypeInfo_BackupReplicationControl{} }
func (m *TypeInfo_BackupReplicationControl) String() string { return proto.CompactTextString(m) }
func (*TypeInfo_BackupReplicationControl) ProtoMessage()    {}
func (*TypeInfo_BackupReplicationControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{13, 1}
}

func (m *TypeInfo_BackupReplicationControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeInfo_BackupReplicationControl.Unmarshal(m, b)
}
func (m *TypeInfo_BackupReplicationControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeInfo_BackupReplicationControl.Marshal(b, m, deterministic)
}
func (m *TypeInfo_BackupReplicationControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeInfo_BackupReplicationControl.Merge(m, src)
}
func (m *TypeInfo_BackupReplicationControl) XXX_Size() int {
	return xxx_messageInfo_TypeInfo_BackupReplicationControl.Size(m)
}
func (m *TypeInfo_BackupReplicationControl) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeInfo_BackupReplicationControl.DiscardUnknown(m)
}

var xxx_messageInfo_TypeInfo_BackupReplicationControl proto.InternalMessageInfo

const Default_TypeInfo_BackupReplicationControl_IsBackupRequired bool = false
const Default_TypeInfo_BackupReplicationControl_IsRestoreRequired bool = false

func (m *TypeInfo_BackupReplicationControl) GetIsBackupRequired() bool {
	if m != nil && m.IsBackupRequired != nil {
		return *m.IsBackupRequired
	}
	return Default_TypeInfo_BackupReplicationControl_IsBackupRequired
}

func (m *TypeInfo_BackupReplicationControl) GetIsRestoreRequired() bool {
	if m != nil && m.IsRestoreRequired != nil {
		return *m.IsRestoreRequired
	}
	return Default_TypeInfo_BackupReplicationControl_IsRestoreRequired
}

// This represents a generic entity type. Examples of 'entity_type_name' are
// 'disk','node' and 'cluster'.
//
// 'entity_type_info' contains things pertinent to the entity type like the
// parent list, sharding strategy, etc...
//
// 'metric_list' is the list of metrics registered against the entity.
type EntityType struct {
	// Required. Name of the entity type. Example: node, cluster
	// The names of the entity types should be unique and in
	// lower case as a convention, although it will be used in a
	// case-insensitive manner internally.
	EntityTypeName *string `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Required. Entity Type Info.
	TypeInfo *TypeInfo `protobuf:"bytes,4,opt,name=type_info,json=typeInfo" json:"type_info,omitempty"`
	// Optional. Entity metric types. Will contain metric types only if
	// registered.
	MetricTypeList       []*MetricType `protobuf:"bytes,3,rep,name=metric_type_list,json=metricTypeList" json:"metric_type_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EntityType) Reset()         { *m = EntityType{} }
func (m *EntityType) String() string { return proto.CompactTextString(m) }
func (*EntityType) ProtoMessage()    {}
func (*EntityType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{14}
}

func (m *EntityType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityType.Unmarshal(m, b)
}
func (m *EntityType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityType.Marshal(b, m, deterministic)
}
func (m *EntityType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityType.Merge(m, src)
}
func (m *EntityType) XXX_Size() int {
	return xxx_messageInfo_EntityType.Size(m)
}
func (m *EntityType) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityType.DiscardUnknown(m)
}

var xxx_messageInfo_EntityType proto.InternalMessageInfo

func (m *EntityType) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *EntityType) GetTypeInfo() *TypeInfo {
	if m != nil {
		return m.TypeInfo
	}
	return nil
}

func (m *EntityType) GetMetricTypeList() []*MetricType {
	if m != nil {
		return m.MetricTypeList
	}
	return nil
}

// An array of entity types that can be parsed from a file.
type EntityTypes struct {
	// List of entity types.
	EntityTypeList       []*EntityType `protobuf:"bytes,1,rep,name=entity_type_list,json=entityTypeList" json:"entity_type_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EntityTypes) Reset()         { *m = EntityTypes{} }
func (m *EntityTypes) String() string { return proto.CompactTextString(m) }
func (*EntityTypes) ProtoMessage()    {}
func (*EntityTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{15}
}

func (m *EntityTypes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityTypes.Unmarshal(m, b)
}
func (m *EntityTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityTypes.Marshal(b, m, deterministic)
}
func (m *EntityTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityTypes.Merge(m, src)
}
func (m *EntityTypes) XXX_Size() int {
	return xxx_messageInfo_EntityTypes.Size(m)
}
func (m *EntityTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityTypes.DiscardUnknown(m)
}

var xxx_messageInfo_EntityTypes proto.InternalMessageInfo

func (m *EntityTypes) GetEntityTypeList() []*EntityType {
	if m != nil {
		return m.EntityTypeList
	}
	return nil
}

// List used for updating entity_types.
type EntityTypeInfo struct {
	// Required. Name of the entity type.
	EntityTypeName *string `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Required. Properties of entity type.
	TypeInfo             *TypeInfo `protobuf:"bytes,2,opt,name=type_info,json=typeInfo" json:"type_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EntityTypeInfo) Reset()         { *m = EntityTypeInfo{} }
func (m *EntityTypeInfo) String() string { return proto.CompactTextString(m) }
func (*EntityTypeInfo) ProtoMessage()    {}
func (*EntityTypeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{16}
}

func (m *EntityTypeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityTypeInfo.Unmarshal(m, b)
}
func (m *EntityTypeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityTypeInfo.Marshal(b, m, deterministic)
}
func (m *EntityTypeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityTypeInfo.Merge(m, src)
}
func (m *EntityTypeInfo) XXX_Size() int {
	return xxx_messageInfo_EntityTypeInfo.Size(m)
}
func (m *EntityTypeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityTypeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EntityTypeInfo proto.InternalMessageInfo

func (m *EntityTypeInfo) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *EntityTypeInfo) GetTypeInfo() *TypeInfo {
	if m != nil {
		return m.TypeInfo
	}
	return nil
}

// API used to register a new entity type or to update an existing entity type.
// Changes to an existing entity type take effect only for the new data points
// (i.e., changes are NOT retroactively applied). The new defintion of
// EntityType will completely override the existing EntityType definition,
// implies that it is not additive and the client has to provide the complete
// definition at all times.
type RegisterEntityTypesArg struct {
	// Required.
	EntityTypeInfoList   []*EntityTypeInfo `protobuf:"bytes,1,rep,name=entity_type_info_list,json=entityTypeInfoList" json:"entity_type_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RegisterEntityTypesArg) Reset()         { *m = RegisterEntityTypesArg{} }
func (m *RegisterEntityTypesArg) String() string { return proto.CompactTextString(m) }
func (*RegisterEntityTypesArg) ProtoMessage()    {}
func (*RegisterEntityTypesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{17}
}

func (m *RegisterEntityTypesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterEntityTypesArg.Unmarshal(m, b)
}
func (m *RegisterEntityTypesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterEntityTypesArg.Marshal(b, m, deterministic)
}
func (m *RegisterEntityTypesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterEntityTypesArg.Merge(m, src)
}
func (m *RegisterEntityTypesArg) XXX_Size() int {
	return xxx_messageInfo_RegisterEntityTypesArg.Size(m)
}
func (m *RegisterEntityTypesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterEntityTypesArg.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterEntityTypesArg proto.InternalMessageInfo

func (m *RegisterEntityTypesArg) GetEntityTypeInfoList() []*EntityTypeInfo {
	if m != nil {
		return m.EntityTypeInfoList
	}
	return nil
}

// This is a batch operation, the overall status of the RPC is captured
// in 'rpc_status' field and the status for individual 'entity_type' register
// is captured in 'register_entity_types_rets_elem_list'.
//
// 'rpc_status' is set to...
//    'kNoError' if the entire RPC succeeds
//    'kAppError' & 'app_error' set to 'kPartial' if RPC partly succeeds
//    'kAppError' & 'app_error' set to specific error if entire RPC fails.
//
// When rpc_status is 'kAppError' and 'app_error' is 'kPartial', the client
// has to iterate 'register_entity_types_ret_elem_list' to fetch
// status for each entity type.
type RegisterEntityTypesRet struct {
	// Required. Status for each entity type.
	RegisterEntityTypesRetElemList []*RegisterEntityTypesRet_RetElem `protobuf:"bytes,1,rep,name=register_entity_types_ret_elem_list,json=registerEntityTypesRetElemList" json:"register_entity_types_ret_elem_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RegisterEntityTypesRet) Reset()         { *m = RegisterEntityTypesRet{} }
func (m *RegisterEntityTypesRet) String() string { return proto.CompactTextString(m) }
func (*RegisterEntityTypesRet) ProtoMessage()    {}
func (*RegisterEntityTypesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{18}
}

func (m *RegisterEntityTypesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterEntityTypesRet.Unmarshal(m, b)
}
func (m *RegisterEntityTypesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterEntityTypesRet.Marshal(b, m, deterministic)
}
func (m *RegisterEntityTypesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterEntityTypesRet.Merge(m, src)
}
func (m *RegisterEntityTypesRet) XXX_Size() int {
	return xxx_messageInfo_RegisterEntityTypesRet.Size(m)
}
func (m *RegisterEntityTypesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterEntityTypesRet.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterEntityTypesRet proto.InternalMessageInfo

func (m *RegisterEntityTypesRet) GetRegisterEntityTypesRetElemList() []*RegisterEntityTypesRet_RetElem {
	if m != nil {
		return m.RegisterEntityTypesRetElemList
	}
	return nil
}

func (m *RegisterEntityTypesRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type RegisterEntityTypesRet_RetElem struct {
	// Required. Name of the entity type.
	EntityTypeName *string `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Required. Return status for this particular entity update.
	Status               *InsightsErrorProto `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RegisterEntityTypesRet_RetElem) Reset()         { *m = RegisterEntityTypesRet_RetElem{} }
func (m *RegisterEntityTypesRet_RetElem) String() string { return proto.CompactTextString(m) }
func (*RegisterEntityTypesRet_RetElem) ProtoMessage()    {}
func (*RegisterEntityTypesRet_RetElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{18, 0}
}

func (m *RegisterEntityTypesRet_RetElem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterEntityTypesRet_RetElem.Unmarshal(m, b)
}
func (m *RegisterEntityTypesRet_RetElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterEntityTypesRet_RetElem.Marshal(b, m, deterministic)
}
func (m *RegisterEntityTypesRet_RetElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterEntityTypesRet_RetElem.Merge(m, src)
}
func (m *RegisterEntityTypesRet_RetElem) XXX_Size() int {
	return xxx_messageInfo_RegisterEntityTypesRet_RetElem.Size(m)
}
func (m *RegisterEntityTypesRet_RetElem) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterEntityTypesRet_RetElem.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterEntityTypesRet_RetElem proto.InternalMessageInfo

func (m *RegisterEntityTypesRet_RetElem) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *RegisterEntityTypesRet_RetElem) GetStatus() *InsightsErrorProto {
	if m != nil {
		return m.Status
	}
	return nil
}

// The entity type (if any is specified) for which we are requesting detailed
// info. If 'entity_type_name' is not specified, all entity types are returned.
type GetEntityTypesArg struct {
	// Optional.
	EntityTypeName       *string  `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEntityTypesArg) Reset()         { *m = GetEntityTypesArg{} }
func (m *GetEntityTypesArg) String() string { return proto.CompactTextString(m) }
func (*GetEntityTypesArg) ProtoMessage()    {}
func (*GetEntityTypesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{19}
}

func (m *GetEntityTypesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntityTypesArg.Unmarshal(m, b)
}
func (m *GetEntityTypesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntityTypesArg.Marshal(b, m, deterministic)
}
func (m *GetEntityTypesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntityTypesArg.Merge(m, src)
}
func (m *GetEntityTypesArg) XXX_Size() int {
	return xxx_messageInfo_GetEntityTypesArg.Size(m)
}
func (m *GetEntityTypesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntityTypesArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntityTypesArg proto.InternalMessageInfo

func (m *GetEntityTypesArg) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

// Returns the list of entity types currently known.
type GetEntityTypesRet struct {
	// Optional.
	EntityTypeList []*EntityType `protobuf:"bytes,2,rep,name=entity_type_list,json=entityTypeList" json:"entity_type_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,3,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetEntityTypesRet) Reset()         { *m = GetEntityTypesRet{} }
func (m *GetEntityTypesRet) String() string { return proto.CompactTextString(m) }
func (*GetEntityTypesRet) ProtoMessage()    {}
func (*GetEntityTypesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{20}
}

func (m *GetEntityTypesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntityTypesRet.Unmarshal(m, b)
}
func (m *GetEntityTypesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntityTypesRet.Marshal(b, m, deterministic)
}
func (m *GetEntityTypesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntityTypesRet.Merge(m, src)
}
func (m *GetEntityTypesRet) XXX_Size() int {
	return xxx_messageInfo_GetEntityTypesRet.Size(m)
}
func (m *GetEntityTypesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntityTypesRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntityTypesRet proto.InternalMessageInfo

func (m *GetEntityTypesRet) GetEntityTypeList() []*EntityType {
	if m != nil {
		return m.EntityTypeList
	}
	return nil
}

func (m *GetEntityTypesRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type AttributeData struct {
	// Required.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Optional. Set the value if 'operation' is 'kSET'.
	Value                *DataValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AttributeData) Reset()         { *m = AttributeData{} }
func (m *AttributeData) String() string { return proto.CompactTextString(m) }
func (*AttributeData) ProtoMessage()    {}
func (*AttributeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{21}
}

func (m *AttributeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeData.Unmarshal(m, b)
}
func (m *AttributeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeData.Marshal(b, m, deterministic)
}
func (m *AttributeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeData.Merge(m, src)
}
func (m *AttributeData) XXX_Size() int {
	return xxx_messageInfo_AttributeData.Size(m)
}
func (m *AttributeData) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeData.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeData proto.InternalMessageInfo

func (m *AttributeData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AttributeData) GetValue() *DataValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// NameTimeValuePair models the name and timed value association
// "repeated NameTimeValuePair attrlist = <n>;" could be used to
// model an association map which is forward compatible with
// map<name, TimeValuePair> data type in protobuf 3.0
type NameTimeValuePair struct {
	// Required.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Required.
	TimestampUsecs *uint64 `protobuf:"varint,3,opt,name=timestamp_usecs,json=timestampUsecs" json:"timestamp_usecs,omitempty"`
	// Required.
	Value                *DataValue `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *NameTimeValuePair) Reset()         { *m = NameTimeValuePair{} }
func (m *NameTimeValuePair) String() string { return proto.CompactTextString(m) }
func (*NameTimeValuePair) ProtoMessage()    {}
func (*NameTimeValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{22}
}

func (m *NameTimeValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameTimeValuePair.Unmarshal(m, b)
}
func (m *NameTimeValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameTimeValuePair.Marshal(b, m, deterministic)
}
func (m *NameTimeValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameTimeValuePair.Merge(m, src)
}
func (m *NameTimeValuePair) XXX_Size() int {
	return xxx_messageInfo_NameTimeValuePair.Size(m)
}
func (m *NameTimeValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_NameTimeValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_NameTimeValuePair proto.InternalMessageInfo

func (m *NameTimeValuePair) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NameTimeValuePair) GetTimestampUsecs() uint64 {
	if m != nil && m.TimestampUsecs != nil {
		return *m.TimestampUsecs
	}
	return 0
}

func (m *NameTimeValuePair) GetValue() *DataValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// The EntityGuid uniquely represents any entity. Entities are instances of
// EntityType's. For example, (entity type = disk, entity id = d1) is an entity
// of the entity type 'disk'.
type EntityGuid struct {
	// Required.
	EntityTypeName *string `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Optional. If not specified, the entity guid represents a list of entities
	// all of which have the entity type specified by 'entity_type_name'.
	EntityId *string `protobuf:"bytes,2,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	// Optional. The tenant to which this EntityGuid belongs. In update / delete,
	// tenant ID must be specified correctly. In Get, if it is unset, that is to
	// get the entity ID belonging to any tenant; if it is set and empty, that is
	// to get the entity ID in global. Note that tenant_id is not used for
	// identity purpose since entity_id is already unique.
	TenantId             *string  `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityGuid) Reset()         { *m = EntityGuid{} }
func (m *EntityGuid) String() string { return proto.CompactTextString(m) }
func (*EntityGuid) ProtoMessage()    {}
func (*EntityGuid) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{23}
}

func (m *EntityGuid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityGuid.Unmarshal(m, b)
}
func (m *EntityGuid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityGuid.Marshal(b, m, deterministic)
}
func (m *EntityGuid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityGuid.Merge(m, src)
}
func (m *EntityGuid) XXX_Size() int {
	return xxx_messageInfo_EntityGuid.Size(m)
}
func (m *EntityGuid) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityGuid.DiscardUnknown(m)
}

var xxx_messageInfo_EntityGuid proto.InternalMessageInfo

func (m *EntityGuid) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *EntityGuid) GetEntityId() string {
	if m != nil && m.EntityId != nil {
		return *m.EntityId
	}
	return ""
}

func (m *EntityGuid) GetTenantId() string {
	if m != nil && m.TenantId != nil {
		return *m.TenantId
	}
	return ""
}

// ShardGuid will uniquely identify a shard.
//
// Shard can be a token range based shard or an anchor entity shard.
//
// There could be multiple strategies for token range sharding... slot the
// entire token range into 1024/2048 buckets and assign a node to each of the
// buckets or simply follow Cassandra token range assigment. Choosing either
// of the strategies does not change how a shard needs to be represented.
// For token range shards, the shard_guid will be kTOKEN_RANGE.<start_token>
// For entity type shards, the shard_guid will be kENTITY_TYPE.<entity_guid>
type ShardGuid struct {
	// Required. Shard can be a token range based shard or entity based shard.
	ShardType *EntityTypeShard_ShardType `protobuf:"varint,1,opt,name=shard_type,json=shardType,enum=nutanix.insights.interface.EntityTypeShard_ShardType" json:"shard_type,omitempty"`
	// Optional. Expected to be set for entity based shards. This field will be
	// guid of anchor entity.
	EntityGuid *EntityGuid `protobuf:"bytes,5,opt,name=entity_guid,json=entityGuid" json:"entity_guid,omitempty"`
	// Optional. Expected to be set for token range shards. This field is set
	// to the value of start token.
	StartToken           *string  `protobuf:"bytes,6,opt,name=start_token,json=startToken" json:"start_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardGuid) Reset()         { *m = ShardGuid{} }
func (m *ShardGuid) String() string { return proto.CompactTextString(m) }
func (*ShardGuid) ProtoMessage()    {}
func (*ShardGuid) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{24}
}

func (m *ShardGuid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardGuid.Unmarshal(m, b)
}
func (m *ShardGuid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardGuid.Marshal(b, m, deterministic)
}
func (m *ShardGuid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardGuid.Merge(m, src)
}
func (m *ShardGuid) XXX_Size() int {
	return xxx_messageInfo_ShardGuid.Size(m)
}
func (m *ShardGuid) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardGuid.DiscardUnknown(m)
}

var xxx_messageInfo_ShardGuid proto.InternalMessageInfo

func (m *ShardGuid) GetShardType() EntityTypeShard_ShardType {
	if m != nil && m.ShardType != nil {
		return *m.ShardType
	}
	return EntityTypeShard_kTokenRange
}

func (m *ShardGuid) GetEntityGuid() *EntityGuid {
	if m != nil {
		return m.EntityGuid
	}
	return nil
}

func (m *ShardGuid) GetStartToken() string {
	if m != nil && m.StartToken != nil {
		return *m.StartToken
	}
	return ""
}

// Encapsulates an entity with a list of metric data.
type EntityWithMetric struct {
	// Required.
	EntityGuid *EntityGuid `protobuf:"bytes,1,opt,name=entity_guid,json=entityGuid" json:"entity_guid,omitempty"`
	// Optional.
	MetricDataList       []*MetricData `protobuf:"bytes,3,rep,name=metric_data_list,json=metricDataList" json:"metric_data_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EntityWithMetric) Reset()         { *m = EntityWithMetric{} }
func (m *EntityWithMetric) String() string { return proto.CompactTextString(m) }
func (*EntityWithMetric) ProtoMessage()    {}
func (*EntityWithMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{25}
}

func (m *EntityWithMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityWithMetric.Unmarshal(m, b)
}
func (m *EntityWithMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityWithMetric.Marshal(b, m, deterministic)
}
func (m *EntityWithMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityWithMetric.Merge(m, src)
}
func (m *EntityWithMetric) XXX_Size() int {
	return xxx_messageInfo_EntityWithMetric.Size(m)
}
func (m *EntityWithMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityWithMetric.DiscardUnknown(m)
}

var xxx_messageInfo_EntityWithMetric proto.InternalMessageInfo

func (m *EntityWithMetric) GetEntityGuid() *EntityGuid {
	if m != nil {
		return m.EntityGuid
	}
	return nil
}

func (m *EntityWithMetric) GetMetricDataList() []*MetricData {
	if m != nil {
		return m.MetricDataList
	}
	return nil
}

type Entity struct {
	// Required.
	EntityGuid *EntityGuid `protobuf:"bytes,1,opt,name=entity_guid,json=entityGuid" json:"entity_guid,omitempty"`
	// Required. Created timestamp in usecs.
	// For CAS entities, it is required or an error will be returned if missing.
	// For non-CAS, it is default to 'modified_time_usecs' in UpdateEntityArg
	// if it is not provided.
	CreatedTimestampUsecs *uint64 `protobuf:"varint,2,opt,name=created_timestamp_usecs,json=createdTimestampUsecs" json:"created_timestamp_usecs,omitempty"`
	// Required. Last modified timestamp in usecs.
	// For new entities, it is the creation time if created_timestamp_usecs is
	// not provided.
	ModifiedTimestampUsecs *uint64 `protobuf:"varint,3,opt,name=modified_timestamp_usecs,json=modifiedTimestampUsecs" json:"modified_timestamp_usecs,omitempty"`
	// Optional. Deleted timestamp in usecs.
	DeletedTimestampUsecs *uint64 `protobuf:"varint,4,opt,name=deleted_timestamp_usecs,json=deletedTimestampUsecs" json:"deleted_timestamp_usecs,omitempty"`
	// Optional. Only if it's a CAS entity.
	// This indicates the current CAS value.
	CasValue *uint64 `protobuf:"varint,5,opt,name=cas_value,json=casValue" json:"cas_value,omitempty"`
	// Required. Complete list or partial list of attributes, values and the
	// timestamps.
	AttributeDataMap []*NameTimeValuePair `protobuf:"bytes,7,rep,name=attribute_data_map,json=attributeDataMap" json:"attribute_data_map,omitempty"`
	// Optional. Master cluster UUID (set for replicated entities).
	MasterClusterUuid *string `protobuf:"bytes,8,opt,name=master_cluster_uuid,json=masterClusterUuid" json:"master_cluster_uuid,omitempty"`
	// Optional.  The timestamp of server modification time (set by database).
	DbModifiedTimestampUsecs *uint64 `protobuf:"varint,9,opt,name=db_modified_timestamp_usecs,json=dbModifiedTimestampUsecs" json:"db_modified_timestamp_usecs,omitempty"`
	// Optional. If entity was detached, this stores the target cluster uuid.
	MovedToClusterUuid *string `protobuf:"bytes,10,opt,name=moved_to_cluster_uuid,json=movedToClusterUuid" json:"moved_to_cluster_uuid,omitempty"`
	// Optional. Incarnation should be incremented every time an entity is moved
	// from one cluster to another.
	// We also support the concept of special Incarnation id, which is
	// ULLONGMAX (2^64 - 1), for supporting the force sync of entities migrated
	// to another cluster which is not aware of the previous incarnation id
	// value of that particular entity.
	// Valid Incarnation id transitions are:-
	// 1. Newly provided incarnation ID is strictly greater than previous
	//    incarnation id.
	// 2. If the previous incarnation ID was equal to
	//    'InsightsInterface::kForceAttachIncarnationID' then we allow any
	//    normal incarnation id to override it.
	// 3. If the newly provided incarnation id is
	//    'InsightsInterface::kForceAttachIncarnationID' then it can override
	//    the previous incarnation id.
	// For clients to use this speical incarnation id value, we have added
	// constants in all the interface librairies that IDF provides (Cpp, Python,
	// GoLang and Java) having the similar name 'kForceAttach_Incarnation_ID'.
	IncarnationId *uint64 `protobuf:"varint,11,opt,name=incarnation_id,json=incarnationId" json:"incarnation_id,omitempty"`
	// This concept is applicable to other types of data like Metrics, Alerts,
	// Events, and Logs.
	//
	// Repeated list of entity namespaces.
	EntityNamespaceList []*EntityNamespace `protobuf:"bytes,12,rep,name=entity_namespace_list,json=entityNamespaceList" json:"entity_namespace_list,omitempty"`
	// Optional. This field must be set if the entity needs to be deleted
	// automatically afterwards. If set, this entity will get deleted after
	// time specified by 'expiration_timestamp_usecs', otherwise entity
	// will not be auto-deleted.
	ExpirationTimestampUsecs *uint64 `protobuf:"varint,13,opt,name=expiration_timestamp_usecs,json=expirationTimestampUsecs" json:"expiration_timestamp_usecs,omitempty"`
	// Repeated field of SyncBarrierInfo for each shard.
	SyncBarrierInfo []*SyncBarrierInfo `protobuf:"bytes,14,rep,name=sync_barrier_info,json=syncBarrierInfo" json:"sync_barrier_info,omitempty"`
	// Optional. Timestamp corresponding to the first replication of the entity
	// to the replica.
	// This field is only applicable for replicated entities and only populated
	// on replica. Currently, using node's local wall time for populating this
	// metadata. If nodes are out of NTP time-sync then this metadata field might
	// not be able to tell the exact order in which two entities are replicated.
	FirstSyncedTimestampUsecs *uint64 `protobuf:"varint,15,opt,name=first_synced_timestamp_usecs,json=firstSyncedTimestampUsecs" json:"first_synced_timestamp_usecs,omitempty"`
	// Optional. Timestamp corresponding to the most recent replication of the
	// entity to the replica.
	// This field is only applicable for replicated entities and only populated
	// on replica. Currently, using node's local wall time for populating this
	// metadata. If nodes are out of NTP time-sync then this metadata field might
	// not be able to tell the exact order in which two entities are replicated.
	LastSyncedTimestampUsecs *uint64 `protobuf:"varint,16,opt,name=last_synced_timestamp_usecs,json=lastSyncedTimestampUsecs" json:"last_synced_timestamp_usecs,omitempty"`
	// Optional. Indicates whether to sync this entity or not. If set, the entity
	// is not synced, irrespective of the 'suppress_replication' flag of the
	// entity type. If not set, we use the 'suppress_replication' and
	// 'replication_control_list' fields of the corresponding entity type to
	// decide whether to sync the entity or not.
	SuppressReplication *bool `protobuf:"varint,17,opt,name=suppress_replication,json=suppressReplication,def=0" json:"suppress_replication,omitempty"`
	// Optional. Flag indicating whether the entity was deleted on the replica or
	// not.
	// This field is only applicable for synced entities on the replica and is set
	// when this replicated entity is deleted from the replica. If this field is
	// set then 'deleted_timestamp_usecs' indicates the time at which the entity
	// was deleted from replica. The entities with this flag set would not be
	// purged from replica unless they are deleted at source and that deletion is
	// synced to replica. Hence, it is relevant for the ease of debugging.
	IsDeletedOnReplica   *bool              `protobuf:"varint,18,opt,name=is_deleted_on_replica,json=isDeletedOnReplica,def=0" json:"is_deleted_on_replica,omitempty"`
	BackupInfo           *Entity_BackupInfo `protobuf:"bytes,19,opt,name=backup_info,json=backupInfo" json:"backup_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{26}
}

func (m *Entity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entity.Unmarshal(m, b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return xxx_messageInfo_Entity.Size(m)
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

const Default_Entity_SuppressReplication bool = false
const Default_Entity_IsDeletedOnReplica bool = false

func (m *Entity) GetEntityGuid() *EntityGuid {
	if m != nil {
		return m.EntityGuid
	}
	return nil
}

func (m *Entity) GetCreatedTimestampUsecs() uint64 {
	if m != nil && m.CreatedTimestampUsecs != nil {
		return *m.CreatedTimestampUsecs
	}
	return 0
}

func (m *Entity) GetModifiedTimestampUsecs() uint64 {
	if m != nil && m.ModifiedTimestampUsecs != nil {
		return *m.ModifiedTimestampUsecs
	}
	return 0
}

func (m *Entity) GetDeletedTimestampUsecs() uint64 {
	if m != nil && m.DeletedTimestampUsecs != nil {
		return *m.DeletedTimestampUsecs
	}
	return 0
}

func (m *Entity) GetCasValue() uint64 {
	if m != nil && m.CasValue != nil {
		return *m.CasValue
	}
	return 0
}

func (m *Entity) GetAttributeDataMap() []*NameTimeValuePair {
	if m != nil {
		return m.AttributeDataMap
	}
	return nil
}

func (m *Entity) GetMasterClusterUuid() string {
	if m != nil && m.MasterClusterUuid != nil {
		return *m.MasterClusterUuid
	}
	return ""
}

func (m *Entity) GetDbModifiedTimestampUsecs() uint64 {
	if m != nil && m.DbModifiedTimestampUsecs != nil {
		return *m.DbModifiedTimestampUsecs
	}
	return 0
}

func (m *Entity) GetMovedToClusterUuid() string {
	if m != nil && m.MovedToClusterUuid != nil {
		return *m.MovedToClusterUuid
	}
	return ""
}

func (m *Entity) GetIncarnationId() uint64 {
	if m != nil && m.IncarnationId != nil {
		return *m.IncarnationId
	}
	return 0
}

func (m *Entity) GetEntityNamespaceList() []*EntityNamespace {
	if m != nil {
		return m.EntityNamespaceList
	}
	return nil
}

func (m *Entity) GetExpirationTimestampUsecs() uint64 {
	if m != nil && m.ExpirationTimestampUsecs != nil {
		return *m.ExpirationTimestampUsecs
	}
	return 0
}

func (m *Entity) GetSyncBarrierInfo() []*SyncBarrierInfo {
	if m != nil {
		return m.SyncBarrierInfo
	}
	return nil
}

func (m *Entity) GetFirstSyncedTimestampUsecs() uint64 {
	if m != nil && m.FirstSyncedTimestampUsecs != nil {
		return *m.FirstSyncedTimestampUsecs
	}
	return 0
}

func (m *Entity) GetLastSyncedTimestampUsecs() uint64 {
	if m != nil && m.LastSyncedTimestampUsecs != nil {
		return *m.LastSyncedTimestampUsecs
	}
	return 0
}

func (m *Entity) GetSuppressReplication() bool {
	if m != nil && m.SuppressReplication != nil {
		return *m.SuppressReplication
	}
	return Default_Entity_SuppressReplication
}

func (m *Entity) GetIsDeletedOnReplica() bool {
	if m != nil && m.IsDeletedOnReplica != nil {
		return *m.IsDeletedOnReplica
	}
	return Default_Entity_IsDeletedOnReplica
}

func (m *Entity) GetBackupInfo() *Entity_BackupInfo {
	if m != nil {
		return m.BackupInfo
	}
	return nil
}

// Holds information about the backed up entity if the entity is a backed up
// entity.
type Entity_BackupInfo struct {
	// Optional. Used only for the backup workflow. Descritpion mentioned in
	// enum.
	BackupStatus *Entity_BackupStatus `protobuf:"varint,1,opt,name=backup_status,json=backupStatus,enum=nutanix.insights.interface.Entity_BackupStatus,def=0" json:"backup_status,omitempty"`
	// Optional. Original entity type name. When an entity is backed up,
	// its entity type name is modified. This stores the actual entity type
	// name.
	EntityTypeName *string `protobuf:"bytes,2,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Optional. The original DB modified timestamp of the restored entities as
	// set by the original source. This is just for debugging purposes.
	SourceDbModifiedTimestampUsecs *uint64 `protobuf:"varint,3,opt,name=source_db_modified_timestamp_usecs,json=sourceDbModifiedTimestampUsecs" json:"source_db_modified_timestamp_usecs,omitempty"`
	// Optional. The db_modified_timestamp as set by the replica when storing
	// the backup copy. We rely on this timestamp during the restore process.
	// This value is set for all backup entities and when they get restored,
	// they carry this value with them.
	BackupDbModifiedTimestampUsecs *uint64  `protobuf:"varint,4,opt,name=backup_db_modified_timestamp_usecs,json=backupDbModifiedTimestampUsecs" json:"backup_db_modified_timestamp_usecs,omitempty"`
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *Entity_BackupInfo) Reset()         { *m = Entity_BackupInfo{} }
func (m *Entity_BackupInfo) String() string { return proto.CompactTextString(m) }
func (*Entity_BackupInfo) ProtoMessage()    {}
func (*Entity_BackupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{26, 0}
}

func (m *Entity_BackupInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entity_BackupInfo.Unmarshal(m, b)
}
func (m *Entity_BackupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entity_BackupInfo.Marshal(b, m, deterministic)
}
func (m *Entity_BackupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity_BackupInfo.Merge(m, src)
}
func (m *Entity_BackupInfo) XXX_Size() int {
	return xxx_messageInfo_Entity_BackupInfo.Size(m)
}
func (m *Entity_BackupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity_BackupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Entity_BackupInfo proto.InternalMessageInfo

const Default_Entity_BackupInfo_BackupStatus Entity_BackupStatus = Entity_kRegular

func (m *Entity_BackupInfo) GetBackupStatus() Entity_BackupStatus {
	if m != nil && m.BackupStatus != nil {
		return *m.BackupStatus
	}
	return Default_Entity_BackupInfo_BackupStatus
}

func (m *Entity_BackupInfo) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *Entity_BackupInfo) GetSourceDbModifiedTimestampUsecs() uint64 {
	if m != nil && m.SourceDbModifiedTimestampUsecs != nil {
		return *m.SourceDbModifiedTimestampUsecs
	}
	return 0
}

func (m *Entity_BackupInfo) GetBackupDbModifiedTimestampUsecs() uint64 {
	if m != nil && m.BackupDbModifiedTimestampUsecs != nil {
		return *m.BackupDbModifiedTimestampUsecs
	}
	return 0
}

type EntityNamespace struct {
	// Required. Name of the namespace. Within an entity, namespace names have to
	// be unique. The name has to be different than '_default_'. '_default_'
	// is the namespace name reserved to refer to the core.
	Namespace *string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	// Required. Created timestamp in usecs. This is set when the namespace is
	// created for the first time within the entity.
	//
	// For CAS namespaces, it is required. An error will be returned if missing.
	// For non-CAS, it defaults to 'modified_time_usecs' in UpdateEntityArg
	// if not provided.
	CreatedTimestampUsecs *uint64 `protobuf:"varint,2,opt,name=created_timestamp_usecs,json=createdTimestampUsecs" json:"created_timestamp_usecs,omitempty"`
	// Required. Last modified timestamp in usecs.
	ModifiedTimestampUsecs *uint64 `protobuf:"varint,3,opt,name=modified_timestamp_usecs,json=modifiedTimestampUsecs" json:"modified_timestamp_usecs,omitempty"`
	// Optional. Deleted timestamp in usecs.
	DeletedTimestampUsecs *uint64 `protobuf:"varint,4,opt,name=deleted_timestamp_usecs,json=deletedTimestampUsecs" json:"deleted_timestamp_usecs,omitempty"`
	// Optional. Only if it's a CAS entity. This indicates the current CAS value.
	CasValue *uint64 `protobuf:"varint,5,opt,name=cas_value,json=casValue" json:"cas_value,omitempty"`
	// Required. Complete list or partial list of attributes, values and the
	// timestamps.
	AttributeDataMap     []*NameTimeValuePair `protobuf:"bytes,6,rep,name=attribute_data_map,json=attributeDataMap" json:"attribute_data_map,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EntityNamespace) Reset()         { *m = EntityNamespace{} }
func (m *EntityNamespace) String() string { return proto.CompactTextString(m) }
func (*EntityNamespace) ProtoMessage()    {}
func (*EntityNamespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{27}
}

func (m *EntityNamespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityNamespace.Unmarshal(m, b)
}
func (m *EntityNamespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityNamespace.Marshal(b, m, deterministic)
}
func (m *EntityNamespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityNamespace.Merge(m, src)
}
func (m *EntityNamespace) XXX_Size() int {
	return xxx_messageInfo_EntityNamespace.Size(m)
}
func (m *EntityNamespace) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityNamespace.DiscardUnknown(m)
}

var xxx_messageInfo_EntityNamespace proto.InternalMessageInfo

func (m *EntityNamespace) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *EntityNamespace) GetCreatedTimestampUsecs() uint64 {
	if m != nil && m.CreatedTimestampUsecs != nil {
		return *m.CreatedTimestampUsecs
	}
	return 0
}

func (m *EntityNamespace) GetModifiedTimestampUsecs() uint64 {
	if m != nil && m.ModifiedTimestampUsecs != nil {
		return *m.ModifiedTimestampUsecs
	}
	return 0
}

func (m *EntityNamespace) GetDeletedTimestampUsecs() uint64 {
	if m != nil && m.DeletedTimestampUsecs != nil {
		return *m.DeletedTimestampUsecs
	}
	return 0
}

func (m *EntityNamespace) GetCasValue() uint64 {
	if m != nil && m.CasValue != nil {
		return *m.CasValue
	}
	return 0
}

func (m *EntityNamespace) GetAttributeDataMap() []*NameTimeValuePair {
	if m != nil {
		return m.AttributeDataMap
	}
	return nil
}

type SyncBarrierInfo struct {
	// Optional. If SyncBarrierInfo is used as a repeated field message and
	// shard_guid is not set, then it is assumed that the shard id is equal to
	// the index of the repeated field.
	ShardGuid *ShardGuid `protobuf:"bytes,1,opt,name=shard_guid,json=shardGuid" json:"shard_guid,omitempty"`
	// Required.
	ShardTimestamp       *uint64  `protobuf:"varint,2,opt,name=shard_timestamp,json=shardTimestamp" json:"shard_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncBarrierInfo) Reset()         { *m = SyncBarrierInfo{} }
func (m *SyncBarrierInfo) String() string { return proto.CompactTextString(m) }
func (*SyncBarrierInfo) ProtoMessage()    {}
func (*SyncBarrierInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{28}
}

func (m *SyncBarrierInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncBarrierInfo.Unmarshal(m, b)
}
func (m *SyncBarrierInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncBarrierInfo.Marshal(b, m, deterministic)
}
func (m *SyncBarrierInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncBarrierInfo.Merge(m, src)
}
func (m *SyncBarrierInfo) XXX_Size() int {
	return xxx_messageInfo_SyncBarrierInfo.Size(m)
}
func (m *SyncBarrierInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncBarrierInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SyncBarrierInfo proto.InternalMessageInfo

func (m *SyncBarrierInfo) GetShardGuid() *ShardGuid {
	if m != nil {
		return m.ShardGuid
	}
	return nil
}

func (m *SyncBarrierInfo) GetShardTimestamp() uint64 {
	if m != nil && m.ShardTimestamp != nil {
		return *m.ShardTimestamp
	}
	return 0
}

type EntityList struct {
	// Required.
	EntityList []*Entity `protobuf:"bytes,1,rep,name=entity_list,json=entityList" json:"entity_list,omitempty"`
	// Optional. The algorithm (snappy, zlib, or bzip2) used when snapshot
	// compression is required.
	CompressionType *string `protobuf:"bytes,2,opt,name=compression_type,json=compressionType,def=" json:"compression_type,omitempty"`
	// Optional. To store the compressed version of the serialized proto.
	CompressedSerializedProto []byte   `protobuf:"bytes,3,opt,name=compressed_serialized_proto,json=compressedSerializedProto" json:"compressed_serialized_proto,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *EntityList) Reset()         { *m = EntityList{} }
func (m *EntityList) String() string { return proto.CompactTextString(m) }
func (*EntityList) ProtoMessage()    {}
func (*EntityList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{29}
}

func (m *EntityList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityList.Unmarshal(m, b)
}
func (m *EntityList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityList.Marshal(b, m, deterministic)
}
func (m *EntityList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityList.Merge(m, src)
}
func (m *EntityList) XXX_Size() int {
	return xxx_messageInfo_EntityList.Size(m)
}
func (m *EntityList) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityList.DiscardUnknown(m)
}

var xxx_messageInfo_EntityList proto.InternalMessageInfo

func (m *EntityList) GetEntityList() []*Entity {
	if m != nil {
		return m.EntityList
	}
	return nil
}

func (m *EntityList) GetCompressionType() string {
	if m != nil && m.CompressionType != nil {
		return *m.CompressionType
	}
	return ""
}

func (m *EntityList) GetCompressedSerializedProto() []byte {
	if m != nil {
		return m.CompressedSerializedProto
	}
	return nil
}

type AttributeDataArg struct {
	// Optional. Set the value to kCLEAR to clear the value of an attribute.
	Operation *AttributeDataArg_AttributeOperation `protobuf:"varint,1,opt,name=operation,enum=nutanix.insights.interface.AttributeDataArg_AttributeOperation,def=0" json:"operation,omitempty"`
	// Required.
	AttributeData        *AttributeData `protobuf:"bytes,2,opt,name=attribute_data,json=attributeData" json:"attribute_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AttributeDataArg) Reset()         { *m = AttributeDataArg{} }
func (m *AttributeDataArg) String() string { return proto.CompactTextString(m) }
func (*AttributeDataArg) ProtoMessage()    {}
func (*AttributeDataArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{30}
}

func (m *AttributeDataArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeDataArg.Unmarshal(m, b)
}
func (m *AttributeDataArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeDataArg.Marshal(b, m, deterministic)
}
func (m *AttributeDataArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeDataArg.Merge(m, src)
}
func (m *AttributeDataArg) XXX_Size() int {
	return xxx_messageInfo_AttributeDataArg.Size(m)
}
func (m *AttributeDataArg) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeDataArg.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeDataArg proto.InternalMessageInfo

const Default_AttributeDataArg_Operation AttributeDataArg_AttributeOperation = AttributeDataArg_kSET

func (m *AttributeDataArg) GetOperation() AttributeDataArg_AttributeOperation {
	if m != nil && m.Operation != nil {
		return *m.Operation
	}
	return Default_AttributeDataArg_Operation
}

func (m *AttributeDataArg) GetAttributeData() *AttributeData {
	if m != nil {
		return m.AttributeData
	}
	return nil
}

// Define the operation performed on an Arithmos entity attribute.
// 1. kDelete: not save this attribute in Insights.
// 2. kRename: change this attribute name into a new name used by Insights.
// it is actually a name map with both arithmos and insights attribute names
// given. For those Arithmos attribute not mentioned, save them into
// Insights without any change.
// 3. kEntityId: use the attributes in entity_id_attribute_list for deducing
// entity id.
// 4. kConvertToMetric: Provides a way convert certain frequently changing
// attributes to metrics.
// 5. kConvertToList: Provides a way to convert repeated attribute values to
// a list.
// 6. kCopy: Provides a way to copy attribute values.
// 7. kCopyToMetric: Instead of converting the attribute to metric, this op
// new metric, specified by 'insights_attribute_name' - if this is not
// specified, proxy would error out as an attribute and metric can't have the
// same name. This op is useful if we want to make use of the attribute value
// in time range queries where persisting the attribute as time series won't
// necessarily work (for instance when the attribute value doesn't change).
type AttributeOperation struct {
	// Required
	OpOnAttribute *AttributeOperation_Op `protobuf:"varint,1,opt,name=op_on_attribute,json=opOnAttribute,enum=nutanix.insights.interface.AttributeOperation_Op,def=0" json:"op_on_attribute,omitempty"`
	// Required. name of arithmos attribute to be operated on
	ArithmosAttributeName *string `protobuf:"bytes,2,opt,name=arithmos_attribute_name,json=arithmosAttributeName" json:"arithmos_attribute_name,omitempty"`
	// Optional. new attribute name in Insights, required only when the operation
	// is kRename, kCopy or kCopyToMetric.
	InsightsAttributeName *string `protobuf:"bytes,3,opt,name=insights_attribute_name,json=insightsAttributeName" json:"insights_attribute_name,omitempty"`
	// Optional. Used only if the operation is kEntityId. Specifies the list
	// of attributes that will be used as the insights entity_id, with a notion
	// of precedence. Proxy will walk the list till it finds the attribute in
	// the list of attributes received from arithmos.
	EntityIdAttributeList []string `protobuf:"bytes,4,rep,name=entity_id_attribute_list,json=entityIdAttributeList" json:"entity_id_attribute_list,omitempty"`
	// Optional. If specified, we will perform the 'op_on_attribute' only if
	// the boolean expression evaluates to true. Currently, we support only
	// attributes in the boolean expression (i.e: no metrics/stats). We don't
	// support 'kDelete' and 'kConvertToMetric' operations with boolean
	// expression.
	PerformOpOnCondition *BooleanExpression `protobuf:"bytes,5,opt,name=perform_op_on_condition,json=performOpOnCondition" json:"perform_op_on_condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AttributeOperation) Reset()         { *m = AttributeOperation{} }
func (m *AttributeOperation) String() string { return proto.CompactTextString(m) }
func (*AttributeOperation) ProtoMessage()    {}
func (*AttributeOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{31}
}

func (m *AttributeOperation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeOperation.Unmarshal(m, b)
}
func (m *AttributeOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeOperation.Marshal(b, m, deterministic)
}
func (m *AttributeOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeOperation.Merge(m, src)
}
func (m *AttributeOperation) XXX_Size() int {
	return xxx_messageInfo_AttributeOperation.Size(m)
}
func (m *AttributeOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeOperation.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeOperation proto.InternalMessageInfo

const Default_AttributeOperation_OpOnAttribute AttributeOperation_Op = AttributeOperation_kRename

func (m *AttributeOperation) GetOpOnAttribute() AttributeOperation_Op {
	if m != nil && m.OpOnAttribute != nil {
		return *m.OpOnAttribute
	}
	return Default_AttributeOperation_OpOnAttribute
}

func (m *AttributeOperation) GetArithmosAttributeName() string {
	if m != nil && m.ArithmosAttributeName != nil {
		return *m.ArithmosAttributeName
	}
	return ""
}

func (m *AttributeOperation) GetInsightsAttributeName() string {
	if m != nil && m.InsightsAttributeName != nil {
		return *m.InsightsAttributeName
	}
	return ""
}

func (m *AttributeOperation) GetEntityIdAttributeList() []string {
	if m != nil {
		return m.EntityIdAttributeList
	}
	return nil
}

func (m *AttributeOperation) GetPerformOpOnCondition() *BooleanExpression {
	if m != nil {
		return m.PerformOpOnCondition
	}
	return nil
}

// Define operations on a particular entity type.
type EntityOperations struct {
	// Required. Entity type
	EntityTypeName *string `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Optional. insights entity type name.
	InsightsEntityTypeName *string `protobuf:"bytes,2,opt,name=insights_entity_type_name,json=insightsEntityTypeName" json:"insights_entity_type_name,omitempty"`
	// Optional. List of attributes and associated operations on them.
	AttributeList []*AttributeOperation `protobuf:"bytes,3,rep,name=attribute_list,json=attributeList" json:"attribute_list,omitempty"`
	// Optional. Flag to indicate if entity updates have to be suppressed
	// or not.
	SuppressEntityUpdates *bool `protobuf:"varint,4,opt,name=suppress_entity_updates,json=suppressEntityUpdates,def=0" json:"suppress_entity_updates,omitempty"`
	// Optional. List of version numbers for which the entity operations will
	// be used. The version numbers will be represented by a reg-ex string.
	// For ex: if we need to support the config for say 4.5, 4.5.1, 4.5.2 etc,
	// the reg-ex string will be: "4\.5(\.[0-9]+)?".
	// If the version list is not specified, it is assumed that the entity
	// operations is common across all versions.
	VersionList []string `protobuf:"bytes,5,rep,name=version_list,json=versionList" json:"version_list,omitempty"`
	// Required. Each entity type's golang method generated by protobuf to get
	// list of entities from Arithmos AnyEntity proto.
	ArithmosGolangProtobufMethodName *string  `protobuf:"bytes,6,opt,name=arithmos_golang_protobuf_method_name,json=arithmosGolangProtobufMethodName,def=GetUserDefinedEntity" json:"arithmos_golang_protobuf_method_name,omitempty"`
	XXX_NoUnkeyedLiteral             struct{} `json:"-"`
	XXX_unrecognized                 []byte   `json:"-"`
	XXX_sizecache                    int32    `json:"-"`
}

func (m *EntityOperations) Reset()         { *m = EntityOperations{} }
func (m *EntityOperations) String() string { return proto.CompactTextString(m) }
func (*EntityOperations) ProtoMessage()    {}
func (*EntityOperations) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{32}
}

func (m *EntityOperations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityOperations.Unmarshal(m, b)
}
func (m *EntityOperations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityOperations.Marshal(b, m, deterministic)
}
func (m *EntityOperations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityOperations.Merge(m, src)
}
func (m *EntityOperations) XXX_Size() int {
	return xxx_messageInfo_EntityOperations.Size(m)
}
func (m *EntityOperations) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityOperations.DiscardUnknown(m)
}

var xxx_messageInfo_EntityOperations proto.InternalMessageInfo

const Default_EntityOperations_SuppressEntityUpdates bool = false
const Default_EntityOperations_ArithmosGolangProtobufMethodName string = "GetUserDefinedEntity"

func (m *EntityOperations) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *EntityOperations) GetInsightsEntityTypeName() string {
	if m != nil && m.InsightsEntityTypeName != nil {
		return *m.InsightsEntityTypeName
	}
	return ""
}

func (m *EntityOperations) GetAttributeList() []*AttributeOperation {
	if m != nil {
		return m.AttributeList
	}
	return nil
}

func (m *EntityOperations) GetSuppressEntityUpdates() bool {
	if m != nil && m.SuppressEntityUpdates != nil {
		return *m.SuppressEntityUpdates
	}
	return Default_EntityOperations_SuppressEntityUpdates
}

func (m *EntityOperations) GetVersionList() []string {
	if m != nil {
		return m.VersionList
	}
	return nil
}

func (m *EntityOperations) GetArithmosGolangProtobufMethodName() string {
	if m != nil && m.ArithmosGolangProtobufMethodName != nil {
		return *m.ArithmosGolangProtobufMethodName
	}
	return Default_EntityOperations_ArithmosGolangProtobufMethodName
}

// Define list of entity type and their associated operations.
type EntityOperationsList struct {
	// Required
	EntityOperationsList []*EntityOperations `protobuf:"bytes,1,rep,name=entity_operations_list,json=entityOperationsList" json:"entity_operations_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *EntityOperationsList) Reset()         { *m = EntityOperationsList{} }
func (m *EntityOperationsList) String() string { return proto.CompactTextString(m) }
func (*EntityOperationsList) ProtoMessage()    {}
func (*EntityOperationsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{33}
}

func (m *EntityOperationsList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityOperationsList.Unmarshal(m, b)
}
func (m *EntityOperationsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityOperationsList.Marshal(b, m, deterministic)
}
func (m *EntityOperationsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityOperationsList.Merge(m, src)
}
func (m *EntityOperationsList) XXX_Size() int {
	return xxx_messageInfo_EntityOperationsList.Size(m)
}
func (m *EntityOperationsList) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityOperationsList.DiscardUnknown(m)
}

var xxx_messageInfo_EntityOperationsList proto.InternalMessageInfo

func (m *EntityOperationsList) GetEntityOperationsList() []*EntityOperations {
	if m != nil {
		return m.EntityOperationsList
	}
	return nil
}

// RPC argument to create new entity instances. APPs can atomically update only
// one namespace.
type UpdateEntityArg struct {
	// Required.
	EntityGuid *EntityGuid `protobuf:"bytes,1,opt,name=entity_guid,json=entityGuid" json:"entity_guid,omitempty"`
	// Optional. Create/Update timestamp in usecs.
	//
	// If the client does not provide 'timestamp_usecs', then it is set to
	// 1) 'created_timestamp_usecs' for a create operaion if it is provided
	// 2) server time otherwise
	// This timestamp is propogated to the replica DB when the entity is replicated.
	TimestampUsecs *uint64 `protobuf:"varint,2,opt,name=timestamp_usecs,json=timestampUsecs" json:"timestamp_usecs,omitempty"`
	// Optional. This field is set only for CAS updates.
	//
	// For CAS updates, the entity has to be created with a CAS value of 0 and
	// the client should increment it every update by 1 for every update.
	//
	// Once the entity is created with cas_value, non CAS updates are rejected
	// by the DB. Similarly, if the entity is not created with an initial
	// cas_value, CAS updates are rejected by the DB.
	CasValue *uint64 `protobuf:"varint,3,opt,name=cas_value,json=casValue" json:"cas_value,omitempty"`
	// Optional. The created timestamp cannot be later than the modified
	// timestamp. For new entities, if the 'created_timestamp_usecs' is not
	// provided then it is set to 'timestamp_usecs' in the arg. If
	// 'timestamp_usecs' is not set, then it is set to the server time.
	CreatedTimestampUsecs *uint64 `protobuf:"varint,4,opt,name=created_timestamp_usecs,json=createdTimestampUsecs" json:"created_timestamp_usecs,omitempty"`
	// Optional. Attribute value list.
	// Only Attributes that need to be set or cleared are provided.
	AttributeDataArgList []*AttributeDataArg `protobuf:"bytes,5,rep,name=attribute_data_arg_list,json=attributeDataArgList" json:"attribute_data_arg_list,omitempty"`
	// Optional. This field is set only if the client wants to provide the
	// entire entity state rather than specifying only the changes in the entity.
	FullUpdate *bool `protobuf:"varint,6,opt,name=full_update,json=fullUpdate,def=1" json:"full_update,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// Namespace within the entity that is updated.
	Namespace *string `protobuf:"bytes,7,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Optional. If this field is set, the entity will be automatically deleted
	// after the specified expiration time. If it is not set, the corresponding
	// field of the entity set previously will be cleared.
	ExpirationTimestampUsecs *uint64 `protobuf:"varint,8,opt,name=expiration_timestamp_usecs,json=expirationTimestampUsecs" json:"expiration_timestamp_usecs,omitempty"`
	// This field is only applicable for entity types which have replication
	// enabled as part of their entity type definition. This would specify that
	// the modification contains a sync barrier. Specifying a sync barrier for a
	// modification would guarantee that current modification will be seen in a
	// replica IDF instance only after all previous modifications to all entities
	// of all entity types are replicated to the replica from this master site.
	//
	// If this flag is not set for entity modifications across different entities,
	// then there is no guarantee on when and in which order these entity
	// modifications will get synced from master IDF instance to replica IDF
	// instance. The only guarantee in this case is that IDF sync offers is that
	// sync always progresses forward, i.e, once the replica IDF gets a newer
	// modification for an entity, then the older modification for that entity will
	// not show up on replica IDF.
	//
	// This 'sync_barrier' flag is per-entity-modification, it's not per-entity.
	// For every entity modification, the client can set 'sync_barrier' to true or
	// false and it applies only to that given modification.
	//
	// For example, for the following sequence
	//
	// UpdateEntity(vm1, t1)
	// UpdateEntity(virtual_disk1, t2)
	// UpdateEntity(task1, t3, sync_barrier=true)
	// UpdateEntity(vm2, t4)
	// UpdateEntity(task1, t5, sync_barrier=false)
	// UpdateEntity(virtual_disk2, t6)
	// UpdateEntity(task1, t7, sync_barrier=false)
	// UpdateEntity(virtual_disk2, t8)
	// UpdateEntity(task1, t9, sync_barrier=true)
	//
	// it is guaranteed that the IDF replica won't see {task1, t3} until {vm1, t1}
	// and {virtual_disk1, t2} have been synced. The other relative ordering among
	// updates with 'sync_barrier' not set is not defined. E.g. the IDF slave may
	// see {virtual_disk1, t2} being synced before {vm1, t1}. It may even sync
	// {vm2,t4} or {virtual_disk2, t8} before {vm1, t1} (and before {task1, t3})
	// but IDF would guarantee that {vm1, t1} and {virtual_disk1, t2} updates are
	// synced before {task1, t3}.
	// Furthermore in the same example, the IDF replica won't see {task1, t5} or
	// {task1, t7} before {vm1, t1} and {virtual_disk1, t2}. This is because IDF
	// also guarantees that sync always progresses forward of a given entity and
	// since an older modification to that entity has sync barrier enabled, even
	// these subsequent modifications will not appear on the IDF replica before the
	// previous sync barrier guarantees of that entity are satisfied.
	// Lastly, IDF replica will not see {task1, t9} before {vm2, t4}, {vm1, t1},
	// {virtual_disk2, t8}, {virtual_disk1, t2} and {virtual_disk2, t6}. The
	// latter set of updates can appear in any order among themselves as mentioned
	// earlier.
	//
	// As sync barrier would cause cluster-wide synchronization both on master and
	// on replicas, as well as cluster-wide serialization on replica (most
	// modifications with sync barriers are serialized between each other on the
	// replica), it is expected that services would use it sparingly, so that
	// modifications that don't require ordering guarantees could be replicated
	// independently.
	// Moreover, enabling this flag could result in higher latency for this
	// modification RPC.
	SyncBarrier *bool `protobuf:"varint,9,opt,name=sync_barrier,json=syncBarrier,def=0" json:"sync_barrier,omitempty"`
	// Optional. After taking the global write lock, this field has to be
	// set to the one returned by the WriteLockGlobalDataRet as to do
	// the write operation. If not provided, or it does not match with
	// the current 'global_data_lock_id' in IDF, the write request will
	// be rejected.
	GlobalDataLockId *string `protobuf:"bytes,10,opt,name=global_data_lock_id,json=globalDataLockId" json:"global_data_lock_id,omitempty"`
	// Optional. Sets the 'suppress_replication' metadata of the Entity - which
	// indicates whether to sync this entity or not. If set to true, the entity
	// is not synced, irrespective of the 'suppress_replication' flag of the
	// entity type. If set to false, we use the 'suppress_replication' and
	// 'replication_control_list' fields of the corresponding entity type to
	// decide whether to sync the entity or not.
	SuppressReplication  *bool    `protobuf:"varint,11,opt,name=suppress_replication,json=suppressReplication,def=0" json:"suppress_replication,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateEntityArg) Reset()         { *m = UpdateEntityArg{} }
func (m *UpdateEntityArg) String() string { return proto.CompactTextString(m) }
func (*UpdateEntityArg) ProtoMessage()    {}
func (*UpdateEntityArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{34}
}

func (m *UpdateEntityArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateEntityArg.Unmarshal(m, b)
}
func (m *UpdateEntityArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateEntityArg.Marshal(b, m, deterministic)
}
func (m *UpdateEntityArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEntityArg.Merge(m, src)
}
func (m *UpdateEntityArg) XXX_Size() int {
	return xxx_messageInfo_UpdateEntityArg.Size(m)
}
func (m *UpdateEntityArg) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEntityArg.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEntityArg proto.InternalMessageInfo

const Default_UpdateEntityArg_FullUpdate bool = true
const Default_UpdateEntityArg_Namespace string = "_default_"
const Default_UpdateEntityArg_SyncBarrier bool = false
const Default_UpdateEntityArg_SuppressReplication bool = false

func (m *UpdateEntityArg) GetEntityGuid() *EntityGuid {
	if m != nil {
		return m.EntityGuid
	}
	return nil
}

func (m *UpdateEntityArg) GetTimestampUsecs() uint64 {
	if m != nil && m.TimestampUsecs != nil {
		return *m.TimestampUsecs
	}
	return 0
}

func (m *UpdateEntityArg) GetCasValue() uint64 {
	if m != nil && m.CasValue != nil {
		return *m.CasValue
	}
	return 0
}

func (m *UpdateEntityArg) GetCreatedTimestampUsecs() uint64 {
	if m != nil && m.CreatedTimestampUsecs != nil {
		return *m.CreatedTimestampUsecs
	}
	return 0
}

func (m *UpdateEntityArg) GetAttributeDataArgList() []*AttributeDataArg {
	if m != nil {
		return m.AttributeDataArgList
	}
	return nil
}

func (m *UpdateEntityArg) GetFullUpdate() bool {
	if m != nil && m.FullUpdate != nil {
		return *m.FullUpdate
	}
	return Default_UpdateEntityArg_FullUpdate
}

func (m *UpdateEntityArg) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_UpdateEntityArg_Namespace
}

func (m *UpdateEntityArg) GetExpirationTimestampUsecs() uint64 {
	if m != nil && m.ExpirationTimestampUsecs != nil {
		return *m.ExpirationTimestampUsecs
	}
	return 0
}

func (m *UpdateEntityArg) GetSyncBarrier() bool {
	if m != nil && m.SyncBarrier != nil {
		return *m.SyncBarrier
	}
	return Default_UpdateEntityArg_SyncBarrier
}

func (m *UpdateEntityArg) GetGlobalDataLockId() string {
	if m != nil && m.GlobalDataLockId != nil {
		return *m.GlobalDataLockId
	}
	return ""
}

func (m *UpdateEntityArg) GetSuppressReplication() bool {
	if m != nil && m.SuppressReplication != nil {
		return *m.SuppressReplication
	}
	return Default_UpdateEntityArg_SuppressReplication
}

type UpdateEntityRet struct {
	// Optional. Current state of entity returned.
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *UpdateEntityRet) Reset()         { *m = UpdateEntityRet{} }
func (m *UpdateEntityRet) String() string { return proto.CompactTextString(m) }
func (*UpdateEntityRet) ProtoMessage()    {}
func (*UpdateEntityRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{35}
}

func (m *UpdateEntityRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateEntityRet.Unmarshal(m, b)
}
func (m *UpdateEntityRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateEntityRet.Marshal(b, m, deterministic)
}
func (m *UpdateEntityRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEntityRet.Merge(m, src)
}
func (m *UpdateEntityRet) XXX_Size() int {
	return xxx_messageInfo_UpdateEntityRet.Size(m)
}
func (m *UpdateEntityRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEntityRet.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEntityRet proto.InternalMessageInfo

func (m *UpdateEntityRet) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *UpdateEntityRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// RPC argument to create / update entities in batch. Each update within the
// batch is atomic, but there are no atomic guarantees across the whole batch.
// Each update is independent and the sequence is not guaranteed.
type BatchUpdateEntitiesArg struct {
	// Required. Each item includes an entity which is going to be updated.
	EntityList           []*UpdateEntityArg `protobuf:"bytes,1,rep,name=entity_list,json=entityList" json:"entity_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BatchUpdateEntitiesArg) Reset()         { *m = BatchUpdateEntitiesArg{} }
func (m *BatchUpdateEntitiesArg) String() string { return proto.CompactTextString(m) }
func (*BatchUpdateEntitiesArg) ProtoMessage()    {}
func (*BatchUpdateEntitiesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{36}
}

func (m *BatchUpdateEntitiesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchUpdateEntitiesArg.Unmarshal(m, b)
}
func (m *BatchUpdateEntitiesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchUpdateEntitiesArg.Marshal(b, m, deterministic)
}
func (m *BatchUpdateEntitiesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchUpdateEntitiesArg.Merge(m, src)
}
func (m *BatchUpdateEntitiesArg) XXX_Size() int {
	return xxx_messageInfo_BatchUpdateEntitiesArg.Size(m)
}
func (m *BatchUpdateEntitiesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchUpdateEntitiesArg.DiscardUnknown(m)
}

var xxx_messageInfo_BatchUpdateEntitiesArg proto.InternalMessageInfo

func (m *BatchUpdateEntitiesArg) GetEntityList() []*UpdateEntityArg {
	if m != nil {
		return m.EntityList
	}
	return nil
}

type BatchUpdateEntitiesRet struct {
	// Required. Return status for each entity update. The order is the same as
	// that in the arg.
	RetList []*BatchUpdateEntitiesRet_RetElem `protobuf:"bytes,1,rep,name=ret_list,json=retList" json:"ret_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *BatchUpdateEntitiesRet) Reset()         { *m = BatchUpdateEntitiesRet{} }
func (m *BatchUpdateEntitiesRet) String() string { return proto.CompactTextString(m) }
func (*BatchUpdateEntitiesRet) ProtoMessage()    {}
func (*BatchUpdateEntitiesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{37}
}

func (m *BatchUpdateEntitiesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchUpdateEntitiesRet.Unmarshal(m, b)
}
func (m *BatchUpdateEntitiesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchUpdateEntitiesRet.Marshal(b, m, deterministic)
}
func (m *BatchUpdateEntitiesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchUpdateEntitiesRet.Merge(m, src)
}
func (m *BatchUpdateEntitiesRet) XXX_Size() int {
	return xxx_messageInfo_BatchUpdateEntitiesRet.Size(m)
}
func (m *BatchUpdateEntitiesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchUpdateEntitiesRet.DiscardUnknown(m)
}

var xxx_messageInfo_BatchUpdateEntitiesRet proto.InternalMessageInfo

func (m *BatchUpdateEntitiesRet) GetRetList() []*BatchUpdateEntitiesRet_RetElem {
	if m != nil {
		return m.RetList
	}
	return nil
}

func (m *BatchUpdateEntitiesRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type BatchUpdateEntitiesRet_RetElem struct {
	// Required. Return state for each single entity.
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
	// Required. Return status for this particular entity update.
	Status               *InsightsErrorProto `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BatchUpdateEntitiesRet_RetElem) Reset()         { *m = BatchUpdateEntitiesRet_RetElem{} }
func (m *BatchUpdateEntitiesRet_RetElem) String() string { return proto.CompactTextString(m) }
func (*BatchUpdateEntitiesRet_RetElem) ProtoMessage()    {}
func (*BatchUpdateEntitiesRet_RetElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{37, 0}
}

func (m *BatchUpdateEntitiesRet_RetElem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchUpdateEntitiesRet_RetElem.Unmarshal(m, b)
}
func (m *BatchUpdateEntitiesRet_RetElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchUpdateEntitiesRet_RetElem.Marshal(b, m, deterministic)
}
func (m *BatchUpdateEntitiesRet_RetElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchUpdateEntitiesRet_RetElem.Merge(m, src)
}
func (m *BatchUpdateEntitiesRet_RetElem) XXX_Size() int {
	return xxx_messageInfo_BatchUpdateEntitiesRet_RetElem.Size(m)
}
func (m *BatchUpdateEntitiesRet_RetElem) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchUpdateEntitiesRet_RetElem.DiscardUnknown(m)
}

var xxx_messageInfo_BatchUpdateEntitiesRet_RetElem proto.InternalMessageInfo

func (m *BatchUpdateEntitiesRet_RetElem) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *BatchUpdateEntitiesRet_RetElem) GetStatus() *InsightsErrorProto {
	if m != nil {
		return m.Status
	}
	return nil
}

// RPC argument to attach new entity instances. This is used for moving
// entities from one cluster to another. The flow is the following:
//  (on source cluster) GetEntities(...), take note of incarnation_id
//  (on target cluster) AttachEntity(entiry, incarnation_id + 1)
// The request is going to be rejected if an entity already exists
type AttachEntityArg struct {
	// Required.
	UpdateEntityArg *UpdateEntityArg `protobuf:"bytes,1,opt,name=update_entity_arg,json=updateEntityArg" json:"update_entity_arg,omitempty"`
	// Required. The new incarnation_id. The incarnation_id of attached
	// entity must be greater than the incarnation_id of detached entity.
	IncarnationId        *uint64  `protobuf:"varint,2,opt,name=incarnation_id,json=incarnationId" json:"incarnation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttachEntityArg) Reset()         { *m = AttachEntityArg{} }
func (m *AttachEntityArg) String() string { return proto.CompactTextString(m) }
func (*AttachEntityArg) ProtoMessage()    {}
func (*AttachEntityArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{38}
}

func (m *AttachEntityArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachEntityArg.Unmarshal(m, b)
}
func (m *AttachEntityArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachEntityArg.Marshal(b, m, deterministic)
}
func (m *AttachEntityArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachEntityArg.Merge(m, src)
}
func (m *AttachEntityArg) XXX_Size() int {
	return xxx_messageInfo_AttachEntityArg.Size(m)
}
func (m *AttachEntityArg) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachEntityArg.DiscardUnknown(m)
}

var xxx_messageInfo_AttachEntityArg proto.InternalMessageInfo

func (m *AttachEntityArg) GetUpdateEntityArg() *UpdateEntityArg {
	if m != nil {
		return m.UpdateEntityArg
	}
	return nil
}

func (m *AttachEntityArg) GetIncarnationId() uint64 {
	if m != nil && m.IncarnationId != nil {
		return *m.IncarnationId
	}
	return 0
}

type AttachEntityRet struct {
	// Optional. Current state of entity returned.
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *AttachEntityRet) Reset()         { *m = AttachEntityRet{} }
func (m *AttachEntityRet) String() string { return proto.CompactTextString(m) }
func (*AttachEntityRet) ProtoMessage()    {}
func (*AttachEntityRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{39}
}

func (m *AttachEntityRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachEntityRet.Unmarshal(m, b)
}
func (m *AttachEntityRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachEntityRet.Marshal(b, m, deterministic)
}
func (m *AttachEntityRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachEntityRet.Merge(m, src)
}
func (m *AttachEntityRet) XXX_Size() int {
	return xxx_messageInfo_AttachEntityRet.Size(m)
}
func (m *AttachEntityRet) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachEntityRet.DiscardUnknown(m)
}

var xxx_messageInfo_AttachEntityRet proto.InternalMessageInfo

func (m *AttachEntityRet) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *AttachEntityRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// RPC argument to register a set of metric types with a particular
// entity type.
type RegisterMetricTypesArg struct {
	// Required.
	MetricTypeList       []*MetricType `protobuf:"bytes,1,rep,name=metric_type_list,json=metricTypeList" json:"metric_type_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RegisterMetricTypesArg) Reset()         { *m = RegisterMetricTypesArg{} }
func (m *RegisterMetricTypesArg) String() string { return proto.CompactTextString(m) }
func (*RegisterMetricTypesArg) ProtoMessage()    {}
func (*RegisterMetricTypesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{40}
}

func (m *RegisterMetricTypesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMetricTypesArg.Unmarshal(m, b)
}
func (m *RegisterMetricTypesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMetricTypesArg.Marshal(b, m, deterministic)
}
func (m *RegisterMetricTypesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMetricTypesArg.Merge(m, src)
}
func (m *RegisterMetricTypesArg) XXX_Size() int {
	return xxx_messageInfo_RegisterMetricTypesArg.Size(m)
}
func (m *RegisterMetricTypesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMetricTypesArg.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMetricTypesArg proto.InternalMessageInfo

func (m *RegisterMetricTypesArg) GetMetricTypeList() []*MetricType {
	if m != nil {
		return m.MetricTypeList
	}
	return nil
}

// This is a batch operation, the overall status of the RPC is captured
// in 'rpc_status' field and the status for individual 'MetricType' is
// captured in 'register_metric_types_ret_elem_list'.
//
// 'rpc_status' is set to...
//    'kNoError' if the entire RPC succeeds
//    'kAppError' & 'app_error' set to 'kPartial' if RPC partly succeeds
//    'kAppError' & 'app_error' set to specific error if entire RPC fails.
//
// When rpc_status is 'kAppError' and 'app_error' is 'kPartial', the client
// has to iterate 'register_metric_types_ret_elem_list' to fetch
// status for each 'MetricType'.
type RegisterMetricTypesRet struct {
	// Required. Status for each 'MetricType'.
	RegisterMetricTypesRetElemList []*RegisterMetricTypesRet_RetElem `protobuf:"bytes,1,rep,name=register_metric_types_ret_elem_list,json=registerMetricTypesRetElemList" json:"register_metric_types_ret_elem_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RegisterMetricTypesRet) Reset()         { *m = RegisterMetricTypesRet{} }
func (m *RegisterMetricTypesRet) String() string { return proto.CompactTextString(m) }
func (*RegisterMetricTypesRet) ProtoMessage()    {}
func (*RegisterMetricTypesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{41}
}

func (m *RegisterMetricTypesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMetricTypesRet.Unmarshal(m, b)
}
func (m *RegisterMetricTypesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMetricTypesRet.Marshal(b, m, deterministic)
}
func (m *RegisterMetricTypesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMetricTypesRet.Merge(m, src)
}
func (m *RegisterMetricTypesRet) XXX_Size() int {
	return xxx_messageInfo_RegisterMetricTypesRet.Size(m)
}
func (m *RegisterMetricTypesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMetricTypesRet.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMetricTypesRet proto.InternalMessageInfo

func (m *RegisterMetricTypesRet) GetRegisterMetricTypesRetElemList() []*RegisterMetricTypesRet_RetElem {
	if m != nil {
		return m.RegisterMetricTypesRetElemList
	}
	return nil
}

func (m *RegisterMetricTypesRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type RegisterMetricTypesRet_RetElem struct {
	// Required. Name of the Entity Type.
	EntityTypeName *string `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Required. Name of the 'MetricType'.
	MetricName *string `protobuf:"bytes,2,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// Optional. Namespace of the 'MetricType'
	Namespace *string `protobuf:"bytes,4,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Required. Return status for this particular metric update.
	Status               *InsightsErrorProto `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RegisterMetricTypesRet_RetElem) Reset()         { *m = RegisterMetricTypesRet_RetElem{} }
func (m *RegisterMetricTypesRet_RetElem) String() string { return proto.CompactTextString(m) }
func (*RegisterMetricTypesRet_RetElem) ProtoMessage()    {}
func (*RegisterMetricTypesRet_RetElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{41, 0}
}

func (m *RegisterMetricTypesRet_RetElem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMetricTypesRet_RetElem.Unmarshal(m, b)
}
func (m *RegisterMetricTypesRet_RetElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMetricTypesRet_RetElem.Marshal(b, m, deterministic)
}
func (m *RegisterMetricTypesRet_RetElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMetricTypesRet_RetElem.Merge(m, src)
}
func (m *RegisterMetricTypesRet_RetElem) XXX_Size() int {
	return xxx_messageInfo_RegisterMetricTypesRet_RetElem.Size(m)
}
func (m *RegisterMetricTypesRet_RetElem) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMetricTypesRet_RetElem.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMetricTypesRet_RetElem proto.InternalMessageInfo

const Default_RegisterMetricTypesRet_RetElem_Namespace string = "_default_"

func (m *RegisterMetricTypesRet_RetElem) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *RegisterMetricTypesRet_RetElem) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *RegisterMetricTypesRet_RetElem) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_RegisterMetricTypesRet_RetElem_Namespace
}

func (m *RegisterMetricTypesRet_RetElem) GetStatus() *InsightsErrorProto {
	if m != nil {
		return m.Status
	}
	return nil
}

// RPC argument to unregister a 'MetricType'.
type UnregisterMetricTypesArg struct {
	// Required.
	MetricNameList       []string `protobuf:"bytes,1,rep,name=metric_name_list,json=metricNameList" json:"metric_name_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnregisterMetricTypesArg) Reset()         { *m = UnregisterMetricTypesArg{} }
func (m *UnregisterMetricTypesArg) String() string { return proto.CompactTextString(m) }
func (*UnregisterMetricTypesArg) ProtoMessage()    {}
func (*UnregisterMetricTypesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{42}
}

func (m *UnregisterMetricTypesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterMetricTypesArg.Unmarshal(m, b)
}
func (m *UnregisterMetricTypesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterMetricTypesArg.Marshal(b, m, deterministic)
}
func (m *UnregisterMetricTypesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterMetricTypesArg.Merge(m, src)
}
func (m *UnregisterMetricTypesArg) XXX_Size() int {
	return xxx_messageInfo_UnregisterMetricTypesArg.Size(m)
}
func (m *UnregisterMetricTypesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterMetricTypesArg.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterMetricTypesArg proto.InternalMessageInfo

func (m *UnregisterMetricTypesArg) GetMetricNameList() []string {
	if m != nil {
		return m.MetricNameList
	}
	return nil
}

type UnregisterMetricTypesRet struct {
	//Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,1,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *UnregisterMetricTypesRet) Reset()         { *m = UnregisterMetricTypesRet{} }
func (m *UnregisterMetricTypesRet) String() string { return proto.CompactTextString(m) }
func (*UnregisterMetricTypesRet) ProtoMessage()    {}
func (*UnregisterMetricTypesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{43}
}

func (m *UnregisterMetricTypesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterMetricTypesRet.Unmarshal(m, b)
}
func (m *UnregisterMetricTypesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterMetricTypesRet.Marshal(b, m, deterministic)
}
func (m *UnregisterMetricTypesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterMetricTypesRet.Merge(m, src)
}
func (m *UnregisterMetricTypesRet) XXX_Size() int {
	return xxx_messageInfo_UnregisterMetricTypesRet.Size(m)
}
func (m *UnregisterMetricTypesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterMetricTypesRet.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterMetricTypesRet proto.InternalMessageInfo

func (m *UnregisterMetricTypesRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// RPC argument to get a list of metric types matching a specified regular
// expression.
type GetMetricTypesArg struct {
	// Optional. Regular expression to get the list of metric types. If this
	// regular expression is not provided, we return all the metric types present
	// in the database.
	// Currently we do not support regular expression. We only support searching
	// for a specific substring with the metric name. Thus only exact match is
	// supported for now.
	// TODO (rahul.singh): Add support for regular expression and document the
	//                     kind of REGEX language we support.
	Regex                *string  `protobuf:"bytes,1,opt,name=regex" json:"regex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMetricTypesArg) Reset()         { *m = GetMetricTypesArg{} }
func (m *GetMetricTypesArg) String() string { return proto.CompactTextString(m) }
func (*GetMetricTypesArg) ProtoMessage()    {}
func (*GetMetricTypesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{44}
}

func (m *GetMetricTypesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetricTypesArg.Unmarshal(m, b)
}
func (m *GetMetricTypesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetricTypesArg.Marshal(b, m, deterministic)
}
func (m *GetMetricTypesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricTypesArg.Merge(m, src)
}
func (m *GetMetricTypesArg) XXX_Size() int {
	return xxx_messageInfo_GetMetricTypesArg.Size(m)
}
func (m *GetMetricTypesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricTypesArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricTypesArg proto.InternalMessageInfo

func (m *GetMetricTypesArg) GetRegex() string {
	if m != nil && m.Regex != nil {
		return *m.Regex
	}
	return ""
}

type GetMetricTypesRet struct {
	// Required. List of metric types returned.
	MetricTypeList []*MetricType `protobuf:"bytes,1,rep,name=metric_type_list,json=metricTypeList" json:"metric_type_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetMetricTypesRet) Reset()         { *m = GetMetricTypesRet{} }
func (m *GetMetricTypesRet) String() string { return proto.CompactTextString(m) }
func (*GetMetricTypesRet) ProtoMessage()    {}
func (*GetMetricTypesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{45}
}

func (m *GetMetricTypesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetricTypesRet.Unmarshal(m, b)
}
func (m *GetMetricTypesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetricTypesRet.Marshal(b, m, deterministic)
}
func (m *GetMetricTypesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricTypesRet.Merge(m, src)
}
func (m *GetMetricTypesRet) XXX_Size() int {
	return xxx_messageInfo_GetMetricTypesRet.Size(m)
}
func (m *GetMetricTypesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricTypesRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricTypesRet proto.InternalMessageInfo

func (m *GetMetricTypesRet) GetMetricTypeList() []*MetricType {
	if m != nil {
		return m.MetricTypeList
	}
	return nil
}

func (m *GetMetricTypesRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// RPC argument to delete an existing entity instance. If the entity being
// deleted is not a leaf in the entity tree, it will result in an error.
// APPs can atomically delete only one namespace. Once a namespace is deleted,
// it can be recreated and the CAS value starts from the previous value just
// like UpdateEntity.
//
// Deleting a default namespace for an entity would force-delete all other
// namespaces and there is no easy way to detect delete_default-update_auxiliary
// conflict. If auxiliary data need to stay even after the default namespace is
// deleted, then it should be modeled as a different entity type with link to
// the primary entity type.
type DeleteEntityArg struct {
	// Required.
	EntityGuid *EntityGuid `protobuf:"bytes,1,opt,name=entity_guid,json=entityGuid" json:"entity_guid,omitempty"`
	// Optional. Delete timestamp in usecs.
	//
	// If the client does not provide 'timestamp_usecs', then the server sets
	// the timestamp. This timestamp is propogated to the replica DB when the
	// entity is replicated.
	TimestampUsecs *uint64 `protobuf:"varint,2,opt,name=timestamp_usecs,json=timestampUsecs" json:"timestamp_usecs,omitempty"`
	// Optional. While deleting a CAS entity the client needs to provide the
	// right CAS value. For non-CAS entities this is not required and should not
	// be provided.
	CasValue *uint64 `protobuf:"varint,3,opt,name=cas_value,json=casValue" json:"cas_value,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	//
	// If the namespace is not set or set to '_default_', entire entity is
	// deleted. Otherwise only the namespace within the entity is marked deleted.
	Namespace *string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	// This field is only applicable for entity types which have replication
	// enabled as part of their entity type definition. This would specify that
	// the modification contains a sync barrier.
	// Please refer to the field 'UpdateEntityArg.sync_barrier' for detailed
	// description of sync barrier semantics.
	SyncBarrier *bool `protobuf:"varint,5,opt,name=sync_barrier,json=syncBarrier,def=0" json:"sync_barrier,omitempty"`
	// Optional. After taking the global write lock, this field has to be
	// set to the one returned by the WriteLockGlobalDataRet as to do
	// the write operation. If not provided, or it does not match with
	// the current 'global_data_lock_id' in IDF, the write request will
	// be rejected.
	GlobalDataLockId *string `protobuf:"bytes,6,opt,name=global_data_lock_id,json=globalDataLockId" json:"global_data_lock_id,omitempty"`
	// Optional. Sets the 'suppress_replication' metadata of the Entity - which
	// indicates whether to sync this entity deletion or not. If set to true, the
	// entity is not synced, irrespective of the 'suppress_replication' flag of
	// the entity type. If set to false, we use the 'suppress_replication' and
	// 'replication_control_list' fields of the corresponding entity type to
	// decide whether to sync the deletion or not.
	SuppressReplication  *bool    `protobuf:"varint,7,opt,name=suppress_replication,json=suppressReplication,def=0" json:"suppress_replication,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteEntityArg) Reset()         { *m = DeleteEntityArg{} }
func (m *DeleteEntityArg) String() string { return proto.CompactTextString(m) }
func (*DeleteEntityArg) ProtoMessage()    {}
func (*DeleteEntityArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{46}
}

func (m *DeleteEntityArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteEntityArg.Unmarshal(m, b)
}
func (m *DeleteEntityArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteEntityArg.Marshal(b, m, deterministic)
}
func (m *DeleteEntityArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEntityArg.Merge(m, src)
}
func (m *DeleteEntityArg) XXX_Size() int {
	return xxx_messageInfo_DeleteEntityArg.Size(m)
}
func (m *DeleteEntityArg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEntityArg.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEntityArg proto.InternalMessageInfo

const Default_DeleteEntityArg_SyncBarrier bool = false
const Default_DeleteEntityArg_SuppressReplication bool = false

func (m *DeleteEntityArg) GetEntityGuid() *EntityGuid {
	if m != nil {
		return m.EntityGuid
	}
	return nil
}

func (m *DeleteEntityArg) GetTimestampUsecs() uint64 {
	if m != nil && m.TimestampUsecs != nil {
		return *m.TimestampUsecs
	}
	return 0
}

func (m *DeleteEntityArg) GetCasValue() uint64 {
	if m != nil && m.CasValue != nil {
		return *m.CasValue
	}
	return 0
}

func (m *DeleteEntityArg) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *DeleteEntityArg) GetSyncBarrier() bool {
	if m != nil && m.SyncBarrier != nil {
		return *m.SyncBarrier
	}
	return Default_DeleteEntityArg_SyncBarrier
}

func (m *DeleteEntityArg) GetGlobalDataLockId() string {
	if m != nil && m.GlobalDataLockId != nil {
		return *m.GlobalDataLockId
	}
	return ""
}

func (m *DeleteEntityArg) GetSuppressReplication() bool {
	if m != nil && m.SuppressReplication != nil {
		return *m.SuppressReplication
	}
	return Default_DeleteEntityArg_SuppressReplication
}

type DeleteEntityRet struct {
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64 `protobuf:"varint,1,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	// Optional. Current state of the entity returned.
	// Failure case: Depending on the failure it may contain current value of the
	// entity. Entity returned will contain both metadata and attributes.
	// Successful case: Entity returned will contain only metadata. It won't
	// contain any value in case the entity is purged from Cassandra.
	Entity               *Entity  `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteEntityRet) Reset()         { *m = DeleteEntityRet{} }
func (m *DeleteEntityRet) String() string { return proto.CompactTextString(m) }
func (*DeleteEntityRet) ProtoMessage()    {}
func (*DeleteEntityRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{47}
}

func (m *DeleteEntityRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteEntityRet.Unmarshal(m, b)
}
func (m *DeleteEntityRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteEntityRet.Marshal(b, m, deterministic)
}
func (m *DeleteEntityRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEntityRet.Merge(m, src)
}
func (m *DeleteEntityRet) XXX_Size() int {
	return xxx_messageInfo_DeleteEntityRet.Size(m)
}
func (m *DeleteEntityRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEntityRet.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEntityRet proto.InternalMessageInfo

func (m *DeleteEntityRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

func (m *DeleteEntityRet) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

// RPC argument to delete entities in batch. Each deletion within the
// batch is atomic, but there are no atomic guarantees across the whole batch.
// Each deletion is independent and the sequence is not guaranteed.
type BatchDeleteEntitiesArg struct {
	// Required. Each item includes an entity which is going to be deleted.
	EntityList           []*DeleteEntityArg `protobuf:"bytes,1,rep,name=entity_list,json=entityList" json:"entity_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BatchDeleteEntitiesArg) Reset()         { *m = BatchDeleteEntitiesArg{} }
func (m *BatchDeleteEntitiesArg) String() string { return proto.CompactTextString(m) }
func (*BatchDeleteEntitiesArg) ProtoMessage()    {}
func (*BatchDeleteEntitiesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{48}
}

func (m *BatchDeleteEntitiesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchDeleteEntitiesArg.Unmarshal(m, b)
}
func (m *BatchDeleteEntitiesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchDeleteEntitiesArg.Marshal(b, m, deterministic)
}
func (m *BatchDeleteEntitiesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDeleteEntitiesArg.Merge(m, src)
}
func (m *BatchDeleteEntitiesArg) XXX_Size() int {
	return xxx_messageInfo_BatchDeleteEntitiesArg.Size(m)
}
func (m *BatchDeleteEntitiesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDeleteEntitiesArg.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDeleteEntitiesArg proto.InternalMessageInfo

func (m *BatchDeleteEntitiesArg) GetEntityList() []*DeleteEntityArg {
	if m != nil {
		return m.EntityList
	}
	return nil
}

type BatchDeleteEntitiesRet struct {
	// Required. Return status for each entity update. The order is the same as
	// that in the arg.
	RetList []*BatchDeleteEntitiesRet_RetElem `protobuf:"bytes,1,rep,name=ret_list,json=retList" json:"ret_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *BatchDeleteEntitiesRet) Reset()         { *m = BatchDeleteEntitiesRet{} }
func (m *BatchDeleteEntitiesRet) String() string { return proto.CompactTextString(m) }
func (*BatchDeleteEntitiesRet) ProtoMessage()    {}
func (*BatchDeleteEntitiesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{49}
}

func (m *BatchDeleteEntitiesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchDeleteEntitiesRet.Unmarshal(m, b)
}
func (m *BatchDeleteEntitiesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchDeleteEntitiesRet.Marshal(b, m, deterministic)
}
func (m *BatchDeleteEntitiesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDeleteEntitiesRet.Merge(m, src)
}
func (m *BatchDeleteEntitiesRet) XXX_Size() int {
	return xxx_messageInfo_BatchDeleteEntitiesRet.Size(m)
}
func (m *BatchDeleteEntitiesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDeleteEntitiesRet.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDeleteEntitiesRet proto.InternalMessageInfo

func (m *BatchDeleteEntitiesRet) GetRetList() []*BatchDeleteEntitiesRet_RetElem {
	if m != nil {
		return m.RetList
	}
	return nil
}

func (m *BatchDeleteEntitiesRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type BatchDeleteEntitiesRet_RetElem struct {
	// Required. Return state for each single entity.
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
	// Required. Return status for this particular entity update.
	Status               *InsightsErrorProto `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BatchDeleteEntitiesRet_RetElem) Reset()         { *m = BatchDeleteEntitiesRet_RetElem{} }
func (m *BatchDeleteEntitiesRet_RetElem) String() string { return proto.CompactTextString(m) }
func (*BatchDeleteEntitiesRet_RetElem) ProtoMessage()    {}
func (*BatchDeleteEntitiesRet_RetElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{49, 0}
}

func (m *BatchDeleteEntitiesRet_RetElem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchDeleteEntitiesRet_RetElem.Unmarshal(m, b)
}
func (m *BatchDeleteEntitiesRet_RetElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchDeleteEntitiesRet_RetElem.Marshal(b, m, deterministic)
}
func (m *BatchDeleteEntitiesRet_RetElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDeleteEntitiesRet_RetElem.Merge(m, src)
}
func (m *BatchDeleteEntitiesRet_RetElem) XXX_Size() int {
	return xxx_messageInfo_BatchDeleteEntitiesRet_RetElem.Size(m)
}
func (m *BatchDeleteEntitiesRet_RetElem) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDeleteEntitiesRet_RetElem.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDeleteEntitiesRet_RetElem proto.InternalMessageInfo

func (m *BatchDeleteEntitiesRet_RetElem) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *BatchDeleteEntitiesRet_RetElem) GetStatus() *InsightsErrorProto {
	if m != nil {
		return m.Status
	}
	return nil
}

// RPC argument to detach an existing entity instance. This is used for moving
// entities from one cluster to another.  The semantics of this operation is
// mostly the same as deletion, with the exception of taking note of
// the target cluster uuid.
type DetachEntityArg struct {
	// Required.
	DeleteEntityArg *DeleteEntityArg `protobuf:"bytes,1,opt,name=delete_entity_arg,json=deleteEntityArg" json:"delete_entity_arg,omitempty"`
	// Required. The the target cluster uuid.
	MovedToClusterUuid   *string  `protobuf:"bytes,2,opt,name=moved_to_cluster_uuid,json=movedToClusterUuid" json:"moved_to_cluster_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetachEntityArg) Reset()         { *m = DetachEntityArg{} }
func (m *DetachEntityArg) String() string { return proto.CompactTextString(m) }
func (*DetachEntityArg) ProtoMessage()    {}
func (*DetachEntityArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{50}
}

func (m *DetachEntityArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetachEntityArg.Unmarshal(m, b)
}
func (m *DetachEntityArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetachEntityArg.Marshal(b, m, deterministic)
}
func (m *DetachEntityArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetachEntityArg.Merge(m, src)
}
func (m *DetachEntityArg) XXX_Size() int {
	return xxx_messageInfo_DetachEntityArg.Size(m)
}
func (m *DetachEntityArg) XXX_DiscardUnknown() {
	xxx_messageInfo_DetachEntityArg.DiscardUnknown(m)
}

var xxx_messageInfo_DetachEntityArg proto.InternalMessageInfo

func (m *DetachEntityArg) GetDeleteEntityArg() *DeleteEntityArg {
	if m != nil {
		return m.DeleteEntityArg
	}
	return nil
}

func (m *DetachEntityArg) GetMovedToClusterUuid() string {
	if m != nil && m.MovedToClusterUuid != nil {
		return *m.MovedToClusterUuid
	}
	return ""
}

type DetachEntityRet struct {
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64 `protobuf:"varint,1,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	// Optional. Current state of the entity returned.
	// Failure case: Depending on the failure it may contain current value of the
	// entity. Entity returned will contain both metadata and attributes.
	// Successful case: Entity returned will contain only metadata. It won't
	// contain any value in case the entity is purged from Cassandra.
	Entity               *Entity  `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetachEntityRet) Reset()         { *m = DetachEntityRet{} }
func (m *DetachEntityRet) String() string { return proto.CompactTextString(m) }
func (*DetachEntityRet) ProtoMessage()    {}
func (*DetachEntityRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{51}
}

func (m *DetachEntityRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetachEntityRet.Unmarshal(m, b)
}
func (m *DetachEntityRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetachEntityRet.Marshal(b, m, deterministic)
}
func (m *DetachEntityRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetachEntityRet.Merge(m, src)
}
func (m *DetachEntityRet) XXX_Size() int {
	return xxx_messageInfo_DetachEntityRet.Size(m)
}
func (m *DetachEntityRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DetachEntityRet.DiscardUnknown(m)
}

var xxx_messageInfo_DetachEntityRet proto.InternalMessageInfo

func (m *DetachEntityRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

func (m *DetachEntityRet) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

// RPC argument to propagate Entity Updates via Nusights Collector Framework.
// The Collector Framework is not master repository of entity data. It can be
// used to sync entity updates to the server.
type SyncUpdateEntityArg struct {
	// Required. List of update entity arg's.
	EntityList []*Entity `protobuf:"bytes,1,rep,name=entity_list,json=entityList" json:"entity_list,omitempty"`
	// The uuid of the master cluster.
	MasterClusterUuid    *string  `protobuf:"bytes,2,opt,name=master_cluster_uuid,json=masterClusterUuid" json:"master_cluster_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncUpdateEntityArg) Reset()         { *m = SyncUpdateEntityArg{} }
func (m *SyncUpdateEntityArg) String() string { return proto.CompactTextString(m) }
func (*SyncUpdateEntityArg) ProtoMessage()    {}
func (*SyncUpdateEntityArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{52}
}

func (m *SyncUpdateEntityArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncUpdateEntityArg.Unmarshal(m, b)
}
func (m *SyncUpdateEntityArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncUpdateEntityArg.Marshal(b, m, deterministic)
}
func (m *SyncUpdateEntityArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncUpdateEntityArg.Merge(m, src)
}
func (m *SyncUpdateEntityArg) XXX_Size() int {
	return xxx_messageInfo_SyncUpdateEntityArg.Size(m)
}
func (m *SyncUpdateEntityArg) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncUpdateEntityArg.DiscardUnknown(m)
}

var xxx_messageInfo_SyncUpdateEntityArg proto.InternalMessageInfo

func (m *SyncUpdateEntityArg) GetEntityList() []*Entity {
	if m != nil {
		return m.EntityList
	}
	return nil
}

func (m *SyncUpdateEntityArg) GetMasterClusterUuid() string {
	if m != nil && m.MasterClusterUuid != nil {
		return *m.MasterClusterUuid
	}
	return ""
}

// The return value contains status for each element in SyncUpdateEntityArg.
type SyncUpdateEntityRet struct {
	// Required. Status for each entity update.
	SyncUpdateEntityRetStatusList []*SyncUpdateEntityRet_RetStatus `protobuf:"bytes,1,rep,name=sync_update_entity_ret_status_list,json=syncUpdateEntityRetStatusList" json:"sync_update_entity_ret_status_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *SyncUpdateEntityRet) Reset()         { *m = SyncUpdateEntityRet{} }
func (m *SyncUpdateEntityRet) String() string { return proto.CompactTextString(m) }
func (*SyncUpdateEntityRet) ProtoMessage()    {}
func (*SyncUpdateEntityRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{53}
}

func (m *SyncUpdateEntityRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncUpdateEntityRet.Unmarshal(m, b)
}
func (m *SyncUpdateEntityRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncUpdateEntityRet.Marshal(b, m, deterministic)
}
func (m *SyncUpdateEntityRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncUpdateEntityRet.Merge(m, src)
}
func (m *SyncUpdateEntityRet) XXX_Size() int {
	return xxx_messageInfo_SyncUpdateEntityRet.Size(m)
}
func (m *SyncUpdateEntityRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncUpdateEntityRet.DiscardUnknown(m)
}

var xxx_messageInfo_SyncUpdateEntityRet proto.InternalMessageInfo

func (m *SyncUpdateEntityRet) GetSyncUpdateEntityRetStatusList() []*SyncUpdateEntityRet_RetStatus {
	if m != nil {
		return m.SyncUpdateEntityRetStatusList
	}
	return nil
}

func (m *SyncUpdateEntityRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type SyncUpdateEntityRet_RetStatus struct {
	// Required. Namespace of the metric.
	EntityTypeName *string `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Required. Namespace of the entity update.
	Namespace *string `protobuf:"bytes,2,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Required. Entity ID.
	EntityId *string `protobuf:"bytes,3,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	// Required. Return status for this particular entity update.
	Status               *InsightsErrorProto `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SyncUpdateEntityRet_RetStatus) Reset()         { *m = SyncUpdateEntityRet_RetStatus{} }
func (m *SyncUpdateEntityRet_RetStatus) String() string { return proto.CompactTextString(m) }
func (*SyncUpdateEntityRet_RetStatus) ProtoMessage()    {}
func (*SyncUpdateEntityRet_RetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{53, 0}
}

func (m *SyncUpdateEntityRet_RetStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncUpdateEntityRet_RetStatus.Unmarshal(m, b)
}
func (m *SyncUpdateEntityRet_RetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncUpdateEntityRet_RetStatus.Marshal(b, m, deterministic)
}
func (m *SyncUpdateEntityRet_RetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncUpdateEntityRet_RetStatus.Merge(m, src)
}
func (m *SyncUpdateEntityRet_RetStatus) XXX_Size() int {
	return xxx_messageInfo_SyncUpdateEntityRet_RetStatus.Size(m)
}
func (m *SyncUpdateEntityRet_RetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncUpdateEntityRet_RetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SyncUpdateEntityRet_RetStatus proto.InternalMessageInfo

const Default_SyncUpdateEntityRet_RetStatus_Namespace string = "_default_"

func (m *SyncUpdateEntityRet_RetStatus) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *SyncUpdateEntityRet_RetStatus) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_SyncUpdateEntityRet_RetStatus_Namespace
}

func (m *SyncUpdateEntityRet_RetStatus) GetEntityId() string {
	if m != nil && m.EntityId != nil {
		return *m.EntityId
	}
	return ""
}

func (m *SyncUpdateEntityRet_RetStatus) GetStatus() *InsightsErrorProto {
	if m != nil {
		return m.Status
	}
	return nil
}

// RPC to fetch entities belonging to a specific type or just one instance.
type GetEntitiesArg struct {
	// Optional.
	// If 'entity_guid_list' is empty, then all entites are returned.
	// For each entity_guid, if only 'entity_type_name' is specified,
	// all instances of the entity type are returned.
	EntityGuidList []*EntityGuid `protobuf:"bytes,1,rep,name=entity_guid_list,json=entityGuidList" json:"entity_guid_list,omitempty"`
	// Optional. If 'meta_data_only' set to true, then only the entity meta data
	// is returned, attributes are not returned.
	MetaDataOnly *bool `protobuf:"varint,2,opt,name=meta_data_only,json=metaDataOnly,def=0" json:"meta_data_only,omitempty"`
	// Optional. Entities to be returned as of 'timestamp_usecs'. If
	// not specified, the current list of entities is returned.
	TimestampUsecs *uint64 `protobuf:"varint,3,opt,name=timestamp_usecs,json=timestampUsecs" json:"timestamp_usecs,omitempty"`
	// Optional. Indicate to return deleted entities or not.
	IncludeDeletedEntities *bool `protobuf:"varint,4,opt,name=include_deleted_entities,json=includeDeletedEntities,def=0" json:"include_deleted_entities,omitempty"`
	// Optional. If set to kStrictConsistency, the request on the global data
	// will be forwarded to the master of the entity to be served.
	// The 'master' is a notion in Federation. It is the only place where
	// the write of the entity can happen. All slaves should only have the
	// read-only copy of the entity and the write will be forwarded to the
	// master to be processed.
	GlobalDataReadConsistency *GlobalDataReadConsistency `protobuf:"varint,6,opt,name=global_data_read_consistency,json=globalDataReadConsistency,enum=nutanix.insights.interface.GlobalDataReadConsistency,def=0" json:"global_data_read_consistency,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                   `json:"-"`
	XXX_unrecognized          []byte                     `json:"-"`
	XXX_sizecache             int32                      `json:"-"`
}

func (m *GetEntitiesArg) Reset()         { *m = GetEntitiesArg{} }
func (m *GetEntitiesArg) String() string { return proto.CompactTextString(m) }
func (*GetEntitiesArg) ProtoMessage()    {}
func (*GetEntitiesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{54}
}

func (m *GetEntitiesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntitiesArg.Unmarshal(m, b)
}
func (m *GetEntitiesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntitiesArg.Marshal(b, m, deterministic)
}
func (m *GetEntitiesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntitiesArg.Merge(m, src)
}
func (m *GetEntitiesArg) XXX_Size() int {
	return xxx_messageInfo_GetEntitiesArg.Size(m)
}
func (m *GetEntitiesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntitiesArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntitiesArg proto.InternalMessageInfo

const Default_GetEntitiesArg_MetaDataOnly bool = false
const Default_GetEntitiesArg_IncludeDeletedEntities bool = false
const Default_GetEntitiesArg_GlobalDataReadConsistency GlobalDataReadConsistency = GlobalDataReadConsistency_kEventual

func (m *GetEntitiesArg) GetEntityGuidList() []*EntityGuid {
	if m != nil {
		return m.EntityGuidList
	}
	return nil
}

func (m *GetEntitiesArg) GetMetaDataOnly() bool {
	if m != nil && m.MetaDataOnly != nil {
		return *m.MetaDataOnly
	}
	return Default_GetEntitiesArg_MetaDataOnly
}

func (m *GetEntitiesArg) GetTimestampUsecs() uint64 {
	if m != nil && m.TimestampUsecs != nil {
		return *m.TimestampUsecs
	}
	return 0
}

func (m *GetEntitiesArg) GetIncludeDeletedEntities() bool {
	if m != nil && m.IncludeDeletedEntities != nil {
		return *m.IncludeDeletedEntities
	}
	return Default_GetEntitiesArg_IncludeDeletedEntities
}

func (m *GetEntitiesArg) GetGlobalDataReadConsistency() GlobalDataReadConsistency {
	if m != nil && m.GlobalDataReadConsistency != nil {
		return *m.GlobalDataReadConsistency
	}
	return Default_GetEntitiesArg_GlobalDataReadConsistency
}

type GetEntitiesRet struct {
	// Required.
	Entity []*Entity `protobuf:"bytes,1,rep,name=entity" json:"entity,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetEntitiesRet) Reset()         { *m = GetEntitiesRet{} }
func (m *GetEntitiesRet) String() string { return proto.CompactTextString(m) }
func (*GetEntitiesRet) ProtoMessage()    {}
func (*GetEntitiesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{55}
}

func (m *GetEntitiesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntitiesRet.Unmarshal(m, b)
}
func (m *GetEntitiesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntitiesRet.Marshal(b, m, deterministic)
}
func (m *GetEntitiesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntitiesRet.Merge(m, src)
}
func (m *GetEntitiesRet) XXX_Size() int {
	return xxx_messageInfo_GetEntitiesRet.Size(m)
}
func (m *GetEntitiesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntitiesRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntitiesRet proto.InternalMessageInfo

func (m *GetEntitiesRet) GetEntity() []*Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *GetEntitiesRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// RPC to fetch entities trail in a specified window of time.
type GetEntitiesTrailArg struct {
	// Required. It must specify at least the entity type. For an entity type,
	// if no entity ids are specified, then it will get trails for all entities;
	// otherwise, it get trails for those specified ids.
	EntityGuidList []*EntityGuid `protobuf:"bytes,1,rep,name=entity_guid_list,json=entityGuidList" json:"entity_guid_list,omitempty"`
	// Optional. If 'meta_data_only' set to true, then only the entity meta data
	// is returned, attributes are not returned.
	MetaDataOnly *bool `protobuf:"varint,2,opt,name=meta_data_only,json=metaDataOnly,def=0" json:"meta_data_only,omitempty"`
	// Optional. The start time of the window which is inclusive.
	// If not specified then the trail is returned from the beginning
	StartTimestampUsecs *uint64 `protobuf:"varint,3,opt,name=start_timestamp_usecs,json=startTimestampUsecs" json:"start_timestamp_usecs,omitempty"`
	// Optional. The end time of the window which is exclusive.
	// If not specified then the trail is returned up to the latest.
	EndTimestampUsecs    *uint64  `protobuf:"varint,4,opt,name=end_timestamp_usecs,json=endTimestampUsecs" json:"end_timestamp_usecs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEntitiesTrailArg) Reset()         { *m = GetEntitiesTrailArg{} }
func (m *GetEntitiesTrailArg) String() string { return proto.CompactTextString(m) }
func (*GetEntitiesTrailArg) ProtoMessage()    {}
func (*GetEntitiesTrailArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{56}
}

func (m *GetEntitiesTrailArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntitiesTrailArg.Unmarshal(m, b)
}
func (m *GetEntitiesTrailArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntitiesTrailArg.Marshal(b, m, deterministic)
}
func (m *GetEntitiesTrailArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntitiesTrailArg.Merge(m, src)
}
func (m *GetEntitiesTrailArg) XXX_Size() int {
	return xxx_messageInfo_GetEntitiesTrailArg.Size(m)
}
func (m *GetEntitiesTrailArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntitiesTrailArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntitiesTrailArg proto.InternalMessageInfo

const Default_GetEntitiesTrailArg_MetaDataOnly bool = false

func (m *GetEntitiesTrailArg) GetEntityGuidList() []*EntityGuid {
	if m != nil {
		return m.EntityGuidList
	}
	return nil
}

func (m *GetEntitiesTrailArg) GetMetaDataOnly() bool {
	if m != nil && m.MetaDataOnly != nil {
		return *m.MetaDataOnly
	}
	return Default_GetEntitiesTrailArg_MetaDataOnly
}

func (m *GetEntitiesTrailArg) GetStartTimestampUsecs() uint64 {
	if m != nil && m.StartTimestampUsecs != nil {
		return *m.StartTimestampUsecs
	}
	return 0
}

func (m *GetEntitiesTrailArg) GetEndTimestampUsecs() uint64 {
	if m != nil && m.EndTimestampUsecs != nil {
		return *m.EndTimestampUsecs
	}
	return 0
}

type GetEntitiesTrailRet struct {
	// Each EntityList is a list of entity values for the same entity inside the
	// specified time window.
	EntitylistList []*EntityList `protobuf:"bytes,1,rep,name=entitylist_list,json=entitylistList" json:"entitylist_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetEntitiesTrailRet) Reset()         { *m = GetEntitiesTrailRet{} }
func (m *GetEntitiesTrailRet) String() string { return proto.CompactTextString(m) }
func (*GetEntitiesTrailRet) ProtoMessage()    {}
func (*GetEntitiesTrailRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{57}
}

func (m *GetEntitiesTrailRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntitiesTrailRet.Unmarshal(m, b)
}
func (m *GetEntitiesTrailRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntitiesTrailRet.Marshal(b, m, deterministic)
}
func (m *GetEntitiesTrailRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntitiesTrailRet.Merge(m, src)
}
func (m *GetEntitiesTrailRet) XXX_Size() int {
	return xxx_messageInfo_GetEntitiesTrailRet.Size(m)
}
func (m *GetEntitiesTrailRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntitiesTrailRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntitiesTrailRet proto.InternalMessageInfo

func (m *GetEntitiesTrailRet) GetEntitylistList() []*EntityList {
	if m != nil {
		return m.EntitylistList
	}
	return nil
}

func (m *GetEntitiesTrailRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Defines the leaf of an expression tree. It is either a column or a data
// value. Examples of a column are 'num_iops' and 'disk_size'. A value can
// be any string or numeric constant.
type LeafExpression struct {
	// Either 'column' or 'value' is required.
	Column *string    `protobuf:"bytes,1,opt,name=column" json:"column,omitempty"`
	Value  *DataValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// The namespace the column belongs to.
	ColumnNamespace *string `protobuf:"bytes,3,opt,name=column_namespace,json=columnNamespace,def=_default_" json:"column_namespace,omitempty"`
	// If 'column' is an entity type, the query processing pipeline creates
	// ancestor relationship tree through the parent links (aka foriegn key
	// references) in the entity. For instance, virtual_disk has a reference to
	// vm, and vm has a reference to cluster, insights will filter virtual_disk
	// entities based on the cluster to which they belong. If the client wants
	// insights server to make use of immediate entity-type attribute value for
	// filtering instead of the ancestor relationship, it could set
	// 'suppress_ancestor_tree_traversal' to true. Note that if the same column
	// is specified in multiple leaf expressions,
	// 'suppress_ancestor_tree_traversal' should be set for all the instances or
	// none.
	SuppressAncestorTreeTraversal *bool    `protobuf:"varint,4,opt,name=suppress_ancestor_tree_traversal,json=suppressAncestorTreeTraversal,def=1" json:"suppress_ancestor_tree_traversal,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *LeafExpression) Reset()         { *m = LeafExpression{} }
func (m *LeafExpression) String() string { return proto.CompactTextString(m) }
func (*LeafExpression) ProtoMessage()    {}
func (*LeafExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{58}
}

func (m *LeafExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeafExpression.Unmarshal(m, b)
}
func (m *LeafExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeafExpression.Marshal(b, m, deterministic)
}
func (m *LeafExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafExpression.Merge(m, src)
}
func (m *LeafExpression) XXX_Size() int {
	return xxx_messageInfo_LeafExpression.Size(m)
}
func (m *LeafExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafExpression.DiscardUnknown(m)
}

var xxx_messageInfo_LeafExpression proto.InternalMessageInfo

const Default_LeafExpression_ColumnNamespace string = "_default_"
const Default_LeafExpression_SuppressAncestorTreeTraversal bool = true

func (m *LeafExpression) GetColumn() string {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return ""
}

func (m *LeafExpression) GetValue() *DataValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *LeafExpression) GetColumnNamespace() string {
	if m != nil && m.ColumnNamespace != nil {
		return *m.ColumnNamespace
	}
	return Default_LeafExpression_ColumnNamespace
}

func (m *LeafExpression) GetSuppressAncestorTreeTraversal() bool {
	if m != nil && m.SuppressAncestorTreeTraversal != nil {
		return *m.SuppressAncestorTreeTraversal
	}
	return Default_LeafExpression_SuppressAncestorTreeTraversal
}

// This defines an expression that evaluates to a non-boolean value, for
// example: column1 + column2, column1.
type Expression struct {
	Lhs                  *Expression          `protobuf:"bytes,1,opt,name=lhs" json:"lhs,omitempty"`
	Operator             *Expression_Operator `protobuf:"varint,2,opt,name=operator,enum=nutanix.insights.interface.Expression_Operator" json:"operator,omitempty"`
	Rhs                  *Expression          `protobuf:"bytes,3,opt,name=rhs" json:"rhs,omitempty"`
	Leaf                 *LeafExpression      `protobuf:"bytes,4,opt,name=leaf" json:"leaf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Expression) Reset()         { *m = Expression{} }
func (m *Expression) String() string { return proto.CompactTextString(m) }
func (*Expression) ProtoMessage()    {}
func (*Expression) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{59}
}

func (m *Expression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Expression.Unmarshal(m, b)
}
func (m *Expression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Expression.Marshal(b, m, deterministic)
}
func (m *Expression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expression.Merge(m, src)
}
func (m *Expression) XXX_Size() int {
	return xxx_messageInfo_Expression.Size(m)
}
func (m *Expression) XXX_DiscardUnknown() {
	xxx_messageInfo_Expression.DiscardUnknown(m)
}

var xxx_messageInfo_Expression proto.InternalMessageInfo

func (m *Expression) GetLhs() *Expression {
	if m != nil {
		return m.Lhs
	}
	return nil
}

func (m *Expression) GetOperator() Expression_Operator {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return Expression_kPlus
}

func (m *Expression) GetRhs() *Expression {
	if m != nil {
		return m.Rhs
	}
	return nil
}

func (m *Expression) GetLeaf() *LeafExpression {
	if m != nil {
		return m.Leaf
	}
	return nil
}

// This defines a comparison expression that evaluates to a boolean value, for
// example: lhs != rhs, lhs >= rhs and so on.
type ComparisonExpression struct {
	// Required.
	Lhs *Expression `protobuf:"bytes,1,opt,name=lhs" json:"lhs,omitempty"`
	// Required.
	Operator *ComparisonExpression_Operator `protobuf:"varint,2,opt,name=operator,enum=nutanix.insights.interface.ComparisonExpression_Operator" json:"operator,omitempty"`
	// Required.
	Rhs                  *Expression `protobuf:"bytes,3,opt,name=rhs" json:"rhs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ComparisonExpression) Reset()         { *m = ComparisonExpression{} }
func (m *ComparisonExpression) String() string { return proto.CompactTextString(m) }
func (*ComparisonExpression) ProtoMessage()    {}
func (*ComparisonExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{60}
}

func (m *ComparisonExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComparisonExpression.Unmarshal(m, b)
}
func (m *ComparisonExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComparisonExpression.Marshal(b, m, deterministic)
}
func (m *ComparisonExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComparisonExpression.Merge(m, src)
}
func (m *ComparisonExpression) XXX_Size() int {
	return xxx_messageInfo_ComparisonExpression.Size(m)
}
func (m *ComparisonExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_ComparisonExpression.DiscardUnknown(m)
}

var xxx_messageInfo_ComparisonExpression proto.InternalMessageInfo

func (m *ComparisonExpression) GetLhs() *Expression {
	if m != nil {
		return m.Lhs
	}
	return nil
}

func (m *ComparisonExpression) GetOperator() ComparisonExpression_Operator {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ComparisonExpression_kEQ
}

func (m *ComparisonExpression) GetRhs() *Expression {
	if m != nil {
		return m.Rhs
	}
	return nil
}

// Defines a general boolean expression, as specified by the following grammar:
//
// BooleanExpression -> BooleanExpression BooleanOperator BooleanExpression |
//                      NOT BooleanExpression |
//                      ComparisonExpression
// BooleanOperator   -> AND | OR
//
// ComparisonExpression -> Expression ComparisonOperator Expression
// ComparisonOperator   -> EQ | NE | GT | GE | LT | LE | LIKE | CONTAINS | IN
//
// Expression         -> Expression ExpressionOperator Expression |
//                       LeafExpression
// ExpressionOperator -> PLUS | MINUS | MULT | DIV | MOD | CONCAT
// LeafExpression     -> Column | Value
type BooleanExpression struct {
	Lhs                  *BooleanExpression          `protobuf:"bytes,1,opt,name=lhs" json:"lhs,omitempty"`
	Operator             *BooleanExpression_Operator `protobuf:"varint,2,opt,name=operator,enum=nutanix.insights.interface.BooleanExpression_Operator" json:"operator,omitempty"`
	Rhs                  *BooleanExpression          `protobuf:"bytes,3,opt,name=rhs" json:"rhs,omitempty"`
	ComparisonExpr       *ComparisonExpression       `protobuf:"bytes,4,opt,name=comparison_expr,json=comparisonExpr" json:"comparison_expr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BooleanExpression) Reset()         { *m = BooleanExpression{} }
func (m *BooleanExpression) String() string { return proto.CompactTextString(m) }
func (*BooleanExpression) ProtoMessage()    {}
func (*BooleanExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{61}
}

func (m *BooleanExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BooleanExpression.Unmarshal(m, b)
}
func (m *BooleanExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BooleanExpression.Marshal(b, m, deterministic)
}
func (m *BooleanExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanExpression.Merge(m, src)
}
func (m *BooleanExpression) XXX_Size() int {
	return xxx_messageInfo_BooleanExpression.Size(m)
}
func (m *BooleanExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanExpression.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanExpression proto.InternalMessageInfo

func (m *BooleanExpression) GetLhs() *BooleanExpression {
	if m != nil {
		return m.Lhs
	}
	return nil
}

func (m *BooleanExpression) GetOperator() BooleanExpression_Operator {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return BooleanExpression_kAnd
}

func (m *BooleanExpression) GetRhs() *BooleanExpression {
	if m != nil {
		return m.Rhs
	}
	return nil
}

func (m *BooleanExpression) GetComparisonExpr() *ComparisonExpression {
	if m != nil {
		return m.ComparisonExpr
	}
	return nil
}

// Specifies a column that needs to be aggregated for each group of entities
// in a group-by query, along with the operator to perform the aggregation.
type QueryAggregateColumn struct {
	// Required.
	Column *string `protobuf:"bytes,1,opt,name=column" json:"column,omitempty"`
	// Optional. The aggregation operator to use to aggregate 'column'.
	// If not specified here, 'column' should be a registered metric / attribute
	// with the the aggregation operator specified as part of registration.
	Operator *MetricType_Operator `protobuf:"varint,2,opt,name=operator,enum=nutanix.insights.interface.MetricType_Operator" json:"operator,omitempty"`
	// Optional. The operator to use for downsampling the column values.
	// If not specified here, 'column' should be a registered metric / attribute
	// with the downsampling operator specified as part of registration.
	DownSamplingOperator *MetricType_Operator `protobuf:"varint,3,opt,name=down_sampling_operator,json=downSamplingOperator,enum=nutanix.insights.interface.MetricType_Operator" json:"down_sampling_operator,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// Set this field if the column belongs to a namespace other than '_default_'.
	ColumnNamespace *string `protobuf:"bytes,4,opt,name=column_namespace,json=columnNamespace,def=_default_" json:"column_namespace,omitempty"`
	// Optional. Specified only if joins are requested on an ancestor entity
	// type. For ancestor joins, the query response will contain the 'column'
	// values of the ancestor in the 'SummaryResults'. Note that for ancestor
	// joins, the 'column' values are not really aggregated - its just the
	// ancestor's 'column' value. The aggregation 'operator' is not used for
	// ancestor joins. Currently, the 'ancestor_entity_type' can only be the
	// 'group_by_column' attribute.
	AncestorEntityType *string `protobuf:"bytes,5,opt,name=ancestor_entity_type,json=ancestorEntityType" json:"ancestor_entity_type,omitempty"`
	// Optional. Specified if we want to ignore missing values from the
	// calculation of aggregate values. If set to false, values at missing
	// timestamps are filled with the previous values (default behaviour). If set
	// to true, values at missing timestamps are ignored from calculations.
	IgnoreMissingValues  *bool    `protobuf:"varint,6,opt,name=ignore_missing_values,json=ignoreMissingValues,def=0" json:"ignore_missing_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryAggregateColumn) Reset()         { *m = QueryAggregateColumn{} }
func (m *QueryAggregateColumn) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateColumn) ProtoMessage()    {}
func (*QueryAggregateColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{62}
}

func (m *QueryAggregateColumn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryAggregateColumn.Unmarshal(m, b)
}
func (m *QueryAggregateColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryAggregateColumn.Marshal(b, m, deterministic)
}
func (m *QueryAggregateColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateColumn.Merge(m, src)
}
func (m *QueryAggregateColumn) XXX_Size() int {
	return xxx_messageInfo_QueryAggregateColumn.Size(m)
}
func (m *QueryAggregateColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateColumn.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateColumn proto.InternalMessageInfo

const Default_QueryAggregateColumn_ColumnNamespace string = "_default_"
const Default_QueryAggregateColumn_IgnoreMissingValues bool = false

func (m *QueryAggregateColumn) GetColumn() string {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return ""
}

func (m *QueryAggregateColumn) GetOperator() MetricType_Operator {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return MetricType_kSum
}

func (m *QueryAggregateColumn) GetDownSamplingOperator() MetricType_Operator {
	if m != nil && m.DownSamplingOperator != nil {
		return *m.DownSamplingOperator
	}
	return MetricType_kSum
}

func (m *QueryAggregateColumn) GetColumnNamespace() string {
	if m != nil && m.ColumnNamespace != nil {
		return *m.ColumnNamespace
	}
	return Default_QueryAggregateColumn_ColumnNamespace
}

func (m *QueryAggregateColumn) GetAncestorEntityType() string {
	if m != nil && m.AncestorEntityType != nil {
		return *m.AncestorEntityType
	}
	return ""
}

func (m *QueryAggregateColumn) GetIgnoreMissingValues() bool {
	if m != nil && m.IgnoreMissingValues != nil {
		return *m.IgnoreMissingValues
	}
	return Default_QueryAggregateColumn_IgnoreMissingValues
}

// Specifies a column that needs to be returned in its raw form, for each
// entity that the query applies to (with entities grouped appropriately if
// the query is a group-by query).
type QueryRawColumn struct {
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// Set this field if the column belongs to a namespace other than '_default_'.
	ColumnNamespace *string `protobuf:"bytes,3,opt,name=column_namespace,json=columnNamespace,def=_default_" json:"column_namespace,omitempty"`
	// Required.
	Column *string `protobuf:"bytes,1,opt,name=column" json:"column,omitempty"`
	// Optional. The operator to use for downsampling the column values.
	// If not specified here, 'column' should be a registered metric / attribute
	// with the downsampling operator specified as part of registration.
	DownSamplingOperator *MetricType_Operator `protobuf:"varint,2,opt,name=down_sampling_operator,json=downSamplingOperator,enum=nutanix.insights.interface.MetricType_Operator" json:"down_sampling_operator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *QueryRawColumn) Reset()         { *m = QueryRawColumn{} }
func (m *QueryRawColumn) String() string { return proto.CompactTextString(m) }
func (*QueryRawColumn) ProtoMessage()    {}
func (*QueryRawColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{63}
}

func (m *QueryRawColumn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRawColumn.Unmarshal(m, b)
}
func (m *QueryRawColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRawColumn.Marshal(b, m, deterministic)
}
func (m *QueryRawColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRawColumn.Merge(m, src)
}
func (m *QueryRawColumn) XXX_Size() int {
	return xxx_messageInfo_QueryRawColumn.Size(m)
}
func (m *QueryRawColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRawColumn.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRawColumn proto.InternalMessageInfo

const Default_QueryRawColumn_ColumnNamespace string = "_default_"

func (m *QueryRawColumn) GetColumnNamespace() string {
	if m != nil && m.ColumnNamespace != nil {
		return *m.ColumnNamespace
	}
	return Default_QueryRawColumn_ColumnNamespace
}

func (m *QueryRawColumn) GetColumn() string {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return ""
}

func (m *QueryRawColumn) GetDownSamplingOperator() MetricType_Operator {
	if m != nil && m.DownSamplingOperator != nil {
		return *m.DownSamplingOperator
	}
	return MetricType_kSum
}

// Specifies grouping of entities in a query. Also specifies the list of
// columns that need to be aggregated for each entity group, and the list
// of columns whose raw values need to be returned for each entity.
// TODO (ramesh): incorporate 2D groups.
type QueryGroupBy struct {
	// Optional. If not specified, this is not a group-by query and none of the
	// other fields specific to group-by queries should be specified. The query
	// then is a raw query and fields related to raw results can be specified.
	GroupByColumn *string `protobuf:"bytes,1,opt,name=group_by_column,json=groupByColumn" json:"group_by_column,omitempty"`
	// Only valid for group-by queries.
	GroupByColumnType *QueryGroupBy_GroupByColumnType `protobuf:"varint,2,opt,name=group_by_column_type,json=groupByColumnType,enum=nutanix.insights.interface.QueryGroupBy_GroupByColumnType,def=0" json:"group_by_column_type,omitempty"`
	// Only valid for group-by queries.
	// Required for continuous column values. Specifies the number of buckets
	// into which the range of group-by column values need to be divided. For
	// example: if the group-by column is VM memory usage and the memory usage
	// for all VMs being grouped falls between 1GB and 3GB, then the buckets
	// with 'num_buckets'=2 would be [1, 2) and [2, 3].
	NumBuckets *uint32 `protobuf:"varint,3,opt,name=num_buckets,json=numBuckets" json:"num_buckets,omitempty"`
	// Optional. Meaningful only for continuous column values. Specifies the
	// values to which the bucket values should be rounded to, so that they are
	// not arbitrary numbers. For example: if memory usage of VMs being grouped
	// falls between 1250MB and 3750MB, and num_buckets is 3, then without
	// boundaries the buckets would be [1250, 2080), [2080, 2910), [2910, 3750],
	// which are not very user-friendly. Specifying a bucket_boundary of 1000
	// would make the buckets a more user-friendly [1000, 2000), [2000, 3000),
	// [3000, 4000].
	// Only valid for group-by queries.
	BucketBoundary *uint32 `protobuf:"varint,4,opt,name=bucket_boundary,json=bucketBoundary" json:"bucket_boundary,omitempty"`
	// Same as bucket_boundary field but supports a larger range of values.
	// Clients are recommended to use large_bucket_boundary instead of
	// bucket_boundary in the query arg going forward. However, queries would
	// still work with bucket_boundary if the value fits in the range of uint32.
	// The value of bucket_boundary, if set, would be copied to
	// large_bucket_boundary during query evaluation for further processing.
	LargeBucketBoundary *uint64 `protobuf:"varint,18,opt,name=large_bucket_boundary,json=largeBucketBoundary" json:"large_bucket_boundary,omitempty"`
	// The list of columns that needed to be aggregated.
	// Only valid for group-by queries.
	AggregateColumns []*QueryAggregateColumn `protobuf:"bytes,5,rep,name=aggregate_columns,json=aggregateColumns" json:"aggregate_columns,omitempty"`
	// The 'sort_column' in this field should be 'group_by_column' or one of the
	// 'aggregate_columns' (otherwise, we don't have a single value per group
	// that can be used to sort the groups). If 'sort_column' is the same as
	// 'group_by_column' and the 'aggregate_column', the query would use the
	// 'group_by_column' value for sorting. Also, sorting by a column that is
	// duplicated in aggregate_columns isn't supported.
	// Only valid for group-by queries.
	GroupSortOrder *QueryOrderBy `protobuf:"bytes,6,opt,name=group_sort_order,json=groupSortOrder" json:"group_sort_order,omitempty"`
	// The maximum number of groups to return in the result.
	// Only valid for group-by queries.
	GroupLimit *QueryLimit `protobuf:"bytes,7,opt,name=group_limit,json=groupLimit" json:"group_limit,omitempty"`
	// The list of columns for which raw values need to be returned.
	RawColumns []*QueryRawColumn `protobuf:"bytes,8,rep,name=raw_columns,json=rawColumns" json:"raw_columns,omitempty"`
	// Downsampling interval in seconds. For bucketized metrics, if
	// 'down_sampling_interval_secs' is less than the metrics sampling interval,
	// the metrics sampling interval will be used instead. The number of down
	// sampled values returned is calculated by
	// (ceiling(end_time_usecs, down_sampling_interval_secs) -
	//  floor(start_time_usecs, down_sampling_interval_secs)) /
	//   down_sampling_interval_secs
	// Therefore depenidng on the values of start and end times, the same time
	// range will result in 1 or 2 values being returned.
	DownSamplingIntervalSecs *uint32 `protobuf:"varint,9,opt,name=down_sampling_interval_secs,json=downSamplingIntervalSecs" json:"down_sampling_interval_secs,omitempty"`
	// The entities within each group for which the raw results would be
	// returned, are sorted by the value of this column.
	RawSortOrder *QueryOrderBy `protobuf:"bytes,10,opt,name=raw_sort_order,json=rawSortOrder" json:"raw_sort_order,omitempty"`
	// Limit on the number of raw results returned for each group.
	RawLimit *QueryLimit `protobuf:"bytes,11,opt,name=raw_limit,json=rawLimit" json:"raw_limit,omitempty"`
	// Downsampling interval to use when fetching metric data from the
	// Insights store for this query.
	StoreDsInterval *MetricDataDownSamplingInterval `protobuf:"bytes,12,opt,name=store_ds_interval,json=storeDsInterval" json:"store_ds_interval,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// Set this field if the metric belongs to a namespace other than '_default_'.
	GroupByColumnNamespace *string `protobuf:"bytes,13,opt,name=group_by_column_namespace,json=groupByColumnNamespace,def=_default_" json:"group_by_column_namespace,omitempty"`
	// Optional. This is part of specifying Multi Dimensional
	// GroupBy. Each sub groupby clause requires 'group_by_column' and
	// its properties to be specified. Currently if sub groupby is
	// specified, the groupby properties are allowed in the innermost
	// sub groupby only.
	SubGroupBy *QueryGroupBy `protobuf:"bytes,14,opt,name=sub_group_by,json=subGroupBy" json:"sub_group_by,omitempty"`
	// If 'group_by_column' is an entity type, query processing pipeline creates
	// ancestor relationship tree through the parent links (aka foriegn key
	// references) in the entity. For instance, virtual_disk has a reference to
	// vm, and vm has a reference to cluster, insights will group virtual_disk
	// entities based on the cluster to which they belong. If the client wants
	// insights server to make use of immediate entity-type attribute value for
	// the group instead of the ancestor relationship, it could set
	// 'suppress_ancestor_tree_traversal' to true.
	// Currently, in case of multi-dimensional grouping, if ancestor tree
	// traversal is suppressed for a column, it is necessary for rest of the
	// group_by columns to either be non-ancestors or
	// 'suppress_ancestor_tree_traversal' should be set for them as well.
	SuppressAncestorTreeTraversal *bool `protobuf:"varint,15,opt,name=suppress_ancestor_tree_traversal,json=suppressAncestorTreeTraversal,def=1" json:"suppress_ancestor_tree_traversal,omitempty"`
	// Used to set user-defined buckets for continuous grouping. If set with
	// values {v1, v2, v3 ... vn-1, vn }, the groups will be [int64_min, v1),
	// [v1, v2), [v2, v3) .... [vn, int64_max]. These groups will have the
	// starting value as the 'group_by_column_value'. The value of int64_min is
	// -9223372036854775808 and the value of int64_max is 9223372036854775807.
	// Entities with values which don't have an int64 value set will be put in
	// the default set.
	// The values given {v1, v2 .... vn} must be in strictly ascending order.
	// Otherwise, the query will result in a kQueryGroupByInvalidBucketIntervals
	// error.
	// This field shall only be set for continuous grouping. Otherwise, a
	// kQueryGroupByInvalidBucketIntervals error will be returned.
	// Currently, this is supported only for single dimensional grouping.
	// Otherwise, a kQueryGroupByInvalidBucketIntervals error will be returned.
	// Currently, this is supported only for int64 value types in DataValue and
	// regardless of the data value type of the metric, only the int64 values
	// set here in bucket_interval_separators will be used.
	BucketIntervalSeparators []*DataValue `protobuf:"bytes,16,rep,name=bucket_interval_separators,json=bucketIntervalSeparators" json:"bucket_interval_separators,omitempty"`
	// Lookup queries that can be used to join entities from other entity types.
	// Currently lookup queries have the following restrictions:
	//  - cannot have group_by_column
	//  - must have one lookup condition (ComparisonExpression for column
	//    in the parent query and column in a lookup query)
	//  - the lookup condition can use only kEQ, kIN or kContains
	//  - the lookup condition can either be the only condition or the first
	//    ComparisonExpression in the where_clause followed by kAND operator
	//  - the lookup condition must be on a raw_column
	//  - lookup attributes in the parent results must be singular values for
	//    kEQ and kContains operators (list values are ignored)
	//  - lookup attributes on lookup side must be singular values for kEQ and
	//    kContains operators
	// Lookup queries can be nested (i.e. a lookup query can contain
	// another lookup query).
	LookupQuery          []*Query `protobuf:"bytes,17,rep,name=lookup_query,json=lookupQuery" json:"lookup_query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryGroupBy) Reset()         { *m = QueryGroupBy{} }
func (m *QueryGroupBy) String() string { return proto.CompactTextString(m) }
func (*QueryGroupBy) ProtoMessage()    {}
func (*QueryGroupBy) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{64}
}

func (m *QueryGroupBy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryGroupBy.Unmarshal(m, b)
}
func (m *QueryGroupBy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryGroupBy.Marshal(b, m, deterministic)
}
func (m *QueryGroupBy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGroupBy.Merge(m, src)
}
func (m *QueryGroupBy) XXX_Size() int {
	return xxx_messageInfo_QueryGroupBy.Size(m)
}
func (m *QueryGroupBy) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGroupBy.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGroupBy proto.InternalMessageInfo

const Default_QueryGroupBy_GroupByColumnType QueryGroupBy_GroupByColumnType = QueryGroupBy_kDiscrete
const Default_QueryGroupBy_GroupByColumnNamespace string = "_default_"
const Default_QueryGroupBy_SuppressAncestorTreeTraversal bool = true

func (m *QueryGroupBy) GetGroupByColumn() string {
	if m != nil && m.GroupByColumn != nil {
		return *m.GroupByColumn
	}
	return ""
}

func (m *QueryGroupBy) GetGroupByColumnType() QueryGroupBy_GroupByColumnType {
	if m != nil && m.GroupByColumnType != nil {
		return *m.GroupByColumnType
	}
	return Default_QueryGroupBy_GroupByColumnType
}

func (m *QueryGroupBy) GetNumBuckets() uint32 {
	if m != nil && m.NumBuckets != nil {
		return *m.NumBuckets
	}
	return 0
}

func (m *QueryGroupBy) GetBucketBoundary() uint32 {
	if m != nil && m.BucketBoundary != nil {
		return *m.BucketBoundary
	}
	return 0
}

func (m *QueryGroupBy) GetLargeBucketBoundary() uint64 {
	if m != nil && m.LargeBucketBoundary != nil {
		return *m.LargeBucketBoundary
	}
	return 0
}

func (m *QueryGroupBy) GetAggregateColumns() []*QueryAggregateColumn {
	if m != nil {
		return m.AggregateColumns
	}
	return nil
}

func (m *QueryGroupBy) GetGroupSortOrder() *QueryOrderBy {
	if m != nil {
		return m.GroupSortOrder
	}
	return nil
}

func (m *QueryGroupBy) GetGroupLimit() *QueryLimit {
	if m != nil {
		return m.GroupLimit
	}
	return nil
}

func (m *QueryGroupBy) GetRawColumns() []*QueryRawColumn {
	if m != nil {
		return m.RawColumns
	}
	return nil
}

func (m *QueryGroupBy) GetDownSamplingIntervalSecs() uint32 {
	if m != nil && m.DownSamplingIntervalSecs != nil {
		return *m.DownSamplingIntervalSecs
	}
	return 0
}

func (m *QueryGroupBy) GetRawSortOrder() *QueryOrderBy {
	if m != nil {
		return m.RawSortOrder
	}
	return nil
}

func (m *QueryGroupBy) GetRawLimit() *QueryLimit {
	if m != nil {
		return m.RawLimit
	}
	return nil
}

func (m *QueryGroupBy) GetStoreDsInterval() *MetricDataDownSamplingInterval {
	if m != nil {
		return m.StoreDsInterval
	}
	return nil
}

func (m *QueryGroupBy) GetGroupByColumnNamespace() string {
	if m != nil && m.GroupByColumnNamespace != nil {
		return *m.GroupByColumnNamespace
	}
	return Default_QueryGroupBy_GroupByColumnNamespace
}

func (m *QueryGroupBy) GetSubGroupBy() *QueryGroupBy {
	if m != nil {
		return m.SubGroupBy
	}
	return nil
}

func (m *QueryGroupBy) GetSuppressAncestorTreeTraversal() bool {
	if m != nil && m.SuppressAncestorTreeTraversal != nil {
		return *m.SuppressAncestorTreeTraversal
	}
	return Default_QueryGroupBy_SuppressAncestorTreeTraversal
}

func (m *QueryGroupBy) GetBucketIntervalSeparators() []*DataValue {
	if m != nil {
		return m.BucketIntervalSeparators
	}
	return nil
}

func (m *QueryGroupBy) GetLookupQuery() []*Query {
	if m != nil {
		return m.LookupQuery
	}
	return nil
}

// Encapsulates entity with metrics and lookup results (used in queries
// that have lookup subqueries).
type EntityWithMetricAndLookup struct {
	// Required.
	EntityWithMetrics *EntityWithMetric `protobuf:"bytes,1,opt,name=entity_with_metrics,json=entityWithMetrics" json:"entity_with_metrics,omitempty"`
	// Lookup query results.  The number and order of these would match
	// the number and order of lookup queries at the corresponding nesting
	// level.
	LookupQueryResults   []*LookupQueryResult `protobuf:"bytes,2,rep,name=lookup_query_results,json=lookupQueryResults" json:"lookup_query_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EntityWithMetricAndLookup) Reset()         { *m = EntityWithMetricAndLookup{} }
func (m *EntityWithMetricAndLookup) String() string { return proto.CompactTextString(m) }
func (*EntityWithMetricAndLookup) ProtoMessage()    {}
func (*EntityWithMetricAndLookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{65}
}

func (m *EntityWithMetricAndLookup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityWithMetricAndLookup.Unmarshal(m, b)
}
func (m *EntityWithMetricAndLookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityWithMetricAndLookup.Marshal(b, m, deterministic)
}
func (m *EntityWithMetricAndLookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityWithMetricAndLookup.Merge(m, src)
}
func (m *EntityWithMetricAndLookup) XXX_Size() int {
	return xxx_messageInfo_EntityWithMetricAndLookup.Size(m)
}
func (m *EntityWithMetricAndLookup) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityWithMetricAndLookup.DiscardUnknown(m)
}

var xxx_messageInfo_EntityWithMetricAndLookup proto.InternalMessageInfo

func (m *EntityWithMetricAndLookup) GetEntityWithMetrics() *EntityWithMetric {
	if m != nil {
		return m.EntityWithMetrics
	}
	return nil
}

func (m *EntityWithMetricAndLookup) GetLookupQueryResults() []*LookupQueryResult {
	if m != nil {
		return m.LookupQueryResults
	}
	return nil
}

// Defines result for queries that have lookup subqueries.
type LookupQueryResult struct {
	// Results.
	Results              []*EntityWithMetricAndLookup `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *LookupQueryResult) Reset()         { *m = LookupQueryResult{} }
func (m *LookupQueryResult) String() string { return proto.CompactTextString(m) }
func (*LookupQueryResult) ProtoMessage()    {}
func (*LookupQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{66}
}

func (m *LookupQueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupQueryResult.Unmarshal(m, b)
}
func (m *LookupQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupQueryResult.Marshal(b, m, deterministic)
}
func (m *LookupQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupQueryResult.Merge(m, src)
}
func (m *LookupQueryResult) XXX_Size() int {
	return xxx_messageInfo_LookupQueryResult.Size(m)
}
func (m *LookupQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_LookupQueryResult proto.InternalMessageInfo

func (m *LookupQueryResult) GetResults() []*EntityWithMetricAndLookup {
	if m != nil {
		return m.Results
	}
	return nil
}

// Defines the result for each group returned by a query. If a query does not
// have a group-by clause and only has raw select clauses, then a single group
// is returned without 'group_by_column_value' or 'group_summaries'.
type QueryGroupResult struct {
	// For a discrete group_by_column, specifies the exact value of the column.
	// For a continuous column, specifies the lower bound of the bucket for this
	// group. Meaningful only if the query has a group-by clause.
	GroupByColumnValue *DataValue `protobuf:"bytes,1,opt,name=group_by_column_value,json=groupByColumnValue" json:"group_by_column_value,omitempty"`
	// Specifies the aggregate column values for this group, which can be
	// aggregate values or ancestor column values. Meaningful only if the query
	// has a group-by clause. If the query has a time range specified, historical
	// aggregates are returned for each column, otherwise a single aggregate is
	// returned for each column.
	GroupSummaries []*QueryGroupResult_SummaryResult `protobuf:"bytes,2,rep,name=group_summaries,json=groupSummaries" json:"group_summaries,omitempty"`
	// Specifies the raw column values. If the query has a time range specified,
	// historical values are returned for each column, otherwise a single value
	// is returned for each column. For queries that don't request raw_columns,
	// 'raw_results' will just contain the guids of entities that match the given
	// criteria. For instance, if the query was to return all 'vm' entities,
	// raw_results will contain the guid of all vm entities.
	RawResults []*EntityWithMetric `protobuf:"bytes,3,rep,name=raw_results,json=rawResults" json:"raw_results,omitempty"`
	// Total number of entities in the group. This may be greater than the size
	// of 'raw_results' (i.e., not all entities may be returned in 'raw_results')
	// because of 'raw_limit'.
	TotalEntityCount *int64 `protobuf:"varint,4,opt,name=total_entity_count,json=totalEntityCount" json:"total_entity_count,omitempty"`
	// Multidimensional GroupBy results are nested in the order specified.
	SubGroupResults []*QueryGroupResult `protobuf:"bytes,5,rep,name=sub_group_results,json=subGroupResults" json:"sub_group_results,omitempty"`
	// Lookup query results.  If a lookup query is present, raw_results will
	// be empty, raw results will be stored in lookup_query_results.
	LookupQueryResults   []*EntityWithMetricAndLookup `protobuf:"bytes,6,rep,name=lookup_query_results,json=lookupQueryResults" json:"lookup_query_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *QueryGroupResult) Reset()         { *m = QueryGroupResult{} }
func (m *QueryGroupResult) String() string { return proto.CompactTextString(m) }
func (*QueryGroupResult) ProtoMessage()    {}
func (*QueryGroupResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{67}
}

func (m *QueryGroupResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryGroupResult.Unmarshal(m, b)
}
func (m *QueryGroupResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryGroupResult.Marshal(b, m, deterministic)
}
func (m *QueryGroupResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGroupResult.Merge(m, src)
}
func (m *QueryGroupResult) XXX_Size() int {
	return xxx_messageInfo_QueryGroupResult.Size(m)
}
func (m *QueryGroupResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGroupResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGroupResult proto.InternalMessageInfo

func (m *QueryGroupResult) GetGroupByColumnValue() *DataValue {
	if m != nil {
		return m.GroupByColumnValue
	}
	return nil
}

func (m *QueryGroupResult) GetGroupSummaries() []*QueryGroupResult_SummaryResult {
	if m != nil {
		return m.GroupSummaries
	}
	return nil
}

func (m *QueryGroupResult) GetRawResults() []*EntityWithMetric {
	if m != nil {
		return m.RawResults
	}
	return nil
}

func (m *QueryGroupResult) GetTotalEntityCount() int64 {
	if m != nil && m.TotalEntityCount != nil {
		return *m.TotalEntityCount
	}
	return 0
}

func (m *QueryGroupResult) GetSubGroupResults() []*QueryGroupResult {
	if m != nil {
		return m.SubGroupResults
	}
	return nil
}

func (m *QueryGroupResult) GetLookupQueryResults() []*EntityWithMetricAndLookup {
	if m != nil {
		return m.LookupQueryResults
	}
	return nil
}

type QueryGroupResult_SummaryResult struct {
	SummaryData     *MetricData          `protobuf:"bytes,1,opt,name=summary_data,json=summaryData" json:"summary_data,omitempty"`
	SummaryOperator *MetricType_Operator `protobuf:"varint,2,opt,name=summary_operator,json=summaryOperator,enum=nutanix.insights.interface.MetricType_Operator" json:"summary_operator,omitempty"`
	// Optional. Set only for ancestor joins, where the 'summary_data' contains
	// the metric data for the requested ancestor 'column'.
	AncestorEntityType   *string  `protobuf:"bytes,3,opt,name=ancestor_entity_type,json=ancestorEntityType" json:"ancestor_entity_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryGroupResult_SummaryResult) Reset()         { *m = QueryGroupResult_SummaryResult{} }
func (m *QueryGroupResult_SummaryResult) String() string { return proto.CompactTextString(m) }
func (*QueryGroupResult_SummaryResult) ProtoMessage()    {}
func (*QueryGroupResult_SummaryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{67, 0}
}

func (m *QueryGroupResult_SummaryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryGroupResult_SummaryResult.Unmarshal(m, b)
}
func (m *QueryGroupResult_SummaryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryGroupResult_SummaryResult.Marshal(b, m, deterministic)
}
func (m *QueryGroupResult_SummaryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGroupResult_SummaryResult.Merge(m, src)
}
func (m *QueryGroupResult_SummaryResult) XXX_Size() int {
	return xxx_messageInfo_QueryGroupResult_SummaryResult.Size(m)
}
func (m *QueryGroupResult_SummaryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGroupResult_SummaryResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGroupResult_SummaryResult proto.InternalMessageInfo

func (m *QueryGroupResult_SummaryResult) GetSummaryData() *MetricData {
	if m != nil {
		return m.SummaryData
	}
	return nil
}

func (m *QueryGroupResult_SummaryResult) GetSummaryOperator() MetricType_Operator {
	if m != nil && m.SummaryOperator != nil {
		return *m.SummaryOperator
	}
	return MetricType_kSum
}

func (m *QueryGroupResult_SummaryResult) GetAncestorEntityType() string {
	if m != nil && m.AncestorEntityType != nil {
		return *m.AncestorEntityType
	}
	return ""
}

type QueryOrderBy struct {
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// Set this field if the column belongs to a namespace other than '_default_'.
	SortColumnNamespace *string                 `protobuf:"bytes,4,opt,name=sort_column_namespace,json=sortColumnNamespace,def=_default_" json:"sort_column_namespace,omitempty"`
	SortColumn          *string                 `protobuf:"bytes,1,opt,name=sort_column,json=sortColumn" json:"sort_column,omitempty"`
	SortOrder           *QueryOrderBy_SortOrder `protobuf:"varint,2,opt,name=sort_order,json=sortOrder,enum=nutanix.insights.interface.QueryOrderBy_SortOrder,def=0" json:"sort_order,omitempty"`
	// TODO(swagat) : Replace default to kLatest after implementing it.
	SortKey              *QueryOrderBy_SortKey `protobuf:"varint,3,opt,name=sort_key,json=sortKey,enum=nutanix.insights.interface.QueryOrderBy_SortKey,def=3" json:"sort_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *QueryOrderBy) Reset()         { *m = QueryOrderBy{} }
func (m *QueryOrderBy) String() string { return proto.CompactTextString(m) }
func (*QueryOrderBy) ProtoMessage()    {}
func (*QueryOrderBy) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{68}
}

func (m *QueryOrderBy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryOrderBy.Unmarshal(m, b)
}
func (m *QueryOrderBy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryOrderBy.Marshal(b, m, deterministic)
}
func (m *QueryOrderBy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderBy.Merge(m, src)
}
func (m *QueryOrderBy) XXX_Size() int {
	return xxx_messageInfo_QueryOrderBy.Size(m)
}
func (m *QueryOrderBy) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderBy.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderBy proto.InternalMessageInfo

const Default_QueryOrderBy_SortColumnNamespace string = "_default_"
const Default_QueryOrderBy_SortOrder QueryOrderBy_SortOrder = QueryOrderBy_kAscending
const Default_QueryOrderBy_SortKey QueryOrderBy_SortKey = QueryOrderBy_kLast

func (m *QueryOrderBy) GetSortColumnNamespace() string {
	if m != nil && m.SortColumnNamespace != nil {
		return *m.SortColumnNamespace
	}
	return Default_QueryOrderBy_SortColumnNamespace
}

func (m *QueryOrderBy) GetSortColumn() string {
	if m != nil && m.SortColumn != nil {
		return *m.SortColumn
	}
	return ""
}

func (m *QueryOrderBy) GetSortOrder() QueryOrderBy_SortOrder {
	if m != nil && m.SortOrder != nil {
		return *m.SortOrder
	}
	return Default_QueryOrderBy_SortOrder
}

func (m *QueryOrderBy) GetSortKey() QueryOrderBy_SortKey {
	if m != nil && m.SortKey != nil {
		return *m.SortKey
	}
	return Default_QueryOrderBy_SortKey
}

type QueryLimit struct {
	// Optional. Specifies the number of results to return, after the sorting (if
	// specified) is done.
	Limit *int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Optional. Number of results to skip before starting to accumulate results
	// to return. Client can use this to implement simple cursors.
	Offset               *int64   `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryLimit) Reset()         { *m = QueryLimit{} }
func (m *QueryLimit) String() string { return proto.CompactTextString(m) }
func (*QueryLimit) ProtoMessage()    {}
func (*QueryLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{69}
}

func (m *QueryLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryLimit.Unmarshal(m, b)
}
func (m *QueryLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryLimit.Marshal(b, m, deterministic)
}
func (m *QueryLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLimit.Merge(m, src)
}
func (m *QueryLimit) XXX_Size() int {
	return xxx_messageInfo_QueryLimit.Size(m)
}
func (m *QueryLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLimit.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLimit proto.InternalMessageInfo

func (m *QueryLimit) GetLimit() int64 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *QueryLimit) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

// The query cursor object which captures the query context as well as the
// position of the cursor. This is sent as part of the response during a cursor
// query and the client is expected to pass this back to fetch the next
// response of the cursor query.
// All of this information is set and read by the server. The client is
// supposed to just pass the cursor by copying it from the response to the
// next request.
type QueryCursor struct {
	// Required. The cursor query id that is set by the server for identification
	// and correlation with subsequent requests.
	CursorQueryId *string `protobuf:"bytes,1,opt,name=cursor_query_id,json=cursorQueryId" json:"cursor_query_id,omitempty"`
	// Required. The chunk number of the data in the current response. When this
	// is passed back during subsequent requests, this is made use of to fetch
	// the next chunk.
	CursorQueryChunkNumber *uint32 `protobuf:"varint,2,opt,name=cursor_query_chunk_number,json=cursorQueryChunkNumber" json:"cursor_query_chunk_number,omitempty"`
	// Required. Whether more chunks are remaining. This will be set to true
	// in all cases except the last ack.
	ChunksRemaining      *bool    `protobuf:"varint,3,opt,name=chunks_remaining,json=chunksRemaining" json:"chunks_remaining,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryCursor) Reset()         { *m = QueryCursor{} }
func (m *QueryCursor) String() string { return proto.CompactTextString(m) }
func (*QueryCursor) ProtoMessage()    {}
func (*QueryCursor) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{70}
}

func (m *QueryCursor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryCursor.Unmarshal(m, b)
}
func (m *QueryCursor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryCursor.Marshal(b, m, deterministic)
}
func (m *QueryCursor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCursor.Merge(m, src)
}
func (m *QueryCursor) XXX_Size() int {
	return xxx_messageInfo_QueryCursor.Size(m)
}
func (m *QueryCursor) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCursor.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCursor proto.InternalMessageInfo

func (m *QueryCursor) GetCursorQueryId() string {
	if m != nil && m.CursorQueryId != nil {
		return *m.CursorQueryId
	}
	return ""
}

func (m *QueryCursor) GetCursorQueryChunkNumber() uint32 {
	if m != nil && m.CursorQueryChunkNumber != nil {
		return *m.CursorQueryChunkNumber
	}
	return 0
}

func (m *QueryCursor) GetChunksRemaining() bool {
	if m != nil && m.ChunksRemaining != nil {
		return *m.ChunksRemaining
	}
	return false
}

// A query plan that an Insights server can execute.
// The order of evaluation of a query is where_clause followed by group_by.
// TODO (ramesh): document the semantics of the query language.
// TODO (ramesh): extend to support distributed fan-out queries.
type Query struct {
	// Required. Set of entities on which the query is performed.
	// - All entities in 'entity_list' should be of the same entity type.
	// - The set of all entities of a particular entity type is specified as an
	//   EntityGuid with an empty entity id and the appropriate entity type.
	EntityList []*EntityGuid `protobuf:"bytes,1,rep,name=entity_list,json=entityList" json:"entity_list,omitempty"`
	// Optional. Start time for time-series queries. Should be non-negative.
	// The value zero is reserved to indicate NOW. When set to zero, both
	// 'start_time_usecs' as well as 'end_time_usecs' should be set to zero,
	// indicating that this query is to fetch latest metric values.
	StartTimeUsecs *uint64 `protobuf:"varint,2,opt,name=start_time_usecs,json=startTimeUsecs,def=0" json:"start_time_usecs,omitempty"`
	// Optional. End time for time-series queries. Should be greater than
	// 'start_time_usecs', unless both 'start_time_usecs' and 'end_time_usecs'
	// are set to zero. The end time is exclusive and the query returns metric
	// data for the time range [start_time_usecs, end_time_usecs).
	EndTimeUsecs *uint64 `protobuf:"varint,3,opt,name=end_time_usecs,json=endTimeUsecs,def=0" json:"end_time_usecs,omitempty"`
	// Optional. Number of sampling intervals before the current wallclock time
	// that are considered when fetching the latest value of metric data.
	NumIntervalsForLatestData *int32 `protobuf:"varint,8,opt,name=num_intervals_for_latest_data,json=numIntervalsForLatestData,def=10" json:"num_intervals_for_latest_data,omitempty"`
	// Optional. Set of predicates that are used to include or exclude entities.
	// TODO (ramesh): add a timestamp field in the where_clause to support
	// back-in-time queries (perhaps start and end times to support downsampling
	// of the columns used in the where_clause).
	WhereClause *BooleanExpression `protobuf:"bytes,4,opt,name=where_clause,json=whereClause" json:"where_clause,omitempty"`
	// Optional. Defines the grouping of entities in the results. Also defines
	// columns that need to be aggregated, as well as columns whose raw values
	// need to be returned.
	GroupBy *QueryGroupBy `protobuf:"bytes,5,opt,name=group_by,json=groupBy" json:"group_by,omitempty"`
	// Optional. Name for the query.
	QueryName *string `protobuf:"bytes,6,opt,name=query_name,json=queryName" json:"query_name,omitempty"`
	// Optional. Allows for recursive queries.
	//
	// Note: Currently, this field should be set only to query
	// preprocessed metrics data and only one from clause should
	// bet set.
	FromClause []*Query `protobuf:"bytes,7,rep,name=from_clause,json=fromClause" json:"from_clause,omitempty"`
	// Optional. If specified, only entities that belong to the shards in this
	// list are returned. This, along with GetAllShardIds RPC, could be used by
	// consumers for scaling their application. For instance, consumers can
	// shard their application such that each instance owns a portion of the
	// shard list that IDF returns as a response for 'GetAllShardIds' RPC. It
	// could then query IDF only for the shards that it owns.
	ShardIdList []string `protobuf:"bytes,9,rep,name=shard_id_list,json=shardIdList" json:"shard_id_list,omitempty"`
	// Optional. Any number of FlagTypes bitwise or-ed together.
	Flags *uint64 `protobuf:"varint,10,opt,name=flags,def=0" json:"flags,omitempty"`
	// Optional. The priority of the query. For now, only two priority levels
	// are supported.
	// 0 - High priority query, i.e. foreground request such as UI serving.
	// 1 - Low priority query, i.e. background request such as Capacity planning
	//     queries.
	Priority *int64 `protobuf:"varint,11,opt,name=priority,def=0" json:"priority,omitempty"`
	// Optional. If set to kStrictConsistency, the request on the global data
	// will be forwarded to the master of the entity to be served.
	// The 'master' is a notion in Federation. It is the only place where
	// the write of the entity can happen. All slaves should only have the
	// read-only copy of the entity and the write will be forwarded to the
	// master to be processed.
	GlobalDataReadConsistency *GlobalDataReadConsistency `protobuf:"varint,13,opt,name=global_data_read_consistency,json=globalDataReadConsistency,enum=nutanix.insights.interface.GlobalDataReadConsistency,def=0" json:"global_data_read_consistency,omitempty"`
	// Optional. To be set as described above.
	CursorQueryInfo      *Query_CursorQueryInfo `protobuf:"bytes,14,opt,name=cursor_query_info,json=cursorQueryInfo" json:"cursor_query_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{71}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

const Default_Query_StartTimeUsecs uint64 = 0
const Default_Query_EndTimeUsecs uint64 = 0
const Default_Query_NumIntervalsForLatestData int32 = 10
const Default_Query_Flags uint64 = 0
const Default_Query_Priority int64 = 0
const Default_Query_GlobalDataReadConsistency GlobalDataReadConsistency = GlobalDataReadConsistency_kEventual

func (m *Query) GetEntityList() []*EntityGuid {
	if m != nil {
		return m.EntityList
	}
	return nil
}

func (m *Query) GetStartTimeUsecs() uint64 {
	if m != nil && m.StartTimeUsecs != nil {
		return *m.StartTimeUsecs
	}
	return Default_Query_StartTimeUsecs
}

func (m *Query) GetEndTimeUsecs() uint64 {
	if m != nil && m.EndTimeUsecs != nil {
		return *m.EndTimeUsecs
	}
	return Default_Query_EndTimeUsecs
}

func (m *Query) GetNumIntervalsForLatestData() int32 {
	if m != nil && m.NumIntervalsForLatestData != nil {
		return *m.NumIntervalsForLatestData
	}
	return Default_Query_NumIntervalsForLatestData
}

func (m *Query) GetWhereClause() *BooleanExpression {
	if m != nil {
		return m.WhereClause
	}
	return nil
}

func (m *Query) GetGroupBy() *QueryGroupBy {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *Query) GetQueryName() string {
	if m != nil && m.QueryName != nil {
		return *m.QueryName
	}
	return ""
}

func (m *Query) GetFromClause() []*Query {
	if m != nil {
		return m.FromClause
	}
	return nil
}

func (m *Query) GetShardIdList() []string {
	if m != nil {
		return m.ShardIdList
	}
	return nil
}

func (m *Query) GetFlags() uint64 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return Default_Query_Flags
}

func (m *Query) GetPriority() int64 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_Query_Priority
}

func (m *Query) GetGlobalDataReadConsistency() GlobalDataReadConsistency {
	if m != nil && m.GlobalDataReadConsistency != nil {
		return *m.GlobalDataReadConsistency
	}
	return Default_Query_GlobalDataReadConsistency
}

func (m *Query) GetCursorQueryInfo() *Query_CursorQueryInfo {
	if m != nil {
		return m.CursorQueryInfo
	}
	return nil
}

// Query cursor parameters. Only to be set in case of cursor queries.
type Query_CursorQueryInfo struct {
	// Whether the query is an initial cursor query. Only to be set in case of
	// the initial cursor query. For subsequent cursor queries, the cursor
	// object should be set instead.
	// If this is set, the query will be processed as a cursor query and the
	// query result will be split and the response will carry with it the first
	// chunk (from the split  query result) along with the next_cursor object.
	// The client shall send this cursor object in the subsequent cursor query
	// to fetch the next chunk. If no cursor is returned, then it means that
	// the query has finished processing.
	// Note: Cursor queries are not supported in case of group-by queries.
	IsInitialCursorQuery *bool `protobuf:"varint,1,opt,name=is_initial_cursor_query,json=isInitialCursorQuery" json:"is_initial_cursor_query,omitempty"`
	// The batch size to be used for the cursor queries. Can be overridden by
	// the default if this value is too high. The batch size is the upper
	// bound on the number of entities returned in a single request - the
	// actual count of entities returned may be less than this.
	BatchSize *uint32 `protobuf:"varint,2,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	// The cursor object to be set for subsequent queries. This should only be
	// set by copying the cursor object 'next_cursor' from the response. If
	// this field is set, then no other field in the Query proto needs to be
	// set as this marker object captures the query context.
	// If this is set, the query will be processed as the continuation of a
	// cursor query and the next chunk of results will be returned along with
	// the next_cursor object.
	// The client shall send this cursor object in the subsequent cursor query
	// to fetch the next chunk.
	NextCursor           *QueryCursor `protobuf:"bytes,3,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Query_CursorQueryInfo) Reset()         { *m = Query_CursorQueryInfo{} }
func (m *Query_CursorQueryInfo) String() string { return proto.CompactTextString(m) }
func (*Query_CursorQueryInfo) ProtoMessage()    {}
func (*Query_CursorQueryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{71, 0}
}

func (m *Query_CursorQueryInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query_CursorQueryInfo.Unmarshal(m, b)
}
func (m *Query_CursorQueryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query_CursorQueryInfo.Marshal(b, m, deterministic)
}
func (m *Query_CursorQueryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query_CursorQueryInfo.Merge(m, src)
}
func (m *Query_CursorQueryInfo) XXX_Size() int {
	return xxx_messageInfo_Query_CursorQueryInfo.Size(m)
}
func (m *Query_CursorQueryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Query_CursorQueryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Query_CursorQueryInfo proto.InternalMessageInfo

func (m *Query_CursorQueryInfo) GetIsInitialCursorQuery() bool {
	if m != nil && m.IsInitialCursorQuery != nil {
		return *m.IsInitialCursorQuery
	}
	return false
}

func (m *Query_CursorQueryInfo) GetBatchSize() uint32 {
	if m != nil && m.BatchSize != nil {
		return *m.BatchSize
	}
	return 0
}

func (m *Query_CursorQueryInfo) GetNextCursor() *QueryCursor {
	if m != nil {
		return m.NextCursor
	}
	return nil
}

type HashedRange struct {
	// Optional. The start value for the range. A query should include the entity
	// with the start value. The default value is the beginning of the hashed
	// value set.
	StartValue *string `protobuf:"bytes,1,opt,name=start_value,json=startValue,def=" json:"start_value,omitempty"`
	// Optional. The end value for the range. A query should exclude the entity
	// with the end value. The default value is the beginning of the hashed
	// value set.
	EndValue             *string  `protobuf:"bytes,2,opt,name=end_value,json=endValue,def=" json:"end_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashedRange) Reset()         { *m = HashedRange{} }
func (m *HashedRange) String() string { return proto.CompactTextString(m) }
func (*HashedRange) ProtoMessage()    {}
func (*HashedRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{72}
}

func (m *HashedRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashedRange.Unmarshal(m, b)
}
func (m *HashedRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashedRange.Marshal(b, m, deterministic)
}
func (m *HashedRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashedRange.Merge(m, src)
}
func (m *HashedRange) XXX_Size() int {
	return xxx_messageInfo_HashedRange.Size(m)
}
func (m *HashedRange) XXX_DiscardUnknown() {
	xxx_messageInfo_HashedRange.DiscardUnknown(m)
}

var xxx_messageInfo_HashedRange proto.InternalMessageInfo

func (m *HashedRange) GetStartValue() string {
	if m != nil && m.StartValue != nil {
		return *m.StartValue
	}
	return ""
}

func (m *HashedRange) GetEndValue() string {
	if m != nil && m.EndValue != nil {
		return *m.EndValue
	}
	return ""
}

// Set of additional parameters for the query.
type QueryProperties struct {
	// The depth of the query (for recursive queries).
	QueryDepth *int32 `protobuf:"varint,1,opt,name=query_depth,json=queryDepth" json:"query_depth,omitempty"`
	// Flag indicating if this query is to be executed as a leaf. By default, the
	// the query executes as an aggregator.
	ExecuteQueryAsLeaf *bool `protobuf:"varint,2,opt,name=execute_query_as_leaf,json=executeQueryAsLeaf" json:"execute_query_as_leaf,omitempty"`
	// Optional. Only consider the entities that fall in this hashed range when
	// executing the query. This is used to split a query into smaller queries.
	HashedRange *HashedRange `protobuf:"bytes,3,opt,name=hashed_range,json=hashedRange" json:"hashed_range,omitempty"`
	// Optional. This value specifies the size of the time window over which the
	// aggregation of the metrics data would be performed by the given query. The
	// result of the aggregation would be a single value which would be
	// representative of the aggregated metric over that time window. If this
	// value is not specified, then it would be computed from the sampling
	// intervales of the metrics used.
	SamplingIntervalSecs *int64   `protobuf:"varint,4,opt,name=sampling_interval_secs,json=samplingIntervalSecs" json:"sampling_interval_secs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryProperties) Reset()         { *m = QueryProperties{} }
func (m *QueryProperties) String() string { return proto.CompactTextString(m) }
func (*QueryProperties) ProtoMessage()    {}
func (*QueryProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{73}
}

func (m *QueryProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProperties.Unmarshal(m, b)
}
func (m *QueryProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProperties.Marshal(b, m, deterministic)
}
func (m *QueryProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProperties.Merge(m, src)
}
func (m *QueryProperties) XXX_Size() int {
	return xxx_messageInfo_QueryProperties.Size(m)
}
func (m *QueryProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProperties.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProperties proto.InternalMessageInfo

func (m *QueryProperties) GetQueryDepth() int32 {
	if m != nil && m.QueryDepth != nil {
		return *m.QueryDepth
	}
	return 0
}

func (m *QueryProperties) GetExecuteQueryAsLeaf() bool {
	if m != nil && m.ExecuteQueryAsLeaf != nil {
		return *m.ExecuteQueryAsLeaf
	}
	return false
}

func (m *QueryProperties) GetHashedRange() *HashedRange {
	if m != nil {
		return m.HashedRange
	}
	return nil
}

func (m *QueryProperties) GetSamplingIntervalSecs() int64 {
	if m != nil && m.SamplingIntervalSecs != nil {
		return *m.SamplingIntervalSecs
	}
	return 0
}

// This message encapsulates a query to the Insights server. 'query' represents
// a query plan that the Insights server can execute. 'properties' encapsulate
// various properties relating to how the query is evaluated.
type GetEntitiesWithMetricsArg struct {
	// Required.
	Query                *Query           `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Properties           *QueryProperties `protobuf:"bytes,2,opt,name=properties" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetEntitiesWithMetricsArg) Reset()         { *m = GetEntitiesWithMetricsArg{} }
func (m *GetEntitiesWithMetricsArg) String() string { return proto.CompactTextString(m) }
func (*GetEntitiesWithMetricsArg) ProtoMessage()    {}
func (*GetEntitiesWithMetricsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{74}
}

func (m *GetEntitiesWithMetricsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntitiesWithMetricsArg.Unmarshal(m, b)
}
func (m *GetEntitiesWithMetricsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntitiesWithMetricsArg.Marshal(b, m, deterministic)
}
func (m *GetEntitiesWithMetricsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntitiesWithMetricsArg.Merge(m, src)
}
func (m *GetEntitiesWithMetricsArg) XXX_Size() int {
	return xxx_messageInfo_GetEntitiesWithMetricsArg.Size(m)
}
func (m *GetEntitiesWithMetricsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntitiesWithMetricsArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntitiesWithMetricsArg proto.InternalMessageInfo

func (m *GetEntitiesWithMetricsArg) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *GetEntitiesWithMetricsArg) GetProperties() *QueryProperties {
	if m != nil {
		return m.Properties
	}
	return nil
}

// Return payload of the 'GetEntitiesWithMetrics' RPC call.
type GetEntitiesWithMetricsRet struct {
	// Required.
	GroupResultsList []*QueryGroupResult `protobuf:"bytes,1,rep,name=group_results_list,json=groupResultsList" json:"group_results_list,omitempty"`
	// Total number of groups. This may be greater than the size of
	// 'group_results_list' (i.e., not all group results may be returned in
	// 'group_results_list') because of 'group_limit'.
	TotalGroupCount *int64 `protobuf:"varint,2,opt,name=total_group_count,json=totalGroupCount" json:"total_group_count,omitempty"`
	// Required.
	DownSamplingParams []*GetEntitiesWithMetricsRet_DownSamplingParameters `protobuf:"bytes,3,rep,name=down_sampling_params,json=downSamplingParams" json:"down_sampling_params,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64 `protobuf:"varint,4,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	// Optional. The next cursor in the case of cursor queries. If this is set,
	// the client shall copy this cursor for the next request to fetch the
	// next chunk of results. If not set, then it means that all results have
	// been returned to the client..
	NextCursor           *QueryCursor `protobuf:"bytes,5,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetEntitiesWithMetricsRet) Reset()         { *m = GetEntitiesWithMetricsRet{} }
func (m *GetEntitiesWithMetricsRet) String() string { return proto.CompactTextString(m) }
func (*GetEntitiesWithMetricsRet) ProtoMessage()    {}
func (*GetEntitiesWithMetricsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{75}
}

func (m *GetEntitiesWithMetricsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntitiesWithMetricsRet.Unmarshal(m, b)
}
func (m *GetEntitiesWithMetricsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntitiesWithMetricsRet.Marshal(b, m, deterministic)
}
func (m *GetEntitiesWithMetricsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntitiesWithMetricsRet.Merge(m, src)
}
func (m *GetEntitiesWithMetricsRet) XXX_Size() int {
	return xxx_messageInfo_GetEntitiesWithMetricsRet.Size(m)
}
func (m *GetEntitiesWithMetricsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntitiesWithMetricsRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntitiesWithMetricsRet proto.InternalMessageInfo

func (m *GetEntitiesWithMetricsRet) GetGroupResultsList() []*QueryGroupResult {
	if m != nil {
		return m.GroupResultsList
	}
	return nil
}

func (m *GetEntitiesWithMetricsRet) GetTotalGroupCount() int64 {
	if m != nil && m.TotalGroupCount != nil {
		return *m.TotalGroupCount
	}
	return 0
}

func (m *GetEntitiesWithMetricsRet) GetDownSamplingParams() []*GetEntitiesWithMetricsRet_DownSamplingParameters {
	if m != nil {
		return m.DownSamplingParams
	}
	return nil
}

func (m *GetEntitiesWithMetricsRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

func (m *GetEntitiesWithMetricsRet) GetNextCursor() *QueryCursor {
	if m != nil {
		return m.NextCursor
	}
	return nil
}

type GetEntitiesWithMetricsRet_DownSamplingParameters struct {
	// Required.
	MetricName *string `protobuf:"bytes,1,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// Required. Down sampling interval in seconds.
	DownSamplingIntervalSecs *int32 `protobuf:"varint,2,opt,name=down_sampling_interval_secs,json=downSamplingIntervalSecs" json:"down_sampling_interval_secs,omitempty"`
	// Required. This operator was used to aggregate multiple updates received
	// in one down_sampling_interval.
	DownSamplingOperator *MetricType_Operator `protobuf:"varint,3,opt,name=down_sampling_operator,json=downSamplingOperator,enum=nutanix.insights.interface.MetricType_Operator" json:"down_sampling_operator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetEntitiesWithMetricsRet_DownSamplingParameters) Reset() {
	*m = GetEntitiesWithMetricsRet_DownSamplingParameters{}
}
func (m *GetEntitiesWithMetricsRet_DownSamplingParameters) String() string {
	return proto.CompactTextString(m)
}
func (*GetEntitiesWithMetricsRet_DownSamplingParameters) ProtoMessage() {}
func (*GetEntitiesWithMetricsRet_DownSamplingParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{75, 0}
}

func (m *GetEntitiesWithMetricsRet_DownSamplingParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEntitiesWithMetricsRet_DownSamplingParameters.Unmarshal(m, b)
}
func (m *GetEntitiesWithMetricsRet_DownSamplingParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEntitiesWithMetricsRet_DownSamplingParameters.Marshal(b, m, deterministic)
}
func (m *GetEntitiesWithMetricsRet_DownSamplingParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEntitiesWithMetricsRet_DownSamplingParameters.Merge(m, src)
}
func (m *GetEntitiesWithMetricsRet_DownSamplingParameters) XXX_Size() int {
	return xxx_messageInfo_GetEntitiesWithMetricsRet_DownSamplingParameters.Size(m)
}
func (m *GetEntitiesWithMetricsRet_DownSamplingParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEntitiesWithMetricsRet_DownSamplingParameters.DiscardUnknown(m)
}

var xxx_messageInfo_GetEntitiesWithMetricsRet_DownSamplingParameters proto.InternalMessageInfo

func (m *GetEntitiesWithMetricsRet_DownSamplingParameters) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *GetEntitiesWithMetricsRet_DownSamplingParameters) GetDownSamplingIntervalSecs() int32 {
	if m != nil && m.DownSamplingIntervalSecs != nil {
		return *m.DownSamplingIntervalSecs
	}
	return 0
}

func (m *GetEntitiesWithMetricsRet_DownSamplingParameters) GetDownSamplingOperator() MetricType_Operator {
	if m != nil && m.DownSamplingOperator != nil {
		return *m.DownSamplingOperator
	}
	return MetricType_kSum
}

// Payload for the 'SpotLightSearch' RPC call.  It provides parameters for
// the search request.
type SpotLightSearchArg struct {
	// Optional.  The search term.  Insights will search all the string
	// attribute values in all entities for 'search_term'. The search
	// is case insensitive.  If the search term is not specified, then
	// all string attributes are returned.
	SearchTerm *string `protobuf:"bytes,1,opt,name=search_term,json=searchTerm" json:"search_term,omitempty"`
	// If set, Insights will search only the entity type in
	// entity_type_name_list.  Else, Insights will search all the entity
	// types.
	EntityTypeNameList []string `protobuf:"bytes,2,rep,name=entity_type_name_list,json=entityTypeNameList" json:"entity_type_name_list,omitempty"`
	// If set, Insights will search only entities that match or are descendants
	// of an entity that matches the entity list.  Else, Insights will search
	// all entities.
	ScopeEntityList []*EntityGuid `protobuf:"bytes,3,rep,name=scope_entity_list,json=scopeEntityList" json:"scope_entity_list,omitempty"`
	// If set, Insights will search only the string fields in
	// search_attribute_name_list.  Else, Insights will search all
	// string attributes.
	SearchAttributeNameList []string `protobuf:"bytes,4,rep,name=search_attribute_name_list,json=searchAttributeNameList" json:"search_attribute_name_list,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// Use this argument instead of 'search_attribute_name_list' if atleast one
	// searched attribute belongs to namespace other than '_default_'.
	SearchAttributeNamespaceList []*MetricNamespacePair `protobuf:"bytes,10,rep,name=search_attribute_namespace_list,json=searchAttributeNamespaceList" json:"search_attribute_namespace_list,omitempty"`
	// If set, Insights will return the attribute values of the
	// specified attributes for each entity.  This can be used to
	// get entity friendly names (e.g. "vm_name", "container_name")
	// in addition to entity ids.
	ExtraReturnAttributeList []string `protobuf:"bytes,5,rep,name=extra_return_attribute_list,json=extraReturnAttributeList" json:"extra_return_attribute_list,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// Use this argument instead of 'extra_return_attribute_list' if
	// atleast one attribute belongs to namespace other than '_default_'.
	ExtraReturnAttributeNamespaceList []*MetricNamespacePair `protobuf:"bytes,11,rep,name=extra_return_attribute_namespace_list,json=extraReturnAttributeNamespaceList" json:"extra_return_attribute_namespace_list,omitempty"`
	// This can be used to set a limit on the number of retured results as
	// well as an offset to start from.
	Limit *QueryLimit `protobuf:"bytes,6,opt,name=limit" json:"limit,omitempty"`
	// A list of attributes that are relevant in this search.
	RelevantAttributeList []*SpotLightSearchArg_AttributeRelevanceInfo `protobuf:"bytes,7,rep,name=relevant_attribute_list,json=relevantAttributeList" json:"relevant_attribute_list,omitempty"`
	// A list of ancestors that are relevant in this search.
	RelevantAncestorList   []*SpotLightSearchArg_EntityRelevanceInfo `protobuf:"bytes,8,rep,name=relevant_ancestor_list,json=relevantAncestorList" json:"relevant_ancestor_list,omitempty"`
	SearchOnEntityTypeList []*SpotLightSearchArg_SearchOnEntityType  `protobuf:"bytes,9,rep,name=search_on_entity_type_list,json=searchOnEntityTypeList" json:"search_on_entity_type_list,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                  `json:"-"`
	XXX_unrecognized       []byte                                    `json:"-"`
	XXX_sizecache          int32                                     `json:"-"`
}

func (m *SpotLightSearchArg) Reset()         { *m = SpotLightSearchArg{} }
func (m *SpotLightSearchArg) String() string { return proto.CompactTextString(m) }
func (*SpotLightSearchArg) ProtoMessage()    {}
func (*SpotLightSearchArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{76}
}

func (m *SpotLightSearchArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpotLightSearchArg.Unmarshal(m, b)
}
func (m *SpotLightSearchArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpotLightSearchArg.Marshal(b, m, deterministic)
}
func (m *SpotLightSearchArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotLightSearchArg.Merge(m, src)
}
func (m *SpotLightSearchArg) XXX_Size() int {
	return xxx_messageInfo_SpotLightSearchArg.Size(m)
}
func (m *SpotLightSearchArg) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotLightSearchArg.DiscardUnknown(m)
}

var xxx_messageInfo_SpotLightSearchArg proto.InternalMessageInfo

func (m *SpotLightSearchArg) GetSearchTerm() string {
	if m != nil && m.SearchTerm != nil {
		return *m.SearchTerm
	}
	return ""
}

func (m *SpotLightSearchArg) GetEntityTypeNameList() []string {
	if m != nil {
		return m.EntityTypeNameList
	}
	return nil
}

func (m *SpotLightSearchArg) GetScopeEntityList() []*EntityGuid {
	if m != nil {
		return m.ScopeEntityList
	}
	return nil
}

func (m *SpotLightSearchArg) GetSearchAttributeNameList() []string {
	if m != nil {
		return m.SearchAttributeNameList
	}
	return nil
}

func (m *SpotLightSearchArg) GetSearchAttributeNamespaceList() []*MetricNamespacePair {
	if m != nil {
		return m.SearchAttributeNamespaceList
	}
	return nil
}

func (m *SpotLightSearchArg) GetExtraReturnAttributeList() []string {
	if m != nil {
		return m.ExtraReturnAttributeList
	}
	return nil
}

func (m *SpotLightSearchArg) GetExtraReturnAttributeNamespaceList() []*MetricNamespacePair {
	if m != nil {
		return m.ExtraReturnAttributeNamespaceList
	}
	return nil
}

func (m *SpotLightSearchArg) GetLimit() *QueryLimit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *SpotLightSearchArg) GetRelevantAttributeList() []*SpotLightSearchArg_AttributeRelevanceInfo {
	if m != nil {
		return m.RelevantAttributeList
	}
	return nil
}

func (m *SpotLightSearchArg) GetRelevantAncestorList() []*SpotLightSearchArg_EntityRelevanceInfo {
	if m != nil {
		return m.RelevantAncestorList
	}
	return nil
}

func (m *SpotLightSearchArg) GetSearchOnEntityTypeList() []*SpotLightSearchArg_SearchOnEntityType {
	if m != nil {
		return m.SearchOnEntityTypeList
	}
	return nil
}

// Rank information for an attribute.
type SpotLightSearchArg_AttributeRelevanceInfo struct {
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	Namespace *string `protobuf:"bytes,3,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Required.  The name of the attribute.
	AttributeName *string `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName" json:"attribute_name,omitempty"`
	// Required.  The relevance factor [1..3].  Higher values mean higher
	// relevance, i.e. if an attribute with that name matches, the match
	// ranks higher than a match for an attribute with lower relevance.
	RelevanceFactor      *uint32  `protobuf:"varint,2,opt,name=relevance_factor,json=relevanceFactor,def=3" json:"relevance_factor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpotLightSearchArg_AttributeRelevanceInfo) Reset() {
	*m = SpotLightSearchArg_AttributeRelevanceInfo{}
}
func (m *SpotLightSearchArg_AttributeRelevanceInfo) String() string { return proto.CompactTextString(m) }
func (*SpotLightSearchArg_AttributeRelevanceInfo) ProtoMessage()    {}
func (*SpotLightSearchArg_AttributeRelevanceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{76, 0}
}

func (m *SpotLightSearchArg_AttributeRelevanceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpotLightSearchArg_AttributeRelevanceInfo.Unmarshal(m, b)
}
func (m *SpotLightSearchArg_AttributeRelevanceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpotLightSearchArg_AttributeRelevanceInfo.Marshal(b, m, deterministic)
}
func (m *SpotLightSearchArg_AttributeRelevanceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotLightSearchArg_AttributeRelevanceInfo.Merge(m, src)
}
func (m *SpotLightSearchArg_AttributeRelevanceInfo) XXX_Size() int {
	return xxx_messageInfo_SpotLightSearchArg_AttributeRelevanceInfo.Size(m)
}
func (m *SpotLightSearchArg_AttributeRelevanceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotLightSearchArg_AttributeRelevanceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpotLightSearchArg_AttributeRelevanceInfo proto.InternalMessageInfo

const Default_SpotLightSearchArg_AttributeRelevanceInfo_Namespace string = "_default_"
const Default_SpotLightSearchArg_AttributeRelevanceInfo_RelevanceFactor uint32 = 3

func (m *SpotLightSearchArg_AttributeRelevanceInfo) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_SpotLightSearchArg_AttributeRelevanceInfo_Namespace
}

func (m *SpotLightSearchArg_AttributeRelevanceInfo) GetAttributeName() string {
	if m != nil && m.AttributeName != nil {
		return *m.AttributeName
	}
	return ""
}

func (m *SpotLightSearchArg_AttributeRelevanceInfo) GetRelevanceFactor() uint32 {
	if m != nil && m.RelevanceFactor != nil {
		return *m.RelevanceFactor
	}
	return Default_SpotLightSearchArg_AttributeRelevanceInfo_RelevanceFactor
}

// Rank information for an entity.
type SpotLightSearchArg_EntityRelevanceInfo struct {
	// Required.  The guid of the entity.
	EntityGuid *EntityGuid `protobuf:"bytes,1,opt,name=entity_guid,json=entityGuid" json:"entity_guid,omitempty"`
	// Required.  The relevance factor [1..3].  Higher values mean higher
	// relevance, i.e. if an entity with that id matches, the match
	// ranks higher than a match for an entity with lower relevance.
	RelevanceFactor      *uint32  `protobuf:"varint,2,opt,name=relevance_factor,json=relevanceFactor,def=3" json:"relevance_factor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpotLightSearchArg_EntityRelevanceInfo) Reset() {
	*m = SpotLightSearchArg_EntityRelevanceInfo{}
}
func (m *SpotLightSearchArg_EntityRelevanceInfo) String() string { return proto.CompactTextString(m) }
func (*SpotLightSearchArg_EntityRelevanceInfo) ProtoMessage()    {}
func (*SpotLightSearchArg_EntityRelevanceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{76, 1}
}

func (m *SpotLightSearchArg_EntityRelevanceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpotLightSearchArg_EntityRelevanceInfo.Unmarshal(m, b)
}
func (m *SpotLightSearchArg_EntityRelevanceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpotLightSearchArg_EntityRelevanceInfo.Marshal(b, m, deterministic)
}
func (m *SpotLightSearchArg_EntityRelevanceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotLightSearchArg_EntityRelevanceInfo.Merge(m, src)
}
func (m *SpotLightSearchArg_EntityRelevanceInfo) XXX_Size() int {
	return xxx_messageInfo_SpotLightSearchArg_EntityRelevanceInfo.Size(m)
}
func (m *SpotLightSearchArg_EntityRelevanceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotLightSearchArg_EntityRelevanceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpotLightSearchArg_EntityRelevanceInfo proto.InternalMessageInfo

const Default_SpotLightSearchArg_EntityRelevanceInfo_RelevanceFactor uint32 = 3

func (m *SpotLightSearchArg_EntityRelevanceInfo) GetEntityGuid() *EntityGuid {
	if m != nil {
		return m.EntityGuid
	}
	return nil
}

func (m *SpotLightSearchArg_EntityRelevanceInfo) GetRelevanceFactor() uint32 {
	if m != nil && m.RelevanceFactor != nil {
		return *m.RelevanceFactor
	}
	return Default_SpotLightSearchArg_EntityRelevanceInfo_RelevanceFactor
}

// Search the entity type for the specified attributes and extra attributes.
// Note that Spotlight search will honor fields in SearchOnEntityType
// if search_attribute_name_list and extra_return_attribute_list are
// specified in both global and entity type scopes.
type SpotLightSearchArg_SearchOnEntityType struct {
	// Required. Insights will search only for specified entity type.
	EntityTypeName *string `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Optional. Insights will search the specified entity type for the
	// attributes in the list.
	SearchAttributeNameList []string `protobuf:"bytes,2,rep,name=search_attribute_name_list,json=searchAttributeNameList" json:"search_attribute_name_list,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// Use this argument instead of 'search_attribute_name_list' if atleast one
	// searched attribute belongs to namespace other than '_default_'.
	SearchAttributeNamespaceList []*MetricNamespacePair `protobuf:"bytes,4,rep,name=search_attribute_namespace_list,json=searchAttributeNamespaceList" json:"search_attribute_namespace_list,omitempty"`
	// Optional. If set, Insights will return the attribute values of the
	// specified attributes for each entity.
	ExtraReturnAttributeList []string `protobuf:"bytes,3,rep,name=extra_return_attribute_list,json=extraReturnAttributeList" json:"extra_return_attribute_list,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// Use this argument instead of 'extra_return_attribute_list' if
	// atleast one attribute belongs to namespace other than '_default_'.
	ExtraReturnAttributeNamespaceList []*MetricNamespacePair `protobuf:"bytes,5,rep,name=extra_return_attribute_namespace_list,json=extraReturnAttributeNamespaceList" json:"extra_return_attribute_namespace_list,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}               `json:"-"`
	XXX_unrecognized                  []byte                 `json:"-"`
	XXX_sizecache                     int32                  `json:"-"`
}

func (m *SpotLightSearchArg_SearchOnEntityType) Reset()         { *m = SpotLightSearchArg_SearchOnEntityType{} }
func (m *SpotLightSearchArg_SearchOnEntityType) String() string { return proto.CompactTextString(m) }
func (*SpotLightSearchArg_SearchOnEntityType) ProtoMessage()    {}
func (*SpotLightSearchArg_SearchOnEntityType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{76, 2}
}

func (m *SpotLightSearchArg_SearchOnEntityType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpotLightSearchArg_SearchOnEntityType.Unmarshal(m, b)
}
func (m *SpotLightSearchArg_SearchOnEntityType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpotLightSearchArg_SearchOnEntityType.Marshal(b, m, deterministic)
}
func (m *SpotLightSearchArg_SearchOnEntityType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotLightSearchArg_SearchOnEntityType.Merge(m, src)
}
func (m *SpotLightSearchArg_SearchOnEntityType) XXX_Size() int {
	return xxx_messageInfo_SpotLightSearchArg_SearchOnEntityType.Size(m)
}
func (m *SpotLightSearchArg_SearchOnEntityType) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotLightSearchArg_SearchOnEntityType.DiscardUnknown(m)
}

var xxx_messageInfo_SpotLightSearchArg_SearchOnEntityType proto.InternalMessageInfo

func (m *SpotLightSearchArg_SearchOnEntityType) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *SpotLightSearchArg_SearchOnEntityType) GetSearchAttributeNameList() []string {
	if m != nil {
		return m.SearchAttributeNameList
	}
	return nil
}

func (m *SpotLightSearchArg_SearchOnEntityType) GetSearchAttributeNamespaceList() []*MetricNamespacePair {
	if m != nil {
		return m.SearchAttributeNamespaceList
	}
	return nil
}

func (m *SpotLightSearchArg_SearchOnEntityType) GetExtraReturnAttributeList() []string {
	if m != nil {
		return m.ExtraReturnAttributeList
	}
	return nil
}

func (m *SpotLightSearchArg_SearchOnEntityType) GetExtraReturnAttributeNamespaceList() []*MetricNamespacePair {
	if m != nil {
		return m.ExtraReturnAttributeNamespaceList
	}
	return nil
}

// Return payload of the 'SpotLightSearch' RPC call. It contains a list
// of entity and its metrics which match the conditions specified in the
// 'SpotLightSearchArg'.
type SpotLightSearchRet struct {
	// A list of entities along with their attributes.
	EntityWithMetricList []*EntityWithMetric `protobuf:"bytes,1,rep,name=entity_with_metric_list,json=entityWithMetricList" json:"entity_with_metric_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *SpotLightSearchRet) Reset()         { *m = SpotLightSearchRet{} }
func (m *SpotLightSearchRet) String() string { return proto.CompactTextString(m) }
func (*SpotLightSearchRet) ProtoMessage()    {}
func (*SpotLightSearchRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{77}
}

func (m *SpotLightSearchRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpotLightSearchRet.Unmarshal(m, b)
}
func (m *SpotLightSearchRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpotLightSearchRet.Marshal(b, m, deterministic)
}
func (m *SpotLightSearchRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotLightSearchRet.Merge(m, src)
}
func (m *SpotLightSearchRet) XXX_Size() int {
	return xxx_messageInfo_SpotLightSearchRet.Size(m)
}
func (m *SpotLightSearchRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotLightSearchRet.DiscardUnknown(m)
}

var xxx_messageInfo_SpotLightSearchRet proto.InternalMessageInfo

func (m *SpotLightSearchRet) GetEntityWithMetricList() []*EntityWithMetric {
	if m != nil {
		return m.EntityWithMetricList
	}
	return nil
}

func (m *SpotLightSearchRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Protos used to store metric data in Cassandra column.
type BucketizedMetricDataSet struct {
	// Required. Bucket interval in seconds.
	BucketIntervalInSecs *uint32 `protobuf:"varint,1,opt,name=bucket_interval_in_secs,json=bucketIntervalInSecs" json:"bucket_interval_in_secs,omitempty"`
	// Required. MetricType Operator used to bucketize.
	MetricTypeOperator *MetricType_Operator `protobuf:"varint,2,opt,name=metric_type_operator,json=metricTypeOperator,enum=nutanix.insights.interface.MetricType_Operator" json:"metric_type_operator,omitempty"`
	// Required. Data values in this bucket.
	ValueList            []*DataValue `protobuf:"bytes,3,rep,name=value_list,json=valueList" json:"value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BucketizedMetricDataSet) Reset()         { *m = BucketizedMetricDataSet{} }
func (m *BucketizedMetricDataSet) String() string { return proto.CompactTextString(m) }
func (*BucketizedMetricDataSet) ProtoMessage()    {}
func (*BucketizedMetricDataSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{78}
}

func (m *BucketizedMetricDataSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BucketizedMetricDataSet.Unmarshal(m, b)
}
func (m *BucketizedMetricDataSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BucketizedMetricDataSet.Marshal(b, m, deterministic)
}
func (m *BucketizedMetricDataSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketizedMetricDataSet.Merge(m, src)
}
func (m *BucketizedMetricDataSet) XXX_Size() int {
	return xxx_messageInfo_BucketizedMetricDataSet.Size(m)
}
func (m *BucketizedMetricDataSet) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketizedMetricDataSet.DiscardUnknown(m)
}

var xxx_messageInfo_BucketizedMetricDataSet proto.InternalMessageInfo

func (m *BucketizedMetricDataSet) GetBucketIntervalInSecs() uint32 {
	if m != nil && m.BucketIntervalInSecs != nil {
		return *m.BucketIntervalInSecs
	}
	return 0
}

func (m *BucketizedMetricDataSet) GetMetricTypeOperator() MetricType_Operator {
	if m != nil && m.MetricTypeOperator != nil {
		return *m.MetricTypeOperator
	}
	return MetricType_kSum
}

func (m *BucketizedMetricDataSet) GetValueList() []*DataValue {
	if m != nil {
		return m.ValueList
	}
	return nil
}

// MetricDataSet contains either
// 1. {timestamp_usecs, value} (OR)
// 2. {timestamp_usecs, bucketized_values}
type MetricDataSet struct {
	// Required.
	//
	// For bucketized_values, it represents starting timestamp of the bucket.
	// The timestamp for ith value in the bucket is computed as
	// (timestamp_usecs + i * bucket_interval_in_secs).
	//
	// For non bucketized values, it represents actual timestamp of the value.
	TimestampUsecs *uint64 `protobuf:"varint,1,opt,name=timestamp_usecs,json=timestampUsecs" json:"timestamp_usecs,omitempty"`
	// Optional. Set only for bucketized time series data.
	BucketizedValues *BucketizedMetricDataSet `protobuf:"bytes,2,opt,name=bucketized_values,json=bucketizedValues" json:"bucketized_values,omitempty"`
	// Optional. Set only for non bucketized values.
	Value                *DataValue `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MetricDataSet) Reset()         { *m = MetricDataSet{} }
func (m *MetricDataSet) String() string { return proto.CompactTextString(m) }
func (*MetricDataSet) ProtoMessage()    {}
func (*MetricDataSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{79}
}

func (m *MetricDataSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDataSet.Unmarshal(m, b)
}
func (m *MetricDataSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDataSet.Marshal(b, m, deterministic)
}
func (m *MetricDataSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDataSet.Merge(m, src)
}
func (m *MetricDataSet) XXX_Size() int {
	return xxx_messageInfo_MetricDataSet.Size(m)
}
func (m *MetricDataSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDataSet.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDataSet proto.InternalMessageInfo

func (m *MetricDataSet) GetTimestampUsecs() uint64 {
	if m != nil && m.TimestampUsecs != nil {
		return *m.TimestampUsecs
	}
	return 0
}

func (m *MetricDataSet) GetBucketizedValues() *BucketizedMetricDataSet {
	if m != nil {
		return m.BucketizedValues
	}
	return nil
}

func (m *MetricDataSet) GetValue() *DataValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// DownSampling intervals supported by the Insights DB Store layer.
type MetricDataDownSamplingInterval struct {
	// Optional.
	Type                 *MetricDataDownSamplingInterval_Type `protobuf:"varint,1,opt,name=type,enum=nutanix.insights.interface.MetricDataDownSamplingInterval_Type,def=0" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *MetricDataDownSamplingInterval) Reset()         { *m = MetricDataDownSamplingInterval{} }
func (m *MetricDataDownSamplingInterval) String() string { return proto.CompactTextString(m) }
func (*MetricDataDownSamplingInterval) ProtoMessage()    {}
func (*MetricDataDownSamplingInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{80}
}

func (m *MetricDataDownSamplingInterval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDataDownSamplingInterval.Unmarshal(m, b)
}
func (m *MetricDataDownSamplingInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDataDownSamplingInterval.Marshal(b, m, deterministic)
}
func (m *MetricDataDownSamplingInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDataDownSamplingInterval.Merge(m, src)
}
func (m *MetricDataDownSamplingInterval) XXX_Size() int {
	return xxx_messageInfo_MetricDataDownSamplingInterval.Size(m)
}
func (m *MetricDataDownSamplingInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDataDownSamplingInterval.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDataDownSamplingInterval proto.InternalMessageInfo

const Default_MetricDataDownSamplingInterval_Type MetricDataDownSamplingInterval_Type = MetricDataDownSamplingInterval_kRaw

func (m *MetricDataDownSamplingInterval) GetType() MetricDataDownSamplingInterval_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_MetricDataDownSamplingInterval_Type
}

// The following proto is used to store down sampled value per operator.
type MetricDataDownSampled struct {
	// Required.
	DsOperator *MetricType_Operator `protobuf:"varint,1,opt,name=ds_operator,json=dsOperator,enum=nutanix.insights.interface.MetricType_Operator" json:"ds_operator,omitempty"`
	// Required.
	Value                *DataValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MetricDataDownSampled) Reset()         { *m = MetricDataDownSampled{} }
func (m *MetricDataDownSampled) String() string { return proto.CompactTextString(m) }
func (*MetricDataDownSampled) ProtoMessage()    {}
func (*MetricDataDownSampled) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{81}
}

func (m *MetricDataDownSampled) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDataDownSampled.Unmarshal(m, b)
}
func (m *MetricDataDownSampled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDataDownSampled.Marshal(b, m, deterministic)
}
func (m *MetricDataDownSampled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDataDownSampled.Merge(m, src)
}
func (m *MetricDataDownSampled) XXX_Size() int {
	return xxx_messageInfo_MetricDataDownSampled.Size(m)
}
func (m *MetricDataDownSampled) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDataDownSampled.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDataDownSampled proto.InternalMessageInfo

func (m *MetricDataDownSampled) GetDsOperator() MetricType_Operator {
	if m != nil && m.DsOperator != nil {
		return *m.DsOperator
	}
	return MetricType_kSum
}

func (m *MetricDataDownSampled) GetValue() *DataValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// MetricDataDB message contains data for [start_time_usecs, end_time_usecs).
//
// This message can contain either raw data or down sampled data, not both.
// Raw data is filled into 'metric_data_list' and down sampled data into
// 'ds_value_list'.
//
// Raw data is typically an hours worth of data. Raw data is stored in one
// or more MetricDataSets.
//
// For non bucketized metrics, the number of sets is equal to the number of
// values within the hour.
//
// For bucketized metrics, there is usually only one set, but in scenario's
// like below, there will be more than one MetricDataSet:
// 1. Changing down_sampling_interval_in_secs in the middle of logging
//    interval.
// 2. Missing data points - say for example, the metric is registered
//    with a down sampling interval of 30 seconds but the application updates db
//    every 5 minutes, then there will be 12 sets for the hour, each set having
//    one value in the bucket.
type MetricDataDB struct {
	// Required. Entity GUID.
	EntityGuid *EntityGuid `protobuf:"bytes,1,opt,name=entity_guid,json=entityGuid" json:"entity_guid,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	Namespace *string `protobuf:"bytes,11,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Required. Metric name.
	MetricName *string `protobuf:"bytes,2,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// Required. Metric Data start time.
	StartTimestampUsecs *uint64 `protobuf:"varint,3,opt,name=start_timestamp_usecs,json=startTimestampUsecs" json:"start_timestamp_usecs,omitempty"`
	// Required. Metric Data end time.
	EndTimestampUsecs *uint64 `protobuf:"varint,4,opt,name=end_timestamp_usecs,json=endTimestampUsecs" json:"end_timestamp_usecs,omitempty"`
	// Optional. Filled in for raw values.
	MetricDataList []*MetricDataSet `protobuf:"bytes,5,rep,name=metric_data_list,json=metricDataList" json:"metric_data_list,omitempty"`
	// Optional. Metric Data down sampling interval.
	DsInterval *MetricDataDownSamplingInterval `protobuf:"bytes,6,opt,name=ds_interval,json=dsInterval" json:"ds_interval,omitempty"`
	// Optional. Last modififed time stamp.
	// This field is set only for down sampled data. It is used in merging down
	// sampled values.
	LastModifiedTimestampUsecs *uint64 `protobuf:"varint,7,opt,name=last_modified_timestamp_usecs,json=lastModifiedTimestampUsecs" json:"last_modified_timestamp_usecs,omitempty"`
	// Optional. Filled in for down sampled values.
	DsValueList []*MetricDataDownSampled `protobuf:"bytes,8,rep,name=ds_value_list,json=dsValueList" json:"ds_value_list,omitempty"`
	// Optional. The algorithm (snappy, zlib, or bzip2) used when snapshot
	// compression is required.
	CompressionType *string `protobuf:"bytes,9,opt,name=compression_type,json=compressionType,def=" json:"compression_type,omitempty"`
	// Optional. To store the compressed version of the serialized proto.
	CompressedSerializedProto []byte   `protobuf:"bytes,10,opt,name=compressed_serialized_proto,json=compressedSerializedProto" json:"compressed_serialized_proto,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *MetricDataDB) Reset()         { *m = MetricDataDB{} }
func (m *MetricDataDB) String() string { return proto.CompactTextString(m) }
func (*MetricDataDB) ProtoMessage()    {}
func (*MetricDataDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{82}
}

func (m *MetricDataDB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDataDB.Unmarshal(m, b)
}
func (m *MetricDataDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDataDB.Marshal(b, m, deterministic)
}
func (m *MetricDataDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDataDB.Merge(m, src)
}
func (m *MetricDataDB) XXX_Size() int {
	return xxx_messageInfo_MetricDataDB.Size(m)
}
func (m *MetricDataDB) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDataDB.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDataDB proto.InternalMessageInfo

const Default_MetricDataDB_Namespace string = "_default_"

func (m *MetricDataDB) GetEntityGuid() *EntityGuid {
	if m != nil {
		return m.EntityGuid
	}
	return nil
}

func (m *MetricDataDB) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_MetricDataDB_Namespace
}

func (m *MetricDataDB) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *MetricDataDB) GetStartTimestampUsecs() uint64 {
	if m != nil && m.StartTimestampUsecs != nil {
		return *m.StartTimestampUsecs
	}
	return 0
}

func (m *MetricDataDB) GetEndTimestampUsecs() uint64 {
	if m != nil && m.EndTimestampUsecs != nil {
		return *m.EndTimestampUsecs
	}
	return 0
}

func (m *MetricDataDB) GetMetricDataList() []*MetricDataSet {
	if m != nil {
		return m.MetricDataList
	}
	return nil
}

func (m *MetricDataDB) GetDsInterval() *MetricDataDownSamplingInterval {
	if m != nil {
		return m.DsInterval
	}
	return nil
}

func (m *MetricDataDB) GetLastModifiedTimestampUsecs() uint64 {
	if m != nil && m.LastModifiedTimestampUsecs != nil {
		return *m.LastModifiedTimestampUsecs
	}
	return 0
}

func (m *MetricDataDB) GetDsValueList() []*MetricDataDownSampled {
	if m != nil {
		return m.DsValueList
	}
	return nil
}

func (m *MetricDataDB) GetCompressionType() string {
	if m != nil && m.CompressionType != nil {
		return *m.CompressionType
	}
	return ""
}

func (m *MetricDataDB) GetCompressedSerializedProto() []byte {
	if m != nil {
		return m.CompressedSerializedProto
	}
	return nil
}

// List of MetricDataDB.
type MetricDataDBList struct {
	// Required.
	MetricDataDbList []*MetricDataDB `protobuf:"bytes,1,rep,name=metric_data_db_list,json=metricDataDbList" json:"metric_data_db_list,omitempty"`
	// Optional. The algorithm (snappy, zlib, or bzip2) used when snapshot
	// compression is required.
	CompressionType *string `protobuf:"bytes,2,opt,name=compression_type,json=compressionType,def=" json:"compression_type,omitempty"`
	// Optional. To store the compressed version of the serialized proto.
	CompressedSerializedProto []byte   `protobuf:"bytes,3,opt,name=compressed_serialized_proto,json=compressedSerializedProto" json:"compressed_serialized_proto,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *MetricDataDBList) Reset()         { *m = MetricDataDBList{} }
func (m *MetricDataDBList) String() string { return proto.CompactTextString(m) }
func (*MetricDataDBList) ProtoMessage()    {}
func (*MetricDataDBList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{83}
}

func (m *MetricDataDBList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDataDBList.Unmarshal(m, b)
}
func (m *MetricDataDBList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDataDBList.Marshal(b, m, deterministic)
}
func (m *MetricDataDBList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDataDBList.Merge(m, src)
}
func (m *MetricDataDBList) XXX_Size() int {
	return xxx_messageInfo_MetricDataDBList.Size(m)
}
func (m *MetricDataDBList) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDataDBList.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDataDBList proto.InternalMessageInfo

func (m *MetricDataDBList) GetMetricDataDbList() []*MetricDataDB {
	if m != nil {
		return m.MetricDataDbList
	}
	return nil
}

func (m *MetricDataDBList) GetCompressionType() string {
	if m != nil && m.CompressionType != nil {
		return *m.CompressionType
	}
	return ""
}

func (m *MetricDataDBList) GetCompressedSerializedProto() []byte {
	if m != nil {
		return m.CompressedSerializedProto
	}
	return nil
}

// This message holds the payload of dimensions and facts for a dimension-fact
// table. The attributes will correspond to dimensions and stats will
// correspond to facts for the corresponding dimension-fact table specified by
// the entity type.
// Each MetricDataSample must have all the attributes set since these
// attributes effectively form the primary key for the dimension table and must
// always be set on input. It should also contain atleast one stat value. There
// could be one or more stat values specified in the sample.
type MetricDataSample struct {
	// Required. The time (in microseconds) at which the dimensions/facts were
	// collected.
	TimestampUsecs *uint64 `protobuf:"varint,1,opt,name=timestamp_usecs,json=timestampUsecs" json:"timestamp_usecs,omitempty"`
	// Required. The entity type against which this metric data sample is
	// populated. This entity type should have 'is_dimension_fact_table' flag set
	// to true.
	EntityTypeName *string `protobuf:"bytes,2,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Required. List of dimension-fact columns for the dimension-fact table
	// specified by the given 'entity_type_name'. Should include all attributes
	// registered against ths given 'entity_type_name' since all dimensions
	// should be specified for every row. Should also include one or more stats
	// registered against ths given 'entity_type_name'.
	MetricList []string `protobuf:"bytes,3,rep,name=metric_list,json=metricList" json:"metric_list,omitempty"`
	// Required. Should contain values of all attributes (dimensions) / stats
	// (facts) present in 'metric_list'. The 'row_list' must contain values for
	// all attributes (dimensions) registered against the dimension-fact table
	// specified by 'entity_type_name'. It should also contain values for atleast
	// one or more stats (facts) for the same dimension-fact table.
	RowList []*MetricDataSample_Row `protobuf:"bytes,4,rep,name=row_list,json=rowList" json:"row_list,omitempty"`
	// Required. Number of dimensions in 'metric_list'. User can retrieve
	// 'dimension_list' from 'metric_list' with this information, with assumption
	// that dimensions are stored first, followed by stats in each row.
	NumDimensions        *uint64  `protobuf:"varint,5,opt,name=num_dimensions,json=numDimensions" json:"num_dimensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricDataSample) Reset()         { *m = MetricDataSample{} }
func (m *MetricDataSample) String() string { return proto.CompactTextString(m) }
func (*MetricDataSample) ProtoMessage()    {}
func (*MetricDataSample) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{84}
}

func (m *MetricDataSample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDataSample.Unmarshal(m, b)
}
func (m *MetricDataSample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDataSample.Marshal(b, m, deterministic)
}
func (m *MetricDataSample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDataSample.Merge(m, src)
}
func (m *MetricDataSample) XXX_Size() int {
	return xxx_messageInfo_MetricDataSample.Size(m)
}
func (m *MetricDataSample) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDataSample.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDataSample proto.InternalMessageInfo

func (m *MetricDataSample) GetTimestampUsecs() uint64 {
	if m != nil && m.TimestampUsecs != nil {
		return *m.TimestampUsecs
	}
	return 0
}

func (m *MetricDataSample) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *MetricDataSample) GetMetricList() []string {
	if m != nil {
		return m.MetricList
	}
	return nil
}

func (m *MetricDataSample) GetRowList() []*MetricDataSample_Row {
	if m != nil {
		return m.RowList
	}
	return nil
}

func (m *MetricDataSample) GetNumDimensions() uint64 {
	if m != nil && m.NumDimensions != nil {
		return *m.NumDimensions
	}
	return 0
}

type MetricDataSample_Row struct {
	// Required. Dimension-fact columns. The size of this list must be equal to
	// the size of 'metric_list'.
	// Note 'num_dimensions' field assumes dimensions are stored first,
	// followed by stats in each row.
	MetricValueList      []*DataValue `protobuf:"bytes,1,rep,name=metric_value_list,json=metricValueList" json:"metric_value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MetricDataSample_Row) Reset()         { *m = MetricDataSample_Row{} }
func (m *MetricDataSample_Row) String() string { return proto.CompactTextString(m) }
func (*MetricDataSample_Row) ProtoMessage()    {}
func (*MetricDataSample_Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{84, 0}
}

func (m *MetricDataSample_Row) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDataSample_Row.Unmarshal(m, b)
}
func (m *MetricDataSample_Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDataSample_Row.Marshal(b, m, deterministic)
}
func (m *MetricDataSample_Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDataSample_Row.Merge(m, src)
}
func (m *MetricDataSample_Row) XXX_Size() int {
	return xxx_messageInfo_MetricDataSample_Row.Size(m)
}
func (m *MetricDataSample_Row) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDataSample_Row.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDataSample_Row proto.InternalMessageInfo

func (m *MetricDataSample_Row) GetMetricValueList() []*DataValue {
	if m != nil {
		return m.MetricValueList
	}
	return nil
}

// Payload for the 'PutMetricData' RPC call. It serves as the source
// of the actual values of all the metrics that are to be evaluated by the
// Insights server.
type PutMetricDataArg struct {
	// Optional. A list of metrics along with their associated entities in the
	// form of EntityWithMetric proto which are to be stored in Insights. This
	// list should be set iff 'is_dimension_fact_table' flag is set to false for
	// the corresponding entity type.
	EntityWithMetricList []*EntityWithMetric `protobuf:"bytes,1,rep,name=entity_with_metric_list,json=entityWithMetricList" json:"entity_with_metric_list,omitempty"`
	// Optional. Set for replicated entities.
	IsReplicated *bool `protobuf:"varint,2,opt,name=is_replicated,json=isReplicated,def=0" json:"is_replicated,omitempty"`
	// Optional. A list of dimensions and facts for a dimension-fact table along
	// with their associated entities in the form of MetricDataSample proto which
	// are to be stored in Insights. This list should be set iff
	// 'is_dimension_fact_table' flag is set to true for the corresponding entity
	// type.
	MetricDataSampleList []*MetricDataSample `protobuf:"bytes,3,rep,name=metric_data_sample_list,json=metricDataSampleList" json:"metric_data_sample_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PutMetricDataArg) Reset()         { *m = PutMetricDataArg{} }
func (m *PutMetricDataArg) String() string { return proto.CompactTextString(m) }
func (*PutMetricDataArg) ProtoMessage()    {}
func (*PutMetricDataArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{85}
}

func (m *PutMetricDataArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutMetricDataArg.Unmarshal(m, b)
}
func (m *PutMetricDataArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutMetricDataArg.Marshal(b, m, deterministic)
}
func (m *PutMetricDataArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutMetricDataArg.Merge(m, src)
}
func (m *PutMetricDataArg) XXX_Size() int {
	return xxx_messageInfo_PutMetricDataArg.Size(m)
}
func (m *PutMetricDataArg) XXX_DiscardUnknown() {
	xxx_messageInfo_PutMetricDataArg.DiscardUnknown(m)
}

var xxx_messageInfo_PutMetricDataArg proto.InternalMessageInfo

const Default_PutMetricDataArg_IsReplicated bool = false

func (m *PutMetricDataArg) GetEntityWithMetricList() []*EntityWithMetric {
	if m != nil {
		return m.EntityWithMetricList
	}
	return nil
}

func (m *PutMetricDataArg) GetIsReplicated() bool {
	if m != nil && m.IsReplicated != nil {
		return *m.IsReplicated
	}
	return Default_PutMetricDataArg_IsReplicated
}

func (m *PutMetricDataArg) GetMetricDataSampleList() []*MetricDataSample {
	if m != nil {
		return m.MetricDataSampleList
	}
	return nil
}

// Return payload of the 'PutMetricData' RPC.
type PutMetricDataRet struct {
	// Required. Status for each metric update.
	PutMetricDataRetElemList []*PutMetricDataRet_RetElem `protobuf:"bytes,1,rep,name=put_metric_data_ret_elem_list,json=putMetricDataRetElemList" json:"put_metric_data_ret_elem_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PutMetricDataRet) Reset()         { *m = PutMetricDataRet{} }
func (m *PutMetricDataRet) String() string { return proto.CompactTextString(m) }
func (*PutMetricDataRet) ProtoMessage()    {}
func (*PutMetricDataRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{86}
}

func (m *PutMetricDataRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutMetricDataRet.Unmarshal(m, b)
}
func (m *PutMetricDataRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutMetricDataRet.Marshal(b, m, deterministic)
}
func (m *PutMetricDataRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutMetricDataRet.Merge(m, src)
}
func (m *PutMetricDataRet) XXX_Size() int {
	return xxx_messageInfo_PutMetricDataRet.Size(m)
}
func (m *PutMetricDataRet) XXX_DiscardUnknown() {
	xxx_messageInfo_PutMetricDataRet.DiscardUnknown(m)
}

var xxx_messageInfo_PutMetricDataRet proto.InternalMessageInfo

func (m *PutMetricDataRet) GetPutMetricDataRetElemList() []*PutMetricDataRet_RetElem {
	if m != nil {
		return m.PutMetricDataRetElemList
	}
	return nil
}

func (m *PutMetricDataRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type PutMetricDataRet_RetElem struct {
	// Optional. Namespace of the metric.
	Namespace *string `protobuf:"bytes,3,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Required. Name of the metric.
	MetricName *string `protobuf:"bytes,1,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// Required. Return status for this particular metric update.
	Status               *InsightsErrorProto `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PutMetricDataRet_RetElem) Reset()         { *m = PutMetricDataRet_RetElem{} }
func (m *PutMetricDataRet_RetElem) String() string { return proto.CompactTextString(m) }
func (*PutMetricDataRet_RetElem) ProtoMessage()    {}
func (*PutMetricDataRet_RetElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{86, 0}
}

func (m *PutMetricDataRet_RetElem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutMetricDataRet_RetElem.Unmarshal(m, b)
}
func (m *PutMetricDataRet_RetElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutMetricDataRet_RetElem.Marshal(b, m, deterministic)
}
func (m *PutMetricDataRet_RetElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutMetricDataRet_RetElem.Merge(m, src)
}
func (m *PutMetricDataRet_RetElem) XXX_Size() int {
	return xxx_messageInfo_PutMetricDataRet_RetElem.Size(m)
}
func (m *PutMetricDataRet_RetElem) XXX_DiscardUnknown() {
	xxx_messageInfo_PutMetricDataRet_RetElem.DiscardUnknown(m)
}

var xxx_messageInfo_PutMetricDataRet_RetElem proto.InternalMessageInfo

const Default_PutMetricDataRet_RetElem_Namespace string = "_default_"

func (m *PutMetricDataRet_RetElem) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_PutMetricDataRet_RetElem_Namespace
}

func (m *PutMetricDataRet_RetElem) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *PutMetricDataRet_RetElem) GetStatus() *InsightsErrorProto {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetMetricDataArg struct {
	// Required.
	EntityTypeName *string `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Optional. If not specified, the entity guid represents a list of entities
	// all of which have the entity type specified by 'entity_type_name'.
	EntityIdList []string `protobuf:"bytes,2,rep,name=entity_id_list,json=entityIdList" json:"entity_id_list,omitempty"`
	// Required. Name of the metrics. All metrics specified here belong to
	// '_default_' namespace.
	MetricNameList []string `protobuf:"bytes,3,rep,name=metric_name_list,json=metricNameList" json:"metric_name_list,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// Use this argument instead of 'metric_name_list' when requesting data for
	// metrics belonging to different namespaces.
	MetricNamespaceList []*MetricNamespacePair `protobuf:"bytes,7,rep,name=metric_namespace_list,json=metricNamespaceList" json:"metric_namespace_list,omitempty"`
	// Required. start_time_usecs is inclusive.
	StartTimeUsecs *uint64 `protobuf:"varint,4,opt,name=start_time_usecs,json=startTimeUsecs" json:"start_time_usecs,omitempty"`
	// Required. end_time_usecs is not inclusive.
	EndTimeUsecs *uint64 `protobuf:"varint,5,opt,name=end_time_usecs,json=endTimeUsecs" json:"end_time_usecs,omitempty"`
	// Optional. If not provided, the default value is chosen.
	DsInterval           *MetricDataDownSamplingInterval `protobuf:"bytes,6,opt,name=ds_interval,json=dsInterval" json:"ds_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *GetMetricDataArg) Reset()         { *m = GetMetricDataArg{} }
func (m *GetMetricDataArg) String() string { return proto.CompactTextString(m) }
func (*GetMetricDataArg) ProtoMessage()    {}
func (*GetMetricDataArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{87}
}

func (m *GetMetricDataArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetricDataArg.Unmarshal(m, b)
}
func (m *GetMetricDataArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetricDataArg.Marshal(b, m, deterministic)
}
func (m *GetMetricDataArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricDataArg.Merge(m, src)
}
func (m *GetMetricDataArg) XXX_Size() int {
	return xxx_messageInfo_GetMetricDataArg.Size(m)
}
func (m *GetMetricDataArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricDataArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricDataArg proto.InternalMessageInfo

func (m *GetMetricDataArg) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *GetMetricDataArg) GetEntityIdList() []string {
	if m != nil {
		return m.EntityIdList
	}
	return nil
}

func (m *GetMetricDataArg) GetMetricNameList() []string {
	if m != nil {
		return m.MetricNameList
	}
	return nil
}

func (m *GetMetricDataArg) GetMetricNamespaceList() []*MetricNamespacePair {
	if m != nil {
		return m.MetricNamespaceList
	}
	return nil
}

func (m *GetMetricDataArg) GetStartTimeUsecs() uint64 {
	if m != nil && m.StartTimeUsecs != nil {
		return *m.StartTimeUsecs
	}
	return 0
}

func (m *GetMetricDataArg) GetEndTimeUsecs() uint64 {
	if m != nil && m.EndTimeUsecs != nil {
		return *m.EndTimeUsecs
	}
	return 0
}

func (m *GetMetricDataArg) GetDsInterval() *MetricDataDownSamplingInterval {
	if m != nil {
		return m.DsInterval
	}
	return nil
}

type GetMetricDataRet struct {
	// Required.
	MetricDataDbList []*MetricDataDB `protobuf:"bytes,1,rep,name=metric_data_db_list,json=metricDataDbList" json:"metric_data_db_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetMetricDataRet) Reset()         { *m = GetMetricDataRet{} }
func (m *GetMetricDataRet) String() string { return proto.CompactTextString(m) }
func (*GetMetricDataRet) ProtoMessage()    {}
func (*GetMetricDataRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{88}
}

func (m *GetMetricDataRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetricDataRet.Unmarshal(m, b)
}
func (m *GetMetricDataRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetricDataRet.Marshal(b, m, deterministic)
}
func (m *GetMetricDataRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricDataRet.Merge(m, src)
}
func (m *GetMetricDataRet) XXX_Size() int {
	return xxx_messageInfo_GetMetricDataRet.Size(m)
}
func (m *GetMetricDataRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricDataRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricDataRet proto.InternalMessageInfo

func (m *GetMetricDataRet) GetMetricDataDbList() []*MetricDataDB {
	if m != nil {
		return m.MetricDataDbList
	}
	return nil
}

func (m *GetMetricDataRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// This message defines a derived metric, which is computed from a set of
// source metrics. There are two types of derived metrics that are currently
// supported : (i) Roll-up metrics, which are equivalent to group-by
// aggregation with grouping on an ancestor entity type, and (ii) per-entity
// derived metrics, which define metrics that are arithmetic expressions on
// a set of metrics of an entity.
//
// Derived metrics are computed periodically in the background and stored to
// facilitate faster access at a later time.
type DerivedMetricType struct {
	// Required. The entity type against which this metric type is registered.
	// For roll-up metrics, this should match the ancestor entity type on
	// which grouping and roll-up aggregation is performed.
	EntityTypeName *string `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// The namespace the metric belongs to.
	Namespace *string `protobuf:"bytes,6,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Required. The name of the derived metric type.
	MetricName *string `protobuf:"bytes,2,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// Required for roll-up derived metrics. The query should be a group-by
	// query with grouping on an ancestor type and a single aggregation column.
	// Should not be set for per-entity derived metrics.
	Query *Query `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	// Required for per-entity derived metrics. Defines an expression on a set
	// of metrics on 'entity_type' that specifies how to compute this derived
	// metric. Should not be set for roll-up derived metrics.
	DerivedExpr *Expression `protobuf:"bytes,4,opt,name=derived_expr,json=derivedExpr" json:"derived_expr,omitempty"`
	// Optional. Specifies the periodicity at which this derived metric needs
	// to be computed.
	ComputeIntervalSecs  *int32   `protobuf:"varint,5,opt,name=compute_interval_secs,json=computeIntervalSecs,def=300" json:"compute_interval_secs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DerivedMetricType) Reset()         { *m = DerivedMetricType{} }
func (m *DerivedMetricType) String() string { return proto.CompactTextString(m) }
func (*DerivedMetricType) ProtoMessage()    {}
func (*DerivedMetricType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{89}
}

func (m *DerivedMetricType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DerivedMetricType.Unmarshal(m, b)
}
func (m *DerivedMetricType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DerivedMetricType.Marshal(b, m, deterministic)
}
func (m *DerivedMetricType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivedMetricType.Merge(m, src)
}
func (m *DerivedMetricType) XXX_Size() int {
	return xxx_messageInfo_DerivedMetricType.Size(m)
}
func (m *DerivedMetricType) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivedMetricType.DiscardUnknown(m)
}

var xxx_messageInfo_DerivedMetricType proto.InternalMessageInfo

const Default_DerivedMetricType_Namespace string = "_default_"
const Default_DerivedMetricType_ComputeIntervalSecs int32 = 300

func (m *DerivedMetricType) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *DerivedMetricType) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_DerivedMetricType_Namespace
}

func (m *DerivedMetricType) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *DerivedMetricType) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *DerivedMetricType) GetDerivedExpr() *Expression {
	if m != nil {
		return m.DerivedExpr
	}
	return nil
}

func (m *DerivedMetricType) GetComputeIntervalSecs() int32 {
	if m != nil && m.ComputeIntervalSecs != nil {
		return *m.ComputeIntervalSecs
	}
	return Default_DerivedMetricType_ComputeIntervalSecs
}

// Specifies the information stored for each derived metric in the backend.
// This is an internal format and should not be exposed to external callers
// via the RPC layer.
type StoredDerivedMetricInfo struct {
	// Required. The derived metric type.
	MetricType *DerivedMetricType `protobuf:"bytes,1,opt,name=metric_type,json=metricType" json:"metric_type,omitempty"`
	// Optional. Timestamp until which the derived metric has been evaluated.
	LastSuccessfulSampledTimeUsecs *uint64  `protobuf:"varint,2,opt,name=last_successful_sampled_time_usecs,json=lastSuccessfulSampledTimeUsecs" json:"last_successful_sampled_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *StoredDerivedMetricInfo) Reset()         { *m = StoredDerivedMetricInfo{} }
func (m *StoredDerivedMetricInfo) String() string { return proto.CompactTextString(m) }
func (*StoredDerivedMetricInfo) ProtoMessage()    {}
func (*StoredDerivedMetricInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{90}
}

func (m *StoredDerivedMetricInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoredDerivedMetricInfo.Unmarshal(m, b)
}
func (m *StoredDerivedMetricInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoredDerivedMetricInfo.Marshal(b, m, deterministic)
}
func (m *StoredDerivedMetricInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredDerivedMetricInfo.Merge(m, src)
}
func (m *StoredDerivedMetricInfo) XXX_Size() int {
	return xxx_messageInfo_StoredDerivedMetricInfo.Size(m)
}
func (m *StoredDerivedMetricInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredDerivedMetricInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StoredDerivedMetricInfo proto.InternalMessageInfo

func (m *StoredDerivedMetricInfo) GetMetricType() *DerivedMetricType {
	if m != nil {
		return m.MetricType
	}
	return nil
}

func (m *StoredDerivedMetricInfo) GetLastSuccessfulSampledTimeUsecs() uint64 {
	if m != nil && m.LastSuccessfulSampledTimeUsecs != nil {
		return *m.LastSuccessfulSampledTimeUsecs
	}
	return 0
}

// Defines a return value of derived metric RPC calls.
type DerivedMetricRPCRetElem struct {
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// The namespace the metric belongs to.
	Namespace *string `protobuf:"bytes,3,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Required. The name of the derived metric.
	MetricName *string `protobuf:"bytes,1,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// Required. The error code of the corresponding RPC call.
	Error *InsightsErrorProto `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,4,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *DerivedMetricRPCRetElem) Reset()         { *m = DerivedMetricRPCRetElem{} }
func (m *DerivedMetricRPCRetElem) String() string { return proto.CompactTextString(m) }
func (*DerivedMetricRPCRetElem) ProtoMessage()    {}
func (*DerivedMetricRPCRetElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{91}
}

func (m *DerivedMetricRPCRetElem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DerivedMetricRPCRetElem.Unmarshal(m, b)
}
func (m *DerivedMetricRPCRetElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DerivedMetricRPCRetElem.Marshal(b, m, deterministic)
}
func (m *DerivedMetricRPCRetElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivedMetricRPCRetElem.Merge(m, src)
}
func (m *DerivedMetricRPCRetElem) XXX_Size() int {
	return xxx_messageInfo_DerivedMetricRPCRetElem.Size(m)
}
func (m *DerivedMetricRPCRetElem) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivedMetricRPCRetElem.DiscardUnknown(m)
}

var xxx_messageInfo_DerivedMetricRPCRetElem proto.InternalMessageInfo

const Default_DerivedMetricRPCRetElem_Namespace string = "_default_"

func (m *DerivedMetricRPCRetElem) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_DerivedMetricRPCRetElem_Namespace
}

func (m *DerivedMetricRPCRetElem) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *DerivedMetricRPCRetElem) GetError() *InsightsErrorProto {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *DerivedMetricRPCRetElem) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Specifies the argument to 'RegisterDerivedMetricTypes' RPC.
type RegisterDerivedMetricTypesArg struct {
	// Required. The list of derived metrics to be registered.
	MetricTypeList       []*DerivedMetricType `protobuf:"bytes,1,rep,name=metric_type_list,json=metricTypeList" json:"metric_type_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RegisterDerivedMetricTypesArg) Reset()         { *m = RegisterDerivedMetricTypesArg{} }
func (m *RegisterDerivedMetricTypesArg) String() string { return proto.CompactTextString(m) }
func (*RegisterDerivedMetricTypesArg) ProtoMessage()    {}
func (*RegisterDerivedMetricTypesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{92}
}

func (m *RegisterDerivedMetricTypesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterDerivedMetricTypesArg.Unmarshal(m, b)
}
func (m *RegisterDerivedMetricTypesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterDerivedMetricTypesArg.Marshal(b, m, deterministic)
}
func (m *RegisterDerivedMetricTypesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterDerivedMetricTypesArg.Merge(m, src)
}
func (m *RegisterDerivedMetricTypesArg) XXX_Size() int {
	return xxx_messageInfo_RegisterDerivedMetricTypesArg.Size(m)
}
func (m *RegisterDerivedMetricTypesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterDerivedMetricTypesArg.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterDerivedMetricTypesArg proto.InternalMessageInfo

func (m *RegisterDerivedMetricTypesArg) GetMetricTypeList() []*DerivedMetricType {
	if m != nil {
		return m.MetricTypeList
	}
	return nil
}

// Specifies the return value of 'RegisterDerivedMetricTypes' RPC.
type RegisterDerivedMetricTypesRet struct {
	// Required. The list of return values, one for each derived metric whose
	// registration failed.
	// TODO (ramesh): make this return value contain one entry for each derived
	// metric in the input list, not just for the ones that failed.
	FailedRetElemList []*DerivedMetricRPCRetElem `protobuf:"bytes,1,rep,name=failed_ret_elem_list,json=failedRetElemList" json:"failed_ret_elem_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RegisterDerivedMetricTypesRet) Reset()         { *m = RegisterDerivedMetricTypesRet{} }
func (m *RegisterDerivedMetricTypesRet) String() string { return proto.CompactTextString(m) }
func (*RegisterDerivedMetricTypesRet) ProtoMessage()    {}
func (*RegisterDerivedMetricTypesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{93}
}

func (m *RegisterDerivedMetricTypesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterDerivedMetricTypesRet.Unmarshal(m, b)
}
func (m *RegisterDerivedMetricTypesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterDerivedMetricTypesRet.Marshal(b, m, deterministic)
}
func (m *RegisterDerivedMetricTypesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterDerivedMetricTypesRet.Merge(m, src)
}
func (m *RegisterDerivedMetricTypesRet) XXX_Size() int {
	return xxx_messageInfo_RegisterDerivedMetricTypesRet.Size(m)
}
func (m *RegisterDerivedMetricTypesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterDerivedMetricTypesRet.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterDerivedMetricTypesRet proto.InternalMessageInfo

func (m *RegisterDerivedMetricTypesRet) GetFailedRetElemList() []*DerivedMetricRPCRetElem {
	if m != nil {
		return m.FailedRetElemList
	}
	return nil
}

func (m *RegisterDerivedMetricTypesRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Specifies the argument to 'UnregisterDerivedMetricTypes' RPC.
type UnregisterDerivedMetricTypesArg struct {
	// Required. The list of derived metrics that should be disabled.
	MetricList           []*UnregisterDerivedMetricTypesArg_MetricTypeInfo `protobuf:"bytes,1,rep,name=metric_list,json=metricList" json:"metric_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *UnregisterDerivedMetricTypesArg) Reset()         { *m = UnregisterDerivedMetricTypesArg{} }
func (m *UnregisterDerivedMetricTypesArg) String() string { return proto.CompactTextString(m) }
func (*UnregisterDerivedMetricTypesArg) ProtoMessage()    {}
func (*UnregisterDerivedMetricTypesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{94}
}

func (m *UnregisterDerivedMetricTypesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterDerivedMetricTypesArg.Unmarshal(m, b)
}
func (m *UnregisterDerivedMetricTypesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterDerivedMetricTypesArg.Marshal(b, m, deterministic)
}
func (m *UnregisterDerivedMetricTypesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterDerivedMetricTypesArg.Merge(m, src)
}
func (m *UnregisterDerivedMetricTypesArg) XXX_Size() int {
	return xxx_messageInfo_UnregisterDerivedMetricTypesArg.Size(m)
}
func (m *UnregisterDerivedMetricTypesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterDerivedMetricTypesArg.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterDerivedMetricTypesArg proto.InternalMessageInfo

func (m *UnregisterDerivedMetricTypesArg) GetMetricList() []*UnregisterDerivedMetricTypesArg_MetricTypeInfo {
	if m != nil {
		return m.MetricList
	}
	return nil
}

// Specifies a derived metric type to be unregistered.
type UnregisterDerivedMetricTypesArg_MetricTypeInfo struct {
	// Required. The entity type of this metric.
	EntityTypeName *string `protobuf:"bytes,1,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// The namespace the metric belongs to.
	Namespace *string `protobuf:"bytes,3,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Required. The name of the metric.
	MetricName           *string  `protobuf:"bytes,2,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnregisterDerivedMetricTypesArg_MetricTypeInfo) Reset() {
	*m = UnregisterDerivedMetricTypesArg_MetricTypeInfo{}
}
func (m *UnregisterDerivedMetricTypesArg_MetricTypeInfo) String() string {
	return proto.CompactTextString(m)
}
func (*UnregisterDerivedMetricTypesArg_MetricTypeInfo) ProtoMessage() {}
func (*UnregisterDerivedMetricTypesArg_MetricTypeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{94, 0}
}

func (m *UnregisterDerivedMetricTypesArg_MetricTypeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterDerivedMetricTypesArg_MetricTypeInfo.Unmarshal(m, b)
}
func (m *UnregisterDerivedMetricTypesArg_MetricTypeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterDerivedMetricTypesArg_MetricTypeInfo.Marshal(b, m, deterministic)
}
func (m *UnregisterDerivedMetricTypesArg_MetricTypeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterDerivedMetricTypesArg_MetricTypeInfo.Merge(m, src)
}
func (m *UnregisterDerivedMetricTypesArg_MetricTypeInfo) XXX_Size() int {
	return xxx_messageInfo_UnregisterDerivedMetricTypesArg_MetricTypeInfo.Size(m)
}
func (m *UnregisterDerivedMetricTypesArg_MetricTypeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterDerivedMetricTypesArg_MetricTypeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterDerivedMetricTypesArg_MetricTypeInfo proto.InternalMessageInfo

const Default_UnregisterDerivedMetricTypesArg_MetricTypeInfo_Namespace string = "_default_"

func (m *UnregisterDerivedMetricTypesArg_MetricTypeInfo) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *UnregisterDerivedMetricTypesArg_MetricTypeInfo) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_UnregisterDerivedMetricTypesArg_MetricTypeInfo_Namespace
}

func (m *UnregisterDerivedMetricTypesArg_MetricTypeInfo) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

// Specifies the return value of 'UnregisterDerivedMetricTypes' RPC.
type UnregisterDerivedMetricTypesRet struct {
	// Required. The list of return values, one for each derived metric whose
	// unregistration failed.
	// TODO (ramesh): make this return value contain one entry for each derived
	// metric in the input list, not just for the ones that failed.
	RetElemList []*DerivedMetricRPCRetElem `protobuf:"bytes,1,rep,name=ret_elem_list,json=retElemList" json:"ret_elem_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *UnregisterDerivedMetricTypesRet) Reset()         { *m = UnregisterDerivedMetricTypesRet{} }
func (m *UnregisterDerivedMetricTypesRet) String() string { return proto.CompactTextString(m) }
func (*UnregisterDerivedMetricTypesRet) ProtoMessage()    {}
func (*UnregisterDerivedMetricTypesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{95}
}

func (m *UnregisterDerivedMetricTypesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterDerivedMetricTypesRet.Unmarshal(m, b)
}
func (m *UnregisterDerivedMetricTypesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterDerivedMetricTypesRet.Marshal(b, m, deterministic)
}
func (m *UnregisterDerivedMetricTypesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterDerivedMetricTypesRet.Merge(m, src)
}
func (m *UnregisterDerivedMetricTypesRet) XXX_Size() int {
	return xxx_messageInfo_UnregisterDerivedMetricTypesRet.Size(m)
}
func (m *UnregisterDerivedMetricTypesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterDerivedMetricTypesRet.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterDerivedMetricTypesRet proto.InternalMessageInfo

func (m *UnregisterDerivedMetricTypesRet) GetRetElemList() []*DerivedMetricRPCRetElem {
	if m != nil {
		return m.RetElemList
	}
	return nil
}

func (m *UnregisterDerivedMetricTypesRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Specifies the argument to 'GetDerivedMetricTypes' RPC.
type GetDerivedMetricTypesArg struct {
	// Optional. All metric names that contain 'metric_name_pattern' as a
	// substring are returned. If 'metric_name_pattern' is not specified, all
	// derived metrics are returned.
	MetricNamePattern    *string  `protobuf:"bytes,1,opt,name=metric_name_pattern,json=metricNamePattern" json:"metric_name_pattern,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDerivedMetricTypesArg) Reset()         { *m = GetDerivedMetricTypesArg{} }
func (m *GetDerivedMetricTypesArg) String() string { return proto.CompactTextString(m) }
func (*GetDerivedMetricTypesArg) ProtoMessage()    {}
func (*GetDerivedMetricTypesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{96}
}

func (m *GetDerivedMetricTypesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDerivedMetricTypesArg.Unmarshal(m, b)
}
func (m *GetDerivedMetricTypesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDerivedMetricTypesArg.Marshal(b, m, deterministic)
}
func (m *GetDerivedMetricTypesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDerivedMetricTypesArg.Merge(m, src)
}
func (m *GetDerivedMetricTypesArg) XXX_Size() int {
	return xxx_messageInfo_GetDerivedMetricTypesArg.Size(m)
}
func (m *GetDerivedMetricTypesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDerivedMetricTypesArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetDerivedMetricTypesArg proto.InternalMessageInfo

func (m *GetDerivedMetricTypesArg) GetMetricNamePattern() string {
	if m != nil && m.MetricNamePattern != nil {
		return *m.MetricNamePattern
	}
	return ""
}

// Specifies the return value of 'GetDerivedMetricTypes' RPC.
type GetDerivedMetricTypesRet struct {
	// Required. List of derived metrics that are returned.
	MetricTypeList []*DerivedMetricType `protobuf:"bytes,1,rep,name=metric_type_list,json=metricTypeList" json:"metric_type_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetDerivedMetricTypesRet) Reset()         { *m = GetDerivedMetricTypesRet{} }
func (m *GetDerivedMetricTypesRet) String() string { return proto.CompactTextString(m) }
func (*GetDerivedMetricTypesRet) ProtoMessage()    {}
func (*GetDerivedMetricTypesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{97}
}

func (m *GetDerivedMetricTypesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDerivedMetricTypesRet.Unmarshal(m, b)
}
func (m *GetDerivedMetricTypesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDerivedMetricTypesRet.Marshal(b, m, deterministic)
}
func (m *GetDerivedMetricTypesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDerivedMetricTypesRet.Merge(m, src)
}
func (m *GetDerivedMetricTypesRet) XXX_Size() int {
	return xxx_messageInfo_GetDerivedMetricTypesRet.Size(m)
}
func (m *GetDerivedMetricTypesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDerivedMetricTypesRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetDerivedMetricTypesRet proto.InternalMessageInfo

func (m *GetDerivedMetricTypesRet) GetMetricTypeList() []*DerivedMetricType {
	if m != nil {
		return m.MetricTypeList
	}
	return nil
}

func (m *GetDerivedMetricTypesRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type GetClusterReplicationStateArg struct {
	// Required. List of cluster id's for which replication state is requested.
	ClusterUuidList      []string `protobuf:"bytes,1,rep,name=cluster_uuid_list,json=clusterUuidList" json:"cluster_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterReplicationStateArg) Reset()         { *m = GetClusterReplicationStateArg{} }
func (m *GetClusterReplicationStateArg) String() string { return proto.CompactTextString(m) }
func (*GetClusterReplicationStateArg) ProtoMessage()    {}
func (*GetClusterReplicationStateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{98}
}

func (m *GetClusterReplicationStateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterReplicationStateArg.Unmarshal(m, b)
}
func (m *GetClusterReplicationStateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterReplicationStateArg.Marshal(b, m, deterministic)
}
func (m *GetClusterReplicationStateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterReplicationStateArg.Merge(m, src)
}
func (m *GetClusterReplicationStateArg) XXX_Size() int {
	return xxx_messageInfo_GetClusterReplicationStateArg.Size(m)
}
func (m *GetClusterReplicationStateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterReplicationStateArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterReplicationStateArg proto.InternalMessageInfo

func (m *GetClusterReplicationStateArg) GetClusterUuidList() []string {
	if m != nil {
		return m.ClusterUuidList
	}
	return nil
}

type SyncTimestampsInfo struct {
	// Required. Shard id for the element.
	ShardGuid *EntityGuid `protobuf:"bytes,1,opt,name=shard_guid,json=shardGuid" json:"shard_guid,omitempty"`
	// Required. Timestamp of sync heartbeat received.
	LatestSyncHeartbeatTimestamp *int64 `protobuf:"varint,2,opt,name=latest_sync_heartbeat_timestamp,json=latestSyncHeartbeatTimestamp" json:"latest_sync_heartbeat_timestamp,omitempty"`
	// Required. Db modified timestamp for the current shard.
	LatestDbModifiedTimestamp *int64 `protobuf:"varint,3,opt,name=latest_db_modified_timestamp,json=latestDbModifiedTimestamp" json:"latest_db_modified_timestamp,omitempty"`
	// Required. Cluster identifier.
	ClusterUuid          *string  `protobuf:"bytes,4,opt,name=cluster_uuid,json=clusterUuid" json:"cluster_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncTimestampsInfo) Reset()         { *m = SyncTimestampsInfo{} }
func (m *SyncTimestampsInfo) String() string { return proto.CompactTextString(m) }
func (*SyncTimestampsInfo) ProtoMessage()    {}
func (*SyncTimestampsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{99}
}

func (m *SyncTimestampsInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncTimestampsInfo.Unmarshal(m, b)
}
func (m *SyncTimestampsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncTimestampsInfo.Marshal(b, m, deterministic)
}
func (m *SyncTimestampsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncTimestampsInfo.Merge(m, src)
}
func (m *SyncTimestampsInfo) XXX_Size() int {
	return xxx_messageInfo_SyncTimestampsInfo.Size(m)
}
func (m *SyncTimestampsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncTimestampsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SyncTimestampsInfo proto.InternalMessageInfo

func (m *SyncTimestampsInfo) GetShardGuid() *EntityGuid {
	if m != nil {
		return m.ShardGuid
	}
	return nil
}

func (m *SyncTimestampsInfo) GetLatestSyncHeartbeatTimestamp() int64 {
	if m != nil && m.LatestSyncHeartbeatTimestamp != nil {
		return *m.LatestSyncHeartbeatTimestamp
	}
	return 0
}

func (m *SyncTimestampsInfo) GetLatestDbModifiedTimestamp() int64 {
	if m != nil && m.LatestDbModifiedTimestamp != nil {
		return *m.LatestDbModifiedTimestamp
	}
	return 0
}

func (m *SyncTimestampsInfo) GetClusterUuid() string {
	if m != nil && m.ClusterUuid != nil {
		return *m.ClusterUuid
	}
	return ""
}

type GetClusterReplicationStateRet struct {
	// Required. Timestamp for sync and db modified for every shard.
	SyncTimestampInfo []*SyncTimestampsInfo `protobuf:"bytes,1,rep,name=sync_timestamp_info,json=syncTimestampInfo" json:"sync_timestamp_info,omitempty"`
	// Required. Execution time for the rpc.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetClusterReplicationStateRet) Reset()         { *m = GetClusterReplicationStateRet{} }
func (m *GetClusterReplicationStateRet) String() string { return proto.CompactTextString(m) }
func (*GetClusterReplicationStateRet) ProtoMessage()    {}
func (*GetClusterReplicationStateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{100}
}

func (m *GetClusterReplicationStateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterReplicationStateRet.Unmarshal(m, b)
}
func (m *GetClusterReplicationStateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterReplicationStateRet.Marshal(b, m, deterministic)
}
func (m *GetClusterReplicationStateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterReplicationStateRet.Merge(m, src)
}
func (m *GetClusterReplicationStateRet) XXX_Size() int {
	return xxx_messageInfo_GetClusterReplicationStateRet.Size(m)
}
func (m *GetClusterReplicationStateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterReplicationStateRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterReplicationStateRet proto.InternalMessageInfo

func (m *GetClusterReplicationStateRet) GetSyncTimestampInfo() []*SyncTimestampsInfo {
	if m != nil {
		return m.SyncTimestampInfo
	}
	return nil
}

func (m *GetClusterReplicationStateRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// RPC argument to get stats from a insights server
type GetInsightsLeaderStatsArg struct {
	TypeList             []GetInsightsLeaderStatsArg_Type `protobuf:"varint,1,rep,name=type_list,json=typeList,enum=nutanix.insights.interface.GetInsightsLeaderStatsArg_Type" json:"type_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *GetInsightsLeaderStatsArg) Reset()         { *m = GetInsightsLeaderStatsArg{} }
func (m *GetInsightsLeaderStatsArg) String() string { return proto.CompactTextString(m) }
func (*GetInsightsLeaderStatsArg) ProtoMessage()    {}
func (*GetInsightsLeaderStatsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{101}
}

func (m *GetInsightsLeaderStatsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInsightsLeaderStatsArg.Unmarshal(m, b)
}
func (m *GetInsightsLeaderStatsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInsightsLeaderStatsArg.Marshal(b, m, deterministic)
}
func (m *GetInsightsLeaderStatsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInsightsLeaderStatsArg.Merge(m, src)
}
func (m *GetInsightsLeaderStatsArg) XXX_Size() int {
	return xxx_messageInfo_GetInsightsLeaderStatsArg.Size(m)
}
func (m *GetInsightsLeaderStatsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInsightsLeaderStatsArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetInsightsLeaderStatsArg proto.InternalMessageInfo

func (m *GetInsightsLeaderStatsArg) GetTypeList() []GetInsightsLeaderStatsArg_Type {
	if m != nil {
		return m.TypeList
	}
	return nil
}

type StatsFormat struct {
	// Required. stats name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Required. stats value
	Value                *DataValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *StatsFormat) Reset()         { *m = StatsFormat{} }
func (m *StatsFormat) String() string { return proto.CompactTextString(m) }
func (*StatsFormat) ProtoMessage()    {}
func (*StatsFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{102}
}

func (m *StatsFormat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsFormat.Unmarshal(m, b)
}
func (m *StatsFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsFormat.Marshal(b, m, deterministic)
}
func (m *StatsFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsFormat.Merge(m, src)
}
func (m *StatsFormat) XXX_Size() int {
	return xxx_messageInfo_StatsFormat.Size(m)
}
func (m *StatsFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsFormat.DiscardUnknown(m)
}

var xxx_messageInfo_StatsFormat proto.InternalMessageInfo

func (m *StatsFormat) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *StatsFormat) GetValue() *DataValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type GetInsightsLeaderStatsRet struct {
	StatsList []*StatsFormat `protobuf:"bytes,1,rep,name=stats_list,json=statsList" json:"stats_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetInsightsLeaderStatsRet) Reset()         { *m = GetInsightsLeaderStatsRet{} }
func (m *GetInsightsLeaderStatsRet) String() string { return proto.CompactTextString(m) }
func (*GetInsightsLeaderStatsRet) ProtoMessage()    {}
func (*GetInsightsLeaderStatsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{103}
}

func (m *GetInsightsLeaderStatsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInsightsLeaderStatsRet.Unmarshal(m, b)
}
func (m *GetInsightsLeaderStatsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInsightsLeaderStatsRet.Marshal(b, m, deterministic)
}
func (m *GetInsightsLeaderStatsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInsightsLeaderStatsRet.Merge(m, src)
}
func (m *GetInsightsLeaderStatsRet) XXX_Size() int {
	return xxx_messageInfo_GetInsightsLeaderStatsRet.Size(m)
}
func (m *GetInsightsLeaderStatsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInsightsLeaderStatsRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetInsightsLeaderStatsRet proto.InternalMessageInfo

func (m *GetInsightsLeaderStatsRet) GetStatsList() []*StatsFormat {
	if m != nil {
		return m.StatsList
	}
	return nil
}

func (m *GetInsightsLeaderStatsRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Defines the format in which RPC requests and responses will be logged by
// insights server.
type RpcLogEntry struct {
	// Required. Name of the RPC which is being logged.
	RpcName *string `protobuf:"bytes,1,opt,name=rpc_name,json=rpcName" json:"rpc_name,omitempty"`
	// Required. Timestamp when request was received by the server.
	RequestTimestampUsecs *int64 `protobuf:"varint,2,opt,name=request_timestamp_usecs,json=requestTimestampUsecs" json:"request_timestamp_usecs,omitempty"`
	// Required. Serialized bytes of the request arg proto.
	RequestBytes []byte `protobuf:"bytes,3,opt,name=request_bytes,json=requestBytes" json:"request_bytes,omitempty"`
	// Required. Timestamp when the response was issued by the server.
	ResponseTimestampUsecs *int64 `protobuf:"varint,4,opt,name=response_timestamp_usecs,json=responseTimestampUsecs" json:"response_timestamp_usecs,omitempty"`
	// Required. Serialized bytes of the response arg proto.
	ResponseBytes        []byte   `protobuf:"bytes,5,opt,name=response_bytes,json=responseBytes" json:"response_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcLogEntry) Reset()         { *m = RpcLogEntry{} }
func (m *RpcLogEntry) String() string { return proto.CompactTextString(m) }
func (*RpcLogEntry) ProtoMessage()    {}
func (*RpcLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{104}
}

func (m *RpcLogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcLogEntry.Unmarshal(m, b)
}
func (m *RpcLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcLogEntry.Marshal(b, m, deterministic)
}
func (m *RpcLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcLogEntry.Merge(m, src)
}
func (m *RpcLogEntry) XXX_Size() int {
	return xxx_messageInfo_RpcLogEntry.Size(m)
}
func (m *RpcLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RpcLogEntry proto.InternalMessageInfo

func (m *RpcLogEntry) GetRpcName() string {
	if m != nil && m.RpcName != nil {
		return *m.RpcName
	}
	return ""
}

func (m *RpcLogEntry) GetRequestTimestampUsecs() int64 {
	if m != nil && m.RequestTimestampUsecs != nil {
		return *m.RequestTimestampUsecs
	}
	return 0
}

func (m *RpcLogEntry) GetRequestBytes() []byte {
	if m != nil {
		return m.RequestBytes
	}
	return nil
}

func (m *RpcLogEntry) GetResponseTimestampUsecs() int64 {
	if m != nil && m.ResponseTimestampUsecs != nil {
		return *m.ResponseTimestampUsecs
	}
	return 0
}

func (m *RpcLogEntry) GetResponseBytes() []byte {
	if m != nil {
		return m.ResponseBytes
	}
	return nil
}

// Defines the what part of a watch i.e. what (or the context) the watch is
// defined on.
//
// The guarantee provided by the watches framework is described in the file
// $TOP/insights/insights_server/watch/watches_framework_guarantee.txt
//
// NOTE(swagat): Entity watches are currently supported on entities and their
// attributes only.  Watches on metrics are not supported.
// Examples of WatchSubject protos (for examples of complete Watch definition,
// see examples below for Watch message):
//
// 1. Entity based watch: Watch on any new entity creation of entity type 'VM'
//   {
//     entity_guid {
//       entity_type_name: 'VM'
//     }
//   }
//
// 2. Entity based watch: Watch whenever any attribute in VM 123 changes.
//   {
//     entity_guid {
//       entity_type_name: 'VM'
//       entity_id: 123
//     }
//   }
//
// 3. Attribute based watch: Watch on some condition on 'power_on' attribute
//    belonging to entity 'VM1'.
//   {
//     entity_guid {
//       entity_type_name: 'VM'
//       entity_id: VM1
//     }
//     metric_name: "power_on"
//   }
//
// 4. Entity schema watch where the subject is entity type 'vm'.
//    {
//      entity_type_name: 'vm'
//    }
//
type WatchSubject struct {
	// Optional. Only to be set in case of 'watch_category' = kEntityWatch or
	// kMetricWatch.
	// The identity of the entity on which the watch is created.
	// entity_guid.entity_type_name must be set while entity_guid.entity_id is
	// optional. See examples above for various use cases.
	EntityGuid *EntityGuid `protobuf:"bytes,1,opt,name=entity_guid,json=entityGuid" json:"entity_guid,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	// Set this field if the metric belongs to a namespace other than '_default_'.
	Namespace *string `protobuf:"bytes,4,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Optional. Only to be set in case of 'watch_category' = kEntityWatch or
	// kMetricWatch.
	// Metric or Attribute name on which the watch is to be set.
	// Currently, only attributes are supported.
	MetricName *string `protobuf:"bytes,2,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// Optional. Only to be set in case of 'watch_category' = kEntitySchemaWatch.
	// The name of the entity type on which to watch for changes.
	// If 'watch_type' is not set, the watch will be set on all the entity types.
	EntityTypeName       *string  `protobuf:"bytes,3,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchSubject) Reset()         { *m = WatchSubject{} }
func (m *WatchSubject) String() string { return proto.CompactTextString(m) }
func (*WatchSubject) ProtoMessage()    {}
func (*WatchSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{105}
}

func (m *WatchSubject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchSubject.Unmarshal(m, b)
}
func (m *WatchSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchSubject.Marshal(b, m, deterministic)
}
func (m *WatchSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchSubject.Merge(m, src)
}
func (m *WatchSubject) XXX_Size() int {
	return xxx_messageInfo_WatchSubject.Size(m)
}
func (m *WatchSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchSubject.DiscardUnknown(m)
}

var xxx_messageInfo_WatchSubject proto.InternalMessageInfo

const Default_WatchSubject_Namespace string = "_default_"

func (m *WatchSubject) GetEntityGuid() *EntityGuid {
	if m != nil {
		return m.EntityGuid
	}
	return nil
}

func (m *WatchSubject) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_WatchSubject_Namespace
}

func (m *WatchSubject) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *WatchSubject) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

// Describes an entity / entity type based watch condition which would apply on
// the associated watch subject.
//
// Examples:
//
// 1. Entity based watch condition: Creation of a new entity.
//   {
//     entity_watch_type: kEntityCreate
//   }
//
// 2. Entity based watch condition: Creation or update of an entity.
//   {
//     entity_watch_type: kEntityCreate | kEntityUpdate
//   }
//
type EntityWatchCondition struct {
	// Required. The entity watch type.
	EntityWatchType *int32 `protobuf:"varint,1,opt,name=entity_watch_type,json=entityWatchType" json:"entity_watch_type,omitempty"`
	// Optional. Filter expression for conditional watches. This would be used to
	// include or exclude entities by limiting the fired watches to the set of
	// entities satisfying 'filter_expr'.
	// Note: Missing attribute would result in ComparisonExpression evaluating to
	// false, irrespective of the ComparisonExpression::Operator used.
	// Currently, we do not support any Expression::Operator, i.e., we require
	// the lhs and rhs of ComparisonExpression to be LeafExpressions.
	FilterExpr           *BooleanExpression `protobuf:"bytes,2,opt,name=filter_expr,json=filterExpr" json:"filter_expr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EntityWatchCondition) Reset()         { *m = EntityWatchCondition{} }
func (m *EntityWatchCondition) String() string { return proto.CompactTextString(m) }
func (*EntityWatchCondition) ProtoMessage()    {}
func (*EntityWatchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{106}
}

func (m *EntityWatchCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityWatchCondition.Unmarshal(m, b)
}
func (m *EntityWatchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityWatchCondition.Marshal(b, m, deterministic)
}
func (m *EntityWatchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityWatchCondition.Merge(m, src)
}
func (m *EntityWatchCondition) XXX_Size() int {
	return xxx_messageInfo_EntityWatchCondition.Size(m)
}
func (m *EntityWatchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityWatchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_EntityWatchCondition proto.InternalMessageInfo

func (m *EntityWatchCondition) GetEntityWatchType() int32 {
	if m != nil && m.EntityWatchType != nil {
		return *m.EntityWatchType
	}
	return 0
}

func (m *EntityWatchCondition) GetFilterExpr() *BooleanExpression {
	if m != nil {
		return m.FilterExpr
	}
	return nil
}

// Describes a metric / attribute based watch condition which would apply on
// the associated watch subject.
//
// Examples:
//
// 1. Metric / attribute based watch condition: Some metric value crossing a
//    certain threshold value.
//   {
//     metric_watch_type: kWatchExpression
//     watch_expression {
//       new_value {
//         int64_value: 90
//       }
//     }
//   }
//
// 2. Metric / attribute based watch condition: Some metric value going below a
//    certain threshold value.
//   {
//     metric_watch_type: kWatchExpression
//     watch_expression {
//       op: kLT
//       new_value {
//         int64_value: 10
//       }
//     }
//   }
//
// 3. Metric / attribute based watch condition: Some attribute value becomes 42
//   {
//     metric_watch_type: kWatchExpression
//     watch_expression {
//       op: kEQ
//       new_value {
//         int64_value: 10
//       }
//     }
//   }
//
// 4. Metric / attribute based watch condition: Some metric value changing by
//    30%.
//   {
//     metric_watch_type: kValueChange
//     change {
//       percentage_change: 30
//     }
//   }
//
// 5. Metric / attribute based watch condition: Some metric value increasing
//    by 30%.
//   {
//     metric_watch_type: kValueChange
//     change {
//       change_type: kPos
//       percentage_change: 30
//     }
//   }
//
// Next id: 4
type MetricWatchCondition struct {
	// Required.
	MetricWatchType *MetricWatchCondition_MetricWatchType `protobuf:"varint,1,opt,name=metric_watch_type,json=metricWatchType,enum=nutanix.insights.interface.MetricWatchCondition_MetricWatchType" json:"metric_watch_type,omitempty"`
	// New value based watch condition. To be set only when 'metric_watch_type'
	// is kWatchExpression, ignored otherwise. Note: Only one of
	// 'watch_expression' or 'change' fields must be set.
	WatchExpression *MetricWatchCondition_WatchExpression `protobuf:"bytes,2,opt,name=watch_expression,json=watchExpression" json:"watch_expression,omitempty"`
	// Change amount based watch condition. This field is to be set only when
	// metric_watch_type is set to kValueChange, will be ignored otherwise.
	// Note: Only one of 'watch_expression' or 'change' fields must be set.
	Change               *MetricWatchCondition_WatchChange `protobuf:"bytes,3,opt,name=change" json:"change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *MetricWatchCondition) Reset()         { *m = MetricWatchCondition{} }
func (m *MetricWatchCondition) String() string { return proto.CompactTextString(m) }
func (*MetricWatchCondition) ProtoMessage()    {}
func (*MetricWatchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{107}
}

func (m *MetricWatchCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricWatchCondition.Unmarshal(m, b)
}
func (m *MetricWatchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricWatchCondition.Marshal(b, m, deterministic)
}
func (m *MetricWatchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricWatchCondition.Merge(m, src)
}
func (m *MetricWatchCondition) XXX_Size() int {
	return xxx_messageInfo_MetricWatchCondition.Size(m)
}
func (m *MetricWatchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricWatchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_MetricWatchCondition proto.InternalMessageInfo

func (m *MetricWatchCondition) GetMetricWatchType() MetricWatchCondition_MetricWatchType {
	if m != nil && m.MetricWatchType != nil {
		return *m.MetricWatchType
	}
	return MetricWatchCondition_kWatchExpression
}

func (m *MetricWatchCondition) GetWatchExpression() *MetricWatchCondition_WatchExpression {
	if m != nil {
		return m.WatchExpression
	}
	return nil
}

func (m *MetricWatchCondition) GetChange() *MetricWatchCondition_WatchChange {
	if m != nil {
		return m.Change
	}
	return nil
}

// Defines a condition based on the new value of the metric / attribute.
// Next id: 4
type MetricWatchCondition_WatchExpression struct {
	// Required.
	// The comparison operator to be applied on the new value.
	// All operators except kLIKE are supported. If 'str_value' is set, then
	// only operators kEQ and kNE are applicable.
	Op *ComparisonExpression_Operator `protobuf:"varint,1,opt,name=op,enum=nutanix.insights.interface.ComparisonExpression_Operator,def=5" json:"op,omitempty"`
	// New value.
	NewValue             *DataValue `protobuf:"bytes,3,opt,name=new_value,json=newValue" json:"new_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MetricWatchCondition_WatchExpression) Reset()         { *m = MetricWatchCondition_WatchExpression{} }
func (m *MetricWatchCondition_WatchExpression) String() string { return proto.CompactTextString(m) }
func (*MetricWatchCondition_WatchExpression) ProtoMessage()    {}
func (*MetricWatchCondition_WatchExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{107, 0}
}

func (m *MetricWatchCondition_WatchExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricWatchCondition_WatchExpression.Unmarshal(m, b)
}
func (m *MetricWatchCondition_WatchExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricWatchCondition_WatchExpression.Marshal(b, m, deterministic)
}
func (m *MetricWatchCondition_WatchExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricWatchCondition_WatchExpression.Merge(m, src)
}
func (m *MetricWatchCondition_WatchExpression) XXX_Size() int {
	return xxx_messageInfo_MetricWatchCondition_WatchExpression.Size(m)
}
func (m *MetricWatchCondition_WatchExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricWatchCondition_WatchExpression.DiscardUnknown(m)
}

var xxx_messageInfo_MetricWatchCondition_WatchExpression proto.InternalMessageInfo

const Default_MetricWatchCondition_WatchExpression_Op ComparisonExpression_Operator = ComparisonExpression_kGE

func (m *MetricWatchCondition_WatchExpression) GetOp() ComparisonExpression_Operator {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return Default_MetricWatchCondition_WatchExpression_Op
}

func (m *MetricWatchCondition_WatchExpression) GetNewValue() *DataValue {
	if m != nil {
		return m.NewValue
	}
	return nil
}

// Next id: 4
type MetricWatchCondition_WatchChange struct {
	// Required. Type of change.
	ChangeType *MetricWatchCondition_WatchChange_ChangeType `protobuf:"varint,1,opt,name=change_type,json=changeType,enum=nutanix.insights.interface.MetricWatchCondition_WatchChange_ChangeType,def=1" json:"change_type,omitempty"`
	// % change value.
	PercentageChange *float64 `protobuf:"fixed64,2,opt,name=percentage_change,json=percentageChange" json:"percentage_change,omitempty"`
	// Absolute change value.
	AbsoluteChange       *int64   `protobuf:"varint,3,opt,name=absolute_change,json=absoluteChange" json:"absolute_change,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricWatchCondition_WatchChange) Reset()         { *m = MetricWatchCondition_WatchChange{} }
func (m *MetricWatchCondition_WatchChange) String() string { return proto.CompactTextString(m) }
func (*MetricWatchCondition_WatchChange) ProtoMessage()    {}
func (*MetricWatchCondition_WatchChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{107, 1}
}

func (m *MetricWatchCondition_WatchChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricWatchCondition_WatchChange.Unmarshal(m, b)
}
func (m *MetricWatchCondition_WatchChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricWatchCondition_WatchChange.Marshal(b, m, deterministic)
}
func (m *MetricWatchCondition_WatchChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricWatchCondition_WatchChange.Merge(m, src)
}
func (m *MetricWatchCondition_WatchChange) XXX_Size() int {
	return xxx_messageInfo_MetricWatchCondition_WatchChange.Size(m)
}
func (m *MetricWatchCondition_WatchChange) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricWatchCondition_WatchChange.DiscardUnknown(m)
}

var xxx_messageInfo_MetricWatchCondition_WatchChange proto.InternalMessageInfo

const Default_MetricWatchCondition_WatchChange_ChangeType MetricWatchCondition_WatchChange_ChangeType = MetricWatchCondition_WatchChange_kAbs

func (m *MetricWatchCondition_WatchChange) GetChangeType() MetricWatchCondition_WatchChange_ChangeType {
	if m != nil && m.ChangeType != nil {
		return *m.ChangeType
	}
	return Default_MetricWatchCondition_WatchChange_ChangeType
}

func (m *MetricWatchCondition_WatchChange) GetPercentageChange() float64 {
	if m != nil && m.PercentageChange != nil {
		return *m.PercentageChange
	}
	return 0
}

func (m *MetricWatchCondition_WatchChange) GetAbsoluteChange() int64 {
	if m != nil && m.AbsoluteChange != nil {
		return *m.AbsoluteChange
	}
	return 0
}

type EntitySchemaWatchCondition struct {
	// Required. Defines the entity schema watch type for this watch condition.
	WatchType *uint32 `protobuf:"varint,1,opt,name=watch_type,json=watchType" json:"watch_type,omitempty"`
	// Optional. Whether to only consider registration/update/unregistration of
	// attributes.
	AttributesOnly       *bool    `protobuf:"varint,3,opt,name=attributes_only,json=attributesOnly,def=0" json:"attributes_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntitySchemaWatchCondition) Reset()         { *m = EntitySchemaWatchCondition{} }
func (m *EntitySchemaWatchCondition) String() string { return proto.CompactTextString(m) }
func (*EntitySchemaWatchCondition) ProtoMessage()    {}
func (*EntitySchemaWatchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{108}
}

func (m *EntitySchemaWatchCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntitySchemaWatchCondition.Unmarshal(m, b)
}
func (m *EntitySchemaWatchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntitySchemaWatchCondition.Marshal(b, m, deterministic)
}
func (m *EntitySchemaWatchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntitySchemaWatchCondition.Merge(m, src)
}
func (m *EntitySchemaWatchCondition) XXX_Size() int {
	return xxx_messageInfo_EntitySchemaWatchCondition.Size(m)
}
func (m *EntitySchemaWatchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_EntitySchemaWatchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_EntitySchemaWatchCondition proto.InternalMessageInfo

const Default_EntitySchemaWatchCondition_AttributesOnly bool = false

func (m *EntitySchemaWatchCondition) GetWatchType() uint32 {
	if m != nil && m.WatchType != nil {
		return *m.WatchType
	}
	return 0
}

func (m *EntitySchemaWatchCondition) GetAttributesOnly() bool {
	if m != nil && m.AttributesOnly != nil {
		return *m.AttributesOnly
	}
	return Default_EntitySchemaWatchCondition_AttributesOnly
}

// Defines a watch enabled on Insights DB.
//
// Examples of Watch protos:
//
// 1. Watch set by Acropolis to get notified whenever a new VM is created.
//   {
//     watch_category: kEntityWatch
//     watch_name: "NewVMCreation"
//
//     watch_subject {
//       entity_guid {
//         entity_type_name: 'VM'
//       }
//     }
//
//     entity_watch_condition {
//       entity_watch_type: kEntityCreate
//     }
//   }
//
// 2. Watch set by Alert Manager to get notified whenever disk usage goes up by
//    30% on any disk.
//   {
//     watch_category: kMetricWatch
//     watch_name: "DiskUsage30percentBump"
//
//     watch_subject {
//       entity_guid {
//         entity_type_name: 'disk'
//       }
//       metric_name: 'disk_usage'
//     }
//
//     metric_watch_condition {
//       metric_watch_type: kValueChange
//       change {
//         change_type: kPos
//         percentage_change: 30
//       }
//     }
//   }
//
// 3. Watch set by Prism Central to get notified whenever attribute
//    power_on_state changes in any VM.
//   {
//     watch_category: kMetricWatch
//     watch_name: "PowerOnStateChange"
//
//     watch_subject {
//       entity_guid {
//         entity_type_name: 'VM'
//       }
//       metric_name: 'power_on_state'
//     }
//
//     metric_watch_condition {
//       metric_watch_type: kValueChange
//       change {
//         change_type: kAny
//       }
//     }
//   }
//
// 4. Watch set by Acropolis to get notified whenever a new entity is created
//    with UUID 123.
//   {
//     watch_category: kEntityWatch
//     watch_name: "EntityCreationUUID123"
//
//     watch_subject {
//       entity_guid {
//         entity_id: 123
//       }
//     }
//
//     entity_watch_condition {
//       entity_watch_type: kEntityCreate
//     }
//   }
//
// 4. Watch set to get notifications whenever a new metric type is added to the
//    entity type 'vm'.
//   {
//     watch_category: kEntitySchemaWatch
//     watch_name: "vm_metric_register"
//
//     watch_subject {
//       entity_type_name: "vm"
//     }
//
//     entity_schema_watch_condition {
//       watch_type: kRegisterMetricType
//     }
//   }
//
// Next id: 9
type Watch struct {
	// Required. What type of watch is being defined.
	WatchCategory *Watch_WatchCategory `protobuf:"varint,1,opt,name=watch_category,json=watchCategory,enum=nutanix.insights.interface.Watch_WatchCategory" json:"watch_category,omitempty"`
	// Required. Unique alphanumeric string identifier for this watch.  E.g.
	// "NewVMCreation", "DiskUsage30percentBump" etc. The value should be unique
	// for a client_id but may repeat across clients.
	WatchName *string `protobuf:"bytes,2,opt,name=watch_name,json=watchName" json:"watch_name,omitempty"`
	// Required. Specifies what the watch is defined on.
	WatchSubject *WatchSubject `protobuf:"bytes,3,opt,name=watch_subject,json=watchSubject" json:"watch_subject,omitempty"`
	// Entity watch condition. To be set only if 'watch_category' is
	// kEntityWatch.
	EntityWatchCondition *EntityWatchCondition `protobuf:"bytes,4,opt,name=entity_watch_condition,json=entityWatchCondition" json:"entity_watch_condition,omitempty"`
	// Metric watch condition. To be set only if 'watch_category' is
	// kMetricWatch.
	MetricWatchCondition *MetricWatchCondition `protobuf:"bytes,5,opt,name=metric_watch_condition,json=metricWatchCondition" json:"metric_watch_condition,omitempty"`
	// Required iff 'watch_category' is 'kEntitySchemaWatch'. Specifies the
	// entity type schema watch condition.
	EntitySchemaWatchCondition *EntitySchemaWatchCondition `protobuf:"bytes,8,opt,name=entity_schema_watch_condition,json=entitySchemaWatchCondition" json:"entity_schema_watch_condition,omitempty"`
	// Required.
	//
	// Note: Till 4.6.2 release, this field will not have any impact on the
	// evaluation or notification of watches. But in future releases, we plan to
	// handle watches with different priorities differently.
	WatchPriority *Watch_WatchPriority `protobuf:"varint,6,opt,name=watch_priority,json=watchPriority,enum=nutanix.insights.interface.Watch_WatchPriority,def=1" json:"watch_priority,omitempty"`
	// Optional. To be set only if 'watch_category' is kEntityWatch. Set this to
	// true only if the client requires the previous state of the entity as well
	// as part of the fired watch which contains the current state of the entity.
	ReturnPreviousEntityState *bool `protobuf:"varint,7,opt,name=return_previous_entity_state,json=returnPreviousEntityState,def=0" json:"return_previous_entity_state,omitempty"`
	// Optional. To be set iff 'watch_category' is kEntityWatch. If set to true,
	// then the attributes present in 'fired_watch_projection_list' will be
	// returned to the client in the entity payload as part of fired watch and
	// in the current state when an EntityId watch is registered. If set to false,
	// the entity payload will remain unchanged.
	ApplyProjectionOnFiredWatch *bool `protobuf:"varint,9,opt,name=apply_projection_on_fired_watch,json=applyProjectionOnFiredWatch,def=0" json:"apply_projection_on_fired_watch,omitempty"`
	// Optional. Applicable iff 'watch_category' is kEntityWatch. Specifies the list
	// of attributes to be returned to the client in the entity payload as part of
	// fired watch (previous state and current state) and in the current state when
	// an EntityId watch is registered. If this field is empty and
	// `apply_projection_on_fired_watch` is true, then no attributes are returned.
	FiredWatchProjectionList []string `protobuf:"bytes,10,rep,name=fired_watch_projection_list,json=firedWatchProjectionList" json:"fired_watch_projection_list,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *Watch) Reset()         { *m = Watch{} }
func (m *Watch) String() string { return proto.CompactTextString(m) }
func (*Watch) ProtoMessage()    {}
func (*Watch) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{109}
}

func (m *Watch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Watch.Unmarshal(m, b)
}
func (m *Watch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Watch.Marshal(b, m, deterministic)
}
func (m *Watch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Watch.Merge(m, src)
}
func (m *Watch) XXX_Size() int {
	return xxx_messageInfo_Watch.Size(m)
}
func (m *Watch) XXX_DiscardUnknown() {
	xxx_messageInfo_Watch.DiscardUnknown(m)
}

var xxx_messageInfo_Watch proto.InternalMessageInfo

const Default_Watch_WatchPriority Watch_WatchPriority = Watch_kNormal
const Default_Watch_ReturnPreviousEntityState bool = false
const Default_Watch_ApplyProjectionOnFiredWatch bool = false

func (m *Watch) GetWatchCategory() Watch_WatchCategory {
	if m != nil && m.WatchCategory != nil {
		return *m.WatchCategory
	}
	return Watch_kEntityWatch
}

func (m *Watch) GetWatchName() string {
	if m != nil && m.WatchName != nil {
		return *m.WatchName
	}
	return ""
}

func (m *Watch) GetWatchSubject() *WatchSubject {
	if m != nil {
		return m.WatchSubject
	}
	return nil
}

func (m *Watch) GetEntityWatchCondition() *EntityWatchCondition {
	if m != nil {
		return m.EntityWatchCondition
	}
	return nil
}

func (m *Watch) GetMetricWatchCondition() *MetricWatchCondition {
	if m != nil {
		return m.MetricWatchCondition
	}
	return nil
}

func (m *Watch) GetEntitySchemaWatchCondition() *EntitySchemaWatchCondition {
	if m != nil {
		return m.EntitySchemaWatchCondition
	}
	return nil
}

func (m *Watch) GetWatchPriority() Watch_WatchPriority {
	if m != nil && m.WatchPriority != nil {
		return *m.WatchPriority
	}
	return Default_Watch_WatchPriority
}

func (m *Watch) GetReturnPreviousEntityState() bool {
	if m != nil && m.ReturnPreviousEntityState != nil {
		return *m.ReturnPreviousEntityState
	}
	return Default_Watch_ReturnPreviousEntityState
}

func (m *Watch) GetApplyProjectionOnFiredWatch() bool {
	if m != nil && m.ApplyProjectionOnFiredWatch != nil {
		return *m.ApplyProjectionOnFiredWatch
	}
	return Default_Watch_ApplyProjectionOnFiredWatch
}

func (m *Watch) GetFiredWatchProjectionList() []string {
	if m != nil {
		return m.FiredWatchProjectionList
	}
	return nil
}

// Describes the fired entity schema watch.
// Next id: 5
type EntitySchemaChange struct {
	// Required. The reason for which the watch was fired.
	WatchType *EntitySchemaWatchCondition_SchemaWatchType `protobuf:"varint,1,opt,name=watch_type,json=watchType,enum=nutanix.insights.interface.EntitySchemaWatchCondition_SchemaWatchType" json:"watch_type,omitempty"`
	// Required. The name of the entity type associated with the fired watch.
	EntityTypeName *string `protobuf:"bytes,2,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	// Required iff 'watch_type' is 'kNewEntity' or 'kUpdateEntity'. The entity
	// type information.
	EntityTypeInfo *TypeInfo `protobuf:"bytes,3,opt,name=entity_type_info,json=entityTypeInfo" json:"entity_type_info,omitempty"`
	// Required iff 'watch_type' is 'kRegisterMetricType', 'kUpdateMetricType' or
	// 'kUnregisterMetricType'. The newly registered or updated or unregistered
	// non-derived metric type.
	// In a fired watch of type kRegisterMetricType or kUpdateMetricType, this
	// field is always of size 1. In other types of fired watches, the size is 0.
	// When returning the current state as part of watch registration, this field
	// is used to return the current list of metric types registered to the given
	// entity_type and so the field may have any size.
	MetricTypeList       []*MetricType `protobuf:"bytes,4,rep,name=metric_type_list,json=metricTypeList" json:"metric_type_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EntitySchemaChange) Reset()         { *m = EntitySchemaChange{} }
func (m *EntitySchemaChange) String() string { return proto.CompactTextString(m) }
func (*EntitySchemaChange) ProtoMessage()    {}
func (*EntitySchemaChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{110}
}

func (m *EntitySchemaChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntitySchemaChange.Unmarshal(m, b)
}
func (m *EntitySchemaChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntitySchemaChange.Marshal(b, m, deterministic)
}
func (m *EntitySchemaChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntitySchemaChange.Merge(m, src)
}
func (m *EntitySchemaChange) XXX_Size() int {
	return xxx_messageInfo_EntitySchemaChange.Size(m)
}
func (m *EntitySchemaChange) XXX_DiscardUnknown() {
	xxx_messageInfo_EntitySchemaChange.DiscardUnknown(m)
}

var xxx_messageInfo_EntitySchemaChange proto.InternalMessageInfo

func (m *EntitySchemaChange) GetWatchType() EntitySchemaWatchCondition_SchemaWatchType {
	if m != nil && m.WatchType != nil {
		return *m.WatchType
	}
	return EntitySchemaWatchCondition_kRegisterEntityType
}

func (m *EntitySchemaChange) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

func (m *EntitySchemaChange) GetEntityTypeInfo() *TypeInfo {
	if m != nil {
		return m.EntityTypeInfo
	}
	return nil
}

func (m *EntitySchemaChange) GetMetricTypeList() []*MetricType {
	if m != nil {
		return m.MetricTypeList
	}
	return nil
}

// Describes a particular instance of a watch fired.
// Next id: 6
type FiredWatch struct {
	// Required.
	// Unique watch name in the context of the client.
	WatchName *string `protobuf:"bytes,1,opt,name=watch_name,json=watchName" json:"watch_name,omitempty"`
	// Required.
	// Epoch server time when this watch fired.
	TriggerTimeUsecs *uint64 `protobuf:"varint,2,opt,name=trigger_time_usecs,json=triggerTimeUsecs" json:"trigger_time_usecs,omitempty"`
	// Required.
	// What changed which caused the watch to fire i.e. the actual changed value
	// which replaced the old value.
	ChangedData *FiredWatch_ChangedData `protobuf:"bytes,3,opt,name=changed_data,json=changedData" json:"changed_data,omitempty"`
	// Required. The sequence number of this fired watch. This number will start
	// from the value 1 and be incremented for each subsequent fired watch per
	// watch client. This sequence number will be unique for a given watch client
	// and will determine the order in which the fired watches were triggered for
	// a given watch client. There is no ordering of sequence numbers across
	// different watch clients.
	SequenceNum *uint64 `protobuf:"varint,4,opt,name=sequence_num,json=sequenceNum" json:"sequence_num,omitempty"`
	// Error message.
	ErrorStatus          *InsightsErrorProto `protobuf:"bytes,5,opt,name=error_status,json=errorStatus" json:"error_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FiredWatch) Reset()         { *m = FiredWatch{} }
func (m *FiredWatch) String() string { return proto.CompactTextString(m) }
func (*FiredWatch) ProtoMessage()    {}
func (*FiredWatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{111}
}

func (m *FiredWatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FiredWatch.Unmarshal(m, b)
}
func (m *FiredWatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FiredWatch.Marshal(b, m, deterministic)
}
func (m *FiredWatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FiredWatch.Merge(m, src)
}
func (m *FiredWatch) XXX_Size() int {
	return xxx_messageInfo_FiredWatch.Size(m)
}
func (m *FiredWatch) XXX_DiscardUnknown() {
	xxx_messageInfo_FiredWatch.DiscardUnknown(m)
}

var xxx_messageInfo_FiredWatch proto.InternalMessageInfo

func (m *FiredWatch) GetWatchName() string {
	if m != nil && m.WatchName != nil {
		return *m.WatchName
	}
	return ""
}

func (m *FiredWatch) GetTriggerTimeUsecs() uint64 {
	if m != nil && m.TriggerTimeUsecs != nil {
		return *m.TriggerTimeUsecs
	}
	return 0
}

func (m *FiredWatch) GetChangedData() *FiredWatch_ChangedData {
	if m != nil {
		return m.ChangedData
	}
	return nil
}

func (m *FiredWatch) GetSequenceNum() uint64 {
	if m != nil && m.SequenceNum != nil {
		return *m.SequenceNum
	}
	return 0
}

func (m *FiredWatch) GetErrorStatus() *InsightsErrorProto {
	if m != nil {
		return m.ErrorStatus
	}
	return nil
}

// Describes the changed data which caused the watch to fire. Can be either
// entity data (for entity type watches) or metric data (for metric type
// watches).
type FiredWatch_ChangedData struct {
	// Required. The type of watch, as was registered by the client.
	WatchCategory *Watch_WatchCategory `protobuf:"varint,1,opt,name=watch_category,json=watchCategory,enum=nutanix.insights.interface.Watch_WatchCategory" json:"watch_category,omitempty"`
	// Changed data in the case of entity watches i.e. 'watch_category' set to
	// kEntityWatch.
	ChangedEntityData *Entity `protobuf:"bytes,2,opt,name=changed_entity_data,json=changedEntityData" json:"changed_entity_data,omitempty"`
	// Optional. Set only if 'watch_category' is 'kEntityWatch'. Specifies the
	// type of the entity watch, whether it was triggered because of a create,
	// delete or an update.
	EntityWatchType *EntityWatchCondition_EntityWatchType `protobuf:"varint,4,opt,name=entity_watch_type,json=entityWatchType,enum=nutanix.insights.interface.EntityWatchCondition_EntityWatchType" json:"entity_watch_type,omitempty"`
	// Optional. Holds the previous state of the entity which existed before
	// this watch got triggered. This is applicable in case of entity watches
	// i.e. 'watch_category' set to kEntityWatch and the option to get the
	// previous state enabled.
	PreviousEntityData *Entity `protobuf:"bytes,5,opt,name=previous_entity_data,json=previousEntityData" json:"previous_entity_data,omitempty"`
	// Changed data in the case of metric watches i.e. 'watch_category' set to
	// kMetricWatch.
	ChangedMetricData *EntityWithMetric `protobuf:"bytes,3,opt,name=changed_metric_data,json=changedMetricData" json:"changed_metric_data,omitempty"`
	// Changed data in the case of entity schema watches i.e.
	// 'watch_category' is set to KEntitySchemaWatch.
	EntitySchemaChange   *EntitySchemaChange `protobuf:"bytes,6,opt,name=entity_schema_change,json=entitySchemaChange" json:"entity_schema_change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FiredWatch_ChangedData) Reset()         { *m = FiredWatch_ChangedData{} }
func (m *FiredWatch_ChangedData) String() string { return proto.CompactTextString(m) }
func (*FiredWatch_ChangedData) ProtoMessage()    {}
func (*FiredWatch_ChangedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{111, 0}
}

func (m *FiredWatch_ChangedData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FiredWatch_ChangedData.Unmarshal(m, b)
}
func (m *FiredWatch_ChangedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FiredWatch_ChangedData.Marshal(b, m, deterministic)
}
func (m *FiredWatch_ChangedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FiredWatch_ChangedData.Merge(m, src)
}
func (m *FiredWatch_ChangedData) XXX_Size() int {
	return xxx_messageInfo_FiredWatch_ChangedData.Size(m)
}
func (m *FiredWatch_ChangedData) XXX_DiscardUnknown() {
	xxx_messageInfo_FiredWatch_ChangedData.DiscardUnknown(m)
}

var xxx_messageInfo_FiredWatch_ChangedData proto.InternalMessageInfo

func (m *FiredWatch_ChangedData) GetWatchCategory() Watch_WatchCategory {
	if m != nil && m.WatchCategory != nil {
		return *m.WatchCategory
	}
	return Watch_kEntityWatch
}

func (m *FiredWatch_ChangedData) GetChangedEntityData() *Entity {
	if m != nil {
		return m.ChangedEntityData
	}
	return nil
}

func (m *FiredWatch_ChangedData) GetEntityWatchType() EntityWatchCondition_EntityWatchType {
	if m != nil && m.EntityWatchType != nil {
		return *m.EntityWatchType
	}
	return EntityWatchCondition_kEntityCreate
}

func (m *FiredWatch_ChangedData) GetPreviousEntityData() *Entity {
	if m != nil {
		return m.PreviousEntityData
	}
	return nil
}

func (m *FiredWatch_ChangedData) GetChangedMetricData() *EntityWithMetric {
	if m != nil {
		return m.ChangedMetricData
	}
	return nil
}

func (m *FiredWatch_ChangedData) GetEntitySchemaChange() *EntitySchemaChange {
	if m != nil {
		return m.EntitySchemaChange
	}
	return nil
}

// Describes an instance of a watch client.
type WatchClientProto struct {
	// Required. Unique id to identify a component which register watches. E.g.
	// "github.com/nutanix-core/acs-aos-go/acropolis", "prism_central" etc. A particular component must set this to
	// its own 'client_id' always.
	ClientId *string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// Required. Id to uniquely identify a connection session between the watch
	// client and the server. The combination of (client_id, session_id) should
	// be unique across all applications. The insights server offers no
	// guarantees of maintaining this uniqueness and the watch client has to take
	// this responsibility. This ideally should be an UUID.
	SessionId *string `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// Opt for reset watch client on operations. Currently we support cluster
	// registration or unregistration as operations only for the clients who
	// opt in.
	ResetWatchClientOnOperations *int32 `protobuf:"varint,3,opt,name=reset_watch_client_on_operations,json=resetWatchClientOnOperations,def=0" json:"reset_watch_client_on_operations,omitempty"`
	// Optional. For setting the CoordinatorWatchClient(CWC) timeout for the
	// NodeGetFiredWatchList long poll calls. A value of -1 implies that the
	// CWC will make use of the value set by the gflag in insights_server
	// governing this.
	CwcLongPollRpcTimeoutSecs *int32   `protobuf:"varint,4,opt,name=cwc_long_poll_rpc_timeout_secs,json=cwcLongPollRpcTimeoutSecs,def=-1" json:"cwc_long_poll_rpc_timeout_secs,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *WatchClientProto) Reset()         { *m = WatchClientProto{} }
func (m *WatchClientProto) String() string { return proto.CompactTextString(m) }
func (*WatchClientProto) ProtoMessage()    {}
func (*WatchClientProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{112}
}

func (m *WatchClientProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchClientProto.Unmarshal(m, b)
}
func (m *WatchClientProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchClientProto.Marshal(b, m, deterministic)
}
func (m *WatchClientProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchClientProto.Merge(m, src)
}
func (m *WatchClientProto) XXX_Size() int {
	return xxx_messageInfo_WatchClientProto.Size(m)
}
func (m *WatchClientProto) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchClientProto.DiscardUnknown(m)
}

var xxx_messageInfo_WatchClientProto proto.InternalMessageInfo

const Default_WatchClientProto_ResetWatchClientOnOperations int32 = 0
const Default_WatchClientProto_CwcLongPollRpcTimeoutSecs int32 = -1

func (m *WatchClientProto) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *WatchClientProto) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *WatchClientProto) GetResetWatchClientOnOperations() int32 {
	if m != nil && m.ResetWatchClientOnOperations != nil {
		return *m.ResetWatchClientOnOperations
	}
	return Default_WatchClientProto_ResetWatchClientOnOperations
}

func (m *WatchClientProto) GetCwcLongPollRpcTimeoutSecs() int32 {
	if m != nil && m.CwcLongPollRpcTimeoutSecs != nil {
		return *m.CwcLongPollRpcTimeoutSecs
	}
	return Default_WatchClientProto_CwcLongPollRpcTimeoutSecs
}

// Request message for registering a watch client session. The watch client
// should be unique across all applications and the server does not provide any
// guarantees about its uniqueness; this onus is on the watch client.
type RegisterWatchClientArg struct {
	// Required. Client registering these watches.
	WatchClient          *WatchClientProto `protobuf:"bytes,1,opt,name=watch_client,json=watchClient" json:"watch_client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RegisterWatchClientArg) Reset()         { *m = RegisterWatchClientArg{} }
func (m *RegisterWatchClientArg) String() string { return proto.CompactTextString(m) }
func (*RegisterWatchClientArg) ProtoMessage()    {}
func (*RegisterWatchClientArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{113}
}

func (m *RegisterWatchClientArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterWatchClientArg.Unmarshal(m, b)
}
func (m *RegisterWatchClientArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterWatchClientArg.Marshal(b, m, deterministic)
}
func (m *RegisterWatchClientArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterWatchClientArg.Merge(m, src)
}
func (m *RegisterWatchClientArg) XXX_Size() int {
	return xxx_messageInfo_RegisterWatchClientArg.Size(m)
}
func (m *RegisterWatchClientArg) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterWatchClientArg.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterWatchClientArg proto.InternalMessageInfo

func (m *RegisterWatchClientArg) GetWatchClient() *WatchClientProto {
	if m != nil {
		return m.WatchClient
	}
	return nil
}

// Response payload for RegisterWatchClient RPC.
// This message will be set by the watch server and sent to the client.
type RegisterWatchClientRet struct {
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,1,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RegisterWatchClientRet) Reset()         { *m = RegisterWatchClientRet{} }
func (m *RegisterWatchClientRet) String() string { return proto.CompactTextString(m) }
func (*RegisterWatchClientRet) ProtoMessage()    {}
func (*RegisterWatchClientRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{114}
}

func (m *RegisterWatchClientRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterWatchClientRet.Unmarshal(m, b)
}
func (m *RegisterWatchClientRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterWatchClientRet.Marshal(b, m, deterministic)
}
func (m *RegisterWatchClientRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterWatchClientRet.Merge(m, src)
}
func (m *RegisterWatchClientRet) XXX_Size() int {
	return xxx_messageInfo_RegisterWatchClientRet.Size(m)
}
func (m *RegisterWatchClientRet) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterWatchClientRet.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterWatchClientRet proto.InternalMessageInfo

func (m *RegisterWatchClientRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Request message for unregistering a watch client instance. This message will
// be set by the watch client and sent to the server.
type UnregisterWatchClientArg struct {
	// Required. The watch client to be unregistered.
	WatchClient          *WatchClientProto `protobuf:"bytes,1,opt,name=watch_client,json=watchClient" json:"watch_client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UnregisterWatchClientArg) Reset()         { *m = UnregisterWatchClientArg{} }
func (m *UnregisterWatchClientArg) String() string { return proto.CompactTextString(m) }
func (*UnregisterWatchClientArg) ProtoMessage()    {}
func (*UnregisterWatchClientArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{115}
}

func (m *UnregisterWatchClientArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterWatchClientArg.Unmarshal(m, b)
}
func (m *UnregisterWatchClientArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterWatchClientArg.Marshal(b, m, deterministic)
}
func (m *UnregisterWatchClientArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterWatchClientArg.Merge(m, src)
}
func (m *UnregisterWatchClientArg) XXX_Size() int {
	return xxx_messageInfo_UnregisterWatchClientArg.Size(m)
}
func (m *UnregisterWatchClientArg) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterWatchClientArg.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterWatchClientArg proto.InternalMessageInfo

func (m *UnregisterWatchClientArg) GetWatchClient() *WatchClientProto {
	if m != nil {
		return m.WatchClient
	}
	return nil
}

// Response payload for unregister watch client RPC.
// This message will be set by the watch server and sent to the client.
type UnregisterWatchClientRet struct {
	// Required. The watch client that is unregistered.
	WatchClient *WatchClientProto `protobuf:"bytes,1,opt,name=watch_client,json=watchClient" json:"watch_client,omitempty"`
	// Required. Status corresponding to the unregistration of watch_client.
	ResponseStatus *InsightsErrorProto `protobuf:"bytes,2,opt,name=response_status,json=responseStatus" json:"response_status,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,3,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *UnregisterWatchClientRet) Reset()         { *m = UnregisterWatchClientRet{} }
func (m *UnregisterWatchClientRet) String() string { return proto.CompactTextString(m) }
func (*UnregisterWatchClientRet) ProtoMessage()    {}
func (*UnregisterWatchClientRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{116}
}

func (m *UnregisterWatchClientRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterWatchClientRet.Unmarshal(m, b)
}
func (m *UnregisterWatchClientRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterWatchClientRet.Marshal(b, m, deterministic)
}
func (m *UnregisterWatchClientRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterWatchClientRet.Merge(m, src)
}
func (m *UnregisterWatchClientRet) XXX_Size() int {
	return xxx_messageInfo_UnregisterWatchClientRet.Size(m)
}
func (m *UnregisterWatchClientRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterWatchClientRet.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterWatchClientRet proto.InternalMessageInfo

func (m *UnregisterWatchClientRet) GetWatchClient() *WatchClientProto {
	if m != nil {
		return m.WatchClient
	}
	return nil
}

func (m *UnregisterWatchClientRet) GetResponseStatus() *InsightsErrorProto {
	if m != nil {
		return m.ResponseStatus
	}
	return nil
}

func (m *UnregisterWatchClientRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Request message for registering a set of watches for a particular client
// instance. This message will be set by the watch client and sent to the
// server.
type RegisterWatchArg struct {
	// Required. Client registering these watches.
	// This RPC will send back a 'kResetWatchClient' error code in case this
	// 'watch_client' is un-registered.
	WatchClient *WatchClientProto `protobuf:"bytes,1,opt,name=watch_client,json=watchClient" json:"watch_client,omitempty"`
	// Required. Set of watch rules to be registered for this client. All the
	// elements in this list must have the same 'watch_category'.
	WatchList []*Watch `protobuf:"bytes,2,rep,name=watch_list,json=watchList" json:"watch_list,omitempty"`
	// Required. Create/Update timestamp in usecs.
	//
	// By letting the application provide the timestamp, we will capture the
	// exact time the watch has been modified. This approach is more accurate
	// than DB inferring the timestamp from the request receipt time as DB's time
	// will be skewed by the processing pipeline overheads.
	TimestampUsecs *uint64 `protobuf:"varint,3,opt,name=timestamp_usecs,json=timestampUsecs" json:"timestamp_usecs,omitempty"`
	// Required. If set to true, the current state will be fetched and returned
	// as part of RegisterWatchRet.
	GetCurrentState      *bool    `protobuf:"varint,4,opt,name=get_current_state,json=getCurrentState,def=1" json:"get_current_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterWatchArg) Reset()         { *m = RegisterWatchArg{} }
func (m *RegisterWatchArg) String() string { return proto.CompactTextString(m) }
func (*RegisterWatchArg) ProtoMessage()    {}
func (*RegisterWatchArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{117}
}

func (m *RegisterWatchArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterWatchArg.Unmarshal(m, b)
}
func (m *RegisterWatchArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterWatchArg.Marshal(b, m, deterministic)
}
func (m *RegisterWatchArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterWatchArg.Merge(m, src)
}
func (m *RegisterWatchArg) XXX_Size() int {
	return xxx_messageInfo_RegisterWatchArg.Size(m)
}
func (m *RegisterWatchArg) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterWatchArg.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterWatchArg proto.InternalMessageInfo

const Default_RegisterWatchArg_GetCurrentState bool = true

func (m *RegisterWatchArg) GetWatchClient() *WatchClientProto {
	if m != nil {
		return m.WatchClient
	}
	return nil
}

func (m *RegisterWatchArg) GetWatchList() []*Watch {
	if m != nil {
		return m.WatchList
	}
	return nil
}

func (m *RegisterWatchArg) GetTimestampUsecs() uint64 {
	if m != nil && m.TimestampUsecs != nil {
		return *m.TimestampUsecs
	}
	return 0
}

func (m *RegisterWatchArg) GetGetCurrentState() bool {
	if m != nil && m.GetCurrentState != nil {
		return *m.GetCurrentState
	}
	return Default_RegisterWatchArg_GetCurrentState
}

// Response payload for register watch RPC.
// This message will be set by the watch server and sent to the client.
type RegisterWatchRet struct {
	// Required. Status for each watch registration request.
	ResponseList []*RegisterWatchRet_RetElem `protobuf:"bytes,1,rep,name=response_list,json=responseList" json:"response_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RegisterWatchRet) Reset()         { *m = RegisterWatchRet{} }
func (m *RegisterWatchRet) String() string { return proto.CompactTextString(m) }
func (*RegisterWatchRet) ProtoMessage()    {}
func (*RegisterWatchRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{118}
}

func (m *RegisterWatchRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterWatchRet.Unmarshal(m, b)
}
func (m *RegisterWatchRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterWatchRet.Marshal(b, m, deterministic)
}
func (m *RegisterWatchRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterWatchRet.Merge(m, src)
}
func (m *RegisterWatchRet) XXX_Size() int {
	return xxx_messageInfo_RegisterWatchRet.Size(m)
}
func (m *RegisterWatchRet) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterWatchRet.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterWatchRet proto.InternalMessageInfo

func (m *RegisterWatchRet) GetResponseList() []*RegisterWatchRet_RetElem {
	if m != nil {
		return m.ResponseList
	}
	return nil
}

func (m *RegisterWatchRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type RegisterWatchRet_RetElem struct {
	// Required. Name of the watch.
	WatchName *string `protobuf:"bytes,1,opt,name=watch_name,json=watchName" json:"watch_name,omitempty"`
	// Required. Status corresponding to the registration of watch
	// 'watch_name'.
	ResponseStatus *InsightsErrorProto `protobuf:"bytes,2,opt,name=response_status,json=responseStatus" json:"response_status,omitempty"`
	// Required. The current state of the entities / metrics described in the
	// given watch. There are no guarantees on the ordering of the entities in
	// this list.
	CurrentStateList []*FiredWatch_ChangedData `protobuf:"bytes,3,rep,name=current_state_list,json=currentStateList" json:"current_state_list,omitempty"`
	// Required. The sequence number of the fired watch that the watch client had
	// last consumed. If no fired watch is consumed, the value would be zero.
	FiredWatchLastSequenceNum *uint64 `protobuf:"varint,4,opt,name=fired_watch_last_sequence_num,json=firedWatchLastSequenceNum" json:"fired_watch_last_sequence_num,omitempty"`
	// Required. The watch id for this watch with respect to the client.
	WatchId              *uint64  `protobuf:"varint,5,opt,name=watch_id,json=watchId" json:"watch_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterWatchRet_RetElem) Reset()         { *m = RegisterWatchRet_RetElem{} }
func (m *RegisterWatchRet_RetElem) String() string { return proto.CompactTextString(m) }
func (*RegisterWatchRet_RetElem) ProtoMessage()    {}
func (*RegisterWatchRet_RetElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{118, 0}
}

func (m *RegisterWatchRet_RetElem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterWatchRet_RetElem.Unmarshal(m, b)
}
func (m *RegisterWatchRet_RetElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterWatchRet_RetElem.Marshal(b, m, deterministic)
}
func (m *RegisterWatchRet_RetElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterWatchRet_RetElem.Merge(m, src)
}
func (m *RegisterWatchRet_RetElem) XXX_Size() int {
	return xxx_messageInfo_RegisterWatchRet_RetElem.Size(m)
}
func (m *RegisterWatchRet_RetElem) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterWatchRet_RetElem.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterWatchRet_RetElem proto.InternalMessageInfo

func (m *RegisterWatchRet_RetElem) GetWatchName() string {
	if m != nil && m.WatchName != nil {
		return *m.WatchName
	}
	return ""
}

func (m *RegisterWatchRet_RetElem) GetResponseStatus() *InsightsErrorProto {
	if m != nil {
		return m.ResponseStatus
	}
	return nil
}

func (m *RegisterWatchRet_RetElem) GetCurrentStateList() []*FiredWatch_ChangedData {
	if m != nil {
		return m.CurrentStateList
	}
	return nil
}

func (m *RegisterWatchRet_RetElem) GetFiredWatchLastSequenceNum() uint64 {
	if m != nil && m.FiredWatchLastSequenceNum != nil {
		return *m.FiredWatchLastSequenceNum
	}
	return 0
}

func (m *RegisterWatchRet_RetElem) GetWatchId() uint64 {
	if m != nil && m.WatchId != nil {
		return *m.WatchId
	}
	return 0
}

// Request message for unregistering a set of watches for a particular client
// instance. This message will be set by the watch client and sent to the
// server.
type UnregisterWatchArg struct {
	// Required. Client unregistering these watches.
	WatchClient *WatchClientProto `protobuf:"bytes,1,opt,name=watch_client,json=watchClient" json:"watch_client,omitempty"`
	// TODO(vselvam): Combine the below two lists into a list of a single proto
	// or remove the watch_name_list as it is redundant.
	// Required. The list of watch names to be unregistered for this client.
	WatchNameList []string `protobuf:"bytes,2,rep,name=watch_name_list,json=watchNameList" json:"watch_name_list,omitempty"`
	// Required. The corresponding watch id's for the above list of watch names.
	WatchIdList          []uint64 `protobuf:"varint,3,rep,name=watch_id_list,json=watchIdList" json:"watch_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnregisterWatchArg) Reset()         { *m = UnregisterWatchArg{} }
func (m *UnregisterWatchArg) String() string { return proto.CompactTextString(m) }
func (*UnregisterWatchArg) ProtoMessage()    {}
func (*UnregisterWatchArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{119}
}

func (m *UnregisterWatchArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterWatchArg.Unmarshal(m, b)
}
func (m *UnregisterWatchArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterWatchArg.Marshal(b, m, deterministic)
}
func (m *UnregisterWatchArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterWatchArg.Merge(m, src)
}
func (m *UnregisterWatchArg) XXX_Size() int {
	return xxx_messageInfo_UnregisterWatchArg.Size(m)
}
func (m *UnregisterWatchArg) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterWatchArg.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterWatchArg proto.InternalMessageInfo

func (m *UnregisterWatchArg) GetWatchClient() *WatchClientProto {
	if m != nil {
		return m.WatchClient
	}
	return nil
}

func (m *UnregisterWatchArg) GetWatchNameList() []string {
	if m != nil {
		return m.WatchNameList
	}
	return nil
}

func (m *UnregisterWatchArg) GetWatchIdList() []uint64 {
	if m != nil {
		return m.WatchIdList
	}
	return nil
}

// Response payload for unregister watch RPC.
// This message will be set by the watch server and sent to the client.
type UnregisterWatchRet struct {
	// Required. Status for each watch registration request.
	ResponseList []*UnregisterWatchRet_RetElem `protobuf:"bytes,1,rep,name=response_list,json=responseList" json:"response_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *UnregisterWatchRet) Reset()         { *m = UnregisterWatchRet{} }
func (m *UnregisterWatchRet) String() string { return proto.CompactTextString(m) }
func (*UnregisterWatchRet) ProtoMessage()    {}
func (*UnregisterWatchRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{120}
}

func (m *UnregisterWatchRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterWatchRet.Unmarshal(m, b)
}
func (m *UnregisterWatchRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterWatchRet.Marshal(b, m, deterministic)
}
func (m *UnregisterWatchRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterWatchRet.Merge(m, src)
}
func (m *UnregisterWatchRet) XXX_Size() int {
	return xxx_messageInfo_UnregisterWatchRet.Size(m)
}
func (m *UnregisterWatchRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterWatchRet.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterWatchRet proto.InternalMessageInfo

func (m *UnregisterWatchRet) GetResponseList() []*UnregisterWatchRet_RetElem {
	if m != nil {
		return m.ResponseList
	}
	return nil
}

func (m *UnregisterWatchRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type UnregisterWatchRet_RetElem struct {
	// Required. Name of the watch.
	WatchName *string `protobuf:"bytes,1,opt,name=watch_name,json=watchName" json:"watch_name,omitempty"`
	// Required. Status corresponding to the registration of watch
	// 'watch_name'.
	ResponseStatus       *InsightsErrorProto `protobuf:"bytes,2,opt,name=response_status,json=responseStatus" json:"response_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UnregisterWatchRet_RetElem) Reset()         { *m = UnregisterWatchRet_RetElem{} }
func (m *UnregisterWatchRet_RetElem) String() string { return proto.CompactTextString(m) }
func (*UnregisterWatchRet_RetElem) ProtoMessage()    {}
func (*UnregisterWatchRet_RetElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{120, 0}
}

func (m *UnregisterWatchRet_RetElem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterWatchRet_RetElem.Unmarshal(m, b)
}
func (m *UnregisterWatchRet_RetElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterWatchRet_RetElem.Marshal(b, m, deterministic)
}
func (m *UnregisterWatchRet_RetElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterWatchRet_RetElem.Merge(m, src)
}
func (m *UnregisterWatchRet_RetElem) XXX_Size() int {
	return xxx_messageInfo_UnregisterWatchRet_RetElem.Size(m)
}
func (m *UnregisterWatchRet_RetElem) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterWatchRet_RetElem.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterWatchRet_RetElem proto.InternalMessageInfo

func (m *UnregisterWatchRet_RetElem) GetWatchName() string {
	if m != nil && m.WatchName != nil {
		return *m.WatchName
	}
	return ""
}

func (m *UnregisterWatchRet_RetElem) GetResponseStatus() *InsightsErrorProto {
	if m != nil {
		return m.ResponseStatus
	}
	return nil
}

// Request payload to get fired watches for a client instance since a
// timestamp. This message will be set by the watch client and sent to the
// server.
type GetFiredWatchListArg struct {
	// Required. The client instance for which fired watches are desired.
	// This RPC will send back a 'kResetWatchClient' error code in case this
	// 'watch_client' is un-registered.
	WatchClient *WatchClientProto `protobuf:"bytes,1,opt,name=watch_client,json=watchClient" json:"watch_client,omitempty"`
	// Required. The RPC timeout in seconds for this long poll RPC.
	RpcTimeoutInSecs *uint32 `protobuf:"varint,2,opt,name=rpc_timeout_in_secs,json=rpcTimeoutInSecs,def=60" json:"rpc_timeout_in_secs,omitempty"`
	// Required. The sequence number of the fired watch that the watch client had
	// last consumed. For the first call, the value should be set to zero.
	FiredWatchLastSequenceNum *uint64  `protobuf:"varint,3,opt,name=fired_watch_last_sequence_num,json=firedWatchLastSequenceNum,def=0" json:"fired_watch_last_sequence_num,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *GetFiredWatchListArg) Reset()         { *m = GetFiredWatchListArg{} }
func (m *GetFiredWatchListArg) String() string { return proto.CompactTextString(m) }
func (*GetFiredWatchListArg) ProtoMessage()    {}
func (*GetFiredWatchListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{121}
}

func (m *GetFiredWatchListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFiredWatchListArg.Unmarshal(m, b)
}
func (m *GetFiredWatchListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFiredWatchListArg.Marshal(b, m, deterministic)
}
func (m *GetFiredWatchListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFiredWatchListArg.Merge(m, src)
}
func (m *GetFiredWatchListArg) XXX_Size() int {
	return xxx_messageInfo_GetFiredWatchListArg.Size(m)
}
func (m *GetFiredWatchListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFiredWatchListArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetFiredWatchListArg proto.InternalMessageInfo

const Default_GetFiredWatchListArg_RpcTimeoutInSecs uint32 = 60
const Default_GetFiredWatchListArg_FiredWatchLastSequenceNum uint64 = 0

func (m *GetFiredWatchListArg) GetWatchClient() *WatchClientProto {
	if m != nil {
		return m.WatchClient
	}
	return nil
}

func (m *GetFiredWatchListArg) GetRpcTimeoutInSecs() uint32 {
	if m != nil && m.RpcTimeoutInSecs != nil {
		return *m.RpcTimeoutInSecs
	}
	return Default_GetFiredWatchListArg_RpcTimeoutInSecs
}

func (m *GetFiredWatchListArg) GetFiredWatchLastSequenceNum() uint64 {
	if m != nil && m.FiredWatchLastSequenceNum != nil {
		return *m.FiredWatchLastSequenceNum
	}
	return Default_GetFiredWatchListArg_FiredWatchLastSequenceNum
}

// Response payload for Get fired watches RPC. This message will be set by the
// watch server and sent to the client.
// Next id: 4
type GetFiredWatchListRet struct {
	ResponseStatus *InsightsErrorProto `protobuf:"bytes,1,opt,name=response_status,json=responseStatus" json:"response_status,omitempty"`
	// List of watches watch server has seen since and including timestamp
	// 'start_timestamp_usecs' as sent by the client.
	FiredWatchList []*FiredWatch `protobuf:"bytes,2,rep,name=fired_watch_list,json=firedWatchList" json:"fired_watch_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,3,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetFiredWatchListRet) Reset()         { *m = GetFiredWatchListRet{} }
func (m *GetFiredWatchListRet) String() string { return proto.CompactTextString(m) }
func (*GetFiredWatchListRet) ProtoMessage()    {}
func (*GetFiredWatchListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{122}
}

func (m *GetFiredWatchListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFiredWatchListRet.Unmarshal(m, b)
}
func (m *GetFiredWatchListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFiredWatchListRet.Marshal(b, m, deterministic)
}
func (m *GetFiredWatchListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFiredWatchListRet.Merge(m, src)
}
func (m *GetFiredWatchListRet) XXX_Size() int {
	return xxx_messageInfo_GetFiredWatchListRet.Size(m)
}
func (m *GetFiredWatchListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFiredWatchListRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetFiredWatchListRet proto.InternalMessageInfo

func (m *GetFiredWatchListRet) GetResponseStatus() *InsightsErrorProto {
	if m != nil {
		return m.ResponseStatus
	}
	return nil
}

func (m *GetFiredWatchListRet) GetFiredWatchList() []*FiredWatch {
	if m != nil {
		return m.FiredWatchList
	}
	return nil
}

func (m *GetFiredWatchListRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// A metadata entry is a key value pair.
type MetadataEntry struct {
	// Required. Name of the key.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Optional. Value for the above key.
	Value                *DataValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MetadataEntry) Reset()         { *m = MetadataEntry{} }
func (m *MetadataEntry) String() string { return proto.CompactTextString(m) }
func (*MetadataEntry) ProtoMessage()    {}
func (*MetadataEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{123}
}

func (m *MetadataEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetadataEntry.Unmarshal(m, b)
}
func (m *MetadataEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetadataEntry.Marshal(b, m, deterministic)
}
func (m *MetadataEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataEntry.Merge(m, src)
}
func (m *MetadataEntry) XXX_Size() int {
	return xxx_messageInfo_MetadataEntry.Size(m)
}
func (m *MetadataEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataEntry proto.InternalMessageInfo

func (m *MetadataEntry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *MetadataEntry) GetValue() *DataValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// This proto defined how we would collect unstructured data. Examples of
// unstructured data are various kinds of protos, config files, etc.
type UnstructuredData struct {
	// Required. This is the entity against which the unstructured data is
	// collected.
	EntityGuid *EntityGuid `protobuf:"bytes,1,opt,name=entity_guid,json=entityGuid" json:"entity_guid,omitempty"`
	// Optional. Metadata for the data serialized below. For example, this can
	// contain information about how to deserialize the data.
	Metadata []*MetadataEntry `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty"`
	// Required. This is the data payload serialized.
	Data                 *string  `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnstructuredData) Reset()         { *m = UnstructuredData{} }
func (m *UnstructuredData) String() string { return proto.CompactTextString(m) }
func (*UnstructuredData) ProtoMessage()    {}
func (*UnstructuredData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{124}
}

func (m *UnstructuredData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnstructuredData.Unmarshal(m, b)
}
func (m *UnstructuredData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnstructuredData.Marshal(b, m, deterministic)
}
func (m *UnstructuredData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnstructuredData.Merge(m, src)
}
func (m *UnstructuredData) XXX_Size() int {
	return xxx_messageInfo_UnstructuredData.Size(m)
}
func (m *UnstructuredData) XXX_DiscardUnknown() {
	xxx_messageInfo_UnstructuredData.DiscardUnknown(m)
}

var xxx_messageInfo_UnstructuredData proto.InternalMessageInfo

func (m *UnstructuredData) GetEntityGuid() *EntityGuid {
	if m != nil {
		return m.EntityGuid
	}
	return nil
}

func (m *UnstructuredData) GetMetadata() []*MetadataEntry {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *UnstructuredData) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

// Transport proto for collecting stats from remote clusters.
// These stats will be sent via some asynchronous mechanisms such as
// emails and will be proceesed by Nutanix internal Analytics VM.
type InsightsCollector struct {
	// Required. The id of the remote cluster which owns the metrics.
	ClusterUuid *string `protobuf:"bytes,1,opt,name=cluster_uuid,json=clusterUuid" json:"cluster_uuid,omitempty"`
	// Required. The id of the node which sent out the stats.
	NodeUuid *string `protobuf:"bytes,2,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	// Required. The nos version running on the remote node.
	NosVersion *string `protobuf:"bytes,3,opt,name=nos_version,json=nosVersion" json:"nos_version,omitempty"`
	// Required. The version number of the collector running on the node.
	CollectorVersion *string `protobuf:"bytes,4,opt,name=collector_version,json=collectorVersion" json:"collector_version,omitempty"`
	// Optional. The list of Entities along with their metrics.
	PutEntitiesWithMetricsArgList []*PutMetricDataArg `protobuf:"bytes,5,rep,name=put_entities_with_metrics_arg_list,json=putEntitiesWithMetricsArgList" json:"put_entities_with_metrics_arg_list,omitempty"`
	// Optional. The list of register entity type arguments.
	UpdateEntityTypeArgList []*RegisterEntityTypesArg `protobuf:"bytes,6,rep,name=update_entity_type_arg_list,json=updateEntityTypeArgList" json:"update_entity_type_arg_list,omitempty"`
	// Optional. The list of update entity arguments.
	UpdateEntityArgList []*UpdateEntityArg `protobuf:"bytes,7,rep,name=update_entity_arg_list,json=updateEntityArgList" json:"update_entity_arg_list,omitempty"`
	// Optional. The list of delete entity arguments.
	DeleteEntityArgList []*DeleteEntityArg `protobuf:"bytes,8,rep,name=delete_entity_arg_list,json=deleteEntityArgList" json:"delete_entity_arg_list,omitempty"`
	// Optional. The list of messages returned by the collector scripts.
	CollectorMessageList []string `protobuf:"bytes,9,rep,name=collector_message_list,json=collectorMessageList" json:"collector_message_list,omitempty"`
	// Required. The time (in microseconds) at which the metrics were collected.
	TimestampUsecs *uint64 `protobuf:"varint,10,opt,name=timestamp_usecs,json=timestampUsecs" json:"timestamp_usecs,omitempty"`
	// Optional. If present, the data collected in this proto belongs to this
	// namespace. Namespaces allow data to be grouped efficiently for retrieval,
	// and there can be a custom handler per namespace when the data is received.
	NameSpace *string `protobuf:"bytes,11,opt,name=name_space,json=nameSpace,def=_default_" json:"name_space,omitempty"`
	// Optional. Any unstructured data being collected would go here.
	UnstructuredDataList []*UnstructuredData `protobuf:"bytes,12,rep,name=unstructured_data_list,json=unstructuredDataList" json:"unstructured_data_list,omitempty"`
	// Required. The sensitivity level of data contained in this proto.
	SensitivityLevel     *int32   `protobuf:"varint,13,opt,name=sensitivity_level,json=sensitivityLevel,def=0" json:"sensitivity_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsightsCollector) Reset()         { *m = InsightsCollector{} }
func (m *InsightsCollector) String() string { return proto.CompactTextString(m) }
func (*InsightsCollector) ProtoMessage()    {}
func (*InsightsCollector) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{125}
}

func (m *InsightsCollector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsightsCollector.Unmarshal(m, b)
}
func (m *InsightsCollector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsightsCollector.Marshal(b, m, deterministic)
}
func (m *InsightsCollector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsightsCollector.Merge(m, src)
}
func (m *InsightsCollector) XXX_Size() int {
	return xxx_messageInfo_InsightsCollector.Size(m)
}
func (m *InsightsCollector) XXX_DiscardUnknown() {
	xxx_messageInfo_InsightsCollector.DiscardUnknown(m)
}

var xxx_messageInfo_InsightsCollector proto.InternalMessageInfo

const Default_InsightsCollector_NameSpace string = "_default_"
const Default_InsightsCollector_SensitivityLevel int32 = 0

func (m *InsightsCollector) GetClusterUuid() string {
	if m != nil && m.ClusterUuid != nil {
		return *m.ClusterUuid
	}
	return ""
}

func (m *InsightsCollector) GetNodeUuid() string {
	if m != nil && m.NodeUuid != nil {
		return *m.NodeUuid
	}
	return ""
}

func (m *InsightsCollector) GetNosVersion() string {
	if m != nil && m.NosVersion != nil {
		return *m.NosVersion
	}
	return ""
}

func (m *InsightsCollector) GetCollectorVersion() string {
	if m != nil && m.CollectorVersion != nil {
		return *m.CollectorVersion
	}
	return ""
}

func (m *InsightsCollector) GetPutEntitiesWithMetricsArgList() []*PutMetricDataArg {
	if m != nil {
		return m.PutEntitiesWithMetricsArgList
	}
	return nil
}

func (m *InsightsCollector) GetUpdateEntityTypeArgList() []*RegisterEntityTypesArg {
	if m != nil {
		return m.UpdateEntityTypeArgList
	}
	return nil
}

func (m *InsightsCollector) GetUpdateEntityArgList() []*UpdateEntityArg {
	if m != nil {
		return m.UpdateEntityArgList
	}
	return nil
}

func (m *InsightsCollector) GetDeleteEntityArgList() []*DeleteEntityArg {
	if m != nil {
		return m.DeleteEntityArgList
	}
	return nil
}

func (m *InsightsCollector) GetCollectorMessageList() []string {
	if m != nil {
		return m.CollectorMessageList
	}
	return nil
}

func (m *InsightsCollector) GetTimestampUsecs() uint64 {
	if m != nil && m.TimestampUsecs != nil {
		return *m.TimestampUsecs
	}
	return 0
}

func (m *InsightsCollector) GetNameSpace() string {
	if m != nil && m.NameSpace != nil {
		return *m.NameSpace
	}
	return Default_InsightsCollector_NameSpace
}

func (m *InsightsCollector) GetUnstructuredDataList() []*UnstructuredData {
	if m != nil {
		return m.UnstructuredDataList
	}
	return nil
}

func (m *InsightsCollector) GetSensitivityLevel() int32 {
	if m != nil && m.SensitivityLevel != nil {
		return *m.SensitivityLevel
	}
	return Default_InsightsCollector_SensitivityLevel
}

// Node Map proto for storing in Zookeeper node for node map.
type NodeMapEntryProto struct {
	// Node Map.
	NodeList             []*NodeMapEntryProto_Node `protobuf:"bytes,1,rep,name=node_list,json=nodeList" json:"node_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *NodeMapEntryProto) Reset()         { *m = NodeMapEntryProto{} }
func (m *NodeMapEntryProto) String() string { return proto.CompactTextString(m) }
func (*NodeMapEntryProto) ProtoMessage()    {}
func (*NodeMapEntryProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{126}
}

func (m *NodeMapEntryProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMapEntryProto.Unmarshal(m, b)
}
func (m *NodeMapEntryProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMapEntryProto.Marshal(b, m, deterministic)
}
func (m *NodeMapEntryProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMapEntryProto.Merge(m, src)
}
func (m *NodeMapEntryProto) XXX_Size() int {
	return xxx_messageInfo_NodeMapEntryProto.Size(m)
}
func (m *NodeMapEntryProto) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMapEntryProto.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMapEntryProto proto.InternalMessageInfo

func (m *NodeMapEntryProto) GetNodeList() []*NodeMapEntryProto_Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

type NodeMapEntryProto_Node struct {
	// node handle is string of the format
	// "node_backplane_ip:port" eg. 1.1.1.1:2027.
	NodeHandle *string `protobuf:"bytes,1,opt,name=node_handle,json=nodeHandle" json:"node_handle,omitempty"`
	// Shard id is a no from 1 to 128.
	ShardList            []uint32 `protobuf:"varint,2,rep,name=shard_list,json=shardList" json:"shard_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeMapEntryProto_Node) Reset()         { *m = NodeMapEntryProto_Node{} }
func (m *NodeMapEntryProto_Node) String() string { return proto.CompactTextString(m) }
func (*NodeMapEntryProto_Node) ProtoMessage()    {}
func (*NodeMapEntryProto_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{126, 0}
}

func (m *NodeMapEntryProto_Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMapEntryProto_Node.Unmarshal(m, b)
}
func (m *NodeMapEntryProto_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMapEntryProto_Node.Marshal(b, m, deterministic)
}
func (m *NodeMapEntryProto_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMapEntryProto_Node.Merge(m, src)
}
func (m *NodeMapEntryProto_Node) XXX_Size() int {
	return xxx_messageInfo_NodeMapEntryProto_Node.Size(m)
}
func (m *NodeMapEntryProto_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMapEntryProto_Node.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMapEntryProto_Node proto.InternalMessageInfo

func (m *NodeMapEntryProto_Node) GetNodeHandle() string {
	if m != nil && m.NodeHandle != nil {
		return *m.NodeHandle
	}
	return ""
}

func (m *NodeMapEntryProto_Node) GetShardList() []uint32 {
	if m != nil {
		return m.ShardList
	}
	return nil
}

// Every event is assigned a globally uniue id. Events are immutable. Once
// generated, the event cannot be updated.
//
// Each event has a very specific definition/structure. The event_type describes
// the structure of the event. In addition to the user defined structure, all
// events have some mandatory parameters, like timestamp_usecs, and associated
// entity_guid. The producer responsible for generating events of a particular
// type is recommended to catalogue the structure of the event type. This will
// help in enforcing access controls, and redacting fields. The structure of an
// event is the fundamental difference between an Event and a log message. Log
// message is free form text.
//
// Event types belong to a namespace, a category of events.
//
type Event struct {
	// Required. Global Unique ID representing the event.
	EventId *string `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	// Required. event_type's are categorized into namespaces. Some examples are
	// security, storage, auditd, etc.
	//
	// In the processing pipeline, each namespace maps to one kafka topic and the
	// consumer can subscribe to one or more namespaces and process one or more
	// event_type's belonging to the namespace.
	//
	// Each namespace can have different persistance requirement. For example,
	// security events could be stored for a year where as auditd events for a
	// week.
	Namespace *string `protobuf:"bytes,2,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Required. "event_type" uniquely identifies the type of the event.
	EventType *string `protobuf:"bytes,3,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	// Required. Timestamp in usecs when the event occured. The "timestamp_usecs"
	// represents the number of micro seconds elapsed since Jan 1st 1970 UTC.
	TimestampUsecs *uint64 `protobuf:"varint,4,opt,name=timestamp_usecs,json=timestampUsecs" json:"timestamp_usecs,omitempty"`
	// Required. The entity that is generating the event. For example, the node
	// uuid.
	EntityGuid *EntityGuid `protobuf:"bytes,5,opt,name=entity_guid,json=entityGuid" json:"entity_guid,omitempty"`
	// Optional. Repeated list of entities that are related to the event. For
	// example, if a security event is generated on the CVM, the producer of the
	// event can capture the cluster_uuid in the field below.
	//
	// The event can be queried against all the entities specified here.
	RelatedEntityGuidList []*EntityGuid `protobuf:"bytes,6,rep,name=related_entity_guid_list,json=relatedEntityGuidList" json:"related_entity_guid_list,omitempty"`
	// Optional. User defined properties.
	UserDefinedFields    []*AttributeData `protobuf:"bytes,7,rep,name=user_defined_fields,json=userDefinedFields" json:"user_defined_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{127}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

const Default_Event_Namespace string = "_default_"

func (m *Event) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *Event) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_Event_Namespace
}

func (m *Event) GetEventType() string {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return ""
}

func (m *Event) GetTimestampUsecs() uint64 {
	if m != nil && m.TimestampUsecs != nil {
		return *m.TimestampUsecs
	}
	return 0
}

func (m *Event) GetEntityGuid() *EntityGuid {
	if m != nil {
		return m.EntityGuid
	}
	return nil
}

func (m *Event) GetRelatedEntityGuidList() []*EntityGuid {
	if m != nil {
		return m.RelatedEntityGuidList
	}
	return nil
}

func (m *Event) GetUserDefinedFields() []*AttributeData {
	if m != nil {
		return m.UserDefinedFields
	}
	return nil
}

type PutEventArg struct {
	// Required. The individual events will be independently persisted.
	EventList            []*Event `protobuf:"bytes,1,rep,name=event_list,json=eventList" json:"event_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutEventArg) Reset()         { *m = PutEventArg{} }
func (m *PutEventArg) String() string { return proto.CompactTextString(m) }
func (*PutEventArg) ProtoMessage()    {}
func (*PutEventArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{128}
}

func (m *PutEventArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutEventArg.Unmarshal(m, b)
}
func (m *PutEventArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutEventArg.Marshal(b, m, deterministic)
}
func (m *PutEventArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutEventArg.Merge(m, src)
}
func (m *PutEventArg) XXX_Size() int {
	return xxx_messageInfo_PutEventArg.Size(m)
}
func (m *PutEventArg) XXX_DiscardUnknown() {
	xxx_messageInfo_PutEventArg.DiscardUnknown(m)
}

var xxx_messageInfo_PutEventArg proto.InternalMessageInfo

func (m *PutEventArg) GetEventList() []*Event {
	if m != nil {
		return m.EventList
	}
	return nil
}

type PutEventRet struct {
	// Required. Status for each put event.
	PutEventRetElemList []*PutEventRet_RetElem `protobuf:"bytes,1,rep,name=put_event_ret_elem_list,json=putEventRetElemList" json:"put_event_ret_elem_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PutEventRet) Reset()         { *m = PutEventRet{} }
func (m *PutEventRet) String() string { return proto.CompactTextString(m) }
func (*PutEventRet) ProtoMessage()    {}
func (*PutEventRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{129}
}

func (m *PutEventRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutEventRet.Unmarshal(m, b)
}
func (m *PutEventRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutEventRet.Marshal(b, m, deterministic)
}
func (m *PutEventRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutEventRet.Merge(m, src)
}
func (m *PutEventRet) XXX_Size() int {
	return xxx_messageInfo_PutEventRet.Size(m)
}
func (m *PutEventRet) XXX_DiscardUnknown() {
	xxx_messageInfo_PutEventRet.DiscardUnknown(m)
}

var xxx_messageInfo_PutEventRet proto.InternalMessageInfo

func (m *PutEventRet) GetPutEventRetElemList() []*PutEventRet_RetElem {
	if m != nil {
		return m.PutEventRetElemList
	}
	return nil
}

func (m *PutEventRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type PutEventRet_RetElem struct {
	// Required. Event ID.
	EventId *string `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	// Required. Put status for this event_id.
	Status               *InsightsErrorProto `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PutEventRet_RetElem) Reset()         { *m = PutEventRet_RetElem{} }
func (m *PutEventRet_RetElem) String() string { return proto.CompactTextString(m) }
func (*PutEventRet_RetElem) ProtoMessage()    {}
func (*PutEventRet_RetElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{129, 0}
}

func (m *PutEventRet_RetElem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutEventRet_RetElem.Unmarshal(m, b)
}
func (m *PutEventRet_RetElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutEventRet_RetElem.Marshal(b, m, deterministic)
}
func (m *PutEventRet_RetElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutEventRet_RetElem.Merge(m, src)
}
func (m *PutEventRet_RetElem) XXX_Size() int {
	return xxx_messageInfo_PutEventRet_RetElem.Size(m)
}
func (m *PutEventRet_RetElem) XXX_DiscardUnknown() {
	xxx_messageInfo_PutEventRet_RetElem.DiscardUnknown(m)
}

var xxx_messageInfo_PutEventRet_RetElem proto.InternalMessageInfo

func (m *PutEventRet_RetElem) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *PutEventRet_RetElem) GetStatus() *InsightsErrorProto {
	if m != nil {
		return m.Status
	}
	return nil
}

type LogMessage struct {
	// Required. Message timestamp in microseconds.
	TimestampUsecs *uint64 `protobuf:"varint,1,opt,name=timestamp_usecs,json=timestampUsecs" json:"timestamp_usecs,omitempty"`
	// Required. Log level for the message.
	LogLevel *LogLevel `protobuf:"varint,2,opt,name=log_level,json=logLevel,enum=nutanix.insights.interface.LogLevel,def=5" json:"log_level,omitempty"`
	// Optional. Message ID identifies the type of the message. Messages with the
	// same ID should reflect events of the same semantics. This can be ommitted
	// if the system does not have a well defined catalogue of message types.
	MessageId *string `protobuf:"bytes,3,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	// Optional. Filename that is logged as part of the log message.
	FileName *string `protobuf:"bytes,4,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	// Optional. Method name corresponding to the log message.
	MethodName *string `protobuf:"bytes,5,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	// Optional. Line number corresponding to the log message.
	LineNumber *uint64 `protobuf:"varint,6,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
	// Required. Actual Log message.
	Message *string `protobuf:"bytes,7,opt,name=message" json:"message,omitempty"`
	// Optional. If the log message is parameterized, this arg captures the
	// list of parameters in the order in which they appear in the message.
	Parameters []*MetadataEntry `protobuf:"bytes,8,rep,name=parameters" json:"parameters,omitempty"`
	// Optional. The raw time string.
	RawTimeStr *string `protobuf:"bytes,9,opt,name=raw_time_str,json=rawTimeStr" json:"raw_time_str,omitempty"`
	// Optional. Log level as string.
	RawLogLevelStr *string `protobuf:"bytes,10,opt,name=raw_log_level_str,json=rawLogLevelStr" json:"raw_log_level_str,omitempty"`
	// Optional. Thread id which generated this message.
	ThreadId *uint64 `protobuf:"varint,11,opt,name=thread_id,json=threadId" json:"thread_id,omitempty"`
	// Optional. Process id which generated this message.
	ProcessId            *uint64  `protobuf:"varint,12,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogMessage) Reset()         { *m = LogMessage{} }
func (m *LogMessage) String() string { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()    {}
func (*LogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{130}
}

func (m *LogMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogMessage.Unmarshal(m, b)
}
func (m *LogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogMessage.Marshal(b, m, deterministic)
}
func (m *LogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessage.Merge(m, src)
}
func (m *LogMessage) XXX_Size() int {
	return xxx_messageInfo_LogMessage.Size(m)
}
func (m *LogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessage proto.InternalMessageInfo

const Default_LogMessage_LogLevel LogLevel = LogLevel_UNKNOWN

func (m *LogMessage) GetTimestampUsecs() uint64 {
	if m != nil && m.TimestampUsecs != nil {
		return *m.TimestampUsecs
	}
	return 0
}

func (m *LogMessage) GetLogLevel() LogLevel {
	if m != nil && m.LogLevel != nil {
		return *m.LogLevel
	}
	return Default_LogMessage_LogLevel
}

func (m *LogMessage) GetMessageId() string {
	if m != nil && m.MessageId != nil {
		return *m.MessageId
	}
	return ""
}

func (m *LogMessage) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *LogMessage) GetMethodName() string {
	if m != nil && m.MethodName != nil {
		return *m.MethodName
	}
	return ""
}

func (m *LogMessage) GetLineNumber() uint64 {
	if m != nil && m.LineNumber != nil {
		return *m.LineNumber
	}
	return 0
}

func (m *LogMessage) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *LogMessage) GetParameters() []*MetadataEntry {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *LogMessage) GetRawTimeStr() string {
	if m != nil && m.RawTimeStr != nil {
		return *m.RawTimeStr
	}
	return ""
}

func (m *LogMessage) GetRawLogLevelStr() string {
	if m != nil && m.RawLogLevelStr != nil {
		return *m.RawLogLevelStr
	}
	return ""
}

func (m *LogMessage) GetThreadId() uint64 {
	if m != nil && m.ThreadId != nil {
		return *m.ThreadId
	}
	return 0
}

func (m *LogMessage) GetProcessId() uint64 {
	if m != nil && m.ProcessId != nil {
		return *m.ProcessId
	}
	return 0
}

type LogMessageList struct {
	// Required. The list of the LogMessage messages in one set.
	LogMsg               []*LogMessage `protobuf:"bytes,1,rep,name=log_msg,json=logMsg" json:"log_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LogMessageList) Reset()         { *m = LogMessageList{} }
func (m *LogMessageList) String() string { return proto.CompactTextString(m) }
func (*LogMessageList) ProtoMessage()    {}
func (*LogMessageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{131}
}

func (m *LogMessageList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogMessageList.Unmarshal(m, b)
}
func (m *LogMessageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogMessageList.Marshal(b, m, deterministic)
}
func (m *LogMessageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessageList.Merge(m, src)
}
func (m *LogMessageList) XXX_Size() int {
	return xxx_messageInfo_LogMessageList.Size(m)
}
func (m *LogMessageList) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessageList.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessageList proto.InternalMessageInfo

func (m *LogMessageList) GetLogMsg() []*LogMessage {
	if m != nil {
		return m.LogMsg
	}
	return nil
}

type LogCollectorPayloadStats struct {
	// Optional. Number of debug logs.
	NumberOfDebugLogs *uint64 `protobuf:"varint,1,opt,name=number_of_debug_logs,json=numberOfDebugLogs" json:"number_of_debug_logs,omitempty"`
	// Optional. The number of info log messages.
	NumberOfInfoLogs *uint64 `protobuf:"varint,2,opt,name=number_of_info_logs,json=numberOfInfoLogs" json:"number_of_info_logs,omitempty"`
	// Optional. Number of warning log messages.
	NumberOfWarningLogs *uint64 `protobuf:"varint,3,opt,name=number_of_warning_logs,json=numberOfWarningLogs" json:"number_of_warning_logs,omitempty"`
	// Optional. Number of error logs.
	NumberOfErrorLogs *uint64 `protobuf:"varint,4,opt,name=number_of_error_logs,json=numberOfErrorLogs" json:"number_of_error_logs,omitempty"`
	// Optional. Number of fatals.
	NumberOfFatalLogs *uint64 `protobuf:"varint,5,opt,name=number_of_fatal_logs,json=numberOfFatalLogs" json:"number_of_fatal_logs,omitempty"`
	// Optional. Number of dropped msgs.
	NumberOfDroppedLogs *uint64 `protobuf:"varint,6,opt,name=number_of_dropped_logs,json=numberOfDroppedLogs" json:"number_of_dropped_logs,omitempty"`
	// Optional. Number of total logs.
	NumberOfTotalLogs *uint64 `protobuf:"varint,7,opt,name=number_of_total_logs,json=numberOfTotalLogs" json:"number_of_total_logs,omitempty"`
	// Optional. Size of total logs.
	SizeOfTotalLogs      *uint64  `protobuf:"varint,8,opt,name=size_of_total_logs,json=sizeOfTotalLogs" json:"size_of_total_logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogCollectorPayloadStats) Reset()         { *m = LogCollectorPayloadStats{} }
func (m *LogCollectorPayloadStats) String() string { return proto.CompactTextString(m) }
func (*LogCollectorPayloadStats) ProtoMessage()    {}
func (*LogCollectorPayloadStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{132}
}

func (m *LogCollectorPayloadStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogCollectorPayloadStats.Unmarshal(m, b)
}
func (m *LogCollectorPayloadStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogCollectorPayloadStats.Marshal(b, m, deterministic)
}
func (m *LogCollectorPayloadStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogCollectorPayloadStats.Merge(m, src)
}
func (m *LogCollectorPayloadStats) XXX_Size() int {
	return xxx_messageInfo_LogCollectorPayloadStats.Size(m)
}
func (m *LogCollectorPayloadStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LogCollectorPayloadStats.DiscardUnknown(m)
}

var xxx_messageInfo_LogCollectorPayloadStats proto.InternalMessageInfo

func (m *LogCollectorPayloadStats) GetNumberOfDebugLogs() uint64 {
	if m != nil && m.NumberOfDebugLogs != nil {
		return *m.NumberOfDebugLogs
	}
	return 0
}

func (m *LogCollectorPayloadStats) GetNumberOfInfoLogs() uint64 {
	if m != nil && m.NumberOfInfoLogs != nil {
		return *m.NumberOfInfoLogs
	}
	return 0
}

func (m *LogCollectorPayloadStats) GetNumberOfWarningLogs() uint64 {
	if m != nil && m.NumberOfWarningLogs != nil {
		return *m.NumberOfWarningLogs
	}
	return 0
}

func (m *LogCollectorPayloadStats) GetNumberOfErrorLogs() uint64 {
	if m != nil && m.NumberOfErrorLogs != nil {
		return *m.NumberOfErrorLogs
	}
	return 0
}

func (m *LogCollectorPayloadStats) GetNumberOfFatalLogs() uint64 {
	if m != nil && m.NumberOfFatalLogs != nil {
		return *m.NumberOfFatalLogs
	}
	return 0
}

func (m *LogCollectorPayloadStats) GetNumberOfDroppedLogs() uint64 {
	if m != nil && m.NumberOfDroppedLogs != nil {
		return *m.NumberOfDroppedLogs
	}
	return 0
}

func (m *LogCollectorPayloadStats) GetNumberOfTotalLogs() uint64 {
	if m != nil && m.NumberOfTotalLogs != nil {
		return *m.NumberOfTotalLogs
	}
	return 0
}

func (m *LogCollectorPayloadStats) GetSizeOfTotalLogs() uint64 {
	if m != nil && m.SizeOfTotalLogs != nil {
		return *m.SizeOfTotalLogs
	}
	return 0
}

// Format for messages sent from log collector to CFS
type LogCollectorPayload struct {
	// Required. Primary entity against which the messages are logged.
	// This will be node_uuid + "::" + filename from which log message
	// was read.
	EntityGuid *EntityGuid `protobuf:"bytes,1,opt,name=entity_guid,json=entityGuid" json:"entity_guid,omitempty"`
	// Optional. Supported only by 'Nusights - Nutanix Insights'.
	//
	// An entity can have multiple namespaces with different log message streams.
	// Consumer has the flexibility to consume messages belonging to all or only
	// specific namespaces.
	Namespace *string `protobuf:"bytes,2,opt,name=namespace,def=_default_" json:"namespace,omitempty"`
	// Optional. The other entities that relate to the log message. For example:
	// if a process running on a particular node in a cluster logs a message, it
	// can capture the process name in the 'entity_guid' arg above and entity_guid
	// for the node and the cluster below.
	RelatedEntityGuidList []*EntityGuid `protobuf:"bytes,3,rep,name=related_entity_guid_list,json=relatedEntityGuidList" json:"related_entity_guid_list,omitempty"`
	// Required. Timestamp of when the messages were collected.
	CurrentTimestampUsecs *uint64 `protobuf:"varint,4,opt,name=current_timestamp_usecs,json=currentTimestampUsecs" json:"current_timestamp_usecs,omitempty"`
	// Optional. Log file from which the log messages were read.
	LogFileName *string `protobuf:"bytes,5,opt,name=log_file_name,json=logFileName" json:"log_file_name,omitempty"`
	// Required. Timestamp of the first log message in the message list.
	FirstMessageTimestampUsecs *uint64 `protobuf:"varint,6,opt,name=first_message_timestamp_usecs,json=firstMessageTimestampUsecs" json:"first_message_timestamp_usecs,omitempty"`
	// Required. Last timestamp of message in the mesage list.
	LastMessageTimestampUsecs *uint64 `protobuf:"varint,7,opt,name=last_message_timestamp_usecs,json=lastMessageTimestampUsecs" json:"last_message_timestamp_usecs,omitempty"`
	// Required. Number of messages that were compressed and are part of
	// compressed_log_messages.
	NumberOfLogMessages *uint64 `protobuf:"varint,8,opt,name=number_of_log_messages,json=numberOfLogMessages" json:"number_of_log_messages,omitempty"`
	// Optional. The log payload stats.
	LogPayloadStats *LogCollectorPayloadStats `protobuf:"bytes,9,opt,name=log_payload_stats,json=logPayloadStats" json:"log_payload_stats,omitempty"`
	// Required. The compression type used for the log messages.
	CompressionType *LogCollectorPayload_CompressionType `protobuf:"varint,10,opt,name=compression_type,json=compressionType,enum=nutanix.insights.interface.LogCollectorPayload_CompressionType,def=1" json:"compression_type,omitempty"`
	// Required. Compressed array of LogMessage messages.
	CompressedLogMessages []byte `protobuf:"bytes,11,opt,name=compressed_log_messages,json=compressedLogMessages" json:"compressed_log_messages,omitempty"`
	// Optional. The source component from where the logs were generated.
	Component *string `protobuf:"bytes,12,opt,name=component" json:"component,omitempty"`
	// Optional. Specify a fixed UTC time offset in sec(e.g. -25200 for PDT etc.)
	// for local dates.
	TimezoneOffsetSec *int64 `protobuf:"varint,13,opt,name=timezone_offset_sec,json=timezoneOffsetSec" json:"timezone_offset_sec,omitempty"`
	// Required. The type of logs.
	LogType              *LogCollectorPayload_LogType `protobuf:"varint,14,opt,name=log_type,json=logType,enum=nutanix.insights.interface.LogCollectorPayload_LogType,def=0" json:"log_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *LogCollectorPayload) Reset()         { *m = LogCollectorPayload{} }
func (m *LogCollectorPayload) String() string { return proto.CompactTextString(m) }
func (*LogCollectorPayload) ProtoMessage()    {}
func (*LogCollectorPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{133}
}

func (m *LogCollectorPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogCollectorPayload.Unmarshal(m, b)
}
func (m *LogCollectorPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogCollectorPayload.Marshal(b, m, deterministic)
}
func (m *LogCollectorPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogCollectorPayload.Merge(m, src)
}
func (m *LogCollectorPayload) XXX_Size() int {
	return xxx_messageInfo_LogCollectorPayload.Size(m)
}
func (m *LogCollectorPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_LogCollectorPayload.DiscardUnknown(m)
}

var xxx_messageInfo_LogCollectorPayload proto.InternalMessageInfo

const Default_LogCollectorPayload_Namespace string = "_default_"
const Default_LogCollectorPayload_CompressionType LogCollectorPayload_CompressionType = LogCollectorPayload_kZlib
const Default_LogCollectorPayload_LogType LogCollectorPayload_LogType = LogCollectorPayload_kLog

func (m *LogCollectorPayload) GetEntityGuid() *EntityGuid {
	if m != nil {
		return m.EntityGuid
	}
	return nil
}

func (m *LogCollectorPayload) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return Default_LogCollectorPayload_Namespace
}

func (m *LogCollectorPayload) GetRelatedEntityGuidList() []*EntityGuid {
	if m != nil {
		return m.RelatedEntityGuidList
	}
	return nil
}

func (m *LogCollectorPayload) GetCurrentTimestampUsecs() uint64 {
	if m != nil && m.CurrentTimestampUsecs != nil {
		return *m.CurrentTimestampUsecs
	}
	return 0
}

func (m *LogCollectorPayload) GetLogFileName() string {
	if m != nil && m.LogFileName != nil {
		return *m.LogFileName
	}
	return ""
}

func (m *LogCollectorPayload) GetFirstMessageTimestampUsecs() uint64 {
	if m != nil && m.FirstMessageTimestampUsecs != nil {
		return *m.FirstMessageTimestampUsecs
	}
	return 0
}

func (m *LogCollectorPayload) GetLastMessageTimestampUsecs() uint64 {
	if m != nil && m.LastMessageTimestampUsecs != nil {
		return *m.LastMessageTimestampUsecs
	}
	return 0
}

func (m *LogCollectorPayload) GetNumberOfLogMessages() uint64 {
	if m != nil && m.NumberOfLogMessages != nil {
		return *m.NumberOfLogMessages
	}
	return 0
}

func (m *LogCollectorPayload) GetLogPayloadStats() *LogCollectorPayloadStats {
	if m != nil {
		return m.LogPayloadStats
	}
	return nil
}

func (m *LogCollectorPayload) GetCompressionType() LogCollectorPayload_CompressionType {
	if m != nil && m.CompressionType != nil {
		return *m.CompressionType
	}
	return Default_LogCollectorPayload_CompressionType
}

func (m *LogCollectorPayload) GetCompressedLogMessages() []byte {
	if m != nil {
		return m.CompressedLogMessages
	}
	return nil
}

func (m *LogCollectorPayload) GetComponent() string {
	if m != nil && m.Component != nil {
		return *m.Component
	}
	return ""
}

func (m *LogCollectorPayload) GetTimezoneOffsetSec() int64 {
	if m != nil && m.TimezoneOffsetSec != nil {
		return *m.TimezoneOffsetSec
	}
	return 0
}

func (m *LogCollectorPayload) GetLogType() LogCollectorPayload_LogType {
	if m != nil && m.LogType != nil {
		return *m.LogType
	}
	return Default_LogCollectorPayload_LogType
}

type PutLogArg struct {
	// Required. PutLogMessageArg can be set of unrelated log messages.
	LogCollectorPayload []*LogCollectorPayload `protobuf:"bytes,1,rep,name=log_collector_payload,json=logCollectorPayload" json:"log_collector_payload,omitempty"`
	// Optional. Additional list of key-value pairs to be passed with arg.
	Metadata             []*NameTimeValuePair `protobuf:"bytes,12,rep,name=metadata" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PutLogArg) Reset()         { *m = PutLogArg{} }
func (m *PutLogArg) String() string { return proto.CompactTextString(m) }
func (*PutLogArg) ProtoMessage()    {}
func (*PutLogArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{134}
}

func (m *PutLogArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutLogArg.Unmarshal(m, b)
}
func (m *PutLogArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutLogArg.Marshal(b, m, deterministic)
}
func (m *PutLogArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutLogArg.Merge(m, src)
}
func (m *PutLogArg) XXX_Size() int {
	return xxx_messageInfo_PutLogArg.Size(m)
}
func (m *PutLogArg) XXX_DiscardUnknown() {
	xxx_messageInfo_PutLogArg.DiscardUnknown(m)
}

var xxx_messageInfo_PutLogArg proto.InternalMessageInfo

func (m *PutLogArg) GetLogCollectorPayload() []*LogCollectorPayload {
	if m != nil {
		return m.LogCollectorPayload
	}
	return nil
}

func (m *PutLogArg) GetMetadata() []*NameTimeValuePair {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type PutLogRet struct {
	// Required. Status for each log collector payload.
	PutLogRetElemList []*PutLogRet_RetElem `protobuf:"bytes,1,rep,name=put_log_ret_elem_list,json=putLogRetElemList" json:"put_log_ret_elem_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PutLogRet) Reset()         { *m = PutLogRet{} }
func (m *PutLogRet) String() string { return proto.CompactTextString(m) }
func (*PutLogRet) ProtoMessage()    {}
func (*PutLogRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{135}
}

func (m *PutLogRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutLogRet.Unmarshal(m, b)
}
func (m *PutLogRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutLogRet.Marshal(b, m, deterministic)
}
func (m *PutLogRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutLogRet.Merge(m, src)
}
func (m *PutLogRet) XXX_Size() int {
	return xxx_messageInfo_PutLogRet.Size(m)
}
func (m *PutLogRet) XXX_DiscardUnknown() {
	xxx_messageInfo_PutLogRet.DiscardUnknown(m)
}

var xxx_messageInfo_PutLogRet proto.InternalMessageInfo

func (m *PutLogRet) GetPutLogRetElemList() []*PutLogRet_RetElem {
	if m != nil {
		return m.PutLogRetElemList
	}
	return nil
}

func (m *PutLogRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type PutLogRet_RetElem struct {
	// Required: The log file name.
	LogFileName *string `protobuf:"bytes,1,opt,name=log_file_name,json=logFileName" json:"log_file_name,omitempty"`
	// Optional. Namespace of the log message.
	Namespace *string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	// Required. Return status for this particular log message.
	Status *InsightsErrorProto `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	// Required. Entity ID.
	EntityId             *string  `protobuf:"bytes,4,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutLogRet_RetElem) Reset()         { *m = PutLogRet_RetElem{} }
func (m *PutLogRet_RetElem) String() string { return proto.CompactTextString(m) }
func (*PutLogRet_RetElem) ProtoMessage()    {}
func (*PutLogRet_RetElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{135, 0}
}

func (m *PutLogRet_RetElem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutLogRet_RetElem.Unmarshal(m, b)
}
func (m *PutLogRet_RetElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutLogRet_RetElem.Marshal(b, m, deterministic)
}
func (m *PutLogRet_RetElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutLogRet_RetElem.Merge(m, src)
}
func (m *PutLogRet_RetElem) XXX_Size() int {
	return xxx_messageInfo_PutLogRet_RetElem.Size(m)
}
func (m *PutLogRet_RetElem) XXX_DiscardUnknown() {
	xxx_messageInfo_PutLogRet_RetElem.DiscardUnknown(m)
}

var xxx_messageInfo_PutLogRet_RetElem proto.InternalMessageInfo

func (m *PutLogRet_RetElem) GetLogFileName() string {
	if m != nil && m.LogFileName != nil {
		return *m.LogFileName
	}
	return ""
}

func (m *PutLogRet_RetElem) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *PutLogRet_RetElem) GetStatus() *InsightsErrorProto {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PutLogRet_RetElem) GetEntityId() string {
	if m != nil && m.EntityId != nil {
		return *m.EntityId
	}
	return ""
}

type GetAllShardIdsArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllShardIdsArg) Reset()         { *m = GetAllShardIdsArg{} }
func (m *GetAllShardIdsArg) String() string { return proto.CompactTextString(m) }
func (*GetAllShardIdsArg) ProtoMessage()    {}
func (*GetAllShardIdsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{136}
}

func (m *GetAllShardIdsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllShardIdsArg.Unmarshal(m, b)
}
func (m *GetAllShardIdsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllShardIdsArg.Marshal(b, m, deterministic)
}
func (m *GetAllShardIdsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllShardIdsArg.Merge(m, src)
}
func (m *GetAllShardIdsArg) XXX_Size() int {
	return xxx_messageInfo_GetAllShardIdsArg.Size(m)
}
func (m *GetAllShardIdsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllShardIdsArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllShardIdsArg proto.InternalMessageInfo

type GetAllShardIdsRet struct {
	// The list of shard ids that IDF supports, in string format. We format the
	// shard ids as string because changing the sharding scheme within IDF could
	// be done seamlessly without impacting the consumers.
	ShardIdList []string `protobuf:"bytes,1,rep,name=shard_id_list,json=shardIdList" json:"shard_id_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetAllShardIdsRet) Reset()         { *m = GetAllShardIdsRet{} }
func (m *GetAllShardIdsRet) String() string { return proto.CompactTextString(m) }
func (*GetAllShardIdsRet) ProtoMessage()    {}
func (*GetAllShardIdsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{137}
}

func (m *GetAllShardIdsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllShardIdsRet.Unmarshal(m, b)
}
func (m *GetAllShardIdsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllShardIdsRet.Marshal(b, m, deterministic)
}
func (m *GetAllShardIdsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllShardIdsRet.Merge(m, src)
}
func (m *GetAllShardIdsRet) XXX_Size() int {
	return xxx_messageInfo_GetAllShardIdsRet.Size(m)
}
func (m *GetAllShardIdsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllShardIdsRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllShardIdsRet proto.InternalMessageInfo

func (m *GetAllShardIdsRet) GetShardIdList() []string {
	if m != nil {
		return m.ShardIdList
	}
	return nil
}

func (m *GetAllShardIdsRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Arg for ReplicateEntities RPC. Multiple entities from the same master cluster
// can be specified in the arg.
type ReplicateEntitiesArg struct {
	// The uuid of the master cluster.
	MasterClusterUuid *string `protobuf:"bytes,1,opt,name=master_cluster_uuid,json=masterClusterUuid" json:"master_cluster_uuid,omitempty"`
	// List of entities to be replicated.
	EntityList           []*Entity `protobuf:"bytes,2,rep,name=entity_list,json=entityList" json:"entity_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReplicateEntitiesArg) Reset()         { *m = ReplicateEntitiesArg{} }
func (m *ReplicateEntitiesArg) String() string { return proto.CompactTextString(m) }
func (*ReplicateEntitiesArg) ProtoMessage()    {}
func (*ReplicateEntitiesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{138}
}

func (m *ReplicateEntitiesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicateEntitiesArg.Unmarshal(m, b)
}
func (m *ReplicateEntitiesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicateEntitiesArg.Marshal(b, m, deterministic)
}
func (m *ReplicateEntitiesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicateEntitiesArg.Merge(m, src)
}
func (m *ReplicateEntitiesArg) XXX_Size() int {
	return xxx_messageInfo_ReplicateEntitiesArg.Size(m)
}
func (m *ReplicateEntitiesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicateEntitiesArg.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicateEntitiesArg proto.InternalMessageInfo

func (m *ReplicateEntitiesArg) GetMasterClusterUuid() string {
	if m != nil && m.MasterClusterUuid != nil {
		return *m.MasterClusterUuid
	}
	return ""
}

func (m *ReplicateEntitiesArg) GetEntityList() []*Entity {
	if m != nil {
		return m.EntityList
	}
	return nil
}

type ReplicateEntityStatus struct {
	// Return the state of the entity before replication.
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
	// The error status of replicating the entity
	Status               *InsightsErrorProto `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReplicateEntityStatus) Reset()         { *m = ReplicateEntityStatus{} }
func (m *ReplicateEntityStatus) String() string { return proto.CompactTextString(m) }
func (*ReplicateEntityStatus) ProtoMessage()    {}
func (*ReplicateEntityStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{139}
}

func (m *ReplicateEntityStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicateEntityStatus.Unmarshal(m, b)
}
func (m *ReplicateEntityStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicateEntityStatus.Marshal(b, m, deterministic)
}
func (m *ReplicateEntityStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicateEntityStatus.Merge(m, src)
}
func (m *ReplicateEntityStatus) XXX_Size() int {
	return xxx_messageInfo_ReplicateEntityStatus.Size(m)
}
func (m *ReplicateEntityStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicateEntityStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicateEntityStatus proto.InternalMessageInfo

func (m *ReplicateEntityStatus) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *ReplicateEntityStatus) GetStatus() *InsightsErrorProto {
	if m != nil {
		return m.Status
	}
	return nil
}

type ReplicateEntitiesRet struct {
	// The replication status of each entity in the ReplicateEntitiesArg.
	ReplicateEntityStatusList []*ReplicateEntityStatus `protobuf:"bytes,1,rep,name=replicate_entity_status_list,json=replicateEntityStatusList" json:"replicate_entity_status_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *int64   `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ReplicateEntitiesRet) Reset()         { *m = ReplicateEntitiesRet{} }
func (m *ReplicateEntitiesRet) String() string { return proto.CompactTextString(m) }
func (*ReplicateEntitiesRet) ProtoMessage()    {}
func (*ReplicateEntitiesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{140}
}

func (m *ReplicateEntitiesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicateEntitiesRet.Unmarshal(m, b)
}
func (m *ReplicateEntitiesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicateEntitiesRet.Marshal(b, m, deterministic)
}
func (m *ReplicateEntitiesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicateEntitiesRet.Merge(m, src)
}
func (m *ReplicateEntitiesRet) XXX_Size() int {
	return xxx_messageInfo_ReplicateEntitiesRet.Size(m)
}
func (m *ReplicateEntitiesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicateEntitiesRet.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicateEntitiesRet proto.InternalMessageInfo

func (m *ReplicateEntitiesRet) GetReplicateEntityStatusList() []*ReplicateEntityStatus {
	if m != nil {
		return m.ReplicateEntityStatusList
	}
	return nil
}

func (m *ReplicateEntitiesRet) GetRpcExecutionTimeUsecs() int64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type StateData struct {
	// Required. The type of state represented by this proto.
	InternalStateId *InternalStateId `protobuf:"varint,1,opt,name=internal_state_id,json=internalStateId,enum=nutanix.insights.interface.InternalStateId" json:"internal_state_id,omitempty"`
	// Optional. The value of the internal state.
	DataValue *DataValue `protobuf:"bytes,2,opt,name=data_value,json=dataValue" json:"data_value,omitempty"`
	// Optional. A list of stats corresponding to the internal_state_id.
	StatsList            []*StatsFormat `protobuf:"bytes,3,rep,name=stats_list,json=statsList" json:"stats_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StateData) Reset()         { *m = StateData{} }
func (m *StateData) String() string { return proto.CompactTextString(m) }
func (*StateData) ProtoMessage()    {}
func (*StateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{141}
}

func (m *StateData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateData.Unmarshal(m, b)
}
func (m *StateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateData.Marshal(b, m, deterministic)
}
func (m *StateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateData.Merge(m, src)
}
func (m *StateData) XXX_Size() int {
	return xxx_messageInfo_StateData.Size(m)
}
func (m *StateData) XXX_DiscardUnknown() {
	xxx_messageInfo_StateData.DiscardUnknown(m)
}

var xxx_messageInfo_StateData proto.InternalMessageInfo

func (m *StateData) GetInternalStateId() InternalStateId {
	if m != nil && m.InternalStateId != nil {
		return *m.InternalStateId
	}
	return InternalStateId_kLocalTenantId
}

func (m *StateData) GetDataValue() *DataValue {
	if m != nil {
		return m.DataValue
	}
	return nil
}

func (m *StateData) GetStatsList() []*StatsFormat {
	if m != nil {
		return m.StatsList
	}
	return nil
}

type NodeState struct {
	// Required. In the format "ip_address:port".
	NodeHandle *string `protobuf:"bytes,1,opt,name=node_handle,json=nodeHandle" json:"node_handle,omitempty"`
	// Required. A list of the requested state for this node.
	StateDataList        []*StateData `protobuf:"bytes,2,rep,name=state_data_list,json=stateDataList" json:"state_data_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NodeState) Reset()         { *m = NodeState{} }
func (m *NodeState) String() string { return proto.CompactTextString(m) }
func (*NodeState) ProtoMessage()    {}
func (*NodeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{142}
}

func (m *NodeState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeState.Unmarshal(m, b)
}
func (m *NodeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeState.Marshal(b, m, deterministic)
}
func (m *NodeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeState.Merge(m, src)
}
func (m *NodeState) XXX_Size() int {
	return xxx_messageInfo_NodeState.Size(m)
}
func (m *NodeState) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeState.DiscardUnknown(m)
}

var xxx_messageInfo_NodeState proto.InternalMessageInfo

func (m *NodeState) GetNodeHandle() string {
	if m != nil && m.NodeHandle != nil {
		return *m.NodeHandle
	}
	return ""
}

func (m *NodeState) GetStateDataList() []*StateData {
	if m != nil {
		return m.StateDataList
	}
	return nil
}

// Arg for GetInternalState RPC. This RPC can be used to retrieve information
// about individual nodes within the cluster. Note: this RPC does not take
// a "snapshot" in the transactional sense.
type GetInternalStateArg struct {
	RequestedStateList   []InternalStateId `protobuf:"varint,1,rep,name=requested_state_list,json=requestedStateList,enum=nutanix.insights.interface.InternalStateId" json:"requested_state_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetInternalStateArg) Reset()         { *m = GetInternalStateArg{} }
func (m *GetInternalStateArg) String() string { return proto.CompactTextString(m) }
func (*GetInternalStateArg) ProtoMessage()    {}
func (*GetInternalStateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{143}
}

func (m *GetInternalStateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInternalStateArg.Unmarshal(m, b)
}
func (m *GetInternalStateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInternalStateArg.Marshal(b, m, deterministic)
}
func (m *GetInternalStateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInternalStateArg.Merge(m, src)
}
func (m *GetInternalStateArg) XXX_Size() int {
	return xxx_messageInfo_GetInternalStateArg.Size(m)
}
func (m *GetInternalStateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInternalStateArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetInternalStateArg proto.InternalMessageInfo

func (m *GetInternalStateArg) GetRequestedStateList() []InternalStateId {
	if m != nil {
		return m.RequestedStateList
	}
	return nil
}

type GetInternalStateRet struct {
	// Contains the requested state for all nodes within the cluster.
	NodeStateList []*NodeState `protobuf:"bytes,1,rep,name=node_state_list,json=nodeStateList" json:"node_state_list,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *int64   `protobuf:"varint,2,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetInternalStateRet) Reset()         { *m = GetInternalStateRet{} }
func (m *GetInternalStateRet) String() string { return proto.CompactTextString(m) }
func (*GetInternalStateRet) ProtoMessage()    {}
func (*GetInternalStateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{144}
}

func (m *GetInternalStateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInternalStateRet.Unmarshal(m, b)
}
func (m *GetInternalStateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInternalStateRet.Marshal(b, m, deterministic)
}
func (m *GetInternalStateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInternalStateRet.Merge(m, src)
}
func (m *GetInternalStateRet) XXX_Size() int {
	return xxx_messageInfo_GetInternalStateRet.Size(m)
}
func (m *GetInternalStateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInternalStateRet.DiscardUnknown(m)
}

var xxx_messageInfo_GetInternalStateRet proto.InternalMessageInfo

func (m *GetInternalStateRet) GetNodeStateList() []*NodeState {
	if m != nil {
		return m.NodeStateList
	}
	return nil
}

func (m *GetInternalStateRet) GetRpcExecutionTimeUsecs() int64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type WriteLockGlobalDataArg struct {
	// Optional. This is like the credential of the lock.
	// If provided, the WriteLockGlobalData request will be treated
	// as  a renew operation, and will be rejected if the lock is not
	// taken already.
	GlobalDataLockId     *string  `protobuf:"bytes,1,opt,name=global_data_lock_id,json=globalDataLockId" json:"global_data_lock_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteLockGlobalDataArg) Reset()         { *m = WriteLockGlobalDataArg{} }
func (m *WriteLockGlobalDataArg) String() string { return proto.CompactTextString(m) }
func (*WriteLockGlobalDataArg) ProtoMessage()    {}
func (*WriteLockGlobalDataArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{145}
}

func (m *WriteLockGlobalDataArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteLockGlobalDataArg.Unmarshal(m, b)
}
func (m *WriteLockGlobalDataArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteLockGlobalDataArg.Marshal(b, m, deterministic)
}
func (m *WriteLockGlobalDataArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteLockGlobalDataArg.Merge(m, src)
}
func (m *WriteLockGlobalDataArg) XXX_Size() int {
	return xxx_messageInfo_WriteLockGlobalDataArg.Size(m)
}
func (m *WriteLockGlobalDataArg) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteLockGlobalDataArg.DiscardUnknown(m)
}

var xxx_messageInfo_WriteLockGlobalDataArg proto.InternalMessageInfo

func (m *WriteLockGlobalDataArg) GetGlobalDataLockId() string {
	if m != nil && m.GlobalDataLockId != nil {
		return *m.GlobalDataLockId
	}
	return ""
}

type WriteLockGlobalDataRet struct {
	// Optional. The 'global_data_lock_id' of the current lock grabbed
	// if the WriteLockGlobalData request succeeded.
	// This should be used for later write requests and lock renew.
	GlobalDataLockId *string `protobuf:"bytes,1,opt,name=global_data_lock_id,json=globalDataLockId" json:"global_data_lock_id,omitempty"`
	// Optional. The period of time the lock will be held, after which the
	// lock will be released by IDF server. It is returned only if the
	// WriteLockGlobalData request succeeded.
	// We return the ttl instead of the expiration timestamp as to prevent
	// the potential clock skew between IDF and clients.
	TtlMsecs *int64 `protobuf:"varint,2,opt,name=ttl_msecs,json=ttlMsecs" json:"ttl_msecs,omitempty"`
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,3,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *WriteLockGlobalDataRet) Reset()         { *m = WriteLockGlobalDataRet{} }
func (m *WriteLockGlobalDataRet) String() string { return proto.CompactTextString(m) }
func (*WriteLockGlobalDataRet) ProtoMessage()    {}
func (*WriteLockGlobalDataRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{146}
}

func (m *WriteLockGlobalDataRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteLockGlobalDataRet.Unmarshal(m, b)
}
func (m *WriteLockGlobalDataRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteLockGlobalDataRet.Marshal(b, m, deterministic)
}
func (m *WriteLockGlobalDataRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteLockGlobalDataRet.Merge(m, src)
}
func (m *WriteLockGlobalDataRet) XXX_Size() int {
	return xxx_messageInfo_WriteLockGlobalDataRet.Size(m)
}
func (m *WriteLockGlobalDataRet) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteLockGlobalDataRet.DiscardUnknown(m)
}

var xxx_messageInfo_WriteLockGlobalDataRet proto.InternalMessageInfo

func (m *WriteLockGlobalDataRet) GetGlobalDataLockId() string {
	if m != nil && m.GlobalDataLockId != nil {
		return *m.GlobalDataLockId
	}
	return ""
}

func (m *WriteLockGlobalDataRet) GetTtlMsecs() int64 {
	if m != nil && m.TtlMsecs != nil {
		return *m.TtlMsecs
	}
	return 0
}

func (m *WriteLockGlobalDataRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

type WriteUnlockGlobalDataArg struct {
	// Required. The 'global_data_lock_id' of the lock to be released.
	// It will be used for matching with the current lock. If not match,
	// the request will fail.
	GlobalDataLockId     *string  `protobuf:"bytes,1,opt,name=global_data_lock_id,json=globalDataLockId" json:"global_data_lock_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteUnlockGlobalDataArg) Reset()         { *m = WriteUnlockGlobalDataArg{} }
func (m *WriteUnlockGlobalDataArg) String() string { return proto.CompactTextString(m) }
func (*WriteUnlockGlobalDataArg) ProtoMessage()    {}
func (*WriteUnlockGlobalDataArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{147}
}

func (m *WriteUnlockGlobalDataArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteUnlockGlobalDataArg.Unmarshal(m, b)
}
func (m *WriteUnlockGlobalDataArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteUnlockGlobalDataArg.Marshal(b, m, deterministic)
}
func (m *WriteUnlockGlobalDataArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteUnlockGlobalDataArg.Merge(m, src)
}
func (m *WriteUnlockGlobalDataArg) XXX_Size() int {
	return xxx_messageInfo_WriteUnlockGlobalDataArg.Size(m)
}
func (m *WriteUnlockGlobalDataArg) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteUnlockGlobalDataArg.DiscardUnknown(m)
}

var xxx_messageInfo_WriteUnlockGlobalDataArg proto.InternalMessageInfo

func (m *WriteUnlockGlobalDataArg) GetGlobalDataLockId() string {
	if m != nil && m.GlobalDataLockId != nil {
		return *m.GlobalDataLockId
	}
	return ""
}

type WriteUnlockGlobalDataRet struct {
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *uint64  `protobuf:"varint,1,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *WriteUnlockGlobalDataRet) Reset()         { *m = WriteUnlockGlobalDataRet{} }
func (m *WriteUnlockGlobalDataRet) String() string { return proto.CompactTextString(m) }
func (*WriteUnlockGlobalDataRet) ProtoMessage()    {}
func (*WriteUnlockGlobalDataRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{148}
}

func (m *WriteUnlockGlobalDataRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteUnlockGlobalDataRet.Unmarshal(m, b)
}
func (m *WriteUnlockGlobalDataRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteUnlockGlobalDataRet.Marshal(b, m, deterministic)
}
func (m *WriteUnlockGlobalDataRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteUnlockGlobalDataRet.Merge(m, src)
}
func (m *WriteUnlockGlobalDataRet) XXX_Size() int {
	return xxx_messageInfo_WriteUnlockGlobalDataRet.Size(m)
}
func (m *WriteUnlockGlobalDataRet) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteUnlockGlobalDataRet.DiscardUnknown(m)
}

var xxx_messageInfo_WriteUnlockGlobalDataRet proto.InternalMessageInfo

func (m *WriteUnlockGlobalDataRet) GetRpcExecutionTimeUsecs() uint64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Arg for TestBuffer RPC.
// TODO(Nidhi): Remove this once any other flatbuffer based RPC is defined.
type TestBufferArg struct {
	// Random test value.
	TestValue *int64 `protobuf:"varint,1,opt,name=test_value,json=testValue" json:"test_value,omitempty"`
	// This is an internal field and should not be set directly by the client.
	// This field is set by the insight_interface layer. If 'TestBufferFB' or
	// 'TestBufferFBSync' RPC is called, this field is set to true. It specifies
	// that the RPC response should be returned in the form of a flatbuffer
	// object as part of the rpc response payload. Otherwise, it is set to false.
	// Then the response is returned in the corresponding TestBufferRet protobuf
	// object; similar to all other protobuf RPCs. The response will be present
	// in either one of these two formats depending on the given RPC call format.
	ReturnResponseInFlatbufferFormat *bool    `protobuf:"varint,2,opt,name=return_response_in_flatbuffer_format,json=returnResponseInFlatbufferFormat,def=0" json:"return_response_in_flatbuffer_format,omitempty"`
	XXX_NoUnkeyedLiteral             struct{} `json:"-"`
	XXX_unrecognized                 []byte   `json:"-"`
	XXX_sizecache                    int32    `json:"-"`
}

func (m *TestBufferArg) Reset()         { *m = TestBufferArg{} }
func (m *TestBufferArg) String() string { return proto.CompactTextString(m) }
func (*TestBufferArg) ProtoMessage()    {}
func (*TestBufferArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{149}
}

func (m *TestBufferArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestBufferArg.Unmarshal(m, b)
}
func (m *TestBufferArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestBufferArg.Marshal(b, m, deterministic)
}
func (m *TestBufferArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestBufferArg.Merge(m, src)
}
func (m *TestBufferArg) XXX_Size() int {
	return xxx_messageInfo_TestBufferArg.Size(m)
}
func (m *TestBufferArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TestBufferArg.DiscardUnknown(m)
}

var xxx_messageInfo_TestBufferArg proto.InternalMessageInfo

const Default_TestBufferArg_ReturnResponseInFlatbufferFormat bool = false

func (m *TestBufferArg) GetTestValue() int64 {
	if m != nil && m.TestValue != nil {
		return *m.TestValue
	}
	return 0
}

func (m *TestBufferArg) GetReturnResponseInFlatbufferFormat() bool {
	if m != nil && m.ReturnResponseInFlatbufferFormat != nil {
		return *m.ReturnResponseInFlatbufferFormat
	}
	return Default_TestBufferArg_ReturnResponseInFlatbufferFormat
}

// Ret for TestBuffer RPC.
// TODO(Nidhi): Remove this once any other flatbuffer based RPC is defined.
type TestBufferRet struct {
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *int64   `protobuf:"varint,1,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *TestBufferRet) Reset()         { *m = TestBufferRet{} }
func (m *TestBufferRet) String() string { return proto.CompactTextString(m) }
func (*TestBufferRet) ProtoMessage()    {}
func (*TestBufferRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{150}
}

func (m *TestBufferRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestBufferRet.Unmarshal(m, b)
}
func (m *TestBufferRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestBufferRet.Marshal(b, m, deterministic)
}
func (m *TestBufferRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestBufferRet.Merge(m, src)
}
func (m *TestBufferRet) XXX_Size() int {
	return xxx_messageInfo_TestBufferRet.Size(m)
}
func (m *TestBufferRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TestBufferRet.DiscardUnknown(m)
}

var xxx_messageInfo_TestBufferRet proto.InternalMessageInfo

func (m *TestBufferRet) GetRpcExecutionTimeUsecs() int64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Global Data Stage Info proto for storing stage information in Zookeeper node.
type GlobalDataStageInfoProto struct {
	// Last committeed stage id.
	// It is updated by Leader node. Default value to start is derived
	// from FLAGS_insight_entities_column_name. The value is incremented
	// on every committed stage.
	StageId *int64 `protobuf:"varint,1,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	// Staging in progress.
	// It informs whether staging is in progress. Once the staging is
	// completed stage_pending is set to false and stage_id is incremented.
	StagePending         *bool    `protobuf:"varint,2,opt,name=stage_pending,json=stagePending" json:"stage_pending,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalDataStageInfoProto) Reset()         { *m = GlobalDataStageInfoProto{} }
func (m *GlobalDataStageInfoProto) String() string { return proto.CompactTextString(m) }
func (*GlobalDataStageInfoProto) ProtoMessage()    {}
func (*GlobalDataStageInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{151}
}

func (m *GlobalDataStageInfoProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalDataStageInfoProto.Unmarshal(m, b)
}
func (m *GlobalDataStageInfoProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalDataStageInfoProto.Marshal(b, m, deterministic)
}
func (m *GlobalDataStageInfoProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalDataStageInfoProto.Merge(m, src)
}
func (m *GlobalDataStageInfoProto) XXX_Size() int {
	return xxx_messageInfo_GlobalDataStageInfoProto.Size(m)
}
func (m *GlobalDataStageInfoProto) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalDataStageInfoProto.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalDataStageInfoProto proto.InternalMessageInfo

func (m *GlobalDataStageInfoProto) GetStageId() int64 {
	if m != nil && m.StageId != nil {
		return *m.StageId
	}
	return 0
}

func (m *GlobalDataStageInfoProto) GetStagePending() bool {
	if m != nil && m.StagePending != nil {
		return *m.StagePending
	}
	return false
}

// Arg for InitGlobalDataStaging RPC.
type InitGlobalDataStagingArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitGlobalDataStagingArg) Reset()         { *m = InitGlobalDataStagingArg{} }
func (m *InitGlobalDataStagingArg) String() string { return proto.CompactTextString(m) }
func (*InitGlobalDataStagingArg) ProtoMessage()    {}
func (*InitGlobalDataStagingArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{152}
}

func (m *InitGlobalDataStagingArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitGlobalDataStagingArg.Unmarshal(m, b)
}
func (m *InitGlobalDataStagingArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitGlobalDataStagingArg.Marshal(b, m, deterministic)
}
func (m *InitGlobalDataStagingArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitGlobalDataStagingArg.Merge(m, src)
}
func (m *InitGlobalDataStagingArg) XXX_Size() int {
	return xxx_messageInfo_InitGlobalDataStagingArg.Size(m)
}
func (m *InitGlobalDataStagingArg) XXX_DiscardUnknown() {
	xxx_messageInfo_InitGlobalDataStagingArg.DiscardUnknown(m)
}

var xxx_messageInfo_InitGlobalDataStagingArg proto.InternalMessageInfo

// Ret for InitGlobalDataStaging RPC.
type InitGlobalDataStagingRet struct {
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *int64   `protobuf:"varint,1,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *InitGlobalDataStagingRet) Reset()         { *m = InitGlobalDataStagingRet{} }
func (m *InitGlobalDataStagingRet) String() string { return proto.CompactTextString(m) }
func (*InitGlobalDataStagingRet) ProtoMessage()    {}
func (*InitGlobalDataStagingRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{153}
}

func (m *InitGlobalDataStagingRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitGlobalDataStagingRet.Unmarshal(m, b)
}
func (m *InitGlobalDataStagingRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitGlobalDataStagingRet.Marshal(b, m, deterministic)
}
func (m *InitGlobalDataStagingRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitGlobalDataStagingRet.Merge(m, src)
}
func (m *InitGlobalDataStagingRet) XXX_Size() int {
	return xxx_messageInfo_InitGlobalDataStagingRet.Size(m)
}
func (m *InitGlobalDataStagingRet) XXX_DiscardUnknown() {
	xxx_messageInfo_InitGlobalDataStagingRet.DiscardUnknown(m)
}

var xxx_messageInfo_InitGlobalDataStagingRet proto.InternalMessageInfo

func (m *InitGlobalDataStagingRet) GetRpcExecutionTimeUsecs() int64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Arg for CommitGlobalDataStaging RPC.
type CommitGlobalDataStagingArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitGlobalDataStagingArg) Reset()         { *m = CommitGlobalDataStagingArg{} }
func (m *CommitGlobalDataStagingArg) String() string { return proto.CompactTextString(m) }
func (*CommitGlobalDataStagingArg) ProtoMessage()    {}
func (*CommitGlobalDataStagingArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{154}
}

func (m *CommitGlobalDataStagingArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitGlobalDataStagingArg.Unmarshal(m, b)
}
func (m *CommitGlobalDataStagingArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitGlobalDataStagingArg.Marshal(b, m, deterministic)
}
func (m *CommitGlobalDataStagingArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitGlobalDataStagingArg.Merge(m, src)
}
func (m *CommitGlobalDataStagingArg) XXX_Size() int {
	return xxx_messageInfo_CommitGlobalDataStagingArg.Size(m)
}
func (m *CommitGlobalDataStagingArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitGlobalDataStagingArg.DiscardUnknown(m)
}

var xxx_messageInfo_CommitGlobalDataStagingArg proto.InternalMessageInfo

// Ret for CommitGlobalDataStaging RPC.
type CommitGlobalDataStagingRet struct {
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *int64   `protobuf:"varint,1,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CommitGlobalDataStagingRet) Reset()         { *m = CommitGlobalDataStagingRet{} }
func (m *CommitGlobalDataStagingRet) String() string { return proto.CompactTextString(m) }
func (*CommitGlobalDataStagingRet) ProtoMessage()    {}
func (*CommitGlobalDataStagingRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{155}
}

func (m *CommitGlobalDataStagingRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitGlobalDataStagingRet.Unmarshal(m, b)
}
func (m *CommitGlobalDataStagingRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitGlobalDataStagingRet.Marshal(b, m, deterministic)
}
func (m *CommitGlobalDataStagingRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitGlobalDataStagingRet.Merge(m, src)
}
func (m *CommitGlobalDataStagingRet) XXX_Size() int {
	return xxx_messageInfo_CommitGlobalDataStagingRet.Size(m)
}
func (m *CommitGlobalDataStagingRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitGlobalDataStagingRet.DiscardUnknown(m)
}

var xxx_messageInfo_CommitGlobalDataStagingRet proto.InternalMessageInfo

func (m *CommitGlobalDataStagingRet) GetRpcExecutionTimeUsecs() int64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Arg for FlushGlobalData RPC.
type FlushGlobalDataArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlushGlobalDataArg) Reset()         { *m = FlushGlobalDataArg{} }
func (m *FlushGlobalDataArg) String() string { return proto.CompactTextString(m) }
func (*FlushGlobalDataArg) ProtoMessage()    {}
func (*FlushGlobalDataArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{156}
}

func (m *FlushGlobalDataArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlushGlobalDataArg.Unmarshal(m, b)
}
func (m *FlushGlobalDataArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlushGlobalDataArg.Marshal(b, m, deterministic)
}
func (m *FlushGlobalDataArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushGlobalDataArg.Merge(m, src)
}
func (m *FlushGlobalDataArg) XXX_Size() int {
	return xxx_messageInfo_FlushGlobalDataArg.Size(m)
}
func (m *FlushGlobalDataArg) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushGlobalDataArg.DiscardUnknown(m)
}

var xxx_messageInfo_FlushGlobalDataArg proto.InternalMessageInfo

// Ret for FlushGlobalData RPC.
type FlushGlobalDataRet struct {
	// Required. The execution time taken by this rpc on the insights server
	// side in microseconds.
	RpcExecutionTimeUsecs *int64   `protobuf:"varint,1,opt,name=rpc_execution_time_usecs,json=rpcExecutionTimeUsecs" json:"rpc_execution_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *FlushGlobalDataRet) Reset()         { *m = FlushGlobalDataRet{} }
func (m *FlushGlobalDataRet) String() string { return proto.CompactTextString(m) }
func (*FlushGlobalDataRet) ProtoMessage()    {}
func (*FlushGlobalDataRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{157}
}

func (m *FlushGlobalDataRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlushGlobalDataRet.Unmarshal(m, b)
}
func (m *FlushGlobalDataRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlushGlobalDataRet.Marshal(b, m, deterministic)
}
func (m *FlushGlobalDataRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushGlobalDataRet.Merge(m, src)
}
func (m *FlushGlobalDataRet) XXX_Size() int {
	return xxx_messageInfo_FlushGlobalDataRet.Size(m)
}
func (m *FlushGlobalDataRet) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushGlobalDataRet.DiscardUnknown(m)
}

var xxx_messageInfo_FlushGlobalDataRet proto.InternalMessageInfo

func (m *FlushGlobalDataRet) GetRpcExecutionTimeUsecs() int64 {
	if m != nil && m.RpcExecutionTimeUsecs != nil {
		return *m.RpcExecutionTimeUsecs
	}
	return 0
}

// Proto for supporting file upload from user vms or clusters. This contains
// file metadata and the file binary data.
type FileUpload struct {
	// Required. Name of the entity_type uploading the file.
	// Let's say, the stack_trace (e.g:- cerebro.8879.20170329-155259.stack_trace
	// .txt.gz) of a component is uploaded from the cluster, then the
	// entity_type will be "cluster".
	// Example entity types are "uvm", "cluster".
	EntityType *string `protobuf:"bytes,1,opt,name=entity_type,json=entityType" json:"entity_type,omitempty"`
	// Required. Namespaces / sub-components within a service uploading the file.
	Namespace *string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	// Required. Unique identifier for the file being uploaded.
	FileId *string `protobuf:"bytes,3,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	// Required. Name of the file being uploaded.
	FileName *string `protobuf:"bytes,4,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	// Required. Data of the file being uploaded.
	FileData []byte `protobuf:"bytes,5,opt,name=file_data,json=fileData" json:"file_data,omitempty"`
	// Optional. Version of the file data being uploaded.
	Version *string `protobuf:"bytes,6,opt,name=version" json:"version,omitempty"`
	// Optional. This field represents Content-Encoding Header field in html.
	// https://tools.ietf.org/html/rfc7231#section-3.1.2.2
	ContentEncoding *string `protobuf:"bytes,7,opt,name=content_encoding,json=contentEncoding" json:"content_encoding,omitempty"`
	// Optional. This field represents Content-Type Header field in html.
	// https://www.w3.org/Protocols/rfc1341/4_Content-Type.html
	ContentType *string `protobuf:"bytes,8,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	// Optional. Metadata related to file(s) uploaded.
	Attributes []*AttributeData `protobuf:"bytes,9,rep,name=attributes" json:"attributes,omitempty"`
	// Optional. Time at which file was received.
	ReceivedTimestampUsecs *uint64 `protobuf:"varint,10,opt,name=received_timestamp_usecs,json=receivedTimestampUsecs" json:"received_timestamp_usecs,omitempty"`
	// Optional. Path to uploaded file if file is stored in object store.
	FilePath *string `protobuf:"bytes,11,opt,name=file_path,json=filePath" json:"file_path,omitempty"`
	// Optional. Service or entity type uploading the file. This field will have
	// the same value as entity_type. This new field is added since consumer looks
	// for this exact field name for whitelisting entities.
	EntityTypeName       *string  `protobuf:"bytes,12,opt,name=entity_type_name,json=entityTypeName" json:"entity_type_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileUpload) Reset()         { *m = FileUpload{} }
func (m *FileUpload) String() string { return proto.CompactTextString(m) }
func (*FileUpload) ProtoMessage()    {}
func (*FileUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{158}
}

func (m *FileUpload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileUpload.Unmarshal(m, b)
}
func (m *FileUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileUpload.Marshal(b, m, deterministic)
}
func (m *FileUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileUpload.Merge(m, src)
}
func (m *FileUpload) XXX_Size() int {
	return xxx_messageInfo_FileUpload.Size(m)
}
func (m *FileUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_FileUpload.DiscardUnknown(m)
}

var xxx_messageInfo_FileUpload proto.InternalMessageInfo

func (m *FileUpload) GetEntityType() string {
	if m != nil && m.EntityType != nil {
		return *m.EntityType
	}
	return ""
}

func (m *FileUpload) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *FileUpload) GetFileId() string {
	if m != nil && m.FileId != nil {
		return *m.FileId
	}
	return ""
}

func (m *FileUpload) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *FileUpload) GetFileData() []byte {
	if m != nil {
		return m.FileData
	}
	return nil
}

func (m *FileUpload) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *FileUpload) GetContentEncoding() string {
	if m != nil && m.ContentEncoding != nil {
		return *m.ContentEncoding
	}
	return ""
}

func (m *FileUpload) GetContentType() string {
	if m != nil && m.ContentType != nil {
		return *m.ContentType
	}
	return ""
}

func (m *FileUpload) GetAttributes() []*AttributeData {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *FileUpload) GetReceivedTimestampUsecs() uint64 {
	if m != nil && m.ReceivedTimestampUsecs != nil {
		return *m.ReceivedTimestampUsecs
	}
	return 0
}

func (m *FileUpload) GetFilePath() string {
	if m != nil && m.FilePath != nil {
		return *m.FilePath
	}
	return ""
}

func (m *FileUpload) GetEntityTypeName() string {
	if m != nil && m.EntityTypeName != nil {
		return *m.EntityTypeName
	}
	return ""
}

// Proto for supporting Multiple File Uploads.
type MultiFileUpload struct {
	// Required. ID of the service uploading the files.
	Service *string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	// Required. List of files that are being uploaded.
	Files                []*FileUpload `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MultiFileUpload) Reset()         { *m = MultiFileUpload{} }
func (m *MultiFileUpload) String() string { return proto.CompactTextString(m) }
func (*MultiFileUpload) ProtoMessage()    {}
func (*MultiFileUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebd55d67f778879, []int{159}
}

func (m *MultiFileUpload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiFileUpload.Unmarshal(m, b)
}
func (m *MultiFileUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiFileUpload.Marshal(b, m, deterministic)
}
func (m *MultiFileUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiFileUpload.Merge(m, src)
}
func (m *MultiFileUpload) XXX_Size() int {
	return xxx_messageInfo_MultiFileUpload.Size(m)
}
func (m *MultiFileUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiFileUpload.DiscardUnknown(m)
}

var xxx_messageInfo_MultiFileUpload proto.InternalMessageInfo

func (m *MultiFileUpload) GetService() string {
	if m != nil && m.Service != nil {
		return *m.Service
	}
	return ""
}

func (m *MultiFileUpload) GetFiles() []*FileUpload {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto.RegisterEnum("nutanix.insights.interface.GlobalDataReadConsistency", GlobalDataReadConsistency_name, GlobalDataReadConsistency_value)
	proto.RegisterEnum("nutanix.insights.interface.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterEnum("nutanix.insights.interface.InternalStateId", InternalStateId_name, InternalStateId_value)
	proto.RegisterEnum("nutanix.insights.interface.InsightsErrorProto_Type", InsightsErrorProto_Type_name, InsightsErrorProto_Type_value)
	proto.RegisterEnum("nutanix.insights.interface.InsightsErrorProto_SubType", InsightsErrorProto_SubType_name, InsightsErrorProto_SubType_value)
	proto.RegisterEnum("nutanix.insights.interface.MetricType_Operator", MetricType_Operator_name, MetricType_Operator_value)
	proto.RegisterEnum("nutanix.insights.interface.MetricType_CompressionType", MetricType_CompressionType_name, MetricType_CompressionType_value)
	proto.RegisterEnum("nutanix.insights.interface.MetricType_PiiType", MetricType_PiiType_name, MetricType_PiiType_value)
	proto.RegisterEnum("nutanix.insights.interface.MetricType_MaskType", MetricType_MaskType_name, MetricType_MaskType_value)
	proto.RegisterEnum("nutanix.insights.interface.MetricType_IndexType", MetricType_IndexType_name, MetricType_IndexType_value)
	proto.RegisterEnum("nutanix.insights.interface.MetricType_TtlCalculation", MetricType_TtlCalculation_name, MetricType_TtlCalculation_value)
	proto.RegisterEnum("nutanix.insights.interface.MetricType_Category", MetricType_Category_name, MetricType_Category_value)
	proto.RegisterEnum("nutanix.insights.interface.NestedFieldInfo_ValueType", NestedFieldInfo_ValueType_name, NestedFieldInfo_ValueType_value)
	proto.RegisterEnum("nutanix.insights.interface.NestedFieldInfo_FieldOption", NestedFieldInfo_FieldOption_name, NestedFieldInfo_FieldOption_value)
	proto.RegisterEnum("nutanix.insights.interface.EntityTypeShard_ShardType", EntityTypeShard_ShardType_name, EntityTypeShard_ShardType_value)
	proto.RegisterEnum("nutanix.insights.interface.TypeInfo_ClusterFunctions", TypeInfo_ClusterFunctions_name, TypeInfo_ClusterFunctions_value)
	proto.RegisterEnum("nutanix.insights.interface.Entity_BackupStatus", Entity_BackupStatus_name, Entity_BackupStatus_value)
	proto.RegisterEnum("nutanix.insights.interface.AttributeDataArg_AttributeOperation", AttributeDataArg_AttributeOperation_name, AttributeDataArg_AttributeOperation_value)
	proto.RegisterEnum("nutanix.insights.interface.AttributeOperation_Op", AttributeOperation_Op_name, AttributeOperation_Op_value)
	proto.RegisterEnum("nutanix.insights.interface.Expression_Operator", Expression_Operator_name, Expression_Operator_value)
	proto.RegisterEnum("nutanix.insights.interface.ComparisonExpression_Operator", ComparisonExpression_Operator_name, ComparisonExpression_Operator_value)
	proto.RegisterEnum("nutanix.insights.interface.BooleanExpression_Operator", BooleanExpression_Operator_name, BooleanExpression_Operator_value)
	proto.RegisterEnum("nutanix.insights.interface.QueryGroupBy_GroupByColumnType", QueryGroupBy_GroupByColumnType_name, QueryGroupBy_GroupByColumnType_value)
	proto.RegisterEnum("nutanix.insights.interface.QueryOrderBy_SortOrder", QueryOrderBy_SortOrder_name, QueryOrderBy_SortOrder_value)
	proto.RegisterEnum("nutanix.insights.interface.QueryOrderBy_SortKey", QueryOrderBy_SortKey_name, QueryOrderBy_SortKey_value)
	proto.RegisterEnum("nutanix.insights.interface.Query_FlagTypes", Query_FlagTypes_name, Query_FlagTypes_value)
	proto.RegisterEnum("nutanix.insights.interface.MetricDataDownSamplingInterval_Type", MetricDataDownSamplingInterval_Type_name, MetricDataDownSamplingInterval_Type_value)
	proto.RegisterEnum("nutanix.insights.interface.GetInsightsLeaderStatsArg_Type", GetInsightsLeaderStatsArg_Type_name, GetInsightsLeaderStatsArg_Type_value)
	proto.RegisterEnum("nutanix.insights.interface.EntityWatchCondition_EntityWatchType", EntityWatchCondition_EntityWatchType_name, EntityWatchCondition_EntityWatchType_value)
	proto.RegisterEnum("nutanix.insights.interface.MetricWatchCondition_MetricWatchType", MetricWatchCondition_MetricWatchType_name, MetricWatchCondition_MetricWatchType_value)
	proto.RegisterEnum("nutanix.insights.interface.MetricWatchCondition_WatchChange_ChangeType", MetricWatchCondition_WatchChange_ChangeType_name, MetricWatchCondition_WatchChange_ChangeType_value)
	proto.RegisterEnum("nutanix.insights.interface.EntitySchemaWatchCondition_SchemaWatchType", EntitySchemaWatchCondition_SchemaWatchType_name, EntitySchemaWatchCondition_SchemaWatchType_value)
	proto.RegisterEnum("nutanix.insights.interface.Watch_WatchCategory", Watch_WatchCategory_name, Watch_WatchCategory_value)
	proto.RegisterEnum("nutanix.insights.interface.Watch_WatchPriority", Watch_WatchPriority_name, Watch_WatchPriority_value)
	proto.RegisterEnum("nutanix.insights.interface.WatchClientProto_ResetWatchClientOnOperations", WatchClientProto_ResetWatchClientOnOperations_name, WatchClientProto_ResetWatchClientOnOperations_value)
	proto.RegisterEnum("nutanix.insights.interface.LogCollectorPayload_CompressionType", LogCollectorPayload_CompressionType_name, LogCollectorPayload_CompressionType_value)
	proto.RegisterEnum("nutanix.insights.interface.LogCollectorPayload_LogType", LogCollectorPayload_LogType_name, LogCollectorPayload_LogType_value)
	proto.RegisterType((*InsightsErrorProto)(nil), "nutanix.insights.interface.InsightsErrorProto")
	proto.RegisterType((*GetMasterLocationArg)(nil), "nutanix.insights.interface.GetMasterLocationArg")
	proto.RegisterType((*GetMasterLocationRet)(nil), "nutanix.insights.interface.GetMasterLocationRet")
	proto.RegisterType((*GetNodeMapEntryProtoArg)(nil), "nutanix.insights.interface.GetNodeMapEntryProtoArg")
	proto.RegisterType((*GetNodeMapEntryProtoRet)(nil), "nutanix.insights.interface.GetNodeMapEntryProtoRet")
	proto.RegisterType((*DataValue)(nil), "nutanix.insights.interface.DataValue")
	proto.RegisterType((*DataValue_StrList)(nil), "nutanix.insights.interface.DataValue.StrList")
	proto.RegisterType((*DataValue_Int64List)(nil), "nutanix.insights.interface.DataValue.Int64List")
	proto.RegisterType((*DataValue_BoolList)(nil), "nutanix.insights.interface.DataValue.BoolList")
	proto.RegisterType((*DataValue_UInt64List)(nil), "nutanix.insights.interface.DataValue.UInt64List")
	proto.RegisterType((*DataValue_FloatList)(nil), "nutanix.insights.interface.DataValue.FloatList")
	proto.RegisterType((*DataValue_DoubleList)(nil), "nutanix.insights.interface.DataValue.DoubleList")
	proto.RegisterType((*DataValue_BytesList)(nil), "nutanix.insights.interface.DataValue.BytesList")
	proto.RegisterType((*DataValue_Histogram)(nil), "nutanix.insights.interface.DataValue.Histogram")
	proto.RegisterType((*TimeValuePair)(nil), "nutanix.insights.interface.TimeValuePair")
	proto.RegisterType((*MetricNamespacePair)(nil), "nutanix.insights.interface.MetricNamespacePair")
	proto.RegisterType((*MetricData)(nil), "nutanix.insights.interface.MetricData")
	proto.RegisterType((*MetricType)(nil), "nutanix.insights.interface.MetricType")
	proto.RegisterType((*NestedFieldInfo)(nil), "nutanix.insights.interface.NestedFieldInfo")
	proto.RegisterType((*NestedFieldInfo_UnionNestedFieldInfo)(nil), "nutanix.insights.interface.NestedFieldInfo.UnionNestedFieldInfo")
	proto.RegisterType((*GenericNestedProto)(nil), "nutanix.insights.interface.GenericNestedProto")
	proto.RegisterType((*EntityTypeShard)(nil), "nutanix.insights.interface.EntityTypeShard")
	proto.RegisterType((*TypeInfo)(nil), "nutanix.insights.interface.TypeInfo")
	proto.RegisterType((*TypeInfo_ReplicationControl)(nil), "nutanix.insights.interface.TypeInfo.ReplicationControl")
	proto.RegisterType((*TypeInfo_BackupReplicationControl)(nil), "nutanix.insights.interface.TypeInfo.BackupReplicationControl")
	proto.RegisterType((*EntityType)(nil), "nutanix.insights.interface.EntityType")
	proto.RegisterType((*EntityTypes)(nil), "nutanix.insights.interface.EntityTypes")
	proto.RegisterType((*EntityTypeInfo)(nil), "nutanix.insights.interface.EntityTypeInfo")
	proto.RegisterType((*RegisterEntityTypesArg)(nil), "nutanix.insights.interface.RegisterEntityTypesArg")
	proto.RegisterType((*RegisterEntityTypesRet)(nil), "nutanix.insights.interface.RegisterEntityTypesRet")
	proto.RegisterType((*RegisterEntityTypesRet_RetElem)(nil), "nutanix.insights.interface.RegisterEntityTypesRet.RetElem")
	proto.RegisterType((*GetEntityTypesArg)(nil), "nutanix.insights.interface.GetEntityTypesArg")
	proto.RegisterType((*GetEntityTypesRet)(nil), "nutanix.insights.interface.GetEntityTypesRet")
	proto.RegisterType((*AttributeData)(nil), "nutanix.insights.interface.AttributeData")
	proto.RegisterType((*NameTimeValuePair)(nil), "nutanix.insights.interface.NameTimeValuePair")
	proto.RegisterType((*EntityGuid)(nil), "nutanix.insights.interface.EntityGuid")
	proto.RegisterType((*ShardGuid)(nil), "nutanix.insights.interface.ShardGuid")
	proto.RegisterType((*EntityWithMetric)(nil), "nutanix.insights.interface.EntityWithMetric")
	proto.RegisterType((*Entity)(nil), "nutanix.insights.interface.Entity")
	proto.RegisterType((*Entity_BackupInfo)(nil), "nutanix.insights.interface.Entity.BackupInfo")
	proto.RegisterType((*EntityNamespace)(nil), "nutanix.insights.interface.EntityNamespace")
	proto.RegisterType((*SyncBarrierInfo)(nil), "nutanix.insights.interface.SyncBarrierInfo")
	proto.RegisterType((*EntityList)(nil), "nutanix.insights.interface.EntityList")
	proto.RegisterType((*AttributeDataArg)(nil), "nutanix.insights.interface.AttributeDataArg")
	proto.RegisterType((*AttributeOperation)(nil), "nutanix.insights.interface.AttributeOperation")
	proto.RegisterType((*EntityOperations)(nil), "nutanix.insights.interface.EntityOperations")
	proto.RegisterType((*EntityOperationsList)(nil), "nutanix.insights.interface.EntityOperationsList")
	proto.RegisterType((*UpdateEntityArg)(nil), "nutanix.insights.interface.UpdateEntityArg")
	proto.RegisterType((*UpdateEntityRet)(nil), "nutanix.insights.interface.UpdateEntityRet")
	proto.RegisterType((*BatchUpdateEntitiesArg)(nil), "nutanix.insights.interface.BatchUpdateEntitiesArg")
	proto.RegisterType((*BatchUpdateEntitiesRet)(nil), "nutanix.insights.interface.BatchUpdateEntitiesRet")
	proto.RegisterType((*BatchUpdateEntitiesRet_RetElem)(nil), "nutanix.insights.interface.BatchUpdateEntitiesRet.RetElem")
	proto.RegisterType((*AttachEntityArg)(nil), "nutanix.insights.interface.AttachEntityArg")
	proto.RegisterType((*AttachEntityRet)(nil), "nutanix.insights.interface.AttachEntityRet")
	proto.RegisterType((*RegisterMetricTypesArg)(nil), "nutanix.insights.interface.RegisterMetricTypesArg")
	proto.RegisterType((*RegisterMetricTypesRet)(nil), "nutanix.insights.interface.RegisterMetricTypesRet")
	proto.RegisterType((*RegisterMetricTypesRet_RetElem)(nil), "nutanix.insights.interface.RegisterMetricTypesRet.RetElem")
	proto.RegisterType((*UnregisterMetricTypesArg)(nil), "nutanix.insights.interface.UnregisterMetricTypesArg")
	proto.RegisterType((*UnregisterMetricTypesRet)(nil), "nutanix.insights.interface.UnregisterMetricTypesRet")
	proto.RegisterType((*GetMetricTypesArg)(nil), "nutanix.insights.interface.GetMetricTypesArg")
	proto.RegisterType((*GetMetricTypesRet)(nil), "nutanix.insights.interface.GetMetricTypesRet")
	proto.RegisterType((*DeleteEntityArg)(nil), "nutanix.insights.interface.DeleteEntityArg")
	proto.RegisterType((*DeleteEntityRet)(nil), "nutanix.insights.interface.DeleteEntityRet")
	proto.RegisterType((*BatchDeleteEntitiesArg)(nil), "nutanix.insights.interface.BatchDeleteEntitiesArg")
	proto.RegisterType((*BatchDeleteEntitiesRet)(nil), "nutanix.insights.interface.BatchDeleteEntitiesRet")
	proto.RegisterType((*BatchDeleteEntitiesRet_RetElem)(nil), "nutanix.insights.interface.BatchDeleteEntitiesRet.RetElem")
	proto.RegisterType((*DetachEntityArg)(nil), "nutanix.insights.interface.DetachEntityArg")
	proto.RegisterType((*DetachEntityRet)(nil), "nutanix.insights.interface.DetachEntityRet")
	proto.RegisterType((*SyncUpdateEntityArg)(nil), "nutanix.insights.interface.SyncUpdateEntityArg")
	proto.RegisterType((*SyncUpdateEntityRet)(nil), "nutanix.insights.interface.SyncUpdateEntityRet")
	proto.RegisterType((*SyncUpdateEntityRet_RetStatus)(nil), "nutanix.insights.interface.SyncUpdateEntityRet.RetStatus")
	proto.RegisterType((*GetEntitiesArg)(nil), "nutanix.insights.interface.GetEntitiesArg")
	proto.RegisterType((*GetEntitiesRet)(nil), "nutanix.insights.interface.GetEntitiesRet")
	proto.RegisterType((*GetEntitiesTrailArg)(nil), "nutanix.insights.interface.GetEntitiesTrailArg")
	proto.RegisterType((*GetEntitiesTrailRet)(nil), "nutanix.insights.interface.GetEntitiesTrailRet")
	proto.RegisterType((*LeafExpression)(nil), "nutanix.insights.interface.LeafExpression")
	proto.RegisterType((*Expression)(nil), "nutanix.insights.interface.Expression")
	proto.RegisterType((*ComparisonExpression)(nil), "nutanix.insights.interface.ComparisonExpression")
	proto.RegisterType((*BooleanExpression)(nil), "nutanix.insights.interface.BooleanExpression")
	proto.RegisterType((*QueryAggregateColumn)(nil), "nutanix.insights.interface.QueryAggregateColumn")
	proto.RegisterType((*QueryRawColumn)(nil), "nutanix.insights.interface.QueryRawColumn")
	proto.RegisterType((*QueryGroupBy)(nil), "nutanix.insights.interface.QueryGroupBy")
	proto.RegisterType((*EntityWithMetricAndLookup)(nil), "nutanix.insights.interface.EntityWithMetricAndLookup")
	proto.RegisterType((*LookupQueryResult)(nil), "nutanix.insights.interface.LookupQueryResult")
	proto.RegisterType((*QueryGroupResult)(nil), "nutanix.insights.interface.QueryGroupResult")
	proto.RegisterType((*QueryGroupResult_SummaryResult)(nil), "nutanix.insights.interface.QueryGroupResult.SummaryResult")
	proto.RegisterType((*QueryOrderBy)(nil), "nutanix.insights.interface.QueryOrderBy")
	proto.RegisterType((*QueryLimit)(nil), "nutanix.insights.interface.QueryLimit")
	proto.RegisterType((*QueryCursor)(nil), "nutanix.insights.interface.QueryCursor")
	proto.RegisterType((*Query)(nil), "nutanix.insights.interface.Query")
	proto.RegisterType((*Query_CursorQueryInfo)(nil), "nutanix.insights.interface.Query.CursorQueryInfo")
	proto.RegisterType((*HashedRange)(nil), "nutanix.insights.interface.HashedRange")
	proto.RegisterType((*QueryProperties)(nil), "nutanix.insights.interface.QueryProperties")
	proto.RegisterType((*GetEntitiesWithMetricsArg)(nil), "nutanix.insights.interface.GetEntitiesWithMetricsArg")
	proto.RegisterType((*GetEntitiesWithMetricsRet)(nil), "nutanix.insights.interface.GetEntitiesWithMetricsRet")
	proto.RegisterType((*GetEntitiesWithMetricsRet_DownSamplingParameters)(nil), "nutanix.insights.interface.GetEntitiesWithMetricsRet.DownSamplingParameters")
	proto.RegisterType((*SpotLightSearchArg)(nil), "nutanix.insights.interface.SpotLightSearchArg")
	proto.RegisterType((*SpotLightSearchArg_AttributeRelevanceInfo)(nil), "nutanix.insights.interface.SpotLightSearchArg.AttributeRelevanceInfo")
	proto.RegisterType((*SpotLightSearchArg_EntityRelevanceInfo)(nil), "nutanix.insights.interface.SpotLightSearchArg.EntityRelevanceInfo")
	proto.RegisterType((*SpotLightSearchArg_SearchOnEntityType)(nil), "nutanix.insights.interface.SpotLightSearchArg.SearchOnEntityType")
	proto.RegisterType((*SpotLightSearchRet)(nil), "nutanix.insights.interface.SpotLightSearchRet")
	proto.RegisterType((*BucketizedMetricDataSet)(nil), "nutanix.insights.interface.BucketizedMetricDataSet")
	proto.RegisterType((*MetricDataSet)(nil), "nutanix.insights.interface.MetricDataSet")
	proto.RegisterType((*MetricDataDownSamplingInterval)(nil), "nutanix.insights.interface.MetricDataDownSamplingInterval")
	proto.RegisterType((*MetricDataDownSampled)(nil), "nutanix.insights.interface.MetricDataDownSampled")
	proto.RegisterType((*MetricDataDB)(nil), "nutanix.insights.interface.MetricDataDB")
	proto.RegisterType((*MetricDataDBList)(nil), "nutanix.insights.interface.MetricDataDBList")
	proto.RegisterType((*MetricDataSample)(nil), "nutanix.insights.interface.MetricDataSample")
	proto.RegisterType((*MetricDataSample_Row)(nil), "nutanix.insights.interface.MetricDataSample.Row")
	proto.RegisterType((*PutMetricDataArg)(nil), "nutanix.insights.interface.PutMetricDataArg")
	proto.RegisterType((*PutMetricDataRet)(nil), "nutanix.insights.interface.PutMetricDataRet")
	proto.RegisterType((*PutMetricDataRet_RetElem)(nil), "nutanix.insights.interface.PutMetricDataRet.RetElem")
	proto.RegisterType((*GetMetricDataArg)(nil), "nutanix.insights.interface.GetMetricDataArg")
	proto.RegisterType((*GetMetricDataRet)(nil), "nutanix.insights.interface.GetMetricDataRet")
	proto.RegisterType((*DerivedMetricType)(nil), "nutanix.insights.interface.DerivedMetricType")
	proto.RegisterType((*StoredDerivedMetricInfo)(nil), "nutanix.insights.interface.StoredDerivedMetricInfo")
	proto.RegisterType((*DerivedMetricRPCRetElem)(nil), "nutanix.insights.interface.DerivedMetricRPCRetElem")
	proto.RegisterType((*RegisterDerivedMetricTypesArg)(nil), "nutanix.insights.interface.RegisterDerivedMetricTypesArg")
	proto.RegisterType((*RegisterDerivedMetricTypesRet)(nil), "nutanix.insights.interface.RegisterDerivedMetricTypesRet")
	proto.RegisterType((*UnregisterDerivedMetricTypesArg)(nil), "nutanix.insights.interface.UnregisterDerivedMetricTypesArg")
	proto.RegisterType((*UnregisterDerivedMetricTypesArg_MetricTypeInfo)(nil), "nutanix.insights.interface.UnregisterDerivedMetricTypesArg.MetricTypeInfo")
	proto.RegisterType((*UnregisterDerivedMetricTypesRet)(nil), "nutanix.insights.interface.UnregisterDerivedMetricTypesRet")
	proto.RegisterType((*GetDerivedMetricTypesArg)(nil), "nutanix.insights.interface.GetDerivedMetricTypesArg")
	proto.RegisterType((*GetDerivedMetricTypesRet)(nil), "nutanix.insights.interface.GetDerivedMetricTypesRet")
	proto.RegisterType((*GetClusterReplicationStateArg)(nil), "nutanix.insights.interface.GetClusterReplicationStateArg")
	proto.RegisterType((*SyncTimestampsInfo)(nil), "nutanix.insights.interface.SyncTimestampsInfo")
	proto.RegisterType((*GetClusterReplicationStateRet)(nil), "nutanix.insights.interface.GetClusterReplicationStateRet")
	proto.RegisterType((*GetInsightsLeaderStatsArg)(nil), "nutanix.insights.interface.GetInsightsLeaderStatsArg")
	proto.RegisterType((*StatsFormat)(nil), "nutanix.insights.interface.StatsFormat")
	proto.RegisterType((*GetInsightsLeaderStatsRet)(nil), "nutanix.insights.interface.GetInsightsLeaderStatsRet")
	proto.RegisterType((*RpcLogEntry)(nil), "nutanix.insights.interface.RpcLogEntry")
	proto.RegisterType((*WatchSubject)(nil), "nutanix.insights.interface.WatchSubject")
	proto.RegisterType((*EntityWatchCondition)(nil), "nutanix.insights.interface.EntityWatchCondition")
	proto.RegisterType((*MetricWatchCondition)(nil), "nutanix.insights.interface.MetricWatchCondition")
	proto.RegisterType((*MetricWatchCondition_WatchExpression)(nil), "nutanix.insights.interface.MetricWatchCondition.WatchExpression")
	proto.RegisterType((*MetricWatchCondition_WatchChange)(nil), "nutanix.insights.interface.MetricWatchCondition.WatchChange")
	proto.RegisterType((*EntitySchemaWatchCondition)(nil), "nutanix.insights.interface.EntitySchemaWatchCondition")
	proto.RegisterType((*Watch)(nil), "nutanix.insights.interface.Watch")
	proto.RegisterType((*EntitySchemaChange)(nil), "nutanix.insights.interface.EntitySchemaChange")
	proto.RegisterType((*FiredWatch)(nil), "nutanix.insights.interface.FiredWatch")
	proto.RegisterType((*FiredWatch_ChangedData)(nil), "nutanix.insights.interface.FiredWatch.ChangedData")
	proto.RegisterType((*WatchClientProto)(nil), "nutanix.insights.interface.WatchClientProto")
	proto.RegisterType((*RegisterWatchClientArg)(nil), "nutanix.insights.interface.RegisterWatchClientArg")
	proto.RegisterType((*RegisterWatchClientRet)(nil), "nutanix.insights.interface.RegisterWatchClientRet")
	proto.RegisterType((*UnregisterWatchClientArg)(nil), "nutanix.insights.interface.UnregisterWatchClientArg")
	proto.RegisterType((*UnregisterWatchClientRet)(nil), "nutanix.insights.interface.UnregisterWatchClientRet")
	proto.RegisterType((*RegisterWatchArg)(nil), "nutanix.insights.interface.RegisterWatchArg")
	proto.RegisterType((*RegisterWatchRet)(nil), "nutanix.insights.interface.RegisterWatchRet")
	proto.RegisterType((*RegisterWatchRet_RetElem)(nil), "nutanix.insights.interface.RegisterWatchRet.RetElem")
	proto.RegisterType((*UnregisterWatchArg)(nil), "nutanix.insights.interface.UnregisterWatchArg")
	proto.RegisterType((*UnregisterWatchRet)(nil), "nutanix.insights.interface.UnregisterWatchRet")
	proto.RegisterType((*UnregisterWatchRet_RetElem)(nil), "nutanix.insights.interface.UnregisterWatchRet.RetElem")
	proto.RegisterType((*GetFiredWatchListArg)(nil), "nutanix.insights.interface.GetFiredWatchListArg")
	proto.RegisterType((*GetFiredWatchListRet)(nil), "nutanix.insights.interface.GetFiredWatchListRet")
	proto.RegisterType((*MetadataEntry)(nil), "nutanix.insights.interface.MetadataEntry")
	proto.RegisterType((*UnstructuredData)(nil), "nutanix.insights.interface.UnstructuredData")
	proto.RegisterType((*InsightsCollector)(nil), "nutanix.insights.interface.InsightsCollector")
	proto.RegisterType((*NodeMapEntryProto)(nil), "nutanix.insights.interface.NodeMapEntryProto")
	proto.RegisterType((*NodeMapEntryProto_Node)(nil), "nutanix.insights.interface.NodeMapEntryProto.Node")
	proto.RegisterType((*Event)(nil), "nutanix.insights.interface.Event")
	proto.RegisterType((*PutEventArg)(nil), "nutanix.insights.interface.PutEventArg")
	proto.RegisterType((*PutEventRet)(nil), "nutanix.insights.interface.PutEventRet")
	proto.RegisterType((*PutEventRet_RetElem)(nil), "nutanix.insights.interface.PutEventRet.RetElem")
	proto.RegisterType((*LogMessage)(nil), "nutanix.insights.interface.LogMessage")
	proto.RegisterType((*LogMessageList)(nil), "nutanix.insights.interface.LogMessageList")
	proto.RegisterType((*LogCollectorPayloadStats)(nil), "nutanix.insights.interface.LogCollectorPayloadStats")
	proto.RegisterType((*LogCollectorPayload)(nil), "nutanix.insights.interface.LogCollectorPayload")
	proto.RegisterType((*PutLogArg)(nil), "nutanix.insights.interface.PutLogArg")
	proto.RegisterType((*PutLogRet)(nil), "nutanix.insights.interface.PutLogRet")
	proto.RegisterType((*PutLogRet_RetElem)(nil), "nutanix.insights.interface.PutLogRet.RetElem")
	proto.RegisterType((*GetAllShardIdsArg)(nil), "nutanix.insights.interface.GetAllShardIdsArg")
	proto.RegisterType((*GetAllShardIdsRet)(nil), "nutanix.insights.interface.GetAllShardIdsRet")
	proto.RegisterType((*ReplicateEntitiesArg)(nil), "nutanix.insights.interface.ReplicateEntitiesArg")
	proto.RegisterType((*ReplicateEntityStatus)(nil), "nutanix.insights.interface.ReplicateEntityStatus")
	proto.RegisterType((*ReplicateEntitiesRet)(nil), "nutanix.insights.interface.ReplicateEntitiesRet")
	proto.RegisterType((*StateData)(nil), "nutanix.insights.interface.StateData")
	proto.RegisterType((*NodeState)(nil), "nutanix.insights.interface.NodeState")
	proto.RegisterType((*GetInternalStateArg)(nil), "nutanix.insights.interface.GetInternalStateArg")
	proto.RegisterType((*GetInternalStateRet)(nil), "nutanix.insights.interface.GetInternalStateRet")
	proto.RegisterType((*WriteLockGlobalDataArg)(nil), "nutanix.insights.interface.WriteLockGlobalDataArg")
	proto.RegisterType((*WriteLockGlobalDataRet)(nil), "nutanix.insights.interface.WriteLockGlobalDataRet")
	proto.RegisterType((*WriteUnlockGlobalDataArg)(nil), "nutanix.insights.interface.WriteUnlockGlobalDataArg")
	proto.RegisterType((*WriteUnlockGlobalDataRet)(nil), "nutanix.insights.interface.WriteUnlockGlobalDataRet")
	proto.RegisterType((*TestBufferArg)(nil), "nutanix.insights.interface.TestBufferArg")
	proto.RegisterType((*TestBufferRet)(nil), "nutanix.insights.interface.TestBufferRet")
	proto.RegisterType((*GlobalDataStageInfoProto)(nil), "nutanix.insights.interface.GlobalDataStageInfoProto")
	proto.RegisterType((*InitGlobalDataStagingArg)(nil), "nutanix.insights.interface.InitGlobalDataStagingArg")
	proto.RegisterType((*InitGlobalDataStagingRet)(nil), "nutanix.insights.interface.InitGlobalDataStagingRet")
	proto.RegisterType((*CommitGlobalDataStagingArg)(nil), "nutanix.insights.interface.CommitGlobalDataStagingArg")
	proto.RegisterType((*CommitGlobalDataStagingRet)(nil), "nutanix.insights.interface.CommitGlobalDataStagingRet")
	proto.RegisterType((*FlushGlobalDataArg)(nil), "nutanix.insights.interface.FlushGlobalDataArg")
	proto.RegisterType((*FlushGlobalDataRet)(nil), "nutanix.insights.interface.FlushGlobalDataRet")
	proto.RegisterType((*FileUpload)(nil), "nutanix.insights.interface.FileUpload")
	proto.RegisterType((*MultiFileUpload)(nil), "nutanix.insights.interface.MultiFileUpload")
}

func init() {
	proto.RegisterFile("insights/insights_interface/insights_interface.proto", fileDescriptor_0ebd55d67f778879)
}

var fileDescriptor_0ebd55d67f778879 = []byte{
	// 14810 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0xbd, 0x6b, 0x90, 0x24, 0xc9,
	0x59, 0x20, 0xd8, 0x91, 0x59, 0xd5, 0x95, 0xf9, 0xd5, 0x23, 0xa3, 0xbc, 0xde, 0xd9, 0xcf, 0x89,
	0x99, 0xd1, 0xf4, 0xbc, 0x6a, 0x7a, 0x5e, 0x3d, 0x9a, 0x42, 0xa3, 0x51, 0x75, 0x3d, 0xba, 0x6b,
	0xa6, 0x5e, 0x8a, 0xea, 0x56, 0x4b, 0x42, 0x52, 0x2a, 0x2a, 0xc3, 0x2b, 0x2b, 0x26, 0x23, 0x23,
	0x72, 0x22, 0x22, 0xbb, 0xba, 0x06, 0x13, 0x26, 0xec, 0x90, 0x4e, 0x12, 0x60, 0xc7, 0xdd, 0xd9,
	0x61, 0x77, 0x27, 0x1e, 0xc7, 0xf1, 0x38, 0x38, 0xe3, 0x30, 0xb8, 0x33, 0x71, 0xdc, 0x71, 0xe8,
	0xe0, 0x80, 0x63, 0x77, 0xb5, 0x8b, 0xad, 0x80, 0x05, 0xc1, 0x62, 0xb0, 0xb6, 0xb6, 0xc6, 0x02,
	0x8b, 0x58, 0x10, 0x2f, 0x49, 0x3c, 0x76, 0xcd, 0x3f, 0xf7, 0x88, 0xf0, 0x88, 0x8c, 0x7c, 0x55,
	0x75, 0x4b, 0x18, 0x7f, 0xaa, 0x32, 0xdc, 0x3f, 0xff, 0xdc, 0xfd, 0xf3, 0xcf, 0x3f, 0xff, 0x3e,
	0xf7, 0xcf, 0x3f, 0x87, 0x17, 0x2c, 0xc7, 0xb7, 0x6a, 0x87, 0x81, 0xff, 0x4c, 0xf8, 0xa3, 0x62,
	0x39, 0x01, 0xf5, 0x0e, 0x8c, 0x2a, 0xcd, 0x48, 0x5a, 0x6c, 0x7a, 0x6e, 0xe0, 0x92, 0xb2, 0xd3,
	0x0a, 0x0c, 0xc7, 0xba, 0xb7, 0x18, 0x42, 0x2c, 0x46, 0x10, 0xe5, 0x72, 0x2b, 0xb0, 0xec, 0x67,
	0x7c, 0xbb, 0xb2, 0xdf, 0x3a, 0xf0, 0x9f, 0x71, 0x68, 0xf0, 0x8c, 0xd7, 0xac, 0xf2, 0x72, 0xda,
	0x8f, 0x3e, 0x0a, 0x64, 0x43, 0x14, 0x59, 0xf3, 0x3c, 0xd7, 0xdb, 0x45, 0x74, 0x1f, 0x00, 0xa0,
	0xec, 0xab, 0x12, 0x1c, 0x37, 0xe9, 0xbc, 0x72, 0x59, 0xb9, 0x32, 0xf1, 0xdc, 0xf3, 0x8b, 0x9d,
	0xeb, 0x58, 0x6c, 0xc7, 0xb1, 0x78, 0xeb, 0xb8, 0x49, 0x97, 0x0a, 0xf5, 0x6d, 0x17, 0xd3, 0xf4,
	0x22, 0x22, 0x64, 0x89, 0xe4, 0x61, 0x18, 0xe7, 0xd8, 0x4d, 0x1a, 0x18, 0x96, 0xed, 0xcf, 0xe7,
	0x2e, 0x2b, 0x57, 0x8a, 0xfa, 0x18, 0x26, 0xae, 0xf2, 0x34, 0x42, 0x61, 0xc2, 0x6f, 0xed, 0x57,
	0xa4, 0x66, 0xe4, 0xb1, 0x19, 0xd7, 0x06, 0x6c, 0xc6, 0x5e, 0x6b, 0x1f, 0x5b, 0x32, 0x52, 0xdf,
	0x76, 0x83, 0x3d, 0x1a, 0xe8, 0x63, 0x7e, 0x6b, 0x7f, 0x2d, 0x6c, 0x8b, 0xf6, 0x27, 0x2a, 0x0c,
	0x61, 0xa3, 0xc6, 0x20, 0x6a, 0xab, 0x7a, 0x06, 0xbf, 0x6e, 0x3b, 0x75, 0xc7, 0x3d, 0x72, 0x54,
	0x85, 0x8c, 0x43, 0xb1, 0xbe, 0x62, 0x38, 0x55, 0x6a, 0x53, 0x53, 0xcd, 0x61, 0xe6, 0x2d, 0xab,
	0x41, 0xdd, 0x56, 0xa0, 0xe6, 0xc9, 0x14, 0x94, 0xea, 0xb7, 0x3c, 0xc3, 0xf1, 0x9b, 0xae, 0x17,
	0xf0, 0xf2, 0x43, 0x04, 0xe0, 0x6c, 0x5d, 0xa7, 0x81, 0x77, 0xac, 0x0e, 0x13, 0x02, 0x13, 0xf5,
	0x0d, 0xd6, 0x44, 0xc7, 0xb0, 0x79, 0xfe, 0x59, 0xa2, 0xc2, 0x58, 0xfd, 0xb6, 0x63, 0xdc, 0x35,
	0x2c, 0xdb, 0xd8, 0xb7, 0xa9, 0x3a, 0x42, 0x2e, 0xc0, 0x42, 0x7d, 0xdb, 0x75, 0x56, 0x0c, 0xff,
	0x76, 0xd3, 0x34, 0x02, 0xba, 0xee, 0x7a, 0x2b, 0x86, 0xbf, 0xe6, 0x04, 0x56, 0x70, 0xac, 0x16,
	0x30, 0x5b, 0xce, 0xe3, 0xa0, 0x22, 0xbb, 0x48, 0x66, 0x81, 0xd4, 0x37, 0x9c, 0xaa, 0xeb, 0x79,
	0xb4, 0x1a, 0xac, 0x18, 0xfe, 0x7b, 0x0c, 0xbb, 0x45, 0x55, 0x20, 0x17, 0xa1, 0x2c, 0xa5, 0x7b,
	0xd4, 0x08, 0xa8, 0xc9, 0x9a, 0xee, 0x07, 0x46, 0xa3, 0xa9, 0x8e, 0x62, 0x57, 0x76, 0x0d, 0x2f,
	0xb0, 0x0c, 0x5b, 0x1d, 0x23, 0xe7, 0x61, 0xbe, 0xce, 0x51, 0x32, 0x92, 0x6c, 0xbb, 0x81, 0x4e,
	0x6b, 0x96, 0x1f, 0x50, 0x8f, 0x9a, 0xea, 0x38, 0xd1, 0xe0, 0x22, 0x83, 0xa5, 0x4e, 0xd0, 0x09,
	0x66, 0x82, 0x3c, 0x04, 0x17, 0xea, 0x7b, 0x87, 0x86, 0x67, 0x76, 0x02, 0x29, 0x61, 0x25, 0x5b,
	0x34, 0xf0, 0xac, 0x6a, 0x7b, 0xae, 0x4a, 0x66, 0x60, 0x52, 0x34, 0x61, 0xdb, 0x0d, 0x76, 0x3d,
	0xea, 0x53, 0x27, 0x50, 0x27, 0x71, 0x04, 0xb6, 0xdd, 0x60, 0xdd, 0x6d, 0x39, 0xa6, 0x4a, 0xc8,
	0x65, 0x38, 0x5f, 0x5f, 0x0e, 0x02, 0xcf, 0xda, 0x6f, 0x05, 0x74, 0xab, 0x65, 0x07, 0x56, 0xd3,
	0xa6, 0xab, 0xf4, 0xc0, 0x72, 0xac, 0xc0, 0x72, 0x1d, 0x75, 0x0a, 0xf1, 0xe8, 0xd4, 0xa7, 0xc1,
	0x1d, 0x23, 0xa8, 0x1e, 0xae, 0xd8, 0x16, 0xc3, 0x33, 0x9d, 0x2c, 0xb8, 0xe1, 0xec, 0xb6, 0x02,
	0xde, 0x94, 0x55, 0x23, 0x30, 0xf4, 0xdd, 0x15, 0x75, 0x46, 0x6a, 0xde, 0x86, 0xc3, 0xa9, 0xcd,
	0x9b, 0xc3, 0x72, 0x67, 0x11, 0xed, 0x86, 0x73, 0xd7, 0xb0, 0x2d, 0x89, 0x8c, 0x73, 0xe4, 0x1c,
	0xcc, 0xd5, 0xb1, 0xa2, 0x65, 0xdb, 0xa3, 0x86, 0x79, 0x2c, 0x75, 0x69, 0x1e, 0x19, 0x44, 0xe0,
	0xa0, 0x86, 0xb9, 0xe3, 0xd8, 0xc7, 0xea, 0x02, 0x12, 0x4a, 0x6a, 0x5a, 0x7b, 0xb9, 0x32, 0x99,
	0x83, 0x29, 0x0e, 0x92, 0xa4, 0xd1, 0x39, 0x72, 0x09, 0xce, 0xc9, 0x65, 0x6f, 0x3b, 0xf4, 0x5e,
	0x93, 0x56, 0x03, 0x6a, 0xee, 0x05, 0x46, 0x40, 0xd5, 0xf3, 0xe4, 0x11, 0xb8, 0x5c, 0x5f, 0xa5,
	0x9e, 0x75, 0x97, 0x9a, 0x61, 0x57, 0xda, 0x7a, 0x7a, 0x01, 0xa1, 0x44, 0x5f, 0x10, 0xdb, 0x86,
	0xb9, 0xee, 0x7a, 0xb7, 0x1d, 0x0f, 0xab, 0xf2, 0x0c, 0x24, 0xe4, 0x45, 0xf2, 0x18, 0x3c, 0x5c,
	0x8f, 0x4b, 0xae, 0x7a, 0x6e, 0xb3, 0x49, 0xcd, 0xeb, 0xc7, 0x3a, 0x0d, 0xa8, 0xc3, 0x40, 0x76,
	0x5d, 0xdb, 0xaa, 0x1e, 0xab, 0x97, 0x90, 0x06, 0x11, 0xab, 0x6d, 0x38, 0x55, 0xc3, 0x73, 0x10,
	0xc7, 0x86, 0xa9, 0x5e, 0x26, 0xf3, 0x30, 0x2d, 0x68, 0x20, 0x7a, 0xba, 0x76, 0xcf, 0xf2, 0x03,
	0x5f, 0x7d, 0x08, 0xf1, 0x6f, 0x53, 0x3f, 0xa0, 0xe6, 0xba, 0x45, 0x6d, 0x73, 0xd5, 0x62, 0xc5,
	0x39, 0xe1, 0xfd, 0x6d, 0x37, 0x58, 0xb6, 0x6d, 0xf7, 0x88, 0x9a, 0xaa, 0x86, 0x33, 0x40, 0xea,
	0x75, 0x92, 0x28, 0x0f, 0x93, 0x69, 0x50, 0xeb, 0xb7, 0xa8, 0x63, 0x38, 0xc1, 0x86, 0xb9, 0x72,
	0x68, 0x38, 0x35, 0x6a, 0xaa, 0x8f, 0x60, 0xa3, 0x78, 0xbd, 0x1c, 0xe5, 0x4e, 0x2b, 0xd8, 0x39,
	0xd8, 0xf1, 0x4c, 0xea, 0xa9, 0x8f, 0x92, 0x6b, 0xf0, 0x5c, 0x7d, 0xa5, 0xe5, 0x31, 0x8e, 0x46,
	0xca, 0xc5, 0xd5, 0xad, 0xbb, 0xde, 0xda, 0x5d, 0xab, 0x1a, 0xb0, 0xb9, 0x19, 0x73, 0x32, 0xd6,
	0xae, 0xbe, 0x8d, 0x94, 0x61, 0xb6, 0xbe, 0xdc, 0xd8, 0xb7, 0x6a, 0x2d, 0xb7, 0xe5, 0x2f, 0x3b,
	0x55, 0xea, 0x07, 0xae, 0x77, 0xcb, 0xa3, 0x54, 0x7d, 0x0c, 0x9b, 0xb1, 0x4e, 0x8d, 0xa0, 0xe5,
	0xd1, 0x55, 0xcb, 0x67, 0xe5, 0x4d, 0xf5, 0x0a, 0x4e, 0x43, 0x14, 0x07, 0x2b, 0x2d, 0xcf, 0x77,
	0xbd, 0x77, 0xb7, 0xa8, 0x77, 0xbc, 0xee, 0xb9, 0x8d, 0xbd, 0xc0, 0xf0, 0x02, 0xf5, 0x71, 0x32,
	0x0d, 0xa5, 0x70, 0x28, 0x74, 0xfa, 0x66, 0x8b, 0xfa, 0x81, 0xfa, 0x07, 0x23, 0x64, 0x1e, 0xa6,
	0xea, 0x19, 0xcc, 0xfd, 0x87, 0x23, 0x84, 0xc0, 0x78, 0x7d, 0xdb, 0xe5, 0xc3, 0xb2, 0x6d, 0x34,
	0xa8, 0xfa, 0x47, 0x23, 0x64, 0x16, 0x26, 0x99, 0x00, 0x8b, 0xe7, 0x1d, 0x4b, 0xff, 0x0f, 0x23,
	0xe4, 0x1c, 0x6b, 0x6d, 0xc4, 0xf2, 0xfe, 0xf5, 0x56, 0xb5, 0x4e, 0x03, 0xeb, 0x2d, 0x6a, 0xaa,
	0x7f, 0xcc, 0x33, 0x45, 0xc5, 0xd2, 0x9c, 0x64, 0x25, 0xbf, 0x38, 0x42, 0x1e, 0x82, 0xf3, 0xed,
	0x99, 0x52, 0x43, 0xfe, 0x24, 0x01, 0xb2, 0xea, 0x1e, 0x39, 0x7b, 0x46, 0xa3, 0x69, 0x5b, 0x4e,
	0x0d, 0xc5, 0xdd, 0x5d, 0xc3, 0x56, 0xff, 0xe3, 0x08, 0x39, 0x0f, 0x73, 0x72, 0xfd, 0x0c, 0xcc,
	0x67, 0x60, 0xd4, 0x54, 0xff, 0x94, 0xe7, 0x0a, 0x04, 0x7b, 0xd4, 0xb3, 0x0c, 0xdb, 0xf2, 0xa9,
	0x89, 0x92, 0x5b, 0xfd, 0xb3, 0x44, 0xae, 0xc4, 0x23, 0x1b, 0xce, 0x81, 0xab, 0x7e, 0x69, 0x84,
	0x94, 0x61, 0x26, 0xcc, 0xbd, 0x6e, 0xf8, 0x34, 0xaa, 0x44, 0xfd, 0x73, 0xde, 0xb0, 0x15, 0xc3,
	0x71, 0x5c, 0xc1, 0x4b, 0xe9, 0xe2, 0x7f, 0x91, 0x28, 0x9e, 0x98, 0x1d, 0xea, 0x5f, 0x8e, 0x90,
	0x47, 0xe0, 0x92, 0x28, 0xbe, 0x62, 0x53, 0xc3, 0x4b, 0xa0, 0xdf, 0xab, 0x1e, 0xd2, 0x86, 0xa1,
	0xfe, 0xd5, 0x08, 0x79, 0x12, 0xde, 0xd6, 0xa1, 0xf1, 0x2b, 0x6e, 0xa3, 0xe9, 0x51, 0xdf, 0xb7,
	0x5c, 0x87, 0x11, 0x4d, 0xfd, 0xeb, 0x11, 0x72, 0x19, 0xce, 0x85, 0xc0, 0x19, 0xbc, 0xa5, 0x7e,
	0x99, 0x8f, 0xb7, 0x80, 0xd8, 0x70, 0x4c, 0x7a, 0x6f, 0xc5, 0xb5, 0x5b, 0x0d, 0x47, 0xfd, 0xca,
	0x08, 0xb9, 0x02, 0x0f, 0xd7, 0x6f, 0x50, 0xc6, 0x9d, 0xc9, 0xa2, 0x16, 0xf5, 0x6f, 0x3b, 0x7e,
	0xab, 0xc9, 0x96, 0x1e, 0x6a, 0xaa, 0x5f, 0xe5, 0x4d, 0x5a, 0xb5, 0x1a, 0xd4, 0x09, 0x58, 0xdd,
	0xeb, 0x46, 0x35, 0xb8, 0xc5, 0xa0, 0x37, 0x1c, 0x5e, 0xd5, 0x1d, 0x2b, 0x38, 0xe4, 0x3d, 0x55,
	0xff, 0x66, 0x84, 0x5c, 0x84, 0x05, 0x31, 0x3b, 0x36, 0x9c, 0xb8, 0xff, 0x38, 0x88, 0x54, 0xfd,
	0x5b, 0xde, 0xe4, 0x2d, 0xcb, 0xf7, 0x2d, 0xa7, 0xb6, 0xeb, 0x59, 0x0d, 0xc3, 0x3b, 0x7e, 0x9d,
	0x1e, 0xc7, 0x64, 0xfe, 0x3b, 0x8e, 0x21, 0xce, 0xda, 0xc0, 0x19, 0x1b, 0xe5, 0xff, 0xfd, 0x08,
	0x79, 0x14, 0x2e, 0x4b, 0xc2, 0x7e, 0xd5, 0xc5, 0x39, 0xbd, 0x85, 0xd2, 0x86, 0xf5, 0x10, 0x7b,
	0xfe, 0xc9, 0x02, 0xf2, 0xae, 0xa8, 0x28, 0x4e, 0xff, 0x54, 0x01, 0x1b, 0xc0, 0x87, 0x61, 0xcb,
	0x35, 0xad, 0x83, 0x63, 0xbe, 0xfc, 0x44, 0x3c, 0xfa, 0x6d, 0x05, 0xa4, 0xd9, 0xea, 0x75, 0x3e,
	0xc6, 0x1b, 0xce, 0xae, 0xe7, 0xd6, 0x18, 0xd9, 0xd5, 0xcf, 0x97, 0xc8, 0x25, 0x28, 0xd7, 0x57,
	0x8c, 0xea, 0x21, 0xdd, 0x3b, 0x76, 0xaa, 0xac, 0xdf, 0xab, 0xd7, 0x25, 0x80, 0x5f, 0x2d, 0x21,
	0xef, 0xa7, 0x00, 0xd6, 0x0d, 0x8b, 0xf1, 0xe5, 0xaf, 0x85, 0x99, 0xbe, 0x6f, 0x38, 0xa6, 0x67,
	0x6c, 0xb5, 0x98, 0x78, 0x10, 0x99, 0xbf, 0x1e, 0xa2, 0x4e, 0x64, 0xae, 0x35, 0xdd, 0xea, 0x21,
	0x5f, 0xdd, 0xff, 0x55, 0x89, 0x2c, 0xc0, 0x74, 0x0c, 0xc0, 0xa4, 0xbe, 0x28, 0xfb, 0x1b, 0x25,
	0xed, 0xff, 0x24, 0x30, 0x22, 0x74, 0x12, 0x32, 0x0a, 0xa1, 0x56, 0xa2, 0x9e, 0xc1, 0x91, 0xbb,
	0x41, 0x83, 0x70, 0x5c, 0xe3, 0x91, 0xf2, 0x97, 0xbd, 0x9a, 0x20, 0x0e, 0x0a, 0x0e, 0x26, 0x1a,
	0xd8, 0xc4, 0xc0, 0x0f, 0x91, 0x21, 0x96, 0x4c, 0x46, 0x94, 0x7f, 0x59, 0x8a, 0x73, 0x43, 0x7e,
	0x8b, 0xd9, 0xec, 0xf3, 0x52, 0xee, 0x6a, 0xab, 0x69, 0x5b, 0xd5, 0x68, 0x85, 0xdb, 0x30, 0x19,
	0x55, 0x18, 0xc9, 0xdb, 0xcb, 0xde, 0xb1, 0x6c, 0xb3, 0x6a, 0x78, 0x11, 0x69, 0x64, 0x08, 0x14,
	0x62, 0x6c, 0x35, 0x64, 0xa4, 0x61, 0x3d, 0x4f, 0x16, 0xc7, 0x85, 0x92, 0x11, 0x85, 0x51, 0x0d,
	0xb3, 0xee, 0x1c, 0x52, 0x8f, 0xae, 0xd8, 0x46, 0xcb, 0xa7, 0x1b, 0xfe, 0x2d, 0xd7, 0x5d, 0xa5,
	0xb4, 0xa9, 0xfe, 0x46, 0x89, 0xbc, 0x0d, 0x1e, 0xe2, 0x00, 0x3a, 0xb5, 0x71, 0xe9, 0xf0, 0x0f,
	0xad, 0x26, 0x93, 0xab, 0x2b, 0x87, 0xb4, 0x5a, 0x17, 0x24, 0xfc, 0xcd, 0x12, 0x72, 0x0b, 0xc2,
	0xc9, 0xbc, 0xff, 0x85, 0xf6, 0xba, 0x51, 0x11, 0xd9, 0x30, 0xd5, 0xdf, 0x2a, 0x21, 0x9b, 0xb4,
	0xd3, 0x4b, 0xfd, 0x6d, 0xa9, 0xd2, 0xb5, 0x7b, 0x55, 0x4a, 0x4d, 0x3f, 0x35, 0x37, 0x37, 0xad,
	0x86, 0x15, 0xa8, 0xff, 0xba, 0x84, 0x22, 0x57, 0xa7, 0x35, 0x7a, 0xef, 0x96, 0xeb, 0x6e, 0xba,
	0x4e, 0x4d, 0xfd, 0x1d, 0x89, 0x56, 0x37, 0x3c, 0xb7, 0xd5, 0xbc, 0x1e, 0xd6, 0xab, 0x1b, 0x47,
	0x7b, 0xae, 0x17, 0xa8, 0x3f, 0x3d, 0x87, 0x62, 0x28, 0x1b, 0x82, 0x23, 0xfe, 0xbf, 0xe6, 0x62,
	0xb2, 0x08, 0x10, 0xd1, 0x42, 0xdd, 0x38, 0x5a, 0x71, 0x6d, 0xf5, 0xff, 0x9e, 0x23, 0x17, 0x60,
	0x3e, 0x01, 0x20, 0xf7, 0xfa, 0x67, 0xe6, 0x3a, 0x35, 0x62, 0xb9, 0x56, 0xf3, 0x18, 0x82, 0xff,
	0x67, 0x8e, 0x3c, 0x0c, 0x17, 0xb3, 0x20, 0xc4, 0x17, 0x03, 0xfa, 0xd9, 0x8e, 0x40, 0xdb, 0xad,
	0x06, 0x5f, 0x31, 0x7c, 0xf5, 0xb3, 0xed, 0x75, 0x89, 0xb6, 0x86, 0x75, 0xfd, 0xbf, 0xed, 0xbd,
	0x89, 0x3b, 0xcc, 0x00, 0x7e, 0xae, 0x7b, 0x63, 0x38, 0x4d, 0x7e, 0x7e, 0x0e, 0xc5, 0x6f, 0x06,
	0xd0, 0x75, 0xd7, 0xb5, 0xa9, 0xe1, 0xac, 0xdd, 0x6b, 0x7a, 0xea, 0xff, 0x37, 0x87, 0x52, 0x31,
	0x03, 0x8a, 0xc9, 0x5e, 0xc3, 0xb3, 0x98, 0xfc, 0x43, 0xc8, 0x5f, 0x98, 0x43, 0x31, 0x94, 0x01,
	0xb9, 0xeb, 0xd1, 0xa6, 0xe7, 0x56, 0xa9, 0xef, 0x53, 0x53, 0xfd, 0xc5, 0xb9, 0x98, 0xb3, 0x05,
	0x18, 0xeb, 0x17, 0x9f, 0xd3, 0xbf, 0x34, 0x87, 0xa2, 0x4e, 0x70, 0x9d, 0xc9, 0xd6, 0x40, 0x2a,
	0x2d, 0x8a, 0xea, 0xff, 0x3f, 0x47, 0x1e, 0x03, 0xad, 0x3b, 0x95, 0x11, 0xf0, 0x97, 0xe7, 0x62,
	0x8e, 0xeb, 0xb6, 0x70, 0xfe, 0x93, 0x8e, 0xdd, 0xe3, 0xc3, 0x11, 0x02, 0xfa, 0xea, 0x3f, 0xe5,
	0x34, 0x95, 0x35, 0x0b, 0xd7, 0x63, 0x2d, 0xa7, 0x35, 0x23, 0xa0, 0x62, 0x0d, 0xf9, 0x67, 0xbc,
	0x73, 0x49, 0xa0, 0x4d, 0xd7, 0xad, 0xb7, 0x9a, 0xbe, 0xfa, 0xb9, 0xac, 0x4c, 0x51, 0xa9, 0xfa,
	0xcf, 0xe7, 0x70, 0xbe, 0xf1, 0x4c, 0x49, 0x7d, 0xfa, 0x17, 0x73, 0xb8, 0x80, 0x8a, 0xf4, 0xfd,
	0x37, 0x68, 0x35, 0x88, 0x14, 0xf4, 0x5f, 0xe1, 0x9c, 0x92, 0x50, 0x41, 0xb7, 0xdd, 0xed, 0x56,
	0x83, 0x86, 0x4b, 0xec, 0xff, 0x74, 0x09, 0x1b, 0x9d, 0x52, 0x52, 0x23, 0xbd, 0x5a, 0x67, 0xfa,
	0x9b, 0xfa, 0xfd, 0x97, 0xb0, 0x5d, 0x29, 0x34, 0xa2, 0x8e, 0xff, 0xf9, 0x12, 0x72, 0x49, 0x16,
	0x06, 0x69, 0x5c, 0x7e, 0xa0, 0x33, 0x14, 0xe3, 0x0d, 0xbe, 0x42, 0xab, 0x3f, 0x78, 0x09, 0x39,
	0x24, 0x0b, 0x4a, 0x77, 0x6d, 0xbb, 0xd5, 0xe4, 0x72, 0xf7, 0x87, 0x2e, 0x91, 0xc7, 0xe1, 0x91,
	0x24, 0xd8, 0x2a, 0x6d, 0x52, 0xc7, 0xf4, 0x77, 0x9c, 0x44, 0xaa, 0xfa, 0xc3, 0x97, 0x70, 0x98,
	0x13, 0x89, 0x5b, 0xc6, 0xbd, 0x50, 0xb8, 0x73, 0x59, 0x43, 0x4d, 0xf5, 0x7f, 0xb9, 0x14, 0xb3,
	0x43, 0xa4, 0x19, 0x21, 0x1f, 0x08, 0x35, 0x40, 0xb0, 0xc3, 0x27, 0x1f, 0x8b, 0x79, 0x58, 0x86,
	0x5b, 0x71, 0x9d, 0x03, 0xdb, 0xaa, 0x06, 0x96, 0x53, 0xdb, 0x69, 0xfa, 0xea, 0xa7, 0x1e, 0x23,
	0x5a, 0xd2, 0xb0, 0xd8, 0xe3, 0x5d, 0x94, 0x8c, 0xa9, 0x3f, 0x5d, 0x44, 0x89, 0xd2, 0x0e, 0xb3,
	0x17, 0x18, 0x36, 0x55, 0xff, 0x6c, 0x11, 0x47, 0x46, 0xca, 0x7e, 0x77, 0x8b, 0xb6, 0x28, 0x37,
	0x11, 0xa8, 0xcf, 0xa7, 0xe8, 0x97, 0x16, 0xd3, 0xf5, 0x44, 0x6a, 0xd0, 0x9b, 0x2d, 0xea, 0x54,
	0xe9, 0x86, 0xa9, 0xfe, 0xf9, 0x22, 0x8e, 0x5e, 0xc2, 0xea, 0x88, 0x54, 0xe2, 0xbf, 0x58, 0x44,
	0x52, 0xca, 0xfa, 0x7c, 0xac, 0xa0, 0x71, 0x05, 0x8b, 0xaf, 0xe9, 0xa6, 0xfa, 0x97, 0x8b, 0x48,
	0x22, 0x09, 0x34, 0xd4, 0x89, 0x75, 0xc9, 0x52, 0xf1, 0xd5, 0xbf, 0x5a, 0xc4, 0x29, 0xba, 0x45,
	0x03, 0xc3, 0x34, 0x02, 0x83, 0x9b, 0x34, 0xce, 0xb6, 0xeb, 0x6c, 0x52, 0x83, 0x31, 0xec, 0x5f,
	0x2f, 0xa2, 0x34, 0x4e, 0xe4, 0xf3, 0xac, 0x88, 0xa7, 0xbe, 0xcc, 0x51, 0xc8, 0xa4, 0x61, 0x4b,
	0xc8, 0x6d, 0xc7, 0x76, 0x0d, 0x36, 0x5a, 0x5f, 0x69, 0xeb, 0xf6, 0x8a, 0xdd, 0x62, 0x16, 0x88,
	0x64, 0x89, 0x7c, 0x75, 0x11, 0x39, 0xae, 0x1d, 0x26, 0xb4, 0xac, 0x10, 0xea, 0x6f, 0x16, 0x39,
	0xc7, 0x65, 0x4c, 0x7d, 0xa6, 0x20, 0x89, 0x0e, 0xaa, 0x5f, 0xb8, 0xc6, 0xd9, 0x37, 0x1b, 0x6c,
	0xd9, 0xb6, 0x6a, 0x0e, 0x35, 0xd5, 0xdf, 0xba, 0x86, 0x62, 0x37, 0xa6, 0x34, 0x5a, 0xff, 0xd2,
	0x90, 0xff, 0xdc, 0x3b, 0xb1, 0xeb, 0x68, 0x81, 0x24, 0x54, 0xdd, 0x9d, 0xbb, 0xd4, 0xbb, 0x69,
	0x6d, 0xd1, 0x86, 0xfa, 0xf3, 0xef, 0x24, 0x73, 0x40, 0xb8, 0xed, 0xbe, 0xe1, 0xe0, 0x7e, 0x06,
	0x57, 0xf2, 0x7f, 0x64, 0x1d, 0x15, 0x06, 0xcc, 0xd8, 0x32, 0x9a, 0xdb, 0x6e, 0xb0, 0xc1, 0xd4,
	0x7f, 0xc3, 0x46, 0x13, 0xe2, 0x47, 0xd7, 0xc9, 0x14, 0x4c, 0xf0, 0x5c, 0xb4, 0xc8, 0x0c, 0xf3,
	0x58, 0xfd, 0x5f, 0xd7, 0x71, 0xbd, 0x8d, 0x14, 0xa0, 0x9d, 0xa6, 0x30, 0x1b, 0xd5, 0xef, 0xdc,
	0xe6, 0xeb, 0xe8, 0xee, 0x0a, 0x32, 0xd5, 0x7a, 0xcb, 0xb6, 0xd5, 0x2f, 0xdf, 0xe6, 0x7d, 0x14,
	0x96, 0x25, 0xad, 0x32, 0xbd, 0x80, 0xf3, 0xdc, 0xba, 0xeb, 0x85, 0xab, 0xed, 0x57, 0x6e, 0x6b,
	0xb3, 0x30, 0x7d, 0x83, 0x06, 0x5b, 0x06, 0x23, 0xe1, 0xa6, 0x5b, 0xc5, 0x61, 0x5f, 0xf6, 0x6a,
	0xda, 0x8f, 0x28, 0x19, 0x19, 0x3a, 0x0d, 0xc8, 0xc3, 0x30, 0xde, 0xc0, 0xc4, 0xca, 0xa1, 0xe1,
	0x98, 0x36, 0xdf, 0xc8, 0x2a, 0xea, 0x63, 0x3c, 0xf1, 0x26, 0xa6, 0x91, 0xe7, 0x60, 0x46, 0x00,
	0x59, 0xb1, 0xcd, 0x5a, 0xb1, 0x4c, 0xdc, 0x94, 0xca, 0xeb, 0x53, 0x3c, 0x33, 0x61, 0xcf, 0x92,
	0x97, 0x60, 0xde, 0x6b, 0x56, 0x2b, 0xf4, 0x1e, 0xad, 0xb6, 0x10, 0x3c, 0xb0, 0x1a, 0xb4, 0xd2,
	0xf2, 0x69, 0xd5, 0xc7, 0x5d, 0xaa, 0x21, 0x7d, 0xc6, 0x6b, 0x56, 0xd7, 0xc2, 0x6c, 0x26, 0xd1,
	0x6e, 0xb3, 0x4c, 0x6d, 0x01, 0xe6, 0x6e, 0xd0, 0x60, 0xdb, 0x35, 0xe9, 0x96, 0xd1, 0x5c, 0x73,
	0xd8, 0x70, 0x30, 0x6b, 0x81, 0xf5, 0xe2, 0xbb, 0x95, 0xec, 0x3c, 0xd6, 0x91, 0x9b, 0x50, 0x70,
	0x5c, 0x93, 0x56, 0x1a, 0x46, 0x13, 0xfb, 0x30, 0xfa, 0xdc, 0xd3, 0xdd, 0x76, 0xc1, 0xda, 0x71,
	0x8c, 0x38, 0x3c, 0xa9, 0x6b, 0xcb, 0x73, 0xdd, 0x5a, 0xfe, 0x3f, 0x8c, 0x41, 0x31, 0x62, 0x2d,
	0x72, 0x01, 0x8a, 0x7e, 0xe0, 0x55, 0xee, 0xb2, 0x8f, 0x79, 0x95, 0x51, 0xf5, 0xe6, 0x19, 0xbd,
	0xe0, 0x07, 0x1e, 0xcf, 0x7e, 0x08, 0x46, 0x2d, 0x27, 0xb8, 0xf6, 0x82, 0x00, 0x98, 0x64, 0x94,
	0xbc, 0x79, 0x46, 0x07, 0x4c, 0xe4, 0x20, 0x97, 0x00, 0xf6, 0x5d, 0xd7, 0x16, 0x10, 0xe4, 0xb2,
	0x72, 0xa5, 0x70, 0xf3, 0x8c, 0x5e, 0x64, 0x69, 0x1c, 0xe0, 0x61, 0x18, 0x6b, 0xc9, 0x48, 0xa6,
	0x58, 0xeb, 0x6e, 0x9e, 0xd1, 0x47, 0x5b, 0x12, 0x96, 0x87, 0x60, 0xf4, 0xc0, 0x76, 0x8d, 0x40,
	0xc0, 0x4c, 0x5f, 0x56, 0xae, 0xe4, 0x58, 0x45, 0x98, 0x18, 0xe1, 0x31, 0xdd, 0xd6, 0xbe, 0x4d,
	0x05, 0xcc, 0xcc, 0x65, 0xe5, 0x8a, 0xc2, 0xf0, 0xf0, 0xd4, 0x08, 0xcf, 0xfe, 0x71, 0x40, 0x7d,
	0x01, 0x33, 0x7b, 0x59, 0xb9, 0x32, 0xc6, 0xf0, 0x60, 0x22, 0x07, 0x79, 0x0d, 0x58, 0xff, 0x2a,
	0xb6, 0xe5, 0x07, 0xf3, 0x73, 0xbd, 0xc7, 0x20, 0xa2, 0xd5, 0xe2, 0x5e, 0xe0, 0x6d, 0x5a, 0x7e,
	0x70, 0xf3, 0x8c, 0x3e, 0xe2, 0xf3, 0x9f, 0x64, 0x17, 0x38, 0x29, 0x38, 0xb6, 0x79, 0xc4, 0xf6,
	0x4c, 0x7f, 0xd8, 0x36, 0x58, 0x39, 0x81, 0xaf, 0x68, 0x85, 0x1f, 0x64, 0x0b, 0x90, 0x74, 0x1c,
	0xe1, 0x02, 0x22, 0x5c, 0xec, 0x0f, 0x21, 0xd3, 0xa9, 0x04, 0xbe, 0xc2, 0xbe, 0xf8, 0x4d, 0xf6,
	0x40, 0x90, 0x99, 0x23, 0x2c, 0x23, 0xc2, 0xab, 0xfd, 0x21, 0xbc, 0x2d, 0x37, 0x11, 0x5a, 0x71,
	0x1b, 0x77, 0x81, 0x8f, 0x0b, 0xc7, 0x79, 0x6e, 0x90, 0x5e, 0xaf, 0xb3, 0x72, 0x61, 0xaf, 0x0f,
	0xc2, 0x0f, 0xd6, 0x4c, 0x31, 0xb6, 0x88, 0xf2, 0xfc, 0x20, 0xcd, 0x5c, 0xc5, 0x82, 0x61, 0x33,
	0xcd, 0xe8, 0x8b, 0x35, 0x93, 0xf3, 0x02, 0xe2, 0xbc, 0x30, 0x48, 0x33, 0xaf, 0xb3, 0x72, 0x61,
	0x33, 0xf7, 0xc3, 0x0f, 0x72, 0x0e, 0x0a, 0x6f, 0xf8, 0xae, 0x53, 0x71, 0xf7, 0xdf, 0x98, 0xbf,
	0x28, 0x58, 0x6b, 0x84, 0xa5, 0xec, 0xec, 0xbf, 0x41, 0xde, 0x03, 0xe3, 0x87, 0x96, 0x1f, 0xb8,
	0x35, 0xcf, 0x68, 0x20, 0xc4, 0xa5, 0x41, 0x6a, 0xbc, 0x19, 0x16, 0xbd, 0x79, 0x46, 0x1f, 0x8b,
	0xf0, 0x30, 0xbc, 0x73, 0x30, 0x5c, 0x75, 0x5b, 0x4e, 0x30, 0x5f, 0x60, 0x13, 0x67, 0x49, 0x79,
	0x56, 0xe7, 0xdf, 0xe5, 0x2b, 0x30, 0x22, 0x58, 0x92, 0x5c, 0x00, 0x40, 0x86, 0xe7, 0x5d, 0x55,
	0x2e, 0xe7, 0xaf, 0x14, 0xf5, 0x22, 0xa6, 0xb0, 0xec, 0xf2, 0x13, 0x50, 0x8c, 0xc6, 0x32, 0x03,
	0x36, 0x2f, 0xc3, 0x3e, 0x0e, 0x85, 0x90, 0x93, 0x32, 0x40, 0x0b, 0x32, 0xe8, 0x93, 0x00, 0xb7,
	0xbb, 0xe1, 0x1d, 0x4a, 0xb5, 0x21, 0x1a, 0xfc, 0x0c, 0xd8, 0x5c, 0x0a, 0x71, 0x3c, 0xaa, 0x19,
	0xc0, 0x4a, 0x0a, 0x71, 0x34, 0x5c, 0x19, 0xb0, 0x63, 0x32, 0xec, 0x7f, 0x95, 0x83, 0x62, 0x44,
	0x69, 0xf2, 0x06, 0xcc, 0xef, 0xa3, 0x0e, 0x5e, 0x69, 0x35, 0x9b, 0xd4, 0xab, 0xec, 0x33, 0xdd,
	0xc1, 0x0f, 0x8b, 0x9e, 0x90, 0xab, 0x67, 0x38, 0xca, 0xdb, 0x0c, 0xe3, 0x75, 0x44, 0x88, 0x0d,
	0x7b, 0x1f, 0xa8, 0xa2, 0xae, 0x3a, 0x3d, 0x16, 0x75, 0xe4, 0x4e, 0x26, 0x7d, 0x26, 0x38, 0xa2,
	0xd7, 0xe9, 0x31, 0x47, 0xfd, 0x14, 0x10, 0x81, 0x1a, 0xf9, 0x42, 0x20, 0xcf, 0xe3, 0x00, 0x88,
	0x4a, 0x57, 0x30, 0x83, 0x41, 0x5f, 0x1f, 0x87, 0x51, 0x61, 0x07, 0xe2, 0xe7, 0x28, 0x14, 0x11,
	0x3f, 0x9e, 0xa1, 0xb4, 0x60, 0x9c, 0x2d, 0x14, 0x98, 0xb0, 0x6b, 0x58, 0x1e, 0x79, 0x0c, 0x4a,
	0x41, 0xb8, 0x3b, 0x2e, 0x16, 0x17, 0x05, 0x17, 0x97, 0x89, 0x28, 0x19, 0x57, 0x15, 0xf2, 0x0d,
	0x30, 0xcc, 0x25, 0x2e, 0xef, 0xd3, 0xa3, 0x7d, 0xf5, 0x49, 0xe7, 0x65, 0xb4, 0x0a, 0x4c, 0xc5,
	0x3b, 0xa0, 0x7e, 0xd3, 0xa8, 0xf2, 0xca, 0x2f, 0xc1, 0x68, 0x03, 0x93, 0x2b, 0x8e, 0xd1, 0x08,
	0xd7, 0x7c, 0x68, 0x44, 0x90, 0xe4, 0x31, 0x28, 0x3a, 0x61, 0x09, 0x7e, 0xf4, 0xb4, 0x54, 0xac,
	0x98, 0xf4, 0xc0, 0x68, 0xd9, 0x41, 0x45, 0x8f, 0xf3, 0xb4, 0xff, 0x56, 0x01, 0x88, 0x75, 0x25,
	0x42, 0x60, 0x48, 0xc2, 0x88, 0xbf, 0x93, 0xb8, 0xf2, 0x9d, 0x71, 0x91, 0x9b, 0x09, 0x0e, 0xcb,
	0x5d, 0xce, 0x5f, 0x19, 0x7d, 0xee, 0xf1, 0x6e, 0xdd, 0x4d, 0x50, 0x54, 0x62, 0x46, 0xed, 0x97,
	0x67, 0xc2, 0x56, 0xe1, 0x1e, 0xd2, 0x15, 0x18, 0xb3, 0xfc, 0x8a, 0x11, 0x6e, 0xba, 0x61, 0xeb,
	0x0a, 0x4b, 0xc3, 0x07, 0x86, 0xed, 0x53, 0x7d, 0xd4, 0xf2, 0xa3, 0xed, 0xb8, 0x34, 0x61, 0x72,
	0x6d, 0x84, 0xb9, 0x02, 0x2a, 0xc5, 0x4d, 0x0f, 0x3c, 0x6f, 0xe3, 0x50, 0x05, 0x84, 0x9a, 0xa0,
	0x89, 0x6d, 0x65, 0x46, 0x8a, 0x96, 0x63, 0x05, 0xbc, 0xc7, 0x3a, 0xfe, 0x26, 0xfb, 0x30, 0x6d,
	0x08, 0xab, 0x93, 0x29, 0x16, 0x6e, 0x93, 0x7a, 0x46, 0xe0, 0x7a, 0xf3, 0x43, 0x78, 0x6c, 0xd7,
	0x75, 0x4a, 0xc4, 0xdd, 0x59, 0xdc, 0x11, 0xc5, 0xf4, 0x29, 0x09, 0x59, 0x98, 0x48, 0xd6, 0xe1,
	0xa2, 0xe9, 0x1e, 0x39, 0x95, 0xd0, 0xfc, 0xe1, 0xe7, 0xa0, 0x77, 0x0d, 0xbb, 0x62, 0x39, 0x15,
	0xe4, 0xb3, 0xe1, 0xcb, 0xca, 0x95, 0xf1, 0xa5, 0xdc, 0xf3, 0x57, 0xf5, 0xb2, 0x99, 0xa1, 0x35,
	0x6f, 0x38, 0x7b, 0x8c, 0xef, 0x6c, 0x98, 0x4d, 0xe2, 0x89, 0x5a, 0x7b, 0xf6, 0x44, 0xad, 0x5d,
	0x1a, 0xae, 0x6f, 0x1a, 0x7e, 0xa0, 0x4f, 0xcb, 0x75, 0x46, 0xad, 0x6e, 0xc2, 0xf9, 0x37, 0x99,
	0xe1, 0x56, 0xe9, 0x50, 0x67, 0xf9, 0x64, 0x14, 0x5a, 0x78, 0x33, 0xb4, 0x06, 0xdb, 0x6a, 0x5c,
	0x83, 0xf3, 0xfb, 0xe1, 0x3e, 0x7f, 0x25, 0x9a, 0x73, 0x3e, 0xa3, 0x52, 0xe0, 0x9b, 0xfb, 0xf3,
	0x23, 0xc8, 0x24, 0x43, 0x81, 0xd7, 0xa2, 0xfa, 0x42, 0x04, 0x19, 0x9d, 0x68, 0xf9, 0x1b, 0xce,
	0x2d, 0xdf, 0xdc, 0x67, 0x0a, 0x74, 0xcb, 0xa7, 0x5e, 0xa5, 0x21, 0x6c, 0xa6, 0xf9, 0x22, 0x57,
	0xa0, 0x59, 0x62, 0x68, 0x47, 0x91, 0x67, 0x61, 0xd2, 0xf2, 0x2b, 0x26, 0xb7, 0x74, 0x2b, 0x9c,
	0x9d, 0xe6, 0x41, 0xe6, 0xc2, 0x92, 0xe5, 0x27, 0x0c, 0x61, 0xf2, 0x61, 0x38, 0x97, 0x84, 0xaf,
	0x78, 0x68, 0x66, 0x57, 0xb0, 0x47, 0xf3, 0xa3, 0x28, 0x0c, 0x1e, 0xea, 0x46, 0x0f, 0xbe, 0x4d,
	0x38, 0x6f, 0xca, 0x68, 0x25, 0x53, 0x9d, 0xec, 0xc3, 0x42, 0xaa, 0x06, 0x1a, 0x99, 0xfb, 0xf3,
	0x63, 0x88, 0xff, 0x6d, 0xdd, 0xf0, 0xc7, 0x9b, 0x03, 0xfa, 0x5c, 0xa2, 0x92, 0x38, 0x83, 0x3c,
	0x0f, 0xb3, 0x9e, 0x71, 0x54, 0xf1, 0xc2, 0x93, 0x30, 0x46, 0xdd, 0x23, 0x4a, 0xeb, 0xfe, 0xfc,
	0x38, 0x63, 0x42, 0x7d, 0xca, 0x33, 0x8e, 0xa2, 0x63, 0xb2, 0x0d, 0xe7, 0x0e, 0xcb, 0x22, 0x2f,
	0xc3, 0xc2, 0xa1, 0xdb, 0xf2, 0xec, 0xe3, 0xac, 0x72, 0x13, 0x58, 0x6e, 0x96, 0x03, 0xb4, 0x15,
	0x5d, 0x82, 0x59, 0xcb, 0xaf, 0x1c, 0x89, 0x9d, 0xd8, 0x8a, 0x4f, 0x0d, 0xaf, 0x7a, 0xc8, 0xcc,
	0xe9, 0xf9, 0x92, 0x34, 0x9c, 0xd3, 0x96, 0x1f, 0x6e, 0xd6, 0xee, 0x45, 0x10, 0x64, 0x1d, 0x2e,
	0x37, 0xa9, 0xe7, 0x5b, 0x7e, 0x10, 0x8b, 0x8a, 0x8a, 0xe1, 0x73, 0xf5, 0xdf, 0xa7, 0x9e, 0x45,
	0x7d, 0xd4, 0xe3, 0x0b, 0xfa, 0x79, 0x01, 0x17, 0xc9, 0x8d, 0x65, 0x9f, 0xf1, 0xc5, 0x1e, 0xc2,
	0x90, 0x65, 0x58, 0xa8, 0xba, 0x4e, 0x60, 0x58, 0x8e, 0x8f, 0xc5, 0xf8, 0x91, 0x47, 0x05, 0x9d,
	0x09, 0x50, 0xcf, 0x8f, 0x06, 0x7d, 0x2e, 0x84, 0x4b, 0x9d, 0x8c, 0x90, 0x3b, 0x30, 0xe9, 0xa0,
	0xad, 0x5f, 0x39, 0x60, 0xc6, 0x7e, 0xc5, 0x72, 0x0e, 0x5c, 0x34, 0x00, 0x46, 0x9f, 0x7b, 0xb2,
	0xab, 0x55, 0x93, 0x3c, 0xc1, 0xd1, 0x4b, 0x4e, 0x32, 0x81, 0x7c, 0x42, 0x81, 0x87, 0xd2, 0x6d,
	0xaa, 0x54, 0xe3, 0x83, 0x18, 0xee, 0x45, 0x30, 0xd5, 0xdb, 0x8b, 0x40, 0x9a, 0x6c, 0xa9, 0x73,
	0x9c, 0xa5, 0xe1, 0xfa, 0xb6, 0xeb, 0x50, 0xfd, 0xa2, 0xdf, 0xf5, 0xb8, 0x27, 0xb9, 0x2c, 0x4c,
	0x77, 0x59, 0x16, 0xde, 0x0e, 0x33, 0xd4, 0x61, 0x23, 0x24, 0xd8, 0x94, 0xcd, 0xa8, 0x8a, 0xd7,
	0xac, 0xa2, 0x99, 0x12, 0x0e, 0xe9, 0x14, 0x07, 0xd9, 0x8a, 0x20, 0xf4, 0x66, 0x95, 0x3c, 0x0d,
	0x25, 0x8b, 0x4d, 0x68, 0x93, 0xde, 0xab, 0x54, 0x71, 0x93, 0x0f, 0xcd, 0x96, 0x88, 0xfe, 0xe3,
	0x96, 0x2f, 0x1d, 0x22, 0x91, 0x1d, 0x66, 0x72, 0x30, 0x58, 0x24, 0xc2, 0x1c, 0x12, 0xe1, 0x6a,
	0x9f, 0x44, 0x88, 0x8e, 0x64, 0x98, 0xc5, 0x21, 0x7e, 0x92, 0x0f, 0x42, 0xa1, 0x69, 0x59, 0x1c,
	0xdd, 0x3c, 0xa2, 0x5b, 0xec, 0x13, 0xdd, 0xae, 0x65, 0x21, 0x2d, 0x49, 0x5d, 0x9c, 0x07, 0xad,
	0x70, 0x4e, 0xd9, 0xdd, 0xd8, 0xd0, 0x47, 0x9a, 0x3c, 0x93, 0x3c, 0x0b, 0x53, 0x0c, 0xbd, 0x47,
	0x6b, 0xf4, 0x5e, 0xe5, 0xc0, 0x0d, 0x6d, 0xcd, 0x05, 0xa4, 0x65, 0x6e, 0xf1, 0x09, 0x5d, 0x6d,
	0x5a, 0x16, 0xee, 0xc7, 0xaf, 0xbb, 0xc2, 0xea, 0xbc, 0x02, 0x6a, 0x13, 0xcf, 0x87, 0xa4, 0xe5,
	0xeb, 0x3c, 0x5f, 0xbe, 0x9a, 0x89, 0x73, 0x23, 0xf2, 0x7e, 0x28, 0x36, 0x0c, 0xbf, 0xce, 0x1b,
	0x7f, 0x71, 0x20, 0xe9, 0xbb, 0x65, 0xf8, 0x75, 0x6c, 0xfd, 0x58, 0x7d, 0x95, 0x8f, 0x27, 0x4b,
	0xd1, 0x0b, 0x0d, 0x91, 0x4e, 0x5c, 0x28, 0x05, 0x81, 0x5d, 0xa9, 0x1a, 0x76, 0xb5, 0xc5, 0x4f,
	0x31, 0xd0, 0xd4, 0x99, 0x78, 0xee, 0xc5, 0x3e, 0x6b, 0xb8, 0x15, 0xd8, 0x2b, 0x71, 0xe1, 0xa5,
	0x52, 0x3d, 0x12, 0xcb, 0xd7, 0x0d, 0x9f, 0x9a, 0xfa, 0x44, 0x90, 0x00, 0x20, 0xef, 0x81, 0x42,
	0xd5, 0x08, 0x68, 0xcd, 0xf5, 0x8e, 0xd1, 0x5a, 0xe9, 0xbf, 0x2f, 0x2b, 0xa2, 0xd8, 0x52, 0xb1,
	0xae, 0x53, 0xc3, 0xc6, 0x8d, 0xd7, 0x08, 0x17, 0x79, 0x11, 0xa6, 0xab, 0x86, 0x53, 0x39, 0x34,
	0xee, 0x72, 0xa5, 0x85, 0x8f, 0x80, 0x8f, 0xf6, 0x49, 0xc8, 0x99, 0x93, 0x55, 0xc3, 0xb9, 0x69,
	0xdc, 0x45, 0xc5, 0x04, 0x07, 0xc1, 0xd7, 0x36, 0xa0, 0x10, 0x2d, 0x43, 0x05, 0x18, 0xaa, 0xef,
	0xb5, 0x1a, 0xea, 0x19, 0xfc, 0xb5, 0x65, 0xdc, 0x53, 0x15, 0xfe, 0xcb, 0x72, 0xd4, 0x1c, 0xfe,
	0x5a, 0xbe, 0x5b, 0x53, 0xf3, 0xa4, 0x08, 0x7c, 0xfd, 0x14, 0x8e, 0x33, 0xa8, 0x76, 0xaa, 0xc3,
	0xda, 0xbb, 0xa0, 0x94, 0x9e, 0x58, 0x0c, 0x92, 0xcd, 0x40, 0xf5, 0x0c, 0x42, 0x5e, 0x7f, 0xcb,
	0x6a, 0x3e, 0xa7, 0x2a, 0x98, 0xfc, 0x7e, 0xdb, 0xda, 0x57, 0x73, 0x78, 0xa6, 0xb6, 0xe7, 0x18,
	0xcd, 0xe6, 0xb1, 0x9a, 0xd7, 0xbe, 0x19, 0x46, 0x04, 0xb7, 0xa1, 0x87, 0x4c, 0x1b, 0xbf, 0xa9,
	0x67, 0xc8, 0x04, 0x40, 0x9d, 0x0d, 0x21, 0xf7, 0x98, 0x51, 0xc8, 0x24, 0x9e, 0xf3, 0x34, 0xdc,
	0xbb, 0x62, 0xbe, 0xa9, 0x39, 0x3c, 0xef, 0x67, 0x20, 0x1b, 0x07, 0x08, 0x84, 0xc7, 0x97, 0xc8,
	0x7a, 0x6a, 0x1e, 0xdd, 0x45, 0x38, 0x78, 0x7b, 0xee, 0x90, 0xe6, 0x41, 0x21, 0x64, 0x18, 0x74,
	0xf9, 0x91, 0x58, 0x46, 0x3d, 0x43, 0x4a, 0x30, 0x5a, 0xdf, 0x68, 0x2e, 0x9b, 0xa6, 0x87, 0x09,
	0xbc, 0xee, 0x8d, 0xe6, 0xdd, 0x17, 0xa2, 0xa4, 0x5c, 0x98, 0x74, 0x2d, 0x4a, 0xca, 0x63, 0x8b,
	0xd7, 0x1a, 0x86, 0x65, 0xe3, 0xf7, 0x10, 0xf7, 0x8d, 0x31, 0x1a, 0x14, 0x3f, 0x87, 0xb5, 0x57,
	0x99, 0xd5, 0x16, 0xce, 0x52, 0x46, 0x24, 0xb4, 0xb5, 0xd4, 0x33, 0x9c, 0x32, 0x81, 0x67, 0x39,
	0x35, 0x55, 0xc1, 0x0f, 0x6e, 0x85, 0x09, 0x87, 0x26, 0x71, 0xb6, 0xa2, 0xe6, 0xb5, 0x77, 0xc0,
	0x44, 0x92, 0x07, 0xb9, 0x8b, 0x53, 0x82, 0x0b, 0xd5, 0x33, 0xe8, 0x0a, 0x23, 0xbc, 0x27, 0x58,
	0x1e, 0x4f, 0x56, 0xb4, 0xc7, 0xa1, 0x10, 0xf2, 0x15, 0xb6, 0x2c, 0xe4, 0x2c, 0x41, 0xea, 0x65,
	0xc7, 0xb0, 0x8f, 0x03, 0xab, 0xea, 0xab, 0x8a, 0xf6, 0xa9, 0x11, 0x28, 0xa5, 0xa4, 0x3a, 0x79,
	0x14, 0x26, 0xf6, 0x0d, 0x9f, 0xa6, 0x14, 0xda, 0xa2, 0x3e, 0xbe, 0x2f, 0x1f, 0xc1, 0x33, 0xe3,
	0x25, 0xb5, 0x88, 0x98, 0xf4, 0x1e, 0xaa, 0xd5, 0xe3, 0xba, 0x9a, 0x58, 0x18, 0x4c, 0x7a, 0x8f,
	0xbc, 0x91, 0x5a, 0x72, 0x24, 0x77, 0xb2, 0x17, 0x07, 0x58, 0x72, 0x16, 0x23, 0x93, 0x67, 0x29,
	0xa4, 0x64, 0x62, 0x15, 0x42, 0x8a, 0xbf, 0x08, 0x53, 0x87, 0x86, 0x5f, 0xf1, 0x68, 0x13, 0x9d,
	0xad, 0x78, 0x8d, 0x3e, 0x6a, 0xc1, 0x91, 0x6c, 0x9e, 0x3c, 0x34, 0x7c, 0x5d, 0x00, 0x60, 0x49,
	0x9f, 0x1c, 0xc1, 0x5c, 0xcb, 0x61, 0x8b, 0x54, 0xfb, 0xda, 0x38, 0x8c, 0xc6, 0xc2, 0xbb, 0x06,
	0x69, 0xe8, 0x6d, 0x86, 0x2a, 0xbd, 0x60, 0x4e, 0xb7, 0x32, 0x52, 0x89, 0x03, 0x53, 0x89, 0x2a,
	0xdd, 0x26, 0xca, 0x2c, 0xae, 0x07, 0xbf, 0x34, 0x48, 0xa5, 0xf8, 0x6b, 0x07, 0x8b, 0x87, 0xfa,
	0xf0, 0xa4, 0x44, 0x1d, 0x9e, 0x43, 0x36, 0xe1, 0x92, 0x5f, 0xb7, 0x9a, 0xc9, 0x7e, 0x7a, 0x94,
	0xad, 0xd3, 0xad, 0x80, 0xcb, 0xcb, 0x4b, 0x32, 0xad, 0xce, 0x33, 0x68, 0xa9, 0x2a, 0x5d, 0x06,
	0x2d, 0xff, 0x84, 0x02, 0xd3, 0x59, 0x9d, 0xed, 0xc0, 0x20, 0xca, 0x20, 0x0c, 0x92, 0x7b, 0x20,
	0x0c, 0xa2, 0xb9, 0x92, 0xe9, 0x2c, 0xcf, 0xc9, 0x33, 0x89, 0x69, 0xc8, 0x67, 0x28, 0xdf, 0xce,
	0x50, 0x73, 0x38, 0x8f, 0x71, 0xbb, 0x40, 0xcd, 0x4b, 0x73, 0x7a, 0x48, 0x9e, 0xc6, 0xc3, 0x5c,
	0x22, 0x1e, 0x07, 0xd4, 0x57, 0xcf, 0xa2, 0x44, 0x5c, 0x73, 0x5a, 0x0d, 0x75, 0x44, 0x7b, 0x04,
	0x46, 0xe5, 0x01, 0x40, 0x54, 0x96, 0xe7, 0x07, 0xea, 0x99, 0x58, 0xf0, 0x2a, 0xda, 0x34, 0x90,
	0x1b, 0xd4, 0xa1, 0xcc, 0x16, 0xc4, 0x06, 0xa3, 0x5e, 0xa3, 0x7d, 0x41, 0x81, 0x52, 0xec, 0x3d,
	0x80, 0xdb, 0xfc, 0xc4, 0x00, 0xf0, 0xd9, 0x0f, 0xd9, 0x39, 0xb4, 0x2b, 0x95, 0x52, 0x08, 0x16,
	0xf1, 0x2f, 0x52, 0x69, 0xb4, 0x7e, 0xcb, 0xad, 0x53, 0x07, 0x8f, 0xfb, 0xf4, 0xa2, 0x1f, 0xa6,
	0x33, 0xd5, 0x9a, 0x57, 0xd1, 0x66, 0x8f, 0x72, 0xab, 0x75, 0xca, 0x4f, 0xf9, 0x18, 0x1a, 0x0d,
	0xaa, 0x3d, 0x0d, 0xc5, 0x08, 0x33, 0xca, 0xd6, 0x18, 0xb7, 0x10, 0xb6, 0x92, 0x1f, 0x84, 0xa2,
	0xfd, 0xc9, 0x38, 0x14, 0xd8, 0x4f, 0x64, 0x97, 0x4b, 0x30, 0x2a, 0x74, 0x07, 0x69, 0x2b, 0x0c,
	0x78, 0x12, 0xee, 0x96, 0xbc, 0x03, 0xe6, 0x02, 0xcf, 0xa8, 0xd6, 0x25, 0xf5, 0xb9, 0x8a, 0x5e,
	0x66, 0x7c, 0xdf, 0x3c, 0x5c, 0x10, 0x67, 0x10, 0x28, 0x92, 0x53, 0xdc, 0x11, 0xcd, 0x27, 0x3a,
	0x4c, 0xf0, 0xfe, 0xe0, 0x71, 0x15, 0xad, 0x1d, 0xa3, 0xf4, 0xe9, 0xa1, 0xf0, 0xa6, 0xc8, 0xa6,
	0x8f, 0x23, 0x8a, 0x3d, 0x81, 0x81, 0xbc, 0x1d, 0xa6, 0xfd, 0x56, 0x13, 0x57, 0x47, 0x26, 0x6d,
	0xd0, 0x93, 0x83, 0xcd, 0x9e, 0x84, 0xa4, 0x99, 0x0a, 0x41, 0xf4, 0x18, 0x82, 0xf5, 0x85, 0x59,
	0x6c, 0x56, 0x83, 0x3a, 0xa8, 0x17, 0x1f, 0x18, 0xd5, 0xa0, 0x82, 0x3e, 0x0f, 0x68, 0x3e, 0x47,
	0x85, 0xa7, 0x2d, 0x7f, 0x35, 0x04, 0x8a, 0x3c, 0x89, 0xc4, 0x86, 0x03, 0x0d, 0xdd, 0x24, 0x50,
	0x52, 0xc8, 0x1b, 0x0e, 0x91, 0x03, 0x05, 0x79, 0x13, 0xe6, 0xa5, 0x86, 0x55, 0x98, 0x41, 0xe0,
	0x85, 0x7b, 0xd4, 0x23, 0x28, 0xd4, 0xba, 0xca, 0x97, 0x70, 0x70, 0x16, 0xa5, 0xb6, 0xaf, 0x70,
	0x1c, 0xfa, 0xac, 0xd7, 0x96, 0x86, 0xc3, 0xb4, 0x0e, 0x97, 0x4d, 0x6a, 0x53, 0x36, 0x93, 0x05,
	0xeb, 0x24, 0xcc, 0x2c, 0xdc, 0x22, 0x28, 0xa0, 0x95, 0x75, 0x5e, 0xc0, 0x85, 0x9e, 0x99, 0x91,
	0xb1, 0x85, 0x1b, 0x04, 0x5b, 0x70, 0x39, 0x22, 0xae, 0x21, 0x3c, 0xfc, 0x2a, 0x81, 0x47, 0x69,
	0x25, 0xf0, 0x8c, 0xbb, 0xd4, 0xf3, 0x0d, 0x1b, 0x8d, 0xe1, 0x70, 0xdc, 0x2f, 0x84, 0xd0, 0xb2,
	0x3b, 0xe0, 0xad, 0x10, 0x94, 0x99, 0x4d, 0x42, 0xcd, 0x6f, 0xb6, 0x6c, 0x9f, 0x1e, 0x9a, 0x4c,
	0x65, 0xb7, 0x69, 0x15, 0x07, 0x2c, 0x61, 0x2b, 0xcf, 0x71, 0xb8, 0x5d, 0x0e, 0xb6, 0x12, 0x41,
	0x91, 0x45, 0x28, 0x05, 0xe8, 0xde, 0x58, 0xf1, 0x9b, 0xb4, 0x6a, 0x1d, 0x58, 0x55, 0xb4, 0x93,
	0xa3, 0x82, 0x13, 0x3c, 0x77, 0x4f, 0x64, 0x92, 0x1a, 0xcc, 0xb7, 0x55, 0xe9, 0x98, 0x78, 0xa6,
	0x27, 0x0c, 0xe0, 0xae, 0x3b, 0x88, 0x92, 0xab, 0x85, 0xb0, 0x83, 0x67, 0x53, 0x2d, 0x13, 0xc8,
	0xc8, 0x36, 0x5c, 0x4e, 0x55, 0x24, 0x2c, 0x6e, 0xa9, 0x8b, 0xe3, 0x72, 0x4b, 0x2f, 0x24, 0x10,
	0x71, 0x2d, 0x4b, 0xea, 0xe8, 0xcb, 0x30, 0x27, 0x86, 0xce, 0x76, 0x0d, 0xd3, 0x72, 0x6a, 0x95,
	0xa6, 0x67, 0xb9, 0x9e, 0x15, 0x1c, 0xa3, 0x7d, 0x3c, 0xbc, 0xa4, 0x5c, 0xd5, 0x67, 0x38, 0xc4,
	0x26, 0x07, 0xd8, 0x15, 0xf9, 0x6c, 0xd4, 0x0c, 0xdb, 0x76, 0x8f, 0xc2, 0xb1, 0xc7, 0x21, 0xc6,
	0xcd, 0x28, 0x27, 0x9c, 0x22, 0xc2, 0x56, 0x0e, 0x17, 0x17, 0x04, 0xe7, 0x2c, 0xb0, 0x2a, 0x80,
	0x77, 0x1c, 0xc1, 0x6f, 0xe4, 0x9b, 0xa0, 0xbc, 0x6f, 0x54, 0xeb, 0xad, 0x66, 0x25, 0x83, 0x8d,
	0xd1, 0x5c, 0x1e, 0x7d, 0xee, 0x95, 0xbe, 0x38, 0xf8, 0x3a, 0xa2, 0xc9, 0xe0, 0xe3, 0xf9, 0xfd,
	0x0e, 0x39, 0xe5, 0xcf, 0xe6, 0x80, 0xb4, 0x27, 0x93, 0x06, 0x08, 0x0e, 0x49, 0xb4, 0xe9, 0xc0,
	0x73, 0x1b, 0xfd, 0x48, 0xe2, 0xa8, 0x41, 0xe2, 0x4c, 0x7a, 0xbd, 0xe5, 0x20, 0xd1, 0x7d, 0x5d,
	0x98, 0xa1, 0x52, 0x8d, 0xeb, 0x9e, 0xdb, 0x20, 0x56, 0x64, 0x9f, 0xca, 0xd5, 0x05, 0x6e, 0x3f,
	0x8b, 0x63, 0xe7, 0xca, 0xa6, 0xda, 0x2a, 0xbb, 0xe5, 0x92, 0x6d, 0x78, 0x34, 0x96, 0xad, 0x2d,
	0x66, 0xc1, 0x33, 0xb3, 0x4f, 0x8c, 0xa4, 0xc5, 0xbf, 0xfc, 0x63, 0xa7, 0x2a, 0x36, 0x1d, 0x2f,
	0x45, 0xc0, 0xb7, 0x7d, 0xee, 0xb0, 0x2b, 0x9c, 0xd8, 0xd6, 0x5d, 0x6f, 0xef, 0xd8, 0xa9, 0x96,
	0x3f, 0xae, 0xc0, 0x7c, 0x27, 0xba, 0x93, 0xe7, 0x81, 0x58, 0x7e, 0x25, 0x1a, 0xdd, 0x37, 0x5b,
	0x96, 0x47, 0xcd, 0xe4, 0xde, 0xa9, 0x6a, 0xf9, 0x61, 0x71, 0x9e, 0xcd, 0x54, 0x3b, 0x8b, 0xc9,
	0x5a, 0x36, 0xbf, 0x69, 0x5c, 0x2a, 0x97, 0x50, 0xed, 0x2c, 0x5f, 0xe7, 0x00, 0x61, 0x31, 0xed,
	0x63, 0x0a, 0xa8, 0x69, 0x12, 0x70, 0x43, 0x66, 0x75, 0x7d, 0x4f, 0x68, 0xfd, 0x78, 0xe2, 0x5f,
	0xe5, 0x40, 0x6a, 0x8e, 0xeb, 0xd6, 0xb6, 0xdb, 0x32, 0x57, 0x8d, 0xc0, 0xb8, 0x61, 0x04, 0xf4,
	0xc8, 0x38, 0x56, 0x87, 0x50, 0x41, 0xd8, 0xb2, 0x1c, 0xea, 0xdd, 0x35, 0x54, 0x95, 0x00, 0x0c,
	0xd7, 0xdf, 0x6b, 0xbd, 0x67, 0x4b, 0xfd, 0xa8, 0x42, 0x54, 0x66, 0x4a, 0x2c, 0x6f, 0x89, 0x6a,
	0xd4, 0x8f, 0x5e, 0xc6, 0x94, 0xe5, 0x1b, 0x7b, 0x51, 0x4a, 0x4e, 0xfb, 0x9c, 0x02, 0x10, 0xaf,
	0x29, 0x99, 0xbb, 0xbd, 0x4a, 0xe6, 0x6e, 0xef, 0x32, 0x14, 0x11, 0x04, 0xb5, 0xd1, 0x21, 0x64,
	0xfb, 0x47, 0xfa, 0x19, 0x78, 0xbd, 0x10, 0x84, 0xeb, 0xeb, 0x2e, 0xa8, 0x42, 0x2a, 0x20, 0xa6,
	0xe8, 0xa8, 0xa1, 0xc7, 0x36, 0x5c, 0x6c, 0xac, 0xea, 0x13, 0x8d, 0xe8, 0x37, 0x6e, 0x83, 0x57,
	0x60, 0x34, 0xee, 0x8c, 0xcf, 0x2a, 0x90, 0x7b, 0x13, 0xad, 0xe2, 0xbd, 0xf6, 0xf9, 0x22, 0x14,
	0x72, 0xaf, 0xb1, 0x82, 0x8f, 0xc0, 0x44, 0x9c, 0x8b, 0x9d, 0x38, 0x21, 0xc5, 0x72, 0x27, 0xa1,
	0x98, 0x76, 0x04, 0xb3, 0xa1, 0x57, 0x89, 0xd4, 0xcf, 0x65, 0xaf, 0x46, 0x3e, 0x08, 0x33, 0x72,
	0x33, 0x58, 0x1d, 0x72, 0x7f, 0x9f, 0xe8, 0xaf, 0xbf, 0x58, 0x1d, 0xa1, 0x89, 0x6f, 0xec, 0xf7,
	0x17, 0x72, 0x99, 0x35, 0xeb, 0x34, 0x20, 0xff, 0xa5, 0x02, 0x0f, 0x87, 0x4e, 0x2c, 0xb2, 0x6a,
	0xc6, 0x26, 0x45, 0x50, 0xa1, 0x36, 0x6d, 0xc8, 0x0d, 0x59, 0xea, 0xd6, 0x90, 0xec, 0x1a, 0x16,
	0x75, 0x1a, 0xac, 0xd9, 0xb4, 0xa1, 0x5f, 0xf4, 0x32, 0xf3, 0x59, 0x1e, 0xae, 0xf3, 0x27, 0xf5,
	0x63, 0x28, 0x7f, 0x13, 0x8c, 0x08, 0x3c, 0x03, 0x0c, 0xe7, 0x3a, 0x9c, 0xf5, 0x03, 0x23, 0x68,
	0xf9, 0x62, 0x2c, 0x17, 0x07, 0xbb, 0x83, 0xa4, 0x8b, 0xd2, 0xda, 0x2b, 0x30, 0x19, 0x7a, 0xf8,
	0xc6, 0xc3, 0xd9, 0x77, 0x33, 0xb4, 0xef, 0x55, 0xd2, 0xe5, 0xd9, 0xa0, 0x64, 0x71, 0x7e, 0xee,
	0x34, 0x9c, 0x7f, 0x72, 0xf7, 0x96, 0x0f, 0xc3, 0x78, 0xa4, 0xfa, 0x76, 0x3c, 0x32, 0x3b, 0xd5,
	0x99, 0xdf, 0x77, 0x28, 0x30, 0xc9, 0x68, 0x91, 0x3c, 0x6f, 0xcc, 0x3e, 0x99, 0x6b, 0x3b, 0x83,
	0xcc, 0x77, 0x3f, 0x83, 0x1c, 0x3a, 0x41, 0x7b, 0x9a, 0xa1, 0x48, 0xbd, 0xd1, 0xb2, 0xcc, 0x01,
	0x38, 0xea, 0x1c, 0x14, 0xa3, 0x95, 0x4d, 0xd8, 0x34, 0x05, 0x2a, 0x16, 0x30, 0x96, 0x29, 0x54,
	0x3d, 0xcb, 0x14, 0xab, 0x5d, 0x21, 0x10, 0x57, 0x5b, 0x98, 0x14, 0xe7, 0x66, 0x0e, 0xd6, 0x78,
	0xeb, 0xbe, 0xd9, 0x62, 0xb2, 0xf9, 0x75, 0x03, 0x46, 0x45, 0xeb, 0x6a, 0x2d, 0xcb, 0x44, 0xa3,
	0xa0, 0x2f, 0x6e, 0x62, 0x4d, 0xd2, 0x81, 0xc6, 0x04, 0xb9, 0x04, 0xa3, 0x7e, 0x60, 0x78, 0x41,
	0x25, 0x60, 0xa6, 0x18, 0x9a, 0x0a, 0x45, 0x1d, 0x30, 0x09, 0x8d, 0x33, 0xed, 0x7f, 0x53, 0x40,
	0x4d, 0xdf, 0x4c, 0x48, 0x57, 0xaf, 0x9c, 0xb8, 0xfa, 0x78, 0xd5, 0xc1, 0x7d, 0xf5, 0xc1, 0x56,
	0x1d, 0x74, 0x59, 0x14, 0xab, 0x0e, 0xfb, 0x8d, 0xc2, 0xf1, 0xdf, 0x8d, 0xc2, 0x59, 0x5e, 0xd9,
	0xfd, 0x6b, 0xe5, 0x35, 0x98, 0xab, 0xf2, 0x9b, 0x79, 0x95, 0x34, 0xc7, 0x0a, 0x51, 0x56, 0x4d,
	0x5d, 0xdc, 0xe3, 0x8c, 0xfb, 0x76, 0x98, 0x6f, 0xb8, 0xa6, 0x75, 0x60, 0x65, 0x14, 0xe4, 0xac,
	0x3e, 0x1b, 0xe6, 0xa7, 0x4a, 0x5e, 0x83, 0xb9, 0xd0, 0x4a, 0x4a, 0x17, 0x1c, 0xe2, 0x35, 0x8a,
	0xec, 0x54, 0xb9, 0x73, 0x50, 0xac, 0x1a, 0xa1, 0x93, 0xd4, 0x30, 0x42, 0x16, 0xaa, 0xe2, 0xb2,
	0x21, 0xf9, 0x46, 0x20, 0xb1, 0xfe, 0x86, 0xf4, 0x6e, 0x18, 0x4d, 0x61, 0xe7, 0x75, 0x77, 0x57,
	0x4b, 0xcf, 0x67, 0x5d, 0x35, 0x64, 0x29, 0xb2, 0x65, 0x34, 0xc9, 0x22, 0x08, 0x47, 0xbc, 0x8a,
	0x50, 0x92, 0x2a, 0x2d, 0x46, 0x74, 0x7e, 0x3a, 0x3d, 0xc9, 0xb3, 0x42, 0x3f, 0x4b, 0x46, 0xd3,
	0x57, 0xe0, 0x9c, 0xb9, 0x5f, 0xe9, 0x48, 0x9e, 0x22, 0xb6, 0x7d, 0xde, 0xdc, 0xdf, 0xca, 0x26,
	0xd0, 0xb3, 0x30, 0xd3, 0x70, 0xef, 0xb2, 0x82, 0x6e, 0xb2, 0x42, 0xc0, 0x0a, 0x09, 0x66, 0xde,
	0x72, 0xe5, 0x1a, 0x1f, 0x85, 0x89, 0x94, 0x03, 0xe1, 0x28, 0x56, 0x32, 0x6e, 0x25, 0x5c, 0x07,
	0x2b, 0xd1, 0xe2, 0x1d, 0x1d, 0x02, 0x71, 0xbe, 0x1c, 0x43, 0x42, 0xf5, 0xb1, 0x21, 0x10, 0x79,
	0x3b, 0x30, 0x35, 0x3a, 0x91, 0x20, 0x36, 0x2a, 0xca, 0xf4, 0x5e, 0xd3, 0xf2, 0x8c, 0x48, 0x72,
	0xcb, 0x1d, 0x1f, 0xe7, 0x1d, 0x8f, 0x21, 0x52, 0x1d, 0xbf, 0x03, 0x93, 0x4c, 0xc7, 0xae, 0xec,
	0x1b, 0x9e, 0x67, 0xa1, 0x4f, 0xe4, 0x81, 0x3b, 0x3f, 0xd1, 0xbb, 0x69, 0x4c, 0xe3, 0xbe, 0xce,
	0xcb, 0xf0, 0xc3, 0x39, 0x3f, 0x99, 0x40, 0x5e, 0x85, 0xf3, 0x07, 0x96, 0xe7, 0x07, 0xa8, 0xc2,
	0x67, 0x8c, 0x48, 0x09, 0x1b, 0xb6, 0x80, 0x30, 0x7b, 0x08, 0x92, 0x6a, 0xd9, 0x2b, 0x70, 0xce,
	0x36, 0x3a, 0x97, 0x57, 0x79, 0xc7, 0x18, 0x48, 0x66, 0xf1, 0x4e, 0xbb, 0x25, 0x93, 0x3d, 0x77,
	0x4b, 0xde, 0x0e, 0x33, 0x78, 0xbe, 0xcd, 0xe7, 0x8b, 0x64, 0x49, 0x12, 0xb9, 0x28, 0xb1, 0xfc,
	0x55, 0x0e, 0x12, 0xdb, 0x8f, 0xdb, 0x30, 0x2a, 0x2c, 0x0c, 0x24, 0xe3, 0x54, 0x6f, 0xab, 0x9b,
	0x8f, 0xb0, 0x30, 0x17, 0x91, 0x90, 0xb0, 0x1f, 0xfd, 0x2e, 0xff, 0x78, 0x0e, 0x20, 0xce, 0x22,
	0x1f, 0x82, 0x71, 0x81, 0x5e, 0x28, 0x27, 0x4a, 0xef, 0xd3, 0x9f, 0x44, 0x05, 0x7b, 0x58, 0x6c,
	0xa9, 0x50, 0xd7, 0x69, 0xad, 0x65, 0x1b, 0x9e, 0x3e, 0xb6, 0x2f, 0xa5, 0x67, 0xae, 0x66, 0xb9,
	0xcc, 0xd5, 0xec, 0x35, 0xd0, 0x7c, 0xb7, 0xe5, 0x55, 0x69, 0xa5, 0xdb, 0xa4, 0xe3, 0x32, 0xe9,
	0x22, 0x87, 0x5c, 0xed, 0x34, 0xf5, 0x5e, 0x03, 0x4d, 0xf4, 0xaa, 0x1b, 0x2e, 0x2e, 0xa6, 0x2e,
	0x72, 0xc8, 0x4e, 0xb8, 0xb4, 0x97, 0x60, 0x4c, 0xee, 0x29, 0xda, 0x4f, 0xa2, 0xaf, 0xe2, 0x3c,
	0x84, 0x67, 0xab, 0x8a, 0xc8, 0x42, 0xc3, 0x4d, 0xcd, 0x69, 0xbf, 0x96, 0x0b, 0xb7, 0x3d, 0xa3,
	0xc9, 0x45, 0xce, 0xcb, 0x67, 0xba, 0x7c, 0x55, 0x97, 0x0e, 0x72, 0xff, 0x51, 0x0b, 0xf1, 0xb3,
	0xf7, 0x45, 0x88, 0x6b, 0x1f, 0x55, 0xa0, 0x94, 0x12, 0x14, 0x64, 0x35, 0x54, 0x60, 0xa4, 0x45,
	0xb4, 0xab, 0x0a, 0x16, 0xe9, 0x3e, 0x42, 0x61, 0xc1, 0x25, 0xf4, 0x31, 0x28, 0x09, 0x35, 0x28,
	0xec, 0xab, 0xa0, 0x3a, 0xdf, 0x76, 0x8d, 0x28, 0xa0, 0x7d, 0x36, 0xb2, 0x81, 0x51, 0x58, 0xae,
	0x44, 0x6b, 0xb8, 0x64, 0xb7, 0x68, 0xbd, 0x27, 0x50, 0xb8, 0x7e, 0x23, 0x92, 0x27, 0x41, 0x6d,
	0xf3, 0x32, 0xe0, 0x6e, 0x65, 0x67, 0xf4, 0x52, 0x35, 0x75, 0x80, 0xf9, 0x4e, 0x38, 0x17, 0x26,
	0x51, 0x33, 0x74, 0xa1, 0x78, 0x2b, 0x72, 0xa1, 0x60, 0x43, 0x3e, 0xa6, 0x2f, 0xc4, 0x20, 0x7b,
	0x11, 0x04, 0xdf, 0x90, 0xff, 0x4b, 0x05, 0xd4, 0x84, 0x8e, 0xcd, 0x4c, 0x88, 0x2a, 0x14, 0xb9,
	0x33, 0x11, 0x93, 0x68, 0x5c, 0x0a, 0xbc, 0xda, 0xad, 0x13, 0x69, 0x04, 0x71, 0xc2, 0x4e, 0x88,
	0x66, 0x69, 0xa8, 0xbe, 0xb7, 0x76, 0x4b, 0x8f, 0xf1, 0x92, 0x5d, 0x98, 0x48, 0xb2, 0x86, 0x50,
	0xe0, 0x1f, 0xef, 0xbb, 0x26, 0x7d, 0x3c, 0xc1, 0x12, 0xda, 0x13, 0x40, 0xda, 0x2b, 0xe6, 0x87,
	0xc6, 0x6b, 0xb7, 0xc4, 0x09, 0xef, 0xca, 0xe6, 0xda, 0xb2, 0xae, 0x2a, 0xda, 0xdf, 0xe7, 0x33,
	0x81, 0xf7, 0xa1, 0xe4, 0x36, 0x99, 0x50, 0x4e, 0x9e, 0x17, 0x4e, 0x3c, 0xf7, 0x6c, 0x5f, 0xad,
	0x8a, 0x10, 0x2d, 0xee, 0x34, 0x97, 0x46, 0xea, 0x3a, 0x65, 0x13, 0x5a, 0x1f, 0x77, 0x9b, 0x3b,
	0x4e, 0x7c, 0xd6, 0x78, 0x0d, 0xe6, 0x0c, 0xcf, 0x0a, 0x0e, 0x1b, 0xae, 0xe4, 0x67, 0x27, 0x8b,
	0xc3, 0x99, 0x30, 0x3b, 0x2a, 0x83, 0x52, 0xf1, 0x1a, 0xcc, 0x45, 0xf1, 0x3a, 0x52, 0xe5, 0xb8,
	0x52, 0x3f, 0x13, 0x66, 0x27, 0xcb, 0xbd, 0x04, 0xf3, 0xf1, 0xae, 0x57, 0x5c, 0x10, 0x39, 0x74,
	0x08, 0x0f, 0x26, 0x66, 0x42, 0x53, 0x21, 0x2a, 0x88, 0x8c, 0x68, 0xc2, 0x5c, 0x93, 0x7a, 0x07,
	0xae, 0xd7, 0xa8, 0x70, 0xa2, 0xc4, 0x3b, 0xbe, 0xc3, 0x27, 0xd9, 0xf1, 0x9d, 0x16, 0xd8, 0x76,
	0x9a, 0x3b, 0x4e, 0xb4, 0xdf, 0xab, 0xb5, 0x20, 0xb7, 0xd3, 0x44, 0xe1, 0xc9, 0xc9, 0x25, 0x24,
	0x29, 0x5f, 0xfd, 0x44, 0xb0, 0x8c, 0xe8, 0x42, 0x69, 0x0e, 0x2f, 0xc4, 0xaf, 0xb8, 0xce, 0x5d,
	0xca, 0x54, 0x7e, 0x71, 0xa4, 0x9e, 0xc7, 0x98, 0x18, 0x51, 0x2a, 0x6b, 0xbc, 0x3a, 0x84, 0x5b,
	0x62, 0x2b, 0x6e, 0xf3, 0x58, 0x1d, 0xc6, 0x2d, 0x31, 0xf6, 0x33, 0x2a, 0x71, 0x56, 0xfb, 0xae,
	0x7c, 0x68, 0x29, 0x44, 0x83, 0xe6, 0x0f, 0x60, 0x70, 0xbd, 0x0c, 0x0b, 0xd1, 0x60, 0x74, 0x58,
	0xd5, 0x66, 0x43, 0x80, 0xe4, 0xb9, 0x12, 0xb9, 0x2d, 0x33, 0xbe, 0x64, 0x43, 0x2c, 0x0e, 0xc6,
	0x62, 0x12, 0xf7, 0xe3, 0x68, 0xbd, 0x02, 0x73, 0x91, 0x46, 0x22, 0x5a, 0xd4, 0xe2, 0x61, 0x0f,
	0x92, 0x47, 0x38, 0x33, 0x21, 0x94, 0x1c, 0xc7, 0xc0, 0x27, 0x0f, 0xc1, 0xd8, 0x5d, 0xea, 0xa1,
	0xc4, 0xc1, 0x36, 0x0d, 0x23, 0x67, 0x8c, 0x8a, 0x34, 0xc1, 0x0f, 0x8f, 0x44, 0x8c, 0x5b, 0x73,
	0x6d, 0x03, 0xb7, 0xd2, 0xdd, 0xc0, 0xdd, 0x6f, 0x1d, 0x54, 0x1a, 0x34, 0x38, 0x74, 0x4d, 0xde,
	0x7d, 0x34, 0xcb, 0x96, 0xa6, 0x6f, 0xd0, 0xe0, 0xb6, 0x4f, 0xbd, 0x55, 0x7e, 0xb9, 0x51, 0x08,
	0xba, 0xcb, 0x21, 0x86, 0x1b, 0x88, 0x60, 0x57, 0x94, 0xdf, 0xc2, 0xe2, 0xb8, 0x2b, 0xf1, 0x16,
	0x4c, 0xa7, 0xc7, 0x05, 0x6b, 0xdf, 0x87, 0x59, 0xd1, 0xad, 0x48, 0x86, 0xf8, 0xb2, 0x98, 0x7d,
	0xaa, 0xb7, 0x98, 0x8d, 0x31, 0xea, 0xd3, 0x34, 0xa3, 0x0e, 0xed, 0x77, 0x87, 0xa0, 0x24, 0x07,
	0xe9, 0x60, 0xc2, 0xf0, 0xbe, 0xd9, 0x65, 0x19, 0x3b, 0x08, 0xb9, 0xcc, 0x1d, 0x84, 0xc4, 0x8a,
	0x9a, 0x4f, 0xad, 0xa8, 0x5d, 0x14, 0x83, 0xa1, 0x6e, 0x8a, 0x41, 0x15, 0xe6, 0x52, 0x2b, 0xb1,
	0xe1, 0xd5, 0xe2, 0xa1, 0xee, 0x41, 0xbf, 0xb4, 0x84, 0xd7, 0xa7, 0x8d, 0x54, 0x0a, 0x8e, 0xd1,
	0xa3, 0x30, 0x7a, 0xd0, 0xb2, 0x6d, 0xc1, 0x78, 0xe2, 0x28, 0x8f, 0x9f, 0x68, 0x01, 0xcb, 0xe0,
	0xb4, 0x4d, 0xba, 0xb3, 0x8d, 0x74, 0x71, 0x67, 0xeb, 0x6e, 0x7c, 0x14, 0x7a, 0x18, 0x1f, 0x57,
	0x60, 0x4c, 0x36, 0x3e, 0xc4, 0x01, 0x5b, 0x78, 0xb2, 0x28, 0x59, 0x14, 0xe4, 0x69, 0x98, 0xaa,
	0xd9, 0xee, 0xbe, 0x61, 0x0b, 0xc3, 0xde, 0xad, 0xd6, 0x2b, 0x91, 0x75, 0xa6, 0xf2, 0x2c, 0xb4,
	0xd9, 0xdd, 0x6a, 0x7d, 0xc3, 0xec, 0xa8, 0xfc, 0x8f, 0xf6, 0x52, 0xfe, 0xb5, 0x8f, 0x2b, 0x49,
	0x06, 0xd3, 0x69, 0x40, 0x96, 0xe0, 0x2c, 0xe7, 0x12, 0xc1, 0x5b, 0xfd, 0xe8, 0x0b, 0xa2, 0xc4,
	0xc9, 0xef, 0x5f, 0x1d, 0xc0, 0xec, 0x75, 0x23, 0xa8, 0x1e, 0x4a, 0x8d, 0xb1, 0xf8, 0xfe, 0xe1,
	0x66, 0x96, 0x0e, 0xd3, 0xd5, 0x58, 0x4b, 0xcd, 0x18, 0x59, 0x99, 0xd1, 0x7e, 0x3a, 0x97, 0x59,
	0x11, 0xeb, 0xf7, 0x6d, 0x28, 0x78, 0x34, 0xe8, 0x7b, 0x87, 0x37, 0x1b, 0x4b, 0xb4, 0xc3, 0x3b,
	0xe2, 0xd1, 0xe0, 0x74, 0x5b, 0xb9, 0xdf, 0xa1, 0xc4, 0x7b, 0xb9, 0xa7, 0x19, 0x93, 0xfb, 0xb5,
	0xbb, 0xfb, 0x5f, 0x2b, 0x50, 0x5a, 0x0e, 0x02, 0xa3, 0x7a, 0x18, 0x0b, 0xa3, 0x3b, 0x30, 0xc9,
	0xe7, 0x56, 0x28, 0xe2, 0x0d, 0xaf, 0x26, 0x9a, 0x38, 0xd0, 0x10, 0x95, 0x5a, 0x29, 0x29, 0xd7,
	0xbe, 0xdd, 0x90, 0xcb, 0xd8, 0x6e, 0x40, 0xfe, 0x95, 0xdb, 0xf4, 0x75, 0xe3, 0xdf, 0x37, 0xe2,
	0x43, 0x85, 0xf8, 0x50, 0x07, 0xf9, 0x37, 0xeb, 0x68, 0x48, 0x39, 0xd5, 0xd1, 0xd0, 0x0f, 0xe4,
	0x33, 0x2b, 0x6b, 0x3b, 0xc1, 0x90, 0xaa, 0x3d, 0xc5, 0x09, 0x46, 0xb2, 0x86, 0xf6, 0x13, 0x8c,
	0x64, 0xfe, 0xe9, 0x4f, 0x30, 0x7e, 0x49, 0x39, 0xc9, 0x11, 0x46, 0xcf, 0xcb, 0x1f, 0x09, 0x19,
	0x3f, 0xd4, 0x45, 0xc6, 0xc7, 0xd3, 0x25, 0x7f, 0xaa, 0xe9, 0xb2, 0x0a, 0xf3, 0xf1, 0x95, 0xe8,
	0x14, 0x4f, 0x5c, 0x89, 0x78, 0x82, 0xd5, 0x2b, 0xfb, 0xe4, 0x4c, 0xc4, 0x4d, 0xc6, 0xb1, 0xde,
	0xeb, 0x80, 0x85, 0x0d, 0x76, 0x37, 0x12, 0x2b, 0xdd, 0x98, 0xf5, 0x71, 0x3c, 0x67, 0x49, 0xb5,
	0x69, 0x1a, 0x86, 0xd1, 0x1b, 0x59, 0x10, 0x98, 0x7f, 0x84, 0x67, 0x32, 0xa9, 0x9a, 0xef, 0x3b,
	0x4f, 0x9f, 0x7c, 0xe2, 0x7d, 0x3e, 0x07, 0x25, 0xae, 0x9b, 0xff, 0x83, 0x55, 0x91, 0xce, 0xb7,
	0xb1, 0x9e, 0xcc, 0x6f, 0x69, 0xad, 0x60, 0x78, 0x50, 0xad, 0xe0, 0xec, 0x80, 0x5a, 0xc1, 0x48,
	0x5f, 0x5a, 0x81, 0x4c, 0xd3, 0xd3, 0x30, 0x9b, 0x24, 0x8e, 0x73, 0x83, 0x8a, 0xe3, 0x48, 0x2b,
	0x90, 0x1a, 0x73, 0x62, 0xad, 0x20, 0xc5, 0x24, 0xd9, 0x5a, 0x41, 0xb2, 0xa2, 0x93, 0x6a, 0x05,
	0x6d, 0x58, 0xfe, 0x11, 0x6b, 0x05, 0xdf, 0x83, 0xbc, 0xd2, 0xa6, 0x15, 0xf0, 0xbd, 0xb9, 0x01,
	0xb5, 0x82, 0xf4, 0x10, 0x95, 0xcc, 0xd4, 0xc4, 0xee, 0x78, 0x6e, 0x91, 0xeb, 0x74, 0x6e, 0x21,
	0x78, 0x39, 0xa9, 0x21, 0x7c, 0x5d, 0x78, 0xf9, 0x53, 0x0a, 0x4c, 0xed, 0x1d, 0x3b, 0xd5, 0xb4,
	0x3d, 0x77, 0x5f, 0xf6, 0xe8, 0x3a, 0x9c, 0x1f, 0xe5, 0x3a, 0x9c, 0x1f, 0x69, 0x9f, 0xce, 0xb7,
	0x37, 0x86, 0x51, 0xe6, 0x5b, 0x15, 0xd0, 0x50, 0x1a, 0x25, 0xb5, 0x3a, 0x36, 0x03, 0xf8, 0x78,
	0xcb, 0x8d, 0x7c, 0xb9, 0xd7, 0x89, 0x49, 0x0a, 0x3b, 0x9b, 0x05, 0x7c, 0xa7, 0x5a, 0xbf, 0xe0,
	0xb7, 0x67, 0xf3, 0xac, 0xd3, 0xcd, 0x8e, 0x5f, 0x50, 0xa0, 0x18, 0xa1, 0x1a, 0x40, 0x7d, 0xe8,
	0xf7, 0xce, 0x6c, 0xf2, 0x60, 0x3b, 0x9f, 0x3a, 0xd8, 0x8e, 0xe7, 0xd4, 0xd0, 0xa9, 0xe6, 0xd4,
	0xdf, 0xe5, 0x60, 0x42, 0x0a, 0x95, 0x26, 0xb4, 0x48, 0x69, 0x49, 0x1b, 0xd0, 0xff, 0x07, 0xd7,
	0xb5, 0x89, 0x78, 0x5d, 0x13, 0xdb, 0xba, 0x6c, 0x0d, 0x36, 0xf8, 0x5a, 0xe2, 0x3a, 0xf6, 0x71,
	0xd2, 0xd1, 0x6b, 0x8c, 0x65, 0x62, 0x0c, 0x15, 0xc7, 0x3e, 0xee, 0xdf, 0xdb, 0xe0, 0x55, 0x98,
	0xb7, 0x9c, 0xaa, 0xdd, 0x32, 0x69, 0x25, 0xe1, 0xa8, 0x6a, 0xa5, 0xb7, 0x7d, 0x66, 0x05, 0xd8,
	0xaa, 0xe4, 0xa6, 0x6a, 0x51, 0x9f, 0x7c, 0x8b, 0x02, 0xe7, 0xe5, 0x55, 0xce, 0xa3, 0x06, 0xba,
	0x76, 0xfa, 0x4c, 0x03, 0x72, 0xaa, 0xc7, 0xc2, 0x73, 0xbf, 0xab, 0x13, 0xc0, 0x8d, 0x68, 0x29,
	0xd4, 0xa9, 0x61, 0xae, 0xc4, 0x85, 0x97, 0x8a, 0xf5, 0xb5, 0xbb, 0xd4, 0x09, 0x5a, 0x86, 0xad,
	0x2f, 0xd4, 0x3a, 0x41, 0x69, 0x1f, 0x53, 0x12, 0xf4, 0x4f, 0x1b, 0x15, 0xf9, 0xaf, 0x95, 0x51,
	0xf1, 0x65, 0x05, 0xa6, 0xa4, 0x76, 0xdc, 0xf2, 0x0c, 0xcb, 0xfe, 0x07, 0xc0, 0x0c, 0xcf, 0xc1,
	0x8c, 0xf0, 0x7a, 0xc8, 0x64, 0x89, 0x29, 0x3f, 0x0c, 0x98, 0x27, 0xf1, 0xc5, 0x22, 0x4c, 0x51,
	0xa7, 0xd3, 0x16, 0xd1, 0x24, 0x75, 0xd2, 0x47, 0x5b, 0xdf, 0x97, 0xd1, 0x75, 0x36, 0x0e, 0x3b,
	0x50, 0xe2, 0x4d, 0xc7, 0x2b, 0x5b, 0x83, 0xf5, 0x9c, 0xf5, 0x34, 0xec, 0x39, 0x2b, 0x79, 0x3a,
	0xc5, 0xf3, 0x8f, 0x14, 0x98, 0xd8, 0xa4, 0xc6, 0x81, 0x74, 0x63, 0x76, 0x16, 0xce, 0x8a, 0xab,
	0x8a, 0x5c, 0xca, 0x88, 0xaf, 0x53, 0xb9, 0x04, 0x91, 0x17, 0x40, 0xe5, 0x68, 0x2a, 0x5d, 0x6e,
	0xe2, 0x97, 0x38, 0x48, 0x7c, 0x9a, 0xd7, 0x8f, 0x83, 0xf7, 0x50, 0xdf, 0x0e, 0xde, 0xda, 0xef,
	0xe4, 0x00, 0xa4, 0x8e, 0xbe, 0x1d, 0xf2, 0xf6, 0xa1, 0xdf, 0x97, 0x62, 0x1d, 0x6f, 0xb7, 0xb3,
	0x22, 0xe4, 0x75, 0x28, 0x44, 0xf7, 0xc2, 0x73, 0x7d, 0x9c, 0xe7, 0x46, 0xc5, 0xe3, 0x7b, 0xe1,
	0x11, 0x02, 0xd6, 0x0c, 0xef, 0x30, 0xb4, 0xd3, 0xfa, 0x6e, 0x86, 0x77, 0xe8, 0x93, 0x77, 0xc2,
	0x90, 0x4d, 0x8d, 0x03, 0x21, 0xa7, 0xbb, 0xba, 0x14, 0x26, 0xc7, 0x58, 0xc7, 0x72, 0xda, 0x96,
	0x74, 0x0b, 0xb0, 0x08, 0xc3, 0xf5, 0x5d, 0xbb, 0xe5, 0x8b, 0x13, 0x9d, 0x2d, 0xcb, 0x69, 0xf9,
	0xe2, 0xce, 0xde, 0x56, 0xcb, 0x0e, 0xc4, 0x4d, 0xc0, 0x55, 0xeb, 0xae, 0x9a, 0xe7, 0xb7, 0x03,
	0x5d, 0x53, 0xdc, 0x6c, 0x59, 0x71, 0x9d, 0xaa, 0x11, 0xa8, 0xc3, 0xda, 0x1f, 0xe7, 0x60, 0x3a,
	0x0c, 0xeb, 0xe7, 0x3a, 0xf7, 0x85, 0xd0, 0xb7, 0xdb, 0x08, 0xdd, 0x75, 0xb9, 0xce, 0xaa, 0xfd,
	0xbe, 0x92, 0x5c, 0xfb, 0x84, 0x22, 0xd1, 0x6c, 0x04, 0xf2, 0xf5, 0xb5, 0x77, 0xab, 0x67, 0xf0,
	0xc7, 0xf6, 0x9a, 0xaa, 0xe0, 0x8f, 0xcd, 0x5b, 0x6a, 0x8e, 0xff, 0x58, 0x53, 0xf3, 0xf8, 0xe3,
	0xc6, 0x2d, 0x75, 0x88, 0xff, 0x58, 0x53, 0x87, 0xf9, 0x75, 0x1e, 0xab, 0x4e, 0xd5, 0xb3, 0x3c,
	0x64, 0xb9, 0xb8, 0x81, 0xad, 0x8e, 0x20, 0xc8, 0xc6, 0xb6, 0x5a, 0xe0, 0x97, 0x2e, 0x9d, 0x63,
	0xb5, 0x88, 0x04, 0x16, 0x51, 0x98, 0x01, 0x8f, 0xbf, 0xc3, 0xa8, 0xc9, 0xa3, 0xda, 0x17, 0x73,
	0x30, 0xd9, 0x76, 0x1c, 0x44, 0x5e, 0x95, 0x69, 0x3d, 0xe0, 0x51, 0x12, 0x92, 0x5c, 0x6f, 0x23,
	0xf9, 0xb5, 0x81, 0xb0, 0x64, 0xd1, 0xfb, 0x55, 0x99, 0xde, 0x83, 0x36, 0x8a, 0x71, 0xfa, 0xfb,
	0x00, 0xcf, 0x68, 0xf9, 0xd8, 0x62, 0x94, 0x00, 0xc1, 0xf4, 0x57, 0x07, 0x65, 0x07, 0x7d, 0xa2,
	0x9a, 0x48, 0xd5, 0x1e, 0x4b, 0x5d, 0x85, 0x5d, 0x76, 0x4c, 0x31, 0xa2, 0x3b, 0x9e, 0xb8, 0x09,
	0xbb, 0xed, 0x06, 0x6a, 0x4e, 0xfb, 0x58, 0x1e, 0xa6, 0x31, 0x6e, 0x41, 0x2a, 0x6c, 0x63, 0x47,
	0x81, 0x39, 0xa0, 0x94, 0xc8, 0x8a, 0x1e, 0x11, 0x93, 0x90, 0x76, 0x0c, 0x86, 0x91, 0x3f, 0x19,
	0xea, 0xec, 0x28, 0x18, 0x59, 0x72, 0x7a, 0xa8, 0xa7, 0x9c, 0xbe, 0x0a, 0xd3, 0x91, 0x78, 0x96,
	0x74, 0x55, 0xdc, 0x05, 0x28, 0xea, 0x24, 0xcc, 0x93, 0xfc, 0xda, 0x5f, 0x86, 0x19, 0xab, 0xe6,
	0xb8, 0x1e, 0xad, 0x34, 0x78, 0x74, 0xd2, 0xf0, 0xe2, 0x72, 0xe2, 0xa2, 0xd2, 0x14, 0x87, 0x11,
	0x01, 0x4c, 0xc5, 0xdd, 0xe5, 0x5f, 0x52, 0x60, 0x82, 0x47, 0x96, 0xc0, 0x70, 0xa5, 0x8c, 0xd2,
	0x27, 0x5b, 0x5d, 0x3a, 0x8d, 0x5b, 0x67, 0x52, 0xe7, 0xee, 0x23, 0xa9, 0xb5, 0x2f, 0x01, 0x8c,
	0xc9, 0x91, 0x43, 0xc9, 0xdb, 0xa0, 0x54, 0x63, 0x3f, 0x2b, 0xfb, 0xc7, 0x95, 0x44, 0xc3, 0xc6,
	0x6b, 0x51, 0x78, 0x52, 0xd6, 0xbe, 0xbb, 0x30, 0x9d, 0x82, 0x93, 0xaf, 0x42, 0x2e, 0xf5, 0x8c,
	0xc8, 0x21, 0xea, 0x5b, 0xbc, 0x21, 0x63, 0xc5, 0x9b, 0x7e, 0xc5, 0xfa, 0xaa, 0xe5, 0x57, 0x3d,
	0x1a, 0x50, 0x7d, 0xb2, 0x96, 0xce, 0x25, 0x97, 0x60, 0xd4, 0x69, 0x35, 0x2a, 0x3c, 0x12, 0x09,
	0x9f, 0xcd, 0xe3, 0x3a, 0x38, 0x51, 0xec, 0x59, 0xa6, 0x5f, 0x8b, 0x60, 0x45, 0x18, 0x6d, 0xc9,
	0xf0, 0x8e, 0x91, 0x77, 0xc6, 0xc3, 0xa8, 0x46, 0xd7, 0x45, 0x2a, 0xd3, 0xbd, 0x6c, 0xc3, 0xab,
	0xd1, 0x4a, 0x1a, 0x9c, 0x70, 0xdd, 0x0b, 0x33, 0xaf, 0x27, 0xcb, 0x7c, 0x10, 0x26, 0xc3, 0x60,
	0x33, 0x54, 0x74, 0xdb, 0x17, 0x87, 0x6c, 0x57, 0x7b, 0x76, 0x39, 0x35, 0x65, 0x75, 0xd5, 0x48,
	0x26, 0x30, 0xb1, 0xa7, 0x72, 0xa2, 0xfa, 0xae, 0x17, 0x54, 0x5c, 0xcf, 0xa4, 0x3c, 0xcc, 0xcc,
	0xe8, 0x73, 0x57, 0x7a, 0x62, 0xc7, 0x58, 0xab, 0xd7, 0x8f, 0xf5, 0x09, 0xc4, 0xb0, 0xe7, 0x7a,
	0x01, 0xa6, 0x90, 0x1b, 0x30, 0xca, 0x71, 0xda, 0x56, 0xc3, 0x0a, 0x70, 0xcb, 0xaa, 0xc7, 0x72,
	0x83, 0xe8, 0x30, 0x7a, 0xa7, 0x0e, 0xb5, 0x28, 0xd8, 0x2e, 0x79, 0x1d, 0x46, 0x3d, 0xe3, 0x28,
	0xea, 0x75, 0xa1, 0xf7, 0x15, 0x82, 0xe4, 0x04, 0xd1, 0xc1, 0x0b, 0x7f, 0xa2, 0x8f, 0x5e, 0x87,
	0xf0, 0x3c, 0x91, 0xd7, 0xe5, 0xb8, 0x3e, 0x9f, 0x15, 0x97, 0x07, 0x2f, 0xdd, 0x6d, 0xc3, 0x04,
	0x6b, 0x8b, 0x44, 0x26, 0x18, 0x90, 0x4c, 0x63, 0x1e, 0x0f, 0xbd, 0xcc, 0x89, 0xb4, 0x02, 0x45,
	0x86, 0x8f, 0x93, 0x68, 0x74, 0x20, 0x12, 0x15, 0x3c, 0x11, 0xa1, 0x99, 0x1c, 0xc0, 0x24, 0xbf,
	0xef, 0x63, 0xfa, 0x51, 0x77, 0xc4, 0x05, 0xba, 0xa5, 0xfe, 0x9c, 0x88, 0xb3, 0xa2, 0x77, 0xea,
	0x25, 0x44, 0xba, 0xea, 0x87, 0x09, 0x64, 0x15, 0x16, 0xd2, 0x53, 0x2f, 0x96, 0x38, 0xe3, 0x69,
	0x89, 0x33, 0x9b, 0x98, 0x43, 0xb1, 0xe0, 0x79, 0x0d, 0xc6, 0xfc, 0xd6, 0x7e, 0x25, 0xc4, 0x84,
	0x37, 0xe6, 0xfa, 0x21, 0xa0, 0x98, 0xb0, 0x3a, 0xf8, 0xad, 0xfd, 0x50, 0x68, 0xf4, 0xa3, 0x22,
	0x97, 0xfa, 0xbf, 0x03, 0x59, 0x85, 0xb2, 0x98, 0x93, 0x12, 0x57, 0x34, 0x0d, 0x94, 0x58, 0xfe,
	0xbc, 0x8a, 0x8c, 0xd7, 0xa7, 0xe6, 0x2f, 0xe2, 0xaf, 0xc5, 0xcc, 0x13, 0xa2, 0x21, 0xab, 0x30,
	0x66, 0x63, 0x54, 0x63, 0x11, 0x4a, 0x68, 0x12, 0xd1, 0xf6, 0x11, 0x4a, 0x68, 0x94, 0x17, 0xc3,
	0x0f, 0xed, 0x79, 0x98, 0x6c, 0x93, 0x60, 0xa8, 0x51, 0x85, 0x32, 0x4c, 0xdc, 0x27, 0x66, 0x0a,
	0x96, 0xe5, 0xb4, 0x5c, 0xa6, 0xcf, 0x6a, 0xbf, 0xad, 0xc0, 0x42, 0xda, 0x95, 0x7d, 0xd9, 0x31,
	0x79, 0x90, 0x65, 0xf2, 0x01, 0x10, 0xde, 0xba, 0x95, 0x23, 0x2b, 0x38, 0x14, 0x47, 0x4f, 0xa1,
	0x32, 0xd5, 0x87, 0x2b, 0x44, 0x8c, 0x93, 0x59, 0x83, 0xc9, 0x14, 0x9f, 0x54, 0x60, 0x5a, 0xee,
	0x76, 0xc5, 0xa3, 0x7e, 0xcb, 0x0e, 0x7c, 0x71, 0x0f, 0xa4, 0xab, 0x5a, 0xb4, 0x19, 0xf7, 0x5b,
	0xc7, 0x52, 0x3a, 0xb1, 0xd3, 0x49, 0xbe, 0x66, 0xc2, 0x64, 0x1b, 0x20, 0xd9, 0x81, 0x91, 0xb0,
	0x22, 0x6e, 0x63, 0xbe, 0x38, 0x48, 0x3f, 0x22, 0xda, 0xe8, 0x21, 0x16, 0xed, 0x6f, 0x87, 0x41,
	0x8d, 0xd9, 0x51, 0xd4, 0xf2, 0x5e, 0x98, 0x49, 0x4f, 0x0c, 0x6e, 0x2c, 0x2a, 0x83, 0x18, 0x8b,
	0x24, 0x31, 0x61, 0xf8, 0xb9, 0x43, 0x35, 0x5c, 0x15, 0xfd, 0x56, 0xa3, 0x61, 0x60, 0x0c, 0xa4,
	0x5c, 0xef, 0x1d, 0xec, 0x74, 0x03, 0x17, 0xf7, 0xb0, 0x74, 0x48, 0x3d, 0x21, 0xa9, 0x43, 0x8c,
	0x64, 0x8b, 0x0b, 0xd8, 0x90, 0x50, 0xf9, 0x7e, 0x7d, 0x5f, 0xa4, 0x01, 0x07, 0x0c, 0x24, 0x85,
	0xe5, 0xc9, 0x53, 0x40, 0x02, 0x37, 0x30, 0xec, 0x50, 0x19, 0xe2, 0x31, 0x1e, 0x87, 0x30, 0x56,
	0xad, 0x8a, 0x39, 0xbc, 0x38, 0xc6, 0x50, 0x21, 0xef, 0x85, 0xc9, 0x58, 0x1c, 0x84, 0x4d, 0xe8,
	0xc3, 0x7d, 0x24, 0xdd, 0x47, 0xbd, 0x14, 0xca, 0x85, 0xb0, 0x1d, 0xb5, 0x0e, 0x1c, 0x77, 0xf6,
	0x34, 0x8c, 0x90, 0xc1, 0x79, 0xe5, 0x3f, 0x50, 0x60, 0x3c, 0x41, 0x61, 0xb2, 0xc1, 0x64, 0x1c,
	0x26, 0x70, 0x37, 0xc4, 0x3e, 0x8c, 0x3f, 0xe9, 0x46, 0xc7, 0xa8, 0x28, 0x8b, 0xf7, 0x93, 0xde,
	0x0f, 0x6a, 0x88, 0xea, 0xb4, 0x9a, 0x58, 0x49, 0x20, 0x8a, 0xf4, 0xdd, 0x4e, 0x9a, 0x6b, 0xbe,
	0x93, 0xe6, 0xaa, 0x7d, 0x77, 0x5e, 0xa8, 0x6d, 0x62, 0x39, 0x23, 0xaf, 0xc0, 0x0c, 0x2e, 0x86,
	0xbd, 0xf5, 0xe6, 0x29, 0x06, 0x97, 0x5e, 0x0c, 0x2e, 0xc1, 0xa8, 0x54, 0x3c, 0x8c, 0x84, 0x18,
	0x43, 0x92, 0x0f, 0x02, 0x48, 0x8b, 0x2d, 0xef, 0xf8, 0x73, 0xfd, 0x2e, 0xb6, 0x8b, 0xd1, 0x42,
	0xbb, 0x04, 0xf5, 0x65, 0xbf, 0x4a, 0x1d, 0xd3, 0x72, 0x6a, 0x7a, 0xd1, 0x8f, 0xd6, 0x5f, 0x1d,
	0x0a, 0x88, 0xbe, 0x4e, 0x8f, 0x85, 0x29, 0x71, 0x75, 0x20, 0xe4, 0xaf, 0xd3, 0xe3, 0x30, 0x90,
	0xc8, 0x88, 0xcf, 0xbf, 0xb5, 0xa7, 0xa0, 0x18, 0x2f, 0xf0, 0x18, 0x50, 0x26, 0xac, 0x59, 0xc8,
	0xe4, 0x55, 0x1a, 0x25, 0x28, 0xda, 0xeb, 0x30, 0x22, 0x10, 0x45, 0x11, 0x88, 0xce, 0x44, 0x11,
	0x88, 0x14, 0x29, 0x14, 0x46, 0x2e, 0x0e, 0x85, 0x91, 0x47, 0xcb, 0x78, 0xd3, 0x08, 0x28, 0x7a,
	0x25, 0x86, 0x51, 0x8a, 0x86, 0xb5, 0x25, 0x80, 0x58, 0x43, 0x20, 0xd3, 0x30, 0xcc, 0x15, 0x0b,
	0x05, 0xe7, 0x1e, 0xff, 0x60, 0x8a, 0xbf, 0x7b, 0x70, 0xe0, 0xd3, 0x40, 0x84, 0x8f, 0x16, 0x5f,
	0xda, 0xa7, 0x15, 0x18, 0xc5, 0xc2, 0x3c, 0x5e, 0x3e, 0x53, 0xc8, 0xab, 0xf8, 0x4b, 0x4c, 0x1f,
	0x71, 0x0a, 0x5b, 0xd4, 0xc7, 0xab, 0x71, 0x14, 0xfe, 0x0d, 0x93, 0xbc, 0x0c, 0x0b, 0x09, 0xb8,
	0xea, 0x61, 0xcb, 0xa9, 0x57, 0x9c, 0x56, 0x63, 0x5f, 0x0c, 0xd8, 0xb8, 0x3e, 0x2b, 0x95, 0x58,
	0x61, 0xd9, 0xdb, 0x98, 0x4b, 0x1e, 0x07, 0x15, 0xa1, 0xfd, 0x8a, 0x47, 0x1b, 0x86, 0xe5, 0x58,
	0x4e, 0x0d, 0x47, 0xa1, 0xa0, 0x97, 0x78, 0xba, 0x1e, 0x26, 0x6b, 0xff, 0xa9, 0x00, 0xc3, 0x3c,
	0x6e, 0xde, 0x8d, 0xac, 0xc3, 0x96, 0x01, 0x4f, 0x86, 0x43, 0xa7, 0xe8, 0x78, 0x0f, 0x54, 0xde,
	0x2e, 0x5c, 0x52, 0xae, 0xea, 0x13, 0xd1, 0x0e, 0x28, 0xdf, 0xfc, 0x7c, 0x0c, 0x26, 0xc2, 0xcd,
	0x4f, 0x79, 0xa7, 0x94, 0x81, 0x8e, 0x89, 0xad, 0x4f, 0x0e, 0xb8, 0x0a, 0x17, 0x98, 0x9d, 0x10,
	0x2a, 0x10, 0x3e, 0x5e, 0x0a, 0xb7, 0x71, 0xa8, 0xb8, 0x2c, 0x28, 0x60, 0x84, 0x80, 0xdc, 0xb3,
	0x57, 0xf5, 0x05, 0xa7, 0xd5, 0x88, 0x1e, 0x49, 0x58, 0x77, 0x3d, 0x3e, 0xa0, 0x38, 0xeb, 0x77,
	0x61, 0xec, 0xe8, 0x90, 0x7a, 0xb4, 0x52, 0xc5, 0x37, 0x48, 0x84, 0xbd, 0x3f, 0xe0, 0xe6, 0xc1,
	0xe8, 0x51, 0xfc, 0x8a, 0x09, 0x59, 0x81, 0x42, 0xa4, 0x72, 0x0d, 0x0f, 0xa8, 0x72, 0x8d, 0x88,
	0x95, 0x89, 0x5c, 0x00, 0xe0, 0x83, 0x1c, 0x3b, 0x65, 0xea, 0x45, 0x4c, 0xc1, 0x23, 0x98, 0xeb,
	0x30, 0x7a, 0xe0, 0xb9, 0x8d, 0xb0, 0xd1, 0x23, 0xfd, 0x6a, 0x36, 0xc0, 0x4a, 0x89, 0x76, 0x6a,
	0xc0, 0x83, 0x88, 0x54, 0xc2, 0x5d, 0xf1, 0x22, 0xf7, 0x1a, 0xf5, 0xf9, 0x4b, 0x29, 0x38, 0x72,
	0x73, 0x30, 0x7c, 0x60, 0x1b, 0x35, 0x1f, 0x95, 0x6f, 0x1c, 0x03, 0xfe, 0x4d, 0x2e, 0x40, 0x21,
	0x8a, 0xc4, 0xc0, 0xb4, 0xe9, 0x3c, 0xcb, 0x8b, 0x92, 0x7a, 0x1f, 0x4c, 0x8c, 0x3f, 0xf0, 0x83,
	0x09, 0x66, 0xc9, 0x25, 0xa7, 0x15, 0xbf, 0xbe, 0xc4, 0x06, 0xe4, 0xd9, 0x9e, 0x94, 0x5a, 0x94,
	0x1e, 0xc0, 0xe0, 0x97, 0x98, 0xaa, 0xc9, 0x84, 0xf2, 0x4f, 0x2a, 0x50, 0x4a, 0x01, 0x91, 0x17,
	0x31, 0x98, 0x8a, 0xc5, 0x63, 0xe2, 0x57, 0xe4, 0xda, 0x79, 0x38, 0x01, 0x7d, 0xda, 0xf2, 0x45,
	0xc4, 0x7c, 0xa9, 0x28, 0x1b, 0xec, 0x7d, 0x23, 0xa8, 0x1e, 0x56, 0x7c, 0xeb, 0x2d, 0x2a, 0x66,
	0x72, 0x11, 0x53, 0xf6, 0xac, 0xb7, 0x28, 0xb9, 0x09, 0xa3, 0x0e, 0xbd, 0x17, 0x08, 0x7c, 0x62,
	0x7b, 0xeb, 0xb1, 0x9e, 0x5d, 0xe0, 0x35, 0xe8, 0xc0, 0xca, 0xf2, 0xdf, 0xda, 0x0f, 0x28, 0x50,
	0x5c, 0xb7, 0x8d, 0x1a, 0xbf, 0x26, 0xaf, 0xc1, 0xc5, 0xba, 0x4e, 0x83, 0x96, 0xe7, 0xe0, 0xb1,
	0x1a, 0x3e, 0xf8, 0x26, 0x5e, 0x33, 0x11, 0x2f, 0x85, 0x28, 0xf8, 0x46, 0xde, 0x5e, 0xdd, 0x6a,
	0xb2, 0x39, 0xcd, 0x66, 0xce, 0x5a, 0xa3, 0x19, 0xc4, 0x06, 0x9f, 0xaf, 0xe6, 0x10, 0xcb, 0xba,
	0xeb, 0x55, 0xf9, 0xd3, 0x7b, 0xbb, 0x87, 0x86, 0x4f, 0xa3, 0xfc, 0x75, 0x1a, 0x54, 0x0f, 0xd5,
	0x21, 0xf2, 0x14, 0x5c, 0xe1, 0x30, 0x7b, 0x96, 0x53, 0xb3, 0x29, 0x02, 0x61, 0x5e, 0xac, 0x34,
	0xe3, 0x0c, 0x60, 0x82, 0xba, 0xa0, 0xed, 0xc0, 0xe8, 0x4d, 0xc3, 0x3f, 0xa4, 0x26, 0x86, 0xeb,
	0x21, 0x0f, 0x85, 0xf7, 0x46, 0x63, 0x4d, 0xaf, 0xb8, 0x74, 0x46, 0xdc, 0x1c, 0x8d, 0x42, 0xd0,
	0x33, 0x99, 0x11, 0x9f, 0x1b, 0x30, 0x80, 0x02, 0x75, 0x4c, 0xcc, 0xd6, 0xfe, 0xbd, 0x02, 0x25,
	0x24, 0xc9, 0xae, 0xc7, 0x56, 0x76, 0x3c, 0x3a, 0xbb, 0x04, 0xa3, 0x22, 0x0e, 0x2b, 0x6d, 0x06,
	0x87, 0x88, 0x75, 0x58, 0xe7, 0x73, 0x6e, 0x95, 0xa5, 0x90, 0x67, 0x61, 0x86, 0x9f, 0x73, 0x50,
	0xc1, 0x3f, 0x86, 0x5f, 0xc1, 0x6d, 0x70, 0x3c, 0xec, 0xd1, 0x89, 0xc8, 0xe4, 0x76, 0xbf, 0xbf,
	0x49, 0x8d, 0x03, 0x66, 0x70, 0x1d, 0x62, 0xc3, 0x2b, 0x1e, 0x6b, 0x79, 0x3f, 0x23, 0x25, 0x75,
	0x54, 0x1f, 0x3d, 0x94, 0x7a, 0xfd, 0x02, 0xcc, 0x76, 0xb0, 0x9c, 0xb9, 0x7e, 0x37, 0xed, 0x67,
	0x58, 0xcd, 0xda, 0xf7, 0x2b, 0xb0, 0xd0, 0xf1, 0xdd, 0x28, 0xf2, 0x12, 0x0c, 0xc7, 0xcc, 0xd8,
	0x97, 0xbc, 0xe0, 0xf0, 0xe4, 0x75, 0x80, 0x66, 0x44, 0x3a, 0x71, 0x30, 0xf3, 0x64, 0xcf, 0xd2,
	0x31, 0xb5, 0x75, 0xa9, 0xb8, 0xf6, 0x89, 0xe1, 0x4e, 0x6d, 0xd4, 0x69, 0x40, 0xde, 0x0f, 0x24,
	0xa1, 0xa1, 0xf6, 0xed, 0x25, 0xde, 0xa6, 0xa6, 0xf2, 0x8d, 0x16, 0xa1, 0x3a, 0xa2, 0x34, 0x7b,
	0x02, 0x26, 0xb9, 0xbe, 0xcc, 0x6b, 0xe0, 0xea, 0x32, 0x5f, 0x9b, 0x4b, 0x98, 0x81, 0xc5, 0xb9,
	0xb6, 0xfc, 0xcd, 0x30, 0x9d, 0xdc, 0xbe, 0x60, 0x66, 0x65, 0x23, 0xd4, 0xd9, 0x37, 0xbb, 0x0a,
	0xae, 0x4e, 0x9d, 0x5b, 0x94, 0xad, 0xff, 0x5d, 0x86, 0x8f, 0x06, 0xd4, 0xf3, 0x75, 0x62, 0xa6,
	0xd3, 0xfd, 0xae, 0x47, 0x6d, 0x43, 0xdd, 0xdc, 0x2e, 0x52, 0xd2, 0x62, 0xf8, 0xc4, 0xd2, 0xa2,
	0xfc, 0x7b, 0x0a, 0xcc, 0x66, 0xb7, 0xb8, 0x77, 0x5c, 0xed, 0x1e, 0xbb, 0x3f, 0x39, 0x9c, 0x6e,
	0x9d, 0x77, 0x7f, 0xbe, 0x36, 0xdb, 0xd0, 0xda, 0xe7, 0xc6, 0x81, 0xec, 0x35, 0xdd, 0x60, 0x93,
	0xa1, 0xe0, 0x11, 0x72, 0xd9, 0x3c, 0x61, 0xba, 0x32, 0x7e, 0x54, 0x02, 0xea, 0x35, 0x22, 0x5d,
	0x19, 0x93, 0x6e, 0x51, 0xaf, 0x81, 0xb2, 0x21, 0xe5, 0x2b, 0x11, 0xc7, 0x5a, 0x28, 0xca, 0x91,
	0x34, 0x42, 0xdf, 0x44, 0xa2, 0xc3, 0xa4, 0x5f, 0x75, 0x9b, 0x91, 0x97, 0x48, 0xbf, 0xf7, 0xcf,
	0x25, 0x95, 0xaa, 0x84, 0x08, 0xa4, 0x1b, 0x6b, 0xdf, 0x00, 0x65, 0xd1, 0xce, 0xe4, 0x95, 0x22,
	0xf9, 0x7a, 0xd0, 0x1c, 0x87, 0x48, 0xdc, 0x2a, 0xc2, 0xc2, 0x77, 0xe1, 0x52, 0x66, 0x61, 0xe9,
	0x1a, 0x32, 0x60, 0xf3, 0xfa, 0xa0, 0x75, 0x22, 0xe8, 0xba, 0x7e, 0x3e, 0xa3, 0xca, 0xf8, 0x4e,
	0xf2, 0x2b, 0x70, 0x8e, 0xde, 0x0b, 0x3c, 0xa6, 0x13, 0xb0, 0xa5, 0x27, 0x7d, 0xa9, 0x89, 0x5f,
	0x5d, 0x99, 0x47, 0x10, 0xbe, 0x38, 0x25, 0xef, 0x35, 0x7d, 0x8b, 0x02, 0x8f, 0x76, 0x28, 0x9f,
	0x6a, 0xfd, 0xe8, 0xc9, 0x5a, 0xff, 0x50, 0x56, 0xd5, 0xe9, 0x6b, 0xd5, 0x42, 0xdd, 0x3f, 0x3b,
	0xd0, 0x3e, 0xa2, 0x30, 0x0b, 0x3e, 0x02, 0x73, 0x1e, 0xb5, 0xe9, 0x5d, 0xc3, 0x09, 0xd2, 0x9d,
	0xe7, 0x7a, 0xdc, 0x5a, 0x57, 0x57, 0xa1, 0x36, 0x76, 0x8d, 0xef, 0x77, 0xe8, 0x1c, 0x6d, 0x95,
	0xc7, 0x73, 0x99, 0x09, 0x6b, 0x49, 0x12, 0xf0, 0x1e, 0xcc, 0xc6, 0xd5, 0x87, 0x36, 0x29, 0xd6,
	0xce, 0xf7, 0x7b, 0xaf, 0x0f, 0x58, 0x7b, 0xe8, 0x92, 0x24, 0x57, 0x3d, 0x1d, 0x55, 0x2d, 0x2a,
	0xc0, 0x9a, 0x3f, 0x12, 0xb1, 0xab, 0xeb, 0x54, 0xda, 0xc2, 0x94, 0x14, 0xb1, 0xf6, 0xe5, 0x01,
	0x6b, 0xe7, 0xbf, 0x76, 0x1c, 0x29, 0x82, 0xc9, 0xac, 0xdf, 0x96, 0x86, 0x0f, 0x37, 0x7c, 0x97,
	0x02, 0xb3, 0xd9, 0xa4, 0xea, 0x3f, 0x72, 0xff, 0xa3, 0xf2, 0xf5, 0x2f, 0x49, 0xf4, 0xc5, 0xd7,
	0xb9, 0x50, 0xfa, 0x3d, 0x05, 0xaa, 0x17, 0x56, 0x80, 0x11, 0xf5, 0xc4, 0x56, 0xc2, 0xf8, 0x92,
	0xf2, 0xbc, 0x5e, 0x8a, 0xb2, 0xd6, 0x31, 0xa7, 0xfc, 0xed, 0x0a, 0x4c, 0x65, 0x50, 0xf1, 0xfe,
	0x79, 0xe6, 0x0e, 0xd6, 0x9c, 0x9f, 0xca, 0x03, 0x69, 0x27, 0xeb, 0x00, 0xfe, 0x61, 0xdd, 0xc5,
	0x52, 0xee, 0xd4, 0x62, 0x69, 0xe8, 0xeb, 0x20, 0x96, 0xf2, 0xf7, 0x4d, 0x2c, 0x0d, 0x3f, 0x28,
	0xb1, 0xa4, 0xfd, 0xef, 0x4a, 0xdb, 0x6a, 0xc6, 0x34, 0xaa, 0x6a, 0x14, 0x43, 0x4f, 0xda, 0x6d,
	0x1e, 0xf0, 0xf2, 0x9d, 0xb4, 0x01, 0x39, 0x9d, 0xde, 0x71, 0x3e, 0x9d, 0x67, 0xd0, 0x57, 0x14,
	0x98, 0x8b, 0x9f, 0x21, 0x96, 0x1e, 0x9e, 0xa5, 0x01, 0x33, 0xa7, 0xd2, 0xa7, 0x04, 0x61, 0xdc,
	0x46, 0x05, 0x8d, 0xa4, 0xe9, 0xe4, 0xde, 0xbf, 0x88, 0xd7, 0x68, 0xc0, 0xb4, 0xec, 0x70, 0x7f,
	0xda, 0xcd, 0x3c, 0x12, 0x7b, 0xdf, 0x47, 0xfb, 0x79, 0xab, 0x89, 0x17, 0x3c, 0xf2, 0x83, 0x9c,
	0x57, 0x48, 0xaf, 0x77, 0xfc, 0xa6, 0x02, 0xe3, 0xc9, 0x1e, 0xf7, 0xfd, 0x58, 0xca, 0x87, 0x61,
	0x32, 0x7a, 0xaa, 0xc1, 0x0c, 0x0f, 0xb5, 0xb9, 0x62, 0xde, 0xf5, 0x6d, 0xfe, 0x0e, 0xa4, 0x0e,
	0x1f, 0x79, 0x61, 0x19, 0xfc, 0xfc, 0x3b, 0xf6, 0xc3, 0xca, 0x9f, 0x20, 0x14, 0xd2, 0xff, 0xa8,
	0xc0, 0xc5, 0xee, 0x87, 0x5e, 0xe4, 0x7d, 0x30, 0x24, 0xc5, 0x29, 0x7a, 0xf5, 0xe4, 0xc7, 0x67,
	0x18, 0x30, 0x6d, 0x69, 0xa8, 0xae, 0x1b, 0x47, 0x3a, 0xa2, 0xd4, 0x2e, 0x88, 0x67, 0xfc, 0x0b,
	0x80, 0xa9, 0xe2, 0x52, 0xf2, 0x4d, 0x7c, 0x49, 0x41, 0x55, 0xb4, 0x1f, 0x56, 0x60, 0x26, 0x03,
	0x25, 0x35, 0xc9, 0x2e, 0x8c, 0x9a, 0x7e, 0xcc, 0x30, 0xca, 0xc9, 0x18, 0x06, 0x4c, 0x3f, 0x62,
	0x94, 0x53, 0x05, 0xb8, 0xfa, 0xec, 0x30, 0x8c, 0x49, 0x0d, 0xbd, 0x7e, 0x3f, 0xef, 0x6a, 0x48,
	0x0b, 0xde, 0x68, 0x97, 0x05, 0xaf, 0xe7, 0x55, 0xa1, 0xaf, 0x81, 0x7f, 0x23, 0xd9, 0xcb, 0x08,
	0xdd, 0x34, 0xdc, 0xfb, 0xd5, 0x9c, 0x24, 0x87, 0xa7, 0xa2, 0x37, 0x91, 0x6f, 0xc4, 0xb1, 0x8e,
	0x4e, 0x71, 0xcf, 0x9e, 0xfa, 0x14, 0x17, 0xcc, 0xf8, 0x00, 0x77, 0x19, 0x2e, 0x60, 0x80, 0x9a,
	0x8e, 0xe1, 0x3c, 0x46, 0xb0, 0xaf, 0x65, 0x06, 0xd4, 0x21, 0xf6, 0xc9, 0x6d, 0x18, 0x37, 0xc5,
	0x25, 0x19, 0x59, 0x3d, 0x7b, 0x76, 0xc0, 0x16, 0x52, 0x53, 0x1f, 0x35, 0xf9, 0xdd, 0x9a, 0x8e,
	0x01, 0x2a, 0x8a, 0x27, 0x0c, 0x50, 0x01, 0xbd, 0x02, 0x54, 0x7c, 0x41, 0x01, 0x55, 0x66, 0x60,
	0x6c, 0xc1, 0x1d, 0x98, 0x92, 0x47, 0xd3, 0xdc, 0x97, 0xd7, 0xa2, 0x2b, 0x7d, 0x76, 0xef, 0xba,
	0xae, 0xc6, 0xe3, 0xb9, 0xba, 0xff, 0xb5, 0x8f, 0xbd, 0xf1, 0xeb, 0x39, 0xb9, 0x6b, 0x9c, 0xd4,
	0xfd, 0x8b, 0xef, 0xfe, 0xc3, 0xe9, 0xc4, 0x13, 0x50, 0xd2, 0x43, 0xc4, 0x04, 0xc4, 0x5e, 0xbf,
	0x0e, 0x05, 0xcf, 0x3d, 0x92, 0x35, 0xa3, 0xab, 0x7d, 0x4e, 0x0a, 0x6c, 0xf3, 0xa2, 0xee, 0x1e,
	0xe9, 0x23, 0x9e, 0x7b, 0x24, 0xee, 0x80, 0x4f, 0x38, 0xad, 0x46, 0x1c, 0x0e, 0xda, 0x17, 0x41,
	0x61, 0xc6, 0x9d, 0x56, 0x23, 0x0a, 0xff, 0xec, 0x97, 0xdf, 0x0b, 0x79, 0xdd, 0x3d, 0x22, 0xef,
	0x86, 0x49, 0xd1, 0xb6, 0xd4, 0x83, 0x69, 0x7d, 0x0b, 0xba, 0x12, 0x2f, 0x1f, 0xb1, 0xa7, 0xf6,
	0x89, 0x1c, 0xa8, 0x89, 0x57, 0x49, 0x79, 0x48, 0x93, 0xaf, 0x81, 0x06, 0xf3, 0x04, 0x8c, 0x5b,
	0xf1, 0xdd, 0xaf, 0x74, 0x28, 0xd7, 0x31, 0x2b, 0xba, 0xf4, 0x45, 0x4d, 0xd6, 0x20, 0x99, 0x85,
	0x71, 0x97, 0x22, 0xa1, 0x0b, 0x3c, 0x35, 0xc8, 0x10, 0xe8, 0xd3, 0x8d, 0x54, 0x0a, 0x92, 0xe2,
	0xdf, 0xa4, 0x49, 0xc1, 0x94, 0xb9, 0x16, 0x5c, 0x68, 0xb6, 0x82, 0x8a, 0x5c, 0x7b, 0xd6, 0x65,
	0xd5, 0x17, 0xba, 0xd5, 0x9f, 0x46, 0x1a, 0x5d, 0xb8, 0x9a, 0x6f, 0xa6, 0x72, 0x4e, 0x7f, 0x41,
	0xf5, 0xd3, 0xd2, 0x0d, 0xac, 0xbe, 0xad, 0xac, 0x9e, 0xbb, 0x4b, 0xf7, 0xeb, 0x3e, 0xd6, 0xf7,
	0xe6, 0x41, 0x8d, 0x2e, 0x6c, 0x86, 0xdc, 0xd6, 0xbf, 0xa1, 0xf3, 0x08, 0x4c, 0xc4, 0xc1, 0x59,
	0x24, 0xe3, 0x66, 0x2c, 0xbc, 0xe4, 0x82, 0xb4, 0xcb, 0xba, 0xbf, 0x9a, 0xcf, 0xba, 0xbf, 0x4a,
	0xaa, 0x30, 0x23, 0x41, 0x4a, 0x36, 0xc3, 0xc8, 0xc9, 0x6c, 0x86, 0xa9, 0x46, 0x32, 0x31, 0x6c,
	0x4e, 0xdb, 0x61, 0xdc, 0x90, 0x88, 0x8f, 0x94, 0x3c, 0x89, 0x7b, 0xa4, 0xed, 0x24, 0x8e, 0x0b,
	0x83, 0xe4, 0x31, 0xdc, 0x83, 0x5c, 0x47, 0xb5, 0x1f, 0x54, 0x52, 0x03, 0xc4, 0xe6, 0xc0, 0x03,
	0x5b, 0x40, 0x4e, 0x6c, 0xc4, 0xfc, 0x62, 0x0e, 0x26, 0x13, 0xaf, 0x9a, 0x0d, 0x68, 0x31, 0x27,
	0x66, 0xc6, 0xd9, 0xd3, 0xa8, 0x63, 0xd1, 0x16, 0x7f, 0x7e, 0xc0, 0x2d, 0xfe, 0x0d, 0x18, 0x0b,
	0x1f, 0x49, 0x93, 0xfc, 0x9e, 0xfb, 0x75, 0x5a, 0x1f, 0x15, 0x65, 0x59, 0x12, 0x79, 0x09, 0x66,
	0xf8, 0xb3, 0x1c, 0x34, 0xb5, 0xeb, 0x3b, 0x8c, 0x07, 0xb2, 0xf9, 0xe7, 0xaf, 0x5e, 0xd5, 0xa7,
	0x04, 0x44, 0xe2, 0xf4, 0xe2, 0x33, 0x0a, 0xcc, 0xed, 0x05, 0xae, 0x47, 0xcd, 0xd4, 0xeb, 0xeb,
	0x07, 0x2e, 0xd9, 0x8e, 0x7a, 0x1e, 0x59, 0x0d, 0xbd, 0xde, 0xbd, 0x4c, 0x0f, 0x48, 0x48, 0x28,
	0x1c, 0x9c, 0xd7, 0x40, 0xe3, 0x21, 0x04, 0x5b, 0xd5, 0x2a, 0xf5, 0xfd, 0x83, 0x96, 0x2d, 0xc4,
	0xb8, 0xd9, 0x3e, 0xea, 0x17, 0x31, 0x92, 0x60, 0x04, 0x28, 0xf4, 0xaa, 0x78, 0xf8, 0xff, 0xad,
	0x02, 0x73, 0x89, 0xda, 0xf4, 0xdd, 0x95, 0xfb, 0x2f, 0xf4, 0x56, 0x61, 0x98, 0x32, 0x11, 0x76,
	0x42, 0x99, 0xc7, 0x0b, 0x9f, 0xf8, 0x5c, 0x41, 0xbb, 0x07, 0x17, 0xc2, 0x28, 0x07, 0x6d, 0x94,
	0xf5, 0xf9, 0x45, 0xd6, 0x4e, 0xf7, 0xdc, 0x07, 0x1c, 0xa6, 0x74, 0x08, 0x87, 0xcf, 0x2a, 0xdd,
	0xaa, 0x66, 0x12, 0xc1, 0x84, 0xe9, 0x03, 0xc3, 0x62, 0x63, 0x97, 0xb5, 0x18, 0x3e, 0xdf, 0x77,
	0xf5, 0xf1, 0xb8, 0xe9, 0x93, 0x1c, 0xe1, 0xfd, 0x58, 0x04, 0xb5, 0xff, 0x2e, 0x07, 0x97, 0xe2,
	0xc0, 0x04, 0xd9, 0xd4, 0xab, 0x27, 0xf5, 0x3c, 0xde, 0xf2, 0xd7, 0xba, 0x86, 0x05, 0xe9, 0x8e,
	0x51, 0x32, 0x4d, 0x79, 0xf0, 0xc8, 0x58, 0x67, 0x2c, 0x7f, 0xab, 0x02, 0x13, 0xc9, 0xec, 0x93,
	0x0a, 0xab, 0xfc, 0x29, 0x84, 0x95, 0xf6, 0x7f, 0x28, 0xdd, 0xe9, 0xc2, 0x85, 0xfd, 0xf8, 0x7d,
	0x1b, 0xd3, 0x51, 0xef, 0x7e, 0x8c, 0xe6, 0x6b, 0x30, 0x7f, 0x83, 0x06, 0xd9, 0xa3, 0xb8, 0x18,
	0x2d, 0x4d, 0xb8, 0xd6, 0x37, 0x8d, 0x20, 0xa0, 0x5e, 0xe8, 0x6d, 0x35, 0x19, 0x77, 0x7d, 0x97,
	0x67, 0x68, 0x3f, 0xa6, 0x74, 0x40, 0xc6, 0xbb, 0xfe, 0x60, 0x26, 0xd4, 0xc9, 0xbb, 0xfe, 0x3a,
	0x5c, 0xb8, 0x41, 0x03, 0x71, 0x37, 0x5a, 0x0a, 0x82, 0xb0, 0x17, 0x18, 0x01, 0x65, 0xfd, 0x7f,
	0x02, 0x26, 0xe5, 0x3b, 0xd5, 0x72, 0xb0, 0x8e, 0x52, 0x35, 0xbe, 0x52, 0x8d, 0xd3, 0xfa, 0xe3,
	0x39, 0x20, 0x7b, 0xc7, 0x4e, 0x55, 0x7e, 0x69, 0xf4, 0xc0, 0x25, 0x6b, 0x19, 0x41, 0x20, 0xfb,
	0xdd, 0xe2, 0x90, 0xa2, 0x40, 0xae, 0xc1, 0x25, 0xe1, 0x0b, 0x84, 0x57, 0xb4, 0x0f, 0xa9, 0xe1,
	0x05, 0xfb, 0xd4, 0x08, 0x52, 0x51, 0x21, 0xf3, 0xfa, 0x79, 0x0e, 0xc6, 0x5a, 0x72, 0x33, 0x04,
	0x8a, 0x9a, 0x44, 0x5e, 0x85, 0xf3, 0xa1, 0x4b, 0x51, 0x56, 0x04, 0x52, 0xe4, 0xff, 0xbc, 0xbe,
	0xc0, 0x61, 0x32, 0x62, 0x8f, 0x92, 0x87, 0x60, 0x2c, 0x71, 0xcb, 0x9c, 0x87, 0xb4, 0x18, 0x95,
	0x88, 0xa1, 0xfd, 0xb4, 0xd2, 0x8d, 0xac, 0x8c, 0x13, 0x3e, 0x04, 0x53, 0xd8, 0x8b, 0xd8, 0xb8,
	0x44, 0x67, 0x16, 0xa5, 0x77, 0xe8, 0xb9, 0x76, 0x02, 0xeb, 0x18, 0xd4, 0x37, 0x4a, 0x43, 0x9a,
	0x9f, 0x98, 0x21, 0xbe, 0x8f, 0xfb, 0x1b, 0x84, 0xcb, 0xcd, 0x26, 0x35, 0x4c, 0xea, 0xb1, 0x66,
	0x8b, 0x15, 0xa1, 0x98, 0xe4, 0xdc, 0x1e, 0xd7, 0x46, 0x3a, 0x62, 0xc2, 0x2d, 0x3e, 0xfe, 0x1e,
	0x02, 0xb2, 0xce, 0xe3, 0xf2, 0x06, 0x5f, 0xb3, 0x2a, 0x2e, 0x13, 0xa2, 0xea, 0x20, 0x1e, 0xcb,
	0xda, 0xa3, 0xde, 0x5d, 0xea, 0xa9, 0x39, 0xed, 0x43, 0x30, 0x8a, 0x58, 0xd6, 0x5d, 0xaf, 0x61,
	0x04, 0xf7, 0x3f, 0x08, 0xfd, 0x77, 0x77, 0xa4, 0x00, 0x1b, 0xb8, 0x75, 0x00, 0x66, 0x6a, 0x24,
	0xbc, 0x18, 0xba, 0x9e, 0xc5, 0x4b, 0x6d, 0xd5, 0x8b, 0x58, 0xf4, 0x74, 0x33, 0xf6, 0xf7, 0x15,
	0x18, 0xd5, 0x9b, 0xd5, 0x4d, 0xb7, 0xb6, 0xe6, 0x04, 0xde, 0x31, 0x59, 0x80, 0x02, 0x43, 0x24,
	0xd1, 0x60, 0xc4, 0x6b, 0x56, 0xc3, 0x10, 0x95, 0x1e, 0x7d, 0xb3, 0xc5, 0x78, 0x3d, 0x2b, 0x8e,
	0x4b, 0x5e, 0x9f, 0x11, 0xd9, 0xa9, 0x8d, 0xaa, 0x87, 0x99, 0x84, 0xe6, 0xe5, 0xf0, 0x99, 0x7b,
	0xb1, 0x77, 0x32, 0x26, 0x12, 0xf1, 0x11, 0x32, 0xf2, 0x76, 0x98, 0xf7, 0xa8, 0xdf, 0x74, 0x1d,
	0x9f, 0x66, 0xee, 0xfb, 0xe5, 0xf5, 0xd9, 0x30, 0x3f, 0x85, 0xfe, 0x51, 0x98, 0x88, 0x4a, 0x72,
	0xfc, 0xc3, 0x88, 0x7f, 0x3c, 0x4c, 0xc5, 0x0a, 0xb4, 0xcf, 0x29, 0x30, 0x76, 0x07, 0x5d, 0xa6,
	0x5a, 0xfb, 0x6f, 0xd0, 0x6a, 0xf0, 0x80, 0xf6, 0x4a, 0x87, 0x4e, 0xa3, 0x9c, 0x67, 0xad, 0xb1,
	0xf9, 0xcc, 0xd7, 0x1d, 0x7e, 0x57, 0x09, 0x03, 0x29, 0x62, 0x9f, 0xe2, 0x07, 0x96, 0x9e, 0x80,
	0xc9, 0x70, 0x2b, 0x04, 0x3d, 0xc6, 0x22, 0x65, 0x78, 0x58, 0x17, 0x77, 0xbd, 0xb1, 0x00, 0xce,
	0x8e, 0x6d, 0x18, 0x3d, 0xb0, 0x6c, 0x7c, 0x9e, 0x83, 0x69, 0xf4, 0xb9, 0x93, 0x78, 0x36, 0x02,
	0xc7, 0x80, 0x57, 0x18, 0x5f, 0x0b, 0xe3, 0x20, 0xc7, 0x55, 0x4c, 0xc2, 0xb8, 0x88, 0xef, 0xb9,
	0x82, 0x81, 0x0b, 0xc5, 0x0b, 0x36, 0x72, 0x74, 0x4a, 0xf1, 0x6e, 0xa5, 0xf4, 0xae, 0x12, 0x55,
	0x87, 0xb4, 0x9f, 0x3a, 0x0b, 0xd3, 0x7c, 0x85, 0x4a, 0x75, 0xd0, 0x8e, 0xf6, 0x94, 0x52, 0x1d,
	0x9c, 0xe8, 0xfe, 0xea, 0x61, 0x16, 0x32, 0x39, 0x11, 0x25, 0x88, 0xd8, 0x6e, 0x8a, 0xdb, 0x5f,
	0x07, 0x95, 0x57, 0x23, 0xbd, 0x08, 0xcd, 0xe9, 0x34, 0x78, 0x65, 0xf8, 0x29, 0x91, 0xae, 0x74,
	0x94, 0x4c, 0x20, 0xb7, 0xe0, 0x2c, 0x7f, 0x26, 0x4e, 0x18, 0x67, 0xef, 0x38, 0x59, 0x15, 0xfc,
	0x6a, 0xae, 0x2e, 0x70, 0x95, 0x7f, 0x48, 0x81, 0x52, 0xaa, 0x6a, 0xb2, 0x0d, 0x39, 0xb7, 0x29,
	0xa8, 0x76, 0xf2, 0x9b, 0xcc, 0x4b, 0xf9, 0xfa, 0x8d, 0x35, 0x3d, 0xe7, 0x36, 0xc9, 0x75, 0x28,
	0x3a, 0xf4, 0xa8, 0x72, 0x82, 0xf3, 0xa0, 0x82, 0x43, 0x8f, 0xf0, 0x57, 0xf9, 0x93, 0x39, 0x18,
	0x95, 0xda, 0x4f, 0x1c, 0x18, 0xe5, 0x3d, 0x90, 0x87, 0xf8, 0xc6, 0x69, 0x48, 0xb2, 0xc8, 0xff,
	0x89, 0xe3, 0xa0, 0xe5, 0x7d, 0x5f, 0x87, 0x6a, 0x94, 0x42, 0x9e, 0x84, 0xc9, 0x26, 0xf5, 0xaa,
	0xd4, 0x09, 0x8c, 0x5a, 0xf8, 0x5e, 0x1f, 0x8e, 0xb5, 0xa2, 0xab, 0x71, 0x86, 0x68, 0xdc, 0x63,
	0x50, 0x32, 0xf6, 0x7d, 0xd7, 0x8e, 0x9f, 0xf6, 0x13, 0x2b, 0xfd, 0x44, 0x98, 0xcc, 0x01, 0xb5,
	0x17, 0x00, 0xe2, 0x5a, 0xb9, 0x7f, 0xf8, 0xbe, 0x2f, 0xee, 0xf3, 0xee, 0xba, 0xbe, 0xb8, 0xcf,
	0xbe, 0x4d, 0x6b, 0xe2, 0x3e, 0xfb, 0xb2, 0x73, 0xac, 0x0e, 0x69, 0x2f, 0x43, 0x29, 0xc5, 0x9a,
	0x18, 0x1a, 0x37, 0x35, 0x8c, 0xaa, 0x82, 0xef, 0xc4, 0x22, 0xf9, 0x78, 0x25, 0x6a, 0x4e, 0xfb,
	0xaa, 0x02, 0x65, 0x3e, 0x97, 0xf6, 0xaa, 0x87, 0xb4, 0x61, 0xa4, 0xa6, 0xcf, 0x05, 0x80, 0xd4,
	0xbc, 0x19, 0xd7, 0x8b, 0x47, 0x51, 0x2d, 0x8b, 0x50, 0x8a, 0x0e, 0xa6, 0x7d, 0x1e, 0xbb, 0x22,
	0x9f, 0x78, 0x38, 0x2e, 0xce, 0xdd, 0x71, 0xec, 0x63, 0xed, 0xdb, 0x15, 0x28, 0x49, 0xf5, 0x20,
	0x8e, 0x39, 0x98, 0xaa, 0xb7, 0xbf, 0xd8, 0xa3, 0x2a, 0xf8, 0x50, 0x95, 0x1c, 0xa6, 0x06, 0x93,
	0x73, 0x09, 0xf8, 0x58, 0x29, 0x55, 0x87, 0x24, 0x78, 0x29, 0xb9, 0x40, 0x16, 0x60, 0xa6, 0x9e,
	0x15, 0xc6, 0x4d, 0x55, 0xb5, 0xcf, 0x8f, 0xc0, 0x30, 0x36, 0x84, 0xbc, 0x07, 0x26, 0x78, 0x3f,
	0xa3, 0xe7, 0x8e, 0xfb, 0x38, 0xac, 0xc3, 0xa2, 0x82, 0x63, 0x44, 0x31, 0x7d, 0xfc, 0x48, 0xfe,
	0x8c, 0xe9, 0x27, 0x89, 0x70, 0x4e, 0x3f, 0x94, 0xe0, 0x5b, 0xc0, 0xe1, 0x2b, 0x3e, 0x5f, 0x65,
	0xc4, 0x64, 0xb8, 0xd2, 0xb3, 0x56, 0xb1, 0x2a, 0xe9, 0x63, 0x47, 0xf2, 0x1a, 0x75, 0x10, 0x85,
	0xc5, 0x15, 0x9d, 0x89, 0x62, 0x34, 0xf7, 0x71, 0xed, 0x3c, 0x6b, 0x7d, 0x88, 0xf6, 0xb6, 0x93,
	0x5c, 0x71, 0x00, 0xb3, 0x09, 0xa1, 0x9a, 0x8e, 0x05, 0x7d, 0x75, 0xd0, 0x69, 0x17, 0x6e, 0x59,
	0xa7, 0xea, 0x39, 0x86, 0x0b, 0xa2, 0x3f, 0x3e, 0x32, 0x4d, 0x5b, 0x75, 0x05, 0xac, 0xee, 0x5a,
	0xef, 0x6e, 0x65, 0x31, 0xb7, 0x5e, 0xa6, 0x9d, 0x19, 0xbf, 0x12, 0x32, 0x44, 0xe4, 0x96, 0x7e,
	0x76, 0x20, 0x86, 0x08, 0xdf, 0x0d, 0x5c, 0x1a, 0xa9, 0x6f, 0x33, 0xf5, 0xcb, 0x16, 0x9c, 0x11,
	0xbd, 0x27, 0xb8, 0x0e, 0xe7, 0x85, 0x6b, 0x47, 0xd3, 0xa3, 0x77, 0x2d, 0xb7, 0x15, 0x45, 0x6a,
	0x66, 0x6a, 0x1a, 0x4d, 0x46, 0x8a, 0x5b, 0xe0, 0xa0, 0xbb, 0x02, 0x52, 0xf4, 0x89, 0xc1, 0x91,
	0xd7, 0xe1, 0x92, 0xd1, 0x6c, 0xda, 0xc7, 0x95, 0xa6, 0xe7, 0xbe, 0xc1, 0x9f, 0x39, 0xac, 0xb8,
	0x4e, 0xe5, 0xc0, 0xf2, 0xa8, 0xc9, 0xe9, 0x95, 0x8c, 0x75, 0x7b, 0x0e, 0xa1, 0x77, 0x23, 0xe0,
	0x1d, 0x67, 0x9d, 0x81, 0xf2, 0x69, 0xf0, 0x0a, 0x9c, 0x93, 0x0a, 0xca, 0x28, 0x23, 0x07, 0xbe,
	0xa2, 0x3e, 0x7f, 0x10, 0x15, 0x88, 0xd1, 0xa0, 0x1e, 0xfd, 0x3a, 0x8c, 0x27, 0x66, 0x03, 0xca,
	0x1b, 0x89, 0xaf, 0x84, 0x04, 0x92, 0x38, 0x40, 0xcd, 0xe1, 0xe3, 0xd9, 0x6d, 0x83, 0xa4, 0xe6,
	0xb5, 0x17, 0x05, 0xb2, 0x88, 0x62, 0x18, 0x76, 0xc2, 0xb3, 0x02, 0xab, 0x6a, 0xd8, 0xe2, 0x0c,
	0x9e, 0x93, 0x56, 0xc8, 0xc7, 0x4d, 0xf7, 0x48, 0xcd, 0x69, 0xbf, 0x9c, 0x03, 0x22, 0xa3, 0x13,
	0x12, 0x98, 0xb6, 0x09, 0xb2, 0x89, 0xe7, 0xd6, 0x4f, 0xc6, 0x37, 0x8b, 0x29, 0x09, 0x26, 0x0b,
	0xc4, 0xfe, 0x0f, 0xe2, 0xb6, 0x93, 0x90, 0x68, 0x80, 0xe5, 0x07, 0x78, 0xcd, 0x6d, 0x22, 0xf9,
	0xbc, 0x5a, 0x66, 0x58, 0xc8, 0xa1, 0x53, 0x85, 0x3a, 0xfd, 0xfd, 0xb3, 0x00, 0x12, 0x6f, 0x24,
	0x45, 0x99, 0x92, 0x16, 0x65, 0x4f, 0x01, 0x09, 0x3c, 0xab, 0x56, 0xa3, 0x5e, 0xbb, 0x31, 0xa1,
	0x8a, 0x9c, 0x78, 0x97, 0xff, 0x36, 0x8c, 0xf1, 0x75, 0xd0, 0xe4, 0x77, 0x6b, 0x78, 0xcf, 0xbb,
	0xde, 0x0f, 0x8b, 0x9b, 0x22, 0x16, 0x66, 0x93, 0xdf, 0xb9, 0xab, 0xc6, 0x1f, 0xcc, 0x3a, 0xf6,
	0x99, 0x99, 0xe0, 0x54, 0x69, 0xc5, 0x69, 0x35, 0xc4, 0x0e, 0xe4, 0x68, 0x98, 0xb6, 0xdd, 0x6a,
	0x90, 0x77, 0xc3, 0x18, 0xee, 0x5c, 0x86, 0x0f, 0x9b, 0x0c, 0x9f, 0x68, 0xf7, 0x73, 0x14, 0x71,
	0xf0, 0x50, 0x67, 0xe5, 0x9f, 0x1d, 0x82, 0x51, 0xa9, 0x49, 0x0f, 0x6c, 0x31, 0xd1, 0x61, 0x2a,
	0x24, 0x5a, 0xf8, 0x08, 0x69, 0xfc, 0x54, 0x42, 0x3f, 0x41, 0xb1, 0x26, 0x45, 0x71, 0xa1, 0x3c,
	0xb3, 0xb6, 0xda, 0x59, 0x06, 0xc0, 0x50, 0x6f, 0xfd, 0x38, 0x6b, 0xb5, 0x58, 0x4c, 0xa9, 0xf3,
	0xed, 0x26, 0xc4, 0x2d, 0x98, 0x4e, 0x4b, 0x3b, 0xec, 0xc2, 0x70, 0xdf, 0x5d, 0x20, 0xcd, 0x84,
	0x0c, 0xc4, 0x3e, 0x7c, 0x20, 0xa6, 0x8b, 0x74, 0x90, 0x23, 0x78, 0x6a, 0xc0, 0xfb, 0xcf, 0x02,
	0x51, 0x7c, 0xb2, 0x43, 0x3e, 0x0c, 0xd3, 0xc9, 0x45, 0x48, 0x28, 0x70, 0x67, 0x7b, 0x33, 0x4e,
	0xbb, 0x1c, 0x0a, 0x7d, 0xb9, 0xe5, 0x34, 0xed, 0x57, 0x73, 0xa0, 0x72, 0x4a, 0xda, 0x16, 0x75,
	0x02, 0xe4, 0x30, 0x8c, 0x6a, 0x8a, 0x9f, 0xf1, 0xfd, 0xbd, 0x02, 0x4f, 0xd8, 0x30, 0xd9, 0x5c,
	0xf4, 0x85, 0x5b, 0x42, 0x14, 0x69, 0xb0, 0x28, 0x52, 0x36, 0x4c, 0xb2, 0x01, 0x97, 0x3d, 0xea,
	0xd3, 0x20, 0x5c, 0x2f, 0x39, 0x1e, 0xb6, 0x30, 0x44, 0x21, 0xee, 0x91, 0x3a, 0xf8, 0xde, 0xed,
	0x79, 0x04, 0x95, 0xea, 0xdf, 0x71, 0xa4, 0x57, 0x10, 0xd6, 0xe0, 0x62, 0xf5, 0xa8, 0x5a, 0xb1,
	0x5d, 0xa7, 0x56, 0x69, 0xba, 0xb6, 0x5d, 0x61, 0xe6, 0x3e, 0x9b, 0xe0, 0x6e, 0x2b, 0x88, 0xef,
	0x8f, 0x0c, 0x2f, 0xe5, 0x9e, 0x7e, 0x56, 0x5f, 0xa8, 0x1e, 0x55, 0x37, 0x5d, 0xa7, 0xb6, 0xeb,
	0xda, 0xb6, 0xde, 0xc4, 0x3d, 0x21, 0xb7, 0x15, 0xe0, 0x51, 0x4c, 0x13, 0xce, 0xeb, 0xdd, 0xaa,
	0x19, 0x83, 0x42, 0x7d, 0xdb, 0x45, 0x10, 0xf5, 0x0c, 0xb9, 0x04, 0xe7, 0xea, 0xf8, 0x7b, 0xc7,
	0x89, 0x76, 0xb1, 0x98, 0xfa, 0xc6, 0xa1, 0x55, 0x85, 0x3c, 0x04, 0x17, 0x52, 0x00, 0xa1, 0x86,
	0x27, 0x40, 0x72, 0x9a, 0x15, 0xc7, 0x69, 0x96, 0x2a, 0x5d, 0xf6, 0x6a, 0x64, 0x07, 0xc6, 0x64,
	0xba, 0xf4, 0x73, 0x4f, 0x3e, 0x3d, 0x3a, 0xfa, 0xe8, 0x51, 0x9c, 0xa2, 0xbd, 0x3b, 0xb3, 0xaa,
	0x53, 0x45, 0x09, 0xae, 0xcb, 0xa1, 0x87, 0x1f, 0x74, 0xfb, 0xff, 0x4e, 0xe9, 0x50, 0x1b, 0x0f,
	0xfa, 0x76, 0x7f, 0x6b, 0x23, 0x77, 0xa0, 0x14, 0x6d, 0xc0, 0x9c, 0xea, 0xd4, 0x3d, 0xda, 0xc7,
	0x11, 0x11, 0x27, 0x4f, 0xfc, 0xb4, 0xe4, 0x47, 0x73, 0xa0, 0x26, 0x06, 0xf0, 0x41, 0x50, 0x99,
	0xbc, 0x2b, 0x5c, 0x3f, 0xa5, 0x57, 0x34, 0x1f, 0xea, 0x89, 0x4e, 0x2c, 0xb1, 0xb8, 0x6b, 0xd7,
	0x77, 0x20, 0xc8, 0xab, 0x30, 0x59, 0xa3, 0x78, 0x65, 0x07, 0x9f, 0x9d, 0xe7, 0x0a, 0xa5, 0x1c,
	0x71, 0xae, 0x54, 0xa3, 0xc1, 0x0a, 0xcf, 0x45, 0x2d, 0x52, 0xfb, 0xc3, 0x7c, 0x8a, 0x04, 0x6c,
	0xe8, 0xdf, 0x07, 0xd1, 0xa6, 0x58, 0xdf, 0xce, 0x20, 0x69, 0x24, 0x91, 0x33, 0xc8, 0x58, 0x88,
	0xea, 0x74, 0x0e, 0x20, 0x3f, 0x97, 0x8b, 0x1d, 0x40, 0x7a, 0x68, 0x24, 0x0f, 0x8c, 0xd1, 0x3e,
	0x0c, 0x24, 0x41, 0x5a, 0xd9, 0x53, 0xe7, 0x24, 0x2a, 0x8c, 0x5a, 0x95, 0x86, 0x02, 0xc9, 0xf3,
	0x2e, 0xb8, 0x20, 0xeb, 0xe1, 0xfc, 0x64, 0xb9, 0x5d, 0xb1, 0x59, 0x88, 0x35, 0xf1, 0x4d, 0xc3,
	0x0f, 0xf6, 0x24, 0x35, 0x67, 0x01, 0x0a, 0xbc, 0xac, 0x78, 0x63, 0x73, 0x48, 0x1f, 0xc1, 0xef,
	0x0d, 0x53, 0xfb, 0x49, 0x05, 0x48, 0x6a, 0xba, 0x3f, 0x10, 0x86, 0x7f, 0x1b, 0x94, 0xe2, 0xe1,
	0x91, 0xfd, 0x59, 0xc6, 0xa3, 0x31, 0xc2, 0xce, 0x6a, 0xa1, 0x11, 0x1c, 0x1e, 0xf0, 0x30, 0x4a,
	0x0e, 0x09, 0x5c, 0xdc, 0xe9, 0x45, 0xfb, 0xf1, 0x5c, 0x5b, 0x9b, 0x19, 0x87, 0x7e, 0x63, 0x36,
	0x87, 0x5e, 0xeb, 0xef, 0x9c, 0xf3, 0x41, 0xf1, 0xe8, 0xb7, 0x28, 0x5f, 0x77, 0x1e, 0xd5, 0x7e,
	0x4f, 0x81, 0xe9, 0x1b, 0x34, 0x88, 0x39, 0x8e, 0x75, 0xe9, 0x81, 0x0c, 0xf3, 0xb3, 0x30, 0x25,
	0xeb, 0x04, 0xa1, 0x47, 0x3d, 0xbf, 0x10, 0x92, 0xbb, 0x76, 0x55, 0x57, 0xbd, 0x48, 0x17, 0x10,
	0x1e, 0xf5, 0x2b, 0xbd, 0xd8, 0x3b, 0xba, 0xa2, 0xdf, 0x99, 0xc3, 0xb5, 0xaf, 0x66, 0xf5, 0x90,
	0x9f, 0x73, 0xb6, 0xd1, 0x54, 0xb9, 0x2f, 0xf3, 0x7e, 0x17, 0xd4, 0x44, 0xb3, 0xfb, 0x7c, 0x0d,
	0x39, 0x6e, 0xa1, 0x3e, 0x71, 0x90, 0x68, 0xed, 0xc9, 0x97, 0xac, 0x0f, 0xa1, 0xa7, 0xbf, 0xc1,
	0xf4, 0x5c, 0x7e, 0x10, 0xa3, 0x42, 0xbe, 0x4e, 0x8f, 0x05, 0x83, 0xb1, 0x9f, 0xa7, 0x3b, 0x86,
	0xfa, 0x29, 0x05, 0xd4, 0xdb, 0x8e, 0x1f, 0x78, 0xad, 0x6a, 0xd0, 0xf2, 0x84, 0x5d, 0x73, 0xdf,
	0x8e, 0x40, 0xd6, 0xa0, 0xd0, 0x10, 0xad, 0x17, 0x04, 0xec, 0xe5, 0x78, 0x1d, 0xf7, 0x54, 0x8f,
	0x8a, 0x12, 0x02, 0x43, 0x91, 0xa2, 0x5f, 0xd4, 0xf1, 0xb7, 0xf6, 0xc5, 0xb3, 0x30, 0x19, 0x0e,
	0xe5, 0x8a, 0x6b, 0xdb, 0xb4, 0x1a, 0xb8, 0x5e, 0xdb, 0xa9, 0xa9, 0xd2, 0x76, 0x6a, 0xca, 0xf4,
	0x6d, 0xc7, 0x35, 0xa9, 0x1c, 0xbb, 0xbb, 0xc0, 0x12, 0x6e, 0x8b, 0xb7, 0x86, 0x1d, 0xd7, 0xaf,
	0x88, 0x07, 0xb0, 0x44, 0x85, 0xe0, 0xb8, 0xfe, 0x7b, 0x78, 0x0a, 0x79, 0x12, 0x26, 0xab, 0x61,
	0x6d, 0x11, 0x18, 0x3f, 0x9b, 0x55, 0xa3, 0x8c, 0x10, 0xf8, 0x08, 0xb4, 0x66, 0x2b, 0x88, 0x62,
	0x33, 0x27, 0xa2, 0x36, 0x0d, 0xf4, 0x12, 0x53, 0xda, 0xb3, 0x55, 0xbf, 0xd0, 0x6c, 0x75, 0xb8,
	0xac, 0x8d, 0xec, 0xd6, 0x84, 0x73, 0xc9, 0xd8, 0xe2, 0xb8, 0x55, 0x10, 0xd5, 0x78, 0xb6, 0xf7,
	0x0a, 0x96, 0xfd, 0x6c, 0xbc, 0x3e, 0xd7, 0x4a, 0xed, 0xd3, 0x86, 0x35, 0x7e, 0x18, 0x66, 0xdb,
	0xde, 0xa8, 0x91, 0x7d, 0x10, 0x07, 0x7a, 0xa8, 0x66, 0x2a, 0xf5, 0x50, 0x4d, 0x58, 0x43, 0x5b,
	0xbc, 0x7b, 0xd9, 0xc1, 0x7d, 0xa0, 0xa0, 0xf7, 0x53, 0xa9, 0xa0, 0xf7, 0x58, 0xc3, 0x0b, 0x30,
	0x1b, 0x8f, 0x6d, 0x83, 0xfa, 0xbe, 0x51, 0xa3, 0x72, 0x84, 0x8b, 0xe9, 0x28, 0x77, 0x8b, 0x67,
	0x76, 0x52, 0xd6, 0xa0, 0x83, 0xef, 0x36, 0xe0, 0x02, 0xd9, 0xed, 0xf2, 0xc4, 0x1e, 0x1e, 0x08,
	0xee, 0xc3, 0x6c, 0x4b, 0x9a, 0x93, 0xd2, 0xed, 0x85, 0xb1, 0xde, 0xbc, 0x92, 0x9e, 0xcd, 0xfa,
	0x74, 0x2b, 0x95, 0x22, 0x82, 0xd9, 0x4f, 0xfa, 0xd4, 0xf1, 0xad, 0xc0, 0xba, 0x8b, 0xd7, 0x8a,
	0xe9, 0x5d, 0x6a, 0x63, 0x74, 0x0d, 0xb4, 0x15, 0x55, 0x29, 0x6f, 0x93, 0x65, 0x69, 0x3f, 0xa6,
	0xc0, 0xe4, 0xb6, 0x6b, 0xd2, 0x2d, 0xa3, 0x89, 0xd3, 0x93, 0x1b, 0xaf, 0x3b, 0x62, 0x32, 0x49,
	0x6b, 0x72, 0x57, 0xb6, 0x6a, 0xc3, 0x80, 0x29, 0x7c, 0x02, 0xa2, 0x87, 0xd1, 0x3a, 0x0c, 0xb1,
	0x14, 0x3e, 0x11, 0x4d, 0x5a, 0x39, 0x34, 0x1c, 0xd3, 0x8e, 0xbc, 0xda, 0x58, 0xd2, 0x4d, 0x4c,
	0x41, 0xcb, 0x18, 0xdd, 0x3d, 0x22, 0xe9, 0x3c, 0x2e, 0xdc, 0x38, 0x50, 0x8f, 0xf8, 0xef, 0xf3,
	0x30, 0x8c, 0xc1, 0x3e, 0x98, 0x82, 0x44, 0xef, 0x26, 0xcc, 0xeb, 0x11, 0xfc, 0xde, 0x30, 0xfb,
	0x0f, 0x48, 0x7f, 0x01, 0x80, 0xe3, 0x90, 0x82, 0x2f, 0x15, 0x31, 0x05, 0x77, 0x3b, 0x32, 0x58,
	0x60, 0x28, 0x93, 0x05, 0xee, 0xdb, 0x9b, 0xe8, 0x15, 0x98, 0xf7, 0xa8, 0x6d, 0x04, 0xf1, 0x0e,
	0x51, 0x1c, 0xa4, 0xfc, 0xec, 0x40, 0x97, 0xc3, 0x67, 0x04, 0x9e, 0xb5, 0x64, 0xac, 0xf2, 0xf7,
	0xc1, 0x54, 0xcb, 0xa7, 0x5e, 0x45, 0xc4, 0xf5, 0xa8, 0x1c, 0x58, 0xd4, 0x36, 0x7d, 0x31, 0x99,
	0x07, 0x78, 0xad, 0x73, 0xb2, 0x15, 0xbf, 0x06, 0xb8, 0x8e, 0x38, 0xb4, 0x1d, 0x18, 0xdd, 0x6d,
	0x05, 0x38, 0x38, 0x4c, 0x4f, 0x79, 0x57, 0x48, 0x5b, 0x89, 0x87, 0xba, 0x9a, 0x4b, 0x58, 0x52,
	0x90, 0x1f, 0xc7, 0xfa, 0xd3, 0xb9, 0x18, 0x23, 0xd3, 0x0b, 0x28, 0xcc, 0xa1, 0xd8, 0x45, 0xac,
	0x59, 0x4e, 0x60, 0xcf, 0xf4, 0x90, 0xb5, 0x21, 0xa6, 0x48, 0x5f, 0x9c, 0x6a, 0xc6, 0x89, 0xa7,
	0xf7, 0x6d, 0xb7, 0x63, 0xad, 0xb1, 0x0b, 0x73, 0xde, 0x2f, 0x5f, 0xf5, 0x2f, 0xe6, 0x01, 0x36,
	0xdd, 0x9a, 0x10, 0x59, 0xfd, 0x5f, 0x35, 0x79, 0x0d, 0x8a, 0xb6, 0x5b, 0x13, 0x82, 0x81, 0x5f,
	0x81, 0x7c, 0xa4, 0x7b, 0x0c, 0xc0, 0x1a, 0x4a, 0x8a, 0xa5, 0x91, 0xdb, 0xdb, 0xaf, 0x6f, 0xef,
	0xdc, 0xd9, 0xd6, 0x0b, 0xb6, 0x48, 0x62, 0xf3, 0x27, 0x94, 0xa7, 0xd1, 0x8b, 0x0e, 0x45, 0x91,
	0xb2, 0x81, 0x4b, 0xf2, 0x81, 0x65, 0x8b, 0x5d, 0x74, 0xbe, 0x98, 0x16, 0x58, 0x82, 0x74, 0x91,
	0x25, 0x7a, 0x67, 0x72, 0x38, 0xf2, 0x8e, 0x10, 0x6f, 0x47, 0x32, 0x00, 0xdb, 0x72, 0x68, 0x18,
	0xd0, 0xea, 0x2c, 0xf6, 0x06, 0x58, 0x92, 0x08, 0x62, 0x35, 0x0f, 0x23, 0xa2, 0x2e, 0xfe, 0xee,
	0xa0, 0x1e, 0x7e, 0x92, 0x0d, 0x80, 0x66, 0x14, 0x9c, 0x42, 0xac, 0x23, 0x03, 0x68, 0x28, 0x52,
	0x61, 0x72, 0x19, 0xc6, 0x3c, 0xe3, 0x88, 0xf3, 0x80, 0x1f, 0xf0, 0x77, 0x07, 0x8b, 0x18, 0x75,
	0x8f, 0x0d, 0xfc, 0x5e, 0xe0, 0x91, 0xc7, 0x61, 0x12, 0x23, 0x89, 0x86, 0x44, 0x45, 0x30, 0xfe,
	0xda, 0xe0, 0x84, 0x67, 0x1c, 0x85, 0xf4, 0x63, 0xa0, 0xe7, 0xa0, 0x18, 0x1c, 0x62, 0xec, 0xa3,
	0xe8, 0x09, 0xf8, 0x02, 0x4f, 0xe0, 0x7b, 0x82, 0x4d, 0xcf, 0xad, 0x52, 0xdf, 0x67, 0xb9, 0x63,
	0x98, 0x5b, 0x14, 0x29, 0x1b, 0xa6, 0xf6, 0x6e, 0x98, 0x88, 0x87, 0x1b, 0x19, 0xf5, 0x55, 0x18,
	0x61, 0x95, 0x36, 0xfc, 0x5a, 0x3f, 0xb1, 0xb8, 0xe2, 0xc2, 0xfa, 0x59, 0xdb, 0xad, 0x6d, 0xf9,
	0x35, 0xed, 0x07, 0xf3, 0x30, 0xbf, 0xe9, 0xd6, 0x22, 0x35, 0x6b, 0xd7, 0x38, 0xb6, 0x5d, 0xc3,
	0x44, 0x9f, 0x23, 0xf2, 0x0c, 0x4c, 0x73, 0xca, 0x57, 0xdc, 0x83, 0x8a, 0x49, 0xf7, 0x5b, 0x35,
	0xd6, 0xc5, 0x90, 0xab, 0x26, 0x79, 0xde, 0xce, 0xc1, 0x2a, 0xcb, 0xd9, 0x74, 0x6b, 0x3e, 0x79,
	0x1a, 0xa6, 0xe2, 0x02, 0x96, 0x73, 0xe0, 0x72, 0x78, 0x71, 0x82, 0x10, 0xc2, 0x6f, 0x38, 0x07,
	0x2e, 0x82, 0x3f, 0x0f, 0xb3, 0x31, 0xf8, 0x91, 0xe1, 0x39, 0x96, 0x23, 0x6a, 0x10, 0x37, 0x05,
	0xc3, 0x12, 0x77, 0x78, 0x1e, 0x16, 0x4a, 0x34, 0x8a, 0x1f, 0x03, 0x60, 0x91, 0xa1, 0x64, 0xa3,
	0x70, 0xba, 0xb4, 0x17, 0x38, 0x30, 0x02, 0xc3, 0xe6, 0x05, 0x86, 0x93, 0x05, 0xd6, 0x59, 0x4e,
	0x7b, 0xb3, 0x4c, 0xcf, 0x6d, 0x36, 0xa9, 0xc9, 0x8b, 0x9c, 0x4d, 0x36, 0x6b, 0x95, 0xe7, 0xb5,
	0xd7, 0xc2, 0x43, 0xca, 0x60, 0x91, 0x91, 0x64, 0x2d, 0xb7, 0xdc, 0xb0, 0x96, 0x27, 0x81, 0xf8,
	0xd6, 0x5b, 0x34, 0x05, 0xce, 0xdf, 0xc0, 0x2c, 0xb1, 0x1c, 0x09, 0x58, 0xfb, 0xb6, 0x02, 0x4c,
	0x65, 0x0c, 0xd3, 0x03, 0xf2, 0x68, 0xea, 0xb6, 0x5e, 0x76, 0x5b, 0x9e, 0xf2, 0xf7, 0x63, 0x79,
	0xba, 0x06, 0x73, 0xe1, 0xce, 0x4c, 0xa7, 0x07, 0x51, 0x79, 0x76, 0xca, 0x29, 0x4c, 0x83, 0x71,
	0x36, 0x15, 0x62, 0x69, 0xc3, 0xc5, 0xc9, 0xa8, 0xed, 0xd6, 0xd6, 0x43, 0x81, 0xb3, 0x8c, 0x46,
	0xab, 0x1f, 0x44, 0x2a, 0x60, 0xba, 0x06, 0x3e, 0xc0, 0x65, 0x04, 0x12, 0x53, 0xe5, 0x56, 0xfa,
	0x81, 0x96, 0xf3, 0xfc, 0x1a, 0x67, 0x07, 0x0c, 0x7c, 0xbc, 0x17, 0xf0, 0x16, 0x67, 0x26, 0x82,
	0x04, 0x77, 0xe1, 0xe4, 0xe5, 0x60, 0xe1, 0xd8, 0x47, 0xdc, 0x15, 0xcf, 0x56, 0xbc, 0xdb, 0xcd,
	0x40, 0x9b, 0x7c, 0xd8, 0xd1, 0x24, 0xe6, 0xf1, 0x92, 0x7b, 0x6c, 0xe5, 0x75, 0x9a, 0xda, 0x7a,
	0xc9, 0x76, 0x6b, 0x89, 0xb9, 0xfe, 0x66, 0xc6, 0x4d, 0x49, 0xe8, 0x7d, 0x0f, 0x3b, 0xa3, 0x02,
	0xf4, 0x20, 0x92, 0xee, 0x55, 0x2e, 0x0d, 0xd7, 0xdf, 0x6f, 0x5b, 0xfb, 0xed, 0xf7, 0x2d, 0xd9,
	0x48, 0xc7, 0xf7, 0x2d, 0x13, 0xa4, 0x18, 0x45, 0x7f, 0xbe, 0x99, 0x38, 0x5b, 0x26, 0xc6, 0x79,
	0x28, 0xb2, 0x0c, 0xd7, 0xa1, 0x4e, 0x80, 0x42, 0xb2, 0xa8, 0xc7, 0x09, 0x64, 0x11, 0xa6, 0xd8,
	0x98, 0xbc, 0xe5, 0x3a, 0x6c, 0x6e, 0x1d, 0xf8, 0x14, 0xcf, 0x38, 0x50, 0xff, 0xcd, 0xeb, 0x93,
	0x61, 0xd6, 0x0e, 0xe6, 0xec, 0xd1, 0x2a, 0x79, 0x2f, 0xb0, 0xc5, 0x8c, 0x77, 0x78, 0x02, 0x3b,
	0xfc, 0xd2, 0xa0, 0x1d, 0xde, 0x74, 0x6b, 0xc2, 0xc3, 0x68, 0xd3, 0xad, 0xe9, 0x4c, 0x22, 0x63,
	0xbc, 0xce, 0x17, 0xa0, 0x94, 0x22, 0x05, 0x46, 0x91, 0xdc, 0x76, 0x1d, 0xaa, 0x9e, 0xc1, 0x9f,
	0x8c, 0x2e, 0xa1, 0x77, 0xaa, 0x63, 0x34, 0x9b, 0xc7, 0x6a, 0x4e, 0x7b, 0x08, 0x46, 0x04, 0x3e,
	0x71, 0x22, 0x5e, 0x53, 0xcf, 0xf0, 0xf7, 0x17, 0xdc, 0x46, 0xc3, 0x70, 0x4c, 0x55, 0xd1, 0x7e,
	0x46, 0x81, 0xe2, 0x6e, 0x2b, 0xd8, 0x74, 0x6b, 0xfc, 0x2a, 0xe4, 0x0c, 0xeb, 0x40, 0x6c, 0xdf,
	0x08, 0x2e, 0xe9, 0x47, 0x23, 0xca, 0xe8, 0x8d, 0x3e, 0x65, 0x67, 0x08, 0x9a, 0x0d, 0xc9, 0xdc,
	0x1f, 0x3b, 0xc9, 0x73, 0xff, 0x51, 0x71, 0xed, 0x0b, 0xb9, 0xb0, 0xf5, 0x4c, 0xa3, 0xab, 0xc0,
	0x0c, 0xd3, 0xe8, 0x58, 0x0f, 0xb2, 0xf4, 0xb9, 0xa7, 0x7b, 0xe8, 0x73, 0x1c, 0x4b, 0xa4, 0xcd,
	0x4d, 0x36, 0xc3, 0xa4, 0xd3, 0xeb, 0x72, 0x3f, 0x21, 0x6d, 0x01, 0xb6, 0x09, 0x17, 0xa5, 0x5d,
	0xb8, 0x9c, 0x6f, 0x13, 0xa1, 0x0f, 0xe0, 0x59, 0xcc, 0xe4, 0x03, 0x5a, 0x43, 0xc9, 0x07, 0xb4,
	0xb4, 0x29, 0x7c, 0x6c, 0x72, 0xd9, 0xb6, 0xf7, 0x78, 0xc0, 0x46, 0x66, 0xd8, 0x6b, 0xcd, 0x74,
	0x22, 0x23, 0x7b, 0x5b, 0xa4, 0x47, 0xa5, 0x3d, 0xd2, 0xe3, 0x89, 0x3d, 0x8c, 0xbf, 0x4d, 0x81,
	0xe9, 0xe8, 0x6a, 0xac, 0xfc, 0x0a, 0x57, 0x87, 0x67, 0xd6, 0x94, 0x0e, 0xcf, 0xac, 0xa5, 0xdf,
	0x76, 0xcb, 0x9d, 0xe4, 0x6d, 0x37, 0xed, 0xd3, 0x0a, 0xcc, 0x24, 0x5b, 0x73, 0x2c, 0x36, 0x03,
	0xff, 0x21, 0xbc, 0xff, 0xf7, 0x0b, 0x59, 0xb4, 0x62, 0x23, 0xe4, 0xc1, 0xf9, 0xe8, 0xe6, 0xb1,
	0xec, 0x56, 0x94, 0x7c, 0x43, 0xee, 0xd9, 0xee, 0x3b, 0x3d, 0x19, 0xbd, 0xd6, 0x17, 0xbc, 0xac,
	0xe4, 0xbe, 0x46, 0x3c, 0xdf, 0x69, 0xc4, 0xbf, 0xa4, 0x40, 0x11, 0x8f, 0x3e, 0x70, 0x93, 0xf1,
	0x0e, 0x4c, 0x62, 0x23, 0x1c, 0xc3, 0x16, 0xa7, 0x2b, 0x62, 0x90, 0x27, 0xba, 0x6f, 0xe5, 0x6c,
	0x88, 0x42, 0x88, 0x69, 0xc3, 0xd4, 0x4b, 0x56, 0x32, 0x81, 0xac, 0x02, 0xe0, 0x86, 0xc9, 0x09,
	0x36, 0x45, 0x8b, 0x66, 0xf8, 0x33, 0xe5, 0x81, 0x9f, 0x3f, 0xa9, 0x07, 0xbe, 0xf6, 0x4d, 0x50,
	0xdc, 0x76, 0x4d, 0xca, 0x7d, 0xb8, 0x7a, 0xee, 0x6a, 0x6c, 0x41, 0x89, 0xd3, 0x22, 0xde, 0xf2,
	0xc9, 0xf5, 0xbe, 0x17, 0x1f, 0x11, 0x55, 0x1f, 0xf7, 0xc3, 0x9f, 0x58, 0x79, 0x80, 0xef, 0x7b,
	0x25, 0x28, 0xc6, 0x66, 0xd8, 0x07, 0x61, 0x5a, 0x38, 0xd9, 0x53, 0x53, 0x3e, 0xd9, 0xe2, 0x57,
	0x2d, 0x06, 0xa2, 0x3e, 0x89, 0x10, 0x45, 0x87, 0x5a, 0xda, 0xf7, 0x28, 0xed, 0xd5, 0x32, 0x66,
	0xdd, 0x82, 0x12, 0xf6, 0x3e, 0x55, 0x63, 0x8f, 0xce, 0x45, 0xd4, 0xd3, 0xc7, 0x9d, 0xf0, 0xe7,
	0xe9, 0xf8, 0xf0, 0x06, 0xcc, 0xde, 0xf1, 0xac, 0x80, 0x6e, 0xba, 0xd5, 0x7a, 0x1c, 0x2c, 0x96,
	0x11, 0xa6, 0xc3, 0xe3, 0xaf, 0x4a, 0xf6, 0xe3, 0xaf, 0xac, 0xa3, 0x59, 0x98, 0x58, 0x5f, 0x07,
	0xc3, 0x84, 0x06, 0x5f, 0x60, 0x57, 0x1a, 0x52, 0xe3, 0x0b, 0x41, 0x60, 0x6f, 0xa1, 0x32, 0x78,
	0xe2, 0xc3, 0x83, 0x0d, 0x98, 0xc7, 0xe6, 0xdd, 0x76, 0xec, 0xd3, 0x76, 0x75, 0xaf, 0x03, 0xaa,
	0x53, 0x39, 0x3f, 0x7c, 0x4c, 0x81, 0xf1, 0x5b, 0xd4, 0x0f, 0xae, 0xb7, 0x0e, 0x0e, 0xa8, 0xc7,
	0x5a, 0x75, 0x01, 0x00, 0x2f, 0x4d, 0xc5, 0x21, 0x5b, 0xf3, 0x7a, 0x91, 0xa5, 0xf0, 0x49, 0x79,
	0x1b, 0x1e, 0x11, 0xbe, 0x94, 0xd1, 0xc1, 0x8f, 0xe5, 0x54, 0x0e, 0x6c, 0x23, 0xd8, 0x47, 0x14,
	0x95, 0x03, 0x9c, 0x7f, 0xc9, 0x10, 0x0c, 0x97, 0x79, 0x11, 0x5d, 0x94, 0xd8, 0x70, 0xd6, 0x23,
	0x78, 0x3e, 0x5d, 0xb5, 0x9b, 0x72, 0x33, 0xfa, 0xe9, 0x51, 0x47, 0xd6, 0x7a, 0x3f, 0xcc, 0xc7,
	0xb4, 0xd9, 0x0b, 0x8c, 0x1a, 0xfa, 0xec, 0xf1, 0xbd, 0xd2, 0x05, 0x28, 0xf8, 0x81, 0xd8, 0x02,
	0xe1, 0x48, 0x46, 0xf0, 0x7b, 0xc3, 0x24, 0x0f, 0xc3, 0x38, 0xcf, 0x6a, 0xf2, 0xa8, 0xe3, 0x22,
	0x56, 0xec, 0x18, 0x26, 0xee, 0xf2, 0x34, 0xad, 0x0c, 0xf3, 0x1b, 0x8e, 0x15, 0x24, 0xf1, 0x5b,
	0x0e, 0x53, 0xef, 0xd8, 0xf0, 0x64, 0xe6, 0x9d, 0xaa, 0x33, 0xe7, 0xa1, 0xcc, 0xd4, 0xc9, 0x0e,
	0x55, 0xde, 0xee, 0x98, 0x7b, 0xaa, 0x4a, 0xa7, 0x81, 0xac, 0xdb, 0x2d, 0xff, 0x30, 0xc1, 0xad,
	0xda, 0x56, 0x5b, 0xea, 0xa9, 0x2a, 0xf9, 0xd5, 0x3c, 0x00, 0x53, 0xc9, 0x6e, 0x37, 0x51, 0x6f,
	0xbd, 0x14, 0x69, 0x10, 0x91, 0xd3, 0x68, 0x31, 0xd4, 0x0e, 0x50, 0xc7, 0xee, 0xae, 0xb5, 0xcd,
	0xc1, 0x08, 0xea, 0x7c, 0xd1, 0xd6, 0xd6, 0x59, 0xf6, 0xd9, 0x6b, 0x5f, 0x2b, 0xcc, 0x8c, 0xfc,
	0xe2, 0xc6, 0x78, 0x26, 0x2e, 0x8e, 0xf3, 0x30, 0x12, 0x1e, 0x2e, 0xf1, 0x18, 0xde, 0xe1, 0x27,
	0x46, 0x64, 0x77, 0x9d, 0x80, 0x59, 0xbe, 0xd4, 0xa9, 0xba, 0xc8, 0x2d, 0x7c, 0x57, 0xab, 0x24,
	0xd2, 0xd7, 0x44, 0x32, 0x1e, 0x86, 0x09, 0x50, 0xec, 0x57, 0x41, 0x1c, 0x86, 0xf1, 0x34, 0xec,
	0xd8, 0x06, 0x40, 0xec, 0xb9, 0x2f, 0x42, 0x29, 0x0e, 0xb0, 0xbb, 0x2b, 0x15, 0xe6, 0x37, 0xb5,
	0xaa, 0x14, 0x23, 0x01, 0x64, 0x1f, 0x88, 0xcc, 0x86, 0xf9, 0xb7, 0xda, 0xde, 0xf5, 0x46, 0x4a,
	0x34, 0x8d, 0xe0, 0x90, 0x9f, 0x8b, 0x70, 0x4a, 0xec, 0x1a, 0xc1, 0x61, 0xa6, 0xa3, 0xed, 0x58,
	0xe6, 0xdd, 0x27, 0x0b, 0x4a, 0x18, 0x4a, 0x5a, 0x1a, 0xd8, 0x79, 0x18, 0xf1, 0xa9, 0x77, 0xd7,
	0xaa, 0x46, 0x97, 0xd6, 0xc4, 0x27, 0x79, 0x07, 0x0c, 0xb3, 0x2a, 0xfc, 0xfe, 0xce, 0x75, 0x43,
	0x84, 0x3a, 0x2f, 0xf4, 0xc4, 0x4b, 0xb0, 0xd0, 0x31, 0xca, 0x38, 0xba, 0x2f, 0x87, 0x71, 0xc6,
	0x85, 0xfb, 0xf2, 0x5e, 0xe0, 0x59, 0xd5, 0x40, 0x55, 0x9e, 0xd8, 0x81, 0x42, 0xb8, 0xcf, 0xc7,
	0x6c, 0xbb, 0xd5, 0xb5, 0xeb, 0xb7, 0x6f, 0xf0, 0xd7, 0x04, 0x36, 0xb6, 0xd7, 0x77, 0xb8, 0x95,
	0x77, 0x67, 0x59, 0xdf, 0xde, 0xd8, 0xbe, 0xc1, 0x9f, 0x13, 0x58, 0xd3, 0xf5, 0x1d, 0x5d, 0xcd,
	0xb3, 0x9f, 0xeb, 0xcb, 0xb7, 0x96, 0x37, 0xf9, 0xa3, 0x86, 0x62, 0x87, 0x55, 0x1d, 0x7e, 0xc2,
	0x85, 0x52, 0x6a, 0x49, 0x26, 0x04, 0x26, 0xea, 0x9b, 0x6e, 0xd5, 0xb0, 0x6f, 0x51, 0xc7, 0x70,
	0x82, 0x0d, 0x53, 0x3d, 0x43, 0xca, 0x30, 0x1b, 0xfa, 0x67, 0x5b, 0x3e, 0xdd, 0xa2, 0x0d, 0xd7,
	0x3b, 0x6e, 0x31, 0x43, 0x59, 0x55, 0xf0, 0x9e, 0xc5, 0xce, 0x5d, 0xea, 0x19, 0xb6, 0xcd, 0x6f,
	0x3f, 0xa2, 0x26, 0xa3, 0xe6, 0xc8, 0x14, 0x94, 0xea, 0xb7, 0x9b, 0x35, 0xcf, 0x30, 0xa9, 0x38,
	0xd1, 0x54, 0xf3, 0xcf, 0xfd, 0xca, 0xc3, 0x30, 0x11, 0x6a, 0xaa, 0x7a, 0xb3, 0xba, 0x77, 0xb7,
	0x4a, 0x8e, 0xf8, 0xeb, 0xf5, 0xa8, 0x98, 0xb3, 0x8a, 0xd1, 0xaf, 0xfe, 0x6a, 0x8f, 0x0b, 0x9b,
	0x49, 0xf0, 0x65, 0xaf, 0x56, 0x1e, 0xac, 0x04, 0x9b, 0xff, 0x1f, 0xe5, 0x9e, 0x01, 0xed, 0xc7,
	0x52, 0xcf, 0xf7, 0x40, 0xd5, 0x56, 0x82, 0xd5, 0x3f, 0x70, 0x21, 0xd6, 0x84, 0x8f, 0xc0, 0x54,
	0xc6, 0x51, 0x29, 0x39, 0xc1, 0xd9, 0x6a, 0x79, 0xd0, 0x32, 0xac, 0x7a, 0x27, 0x7e, 0x43, 0x57,
	0xd4, 0xfc, 0x74, 0x3f, 0x11, 0xa6, 0xe3, 0x4a, 0x07, 0x00, 0x67, 0xf5, 0x1d, 0xc2, 0x98, 0x7c,
	0x58, 0x4b, 0x06, 0x39, 0xd6, 0x2d, 0xf7, 0x0d, 0x2c, 0x08, 0x8b, 0xcf, 0xbc, 0x4b, 0xe9, 0x56,
	0x2f, 0xc2, 0x66, 0x14, 0xe8, 0x49, 0xd8, 0x8c, 0x32, 0xa2, 0xa3, 0xcb, 0x41, 0xfc, 0xa0, 0x79,
	0xf7, 0x8e, 0xca, 0x90, 0x3d, 0x3b, 0x2a, 0x03, 0x8b, 0x9a, 0xe4, 0xd3, 0x69, 0x32, 0xc8, 0x39,
	0x76, 0xb9, 0x6f, 0x60, 0x99, 0xa4, 0xc9, 0x97, 0xf3, 0xfb, 0x20, 0x69, 0xb2, 0x40, 0x7f, 0x24,
	0x6d, 0x7f, 0xe4, 0x1f, 0x3b, 0xda, 0x2f, 0x49, 0x53, 0xaf, 0xdd, 0x97, 0xfb, 0x06, 0x66, 0x35,
	0x05, 0xa0, 0xa6, 0x5f, 0x46, 0x27, 0xcf, 0x0c, 0xf2, 0x8e, 0x3a, 0xab, 0xf1, 0x99, 0x01, 0x1f,
	0x5e, 0x27, 0x14, 0x46, 0xa5, 0x08, 0xee, 0xe4, 0x89, 0x3e, 0x43, 0xbd, 0xb3, 0xba, 0xfa, 0x85,
	0x4d, 0x49, 0x1c, 0x29, 0xee, 0x43, 0x7f, 0x12, 0x27, 0x19, 0x75, 0xa2, 0x3c, 0x68, 0x19, 0x56,
	0xfd, 0x7f, 0xa1, 0xc0, 0x4c, 0xd6, 0x2d, 0x3b, 0x9f, 0xbc, 0xd0, 0x9f, 0x33, 0x5e, 0xaa, 0x0d,
	0x83, 0x97, 0x8a, 0xe5, 0x9e, 0x5c, 0x7b, 0x2f, 0x41, 0x96, 0xaa, 0x76, 0x00, 0x70, 0x56, 0xdf,
	0xc7, 0x15, 0x98, 0xcd, 0x0e, 0xcf, 0x4f, 0x5e, 0x1c, 0x3c, 0xa4, 0x3f, 0x6b, 0xc0, 0x8b, 0x27,
	0x7a, 0x09, 0x80, 0xbc, 0x09, 0xa5, 0x54, 0xa8, 0x5e, 0xb2, 0x38, 0x58, 0xe8, 0xeb, 0xf2, 0x20,
	0xf0, 0xac, 0xca, 0x3a, 0x8c, 0x27, 0xfc, 0x8f, 0xc8, 0x40, 0xae, 0x4a, 0xe5, 0xa7, 0x06, 0x09,
	0x29, 0xc7, 0x2a, 0x4b, 0xc4, 0xed, 0xea, 0x5e, 0x59, 0x3a, 0x06, 0x5b, 0xb9, 0x7f, 0x68, 0x69,
	0x54, 0x33, 0x62, 0x30, 0xf4, 0x1c, 0xd5, 0xec, 0x78, 0x13, 0xe5, 0x13, 0x14, 0x4b, 0xcd, 0x69,
	0xc9, 0x07, 0xb3, 0xbf, 0x39, 0x9d, 0xbc, 0x34, 0x50, 0x1e, 0xb4, 0x4c, 0xfb, 0x9c, 0x96, 0x5b,
	0xf0, 0xc2, 0x00, 0x0e, 0xb6, 0x71, 0x1b, 0x06, 0x2f, 0x25, 0x86, 0x3e, 0xd1, 0xbe, 0xee, 0x43,
	0x9f, 0xf6, 0xe3, 0x2f, 0x3f, 0x35, 0x88, 0xb7, 0x3a, 0x9b, 0x47, 0xa9, 0x86, 0x74, 0x9f, 0x47,
	0xed, 0x7e, 0xd4, 0xe5, 0xc5, 0xc1, 0x9c, 0x8f, 0x85, 0x9a, 0x9c, 0x74, 0x63, 0xed, 0xa9, 0x26,
	0xb7, 0xf9, 0xf5, 0x96, 0x07, 0x2b, 0x21, 0x96, 0xc3, 0xf4, 0x2b, 0xff, 0xdd, 0x97, 0xc3, 0x34,
	0x74, 0xcf, 0xe5, 0x30, 0x5d, 0x80, 0xd5, 0xfa, 0x01, 0x28, 0x84, 0xae, 0x34, 0xe4, 0xb1, 0x7e,
	0x1c, 0x6e, 0x58, 0x2d, 0x8f, 0xf5, 0xe9, 0x99, 0x43, 0xde, 0x03, 0x67, 0xf9, 0xc1, 0x0e, 0x79,
	0xb4, 0xf7, 0xe1, 0x0f, 0xc3, 0xfc, 0x68, 0x5f, 0x67, 0x44, 0x62, 0x61, 0x91, 0xce, 0x41, 0x7a,
	0x2e, 0x2c, 0xc9, 0x83, 0x94, 0xf2, 0x00, 0xe0, 0x82, 0x29, 0xda, 0x36, 0xf6, 0xbb, 0x33, 0x45,
	0xd6, 0x99, 0x49, 0x79, 0xb0, 0x12, 0x31, 0x53, 0x24, 0x6c, 0xc7, 0x9e, 0x4c, 0x91, 0xde, 0x48,
	0x2e, 0x0f, 0x54, 0x40, 0x08, 0xba, 0x8c, 0x0d, 0xd3, 0xee, 0x82, 0x2e, 0x7b, 0xaf, 0xb6, 0x3c,
	0x68, 0x99, 0x50, 0xd0, 0x65, 0x6e, 0x63, 0x76, 0x17, 0x74, 0x9d, 0x36, 0x51, 0xcb, 0x83, 0x97,
	0x62, 0xad, 0xd8, 0x07, 0x88, 0xb7, 0x1b, 0x49, 0xd7, 0xed, 0x96, 0xc4, 0xee, 0x68, 0xb9, 0x4f,
	0xd0, 0xb0, 0xa7, 0x99, 0x3b, 0x82, 0xdd, 0x7b, 0xda, 0x69, 0x83, 0xb1, 0x3c, 0x78, 0x29, 0xd6,
	0x8a, 0x4f, 0x2a, 0x30, 0xd7, 0x61, 0x93, 0x90, 0x5c, 0xeb, 0x11, 0x5f, 0xa4, 0xc3, 0xbe, 0x63,
	0xf9, 0x24, 0xe5, 0x84, 0xc4, 0x4f, 0x6d, 0x21, 0x76, 0x97, 0xf8, 0xed, 0xbb, 0x90, 0xe5, 0x41,
	0xe0, 0x59, 0x95, 0xff, 0x8d, 0x02, 0xe5, 0xce, 0x01, 0xba, 0xc8, 0xcb, 0x3d, 0x66, 0x4f, 0xe7,
	0x78, 0x69, 0xe5, 0x13, 0x16, 0xd5, 0x69, 0x50, 0x9e, 0xf8, 0xe8, 0x67, 0xe6, 0x7f, 0xe2, 0x8f,
	0x94, 0x4f, 0x7c, 0x66, 0xfe, 0xcc, 0x77, 0x7e, 0x66, 0x5e, 0xb9, 0xbe, 0x03, 0xf3, 0x55, 0xb7,
	0x91, 0x81, 0xef, 0xa0, 0x7a, 0x7d, 0x36, 0xd4, 0x57, 0x36, 0x42, 0xe4, 0xb8, 0xf1, 0xf1, 0x7e,
	0xd2, 0x5e, 0xeb, 0x47, 0x15, 0xe5, 0x13, 0x8a, 0xf2, 0x9d, 0x8a, 0xf2, 0x9f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x44, 0xf4, 0x3e, 0xc8, 0x7d, 0xe0, 0x00, 0x00,
}

//Generated by ntnx_rpc plugin

// Service InsightsRpcSvc
type IInsightsRpcSvc interface {
	BeforeRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}) error
	AfterRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}, err error) error

	GetMasterLocation(*GetMasterLocationArg, *GetMasterLocationRet) error
	GetNodeMapEntryProto(*GetNodeMapEntryProtoArg, *GetNodeMapEntryProtoRet) error
	RegisterEntityTypes(*RegisterEntityTypesArg, *RegisterEntityTypesRet) error
	GetEntityTypes(*GetEntityTypesArg, *GetEntityTypesRet) error
	UpdateEntity(*UpdateEntityArg, *UpdateEntityRet) error
	BatchUpdateEntities(*BatchUpdateEntitiesArg, *BatchUpdateEntitiesRet) error
	AttachEntity(*AttachEntityArg, *AttachEntityRet) error
	DeleteEntity(*DeleteEntityArg, *DeleteEntityRet) error
	BatchDeleteEntities(*BatchDeleteEntitiesArg, *BatchDeleteEntitiesRet) error
	DetachEntity(*DetachEntityArg, *DetachEntityRet) error
	SyncUpdateEntity(*SyncUpdateEntityArg, *SyncUpdateEntityRet) error
	GetEntities(*GetEntitiesArg, *GetEntitiesRet) error
	RegisterMetricTypes(*RegisterMetricTypesArg, *RegisterMetricTypesRet) error
	UnregisterMetricTypes(*UnregisterMetricTypesArg, *UnregisterMetricTypesRet) error
	GetMetricTypes(*GetMetricTypesArg, *GetMetricTypesRet) error
	GetEntitiesWithMetrics(*GetEntitiesWithMetricsArg, *GetEntitiesWithMetricsRet) error
	SpotLightSearch(*SpotLightSearchArg, *SpotLightSearchRet) error
	PutMetricData(*PutMetricDataArg, *PutMetricDataRet) error
	GetMetricData(*GetMetricDataArg, *GetMetricDataRet) error
	GetInsightsLeaderStats(*GetInsightsLeaderStatsArg, *GetInsightsLeaderStatsRet) error
	RegisterWatchClient(*RegisterWatchClientArg, *RegisterWatchClientRet) error
	UnregisterWatchClient(*UnregisterWatchClientArg, *UnregisterWatchClientRet) error
	RegisterWatch(*RegisterWatchArg, *RegisterWatchRet) error
	UnregisterWatch(*UnregisterWatchArg, *UnregisterWatchRet) error
	GetFiredWatchList(*GetFiredWatchListArg, *GetFiredWatchListRet) error
	GetEntitiesTrail(*GetEntitiesTrailArg, *GetEntitiesTrailRet) error
	PutEvent(*PutEventArg, *PutEventRet) error
	PutLog(*PutLogArg, *PutLogRet) error
	GetAllShardIds(*GetAllShardIdsArg, *GetAllShardIdsRet) error
	ReplicateEntities(*ReplicateEntitiesArg, *ReplicateEntitiesRet) error
	GetInternalState(*GetInternalStateArg, *GetInternalStateRet) error
	WriteLockGlobalData(*WriteLockGlobalDataArg, *WriteLockGlobalDataRet) error
	WriteUnlockGlobalData(*WriteUnlockGlobalDataArg, *WriteUnlockGlobalDataRet) error
	TestBuffer(*TestBufferArg, *TestBufferRet) error
	InitGlobalDataStaging(*InitGlobalDataStagingArg, *InitGlobalDataStagingRet) error
	CommitGlobalDataStaging(*CommitGlobalDataStagingArg, *CommitGlobalDataStagingRet) error
	FlushGlobalData(*FlushGlobalDataArg, *FlushGlobalDataRet) error
	GetClusterReplicationState(*GetClusterReplicationStateArg, *GetClusterReplicationStateRet) error
}

func _InsightsRpcSvc_GetMasterLocation_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetMasterLocationArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetMasterLocationRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetMasterLocation(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetNodeMapEntryProto_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetNodeMapEntryProtoArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetNodeMapEntryProtoRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetNodeMapEntryProto(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_RegisterEntityTypes_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(RegisterEntityTypesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &RegisterEntityTypesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.RegisterEntityTypes(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetEntityTypes_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetEntityTypesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetEntityTypesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetEntityTypes(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_UpdateEntity_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(UpdateEntityArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &UpdateEntityRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.UpdateEntity(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_BatchUpdateEntities_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(BatchUpdateEntitiesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &BatchUpdateEntitiesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.BatchUpdateEntities(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_AttachEntity_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(AttachEntityArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &AttachEntityRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.AttachEntity(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_DeleteEntity_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DeleteEntityArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &DeleteEntityRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DeleteEntity(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_BatchDeleteEntities_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(BatchDeleteEntitiesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &BatchDeleteEntitiesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.BatchDeleteEntities(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_DetachEntity_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DetachEntityArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &DetachEntityRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DetachEntity(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_SyncUpdateEntity_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(SyncUpdateEntityArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &SyncUpdateEntityRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SyncUpdateEntity(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetEntities_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetEntitiesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetEntitiesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetEntities(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_RegisterMetricTypes_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(RegisterMetricTypesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &RegisterMetricTypesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.RegisterMetricTypes(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_UnregisterMetricTypes_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(UnregisterMetricTypesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &UnregisterMetricTypesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.UnregisterMetricTypes(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetMetricTypes_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetMetricTypesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetMetricTypesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetMetricTypes(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetEntitiesWithMetrics_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetEntitiesWithMetricsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetEntitiesWithMetricsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetEntitiesWithMetrics(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_SpotLightSearch_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(SpotLightSearchArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &SpotLightSearchRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SpotLightSearch(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_PutMetricData_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(PutMetricDataArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &PutMetricDataRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.PutMetricData(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetMetricData_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetMetricDataArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetMetricDataRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetMetricData(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetInsightsLeaderStats_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetInsightsLeaderStatsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetInsightsLeaderStatsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetInsightsLeaderStats(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_RegisterWatchClient_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(RegisterWatchClientArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &RegisterWatchClientRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.RegisterWatchClient(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_UnregisterWatchClient_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(UnregisterWatchClientArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &UnregisterWatchClientRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.UnregisterWatchClient(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_RegisterWatch_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(RegisterWatchArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &RegisterWatchRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.RegisterWatch(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_UnregisterWatch_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(UnregisterWatchArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &UnregisterWatchRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.UnregisterWatch(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetFiredWatchList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetFiredWatchListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetFiredWatchListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetFiredWatchList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetEntitiesTrail_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetEntitiesTrailArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetEntitiesTrailRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetEntitiesTrail(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_PutEvent_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(PutEventArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &PutEventRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.PutEvent(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_PutLog_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(PutLogArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &PutLogRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.PutLog(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetAllShardIds_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetAllShardIdsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetAllShardIdsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetAllShardIds(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_ReplicateEntities_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ReplicateEntitiesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ReplicateEntitiesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ReplicateEntities(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetInternalState_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetInternalStateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetInternalStateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetInternalState(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_WriteLockGlobalData_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(WriteLockGlobalDataArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &WriteLockGlobalDataRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.WriteLockGlobalData(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_WriteUnlockGlobalData_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(WriteUnlockGlobalDataArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &WriteUnlockGlobalDataRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.WriteUnlockGlobalData(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_TestBuffer_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TestBufferArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TestBufferRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TestBuffer(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_InitGlobalDataStaging_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(InitGlobalDataStagingArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &InitGlobalDataStagingRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.InitGlobalDataStaging(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_CommitGlobalDataStaging_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CommitGlobalDataStagingArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CommitGlobalDataStagingRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.CommitGlobalDataStaging(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_FlushGlobalData_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(FlushGlobalDataArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &FlushGlobalDataRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.FlushGlobalData(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _InsightsRpcSvc_GetClusterReplicationState_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IInsightsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(GetClusterReplicationStateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &GetClusterReplicationStateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetClusterReplicationState(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

var _InsightsRpcSvcDesc = util_net.ServiceDesc{
	Name: "nutanix.insights.interface.InsightsRpcSvc",
	Methods: map[string]util_net.ServiceMethodFn{
		"GetMasterLocation":          _InsightsRpcSvc_GetMasterLocation_Handler,
		"GetNodeMapEntryProto":       _InsightsRpcSvc_GetNodeMapEntryProto_Handler,
		"RegisterEntityTypes":        _InsightsRpcSvc_RegisterEntityTypes_Handler,
		"GetEntityTypes":             _InsightsRpcSvc_GetEntityTypes_Handler,
		"UpdateEntity":               _InsightsRpcSvc_UpdateEntity_Handler,
		"BatchUpdateEntities":        _InsightsRpcSvc_BatchUpdateEntities_Handler,
		"AttachEntity":               _InsightsRpcSvc_AttachEntity_Handler,
		"DeleteEntity":               _InsightsRpcSvc_DeleteEntity_Handler,
		"BatchDeleteEntities":        _InsightsRpcSvc_BatchDeleteEntities_Handler,
		"DetachEntity":               _InsightsRpcSvc_DetachEntity_Handler,
		"SyncUpdateEntity":           _InsightsRpcSvc_SyncUpdateEntity_Handler,
		"GetEntities":                _InsightsRpcSvc_GetEntities_Handler,
		"RegisterMetricTypes":        _InsightsRpcSvc_RegisterMetricTypes_Handler,
		"UnregisterMetricTypes":      _InsightsRpcSvc_UnregisterMetricTypes_Handler,
		"GetMetricTypes":             _InsightsRpcSvc_GetMetricTypes_Handler,
		"GetEntitiesWithMetrics":     _InsightsRpcSvc_GetEntitiesWithMetrics_Handler,
		"SpotLightSearch":            _InsightsRpcSvc_SpotLightSearch_Handler,
		"PutMetricData":              _InsightsRpcSvc_PutMetricData_Handler,
		"GetMetricData":              _InsightsRpcSvc_GetMetricData_Handler,
		"GetInsightsLeaderStats":     _InsightsRpcSvc_GetInsightsLeaderStats_Handler,
		"RegisterWatchClient":        _InsightsRpcSvc_RegisterWatchClient_Handler,
		"UnregisterWatchClient":      _InsightsRpcSvc_UnregisterWatchClient_Handler,
		"RegisterWatch":              _InsightsRpcSvc_RegisterWatch_Handler,
		"UnregisterWatch":            _InsightsRpcSvc_UnregisterWatch_Handler,
		"GetFiredWatchList":          _InsightsRpcSvc_GetFiredWatchList_Handler,
		"GetEntitiesTrail":           _InsightsRpcSvc_GetEntitiesTrail_Handler,
		"PutEvent":                   _InsightsRpcSvc_PutEvent_Handler,
		"PutLog":                     _InsightsRpcSvc_PutLog_Handler,
		"GetAllShardIds":             _InsightsRpcSvc_GetAllShardIds_Handler,
		"ReplicateEntities":          _InsightsRpcSvc_ReplicateEntities_Handler,
		"GetInternalState":           _InsightsRpcSvc_GetInternalState_Handler,
		"WriteLockGlobalData":        _InsightsRpcSvc_WriteLockGlobalData_Handler,
		"WriteUnlockGlobalData":      _InsightsRpcSvc_WriteUnlockGlobalData_Handler,
		"TestBuffer":                 _InsightsRpcSvc_TestBuffer_Handler,
		"InitGlobalDataStaging":      _InsightsRpcSvc_InitGlobalDataStaging_Handler,
		"CommitGlobalDataStaging":    _InsightsRpcSvc_CommitGlobalDataStaging_Handler,
		"FlushGlobalData":            _InsightsRpcSvc_FlushGlobalData_Handler,
		"GetClusterReplicationState": _InsightsRpcSvc_GetClusterReplicationState_Handler,
	},
}

func NewInsightsRpcSvc(impl IInsightsRpcSvc) *util_net.Service {
	return &util_net.Service{
		Desc: &_InsightsRpcSvcDesc,
		Impl: impl,
	}
}

type IInsightsRpcClient interface {
	GetMasterLocation(*GetMasterLocationArg) (*GetMasterLocationRet, error)
	GetNodeMapEntryProto(*GetNodeMapEntryProtoArg) (*GetNodeMapEntryProtoRet, error)
	RegisterEntityTypes(*RegisterEntityTypesArg) (*RegisterEntityTypesRet, error)
	GetEntityTypes(*GetEntityTypesArg) (*GetEntityTypesRet, error)
	UpdateEntity(*UpdateEntityArg) (*UpdateEntityRet, error)
	BatchUpdateEntities(*BatchUpdateEntitiesArg) (*BatchUpdateEntitiesRet, error)
	AttachEntity(*AttachEntityArg) (*AttachEntityRet, error)
	DeleteEntity(*DeleteEntityArg) (*DeleteEntityRet, error)
	BatchDeleteEntities(*BatchDeleteEntitiesArg) (*BatchDeleteEntitiesRet, error)
	DetachEntity(*DetachEntityArg) (*DetachEntityRet, error)
	SyncUpdateEntity(*SyncUpdateEntityArg) (*SyncUpdateEntityRet, error)
	GetEntities(*GetEntitiesArg) (*GetEntitiesRet, error)
	RegisterMetricTypes(*RegisterMetricTypesArg) (*RegisterMetricTypesRet, error)
	UnregisterMetricTypes(*UnregisterMetricTypesArg) (*UnregisterMetricTypesRet, error)
	GetMetricTypes(*GetMetricTypesArg) (*GetMetricTypesRet, error)
	GetEntitiesWithMetrics(*GetEntitiesWithMetricsArg) (*GetEntitiesWithMetricsRet, error)
	SpotLightSearch(*SpotLightSearchArg) (*SpotLightSearchRet, error)
	PutMetricData(*PutMetricDataArg) (*PutMetricDataRet, error)
	GetMetricData(*GetMetricDataArg) (*GetMetricDataRet, error)
	GetInsightsLeaderStats(*GetInsightsLeaderStatsArg) (*GetInsightsLeaderStatsRet, error)
	RegisterWatchClient(*RegisterWatchClientArg) (*RegisterWatchClientRet, error)
	UnregisterWatchClient(*UnregisterWatchClientArg) (*UnregisterWatchClientRet, error)
	RegisterWatch(*RegisterWatchArg) (*RegisterWatchRet, error)
	UnregisterWatch(*UnregisterWatchArg) (*UnregisterWatchRet, error)
	GetFiredWatchList(*GetFiredWatchListArg) (*GetFiredWatchListRet, error)
	GetEntitiesTrail(*GetEntitiesTrailArg) (*GetEntitiesTrailRet, error)
	PutEvent(*PutEventArg) (*PutEventRet, error)
	PutLog(*PutLogArg) (*PutLogRet, error)
	GetAllShardIds(*GetAllShardIdsArg) (*GetAllShardIdsRet, error)
	ReplicateEntities(*ReplicateEntitiesArg) (*ReplicateEntitiesRet, error)
	GetInternalState(*GetInternalStateArg) (*GetInternalStateRet, error)
	WriteLockGlobalData(*WriteLockGlobalDataArg) (*WriteLockGlobalDataRet, error)
	WriteUnlockGlobalData(*WriteUnlockGlobalDataArg) (*WriteUnlockGlobalDataRet, error)
	TestBuffer(*TestBufferArg) (*TestBufferRet, error)
	InitGlobalDataStaging(*InitGlobalDataStagingArg) (*InitGlobalDataStagingRet, error)
	CommitGlobalDataStaging(*CommitGlobalDataStagingArg) (*CommitGlobalDataStagingRet, error)
	FlushGlobalData(*FlushGlobalDataArg) (*FlushGlobalDataRet, error)
	GetClusterReplicationState(*GetClusterReplicationStateArg) (*GetClusterReplicationStateRet, error)
}

type InsightsRpcClient struct {
	Impl util_net.ProtobufRPCClientIfc
}

func NewInsightsRpcClient(impl util_net.ProtobufRPCClientIfc) IInsightsRpcClient {
	return &InsightsRpcClient{
		Impl: impl,
	}
}

func (client *InsightsRpcClient) GetMasterLocation(
	arg *GetMasterLocationArg) (
	*GetMasterLocationRet, error) {

	ret := &GetMasterLocationRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetMasterLocation", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetNodeMapEntryProto(
	arg *GetNodeMapEntryProtoArg) (
	*GetNodeMapEntryProtoRet, error) {

	ret := &GetNodeMapEntryProtoRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetNodeMapEntryProto", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) RegisterEntityTypes(
	arg *RegisterEntityTypesArg) (
	*RegisterEntityTypesRet, error) {

	ret := &RegisterEntityTypesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "RegisterEntityTypes", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetEntityTypes(
	arg *GetEntityTypesArg) (
	*GetEntityTypesRet, error) {

	ret := &GetEntityTypesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetEntityTypes", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) UpdateEntity(
	arg *UpdateEntityArg) (
	*UpdateEntityRet, error) {

	ret := &UpdateEntityRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "UpdateEntity", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) BatchUpdateEntities(
	arg *BatchUpdateEntitiesArg) (
	*BatchUpdateEntitiesRet, error) {

	ret := &BatchUpdateEntitiesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "BatchUpdateEntities", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) AttachEntity(
	arg *AttachEntityArg) (
	*AttachEntityRet, error) {

	ret := &AttachEntityRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "AttachEntity", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) DeleteEntity(
	arg *DeleteEntityArg) (
	*DeleteEntityRet, error) {

	ret := &DeleteEntityRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "DeleteEntity", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) BatchDeleteEntities(
	arg *BatchDeleteEntitiesArg) (
	*BatchDeleteEntitiesRet, error) {

	ret := &BatchDeleteEntitiesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "BatchDeleteEntities", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) DetachEntity(
	arg *DetachEntityArg) (
	*DetachEntityRet, error) {

	ret := &DetachEntityRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "DetachEntity", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) SyncUpdateEntity(
	arg *SyncUpdateEntityArg) (
	*SyncUpdateEntityRet, error) {

	ret := &SyncUpdateEntityRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "SyncUpdateEntity", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetEntities(
	arg *GetEntitiesArg) (
	*GetEntitiesRet, error) {

	ret := &GetEntitiesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetEntities", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) RegisterMetricTypes(
	arg *RegisterMetricTypesArg) (
	*RegisterMetricTypesRet, error) {

	ret := &RegisterMetricTypesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "RegisterMetricTypes", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) UnregisterMetricTypes(
	arg *UnregisterMetricTypesArg) (
	*UnregisterMetricTypesRet, error) {

	ret := &UnregisterMetricTypesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "UnregisterMetricTypes", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetMetricTypes(
	arg *GetMetricTypesArg) (
	*GetMetricTypesRet, error) {

	ret := &GetMetricTypesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetMetricTypes", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetEntitiesWithMetrics(
	arg *GetEntitiesWithMetricsArg) (
	*GetEntitiesWithMetricsRet, error) {

	ret := &GetEntitiesWithMetricsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetEntitiesWithMetrics", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) SpotLightSearch(
	arg *SpotLightSearchArg) (
	*SpotLightSearchRet, error) {

	ret := &SpotLightSearchRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "SpotLightSearch", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) PutMetricData(
	arg *PutMetricDataArg) (
	*PutMetricDataRet, error) {

	ret := &PutMetricDataRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "PutMetricData", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetMetricData(
	arg *GetMetricDataArg) (
	*GetMetricDataRet, error) {

	ret := &GetMetricDataRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetMetricData", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetInsightsLeaderStats(
	arg *GetInsightsLeaderStatsArg) (
	*GetInsightsLeaderStatsRet, error) {

	ret := &GetInsightsLeaderStatsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetInsightsLeaderStats", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) RegisterWatchClient(
	arg *RegisterWatchClientArg) (
	*RegisterWatchClientRet, error) {

	ret := &RegisterWatchClientRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "RegisterWatchClient", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) UnregisterWatchClient(
	arg *UnregisterWatchClientArg) (
	*UnregisterWatchClientRet, error) {

	ret := &UnregisterWatchClientRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "UnregisterWatchClient", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) RegisterWatch(
	arg *RegisterWatchArg) (
	*RegisterWatchRet, error) {

	ret := &RegisterWatchRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "RegisterWatch", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) UnregisterWatch(
	arg *UnregisterWatchArg) (
	*UnregisterWatchRet, error) {

	ret := &UnregisterWatchRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "UnregisterWatch", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetFiredWatchList(
	arg *GetFiredWatchListArg) (
	*GetFiredWatchListRet, error) {

	ret := &GetFiredWatchListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetFiredWatchList", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetEntitiesTrail(
	arg *GetEntitiesTrailArg) (
	*GetEntitiesTrailRet, error) {

	ret := &GetEntitiesTrailRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetEntitiesTrail", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) PutEvent(
	arg *PutEventArg) (
	*PutEventRet, error) {

	ret := &PutEventRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "PutEvent", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) PutLog(
	arg *PutLogArg) (
	*PutLogRet, error) {

	ret := &PutLogRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "PutLog", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetAllShardIds(
	arg *GetAllShardIdsArg) (
	*GetAllShardIdsRet, error) {

	ret := &GetAllShardIdsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetAllShardIds", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) ReplicateEntities(
	arg *ReplicateEntitiesArg) (
	*ReplicateEntitiesRet, error) {

	ret := &ReplicateEntitiesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "ReplicateEntities", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetInternalState(
	arg *GetInternalStateArg) (
	*GetInternalStateRet, error) {

	ret := &GetInternalStateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetInternalState", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) WriteLockGlobalData(
	arg *WriteLockGlobalDataArg) (
	*WriteLockGlobalDataRet, error) {

	ret := &WriteLockGlobalDataRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "WriteLockGlobalData", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) WriteUnlockGlobalData(
	arg *WriteUnlockGlobalDataArg) (
	*WriteUnlockGlobalDataRet, error) {

	ret := &WriteUnlockGlobalDataRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "WriteUnlockGlobalData", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) TestBuffer(
	arg *TestBufferArg) (
	*TestBufferRet, error) {

	ret := &TestBufferRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "TestBuffer", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) InitGlobalDataStaging(
	arg *InitGlobalDataStagingArg) (
	*InitGlobalDataStagingRet, error) {

	ret := &InitGlobalDataStagingRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "InitGlobalDataStaging", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) CommitGlobalDataStaging(
	arg *CommitGlobalDataStagingArg) (
	*CommitGlobalDataStagingRet, error) {

	ret := &CommitGlobalDataStagingRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "CommitGlobalDataStaging", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) FlushGlobalData(
	arg *FlushGlobalDataArg) (
	*FlushGlobalDataRet, error) {

	ret := &FlushGlobalDataRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "FlushGlobalData", arg, ret, 0)
	return ret, err
}

func (client *InsightsRpcClient) GetClusterReplicationState(
	arg *GetClusterReplicationStateArg) (
	*GetClusterReplicationStateRet, error) {

	ret := &GetClusterReplicationStateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.insights.interface.InsightsRpcSvc", "GetClusterReplicationState", arg, ret, 0)
	return ret, err
}
