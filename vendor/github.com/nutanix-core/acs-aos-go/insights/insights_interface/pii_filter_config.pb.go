// Code generated by protoc-gen-go. DO NOT EDIT.
// source: insights/insights_interface/pii_filter_config.proto

package insights_interface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PiiFilterConfig struct {
	// deprecated
	MaskFieldReList []string `protobuf:"bytes,1,rep,name=mask_field_re_list,json=maskFieldReList" json:"mask_field_re_list,omitempty"`
	// Optional. List of regular expression which would be used to match the
	// metric name. if the regex matches, will remove the metric from the
	// collected insights entity.
	RemoveFieldReList []string `protobuf:"bytes,2,rep,name=remove_field_re_list,json=removeFieldReList" json:"remove_field_re_list,omitempty"`
	// Optional. List of regular expressions which would be used to match a
	// sub-string and replace it with replacement string.
	ReplaceFieldReList []*PiiFilterConfig_ReplaceFieldRe `protobuf:"bytes,3,rep,name=replace_field_re_list,json=replaceFieldReList" json:"replace_field_re_list,omitempty"`
	// Optional. List of regular expression which would be used to match the
	// metric name. if the regex matches, will mask the metric value from the
	// collected insights entity.
	MaskFieldOpList      []*PiiFilterConfig_MaskFieldOp `protobuf:"bytes,4,rep,name=mask_field_op_list,json=maskFieldOpList" json:"mask_field_op_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *PiiFilterConfig) Reset()         { *m = PiiFilterConfig{} }
func (m *PiiFilterConfig) String() string { return proto.CompactTextString(m) }
func (*PiiFilterConfig) ProtoMessage()    {}
func (*PiiFilterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad3d764af3edc8d6, []int{0}
}

func (m *PiiFilterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PiiFilterConfig.Unmarshal(m, b)
}
func (m *PiiFilterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PiiFilterConfig.Marshal(b, m, deterministic)
}
func (m *PiiFilterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiiFilterConfig.Merge(m, src)
}
func (m *PiiFilterConfig) XXX_Size() int {
	return xxx_messageInfo_PiiFilterConfig.Size(m)
}
func (m *PiiFilterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiiFilterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiiFilterConfig proto.InternalMessageInfo

func (m *PiiFilterConfig) GetMaskFieldReList() []string {
	if m != nil {
		return m.MaskFieldReList
	}
	return nil
}

func (m *PiiFilterConfig) GetRemoveFieldReList() []string {
	if m != nil {
		return m.RemoveFieldReList
	}
	return nil
}

func (m *PiiFilterConfig) GetReplaceFieldReList() []*PiiFilterConfig_ReplaceFieldRe {
	if m != nil {
		return m.ReplaceFieldReList
	}
	return nil
}

func (m *PiiFilterConfig) GetMaskFieldOpList() []*PiiFilterConfig_MaskFieldOp {
	if m != nil {
		return m.MaskFieldOpList
	}
	return nil
}

// Proto for regex and corresponding replacement string
type PiiFilterConfig_ReplaceFieldRe struct {
	// Regex which would be used to match the string.
	Regex *string `protobuf:"bytes,1,opt,name=regex" json:"regex,omitempty"`
	// Replacement string. If the regex matches, it is replaced with this
	// string.
	ReplaceStr           *string  `protobuf:"bytes,2,opt,name=replace_str,json=replaceStr" json:"replace_str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PiiFilterConfig_ReplaceFieldRe) Reset()         { *m = PiiFilterConfig_ReplaceFieldRe{} }
func (m *PiiFilterConfig_ReplaceFieldRe) String() string { return proto.CompactTextString(m) }
func (*PiiFilterConfig_ReplaceFieldRe) ProtoMessage()    {}
func (*PiiFilterConfig_ReplaceFieldRe) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad3d764af3edc8d6, []int{0, 0}
}

func (m *PiiFilterConfig_ReplaceFieldRe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PiiFilterConfig_ReplaceFieldRe.Unmarshal(m, b)
}
func (m *PiiFilterConfig_ReplaceFieldRe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PiiFilterConfig_ReplaceFieldRe.Marshal(b, m, deterministic)
}
func (m *PiiFilterConfig_ReplaceFieldRe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiiFilterConfig_ReplaceFieldRe.Merge(m, src)
}
func (m *PiiFilterConfig_ReplaceFieldRe) XXX_Size() int {
	return xxx_messageInfo_PiiFilterConfig_ReplaceFieldRe.Size(m)
}
func (m *PiiFilterConfig_ReplaceFieldRe) XXX_DiscardUnknown() {
	xxx_messageInfo_PiiFilterConfig_ReplaceFieldRe.DiscardUnknown(m)
}

var xxx_messageInfo_PiiFilterConfig_ReplaceFieldRe proto.InternalMessageInfo

func (m *PiiFilterConfig_ReplaceFieldRe) GetRegex() string {
	if m != nil && m.Regex != nil {
		return *m.Regex
	}
	return ""
}

func (m *PiiFilterConfig_ReplaceFieldRe) GetReplaceStr() string {
	if m != nil && m.ReplaceStr != nil {
		return *m.ReplaceStr
	}
	return ""
}

// Proto for details about masking a particular metric.
type PiiFilterConfig_MaskFieldOp struct {
	// Regex which would be used to match the metric name.
	Regex *string `protobuf:"bytes,1,opt,name=regex" json:"regex,omitempty"`
	// Type of masking to be applied on this field.
	MaskType             *MetricType_MaskType `protobuf:"varint,2,opt,name=mask_type,json=maskType,enum=nutanix.insights.interface.MetricType_MaskType,def=0" json:"mask_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PiiFilterConfig_MaskFieldOp) Reset()         { *m = PiiFilterConfig_MaskFieldOp{} }
func (m *PiiFilterConfig_MaskFieldOp) String() string { return proto.CompactTextString(m) }
func (*PiiFilterConfig_MaskFieldOp) ProtoMessage()    {}
func (*PiiFilterConfig_MaskFieldOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad3d764af3edc8d6, []int{0, 1}
}

func (m *PiiFilterConfig_MaskFieldOp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PiiFilterConfig_MaskFieldOp.Unmarshal(m, b)
}
func (m *PiiFilterConfig_MaskFieldOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PiiFilterConfig_MaskFieldOp.Marshal(b, m, deterministic)
}
func (m *PiiFilterConfig_MaskFieldOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiiFilterConfig_MaskFieldOp.Merge(m, src)
}
func (m *PiiFilterConfig_MaskFieldOp) XXX_Size() int {
	return xxx_messageInfo_PiiFilterConfig_MaskFieldOp.Size(m)
}
func (m *PiiFilterConfig_MaskFieldOp) XXX_DiscardUnknown() {
	xxx_messageInfo_PiiFilterConfig_MaskFieldOp.DiscardUnknown(m)
}

var xxx_messageInfo_PiiFilterConfig_MaskFieldOp proto.InternalMessageInfo

const Default_PiiFilterConfig_MaskFieldOp_MaskType MetricType_MaskType = MetricType_kDefaultMask

func (m *PiiFilterConfig_MaskFieldOp) GetRegex() string {
	if m != nil && m.Regex != nil {
		return *m.Regex
	}
	return ""
}

func (m *PiiFilterConfig_MaskFieldOp) GetMaskType() MetricType_MaskType {
	if m != nil && m.MaskType != nil {
		return *m.MaskType
	}
	return Default_PiiFilterConfig_MaskFieldOp_MaskType
}

func init() {
	proto.RegisterType((*PiiFilterConfig)(nil), "nutanix.insights.interface.PiiFilterConfig")
	proto.RegisterType((*PiiFilterConfig_ReplaceFieldRe)(nil), "nutanix.insights.interface.PiiFilterConfig.ReplaceFieldRe")
	proto.RegisterType((*PiiFilterConfig_MaskFieldOp)(nil), "nutanix.insights.interface.PiiFilterConfig.MaskFieldOp")
}

func init() {
	proto.RegisterFile("insights/insights_interface/pii_filter_config.proto", fileDescriptor_ad3d764af3edc8d6)
}

var fileDescriptor_ad3d764af3edc8d6 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x4b, 0x4b, 0x03, 0x31,
	0x14, 0x85, 0xe9, 0x43, 0xb0, 0xa9, 0xb4, 0x18, 0x2a, 0x94, 0xd9, 0x58, 0x5c, 0x15, 0x84, 0x0c,
	0x54, 0x41, 0xe8, 0x52, 0xa5, 0x6e, 0x2c, 0x95, 0xe8, 0xaa, 0x9b, 0x30, 0x4c, 0xef, 0xd4, 0x4b,
	0xe7, 0x11, 0x92, 0x5b, 0x69, 0x57, 0xfe, 0x03, 0x7f, 0xb3, 0x4c, 0xa6, 0x23, 0x7d, 0xd0, 0x82,
	0xbb, 0xe4, 0x9e, 0x9c, 0xf3, 0xdd, 0x13, 0x76, 0x87, 0xa9, 0xc5, 0xf9, 0x27, 0x59, 0xbf, 0x3c,
	0x28, 0x4c, 0x09, 0x4c, 0x14, 0x84, 0xe0, 0x6b, 0x44, 0x15, 0x61, 0x4c, 0x60, 0x54, 0x98, 0xa5,
	0x11, 0xce, 0x85, 0x36, 0x19, 0x65, 0xdc, 0x4b, 0x97, 0x14, 0xa4, 0xb8, 0x12, 0xa5, 0x47, 0xfc,
	0x79, 0xbc, 0xfb, 0x53, 0x81, 0x87, 0xa3, 0x22, 0xf1, 0xe6, 0xa7, 0xce, 0xda, 0x6f, 0x88, 0x23,
	0x07, 0x7b, 0x72, 0x2c, 0x7e, 0xcb, 0x78, 0x12, 0xd8, 0x85, 0x8a, 0x10, 0xe2, 0x99, 0x32, 0xa0,
	0x62, 0xb4, 0xd4, 0xad, 0xf4, 0x6a, 0xfd, 0x86, 0x6c, 0xe7, 0xca, 0x28, 0x17, 0x24, 0xbc, 0xa2,
	0x25, 0xee, 0xb3, 0x8e, 0x81, 0x24, 0xfb, 0x82, 0xbd, 0xe7, 0x55, 0xf7, 0xfc, 0xb2, 0xd0, 0xb6,
	0x0d, 0x09, 0xbb, 0x32, 0xa0, 0xe3, 0x20, 0xdc, 0x77, 0xd4, 0x7a, 0xb5, 0x7e, 0x73, 0x30, 0x14,
	0xc7, 0x3b, 0x8a, 0xbd, 0x4d, 0x85, 0x2c, 0x82, 0x36, 0xf1, 0x92, 0x9b, 0x9d, 0xbb, 0xc3, 0xcd,
	0x76, 0xca, 0x64, 0xba, 0x60, 0xd5, 0x1d, 0xeb, 0xe1, 0x3f, 0xac, 0x71, 0x59, 0x7c, 0xa2, 0xb7,
	0x7e, 0x61, 0xa2, 0x73, 0x8a, 0xf7, 0xc2, 0x5a, 0xbb, 0xbb, 0xf0, 0x0e, 0x3b, 0x33, 0x30, 0x87,
	0x55, 0xb7, 0xd2, 0xab, 0xf4, 0x1b, 0xb2, 0xb8, 0xf0, 0x6b, 0xd6, 0x2c, 0xcb, 0x5b, 0x32, 0xdd,
	0xaa, 0xd3, 0xd8, 0x66, 0xf4, 0x4e, 0xc6, 0xfb, 0x66, 0xcd, 0x2d, 0xd0, 0x91, 0x94, 0x29, 0x6b,
	0xb8, 0x4e, 0xb4, 0xd6, 0xe0, 0x32, 0x5a, 0x03, 0xff, 0x54, 0x95, 0x31, 0x90, 0xc1, 0xf0, 0x63,
	0xad, 0xc1, 0xb5, 0xc8, 0x0f, 0xc3, 0x8b, 0xc5, 0x33, 0x44, 0xc1, 0x32, 0xa6, 0x7c, 0x22, 0xcf,
	0x93, 0xcd, 0xfc, 0xb1, 0x33, 0xe5, 0x87, 0x09, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x40, 0xfa,
	0xa3, 0xed, 0xae, 0x02, 0x00, 0x00,
}
