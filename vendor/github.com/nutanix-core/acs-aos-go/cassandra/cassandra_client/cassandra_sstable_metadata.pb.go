// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cassandra/cassandra_client/cassandra_sstable_metadata.proto

package util_cassandra

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Metadata for the SSTable file.
type SSTableMetadataProto struct {
	// First key present in the SSTable.
	FirstKey []byte `protobuf:"bytes,1,opt,name=first_key,json=firstKey" json:"first_key,omitempty"`
	// Last key in the SSTable.
	LastKey []byte `protobuf:"bytes,2,opt,name=last_key,json=lastKey" json:"last_key,omitempty"`
	// All memtable data gets sharded to different SSTables based on the
	// key ranges, and each SSTable can span multiple contiguous key ranges.
	// This stores the list of sharding info for the SSTable.
	ShardingInfo []*SSTableMetadataProto_ShardingInfo `protobuf:"bytes,3,rep,name=sharding_info,json=shardingInfo" json:"sharding_info,omitempty"`
	// Index and data files are accessed as SegmentedFile. Following two lists
	// give safe offsets within the files where a segment can be ended.
	IndexSegmentBoundaries []int64 `protobuf:"varint,4,rep,name=index_segment_boundaries,json=indexSegmentBoundaries" json:"index_segment_boundaries,omitempty"`
	DataSegmentBoundaries  []int64 `protobuf:"varint,5,rep,name=data_segment_boundaries,json=dataSegmentBoundaries" json:"data_segment_boundaries,omitempty"`
	// This is a monotonically increasing SSTable version. Every new SSTable gets
	// a new version except for a compacted SSTable, which takes the highest
	// version of the input SSTables.
	SstableVersion *int32 `protobuf:"varint,6,opt,name=sstable_version,json=sstableVersion" json:"sstable_version,omitempty"`
	// The expiration of this SSTable, in seconds since epoch. Can also be
	// interpreted to mean the "maxTimestamp" of all the expiration dates of the
	// Rows and Columns in the SStable.
	ExpiryTimeInSecs *int64 `protobuf:"varint,7,opt,name=expiry_time_in_secs,json=expiryTimeInSecs,def=-1" json:"expiry_time_in_secs,omitempty"`
	// Each Column in the SSTable has a expiration date. The min expiration date
	// will simply be the min of all column's expiration dates. If Columns do not
	// have TTL, then min_expiry_time_in_secs will be undefined.
	MinExpiryTimeInSecs *int64 `protobuf:"varint,8,opt,name=min_expiry_time_in_secs,json=minExpiryTimeInSecs" json:"min_expiry_time_in_secs,omitempty"`
	// HyperLogLog instance used to estimate the cardinality of keys.
	Hll []byte `protobuf:"bytes,9,opt,name=hll" json:"hll,omitempty"`
	// The SSTable flushed from commitlog replay have a valid
	// commitlogIncarnationId which is equal to the current incarnationId of
	// Cassandra. All other SSTables should have invalid commitlogIncarnationId
	// 0 except that the SSTables created before upgrade have
	// commitlogIncarnationId -1.
	CommitlogIncarnationId *int64 `protobuf:"varint,10,opt,name=commitlog_incarnation_id,json=commitlogIncarnationId,def=-1" json:"commitlog_incarnation_id,omitempty"`
	// This is the minimum snapshot id for data in this SSTable.
	MinSnapshotId *int64 `protobuf:"varint,11,opt,name=min_snapshot_id,json=minSnapshotId,def=-1" json:"min_snapshot_id,omitempty"`
	// This is the maximum snapshot id for data in this SSTable.
	MaxSnapshotId *int64 `protobuf:"varint,12,opt,name=max_snapshot_id,json=maxSnapshotId,def=-1" json:"max_snapshot_id,omitempty"`
	// Serialized SSTable rows' expiration timestamp histogram.
	ExpiryTimeHist       []byte   `protobuf:"bytes,13,opt,name=expiry_time_hist,json=expiryTimeHist" json:"expiry_time_hist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSTableMetadataProto) Reset()         { *m = SSTableMetadataProto{} }
func (m *SSTableMetadataProto) String() string { return proto.CompactTextString(m) }
func (*SSTableMetadataProto) ProtoMessage()    {}
func (*SSTableMetadataProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_015645b3ffcdb321, []int{0}
}

func (m *SSTableMetadataProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSTableMetadataProto.Unmarshal(m, b)
}
func (m *SSTableMetadataProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSTableMetadataProto.Marshal(b, m, deterministic)
}
func (m *SSTableMetadataProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSTableMetadataProto.Merge(m, src)
}
func (m *SSTableMetadataProto) XXX_Size() int {
	return xxx_messageInfo_SSTableMetadataProto.Size(m)
}
func (m *SSTableMetadataProto) XXX_DiscardUnknown() {
	xxx_messageInfo_SSTableMetadataProto.DiscardUnknown(m)
}

var xxx_messageInfo_SSTableMetadataProto proto.InternalMessageInfo

const Default_SSTableMetadataProto_ExpiryTimeInSecs int64 = -1
const Default_SSTableMetadataProto_CommitlogIncarnationId int64 = -1
const Default_SSTableMetadataProto_MinSnapshotId int64 = -1
const Default_SSTableMetadataProto_MaxSnapshotId int64 = -1

func (m *SSTableMetadataProto) GetFirstKey() []byte {
	if m != nil {
		return m.FirstKey
	}
	return nil
}

func (m *SSTableMetadataProto) GetLastKey() []byte {
	if m != nil {
		return m.LastKey
	}
	return nil
}

func (m *SSTableMetadataProto) GetShardingInfo() []*SSTableMetadataProto_ShardingInfo {
	if m != nil {
		return m.ShardingInfo
	}
	return nil
}

func (m *SSTableMetadataProto) GetIndexSegmentBoundaries() []int64 {
	if m != nil {
		return m.IndexSegmentBoundaries
	}
	return nil
}

func (m *SSTableMetadataProto) GetDataSegmentBoundaries() []int64 {
	if m != nil {
		return m.DataSegmentBoundaries
	}
	return nil
}

func (m *SSTableMetadataProto) GetSstableVersion() int32 {
	if m != nil && m.SstableVersion != nil {
		return *m.SstableVersion
	}
	return 0
}

func (m *SSTableMetadataProto) GetExpiryTimeInSecs() int64 {
	if m != nil && m.ExpiryTimeInSecs != nil {
		return *m.ExpiryTimeInSecs
	}
	return Default_SSTableMetadataProto_ExpiryTimeInSecs
}

func (m *SSTableMetadataProto) GetMinExpiryTimeInSecs() int64 {
	if m != nil && m.MinExpiryTimeInSecs != nil {
		return *m.MinExpiryTimeInSecs
	}
	return 0
}

func (m *SSTableMetadataProto) GetHll() []byte {
	if m != nil {
		return m.Hll
	}
	return nil
}

func (m *SSTableMetadataProto) GetCommitlogIncarnationId() int64 {
	if m != nil && m.CommitlogIncarnationId != nil {
		return *m.CommitlogIncarnationId
	}
	return Default_SSTableMetadataProto_CommitlogIncarnationId
}

func (m *SSTableMetadataProto) GetMinSnapshotId() int64 {
	if m != nil && m.MinSnapshotId != nil {
		return *m.MinSnapshotId
	}
	return Default_SSTableMetadataProto_MinSnapshotId
}

func (m *SSTableMetadataProto) GetMaxSnapshotId() int64 {
	if m != nil && m.MaxSnapshotId != nil {
		return *m.MaxSnapshotId
	}
	return Default_SSTableMetadataProto_MaxSnapshotId
}

func (m *SSTableMetadataProto) GetExpiryTimeHist() []byte {
	if m != nil {
		return m.ExpiryTimeHist
	}
	return nil
}

type SSTableMetadataProto_ShardingKeyRange struct {
	// Start of the sharded range, the start is exclusive.
	StartRange []byte `protobuf:"bytes,1,opt,name=start_range,json=startRange" json:"start_range,omitempty"`
	// End of the sharded range, range end is inclusive.
	EndRange             []byte   `protobuf:"bytes,2,opt,name=end_range,json=endRange" json:"end_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSTableMetadataProto_ShardingKeyRange) Reset()         { *m = SSTableMetadataProto_ShardingKeyRange{} }
func (m *SSTableMetadataProto_ShardingKeyRange) String() string { return proto.CompactTextString(m) }
func (*SSTableMetadataProto_ShardingKeyRange) ProtoMessage()    {}
func (*SSTableMetadataProto_ShardingKeyRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_015645b3ffcdb321, []int{0, 0}
}

func (m *SSTableMetadataProto_ShardingKeyRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSTableMetadataProto_ShardingKeyRange.Unmarshal(m, b)
}
func (m *SSTableMetadataProto_ShardingKeyRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSTableMetadataProto_ShardingKeyRange.Marshal(b, m, deterministic)
}
func (m *SSTableMetadataProto_ShardingKeyRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSTableMetadataProto_ShardingKeyRange.Merge(m, src)
}
func (m *SSTableMetadataProto_ShardingKeyRange) XXX_Size() int {
	return xxx_messageInfo_SSTableMetadataProto_ShardingKeyRange.Size(m)
}
func (m *SSTableMetadataProto_ShardingKeyRange) XXX_DiscardUnknown() {
	xxx_messageInfo_SSTableMetadataProto_ShardingKeyRange.DiscardUnknown(m)
}

var xxx_messageInfo_SSTableMetadataProto_ShardingKeyRange proto.InternalMessageInfo

func (m *SSTableMetadataProto_ShardingKeyRange) GetStartRange() []byte {
	if m != nil {
		return m.StartRange
	}
	return nil
}

func (m *SSTableMetadataProto_ShardingKeyRange) GetEndRange() []byte {
	if m != nil {
		return m.EndRange
	}
	return nil
}

type SSTableMetadataProto_ShardingInfo struct {
	// This stores the sharding key range for the SSTable.
	ShardingKeyRange *SSTableMetadataProto_ShardingKeyRange `protobuf:"bytes,1,opt,name=sharding_key_range,json=shardingKeyRange" json:"sharding_key_range,omitempty"`
	// Number of keys belonging to the shard.
	KeyCount *int64 `protobuf:"varint,2,opt,name=key_count,json=keyCount" json:"key_count,omitempty"`
	// Whether the range is compacted out of the SSTable. If the range is
	// compacted out then we can ignore all the keys belonging to this
	// sharding_key_range from this SSTable. The data compacted out is
	// guaranteed to be present in another SSTable.
	IsCompacted          *bool    `protobuf:"varint,3,opt,name=is_compacted,json=isCompacted" json:"is_compacted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSTableMetadataProto_ShardingInfo) Reset()         { *m = SSTableMetadataProto_ShardingInfo{} }
func (m *SSTableMetadataProto_ShardingInfo) String() string { return proto.CompactTextString(m) }
func (*SSTableMetadataProto_ShardingInfo) ProtoMessage()    {}
func (*SSTableMetadataProto_ShardingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_015645b3ffcdb321, []int{0, 1}
}

func (m *SSTableMetadataProto_ShardingInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSTableMetadataProto_ShardingInfo.Unmarshal(m, b)
}
func (m *SSTableMetadataProto_ShardingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSTableMetadataProto_ShardingInfo.Marshal(b, m, deterministic)
}
func (m *SSTableMetadataProto_ShardingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSTableMetadataProto_ShardingInfo.Merge(m, src)
}
func (m *SSTableMetadataProto_ShardingInfo) XXX_Size() int {
	return xxx_messageInfo_SSTableMetadataProto_ShardingInfo.Size(m)
}
func (m *SSTableMetadataProto_ShardingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SSTableMetadataProto_ShardingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SSTableMetadataProto_ShardingInfo proto.InternalMessageInfo

func (m *SSTableMetadataProto_ShardingInfo) GetShardingKeyRange() *SSTableMetadataProto_ShardingKeyRange {
	if m != nil {
		return m.ShardingKeyRange
	}
	return nil
}

func (m *SSTableMetadataProto_ShardingInfo) GetKeyCount() int64 {
	if m != nil && m.KeyCount != nil {
		return *m.KeyCount
	}
	return 0
}

func (m *SSTableMetadataProto_ShardingInfo) GetIsCompacted() bool {
	if m != nil && m.IsCompacted != nil {
		return *m.IsCompacted
	}
	return false
}

func init() {
	proto.RegisterType((*SSTableMetadataProto)(nil), "nutanix.cassandra.SSTableMetadataProto")
	proto.RegisterType((*SSTableMetadataProto_ShardingKeyRange)(nil), "nutanix.cassandra.SSTableMetadataProto.ShardingKeyRange")
	proto.RegisterType((*SSTableMetadataProto_ShardingInfo)(nil), "nutanix.cassandra.SSTableMetadataProto.ShardingInfo")
}

func init() {
	proto.RegisterFile("cassandra/cassandra_client/cassandra_sstable_metadata.proto", fileDescriptor_015645b3ffcdb321)
}

var fileDescriptor_015645b3ffcdb321 = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcf, 0x6e, 0xd3, 0x4c,
	0x10, 0x97, 0xeb, 0xaf, 0x5f, 0x9d, 0x49, 0xda, 0x86, 0x2d, 0x6d, 0x97, 0xf6, 0x80, 0xe1, 0x82,
	0x85, 0x44, 0x50, 0xab, 0x0a, 0x55, 0xc0, 0x85, 0x44, 0x48, 0x44, 0x15, 0x52, 0x65, 0x57, 0x48,
	0x70, 0x59, 0x6d, 0xed, 0x4d, 0xb2, 0x8a, 0x3d, 0x1b, 0x79, 0x37, 0x28, 0x7e, 0x05, 0x1e, 0x88,
	0xe7, 0x43, 0xeb, 0x38, 0x8e, 0x49, 0x72, 0xe1, 0x36, 0xf3, 0xfb, 0xb3, 0xf3, 0xf3, 0x78, 0xe0,
	0x43, 0xcc, 0xb5, 0xe6, 0x98, 0xe4, 0xfc, 0x6d, 0x5d, 0xb1, 0x38, 0x95, 0x02, 0x4d, 0x03, 0xd0,
	0xda, 0xf0, 0xc7, 0x54, 0xb0, 0x4c, 0x18, 0x9e, 0x70, 0xc3, 0x7b, 0xb3, 0x5c, 0x19, 0x45, 0x9e,
	0xe0, 0xdc, 0x70, 0x94, 0x8b, 0x5e, 0xad, 0x7c, 0xf9, 0xeb, 0x00, 0x9e, 0x46, 0xd1, 0x83, 0x55,
	0x7f, 0xad, 0xc4, 0xf7, 0xa5, 0xf6, 0x12, 0x5a, 0x23, 0x99, 0x6b, 0xc3, 0xa6, 0xa2, 0xa0, 0x8e,
	0xef, 0x04, 0x9d, 0xd0, 0x2b, 0x81, 0x3b, 0x51, 0x90, 0x67, 0xe0, 0xa5, 0xbc, 0xe2, 0xf6, 0x4a,
	0xee, 0xc0, 0xf6, 0x96, 0xfa, 0x0e, 0x87, 0x7a, 0xc2, 0xf3, 0x44, 0xe2, 0x98, 0x49, 0x1c, 0x29,
	0xea, 0xfa, 0x6e, 0xd0, 0xbe, 0xbe, 0xe9, 0x6d, 0xcd, 0xee, 0xed, 0x9a, 0xdb, 0x8b, 0x2a, 0xf3,
	0x10, 0x47, 0x2a, 0xec, 0xe8, 0x46, 0x47, 0x6e, 0x81, 0x4a, 0x4c, 0xc4, 0x82, 0x69, 0x31, 0xce,
	0x04, 0x1a, 0xf6, 0xa8, 0xe6, 0x98, 0xf0, 0x5c, 0x0a, 0x4d, 0xff, 0xf3, 0xdd, 0xc0, 0x0d, 0xcf,
	0x4a, 0x3e, 0x5a, 0xd2, 0xfd, 0x9a, 0x25, 0xef, 0xe0, 0xdc, 0x4e, 0xd8, 0x65, 0xdc, 0x2f, 0x8d,
	0xa7, 0x96, 0xde, 0xf6, 0xbd, 0x82, 0xe3, 0xd5, 0x2a, 0x7f, 0x8a, 0x5c, 0x4b, 0x85, 0xf4, 0x7f,
	0xdf, 0x09, 0xf6, 0xc3, 0xa3, 0x0a, 0xfe, 0xb6, 0x44, 0xc9, 0x15, 0x9c, 0x88, 0xc5, 0x4c, 0xe6,
	0x05, 0x33, 0x32, 0x13, 0x4c, 0x22, 0xd3, 0x22, 0xd6, 0xf4, 0xc0, 0x77, 0x02, 0xf7, 0xfd, 0xde,
	0x9b, 0xab, 0xb0, 0xbb, 0xa4, 0x1f, 0x64, 0x26, 0x86, 0x18, 0x89, 0x58, 0x93, 0x1b, 0x38, 0xcf,
	0x24, 0xb2, 0x5d, 0x36, 0xcf, 0xda, 0xc2, 0x93, 0x4c, 0xe2, 0xe7, 0x4d, 0x57, 0x17, 0xdc, 0x49,
	0x9a, 0xd2, 0x56, 0xb9, 0x74, 0x5b, 0x92, 0x8f, 0x40, 0x63, 0x95, 0x65, 0xd2, 0xa4, 0xca, 0x6e,
	0x3c, 0xe6, 0x39, 0x72, 0x23, 0x15, 0x32, 0x99, 0x50, 0xa8, 0xe7, 0x9f, 0xd5, 0x9a, 0xe1, 0x5a,
	0x32, 0x4c, 0xc8, 0x6b, 0x38, 0xb6, 0x29, 0x34, 0xf2, 0x99, 0x9e, 0x28, 0x63, 0x4d, 0xed, 0xda,
	0x74, 0x98, 0x49, 0x8c, 0x2a, 0xa6, 0xd2, 0xf2, 0xc5, 0x5f, 0xda, 0x4e, 0x43, 0xcb, 0x17, 0x0d,
	0x6d, 0x00, 0xdd, 0xe6, 0x97, 0x4d, 0xa4, 0x36, 0xf4, 0xb0, 0x0c, 0x7d, 0xb4, 0xde, 0xc4, 0x17,
	0xa9, 0xcd, 0xc5, 0x3d, 0x74, 0x57, 0xff, 0xfc, 0x4e, 0x14, 0x21, 0xc7, 0xb1, 0x20, 0xcf, 0xa1,
	0xad, 0x0d, 0xcf, 0x0d, 0xcb, 0x6d, 0x5b, 0x9d, 0x1f, 0x94, 0xd0, 0x52, 0x70, 0x09, 0x2d, 0x81,
	0x49, 0x45, 0x2f, 0x2f, 0xd0, 0x13, 0x98, 0x94, 0xe4, 0xc5, 0x6f, 0x07, 0x3a, 0xcd, 0x33, 0x22,
	0x23, 0x20, 0xf5, 0x4d, 0x4e, 0x45, 0xd1, 0x78, 0xb5, 0x7d, 0x7d, 0xfb, 0xaf, 0x87, 0xb9, 0x0a,
	0x19, 0x76, 0xf5, 0x66, 0xec, 0x4b, 0x68, 0xd9, 0xe7, 0x63, 0x35, 0x47, 0x53, 0xa6, 0x72, 0x43,
	0x6f, 0x2a, 0x8a, 0x81, 0xed, 0xc9, 0x0b, 0xe8, 0x48, 0xcd, 0x62, 0x95, 0xcd, 0x78, 0x6c, 0x44,
	0x42, 0x5d, 0xdf, 0x09, 0xbc, 0xb0, 0x2d, 0xf5, 0x60, 0x05, 0xf5, 0x3f, 0xc1, 0x69, 0xac, 0xb2,
	0xed, 0x40, 0x7d, 0x3a, 0x58, 0x95, 0x1b, 0xd1, 0x7e, 0x1c, 0xcd, 0x8d, 0x4c, 0xd7, 0xca, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x17, 0xea, 0xf0, 0x90, 0x20, 0x04, 0x00, 0x00,
}
