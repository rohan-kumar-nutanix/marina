// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cassandra/cassandra_client/cassandra.proto

package util_cassandra

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	misc "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/misc"
	_ "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/net"
	math "math"
)

import (
	"errors"
	util_net "github.com/nutanix-core/acs-aos-go/nutanix/util-go/net"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CassandraError_Type int32

const (
	CassandraError_kNoError                       CassandraError_Type = 0
	CassandraError_kNotFound                      CassandraError_Type = 1
	CassandraError_kInvalidRequest                CassandraError_Type = 2
	CassandraError_kUnavailable                   CassandraError_Type = 3
	CassandraError_kTimeout                       CassandraError_Type = 4
	CassandraError_kApplicationError              CassandraError_Type = 5
	CassandraError_kAuthenticationError           CassandraError_Type = 6
	CassandraError_kAuthorizationError            CassandraError_Type = 7
	CassandraError_kCasFailure                    CassandraError_Type = 8
	CassandraError_kEpochMismatch                 CassandraError_Type = 9
	CassandraError_kUnknownError                  CassandraError_Type = 10
	CassandraError_kChecksumMismatchError         CassandraError_Type = 11
	CassandraError_kRetry                         CassandraError_Type = 12
	CassandraError_kCasFailureChosenValueReturned CassandraError_Type = 13
	CassandraError_kHeartbeatMismatch             CassandraError_Type = 14
)

var CassandraError_Type_name = map[int32]string{
	0:  "kNoError",
	1:  "kNotFound",
	2:  "kInvalidRequest",
	3:  "kUnavailable",
	4:  "kTimeout",
	5:  "kApplicationError",
	6:  "kAuthenticationError",
	7:  "kAuthorizationError",
	8:  "kCasFailure",
	9:  "kEpochMismatch",
	10: "kUnknownError",
	11: "kChecksumMismatchError",
	12: "kRetry",
	13: "kCasFailureChosenValueReturned",
	14: "kHeartbeatMismatch",
}

var CassandraError_Type_value = map[string]int32{
	"kNoError":                       0,
	"kNotFound":                      1,
	"kInvalidRequest":                2,
	"kUnavailable":                   3,
	"kTimeout":                       4,
	"kApplicationError":              5,
	"kAuthenticationError":           6,
	"kAuthorizationError":            7,
	"kCasFailure":                    8,
	"kEpochMismatch":                 9,
	"kUnknownError":                  10,
	"kChecksumMismatchError":         11,
	"kRetry":                         12,
	"kCasFailureChosenValueReturned": 13,
	"kHeartbeatMismatch":             14,
}

func (x CassandraError_Type) Enum() *CassandraError_Type {
	p := new(CassandraError_Type)
	*p = x
	return p
}

func (x CassandraError_Type) String() string {
	return proto.EnumName(CassandraError_Type_name, int32(x))
}

func (x *CassandraError_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraError_Type_value, data, "CassandraError_Type")
	if err != nil {
		return err
	}
	*x = CassandraError_Type(value)
	return nil
}

func (CassandraError_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{0, 0}
}

type CassandraConsistencyLevel_Type int32

const (
	CassandraConsistencyLevel_kOne    CassandraConsistencyLevel_Type = 1
	CassandraConsistencyLevel_kQuorum CassandraConsistencyLevel_Type = 2
	// kLocal/EachQuorum are unused at Nutanix.
	CassandraConsistencyLevel_kLocalQuorum CassandraConsistencyLevel_Type = 3
	CassandraConsistencyLevel_kEachQuorum  CassandraConsistencyLevel_Type = 4
	// Read/Write CL where the read/write needs to contact all replica nodes.
	// For Paxos CF, the read/write must ensure that all replica nodes agree
	// on the value for the key.
	CassandraConsistencyLevel_kAll CassandraConsistencyLevel_Type = 5
	// kAny/Two/Three are unused at Nutanix.
	CassandraConsistencyLevel_kAny   CassandraConsistencyLevel_Type = 6
	CassandraConsistencyLevel_kTwo   CassandraConsistencyLevel_Type = 7
	CassandraConsistencyLevel_kThree CassandraConsistencyLevel_Type = 8
	// Forcefully run Paxos write with kQuorum CL.
	CassandraConsistencyLevel_kForcePaxos CassandraConsistencyLevel_Type = 9
	// Forcefully run kQuorum read while disregarding "Leader
	// Only" read status at the Paxos leader node.
	CassandraConsistencyLevel_kForceQuorum CassandraConsistencyLevel_Type = 10
	// Paxos CF specific read CL. Such a read will succeed only if all
	// replica nodes participate in the read and at least quorum of those
	// replica nodes have the same value. Note that this CL is different
	// from kAll - a successful kAll read on a Paxos CF ensures that all
	// replica nodes agree on the same value.
	CassandraConsistencyLevel_kReadFromAllQuorumToAgree CassandraConsistencyLevel_Type = 11
)

var CassandraConsistencyLevel_Type_name = map[int32]string{
	1:  "kOne",
	2:  "kQuorum",
	3:  "kLocalQuorum",
	4:  "kEachQuorum",
	5:  "kAll",
	6:  "kAny",
	7:  "kTwo",
	8:  "kThree",
	9:  "kForcePaxos",
	10: "kForceQuorum",
	11: "kReadFromAllQuorumToAgree",
}

var CassandraConsistencyLevel_Type_value = map[string]int32{
	"kOne":                      1,
	"kQuorum":                   2,
	"kLocalQuorum":              3,
	"kEachQuorum":               4,
	"kAll":                      5,
	"kAny":                      6,
	"kTwo":                      7,
	"kThree":                    8,
	"kForcePaxos":               9,
	"kForceQuorum":              10,
	"kReadFromAllQuorumToAgree": 11,
}

func (x CassandraConsistencyLevel_Type) Enum() *CassandraConsistencyLevel_Type {
	p := new(CassandraConsistencyLevel_Type)
	*p = x
	return p
}

func (x CassandraConsistencyLevel_Type) String() string {
	return proto.EnumName(CassandraConsistencyLevel_Type_name, int32(x))
}

func (x *CassandraConsistencyLevel_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraConsistencyLevel_Type_value, data, "CassandraConsistencyLevel_Type")
	if err != nil {
		return err
	}
	*x = CassandraConsistencyLevel_Type(value)
	return nil
}

func (CassandraConsistencyLevel_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{1, 0}
}

type CassandraLimboStateLevel_Type int32

const (
	CassandraLimboStateLevel_kPreLimbo               CassandraLimboStateLevel_Type = 1
	CassandraLimboStateLevel_kLimbo                  CassandraLimboStateLevel_Type = 2
	CassandraLimboStateLevel_kLimboLeavingDeprecated CassandraLimboStateLevel_Type = 3
	CassandraLimboStateLevel_kNormal                 CassandraLimboStateLevel_Type = 4
	CassandraLimboStateLevel_kLimboExcise            CassandraLimboStateLevel_Type = 5
	CassandraLimboStateLevel_kUnknown                CassandraLimboStateLevel_Type = 6
	CassandraLimboStateLevel_kForwarding             CassandraLimboStateLevel_Type = 7
	CassandraLimboStateLevel_kBeingRemoved           CassandraLimboStateLevel_Type = 8
	CassandraLimboStateLevel_kRemoved                CassandraLimboStateLevel_Type = 9
)

var CassandraLimboStateLevel_Type_name = map[int32]string{
	1: "kPreLimbo",
	2: "kLimbo",
	3: "kLimboLeavingDeprecated",
	4: "kNormal",
	5: "kLimboExcise",
	6: "kUnknown",
	7: "kForwarding",
	8: "kBeingRemoved",
	9: "kRemoved",
}

var CassandraLimboStateLevel_Type_value = map[string]int32{
	"kPreLimbo":               1,
	"kLimbo":                  2,
	"kLimboLeavingDeprecated": 3,
	"kNormal":                 4,
	"kLimboExcise":            5,
	"kUnknown":                6,
	"kForwarding":             7,
	"kBeingRemoved":           8,
	"kRemoved":                9,
}

func (x CassandraLimboStateLevel_Type) Enum() *CassandraLimboStateLevel_Type {
	p := new(CassandraLimboStateLevel_Type)
	*p = x
	return p
}

func (x CassandraLimboStateLevel_Type) String() string {
	return proto.EnumName(CassandraLimboStateLevel_Type_name, int32(x))
}

func (x *CassandraLimboStateLevel_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraLimboStateLevel_Type_value, data, "CassandraLimboStateLevel_Type")
	if err != nil {
		return err
	}
	*x = CassandraLimboStateLevel_Type(value)
	return nil
}

func (CassandraLimboStateLevel_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{2, 0}
}

type CassandraIndexOperator_Type int32

const (
	CassandraIndexOperator_kEq CassandraIndexOperator_Type = 0
	CassandraIndexOperator_kGe CassandraIndexOperator_Type = 1
	CassandraIndexOperator_kGt CassandraIndexOperator_Type = 2
	CassandraIndexOperator_kLe CassandraIndexOperator_Type = 3
	CassandraIndexOperator_kLt CassandraIndexOperator_Type = 4
)

var CassandraIndexOperator_Type_name = map[int32]string{
	0: "kEq",
	1: "kGe",
	2: "kGt",
	3: "kLe",
	4: "kLt",
}

var CassandraIndexOperator_Type_value = map[string]int32{
	"kEq": 0,
	"kGe": 1,
	"kGt": 2,
	"kLe": 3,
	"kLt": 4,
}

func (x CassandraIndexOperator_Type) Enum() *CassandraIndexOperator_Type {
	p := new(CassandraIndexOperator_Type)
	*p = x
	return p
}

func (x CassandraIndexOperator_Type) String() string {
	return proto.EnumName(CassandraIndexOperator_Type_name, int32(x))
}

func (x *CassandraIndexOperator_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraIndexOperator_Type_value, data, "CassandraIndexOperator_Type")
	if err != nil {
		return err
	}
	*x = CassandraIndexOperator_Type(value)
	return nil
}

func (CassandraIndexOperator_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{3, 0}
}

type CassandraForceCompactionStatus_Type int32

const (
	// Issued force compaction request failed.
	CassandraForceCompactionStatus_kFailed CassandraForceCompactionStatus_Type = 1
	// Issued force compaction request is still running.
	CassandraForceCompactionStatus_kRunning CassandraForceCompactionStatus_Type = 2
	// Issued force compaction request is finished.
	CassandraForceCompactionStatus_kFinished CassandraForceCompactionStatus_Type = 3
	// Issued force compaction request does not exist in cassandra.
	CassandraForceCompactionStatus_kNotExist CassandraForceCompactionStatus_Type = 4
	// Cannot issue the force compaction now. The client needs to retry later.
	CassandraForceCompactionStatus_kRetry CassandraForceCompactionStatus_Type = 5
	// Cannot perform force compaction due to a corrupted SSTable.
	CassandraForceCompactionStatus_kCorruptedSSTable CassandraForceCompactionStatus_Type = 6
)

var CassandraForceCompactionStatus_Type_name = map[int32]string{
	1: "kFailed",
	2: "kRunning",
	3: "kFinished",
	4: "kNotExist",
	5: "kRetry",
	6: "kCorruptedSSTable",
}

var CassandraForceCompactionStatus_Type_value = map[string]int32{
	"kFailed":           1,
	"kRunning":          2,
	"kFinished":         3,
	"kNotExist":         4,
	"kRetry":            5,
	"kCorruptedSSTable": 6,
}

func (x CassandraForceCompactionStatus_Type) Enum() *CassandraForceCompactionStatus_Type {
	p := new(CassandraForceCompactionStatus_Type)
	*p = x
	return p
}

func (x CassandraForceCompactionStatus_Type) String() string {
	return proto.EnumName(CassandraForceCompactionStatus_Type_name, int32(x))
}

func (x *CassandraForceCompactionStatus_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraForceCompactionStatus_Type_value, data, "CassandraForceCompactionStatus_Type")
	if err != nil {
		return err
	}
	*x = CassandraForceCompactionStatus_Type(value)
	return nil
}

func (CassandraForceCompactionStatus_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{4, 0}
}

type CassandraInternalPaxosClock_PaxosValueState int32

const (
	CassandraInternalPaxosClock_kOnlyPromiseForAValueExists  CassandraInternalPaxosClock_PaxosValueState = 0
	CassandraInternalPaxosClock_kValueExists                 CassandraInternalPaxosClock_PaxosValueState = 1
	CassandraInternalPaxosClock_kDeleteForCell               CassandraInternalPaxosClock_PaxosValueState = 2
	CassandraInternalPaxosClock_kDeleteChosenCellToBeRemoved CassandraInternalPaxosClock_PaxosValueState = 3
	CassandraInternalPaxosClock_kDeleteChosenCellRemoved     CassandraInternalPaxosClock_PaxosValueState = 4
	CassandraInternalPaxosClock_kDeleteChosenCellTombstoned  CassandraInternalPaxosClock_PaxosValueState = 5
	CassandraInternalPaxosClock_kValueChosen                 CassandraInternalPaxosClock_PaxosValueState = 6
)

var CassandraInternalPaxosClock_PaxosValueState_name = map[int32]string{
	0: "kOnlyPromiseForAValueExists",
	1: "kValueExists",
	2: "kDeleteForCell",
	3: "kDeleteChosenCellToBeRemoved",
	4: "kDeleteChosenCellRemoved",
	5: "kDeleteChosenCellTombstoned",
	6: "kValueChosen",
}

var CassandraInternalPaxosClock_PaxosValueState_value = map[string]int32{
	"kOnlyPromiseForAValueExists":  0,
	"kValueExists":                 1,
	"kDeleteForCell":               2,
	"kDeleteChosenCellToBeRemoved": 3,
	"kDeleteChosenCellRemoved":     4,
	"kDeleteChosenCellTombstoned":  5,
	"kValueChosen":                 6,
}

func (x CassandraInternalPaxosClock_PaxosValueState) Enum() *CassandraInternalPaxosClock_PaxosValueState {
	p := new(CassandraInternalPaxosClock_PaxosValueState)
	*p = x
	return p
}

func (x CassandraInternalPaxosClock_PaxosValueState) String() string {
	return proto.EnumName(CassandraInternalPaxosClock_PaxosValueState_name, int32(x))
}

func (x *CassandraInternalPaxosClock_PaxosValueState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraInternalPaxosClock_PaxosValueState_value, data, "CassandraInternalPaxosClock_PaxosValueState")
	if err != nil {
		return err
	}
	*x = CassandraInternalPaxosClock_PaxosValueState(value)
	return nil
}

func (CassandraInternalPaxosClock_PaxosValueState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{7, 0}
}

type CassandraIndexType_Type int32

const (
	CassandraIndexType_KEYS CassandraIndexType_Type = 1
)

var CassandraIndexType_Type_name = map[int32]string{
	1: "KEYS",
}

var CassandraIndexType_Type_value = map[string]int32{
	"KEYS": 1,
}

func (x CassandraIndexType_Type) Enum() *CassandraIndexType_Type {
	p := new(CassandraIndexType_Type)
	*p = x
	return p
}

func (x CassandraIndexType_Type) String() string {
	return proto.EnumName(CassandraIndexType_Type_name, int32(x))
}

func (x *CassandraIndexType_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraIndexType_Type_value, data, "CassandraIndexType_Type")
	if err != nil {
		return err
	}
	*x = CassandraIndexType_Type(value)
	return nil
}

func (CassandraIndexType_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{26, 0}
}

type CassandraPauseState_Type int32

const (
	CassandraPauseState_kNormal                                       CassandraPauseState_Type = 0
	CassandraPauseState_kDropAllMessages                              CassandraPauseState_Type = 1
	CassandraPauseState_kDropPaxosMessageToRemoteReplicas             CassandraPauseState_Type = 2
	CassandraPauseState_kDropPaxosAcceptMessageToRemoteReplicas       CassandraPauseState_Type = 3
	CassandraPauseState_kDropPaxosDeleteChosenMessageToRemoteReplicas CassandraPauseState_Type = 4
	CassandraPauseState_kDropNonPaxosReadRequestsOnNode               CassandraPauseState_Type = 5
	CassandraPauseState_kDropNonPaxosWriteRequestsOnNode              CassandraPauseState_Type = 6
	CassandraPauseState_kTimeoutPaxosMutationsAtLeader                CassandraPauseState_Type = 7
)

var CassandraPauseState_Type_name = map[int32]string{
	0: "kNormal",
	1: "kDropAllMessages",
	2: "kDropPaxosMessageToRemoteReplicas",
	3: "kDropPaxosAcceptMessageToRemoteReplicas",
	4: "kDropPaxosDeleteChosenMessageToRemoteReplicas",
	5: "kDropNonPaxosReadRequestsOnNode",
	6: "kDropNonPaxosWriteRequestsOnNode",
	7: "kTimeoutPaxosMutationsAtLeader",
}

var CassandraPauseState_Type_value = map[string]int32{
	"kNormal":                                       0,
	"kDropAllMessages":                              1,
	"kDropPaxosMessageToRemoteReplicas":             2,
	"kDropPaxosAcceptMessageToRemoteReplicas":       3,
	"kDropPaxosDeleteChosenMessageToRemoteReplicas": 4,
	"kDropNonPaxosReadRequestsOnNode":               5,
	"kDropNonPaxosWriteRequestsOnNode":              6,
	"kTimeoutPaxosMutationsAtLeader":                7,
}

func (x CassandraPauseState_Type) Enum() *CassandraPauseState_Type {
	p := new(CassandraPauseState_Type)
	*p = x
	return p
}

func (x CassandraPauseState_Type) String() string {
	return proto.EnumName(CassandraPauseState_Type_name, int32(x))
}

func (x *CassandraPauseState_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraPauseState_Type_value, data, "CassandraPauseState_Type")
	if err != nil {
		return err
	}
	*x = CassandraPauseState_Type(value)
	return nil
}

func (CassandraPauseState_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{89, 0}
}

type CassandraFeature_Type int32

const (
	// Enables read batching for paxos.
	CassandraFeature_kPaxosReadBatching CassandraFeature_Type = 0
	// Enables local cassandra daemon health monitoring.
	CassandraFeature_kLocalHealthMonitoring CassandraFeature_Type = 1
	// Sets the paxos chosen value bit on the leader.
	CassandraFeature_kPaxosChosenValue CassandraFeature_Type = 2
	// Enables paxos leader only reads.
	CassandraFeature_kPaxosLeaderOnlyReads CassandraFeature_Type = 3
	// Enables external chosen leader reads/writes.
	CassandraFeature_kExternalChosenLeader CassandraFeature_Type = 4
	// Enables accept request from paxos leader writer that directs replica
	// writers to succeed accept request without running paxos at the replica.
	CassandraFeature_kAcceptRequestApplyValueWithoutPaxos CassandraFeature_Type = 5
	// Disable gossip between cassandra nodes.
	CassandraFeature_kDisableGossip CassandraFeature_Type = 6
	// Enables SSL communication between cassandra nodes.
	CassandraFeature_kSecureSocketLayerCommunication CassandraFeature_Type = 7
	// Enables read batching for non-paxos.
	CassandraFeature_kNonPaxosReadBatching CassandraFeature_Type = 8
	// Upon enabling, allows replicas to return empty payload for paxos write
	// request instead of dropping it silently if it's an invalid request.
	CassandraFeature_kPaxosReplicaWriteReplyEmptyPayloadForInvalidRequest CassandraFeature_Type = 9
)

var CassandraFeature_Type_name = map[int32]string{
	0: "kPaxosReadBatching",
	1: "kLocalHealthMonitoring",
	2: "kPaxosChosenValue",
	3: "kPaxosLeaderOnlyReads",
	4: "kExternalChosenLeader",
	5: "kAcceptRequestApplyValueWithoutPaxos",
	6: "kDisableGossip",
	7: "kSecureSocketLayerCommunication",
	8: "kNonPaxosReadBatching",
	9: "kPaxosReplicaWriteReplyEmptyPayloadForInvalidRequest",
}

var CassandraFeature_Type_value = map[string]int32{
	"kPaxosReadBatching":                                   0,
	"kLocalHealthMonitoring":                               1,
	"kPaxosChosenValue":                                    2,
	"kPaxosLeaderOnlyReads":                                3,
	"kExternalChosenLeader":                                4,
	"kAcceptRequestApplyValueWithoutPaxos":                 5,
	"kDisableGossip":                                       6,
	"kSecureSocketLayerCommunication":                      7,
	"kNonPaxosReadBatching":                                8,
	"kPaxosReplicaWriteReplyEmptyPayloadForInvalidRequest": 9,
}

func (x CassandraFeature_Type) Enum() *CassandraFeature_Type {
	p := new(CassandraFeature_Type)
	*p = x
	return p
}

func (x CassandraFeature_Type) String() string {
	return proto.EnumName(CassandraFeature_Type_name, int32(x))
}

func (x *CassandraFeature_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraFeature_Type_value, data, "CassandraFeature_Type")
	if err != nil {
		return err
	}
	*x = CassandraFeature_Type(value)
	return nil
}

func (CassandraFeature_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{120, 0}
}

type CassandraHeartbeatArg_CassandraHealthCounters_Type int32

const (
	CassandraHeartbeatArg_CassandraHealthCounters_kHeapUsage        CassandraHeartbeatArg_CassandraHealthCounters_Type = 1
	CassandraHeartbeatArg_CassandraHealthCounters_kStageCounters    CassandraHeartbeatArg_CassandraHealthCounters_Type = 2
	CassandraHeartbeatArg_CassandraHealthCounters_kDegradedStats    CassandraHeartbeatArg_CassandraHealthCounters_Type = 3
	CassandraHeartbeatArg_CassandraHealthCounters_kAllKeyspaceSizes CassandraHeartbeatArg_CassandraHealthCounters_Type = 4
	CassandraHeartbeatArg_CassandraHealthCounters_kSizeReqs         CassandraHeartbeatArg_CassandraHealthCounters_Type = 5
	CassandraHeartbeatArg_CassandraHealthCounters_kHealthWarnings   CassandraHeartbeatArg_CassandraHealthCounters_Type = 6
)

var CassandraHeartbeatArg_CassandraHealthCounters_Type_name = map[int32]string{
	1: "kHeapUsage",
	2: "kStageCounters",
	3: "kDegradedStats",
	4: "kAllKeyspaceSizes",
	5: "kSizeReqs",
	6: "kHealthWarnings",
}

var CassandraHeartbeatArg_CassandraHealthCounters_Type_value = map[string]int32{
	"kHeapUsage":        1,
	"kStageCounters":    2,
	"kDegradedStats":    3,
	"kAllKeyspaceSizes": 4,
	"kSizeReqs":         5,
	"kHealthWarnings":   6,
}

func (x CassandraHeartbeatArg_CassandraHealthCounters_Type) Enum() *CassandraHeartbeatArg_CassandraHealthCounters_Type {
	p := new(CassandraHeartbeatArg_CassandraHealthCounters_Type)
	*p = x
	return p
}

func (x CassandraHeartbeatArg_CassandraHealthCounters_Type) String() string {
	return proto.EnumName(CassandraHeartbeatArg_CassandraHealthCounters_Type_name, int32(x))
}

func (x *CassandraHeartbeatArg_CassandraHealthCounters_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraHeartbeatArg_CassandraHealthCounters_Type_value, data, "CassandraHeartbeatArg_CassandraHealthCounters_Type")
	if err != nil {
		return err
	}
	*x = CassandraHeartbeatArg_CassandraHealthCounters_Type(value)
	return nil
}

func (CassandraHeartbeatArg_CassandraHealthCounters_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{140, 0, 0}
}

// This is the status that zeus returns.
type CassandraHeartbeatArg_CassandraNodeData_PeerHealth int32

const (
	// Peer is dead.
	CassandraHeartbeatArg_CassandraNodeData_kDead CassandraHeartbeatArg_CassandraNodeData_PeerHealth = 0
	// Peer is alive and not in degraded state.
	CassandraHeartbeatArg_CassandraNodeData_kHealthy CassandraHeartbeatArg_CassandraNodeData_PeerHealth = 1
	// Peer is alive and has restarted more than a user specified threshold
	// times in the recent user specified time window.
	CassandraHeartbeatArg_CassandraNodeData_kDegraded CassandraHeartbeatArg_CassandraNodeData_PeerHealth = 2
)

var CassandraHeartbeatArg_CassandraNodeData_PeerHealth_name = map[int32]string{
	0: "kDead",
	1: "kHealthy",
	2: "kDegraded",
}

var CassandraHeartbeatArg_CassandraNodeData_PeerHealth_value = map[string]int32{
	"kDead":     0,
	"kHealthy":  1,
	"kDegraded": 2,
}

func (x CassandraHeartbeatArg_CassandraNodeData_PeerHealth) Enum() *CassandraHeartbeatArg_CassandraNodeData_PeerHealth {
	p := new(CassandraHeartbeatArg_CassandraNodeData_PeerHealth)
	*p = x
	return p
}

func (x CassandraHeartbeatArg_CassandraNodeData_PeerHealth) String() string {
	return proto.EnumName(CassandraHeartbeatArg_CassandraNodeData_PeerHealth_name, int32(x))
}

func (x *CassandraHeartbeatArg_CassandraNodeData_PeerHealth) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraHeartbeatArg_CassandraNodeData_PeerHealth_value, data, "CassandraHeartbeatArg_CassandraNodeData_PeerHealth")
	if err != nil {
		return err
	}
	*x = CassandraHeartbeatArg_CassandraNodeData_PeerHealth(value)
	return nil
}

func (CassandraHeartbeatArg_CassandraNodeData_PeerHealth) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{140, 1, 0}
}

type CassandraError struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraError) Reset()         { *m = CassandraError{} }
func (m *CassandraError) String() string { return proto.CompactTextString(m) }
func (*CassandraError) ProtoMessage()    {}
func (*CassandraError) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{0}
}

func (m *CassandraError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraError.Unmarshal(m, b)
}
func (m *CassandraError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraError.Marshal(b, m, deterministic)
}
func (m *CassandraError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraError.Merge(m, src)
}
func (m *CassandraError) XXX_Size() int {
	return xxx_messageInfo_CassandraError.Size(m)
}
func (m *CassandraError) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraError.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraError proto.InternalMessageInfo

// Consistency Level (CL) for individual read/write API calls to Cassandra.
type CassandraConsistencyLevel struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraConsistencyLevel) Reset()         { *m = CassandraConsistencyLevel{} }
func (m *CassandraConsistencyLevel) String() string { return proto.CompactTextString(m) }
func (*CassandraConsistencyLevel) ProtoMessage()    {}
func (*CassandraConsistencyLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{1}
}

func (m *CassandraConsistencyLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraConsistencyLevel.Unmarshal(m, b)
}
func (m *CassandraConsistencyLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraConsistencyLevel.Marshal(b, m, deterministic)
}
func (m *CassandraConsistencyLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraConsistencyLevel.Merge(m, src)
}
func (m *CassandraConsistencyLevel) XXX_Size() int {
	return xxx_messageInfo_CassandraConsistencyLevel.Size(m)
}
func (m *CassandraConsistencyLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraConsistencyLevel.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraConsistencyLevel proto.InternalMessageInfo

type CassandraLimboStateLevel struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraLimboStateLevel) Reset()         { *m = CassandraLimboStateLevel{} }
func (m *CassandraLimboStateLevel) String() string { return proto.CompactTextString(m) }
func (*CassandraLimboStateLevel) ProtoMessage()    {}
func (*CassandraLimboStateLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{2}
}

func (m *CassandraLimboStateLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraLimboStateLevel.Unmarshal(m, b)
}
func (m *CassandraLimboStateLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraLimboStateLevel.Marshal(b, m, deterministic)
}
func (m *CassandraLimboStateLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraLimboStateLevel.Merge(m, src)
}
func (m *CassandraLimboStateLevel) XXX_Size() int {
	return xxx_messageInfo_CassandraLimboStateLevel.Size(m)
}
func (m *CassandraLimboStateLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraLimboStateLevel.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraLimboStateLevel proto.InternalMessageInfo

type CassandraIndexOperator struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraIndexOperator) Reset()         { *m = CassandraIndexOperator{} }
func (m *CassandraIndexOperator) String() string { return proto.CompactTextString(m) }
func (*CassandraIndexOperator) ProtoMessage()    {}
func (*CassandraIndexOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{3}
}

func (m *CassandraIndexOperator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraIndexOperator.Unmarshal(m, b)
}
func (m *CassandraIndexOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraIndexOperator.Marshal(b, m, deterministic)
}
func (m *CassandraIndexOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraIndexOperator.Merge(m, src)
}
func (m *CassandraIndexOperator) XXX_Size() int {
	return xxx_messageInfo_CassandraIndexOperator.Size(m)
}
func (m *CassandraIndexOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraIndexOperator.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraIndexOperator proto.InternalMessageInfo

type CassandraForceCompactionStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraForceCompactionStatus) Reset()         { *m = CassandraForceCompactionStatus{} }
func (m *CassandraForceCompactionStatus) String() string { return proto.CompactTextString(m) }
func (*CassandraForceCompactionStatus) ProtoMessage()    {}
func (*CassandraForceCompactionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{4}
}

func (m *CassandraForceCompactionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraForceCompactionStatus.Unmarshal(m, b)
}
func (m *CassandraForceCompactionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraForceCompactionStatus.Marshal(b, m, deterministic)
}
func (m *CassandraForceCompactionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraForceCompactionStatus.Merge(m, src)
}
func (m *CassandraForceCompactionStatus) XXX_Size() int {
	return xxx_messageInfo_CassandraForceCompactionStatus.Size(m)
}
func (m *CassandraForceCompactionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraForceCompactionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraForceCompactionStatus proto.InternalMessageInfo

type CassandraAuthenticationRequest struct {
	Credentials          []*CassandraAuthenticationRequest_Credentials `protobuf:"bytes,1,rep,name=credentials" json:"credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *CassandraAuthenticationRequest) Reset()         { *m = CassandraAuthenticationRequest{} }
func (m *CassandraAuthenticationRequest) String() string { return proto.CompactTextString(m) }
func (*CassandraAuthenticationRequest) ProtoMessage()    {}
func (*CassandraAuthenticationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{5}
}

func (m *CassandraAuthenticationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraAuthenticationRequest.Unmarshal(m, b)
}
func (m *CassandraAuthenticationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraAuthenticationRequest.Marshal(b, m, deterministic)
}
func (m *CassandraAuthenticationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraAuthenticationRequest.Merge(m, src)
}
func (m *CassandraAuthenticationRequest) XXX_Size() int {
	return xxx_messageInfo_CassandraAuthenticationRequest.Size(m)
}
func (m *CassandraAuthenticationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraAuthenticationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraAuthenticationRequest proto.InternalMessageInfo

func (m *CassandraAuthenticationRequest) GetCredentials() []*CassandraAuthenticationRequest_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type CassandraAuthenticationRequest_Credentials struct {
	Name                 *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value                *string  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraAuthenticationRequest_Credentials) Reset() {
	*m = CassandraAuthenticationRequest_Credentials{}
}
func (m *CassandraAuthenticationRequest_Credentials) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraAuthenticationRequest_Credentials) ProtoMessage() {}
func (*CassandraAuthenticationRequest_Credentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{5, 0}
}

func (m *CassandraAuthenticationRequest_Credentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraAuthenticationRequest_Credentials.Unmarshal(m, b)
}
func (m *CassandraAuthenticationRequest_Credentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraAuthenticationRequest_Credentials.Marshal(b, m, deterministic)
}
func (m *CassandraAuthenticationRequest_Credentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraAuthenticationRequest_Credentials.Merge(m, src)
}
func (m *CassandraAuthenticationRequest_Credentials) XXX_Size() int {
	return xxx_messageInfo_CassandraAuthenticationRequest_Credentials.Size(m)
}
func (m *CassandraAuthenticationRequest_Credentials) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraAuthenticationRequest_Credentials.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraAuthenticationRequest_Credentials proto.InternalMessageInfo

func (m *CassandraAuthenticationRequest_Credentials) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CassandraAuthenticationRequest_Credentials) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type CassandraPaxosVersion struct {
	Epoch                *int64                                      `protobuf:"varint,1,req,name=epoch" json:"epoch,omitempty"`
	PaxosInstance        *int64                                      `protobuf:"varint,2,req,name=paxos_instance,json=paxosInstance" json:"paxos_instance,omitempty"`
	ClientMetadata       *PaxosVersionClockProto_ClientMetadataProto `protobuf:"bytes,3,opt,name=client_metadata,json=clientMetadata" json:"client_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *CassandraPaxosVersion) Reset()         { *m = CassandraPaxosVersion{} }
func (m *CassandraPaxosVersion) String() string { return proto.CompactTextString(m) }
func (*CassandraPaxosVersion) ProtoMessage()    {}
func (*CassandraPaxosVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{6}
}

func (m *CassandraPaxosVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraPaxosVersion.Unmarshal(m, b)
}
func (m *CassandraPaxosVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraPaxosVersion.Marshal(b, m, deterministic)
}
func (m *CassandraPaxosVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraPaxosVersion.Merge(m, src)
}
func (m *CassandraPaxosVersion) XXX_Size() int {
	return xxx_messageInfo_CassandraPaxosVersion.Size(m)
}
func (m *CassandraPaxosVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraPaxosVersion.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraPaxosVersion proto.InternalMessageInfo

func (m *CassandraPaxosVersion) GetEpoch() int64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

func (m *CassandraPaxosVersion) GetPaxosInstance() int64 {
	if m != nil && m.PaxosInstance != nil {
		return *m.PaxosInstance
	}
	return 0
}

func (m *CassandraPaxosVersion) GetClientMetadata() *PaxosVersionClockProto_ClientMetadataProto {
	if m != nil {
		return m.ClientMetadata
	}
	return nil
}

// TODO: get this from cassandra_paxos_clock.proto
type CassandraInternalPaxosClock struct {
	CurrentEpoch         *int64                                                `protobuf:"varint,1,req,name=current_epoch,json=currentEpoch" json:"current_epoch,omitempty"`
	CurrentPaxosInstance *int64                                                `protobuf:"varint,2,req,name=current_paxos_instance,json=currentPaxosInstance" json:"current_paxos_instance,omitempty"`
	NextEpoch            *int64                                                `protobuf:"varint,3,req,name=next_epoch,json=nextEpoch" json:"next_epoch,omitempty"`
	NextPaxosInstance    *int64                                                `protobuf:"varint,4,req,name=next_paxos_instance,json=nextPaxosInstance" json:"next_paxos_instance,omitempty"`
	CurrentValueProposal *CassandraInternalPaxosClock_PaxosProposalNumberProto `protobuf:"bytes,5,req,name=current_value_proposal,json=currentValueProposal" json:"current_value_proposal,omitempty"`
	Promise              *CassandraInternalPaxosClock_PaxosProposalNumberProto `protobuf:"bytes,6,req,name=promise" json:"promise,omitempty"`
	CurrentValueState    *CassandraInternalPaxosClock_PaxosValueState          `protobuf:"varint,7,req,name=current_value_state,json=currentValueState,enum=nutanix.cassandra.CassandraInternalPaxosClock_PaxosValueState" json:"current_value_state,omitempty"`
	DeletionTimestamp    *int32                                                `protobuf:"varint,8,opt,name=deletion_timestamp,json=deletionTimestamp" json:"deletion_timestamp,omitempty"`
	Checksum             *int64                                                `protobuf:"varint,9,opt,name=checksum" json:"checksum,omitempty"`
	ClientMetadata       *PaxosVersionClockProto_ClientMetadataProto           `protobuf:"bytes,10,opt,name=client_metadata,json=clientMetadata" json:"client_metadata,omitempty"`
	KeyColumnChecksum    *int32                                                `protobuf:"varint,11,opt,name=key_column_checksum,json=keyColumnChecksum" json:"key_column_checksum,omitempty"`
	Corrupted            *bool                                                 `protobuf:"varint,12,opt,name=corrupted,def=0" json:"corrupted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *CassandraInternalPaxosClock) Reset()         { *m = CassandraInternalPaxosClock{} }
func (m *CassandraInternalPaxosClock) String() string { return proto.CompactTextString(m) }
func (*CassandraInternalPaxosClock) ProtoMessage()    {}
func (*CassandraInternalPaxosClock) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{7}
}

func (m *CassandraInternalPaxosClock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraInternalPaxosClock.Unmarshal(m, b)
}
func (m *CassandraInternalPaxosClock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraInternalPaxosClock.Marshal(b, m, deterministic)
}
func (m *CassandraInternalPaxosClock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraInternalPaxosClock.Merge(m, src)
}
func (m *CassandraInternalPaxosClock) XXX_Size() int {
	return xxx_messageInfo_CassandraInternalPaxosClock.Size(m)
}
func (m *CassandraInternalPaxosClock) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraInternalPaxosClock.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraInternalPaxosClock proto.InternalMessageInfo

const Default_CassandraInternalPaxosClock_Corrupted bool = false

func (m *CassandraInternalPaxosClock) GetCurrentEpoch() int64 {
	if m != nil && m.CurrentEpoch != nil {
		return *m.CurrentEpoch
	}
	return 0
}

func (m *CassandraInternalPaxosClock) GetCurrentPaxosInstance() int64 {
	if m != nil && m.CurrentPaxosInstance != nil {
		return *m.CurrentPaxosInstance
	}
	return 0
}

func (m *CassandraInternalPaxosClock) GetNextEpoch() int64 {
	if m != nil && m.NextEpoch != nil {
		return *m.NextEpoch
	}
	return 0
}

func (m *CassandraInternalPaxosClock) GetNextPaxosInstance() int64 {
	if m != nil && m.NextPaxosInstance != nil {
		return *m.NextPaxosInstance
	}
	return 0
}

func (m *CassandraInternalPaxosClock) GetCurrentValueProposal() *CassandraInternalPaxosClock_PaxosProposalNumberProto {
	if m != nil {
		return m.CurrentValueProposal
	}
	return nil
}

func (m *CassandraInternalPaxosClock) GetPromise() *CassandraInternalPaxosClock_PaxosProposalNumberProto {
	if m != nil {
		return m.Promise
	}
	return nil
}

func (m *CassandraInternalPaxosClock) GetCurrentValueState() CassandraInternalPaxosClock_PaxosValueState {
	if m != nil && m.CurrentValueState != nil {
		return *m.CurrentValueState
	}
	return CassandraInternalPaxosClock_kOnlyPromiseForAValueExists
}

func (m *CassandraInternalPaxosClock) GetDeletionTimestamp() int32 {
	if m != nil && m.DeletionTimestamp != nil {
		return *m.DeletionTimestamp
	}
	return 0
}

func (m *CassandraInternalPaxosClock) GetChecksum() int64 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return 0
}

func (m *CassandraInternalPaxosClock) GetClientMetadata() *PaxosVersionClockProto_ClientMetadataProto {
	if m != nil {
		return m.ClientMetadata
	}
	return nil
}

func (m *CassandraInternalPaxosClock) GetKeyColumnChecksum() int32 {
	if m != nil && m.KeyColumnChecksum != nil {
		return *m.KeyColumnChecksum
	}
	return 0
}

func (m *CassandraInternalPaxosClock) GetCorrupted() bool {
	if m != nil && m.Corrupted != nil {
		return *m.Corrupted
	}
	return Default_CassandraInternalPaxosClock_Corrupted
}

type CassandraInternalPaxosClock_PaxosProposalNumberProto struct {
	ProposalNumber       *int64   `protobuf:"varint,1,req,name=proposal_number,json=proposalNumber" json:"proposal_number,omitempty"`
	NodeId               *int64   `protobuf:"varint,2,req,name=node_id,json=nodeId" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraInternalPaxosClock_PaxosProposalNumberProto) Reset() {
	*m = CassandraInternalPaxosClock_PaxosProposalNumberProto{}
}
func (m *CassandraInternalPaxosClock_PaxosProposalNumberProto) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraInternalPaxosClock_PaxosProposalNumberProto) ProtoMessage() {}
func (*CassandraInternalPaxosClock_PaxosProposalNumberProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{7, 0}
}

func (m *CassandraInternalPaxosClock_PaxosProposalNumberProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraInternalPaxosClock_PaxosProposalNumberProto.Unmarshal(m, b)
}
func (m *CassandraInternalPaxosClock_PaxosProposalNumberProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraInternalPaxosClock_PaxosProposalNumberProto.Marshal(b, m, deterministic)
}
func (m *CassandraInternalPaxosClock_PaxosProposalNumberProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraInternalPaxosClock_PaxosProposalNumberProto.Merge(m, src)
}
func (m *CassandraInternalPaxosClock_PaxosProposalNumberProto) XXX_Size() int {
	return xxx_messageInfo_CassandraInternalPaxosClock_PaxosProposalNumberProto.Size(m)
}
func (m *CassandraInternalPaxosClock_PaxosProposalNumberProto) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraInternalPaxosClock_PaxosProposalNumberProto.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraInternalPaxosClock_PaxosProposalNumberProto proto.InternalMessageInfo

func (m *CassandraInternalPaxosClock_PaxosProposalNumberProto) GetProposalNumber() int64 {
	if m != nil && m.ProposalNumber != nil {
		return *m.ProposalNumber
	}
	return 0
}

func (m *CassandraInternalPaxosClock_PaxosProposalNumberProto) GetNodeId() int64 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

type CassandraClock struct {
	Timestamp            *int64                       `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	PaxosVersion         *CassandraPaxosVersion       `protobuf:"bytes,2,opt,name=paxos_version,json=paxosVersion" json:"paxos_version,omitempty"`
	InternalPaxosClock   *CassandraInternalPaxosClock `protobuf:"bytes,3,opt,name=internal_paxos_clock,json=internalPaxosClock" json:"internal_paxos_clock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CassandraClock) Reset()         { *m = CassandraClock{} }
func (m *CassandraClock) String() string { return proto.CompactTextString(m) }
func (*CassandraClock) ProtoMessage()    {}
func (*CassandraClock) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{8}
}

func (m *CassandraClock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraClock.Unmarshal(m, b)
}
func (m *CassandraClock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraClock.Marshal(b, m, deterministic)
}
func (m *CassandraClock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraClock.Merge(m, src)
}
func (m *CassandraClock) XXX_Size() int {
	return xxx_messageInfo_CassandraClock.Size(m)
}
func (m *CassandraClock) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraClock.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraClock proto.InternalMessageInfo

func (m *CassandraClock) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CassandraClock) GetPaxosVersion() *CassandraPaxosVersion {
	if m != nil {
		return m.PaxosVersion
	}
	return nil
}

func (m *CassandraClock) GetInternalPaxosClock() *CassandraInternalPaxosClock {
	if m != nil {
		return m.InternalPaxosClock
	}
	return nil
}

type CassandraValue struct {
	Value       []byte                      `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	ValueOffset *CassandraValue_ValueOffset `protobuf:"bytes,2,opt,name=value_offset,json=valueOffset" json:"value_offset,omitempty"`
	// Adler32 checksum for the value.
	Checksum             *int64   `protobuf:"varint,3,opt,name=checksum" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraValue) Reset()         { *m = CassandraValue{} }
func (m *CassandraValue) String() string { return proto.CompactTextString(m) }
func (*CassandraValue) ProtoMessage()    {}
func (*CassandraValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{9}
}

func (m *CassandraValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraValue.Unmarshal(m, b)
}
func (m *CassandraValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraValue.Marshal(b, m, deterministic)
}
func (m *CassandraValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraValue.Merge(m, src)
}
func (m *CassandraValue) XXX_Size() int {
	return xxx_messageInfo_CassandraValue.Size(m)
}
func (m *CassandraValue) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraValue.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraValue proto.InternalMessageInfo

func (m *CassandraValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CassandraValue) GetValueOffset() *CassandraValue_ValueOffset {
	if m != nil {
		return m.ValueOffset
	}
	return nil
}

func (m *CassandraValue) GetChecksum() int64 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return 0
}

type CassandraValue_ValueOffset struct {
	Offset               *int64   `protobuf:"varint,1,req,name=offset" json:"offset,omitempty"`
	Size                 *int64   `protobuf:"varint,2,req,name=size" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraValue_ValueOffset) Reset()         { *m = CassandraValue_ValueOffset{} }
func (m *CassandraValue_ValueOffset) String() string { return proto.CompactTextString(m) }
func (*CassandraValue_ValueOffset) ProtoMessage()    {}
func (*CassandraValue_ValueOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{9, 0}
}

func (m *CassandraValue_ValueOffset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraValue_ValueOffset.Unmarshal(m, b)
}
func (m *CassandraValue_ValueOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraValue_ValueOffset.Marshal(b, m, deterministic)
}
func (m *CassandraValue_ValueOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraValue_ValueOffset.Merge(m, src)
}
func (m *CassandraValue_ValueOffset) XXX_Size() int {
	return xxx_messageInfo_CassandraValue_ValueOffset.Size(m)
}
func (m *CassandraValue_ValueOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraValue_ValueOffset.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraValue_ValueOffset proto.InternalMessageInfo

func (m *CassandraValue_ValueOffset) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *CassandraValue_ValueOffset) GetSize() int64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

type CassandraColumn struct {
	Name  []byte               `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value *CassandraValue      `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	Clock *CassandraClock      `protobuf:"bytes,3,req,name=clock" json:"clock,omitempty"`
	Ttl   *int32               `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
	Error *CassandraError_Type `protobuf:"varint,5,opt,name=error,enum=nutanix.cassandra.CassandraError_Type,def=0" json:"error,omitempty"`
	// Adler32 checksum for column name and clock.
	Checksum             *int32   `protobuf:"varint,6,opt,name=checksum,def=0" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraColumn) Reset()         { *m = CassandraColumn{} }
func (m *CassandraColumn) String() string { return proto.CompactTextString(m) }
func (*CassandraColumn) ProtoMessage()    {}
func (*CassandraColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{10}
}

func (m *CassandraColumn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraColumn.Unmarshal(m, b)
}
func (m *CassandraColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraColumn.Marshal(b, m, deterministic)
}
func (m *CassandraColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraColumn.Merge(m, src)
}
func (m *CassandraColumn) XXX_Size() int {
	return xxx_messageInfo_CassandraColumn.Size(m)
}
func (m *CassandraColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraColumn.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraColumn proto.InternalMessageInfo

const Default_CassandraColumn_Error CassandraError_Type = CassandraError_kNoError
const Default_CassandraColumn_Checksum int32 = 0

func (m *CassandraColumn) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CassandraColumn) GetValue() *CassandraValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CassandraColumn) GetClock() *CassandraClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

func (m *CassandraColumn) GetTtl() int32 {
	if m != nil && m.Ttl != nil {
		return *m.Ttl
	}
	return 0
}

func (m *CassandraColumn) GetError() CassandraError_Type {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_CassandraColumn_Error
}

func (m *CassandraColumn) GetChecksum() int32 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return Default_CassandraColumn_Checksum
}

type CassandraSuperColumn struct {
	Name                 []byte             `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Columns              []*CassandraColumn `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CassandraSuperColumn) Reset()         { *m = CassandraSuperColumn{} }
func (m *CassandraSuperColumn) String() string { return proto.CompactTextString(m) }
func (*CassandraSuperColumn) ProtoMessage()    {}
func (*CassandraSuperColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{11}
}

func (m *CassandraSuperColumn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSuperColumn.Unmarshal(m, b)
}
func (m *CassandraSuperColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSuperColumn.Marshal(b, m, deterministic)
}
func (m *CassandraSuperColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSuperColumn.Merge(m, src)
}
func (m *CassandraSuperColumn) XXX_Size() int {
	return xxx_messageInfo_CassandraSuperColumn.Size(m)
}
func (m *CassandraSuperColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSuperColumn.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSuperColumn proto.InternalMessageInfo

func (m *CassandraSuperColumn) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CassandraSuperColumn) GetColumns() []*CassandraColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

type CassandraColumnOrSuperColumn struct {
	Column               *CassandraColumn      `protobuf:"bytes,1,opt,name=column" json:"column,omitempty"`
	SuperColumn          *CassandraSuperColumn `protobuf:"bytes,2,opt,name=super_column,json=superColumn" json:"super_column,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CassandraColumnOrSuperColumn) Reset()         { *m = CassandraColumnOrSuperColumn{} }
func (m *CassandraColumnOrSuperColumn) String() string { return proto.CompactTextString(m) }
func (*CassandraColumnOrSuperColumn) ProtoMessage()    {}
func (*CassandraColumnOrSuperColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{12}
}

func (m *CassandraColumnOrSuperColumn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraColumnOrSuperColumn.Unmarshal(m, b)
}
func (m *CassandraColumnOrSuperColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraColumnOrSuperColumn.Marshal(b, m, deterministic)
}
func (m *CassandraColumnOrSuperColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraColumnOrSuperColumn.Merge(m, src)
}
func (m *CassandraColumnOrSuperColumn) XXX_Size() int {
	return xxx_messageInfo_CassandraColumnOrSuperColumn.Size(m)
}
func (m *CassandraColumnOrSuperColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraColumnOrSuperColumn.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraColumnOrSuperColumn proto.InternalMessageInfo

func (m *CassandraColumnOrSuperColumn) GetColumn() *CassandraColumn {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *CassandraColumnOrSuperColumn) GetSuperColumn() *CassandraSuperColumn {
	if m != nil {
		return m.SuperColumn
	}
	return nil
}

type CassandraColumnList struct {
	Columns              []*CassandraColumnOrSuperColumn `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraColumnList) Reset()         { *m = CassandraColumnList{} }
func (m *CassandraColumnList) String() string { return proto.CompactTextString(m) }
func (*CassandraColumnList) ProtoMessage()    {}
func (*CassandraColumnList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{13}
}

func (m *CassandraColumnList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraColumnList.Unmarshal(m, b)
}
func (m *CassandraColumnList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraColumnList.Marshal(b, m, deterministic)
}
func (m *CassandraColumnList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraColumnList.Merge(m, src)
}
func (m *CassandraColumnList) XXX_Size() int {
	return xxx_messageInfo_CassandraColumnList.Size(m)
}
func (m *CassandraColumnList) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraColumnList.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraColumnList proto.InternalMessageInfo

func (m *CassandraColumnList) GetColumns() []*CassandraColumnOrSuperColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

type CassandraColumnParent struct {
	ColumnFamily         *string  `protobuf:"bytes,1,req,name=column_family,json=columnFamily" json:"column_family,omitempty"`
	SuperColumn          []byte   `protobuf:"bytes,2,opt,name=super_column,json=superColumn" json:"super_column,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraColumnParent) Reset()         { *m = CassandraColumnParent{} }
func (m *CassandraColumnParent) String() string { return proto.CompactTextString(m) }
func (*CassandraColumnParent) ProtoMessage()    {}
func (*CassandraColumnParent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{14}
}

func (m *CassandraColumnParent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraColumnParent.Unmarshal(m, b)
}
func (m *CassandraColumnParent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraColumnParent.Marshal(b, m, deterministic)
}
func (m *CassandraColumnParent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraColumnParent.Merge(m, src)
}
func (m *CassandraColumnParent) XXX_Size() int {
	return xxx_messageInfo_CassandraColumnParent.Size(m)
}
func (m *CassandraColumnParent) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraColumnParent.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraColumnParent proto.InternalMessageInfo

func (m *CassandraColumnParent) GetColumnFamily() string {
	if m != nil && m.ColumnFamily != nil {
		return *m.ColumnFamily
	}
	return ""
}

func (m *CassandraColumnParent) GetSuperColumn() []byte {
	if m != nil {
		return m.SuperColumn
	}
	return nil
}

type CassandraColumnPath struct {
	ColumnFamily         *string  `protobuf:"bytes,1,req,name=column_family,json=columnFamily" json:"column_family,omitempty"`
	SuperColumn          []byte   `protobuf:"bytes,2,opt,name=super_column,json=superColumn" json:"super_column,omitempty"`
	Column               []byte   `protobuf:"bytes,3,opt,name=column" json:"column,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraColumnPath) Reset()         { *m = CassandraColumnPath{} }
func (m *CassandraColumnPath) String() string { return proto.CompactTextString(m) }
func (*CassandraColumnPath) ProtoMessage()    {}
func (*CassandraColumnPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{15}
}

func (m *CassandraColumnPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraColumnPath.Unmarshal(m, b)
}
func (m *CassandraColumnPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraColumnPath.Marshal(b, m, deterministic)
}
func (m *CassandraColumnPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraColumnPath.Merge(m, src)
}
func (m *CassandraColumnPath) XXX_Size() int {
	return xxx_messageInfo_CassandraColumnPath.Size(m)
}
func (m *CassandraColumnPath) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraColumnPath.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraColumnPath proto.InternalMessageInfo

func (m *CassandraColumnPath) GetColumnFamily() string {
	if m != nil && m.ColumnFamily != nil {
		return *m.ColumnFamily
	}
	return ""
}

func (m *CassandraColumnPath) GetSuperColumn() []byte {
	if m != nil {
		return m.SuperColumn
	}
	return nil
}

func (m *CassandraColumnPath) GetColumn() []byte {
	if m != nil {
		return m.Column
	}
	return nil
}

type CassandraSliceRange struct {
	Start                []byte   `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	Finish               []byte   `protobuf:"bytes,2,opt,name=finish" json:"finish,omitempty"`
	Reversed             *bool    `protobuf:"varint,3,opt,name=reversed,def=0" json:"reversed,omitempty"`
	Count                *int32   `protobuf:"varint,4,opt,name=count,def=100" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSliceRange) Reset()         { *m = CassandraSliceRange{} }
func (m *CassandraSliceRange) String() string { return proto.CompactTextString(m) }
func (*CassandraSliceRange) ProtoMessage()    {}
func (*CassandraSliceRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{16}
}

func (m *CassandraSliceRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSliceRange.Unmarshal(m, b)
}
func (m *CassandraSliceRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSliceRange.Marshal(b, m, deterministic)
}
func (m *CassandraSliceRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSliceRange.Merge(m, src)
}
func (m *CassandraSliceRange) XXX_Size() int {
	return xxx_messageInfo_CassandraSliceRange.Size(m)
}
func (m *CassandraSliceRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSliceRange.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSliceRange proto.InternalMessageInfo

const Default_CassandraSliceRange_Reversed bool = false
const Default_CassandraSliceRange_Count int32 = 100

func (m *CassandraSliceRange) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *CassandraSliceRange) GetFinish() []byte {
	if m != nil {
		return m.Finish
	}
	return nil
}

func (m *CassandraSliceRange) GetReversed() bool {
	if m != nil && m.Reversed != nil {
		return *m.Reversed
	}
	return Default_CassandraSliceRange_Reversed
}

func (m *CassandraSliceRange) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return Default_CassandraSliceRange_Count
}

type CassandraSlicePredicate struct {
	ColumnNames [][]byte             `protobuf:"bytes,1,rep,name=column_names,json=columnNames" json:"column_names,omitempty"`
	SliceRange  *CassandraSliceRange `protobuf:"bytes,2,opt,name=slice_range,json=sliceRange" json:"slice_range,omitempty"`
	// Skip fetching the values for the columns to restrict size of the response.
	SkipValues *bool `protobuf:"varint,3,opt,name=skip_values,json=skipValues" json:"skip_values,omitempty"`
	// If > 0, then specifies the maximum size of the result.
	MaxSizeBytes         *int64   `protobuf:"varint,4,opt,name=max_size_bytes,json=maxSizeBytes" json:"max_size_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSlicePredicate) Reset()         { *m = CassandraSlicePredicate{} }
func (m *CassandraSlicePredicate) String() string { return proto.CompactTextString(m) }
func (*CassandraSlicePredicate) ProtoMessage()    {}
func (*CassandraSlicePredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{17}
}

func (m *CassandraSlicePredicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSlicePredicate.Unmarshal(m, b)
}
func (m *CassandraSlicePredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSlicePredicate.Marshal(b, m, deterministic)
}
func (m *CassandraSlicePredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSlicePredicate.Merge(m, src)
}
func (m *CassandraSlicePredicate) XXX_Size() int {
	return xxx_messageInfo_CassandraSlicePredicate.Size(m)
}
func (m *CassandraSlicePredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSlicePredicate.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSlicePredicate proto.InternalMessageInfo

func (m *CassandraSlicePredicate) GetColumnNames() [][]byte {
	if m != nil {
		return m.ColumnNames
	}
	return nil
}

func (m *CassandraSlicePredicate) GetSliceRange() *CassandraSliceRange {
	if m != nil {
		return m.SliceRange
	}
	return nil
}

func (m *CassandraSlicePredicate) GetSkipValues() bool {
	if m != nil && m.SkipValues != nil {
		return *m.SkipValues
	}
	return false
}

func (m *CassandraSlicePredicate) GetMaxSizeBytes() int64 {
	if m != nil && m.MaxSizeBytes != nil {
		return *m.MaxSizeBytes
	}
	return 0
}

type CassandraIndexExpression struct {
	ColumnName           []byte                       `protobuf:"bytes,1,req,name=column_name,json=columnName" json:"column_name,omitempty"`
	Op                   *CassandraIndexOperator_Type `protobuf:"varint,2,req,name=op,enum=nutanix.cassandra.CassandraIndexOperator_Type" json:"op,omitempty"`
	Value                *string                      `protobuf:"bytes,3,req,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CassandraIndexExpression) Reset()         { *m = CassandraIndexExpression{} }
func (m *CassandraIndexExpression) String() string { return proto.CompactTextString(m) }
func (*CassandraIndexExpression) ProtoMessage()    {}
func (*CassandraIndexExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{18}
}

func (m *CassandraIndexExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraIndexExpression.Unmarshal(m, b)
}
func (m *CassandraIndexExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraIndexExpression.Marshal(b, m, deterministic)
}
func (m *CassandraIndexExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraIndexExpression.Merge(m, src)
}
func (m *CassandraIndexExpression) XXX_Size() int {
	return xxx_messageInfo_CassandraIndexExpression.Size(m)
}
func (m *CassandraIndexExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraIndexExpression.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraIndexExpression proto.InternalMessageInfo

func (m *CassandraIndexExpression) GetColumnName() []byte {
	if m != nil {
		return m.ColumnName
	}
	return nil
}

func (m *CassandraIndexExpression) GetOp() CassandraIndexOperator_Type {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return CassandraIndexOperator_kEq
}

func (m *CassandraIndexExpression) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type CassandraIndexClause struct {
	Expressions          []*CassandraIndexExpression `protobuf:"bytes,1,rep,name=expressions" json:"expressions,omitempty"`
	StartKey             []byte                      `protobuf:"bytes,2,req,name=start_key,json=startKey" json:"start_key,omitempty"`
	Count                *int32                      `protobuf:"varint,3,opt,name=count,def=100" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CassandraIndexClause) Reset()         { *m = CassandraIndexClause{} }
func (m *CassandraIndexClause) String() string { return proto.CompactTextString(m) }
func (*CassandraIndexClause) ProtoMessage()    {}
func (*CassandraIndexClause) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{19}
}

func (m *CassandraIndexClause) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraIndexClause.Unmarshal(m, b)
}
func (m *CassandraIndexClause) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraIndexClause.Marshal(b, m, deterministic)
}
func (m *CassandraIndexClause) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraIndexClause.Merge(m, src)
}
func (m *CassandraIndexClause) XXX_Size() int {
	return xxx_messageInfo_CassandraIndexClause.Size(m)
}
func (m *CassandraIndexClause) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraIndexClause.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraIndexClause proto.InternalMessageInfo

const Default_CassandraIndexClause_Count int32 = 100

func (m *CassandraIndexClause) GetExpressions() []*CassandraIndexExpression {
	if m != nil {
		return m.Expressions
	}
	return nil
}

func (m *CassandraIndexClause) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *CassandraIndexClause) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return Default_CassandraIndexClause_Count
}

type CassandraKeyRange struct {
	StartKey             []byte   `protobuf:"bytes,1,opt,name=start_key,json=startKey" json:"start_key,omitempty"`
	EndKey               []byte   `protobuf:"bytes,2,opt,name=end_key,json=endKey" json:"end_key,omitempty"`
	StartToken           []byte   `protobuf:"bytes,3,opt,name=start_token,json=startToken" json:"start_token,omitempty"`
	EndToken             []byte   `protobuf:"bytes,4,opt,name=end_token,json=endToken" json:"end_token,omitempty"`
	Count                *int32   `protobuf:"varint,5,opt,name=count,def=100" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraKeyRange) Reset()         { *m = CassandraKeyRange{} }
func (m *CassandraKeyRange) String() string { return proto.CompactTextString(m) }
func (*CassandraKeyRange) ProtoMessage()    {}
func (*CassandraKeyRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{20}
}

func (m *CassandraKeyRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraKeyRange.Unmarshal(m, b)
}
func (m *CassandraKeyRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraKeyRange.Marshal(b, m, deterministic)
}
func (m *CassandraKeyRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraKeyRange.Merge(m, src)
}
func (m *CassandraKeyRange) XXX_Size() int {
	return xxx_messageInfo_CassandraKeyRange.Size(m)
}
func (m *CassandraKeyRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraKeyRange.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraKeyRange proto.InternalMessageInfo

const Default_CassandraKeyRange_Count int32 = 100

func (m *CassandraKeyRange) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *CassandraKeyRange) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

func (m *CassandraKeyRange) GetStartToken() []byte {
	if m != nil {
		return m.StartToken
	}
	return nil
}

func (m *CassandraKeyRange) GetEndToken() []byte {
	if m != nil {
		return m.EndToken
	}
	return nil
}

func (m *CassandraKeyRange) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return Default_CassandraKeyRange_Count
}

type CassandraKeySlice struct {
	Key                  []byte                          `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Columns              []*CassandraColumnOrSuperColumn `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraKeySlice) Reset()         { *m = CassandraKeySlice{} }
func (m *CassandraKeySlice) String() string { return proto.CompactTextString(m) }
func (*CassandraKeySlice) ProtoMessage()    {}
func (*CassandraKeySlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{21}
}

func (m *CassandraKeySlice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraKeySlice.Unmarshal(m, b)
}
func (m *CassandraKeySlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraKeySlice.Marshal(b, m, deterministic)
}
func (m *CassandraKeySlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraKeySlice.Merge(m, src)
}
func (m *CassandraKeySlice) XXX_Size() int {
	return xxx_messageInfo_CassandraKeySlice.Size(m)
}
func (m *CassandraKeySlice) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraKeySlice.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraKeySlice proto.InternalMessageInfo

func (m *CassandraKeySlice) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CassandraKeySlice) GetColumns() []*CassandraColumnOrSuperColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

type CassandraKeyCount struct {
	Key                  []byte   `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Count                *int32   `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraKeyCount) Reset()         { *m = CassandraKeyCount{} }
func (m *CassandraKeyCount) String() string { return proto.CompactTextString(m) }
func (*CassandraKeyCount) ProtoMessage()    {}
func (*CassandraKeyCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{22}
}

func (m *CassandraKeyCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraKeyCount.Unmarshal(m, b)
}
func (m *CassandraKeyCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraKeyCount.Marshal(b, m, deterministic)
}
func (m *CassandraKeyCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraKeyCount.Merge(m, src)
}
func (m *CassandraKeyCount) XXX_Size() int {
	return xxx_messageInfo_CassandraKeyCount.Size(m)
}
func (m *CassandraKeyCount) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraKeyCount.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraKeyCount proto.InternalMessageInfo

func (m *CassandraKeyCount) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CassandraKeyCount) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CassandraDeletion struct {
	Clock       *CassandraClock          `protobuf:"bytes,1,req,name=clock" json:"clock,omitempty"`
	ColumnName  []byte                   `protobuf:"bytes,2,opt,name=column_name,json=columnName" json:"column_name,omitempty"`
	Error       *CassandraError_Type     `protobuf:"varint,3,opt,name=error,enum=nutanix.cassandra.CassandraError_Type,def=0" json:"error,omitempty"`
	SuperColumn []byte                   `protobuf:"bytes,4,opt,name=super_column,json=superColumn" json:"super_column,omitempty"`
	Predicate   *CassandraSlicePredicate `protobuf:"bytes,5,opt,name=predicate" json:"predicate,omitempty"`
	// delete_row is only applicable for row CAS cfs for deleting the entire row.
	// When this is set, 'column_name' should not be set.
	DeleteRow *bool `protobuf:"varint,6,opt,name=delete_row,json=deleteRow" json:"delete_row,omitempty"`
	// If this is true, then the deletion will delete the value with a
	// DeleteChosenCellToBeRemoved value state. This should be used only when
	// writing values to a single node.
	WriteDeleteChosen *bool `protobuf:"varint,7,opt,name=write_delete_chosen,json=writeDeleteChosen,def=0" json:"write_delete_chosen,omitempty"`
	// Adler32 checksum for column name and clock.
	Checksum             *int32   `protobuf:"varint,8,opt,name=checksum,def=0" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDeletion) Reset()         { *m = CassandraDeletion{} }
func (m *CassandraDeletion) String() string { return proto.CompactTextString(m) }
func (*CassandraDeletion) ProtoMessage()    {}
func (*CassandraDeletion) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{23}
}

func (m *CassandraDeletion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDeletion.Unmarshal(m, b)
}
func (m *CassandraDeletion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDeletion.Marshal(b, m, deterministic)
}
func (m *CassandraDeletion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDeletion.Merge(m, src)
}
func (m *CassandraDeletion) XXX_Size() int {
	return xxx_messageInfo_CassandraDeletion.Size(m)
}
func (m *CassandraDeletion) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDeletion.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDeletion proto.InternalMessageInfo

const Default_CassandraDeletion_Error CassandraError_Type = CassandraError_kNoError
const Default_CassandraDeletion_WriteDeleteChosen bool = false
const Default_CassandraDeletion_Checksum int32 = 0

func (m *CassandraDeletion) GetClock() *CassandraClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

func (m *CassandraDeletion) GetColumnName() []byte {
	if m != nil {
		return m.ColumnName
	}
	return nil
}

func (m *CassandraDeletion) GetError() CassandraError_Type {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return Default_CassandraDeletion_Error
}

func (m *CassandraDeletion) GetSuperColumn() []byte {
	if m != nil {
		return m.SuperColumn
	}
	return nil
}

func (m *CassandraDeletion) GetPredicate() *CassandraSlicePredicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *CassandraDeletion) GetDeleteRow() bool {
	if m != nil && m.DeleteRow != nil {
		return *m.DeleteRow
	}
	return false
}

func (m *CassandraDeletion) GetWriteDeleteChosen() bool {
	if m != nil && m.WriteDeleteChosen != nil {
		return *m.WriteDeleteChosen
	}
	return Default_CassandraDeletion_WriteDeleteChosen
}

func (m *CassandraDeletion) GetChecksum() int32 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return Default_CassandraDeletion_Checksum
}

type CassandraMutation struct {
	Column   *CassandraColumnOrSuperColumn `protobuf:"bytes,1,opt,name=column" json:"column,omitempty"`
	Deletion *CassandraDeletion            `protobuf:"bytes,2,opt,name=deletion" json:"deletion,omitempty"`
	// If this is true, then Cassandra should return the current chosen value
	// on CAS error.
	ReturnValueOnCas     *bool    `protobuf:"varint,3,opt,name=return_value_on_cas,json=returnValueOnCas,def=0" json:"return_value_on_cas,omitempty"`
	SkipCommitlog        *bool    `protobuf:"varint,4,opt,name=skip_commitlog,json=skipCommitlog,def=0" json:"skip_commitlog,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraMutation) Reset()         { *m = CassandraMutation{} }
func (m *CassandraMutation) String() string { return proto.CompactTextString(m) }
func (*CassandraMutation) ProtoMessage()    {}
func (*CassandraMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{24}
}

func (m *CassandraMutation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraMutation.Unmarshal(m, b)
}
func (m *CassandraMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraMutation.Marshal(b, m, deterministic)
}
func (m *CassandraMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraMutation.Merge(m, src)
}
func (m *CassandraMutation) XXX_Size() int {
	return xxx_messageInfo_CassandraMutation.Size(m)
}
func (m *CassandraMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraMutation.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraMutation proto.InternalMessageInfo

const Default_CassandraMutation_ReturnValueOnCas bool = false
const Default_CassandraMutation_SkipCommitlog bool = false

func (m *CassandraMutation) GetColumn() *CassandraColumnOrSuperColumn {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *CassandraMutation) GetDeletion() *CassandraDeletion {
	if m != nil {
		return m.Deletion
	}
	return nil
}

func (m *CassandraMutation) GetReturnValueOnCas() bool {
	if m != nil && m.ReturnValueOnCas != nil {
		return *m.ReturnValueOnCas
	}
	return Default_CassandraMutation_ReturnValueOnCas
}

func (m *CassandraMutation) GetSkipCommitlog() bool {
	if m != nil && m.SkipCommitlog != nil {
		return *m.SkipCommitlog
	}
	return Default_CassandraMutation_SkipCommitlog
}

type CassandraMutationsList struct {
	Key           []byte                                  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	MutationsList []*CassandraMutationsList_MutationsList `protobuf:"bytes,2,rep,name=mutations_list,json=mutationsList" json:"mutations_list,omitempty"`
	// The checksum for 'key'.
	Checksum             *int32   `protobuf:"varint,3,opt,name=checksum,def=0" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraMutationsList) Reset()         { *m = CassandraMutationsList{} }
func (m *CassandraMutationsList) String() string { return proto.CompactTextString(m) }
func (*CassandraMutationsList) ProtoMessage()    {}
func (*CassandraMutationsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{25}
}

func (m *CassandraMutationsList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraMutationsList.Unmarshal(m, b)
}
func (m *CassandraMutationsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraMutationsList.Marshal(b, m, deterministic)
}
func (m *CassandraMutationsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraMutationsList.Merge(m, src)
}
func (m *CassandraMutationsList) XXX_Size() int {
	return xxx_messageInfo_CassandraMutationsList.Size(m)
}
func (m *CassandraMutationsList) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraMutationsList.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraMutationsList proto.InternalMessageInfo

const Default_CassandraMutationsList_Checksum int32 = 0

func (m *CassandraMutationsList) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CassandraMutationsList) GetMutationsList() []*CassandraMutationsList_MutationsList {
	if m != nil {
		return m.MutationsList
	}
	return nil
}

func (m *CassandraMutationsList) GetChecksum() int32 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return Default_CassandraMutationsList_Checksum
}

type CassandraMutationsList_MutationsList struct {
	ColumnFamily         *string              `protobuf:"bytes,1,req,name=column_family,json=columnFamily" json:"column_family,omitempty"`
	Mutations            []*CassandraMutation `protobuf:"bytes,2,rep,name=mutations" json:"mutations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CassandraMutationsList_MutationsList) Reset()         { *m = CassandraMutationsList_MutationsList{} }
func (m *CassandraMutationsList_MutationsList) String() string { return proto.CompactTextString(m) }
func (*CassandraMutationsList_MutationsList) ProtoMessage()    {}
func (*CassandraMutationsList_MutationsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{25, 0}
}

func (m *CassandraMutationsList_MutationsList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraMutationsList_MutationsList.Unmarshal(m, b)
}
func (m *CassandraMutationsList_MutationsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraMutationsList_MutationsList.Marshal(b, m, deterministic)
}
func (m *CassandraMutationsList_MutationsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraMutationsList_MutationsList.Merge(m, src)
}
func (m *CassandraMutationsList_MutationsList) XXX_Size() int {
	return xxx_messageInfo_CassandraMutationsList_MutationsList.Size(m)
}
func (m *CassandraMutationsList_MutationsList) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraMutationsList_MutationsList.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraMutationsList_MutationsList proto.InternalMessageInfo

func (m *CassandraMutationsList_MutationsList) GetColumnFamily() string {
	if m != nil && m.ColumnFamily != nil {
		return *m.ColumnFamily
	}
	return ""
}

func (m *CassandraMutationsList_MutationsList) GetMutations() []*CassandraMutation {
	if m != nil {
		return m.Mutations
	}
	return nil
}

type CassandraIndexType struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraIndexType) Reset()         { *m = CassandraIndexType{} }
func (m *CassandraIndexType) String() string { return proto.CompactTextString(m) }
func (*CassandraIndexType) ProtoMessage()    {}
func (*CassandraIndexType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{26}
}

func (m *CassandraIndexType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraIndexType.Unmarshal(m, b)
}
func (m *CassandraIndexType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraIndexType.Marshal(b, m, deterministic)
}
func (m *CassandraIndexType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraIndexType.Merge(m, src)
}
func (m *CassandraIndexType) XXX_Size() int {
	return xxx_messageInfo_CassandraIndexType.Size(m)
}
func (m *CassandraIndexType) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraIndexType.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraIndexType proto.InternalMessageInfo

type CassandraColumnDef struct {
	Name                 []byte              `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	ValidationClass      *string             `protobuf:"bytes,2,req,name=validation_class,json=validationClass" json:"validation_class,omitempty"`
	IndexType            *CassandraIndexType `protobuf:"bytes,3,opt,name=index_type,json=indexType" json:"index_type,omitempty"`
	IndexName            *string             `protobuf:"bytes,4,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CassandraColumnDef) Reset()         { *m = CassandraColumnDef{} }
func (m *CassandraColumnDef) String() string { return proto.CompactTextString(m) }
func (*CassandraColumnDef) ProtoMessage()    {}
func (*CassandraColumnDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{27}
}

func (m *CassandraColumnDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraColumnDef.Unmarshal(m, b)
}
func (m *CassandraColumnDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraColumnDef.Marshal(b, m, deterministic)
}
func (m *CassandraColumnDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraColumnDef.Merge(m, src)
}
func (m *CassandraColumnDef) XXX_Size() int {
	return xxx_messageInfo_CassandraColumnDef.Size(m)
}
func (m *CassandraColumnDef) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraColumnDef.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraColumnDef proto.InternalMessageInfo

func (m *CassandraColumnDef) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CassandraColumnDef) GetValidationClass() string {
	if m != nil && m.ValidationClass != nil {
		return *m.ValidationClass
	}
	return ""
}

func (m *CassandraColumnDef) GetIndexType() *CassandraIndexType {
	if m != nil {
		return m.IndexType
	}
	return nil
}

func (m *CassandraColumnDef) GetIndexName() string {
	if m != nil && m.IndexName != nil {
		return *m.IndexName
	}
	return ""
}

type CassandraCfDef struct {
	Keyspace                     *string               `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	Name                         *string               `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	ColumnType                   *string               `protobuf:"bytes,3,opt,name=column_type,json=columnType" json:"column_type,omitempty"`
	ClockType                    *string               `protobuf:"bytes,4,opt,name=clock_type,json=clockType" json:"clock_type,omitempty"`
	ComparatorType               *string               `protobuf:"bytes,5,opt,name=comparator_type,json=comparatorType" json:"comparator_type,omitempty"`
	SubcomparatorType            *string               `protobuf:"bytes,6,opt,name=subcomparator_type,json=subcomparatorType" json:"subcomparator_type,omitempty"`
	Reconciler                   *string               `protobuf:"bytes,7,opt,name=reconciler" json:"reconciler,omitempty"`
	Comment                      *string               `protobuf:"bytes,8,opt,name=comment" json:"comment,omitempty"`
	RowCacheSize                 *float64              `protobuf:"fixed64,9,opt,name=row_cache_size,json=rowCacheSize" json:"row_cache_size,omitempty"`
	KeyCacheSize                 *float64              `protobuf:"fixed64,10,opt,name=key_cache_size,json=keyCacheSize" json:"key_cache_size,omitempty"`
	ReadRepairChance             *float64              `protobuf:"fixed64,11,opt,name=read_repair_chance,json=readRepairChance" json:"read_repair_chance,omitempty"`
	ColumnMetadata               []*CassandraColumnDef `protobuf:"bytes,12,rep,name=column_metadata,json=columnMetadata" json:"column_metadata,omitempty"`
	GcGraceSeconds               *int32                `protobuf:"varint,13,opt,name=gc_grace_seconds,json=gcGraceSeconds" json:"gc_grace_seconds,omitempty"`
	DefaultValidationClass       *string               `protobuf:"bytes,14,opt,name=default_validation_class,json=defaultValidationClass" json:"default_validation_class,omitempty"`
	Id                           *int32                `protobuf:"varint,15,opt,name=id" json:"id,omitempty"`
	MinCompactionThreshold       *int32                `protobuf:"varint,16,opt,name=min_compaction_threshold,json=minCompactionThreshold" json:"min_compaction_threshold,omitempty"`
	MaxCompactionThreshold       *int32                `protobuf:"varint,17,opt,name=max_compaction_threshold,json=maxCompactionThreshold" json:"max_compaction_threshold,omitempty"`
	RowCacheSavePeriodInSeconds  *int32                `protobuf:"varint,18,opt,name=row_cache_save_period_in_seconds,json=rowCacheSavePeriodInSeconds" json:"row_cache_save_period_in_seconds,omitempty"`
	KeyCacheSavePeriodInSeconds  *int32                `protobuf:"varint,19,opt,name=key_cache_save_period_in_seconds,json=keyCacheSavePeriodInSeconds" json:"key_cache_save_period_in_seconds,omitempty"`
	MemtableFlushAfterMins       *int32                `protobuf:"varint,20,opt,name=memtable_flush_after_mins,json=memtableFlushAfterMins" json:"memtable_flush_after_mins,omitempty"`
	MemtableThroughputInMb       *int32                `protobuf:"varint,21,opt,name=memtable_throughput_in_mb,json=memtableThroughputInMb" json:"memtable_throughput_in_mb,omitempty"`
	MemtableOperationsInMillions *float64              `protobuf:"fixed64,22,opt,name=memtable_operations_in_millions,json=memtableOperationsInMillions" json:"memtable_operations_in_millions,omitempty"`
	MaxSstablesAllowed           *int32                `protobuf:"varint,23,opt,name=max_sstables_allowed,json=maxSstablesAllowed" json:"max_sstables_allowed,omitempty"`
	// Maximum allowed size in bytes for any entry in the row cache. If any
	// entry exceeds this limit, then it will not be cached.
	MaxRowCacheEntrySize *int32 `protobuf:"varint,24,opt,name=max_row_cache_entry_size,json=maxRowCacheEntrySize" json:"max_row_cache_entry_size,omitempty"`
	RowCacheSizeBytes    *int32 `protobuf:"varint,25,opt,name=row_cache_size_bytes,json=rowCacheSizeBytes" json:"row_cache_size_bytes,omitempty"`
	// Maximum clock cache capacity specified as the number of entries (rows)
	// to cache.
	ClockCacheSize                 *int32   `protobuf:"varint,26,opt,name=clock_cache_size,json=clockCacheSize" json:"clock_cache_size,omitempty"`
	CompactionRatio                *float64 `protobuf:"fixed64,27,opt,name=compaction_ratio,json=compactionRatio" json:"compaction_ratio,omitempty"`
	MajorCompactionTimePeriodInHrs *float64 `protobuf:"fixed64,28,opt,name=major_compaction_time_period_in_hrs,json=majorCompactionTimePeriodInHrs" json:"major_compaction_time_period_in_hrs,omitempty"`
	UseColumnIndexer               *bool    `protobuf:"varint,29,opt,name=use_column_indexer,json=useColumnIndexer,def=1" json:"use_column_indexer,omitempty"`
	// Boolean to control if we should delete the column family if it already
	// exists.
	DeleteIfExists *bool `protobuf:"varint,30,opt,name=delete_if_exists,json=deleteIfExists,def=0" json:"delete_if_exists,omitempty"`
	// Maximum number of open scanners to maintain per SSTable of this CF.
	SstableScannerPoolSize *int32 `protobuf:"varint,31,opt,name=sstable_scanner_pool_size,json=sstableScannerPoolSize,def=0" json:"sstable_scanner_pool_size,omitempty"`
	// Enable/disable leader only paxos reads for this PaxosVersion type CF.
	AllowLeaderOnlyReads     *bool  `protobuf:"varint,32,opt,name=allow_leader_only_reads,json=allowLeaderOnlyReads,def=0" json:"allow_leader_only_reads,omitempty"`
	MajorCompactionThreshold *int32 `protobuf:"varint,33,opt,name=major_compaction_threshold,json=majorCompactionThreshold,def=2" json:"major_compaction_threshold,omitempty"`
	// If true, reads will first look at the SSTables starting with latest
	// version and if not found will proceed to the next older versions in the
	// list. Otherwise, reads consult all SSTables.
	EnableVersionReadOptimization *bool `protobuf:"varint,34,opt,name=enable_version_read_optimization,json=enableVersionReadOptimization" json:"enable_version_read_optimization,omitempty"`
	// List of DataShards ids for commitlog for this column family. If the list
	// below has multiple shard ids, then we replicate the data across the
	// shards.
	CommitlogReplicaList []int64 `protobuf:"varint,35,rep,name=commitlog_replica_list,json=commitlogReplicaList" json:"commitlog_replica_list,omitempty"`
	// List of DataShards ids to the data location for this column family. If the
	// list below has multiple data shards, then we replicate the sstable data
	// across the data shards specified.
	DataReplicaList []int64 `protobuf:"varint,36,rep,name=data_replica_list,json=dataReplicaList" json:"data_replica_list,omitempty"`
	// Size of time window of SSTables. Relevant for time-series compaction.
	// Here's an example of how TimeWindow will work. Suppose we define
	// TimeWindow of 2 hours. If we have 4 SSTables with timestamps X, X+1hr,
	// X+2, X+3, then (X, X+1) will go into 1 bucket, and (X+2, X+3) will go into
	// the next bucket.
	//
	// The timestamps are when the Column will expire. We get this timestamp when
	// the user comes in with a write and gives us a TTL. We take the current
	// timestamp and add the TTL. When we flush the SSTable, we find the max of
	// all the expiration dates and write that into the SSTableMetadata.
	SstableTimeWindowInHours *float64 `protobuf:"fixed64,37,opt,name=sstable_time_window_in_hours,json=sstableTimeWindowInHours" json:"sstable_time_window_in_hours,omitempty"`
	// For TimeWindow Compaction Strategy, an expiration date is needed for every
	// SSTable in SSTableMetadata. But legacy SSTables may not have this value.
	// To handle legacy SSTables, user can set option
	// 'default_legacy_sstable_expiry_in_hours'. CassandraDaemon will then
	// automatically assign a expiration date for each legacy SSTable.
	// The default expiration date is the current time plus the specified
	// default.
	DefaultLegacySstableExpiryInHours *int32 `protobuf:"varint,38,opt,name=default_legacy_sstable_expiry_in_hours,json=defaultLegacySstableExpiryInHours" json:"default_legacy_sstable_expiry_in_hours,omitempty"`
	// If true, read ahead for mmapped sstable files will be disabled.
	// If false, read ahead will be done according to system default.
	DisableReadAheadForMmappedSstables *bool `protobuf:"varint,39,opt,name=disable_read_ahead_for_mmapped_sstables,json=disableReadAheadForMmappedSstables,def=0" json:"disable_read_ahead_for_mmapped_sstables,omitempty"`
	// If enabled, SSTables for scan will be ordered by version in descending
	// order. If row for a key is found, other rows with same key will be
	// discarded in lower version SSTables. Therefore, scan will try to get latest
	// row for required keys.
	// Enabled only for paxos column families with only one column per row.
	EnableVersionScanOptimization *bool `protobuf:"varint,40,opt,name=enable_version_scan_optimization,json=enableVersionScanOptimization" json:"enable_version_scan_optimization,omitempty"`
	// The threshold value for reclaim ratio.
	// Given a set of SSTables, reclaim ratio =
	// 1 - (number_of_keys_after_merging_all_sstables / total_keys_all_sstables).
	// During compaction, we can add a new SSTable to a bucket only if the
	// reclaim ratio of the new bucket after adding the new SSTable is >= the
	// threshold.
	SstableMergeReclaimRatioThreshold *float64 `protobuf:"fixed64,41,opt,name=sstable_merge_reclaim_ratio_threshold,json=sstableMergeReclaimRatioThreshold" json:"sstable_merge_reclaim_ratio_threshold,omitempty"`
	// The threshold value to decide whether a minor compaction should be
	// delayed. If the reclaim ratio is less than the threshold, we can delay
	// minor compaction in order to reduce write amplification.
	SstableDelayCompactionReclaimRatioThreshold *float64 `protobuf:"fixed64,42,opt,name=sstable_delay_compaction_reclaim_ratio_threshold,json=sstableDelayCompactionReclaimRatioThreshold" json:"sstable_delay_compaction_reclaim_ratio_threshold,omitempty"`
	// If true, time series memtable will be activated for the column family.
	// Otherwise normal memtables will be used for the CF.
	// Normal memtables partition incoming data into token shard or sub shards.
	// Time series memtable perform an additional partitioning on top of that -
	// time window based partitioning.
	EnableTimeSeriesMemtable *bool `protobuf:"varint,43,opt,name=enable_time_series_memtable,json=enableTimeSeriesMemtable" json:"enable_time_series_memtable,omitempty"`
	// The Index Interval determines how large the sampling for row keys
	// is for a given SSTable. The larger the sampling, the more effective
	// the index is at the cost of space.
	IndexInterval *int32 `protobuf:"varint,44,opt,name=index_interval,json=indexInterval,def=128" json:"index_interval,omitempty"`
	// For scans performed on non-paxos column families, we usually optimize
	// by sending requests only to the 'n' nodes, where 'n' is dictated by the
	// required consistency level. This means that if consistency level is
	// quorum, we will send the request to only the first quorum nodes owning
	// the requested range. When the below flag is set, Cassandra will
	// additionally send the request to the specified number of endpoints.
	NumAdditionalEndpointsForNonPaxosScans *int32 `protobuf:"varint,45,opt,name=num_additional_endpoints_for_non_paxos_scans,json=numAdditionalEndpointsForNonPaxosScans" json:"num_additional_endpoints_for_non_paxos_scans,omitempty"`
	// If true, direct io will be used for random read on sstable in this cf.
	UseDirectIoForRandomSstableRead *bool `protobuf:"varint,46,opt,name=use_direct_io_for_random_sstable_read,json=useDirectIoForRandomSstableRead" json:"use_direct_io_for_random_sstable_read,omitempty"`
	// If true, direct io will be used for sequential read on sstable in this cf.
	UseDirectIoForSequentialSstableRead *bool    `protobuf:"varint,47,opt,name=use_direct_io_for_sequential_sstable_read,json=useDirectIoForSequentialSstableRead" json:"use_direct_io_for_sequential_sstable_read,omitempty"`
	XXX_NoUnkeyedLiteral                struct{} `json:"-"`
	XXX_unrecognized                    []byte   `json:"-"`
	XXX_sizecache                       int32    `json:"-"`
}

func (m *CassandraCfDef) Reset()         { *m = CassandraCfDef{} }
func (m *CassandraCfDef) String() string { return proto.CompactTextString(m) }
func (*CassandraCfDef) ProtoMessage()    {}
func (*CassandraCfDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{28}
}

func (m *CassandraCfDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraCfDef.Unmarshal(m, b)
}
func (m *CassandraCfDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraCfDef.Marshal(b, m, deterministic)
}
func (m *CassandraCfDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraCfDef.Merge(m, src)
}
func (m *CassandraCfDef) XXX_Size() int {
	return xxx_messageInfo_CassandraCfDef.Size(m)
}
func (m *CassandraCfDef) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraCfDef.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraCfDef proto.InternalMessageInfo

const Default_CassandraCfDef_UseColumnIndexer bool = true
const Default_CassandraCfDef_DeleteIfExists bool = false
const Default_CassandraCfDef_SstableScannerPoolSize int32 = 0
const Default_CassandraCfDef_AllowLeaderOnlyReads bool = false
const Default_CassandraCfDef_MajorCompactionThreshold int32 = 2
const Default_CassandraCfDef_DisableReadAheadForMmappedSstables bool = false
const Default_CassandraCfDef_IndexInterval int32 = 128

func (m *CassandraCfDef) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraCfDef) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CassandraCfDef) GetColumnType() string {
	if m != nil && m.ColumnType != nil {
		return *m.ColumnType
	}
	return ""
}

func (m *CassandraCfDef) GetClockType() string {
	if m != nil && m.ClockType != nil {
		return *m.ClockType
	}
	return ""
}

func (m *CassandraCfDef) GetComparatorType() string {
	if m != nil && m.ComparatorType != nil {
		return *m.ComparatorType
	}
	return ""
}

func (m *CassandraCfDef) GetSubcomparatorType() string {
	if m != nil && m.SubcomparatorType != nil {
		return *m.SubcomparatorType
	}
	return ""
}

func (m *CassandraCfDef) GetReconciler() string {
	if m != nil && m.Reconciler != nil {
		return *m.Reconciler
	}
	return ""
}

func (m *CassandraCfDef) GetComment() string {
	if m != nil && m.Comment != nil {
		return *m.Comment
	}
	return ""
}

func (m *CassandraCfDef) GetRowCacheSize() float64 {
	if m != nil && m.RowCacheSize != nil {
		return *m.RowCacheSize
	}
	return 0
}

func (m *CassandraCfDef) GetKeyCacheSize() float64 {
	if m != nil && m.KeyCacheSize != nil {
		return *m.KeyCacheSize
	}
	return 0
}

func (m *CassandraCfDef) GetReadRepairChance() float64 {
	if m != nil && m.ReadRepairChance != nil {
		return *m.ReadRepairChance
	}
	return 0
}

func (m *CassandraCfDef) GetColumnMetadata() []*CassandraColumnDef {
	if m != nil {
		return m.ColumnMetadata
	}
	return nil
}

func (m *CassandraCfDef) GetGcGraceSeconds() int32 {
	if m != nil && m.GcGraceSeconds != nil {
		return *m.GcGraceSeconds
	}
	return 0
}

func (m *CassandraCfDef) GetDefaultValidationClass() string {
	if m != nil && m.DefaultValidationClass != nil {
		return *m.DefaultValidationClass
	}
	return ""
}

func (m *CassandraCfDef) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CassandraCfDef) GetMinCompactionThreshold() int32 {
	if m != nil && m.MinCompactionThreshold != nil {
		return *m.MinCompactionThreshold
	}
	return 0
}

func (m *CassandraCfDef) GetMaxCompactionThreshold() int32 {
	if m != nil && m.MaxCompactionThreshold != nil {
		return *m.MaxCompactionThreshold
	}
	return 0
}

func (m *CassandraCfDef) GetRowCacheSavePeriodInSeconds() int32 {
	if m != nil && m.RowCacheSavePeriodInSeconds != nil {
		return *m.RowCacheSavePeriodInSeconds
	}
	return 0
}

func (m *CassandraCfDef) GetKeyCacheSavePeriodInSeconds() int32 {
	if m != nil && m.KeyCacheSavePeriodInSeconds != nil {
		return *m.KeyCacheSavePeriodInSeconds
	}
	return 0
}

func (m *CassandraCfDef) GetMemtableFlushAfterMins() int32 {
	if m != nil && m.MemtableFlushAfterMins != nil {
		return *m.MemtableFlushAfterMins
	}
	return 0
}

func (m *CassandraCfDef) GetMemtableThroughputInMb() int32 {
	if m != nil && m.MemtableThroughputInMb != nil {
		return *m.MemtableThroughputInMb
	}
	return 0
}

func (m *CassandraCfDef) GetMemtableOperationsInMillions() float64 {
	if m != nil && m.MemtableOperationsInMillions != nil {
		return *m.MemtableOperationsInMillions
	}
	return 0
}

func (m *CassandraCfDef) GetMaxSstablesAllowed() int32 {
	if m != nil && m.MaxSstablesAllowed != nil {
		return *m.MaxSstablesAllowed
	}
	return 0
}

func (m *CassandraCfDef) GetMaxRowCacheEntrySize() int32 {
	if m != nil && m.MaxRowCacheEntrySize != nil {
		return *m.MaxRowCacheEntrySize
	}
	return 0
}

func (m *CassandraCfDef) GetRowCacheSizeBytes() int32 {
	if m != nil && m.RowCacheSizeBytes != nil {
		return *m.RowCacheSizeBytes
	}
	return 0
}

func (m *CassandraCfDef) GetClockCacheSize() int32 {
	if m != nil && m.ClockCacheSize != nil {
		return *m.ClockCacheSize
	}
	return 0
}

func (m *CassandraCfDef) GetCompactionRatio() float64 {
	if m != nil && m.CompactionRatio != nil {
		return *m.CompactionRatio
	}
	return 0
}

func (m *CassandraCfDef) GetMajorCompactionTimePeriodInHrs() float64 {
	if m != nil && m.MajorCompactionTimePeriodInHrs != nil {
		return *m.MajorCompactionTimePeriodInHrs
	}
	return 0
}

func (m *CassandraCfDef) GetUseColumnIndexer() bool {
	if m != nil && m.UseColumnIndexer != nil {
		return *m.UseColumnIndexer
	}
	return Default_CassandraCfDef_UseColumnIndexer
}

func (m *CassandraCfDef) GetDeleteIfExists() bool {
	if m != nil && m.DeleteIfExists != nil {
		return *m.DeleteIfExists
	}
	return Default_CassandraCfDef_DeleteIfExists
}

func (m *CassandraCfDef) GetSstableScannerPoolSize() int32 {
	if m != nil && m.SstableScannerPoolSize != nil {
		return *m.SstableScannerPoolSize
	}
	return Default_CassandraCfDef_SstableScannerPoolSize
}

func (m *CassandraCfDef) GetAllowLeaderOnlyReads() bool {
	if m != nil && m.AllowLeaderOnlyReads != nil {
		return *m.AllowLeaderOnlyReads
	}
	return Default_CassandraCfDef_AllowLeaderOnlyReads
}

func (m *CassandraCfDef) GetMajorCompactionThreshold() int32 {
	if m != nil && m.MajorCompactionThreshold != nil {
		return *m.MajorCompactionThreshold
	}
	return Default_CassandraCfDef_MajorCompactionThreshold
}

func (m *CassandraCfDef) GetEnableVersionReadOptimization() bool {
	if m != nil && m.EnableVersionReadOptimization != nil {
		return *m.EnableVersionReadOptimization
	}
	return false
}

func (m *CassandraCfDef) GetCommitlogReplicaList() []int64 {
	if m != nil {
		return m.CommitlogReplicaList
	}
	return nil
}

func (m *CassandraCfDef) GetDataReplicaList() []int64 {
	if m != nil {
		return m.DataReplicaList
	}
	return nil
}

func (m *CassandraCfDef) GetSstableTimeWindowInHours() float64 {
	if m != nil && m.SstableTimeWindowInHours != nil {
		return *m.SstableTimeWindowInHours
	}
	return 0
}

func (m *CassandraCfDef) GetDefaultLegacySstableExpiryInHours() int32 {
	if m != nil && m.DefaultLegacySstableExpiryInHours != nil {
		return *m.DefaultLegacySstableExpiryInHours
	}
	return 0
}

func (m *CassandraCfDef) GetDisableReadAheadForMmappedSstables() bool {
	if m != nil && m.DisableReadAheadForMmappedSstables != nil {
		return *m.DisableReadAheadForMmappedSstables
	}
	return Default_CassandraCfDef_DisableReadAheadForMmappedSstables
}

func (m *CassandraCfDef) GetEnableVersionScanOptimization() bool {
	if m != nil && m.EnableVersionScanOptimization != nil {
		return *m.EnableVersionScanOptimization
	}
	return false
}

func (m *CassandraCfDef) GetSstableMergeReclaimRatioThreshold() float64 {
	if m != nil && m.SstableMergeReclaimRatioThreshold != nil {
		return *m.SstableMergeReclaimRatioThreshold
	}
	return 0
}

func (m *CassandraCfDef) GetSstableDelayCompactionReclaimRatioThreshold() float64 {
	if m != nil && m.SstableDelayCompactionReclaimRatioThreshold != nil {
		return *m.SstableDelayCompactionReclaimRatioThreshold
	}
	return 0
}

func (m *CassandraCfDef) GetEnableTimeSeriesMemtable() bool {
	if m != nil && m.EnableTimeSeriesMemtable != nil {
		return *m.EnableTimeSeriesMemtable
	}
	return false
}

func (m *CassandraCfDef) GetIndexInterval() int32 {
	if m != nil && m.IndexInterval != nil {
		return *m.IndexInterval
	}
	return Default_CassandraCfDef_IndexInterval
}

func (m *CassandraCfDef) GetNumAdditionalEndpointsForNonPaxosScans() int32 {
	if m != nil && m.NumAdditionalEndpointsForNonPaxosScans != nil {
		return *m.NumAdditionalEndpointsForNonPaxosScans
	}
	return 0
}

func (m *CassandraCfDef) GetUseDirectIoForRandomSstableRead() bool {
	if m != nil && m.UseDirectIoForRandomSstableRead != nil {
		return *m.UseDirectIoForRandomSstableRead
	}
	return false
}

func (m *CassandraCfDef) GetUseDirectIoForSequentialSstableRead() bool {
	if m != nil && m.UseDirectIoForSequentialSstableRead != nil {
		return *m.UseDirectIoForSequentialSstableRead
	}
	return false
}

type CassandraKsDef struct {
	Name                           *string                           `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	StrategyClass                  *string                           `protobuf:"bytes,2,req,name=strategy_class,json=strategyClass" json:"strategy_class,omitempty"`
	ReplicationFactor              *int32                            `protobuf:"varint,3,req,name=replication_factor,json=replicationFactor" json:"replication_factor,omitempty"`
	CfDefs                         []*CassandraCfDef                 `protobuf:"bytes,4,rep,name=cf_defs,json=cfDefs" json:"cf_defs,omitempty"`
	StrategyOptions                []*CassandraKsDef_StrategyOptions `protobuf:"bytes,5,rep,name=strategy_options,json=strategyOptions" json:"strategy_options,omitempty"`
	WaitForCommitlogWrites         *bool                             `protobuf:"varint,6,opt,name=wait_for_commitlog_writes,json=waitForCommitlogWrites" json:"wait_for_commitlog_writes,omitempty"`
	NumAdditionalReplicasToInclude *int32                            `protobuf:"varint,7,opt,name=num_additional_replicas_to_include,json=numAdditionalReplicasToInclude" json:"num_additional_replicas_to_include,omitempty"`
	SkipCommitlogWrites            *bool                             `protobuf:"varint,8,opt,name=skip_commitlog_writes,json=skipCommitlogWrites,def=0" json:"skip_commitlog_writes,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}                          `json:"-"`
	XXX_unrecognized               []byte                            `json:"-"`
	XXX_sizecache                  int32                             `json:"-"`
}

func (m *CassandraKsDef) Reset()         { *m = CassandraKsDef{} }
func (m *CassandraKsDef) String() string { return proto.CompactTextString(m) }
func (*CassandraKsDef) ProtoMessage()    {}
func (*CassandraKsDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{29}
}

func (m *CassandraKsDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraKsDef.Unmarshal(m, b)
}
func (m *CassandraKsDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraKsDef.Marshal(b, m, deterministic)
}
func (m *CassandraKsDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraKsDef.Merge(m, src)
}
func (m *CassandraKsDef) XXX_Size() int {
	return xxx_messageInfo_CassandraKsDef.Size(m)
}
func (m *CassandraKsDef) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraKsDef.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraKsDef proto.InternalMessageInfo

const Default_CassandraKsDef_SkipCommitlogWrites bool = false

func (m *CassandraKsDef) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CassandraKsDef) GetStrategyClass() string {
	if m != nil && m.StrategyClass != nil {
		return *m.StrategyClass
	}
	return ""
}

func (m *CassandraKsDef) GetReplicationFactor() int32 {
	if m != nil && m.ReplicationFactor != nil {
		return *m.ReplicationFactor
	}
	return 0
}

func (m *CassandraKsDef) GetCfDefs() []*CassandraCfDef {
	if m != nil {
		return m.CfDefs
	}
	return nil
}

func (m *CassandraKsDef) GetStrategyOptions() []*CassandraKsDef_StrategyOptions {
	if m != nil {
		return m.StrategyOptions
	}
	return nil
}

func (m *CassandraKsDef) GetWaitForCommitlogWrites() bool {
	if m != nil && m.WaitForCommitlogWrites != nil {
		return *m.WaitForCommitlogWrites
	}
	return false
}

func (m *CassandraKsDef) GetNumAdditionalReplicasToInclude() int32 {
	if m != nil && m.NumAdditionalReplicasToInclude != nil {
		return *m.NumAdditionalReplicasToInclude
	}
	return 0
}

func (m *CassandraKsDef) GetSkipCommitlogWrites() bool {
	if m != nil && m.SkipCommitlogWrites != nil {
		return *m.SkipCommitlogWrites
	}
	return Default_CassandraKsDef_SkipCommitlogWrites
}

type CassandraKsDef_StrategyOptions struct {
	Name                 *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value                *string  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraKsDef_StrategyOptions) Reset()         { *m = CassandraKsDef_StrategyOptions{} }
func (m *CassandraKsDef_StrategyOptions) String() string { return proto.CompactTextString(m) }
func (*CassandraKsDef_StrategyOptions) ProtoMessage()    {}
func (*CassandraKsDef_StrategyOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{29, 0}
}

func (m *CassandraKsDef_StrategyOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraKsDef_StrategyOptions.Unmarshal(m, b)
}
func (m *CassandraKsDef_StrategyOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraKsDef_StrategyOptions.Marshal(b, m, deterministic)
}
func (m *CassandraKsDef_StrategyOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraKsDef_StrategyOptions.Merge(m, src)
}
func (m *CassandraKsDef_StrategyOptions) XXX_Size() int {
	return xxx_messageInfo_CassandraKsDef_StrategyOptions.Size(m)
}
func (m *CassandraKsDef_StrategyOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraKsDef_StrategyOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraKsDef_StrategyOptions proto.InternalMessageInfo

func (m *CassandraKsDef_StrategyOptions) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CassandraKsDef_StrategyOptions) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type CassandraTokenRange struct {
	StartToken           *string  `protobuf:"bytes,1,req,name=start_token,json=startToken" json:"start_token,omitempty"`
	EndToken             *string  `protobuf:"bytes,2,req,name=end_token,json=endToken" json:"end_token,omitempty"`
	Endpoints            []string `protobuf:"bytes,3,rep,name=endpoints" json:"endpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraTokenRange) Reset()         { *m = CassandraTokenRange{} }
func (m *CassandraTokenRange) String() string { return proto.CompactTextString(m) }
func (*CassandraTokenRange) ProtoMessage()    {}
func (*CassandraTokenRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{30}
}

func (m *CassandraTokenRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraTokenRange.Unmarshal(m, b)
}
func (m *CassandraTokenRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraTokenRange.Marshal(b, m, deterministic)
}
func (m *CassandraTokenRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraTokenRange.Merge(m, src)
}
func (m *CassandraTokenRange) XXX_Size() int {
	return xxx_messageInfo_CassandraTokenRange.Size(m)
}
func (m *CassandraTokenRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraTokenRange.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraTokenRange proto.InternalMessageInfo

func (m *CassandraTokenRange) GetStartToken() string {
	if m != nil && m.StartToken != nil {
		return *m.StartToken
	}
	return ""
}

func (m *CassandraTokenRange) GetEndToken() string {
	if m != nil && m.EndToken != nil {
		return *m.EndToken
	}
	return ""
}

func (m *CassandraTokenRange) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type CassandraActivityTracesProto struct {
	ActivityStartTimeUsec *int64                                        `protobuf:"varint,1,req,name=activity_start_time_usec,json=activityStartTimeUsec" json:"activity_start_time_usec,omitempty"`
	Activities            []*CassandraActivityTracesProto_ActivityProto `protobuf:"bytes,2,rep,name=activities" json:"activities,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                      `json:"-"`
	XXX_unrecognized      []byte                                        `json:"-"`
	XXX_sizecache         int32                                         `json:"-"`
}

func (m *CassandraActivityTracesProto) Reset()         { *m = CassandraActivityTracesProto{} }
func (m *CassandraActivityTracesProto) String() string { return proto.CompactTextString(m) }
func (*CassandraActivityTracesProto) ProtoMessage()    {}
func (*CassandraActivityTracesProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{31}
}

func (m *CassandraActivityTracesProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraActivityTracesProto.Unmarshal(m, b)
}
func (m *CassandraActivityTracesProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraActivityTracesProto.Marshal(b, m, deterministic)
}
func (m *CassandraActivityTracesProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraActivityTracesProto.Merge(m, src)
}
func (m *CassandraActivityTracesProto) XXX_Size() int {
	return xxx_messageInfo_CassandraActivityTracesProto.Size(m)
}
func (m *CassandraActivityTracesProto) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraActivityTracesProto.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraActivityTracesProto proto.InternalMessageInfo

func (m *CassandraActivityTracesProto) GetActivityStartTimeUsec() int64 {
	if m != nil && m.ActivityStartTimeUsec != nil {
		return *m.ActivityStartTimeUsec
	}
	return 0
}

func (m *CassandraActivityTracesProto) GetActivities() []*CassandraActivityTracesProto_ActivityProto {
	if m != nil {
		return m.Activities
	}
	return nil
}

type CassandraActivityTracesProto_TraceProto struct {
	TraceString          *string  `protobuf:"bytes,1,req,name=trace_string,json=traceString" json:"trace_string,omitempty"`
	TraceLevel           *int32   `protobuf:"varint,2,req,name=trace_level,json=traceLevel" json:"trace_level,omitempty"`
	TimeInUsec           *int64   `protobuf:"varint,3,req,name=time_in_usec,json=timeInUsec" json:"time_in_usec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraActivityTracesProto_TraceProto) Reset() {
	*m = CassandraActivityTracesProto_TraceProto{}
}
func (m *CassandraActivityTracesProto_TraceProto) String() string { return proto.CompactTextString(m) }
func (*CassandraActivityTracesProto_TraceProto) ProtoMessage()    {}
func (*CassandraActivityTracesProto_TraceProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{31, 0}
}

func (m *CassandraActivityTracesProto_TraceProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraActivityTracesProto_TraceProto.Unmarshal(m, b)
}
func (m *CassandraActivityTracesProto_TraceProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraActivityTracesProto_TraceProto.Marshal(b, m, deterministic)
}
func (m *CassandraActivityTracesProto_TraceProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraActivityTracesProto_TraceProto.Merge(m, src)
}
func (m *CassandraActivityTracesProto_TraceProto) XXX_Size() int {
	return xxx_messageInfo_CassandraActivityTracesProto_TraceProto.Size(m)
}
func (m *CassandraActivityTracesProto_TraceProto) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraActivityTracesProto_TraceProto.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraActivityTracesProto_TraceProto proto.InternalMessageInfo

func (m *CassandraActivityTracesProto_TraceProto) GetTraceString() string {
	if m != nil && m.TraceString != nil {
		return *m.TraceString
	}
	return ""
}

func (m *CassandraActivityTracesProto_TraceProto) GetTraceLevel() int32 {
	if m != nil && m.TraceLevel != nil {
		return *m.TraceLevel
	}
	return 0
}

func (m *CassandraActivityTracesProto_TraceProto) GetTimeInUsec() int64 {
	if m != nil && m.TimeInUsec != nil {
		return *m.TimeInUsec
	}
	return 0
}

type CassandraActivityTracesProto_ActivityProto struct {
	NodeIp               *string                                    `protobuf:"bytes,1,req,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	StartTimeUsec        *int64                                     `protobuf:"varint,2,req,name=start_time_usec,json=startTimeUsec" json:"start_time_usec,omitempty"`
	Traces               []*CassandraActivityTracesProto_TraceProto `protobuf:"bytes,3,rep,name=traces" json:"traces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *CassandraActivityTracesProto_ActivityProto) Reset() {
	*m = CassandraActivityTracesProto_ActivityProto{}
}
func (m *CassandraActivityTracesProto_ActivityProto) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraActivityTracesProto_ActivityProto) ProtoMessage() {}
func (*CassandraActivityTracesProto_ActivityProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{31, 1}
}

func (m *CassandraActivityTracesProto_ActivityProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraActivityTracesProto_ActivityProto.Unmarshal(m, b)
}
func (m *CassandraActivityTracesProto_ActivityProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraActivityTracesProto_ActivityProto.Marshal(b, m, deterministic)
}
func (m *CassandraActivityTracesProto_ActivityProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraActivityTracesProto_ActivityProto.Merge(m, src)
}
func (m *CassandraActivityTracesProto_ActivityProto) XXX_Size() int {
	return xxx_messageInfo_CassandraActivityTracesProto_ActivityProto.Size(m)
}
func (m *CassandraActivityTracesProto_ActivityProto) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraActivityTracesProto_ActivityProto.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraActivityTracesProto_ActivityProto proto.InternalMessageInfo

func (m *CassandraActivityTracesProto_ActivityProto) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *CassandraActivityTracesProto_ActivityProto) GetStartTimeUsec() int64 {
	if m != nil && m.StartTimeUsec != nil {
		return *m.StartTimeUsec
	}
	return 0
}

func (m *CassandraActivityTracesProto_ActivityProto) GetTraces() []*CassandraActivityTracesProto_TraceProto {
	if m != nil {
		return m.Traces
	}
	return nil
}

// Size information of a column family.
type CassandraCfSizeDef struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	LiveSize             *int64   `protobuf:"varint,2,opt,name=live_size,json=liveSize" json:"live_size,omitempty"`
	TotalSize            *int64   `protobuf:"varint,3,opt,name=total_size,json=totalSize" json:"total_size,omitempty"`
	NumSstables          *int32   `protobuf:"varint,4,opt,name=num_sstables,json=numSstables" json:"num_sstables,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraCfSizeDef) Reset()         { *m = CassandraCfSizeDef{} }
func (m *CassandraCfSizeDef) String() string { return proto.CompactTextString(m) }
func (*CassandraCfSizeDef) ProtoMessage()    {}
func (*CassandraCfSizeDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{32}
}

func (m *CassandraCfSizeDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraCfSizeDef.Unmarshal(m, b)
}
func (m *CassandraCfSizeDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraCfSizeDef.Marshal(b, m, deterministic)
}
func (m *CassandraCfSizeDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraCfSizeDef.Merge(m, src)
}
func (m *CassandraCfSizeDef) XXX_Size() int {
	return xxx_messageInfo_CassandraCfSizeDef.Size(m)
}
func (m *CassandraCfSizeDef) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraCfSizeDef.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraCfSizeDef proto.InternalMessageInfo

func (m *CassandraCfSizeDef) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CassandraCfSizeDef) GetLiveSize() int64 {
	if m != nil && m.LiveSize != nil {
		return *m.LiveSize
	}
	return 0
}

func (m *CassandraCfSizeDef) GetTotalSize() int64 {
	if m != nil && m.TotalSize != nil {
		return *m.TotalSize
	}
	return 0
}

func (m *CassandraCfSizeDef) GetNumSstables() int32 {
	if m != nil && m.NumSstables != nil {
		return *m.NumSstables
	}
	return 0
}

// Size information for all column families in a  keyspace.
type CassandraKsSizeDef struct {
	Name                 *string               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CfSizeDefs           []*CassandraCfSizeDef `protobuf:"bytes,2,rep,name=cf_size_defs,json=cfSizeDefs" json:"cf_size_defs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CassandraKsSizeDef) Reset()         { *m = CassandraKsSizeDef{} }
func (m *CassandraKsSizeDef) String() string { return proto.CompactTextString(m) }
func (*CassandraKsSizeDef) ProtoMessage()    {}
func (*CassandraKsSizeDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{33}
}

func (m *CassandraKsSizeDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraKsSizeDef.Unmarshal(m, b)
}
func (m *CassandraKsSizeDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraKsSizeDef.Marshal(b, m, deterministic)
}
func (m *CassandraKsSizeDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraKsSizeDef.Merge(m, src)
}
func (m *CassandraKsSizeDef) XXX_Size() int {
	return xxx_messageInfo_CassandraKsSizeDef.Size(m)
}
func (m *CassandraKsSizeDef) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraKsSizeDef.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraKsSizeDef proto.InternalMessageInfo

func (m *CassandraKsSizeDef) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CassandraKsSizeDef) GetCfSizeDefs() []*CassandraCfSizeDef {
	if m != nil {
		return m.CfSizeDefs
	}
	return nil
}

// Request message to fetch mbean data from cassandra Java daemon.
type MbeanRequestInfo struct {
	MbeanName            *string  `protobuf:"bytes,1,opt,name=mbean_name,json=mbeanName" json:"mbean_name,omitempty"`
	AttributeNames       []string `protobuf:"bytes,2,rep,name=attribute_names,json=attributeNames" json:"attribute_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MbeanRequestInfo) Reset()         { *m = MbeanRequestInfo{} }
func (m *MbeanRequestInfo) String() string { return proto.CompactTextString(m) }
func (*MbeanRequestInfo) ProtoMessage()    {}
func (*MbeanRequestInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{34}
}

func (m *MbeanRequestInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MbeanRequestInfo.Unmarshal(m, b)
}
func (m *MbeanRequestInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MbeanRequestInfo.Marshal(b, m, deterministic)
}
func (m *MbeanRequestInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MbeanRequestInfo.Merge(m, src)
}
func (m *MbeanRequestInfo) XXX_Size() int {
	return xxx_messageInfo_MbeanRequestInfo.Size(m)
}
func (m *MbeanRequestInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MbeanRequestInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MbeanRequestInfo proto.InternalMessageInfo

func (m *MbeanRequestInfo) GetMbeanName() string {
	if m != nil && m.MbeanName != nil {
		return *m.MbeanName
	}
	return ""
}

func (m *MbeanRequestInfo) GetAttributeNames() []string {
	if m != nil {
		return m.AttributeNames
	}
	return nil
}

type CassandraLoginArg struct {
	Keyspace             *string                         `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	AuthRequest          *CassandraAuthenticationRequest `protobuf:"bytes,2,req,name=auth_request,json=authRequest" json:"auth_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraLoginArg) Reset()         { *m = CassandraLoginArg{} }
func (m *CassandraLoginArg) String() string { return proto.CompactTextString(m) }
func (*CassandraLoginArg) ProtoMessage()    {}
func (*CassandraLoginArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{35}
}

func (m *CassandraLoginArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraLoginArg.Unmarshal(m, b)
}
func (m *CassandraLoginArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraLoginArg.Marshal(b, m, deterministic)
}
func (m *CassandraLoginArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraLoginArg.Merge(m, src)
}
func (m *CassandraLoginArg) XXX_Size() int {
	return xxx_messageInfo_CassandraLoginArg.Size(m)
}
func (m *CassandraLoginArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraLoginArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraLoginArg proto.InternalMessageInfo

func (m *CassandraLoginArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraLoginArg) GetAuthRequest() *CassandraAuthenticationRequest {
	if m != nil {
		return m.AuthRequest
	}
	return nil
}

type CassandraLoginRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraLoginRet) Reset()         { *m = CassandraLoginRet{} }
func (m *CassandraLoginRet) String() string { return proto.CompactTextString(m) }
func (*CassandraLoginRet) ProtoMessage()    {}
func (*CassandraLoginRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{36}
}

func (m *CassandraLoginRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraLoginRet.Unmarshal(m, b)
}
func (m *CassandraLoginRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraLoginRet.Marshal(b, m, deterministic)
}
func (m *CassandraLoginRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraLoginRet.Merge(m, src)
}
func (m *CassandraLoginRet) XXX_Size() int {
	return xxx_messageInfo_CassandraLoginRet.Size(m)
}
func (m *CassandraLoginRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraLoginRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraLoginRet proto.InternalMessageInfo

type CassandraGetArg struct {
	Keyspace             *string                         `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	Key                  []byte                          `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	ColumnPath           *CassandraColumnPath            `protobuf:"bytes,3,req,name=column_path,json=columnPath" json:"column_path,omitempty"`
	ConsistencyLevel     *CassandraConsistencyLevel_Type `protobuf:"varint,4,req,name=consistency_level,json=consistencyLevel,enum=nutanix.cassandra.CassandraConsistencyLevel_Type" json:"consistency_level,omitempty"`
	UsePayloadForValues  *bool                           `protobuf:"varint,5,opt,name=use_payload_for_values,json=usePayloadForValues" json:"use_payload_for_values,omitempty"`
	Priority             *int32                          `protobuf:"varint,6,opt,name=priority,def=0" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraGetArg) Reset()         { *m = CassandraGetArg{} }
func (m *CassandraGetArg) String() string { return proto.CompactTextString(m) }
func (*CassandraGetArg) ProtoMessage()    {}
func (*CassandraGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{37}
}

func (m *CassandraGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetArg.Unmarshal(m, b)
}
func (m *CassandraGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetArg.Merge(m, src)
}
func (m *CassandraGetArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetArg.Size(m)
}
func (m *CassandraGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetArg proto.InternalMessageInfo

const Default_CassandraGetArg_Priority int32 = 0

func (m *CassandraGetArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraGetArg) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CassandraGetArg) GetColumnPath() *CassandraColumnPath {
	if m != nil {
		return m.ColumnPath
	}
	return nil
}

func (m *CassandraGetArg) GetConsistencyLevel() CassandraConsistencyLevel_Type {
	if m != nil && m.ConsistencyLevel != nil {
		return *m.ConsistencyLevel
	}
	return CassandraConsistencyLevel_kOne
}

func (m *CassandraGetArg) GetUsePayloadForValues() bool {
	if m != nil && m.UsePayloadForValues != nil {
		return *m.UsePayloadForValues
	}
	return false
}

func (m *CassandraGetArg) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_CassandraGetArg_Priority
}

type CassandraGetRet struct {
	Column               *CassandraColumnOrSuperColumn `protobuf:"bytes,1,req,name=column" json:"column,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CassandraGetRet) Reset()         { *m = CassandraGetRet{} }
func (m *CassandraGetRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetRet) ProtoMessage()    {}
func (*CassandraGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{38}
}

func (m *CassandraGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetRet.Unmarshal(m, b)
}
func (m *CassandraGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetRet.Merge(m, src)
}
func (m *CassandraGetRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetRet.Size(m)
}
func (m *CassandraGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetRet proto.InternalMessageInfo

func (m *CassandraGetRet) GetColumn() *CassandraColumnOrSuperColumn {
	if m != nil {
		return m.Column
	}
	return nil
}

type CassandraGetSliceArg struct {
	Keyspace             *string                         `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	Key                  []byte                          `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	ColumnParent         *CassandraColumnParent          `protobuf:"bytes,3,req,name=column_parent,json=columnParent" json:"column_parent,omitempty"`
	Predicate            *CassandraSlicePredicate        `protobuf:"bytes,4,req,name=predicate" json:"predicate,omitempty"`
	ConsistencyLevel     *CassandraConsistencyLevel_Type `protobuf:"varint,5,req,name=consistency_level,json=consistencyLevel,enum=nutanix.cassandra.CassandraConsistencyLevel_Type" json:"consistency_level,omitempty"`
	UsePayloadForValues  *bool                           `protobuf:"varint,6,opt,name=use_payload_for_values,json=usePayloadForValues" json:"use_payload_for_values,omitempty"`
	Priority             *int32                          `protobuf:"varint,7,opt,name=priority,def=0" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraGetSliceArg) Reset()         { *m = CassandraGetSliceArg{} }
func (m *CassandraGetSliceArg) String() string { return proto.CompactTextString(m) }
func (*CassandraGetSliceArg) ProtoMessage()    {}
func (*CassandraGetSliceArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{39}
}

func (m *CassandraGetSliceArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetSliceArg.Unmarshal(m, b)
}
func (m *CassandraGetSliceArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetSliceArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetSliceArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetSliceArg.Merge(m, src)
}
func (m *CassandraGetSliceArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetSliceArg.Size(m)
}
func (m *CassandraGetSliceArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetSliceArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetSliceArg proto.InternalMessageInfo

const Default_CassandraGetSliceArg_Priority int32 = 0

func (m *CassandraGetSliceArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraGetSliceArg) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CassandraGetSliceArg) GetColumnParent() *CassandraColumnParent {
	if m != nil {
		return m.ColumnParent
	}
	return nil
}

func (m *CassandraGetSliceArg) GetPredicate() *CassandraSlicePredicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *CassandraGetSliceArg) GetConsistencyLevel() CassandraConsistencyLevel_Type {
	if m != nil && m.ConsistencyLevel != nil {
		return *m.ConsistencyLevel
	}
	return CassandraConsistencyLevel_kOne
}

func (m *CassandraGetSliceArg) GetUsePayloadForValues() bool {
	if m != nil && m.UsePayloadForValues != nil {
		return *m.UsePayloadForValues
	}
	return false
}

func (m *CassandraGetSliceArg) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_CassandraGetSliceArg_Priority
}

type CassandraGetSliceRet struct {
	Columns              []*CassandraColumnOrSuperColumn `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	ActivityTraces       *CassandraActivityTracesProto   `protobuf:"bytes,2,opt,name=activity_traces,json=activityTraces" json:"activity_traces,omitempty"`
	Keyspace             *string                         `protobuf:"bytes,3,opt,name=keyspace" json:"keyspace,omitempty"`
	Key                  []byte                          `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	ColumnParent         *CassandraColumnParent          `protobuf:"bytes,5,opt,name=column_parent,json=columnParent" json:"column_parent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraGetSliceRet) Reset()         { *m = CassandraGetSliceRet{} }
func (m *CassandraGetSliceRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetSliceRet) ProtoMessage()    {}
func (*CassandraGetSliceRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{40}
}

func (m *CassandraGetSliceRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetSliceRet.Unmarshal(m, b)
}
func (m *CassandraGetSliceRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetSliceRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetSliceRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetSliceRet.Merge(m, src)
}
func (m *CassandraGetSliceRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetSliceRet.Size(m)
}
func (m *CassandraGetSliceRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetSliceRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetSliceRet proto.InternalMessageInfo

func (m *CassandraGetSliceRet) GetColumns() []*CassandraColumnOrSuperColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *CassandraGetSliceRet) GetActivityTraces() *CassandraActivityTracesProto {
	if m != nil {
		return m.ActivityTraces
	}
	return nil
}

func (m *CassandraGetSliceRet) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraGetSliceRet) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CassandraGetSliceRet) GetColumnParent() *CassandraColumnParent {
	if m != nil {
		return m.ColumnParent
	}
	return nil
}

type CassandraGetCountArg struct {
	Keyspace             *string                         `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	Key                  []byte                          `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	ColumnParent         *CassandraColumnParent          `protobuf:"bytes,3,req,name=column_parent,json=columnParent" json:"column_parent,omitempty"`
	Predicate            *CassandraSlicePredicate        `protobuf:"bytes,4,req,name=predicate" json:"predicate,omitempty"`
	ConsistencyLevel     *CassandraConsistencyLevel_Type `protobuf:"varint,5,req,name=consistency_level,json=consistencyLevel,enum=nutanix.cassandra.CassandraConsistencyLevel_Type" json:"consistency_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraGetCountArg) Reset()         { *m = CassandraGetCountArg{} }
func (m *CassandraGetCountArg) String() string { return proto.CompactTextString(m) }
func (*CassandraGetCountArg) ProtoMessage()    {}
func (*CassandraGetCountArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{41}
}

func (m *CassandraGetCountArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetCountArg.Unmarshal(m, b)
}
func (m *CassandraGetCountArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetCountArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetCountArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetCountArg.Merge(m, src)
}
func (m *CassandraGetCountArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetCountArg.Size(m)
}
func (m *CassandraGetCountArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetCountArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetCountArg proto.InternalMessageInfo

func (m *CassandraGetCountArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraGetCountArg) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CassandraGetCountArg) GetColumnParent() *CassandraColumnParent {
	if m != nil {
		return m.ColumnParent
	}
	return nil
}

func (m *CassandraGetCountArg) GetPredicate() *CassandraSlicePredicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *CassandraGetCountArg) GetConsistencyLevel() CassandraConsistencyLevel_Type {
	if m != nil && m.ConsistencyLevel != nil {
		return *m.ConsistencyLevel
	}
	return CassandraConsistencyLevel_kOne
}

type CassandraGetCountRet struct {
	Count                *int32   `protobuf:"varint,1,req,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraGetCountRet) Reset()         { *m = CassandraGetCountRet{} }
func (m *CassandraGetCountRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetCountRet) ProtoMessage()    {}
func (*CassandraGetCountRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{42}
}

func (m *CassandraGetCountRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetCountRet.Unmarshal(m, b)
}
func (m *CassandraGetCountRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetCountRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetCountRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetCountRet.Merge(m, src)
}
func (m *CassandraGetCountRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetCountRet.Size(m)
}
func (m *CassandraGetCountRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetCountRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetCountRet proto.InternalMessageInfo

func (m *CassandraGetCountRet) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CassandraMultigetSliceArg struct {
	Keyspace             *string                         `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	Keys                 [][]byte                        `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
	ColumnParent         *CassandraColumnParent          `protobuf:"bytes,3,req,name=column_parent,json=columnParent" json:"column_parent,omitempty"`
	Predicate            *CassandraSlicePredicate        `protobuf:"bytes,4,req,name=predicate" json:"predicate,omitempty"`
	ConsistencyLevel     *CassandraConsistencyLevel_Type `protobuf:"varint,5,req,name=consistency_level,json=consistencyLevel,enum=nutanix.cassandra.CassandraConsistencyLevel_Type" json:"consistency_level,omitempty"`
	UsePayloadForValues  *bool                           `protobuf:"varint,6,opt,name=use_payload_for_values,json=usePayloadForValues" json:"use_payload_for_values,omitempty"`
	Priority             *int32                          `protobuf:"varint,7,opt,name=priority,def=0" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraMultigetSliceArg) Reset()         { *m = CassandraMultigetSliceArg{} }
func (m *CassandraMultigetSliceArg) String() string { return proto.CompactTextString(m) }
func (*CassandraMultigetSliceArg) ProtoMessage()    {}
func (*CassandraMultigetSliceArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{43}
}

func (m *CassandraMultigetSliceArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraMultigetSliceArg.Unmarshal(m, b)
}
func (m *CassandraMultigetSliceArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraMultigetSliceArg.Marshal(b, m, deterministic)
}
func (m *CassandraMultigetSliceArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraMultigetSliceArg.Merge(m, src)
}
func (m *CassandraMultigetSliceArg) XXX_Size() int {
	return xxx_messageInfo_CassandraMultigetSliceArg.Size(m)
}
func (m *CassandraMultigetSliceArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraMultigetSliceArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraMultigetSliceArg proto.InternalMessageInfo

const Default_CassandraMultigetSliceArg_Priority int32 = 0

func (m *CassandraMultigetSliceArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraMultigetSliceArg) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *CassandraMultigetSliceArg) GetColumnParent() *CassandraColumnParent {
	if m != nil {
		return m.ColumnParent
	}
	return nil
}

func (m *CassandraMultigetSliceArg) GetPredicate() *CassandraSlicePredicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *CassandraMultigetSliceArg) GetConsistencyLevel() CassandraConsistencyLevel_Type {
	if m != nil && m.ConsistencyLevel != nil {
		return *m.ConsistencyLevel
	}
	return CassandraConsistencyLevel_kOne
}

func (m *CassandraMultigetSliceArg) GetUsePayloadForValues() bool {
	if m != nil && m.UsePayloadForValues != nil {
		return *m.UsePayloadForValues
	}
	return false
}

func (m *CassandraMultigetSliceArg) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_CassandraMultigetSliceArg_Priority
}

type CassandraMultigetSliceRet struct {
	ColumnList           []*CassandraColumnList        `protobuf:"bytes,1,rep,name=column_list,json=columnList" json:"column_list,omitempty"`
	ActivityTraces       *CassandraActivityTracesProto `protobuf:"bytes,2,opt,name=activity_traces,json=activityTraces" json:"activity_traces,omitempty"`
	Keyspace             *string                       `protobuf:"bytes,3,opt,name=keyspace" json:"keyspace,omitempty"`
	Keys                 [][]byte                      `protobuf:"bytes,4,rep,name=keys" json:"keys,omitempty"`
	ColumnParent         *CassandraColumnParent        `protobuf:"bytes,5,opt,name=column_parent,json=columnParent" json:"column_parent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CassandraMultigetSliceRet) Reset()         { *m = CassandraMultigetSliceRet{} }
func (m *CassandraMultigetSliceRet) String() string { return proto.CompactTextString(m) }
func (*CassandraMultigetSliceRet) ProtoMessage()    {}
func (*CassandraMultigetSliceRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{44}
}

func (m *CassandraMultigetSliceRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraMultigetSliceRet.Unmarshal(m, b)
}
func (m *CassandraMultigetSliceRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraMultigetSliceRet.Marshal(b, m, deterministic)
}
func (m *CassandraMultigetSliceRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraMultigetSliceRet.Merge(m, src)
}
func (m *CassandraMultigetSliceRet) XXX_Size() int {
	return xxx_messageInfo_CassandraMultigetSliceRet.Size(m)
}
func (m *CassandraMultigetSliceRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraMultigetSliceRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraMultigetSliceRet proto.InternalMessageInfo

func (m *CassandraMultigetSliceRet) GetColumnList() []*CassandraColumnList {
	if m != nil {
		return m.ColumnList
	}
	return nil
}

func (m *CassandraMultigetSliceRet) GetActivityTraces() *CassandraActivityTracesProto {
	if m != nil {
		return m.ActivityTraces
	}
	return nil
}

func (m *CassandraMultigetSliceRet) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraMultigetSliceRet) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *CassandraMultigetSliceRet) GetColumnParent() *CassandraColumnParent {
	if m != nil {
		return m.ColumnParent
	}
	return nil
}

type CassandraMultigetCountArg struct {
	Keyspace             *string                         `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	Keys                 [][]byte                        `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
	ColumnParent         *CassandraColumnParent          `protobuf:"bytes,3,req,name=column_parent,json=columnParent" json:"column_parent,omitempty"`
	Predicate            *CassandraSlicePredicate        `protobuf:"bytes,4,req,name=predicate" json:"predicate,omitempty"`
	ConsistencyLevel     *CassandraConsistencyLevel_Type `protobuf:"varint,5,req,name=consistency_level,json=consistencyLevel,enum=nutanix.cassandra.CassandraConsistencyLevel_Type" json:"consistency_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraMultigetCountArg) Reset()         { *m = CassandraMultigetCountArg{} }
func (m *CassandraMultigetCountArg) String() string { return proto.CompactTextString(m) }
func (*CassandraMultigetCountArg) ProtoMessage()    {}
func (*CassandraMultigetCountArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{45}
}

func (m *CassandraMultigetCountArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraMultigetCountArg.Unmarshal(m, b)
}
func (m *CassandraMultigetCountArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraMultigetCountArg.Marshal(b, m, deterministic)
}
func (m *CassandraMultigetCountArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraMultigetCountArg.Merge(m, src)
}
func (m *CassandraMultigetCountArg) XXX_Size() int {
	return xxx_messageInfo_CassandraMultigetCountArg.Size(m)
}
func (m *CassandraMultigetCountArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraMultigetCountArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraMultigetCountArg proto.InternalMessageInfo

func (m *CassandraMultigetCountArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraMultigetCountArg) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *CassandraMultigetCountArg) GetColumnParent() *CassandraColumnParent {
	if m != nil {
		return m.ColumnParent
	}
	return nil
}

func (m *CassandraMultigetCountArg) GetPredicate() *CassandraSlicePredicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *CassandraMultigetCountArg) GetConsistencyLevel() CassandraConsistencyLevel_Type {
	if m != nil && m.ConsistencyLevel != nil {
		return *m.ConsistencyLevel
	}
	return CassandraConsistencyLevel_kOne
}

type CassandraMultigetCountRet struct {
	Counts               []int32  `protobuf:"varint,1,rep,name=counts" json:"counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraMultigetCountRet) Reset()         { *m = CassandraMultigetCountRet{} }
func (m *CassandraMultigetCountRet) String() string { return proto.CompactTextString(m) }
func (*CassandraMultigetCountRet) ProtoMessage()    {}
func (*CassandraMultigetCountRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{46}
}

func (m *CassandraMultigetCountRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraMultigetCountRet.Unmarshal(m, b)
}
func (m *CassandraMultigetCountRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraMultigetCountRet.Marshal(b, m, deterministic)
}
func (m *CassandraMultigetCountRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraMultigetCountRet.Merge(m, src)
}
func (m *CassandraMultigetCountRet) XXX_Size() int {
	return xxx_messageInfo_CassandraMultigetCountRet.Size(m)
}
func (m *CassandraMultigetCountRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraMultigetCountRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraMultigetCountRet proto.InternalMessageInfo

func (m *CassandraMultigetCountRet) GetCounts() []int32 {
	if m != nil {
		return m.Counts
	}
	return nil
}

type CassandraGetRangeSlicesArg struct {
	Keyspace            *string                         `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	ColumnParent        *CassandraColumnParent          `protobuf:"bytes,2,req,name=column_parent,json=columnParent" json:"column_parent,omitempty"`
	Predicate           *CassandraSlicePredicate        `protobuf:"bytes,3,req,name=predicate" json:"predicate,omitempty"`
	Range               *CassandraKeyRange              `protobuf:"bytes,4,req,name=range" json:"range,omitempty"`
	ConsistencyLevel    *CassandraConsistencyLevel_Type `protobuf:"varint,5,req,name=consistency_level,json=consistencyLevel,enum=nutanix.cassandra.CassandraConsistencyLevel_Type" json:"consistency_level,omitempty"`
	UsePayloadForValues *bool                           `protobuf:"varint,6,opt,name=use_payload_for_values,json=usePayloadForValues" json:"use_payload_for_values,omitempty"`
	// Tag 7 deprecated:
	// optional int64 max_result_size_bytes = 7;
	Priority *int32 `protobuf:"varint,8,opt,name=priority,def=0" json:"priority,omitempty"`
	// Cookie for stateful scans. This is set to the cookie value
	// returned by the server in the previous scan RPC.
	// Note that cookie based stateful scans are supported when reading
	// from SSTables only.
	Cookie *CassandraScanCookie `protobuf:"bytes,9,opt,name=cookie" json:"cookie,omitempty"`
	// The snapshot info specifies the snapshot ids (for each of the nodes) for
	// this scan RPC. The scan RPC tries to return only those key value pairs
	// updated during the specified snapshot interval. It may however return a
	// bigger set including few key value pairs from an earlier snapshot.
	SnapshotInfoForNodes []*CassandraNodeSnapshotInfo `protobuf:"bytes,10,rep,name=snapshot_info_for_nodes,json=snapshotInfoForNodes" json:"snapshot_info_for_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CassandraGetRangeSlicesArg) Reset()         { *m = CassandraGetRangeSlicesArg{} }
func (m *CassandraGetRangeSlicesArg) String() string { return proto.CompactTextString(m) }
func (*CassandraGetRangeSlicesArg) ProtoMessage()    {}
func (*CassandraGetRangeSlicesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{47}
}

func (m *CassandraGetRangeSlicesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetRangeSlicesArg.Unmarshal(m, b)
}
func (m *CassandraGetRangeSlicesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetRangeSlicesArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetRangeSlicesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetRangeSlicesArg.Merge(m, src)
}
func (m *CassandraGetRangeSlicesArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetRangeSlicesArg.Size(m)
}
func (m *CassandraGetRangeSlicesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetRangeSlicesArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetRangeSlicesArg proto.InternalMessageInfo

const Default_CassandraGetRangeSlicesArg_Priority int32 = 0

func (m *CassandraGetRangeSlicesArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraGetRangeSlicesArg) GetColumnParent() *CassandraColumnParent {
	if m != nil {
		return m.ColumnParent
	}
	return nil
}

func (m *CassandraGetRangeSlicesArg) GetPredicate() *CassandraSlicePredicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *CassandraGetRangeSlicesArg) GetRange() *CassandraKeyRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *CassandraGetRangeSlicesArg) GetConsistencyLevel() CassandraConsistencyLevel_Type {
	if m != nil && m.ConsistencyLevel != nil {
		return *m.ConsistencyLevel
	}
	return CassandraConsistencyLevel_kOne
}

func (m *CassandraGetRangeSlicesArg) GetUsePayloadForValues() bool {
	if m != nil && m.UsePayloadForValues != nil {
		return *m.UsePayloadForValues
	}
	return false
}

func (m *CassandraGetRangeSlicesArg) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_CassandraGetRangeSlicesArg_Priority
}

func (m *CassandraGetRangeSlicesArg) GetCookie() *CassandraScanCookie {
	if m != nil {
		return m.Cookie
	}
	return nil
}

func (m *CassandraGetRangeSlicesArg) GetSnapshotInfoForNodes() []*CassandraNodeSnapshotInfo {
	if m != nil {
		return m.SnapshotInfoForNodes
	}
	return nil
}

type CassandraGetRangeSlicesRet struct {
	RangeSlices  []*CassandraKeySlice   `protobuf:"bytes,1,rep,name=range_slices,json=rangeSlices" json:"range_slices,omitempty"`
	Keyspace     *string                `protobuf:"bytes,2,opt,name=keyspace" json:"keyspace,omitempty"`
	ColumnParent *CassandraColumnParent `protobuf:"bytes,3,opt,name=column_parent,json=columnParent" json:"column_parent,omitempty"`
	// Cookie returned by server for stateful scans.
	// Client is expected to use this to set the cookie for next scan RPC
	// in CassandraGetRangeSlicesArg.
	Cookie *CassandraScanCookie `protobuf:"bytes,4,opt,name=cookie" json:"cookie,omitempty"`
	// When true indicates that at least one of replica includes data from a
	// invalid snapshot id sstable for the scan.
	ResponseIncludesDataFromInvalidSnapshotId *bool    `protobuf:"varint,5,opt,name=response_includes_data_from_invalid_snapshot_id,json=responseIncludesDataFromInvalidSnapshotId,def=0" json:"response_includes_data_from_invalid_snapshot_id,omitempty"`
	XXX_NoUnkeyedLiteral                      struct{} `json:"-"`
	XXX_unrecognized                          []byte   `json:"-"`
	XXX_sizecache                             int32    `json:"-"`
}

func (m *CassandraGetRangeSlicesRet) Reset()         { *m = CassandraGetRangeSlicesRet{} }
func (m *CassandraGetRangeSlicesRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetRangeSlicesRet) ProtoMessage()    {}
func (*CassandraGetRangeSlicesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{48}
}

func (m *CassandraGetRangeSlicesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetRangeSlicesRet.Unmarshal(m, b)
}
func (m *CassandraGetRangeSlicesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetRangeSlicesRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetRangeSlicesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetRangeSlicesRet.Merge(m, src)
}
func (m *CassandraGetRangeSlicesRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetRangeSlicesRet.Size(m)
}
func (m *CassandraGetRangeSlicesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetRangeSlicesRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetRangeSlicesRet proto.InternalMessageInfo

const Default_CassandraGetRangeSlicesRet_ResponseIncludesDataFromInvalidSnapshotId bool = false

func (m *CassandraGetRangeSlicesRet) GetRangeSlices() []*CassandraKeySlice {
	if m != nil {
		return m.RangeSlices
	}
	return nil
}

func (m *CassandraGetRangeSlicesRet) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraGetRangeSlicesRet) GetColumnParent() *CassandraColumnParent {
	if m != nil {
		return m.ColumnParent
	}
	return nil
}

func (m *CassandraGetRangeSlicesRet) GetCookie() *CassandraScanCookie {
	if m != nil {
		return m.Cookie
	}
	return nil
}

func (m *CassandraGetRangeSlicesRet) GetResponseIncludesDataFromInvalidSnapshotId() bool {
	if m != nil && m.ResponseIncludesDataFromInvalidSnapshotId != nil {
		return *m.ResponseIncludesDataFromInvalidSnapshotId
	}
	return Default_CassandraGetRangeSlicesRet_ResponseIncludesDataFromInvalidSnapshotId
}

type CassandraGetIndexedSlicesArg struct {
	Keyspace             *string                         `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	ColumnParent         *CassandraColumnParent          `protobuf:"bytes,2,req,name=column_parent,json=columnParent" json:"column_parent,omitempty"`
	IndexClause          *CassandraIndexClause           `protobuf:"bytes,3,req,name=index_clause,json=indexClause" json:"index_clause,omitempty"`
	ColumnPredicate      *CassandraSlicePredicate        `protobuf:"bytes,4,req,name=column_predicate,json=columnPredicate" json:"column_predicate,omitempty"`
	ConsistencyLevel     *CassandraConsistencyLevel_Type `protobuf:"varint,5,req,name=consistency_level,json=consistencyLevel,enum=nutanix.cassandra.CassandraConsistencyLevel_Type" json:"consistency_level,omitempty"`
	UsePayloadForValues  *bool                           `protobuf:"varint,6,opt,name=use_payload_for_values,json=usePayloadForValues" json:"use_payload_for_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraGetIndexedSlicesArg) Reset()         { *m = CassandraGetIndexedSlicesArg{} }
func (m *CassandraGetIndexedSlicesArg) String() string { return proto.CompactTextString(m) }
func (*CassandraGetIndexedSlicesArg) ProtoMessage()    {}
func (*CassandraGetIndexedSlicesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{49}
}

func (m *CassandraGetIndexedSlicesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetIndexedSlicesArg.Unmarshal(m, b)
}
func (m *CassandraGetIndexedSlicesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetIndexedSlicesArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetIndexedSlicesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetIndexedSlicesArg.Merge(m, src)
}
func (m *CassandraGetIndexedSlicesArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetIndexedSlicesArg.Size(m)
}
func (m *CassandraGetIndexedSlicesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetIndexedSlicesArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetIndexedSlicesArg proto.InternalMessageInfo

func (m *CassandraGetIndexedSlicesArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraGetIndexedSlicesArg) GetColumnParent() *CassandraColumnParent {
	if m != nil {
		return m.ColumnParent
	}
	return nil
}

func (m *CassandraGetIndexedSlicesArg) GetIndexClause() *CassandraIndexClause {
	if m != nil {
		return m.IndexClause
	}
	return nil
}

func (m *CassandraGetIndexedSlicesArg) GetColumnPredicate() *CassandraSlicePredicate {
	if m != nil {
		return m.ColumnPredicate
	}
	return nil
}

func (m *CassandraGetIndexedSlicesArg) GetConsistencyLevel() CassandraConsistencyLevel_Type {
	if m != nil && m.ConsistencyLevel != nil {
		return *m.ConsistencyLevel
	}
	return CassandraConsistencyLevel_kOne
}

func (m *CassandraGetIndexedSlicesArg) GetUsePayloadForValues() bool {
	if m != nil && m.UsePayloadForValues != nil {
		return *m.UsePayloadForValues
	}
	return false
}

type CassandraGetIndexedSlicesRet struct {
	IndexedSlices        []*CassandraKeySlice `protobuf:"bytes,1,rep,name=indexed_slices,json=indexedSlices" json:"indexed_slices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CassandraGetIndexedSlicesRet) Reset()         { *m = CassandraGetIndexedSlicesRet{} }
func (m *CassandraGetIndexedSlicesRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetIndexedSlicesRet) ProtoMessage()    {}
func (*CassandraGetIndexedSlicesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{50}
}

func (m *CassandraGetIndexedSlicesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetIndexedSlicesRet.Unmarshal(m, b)
}
func (m *CassandraGetIndexedSlicesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetIndexedSlicesRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetIndexedSlicesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetIndexedSlicesRet.Merge(m, src)
}
func (m *CassandraGetIndexedSlicesRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetIndexedSlicesRet.Size(m)
}
func (m *CassandraGetIndexedSlicesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetIndexedSlicesRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetIndexedSlicesRet proto.InternalMessageInfo

func (m *CassandraGetIndexedSlicesRet) GetIndexedSlices() []*CassandraKeySlice {
	if m != nil {
		return m.IndexedSlices
	}
	return nil
}

type CassandraInsertArg struct {
	Keyspace         *string                         `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	Key              []byte                          `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	ColumnParent     *CassandraColumnParent          `protobuf:"bytes,3,req,name=column_parent,json=columnParent" json:"column_parent,omitempty"`
	Column           *CassandraColumn                `protobuf:"bytes,4,req,name=column" json:"column,omitempty"`
	ConsistencyLevel *CassandraConsistencyLevel_Type `protobuf:"varint,5,req,name=consistency_level,json=consistencyLevel,enum=nutanix.cassandra.CassandraConsistencyLevel_Type" json:"consistency_level,omitempty"`
	Priority         *int32                          `protobuf:"varint,6,opt,name=priority,def=0" json:"priority,omitempty"`
	// The checksum for 'key'.
	Checksum             *int32   `protobuf:"varint,7,opt,name=checksum,def=0" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraInsertArg) Reset()         { *m = CassandraInsertArg{} }
func (m *CassandraInsertArg) String() string { return proto.CompactTextString(m) }
func (*CassandraInsertArg) ProtoMessage()    {}
func (*CassandraInsertArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{51}
}

func (m *CassandraInsertArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraInsertArg.Unmarshal(m, b)
}
func (m *CassandraInsertArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraInsertArg.Marshal(b, m, deterministic)
}
func (m *CassandraInsertArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraInsertArg.Merge(m, src)
}
func (m *CassandraInsertArg) XXX_Size() int {
	return xxx_messageInfo_CassandraInsertArg.Size(m)
}
func (m *CassandraInsertArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraInsertArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraInsertArg proto.InternalMessageInfo

const Default_CassandraInsertArg_Priority int32 = 0
const Default_CassandraInsertArg_Checksum int32 = 0

func (m *CassandraInsertArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraInsertArg) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CassandraInsertArg) GetColumnParent() *CassandraColumnParent {
	if m != nil {
		return m.ColumnParent
	}
	return nil
}

func (m *CassandraInsertArg) GetColumn() *CassandraColumn {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *CassandraInsertArg) GetConsistencyLevel() CassandraConsistencyLevel_Type {
	if m != nil && m.ConsistencyLevel != nil {
		return *m.ConsistencyLevel
	}
	return CassandraConsistencyLevel_kOne
}

func (m *CassandraInsertArg) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_CassandraInsertArg_Priority
}

func (m *CassandraInsertArg) GetChecksum() int32 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return Default_CassandraInsertArg_Checksum
}

type CassandraInsertRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraInsertRet) Reset()         { *m = CassandraInsertRet{} }
func (m *CassandraInsertRet) String() string { return proto.CompactTextString(m) }
func (*CassandraInsertRet) ProtoMessage()    {}
func (*CassandraInsertRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{52}
}

func (m *CassandraInsertRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraInsertRet.Unmarshal(m, b)
}
func (m *CassandraInsertRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraInsertRet.Marshal(b, m, deterministic)
}
func (m *CassandraInsertRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraInsertRet.Merge(m, src)
}
func (m *CassandraInsertRet) XXX_Size() int {
	return xxx_messageInfo_CassandraInsertRet.Size(m)
}
func (m *CassandraInsertRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraInsertRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraInsertRet proto.InternalMessageInfo

type CassandraRemoveArg struct {
	Keyspace             *string                         `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	Key                  []byte                          `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	ColumnPath           *CassandraColumnPath            `protobuf:"bytes,3,req,name=column_path,json=columnPath" json:"column_path,omitempty"`
	Clock                *CassandraClock                 `protobuf:"bytes,4,req,name=clock" json:"clock,omitempty"`
	ConsistencyLevel     *CassandraConsistencyLevel_Type `protobuf:"varint,5,req,name=consistency_level,json=consistencyLevel,enum=nutanix.cassandra.CassandraConsistencyLevel_Type" json:"consistency_level,omitempty"`
	Priority             *int32                          `protobuf:"varint,6,opt,name=priority,def=0" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraRemoveArg) Reset()         { *m = CassandraRemoveArg{} }
func (m *CassandraRemoveArg) String() string { return proto.CompactTextString(m) }
func (*CassandraRemoveArg) ProtoMessage()    {}
func (*CassandraRemoveArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{53}
}

func (m *CassandraRemoveArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraRemoveArg.Unmarshal(m, b)
}
func (m *CassandraRemoveArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraRemoveArg.Marshal(b, m, deterministic)
}
func (m *CassandraRemoveArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraRemoveArg.Merge(m, src)
}
func (m *CassandraRemoveArg) XXX_Size() int {
	return xxx_messageInfo_CassandraRemoveArg.Size(m)
}
func (m *CassandraRemoveArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraRemoveArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraRemoveArg proto.InternalMessageInfo

const Default_CassandraRemoveArg_Priority int32 = 0

func (m *CassandraRemoveArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraRemoveArg) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CassandraRemoveArg) GetColumnPath() *CassandraColumnPath {
	if m != nil {
		return m.ColumnPath
	}
	return nil
}

func (m *CassandraRemoveArg) GetClock() *CassandraClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

func (m *CassandraRemoveArg) GetConsistencyLevel() CassandraConsistencyLevel_Type {
	if m != nil && m.ConsistencyLevel != nil {
		return *m.ConsistencyLevel
	}
	return CassandraConsistencyLevel_kOne
}

func (m *CassandraRemoveArg) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_CassandraRemoveArg_Priority
}

type CassandraRemoveRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraRemoveRet) Reset()         { *m = CassandraRemoveRet{} }
func (m *CassandraRemoveRet) String() string { return proto.CompactTextString(m) }
func (*CassandraRemoveRet) ProtoMessage()    {}
func (*CassandraRemoveRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{54}
}

func (m *CassandraRemoveRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraRemoveRet.Unmarshal(m, b)
}
func (m *CassandraRemoveRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraRemoveRet.Marshal(b, m, deterministic)
}
func (m *CassandraRemoveRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraRemoveRet.Merge(m, src)
}
func (m *CassandraRemoveRet) XXX_Size() int {
	return xxx_messageInfo_CassandraRemoveRet.Size(m)
}
func (m *CassandraRemoveRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraRemoveRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraRemoveRet proto.InternalMessageInfo

type CassandraBatchMutateArg struct {
	Keyspace             *string                         `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	MutationsList        []*CassandraMutationsList       `protobuf:"bytes,2,rep,name=mutations_list,json=mutationsList" json:"mutations_list,omitempty"`
	ConsistencyLevel     *CassandraConsistencyLevel_Type `protobuf:"varint,3,req,name=consistency_level,json=consistencyLevel,enum=nutanix.cassandra.CassandraConsistencyLevel_Type" json:"consistency_level,omitempty"`
	Priority             *int32                          `protobuf:"varint,4,opt,name=priority,def=0" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CassandraBatchMutateArg) Reset()         { *m = CassandraBatchMutateArg{} }
func (m *CassandraBatchMutateArg) String() string { return proto.CompactTextString(m) }
func (*CassandraBatchMutateArg) ProtoMessage()    {}
func (*CassandraBatchMutateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{55}
}

func (m *CassandraBatchMutateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraBatchMutateArg.Unmarshal(m, b)
}
func (m *CassandraBatchMutateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraBatchMutateArg.Marshal(b, m, deterministic)
}
func (m *CassandraBatchMutateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraBatchMutateArg.Merge(m, src)
}
func (m *CassandraBatchMutateArg) XXX_Size() int {
	return xxx_messageInfo_CassandraBatchMutateArg.Size(m)
}
func (m *CassandraBatchMutateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraBatchMutateArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraBatchMutateArg proto.InternalMessageInfo

const Default_CassandraBatchMutateArg_Priority int32 = 0

func (m *CassandraBatchMutateArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraBatchMutateArg) GetMutationsList() []*CassandraMutationsList {
	if m != nil {
		return m.MutationsList
	}
	return nil
}

func (m *CassandraBatchMutateArg) GetConsistencyLevel() CassandraConsistencyLevel_Type {
	if m != nil && m.ConsistencyLevel != nil {
		return *m.ConsistencyLevel
	}
	return CassandraConsistencyLevel_kOne
}

func (m *CassandraBatchMutateArg) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_CassandraBatchMutateArg_Priority
}

type CassandraBatchMutateRet struct {
	MutationsList        []*CassandraMutationsList     `protobuf:"bytes,1,rep,name=mutations_list,json=mutationsList" json:"mutations_list,omitempty"`
	ActivityTraces       *CassandraActivityTracesProto `protobuf:"bytes,2,opt,name=activity_traces,json=activityTraces" json:"activity_traces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CassandraBatchMutateRet) Reset()         { *m = CassandraBatchMutateRet{} }
func (m *CassandraBatchMutateRet) String() string { return proto.CompactTextString(m) }
func (*CassandraBatchMutateRet) ProtoMessage()    {}
func (*CassandraBatchMutateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{56}
}

func (m *CassandraBatchMutateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraBatchMutateRet.Unmarshal(m, b)
}
func (m *CassandraBatchMutateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraBatchMutateRet.Marshal(b, m, deterministic)
}
func (m *CassandraBatchMutateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraBatchMutateRet.Merge(m, src)
}
func (m *CassandraBatchMutateRet) XXX_Size() int {
	return xxx_messageInfo_CassandraBatchMutateRet.Size(m)
}
func (m *CassandraBatchMutateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraBatchMutateRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraBatchMutateRet proto.InternalMessageInfo

func (m *CassandraBatchMutateRet) GetMutationsList() []*CassandraMutationsList {
	if m != nil {
		return m.MutationsList
	}
	return nil
}

func (m *CassandraBatchMutateRet) GetActivityTraces() *CassandraActivityTracesProto {
	if m != nil {
		return m.ActivityTraces
	}
	return nil
}

type CassandraTruncateArg struct {
	Keyspace             *string  `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	Cfname               *string  `protobuf:"bytes,2,req,name=cfname" json:"cfname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraTruncateArg) Reset()         { *m = CassandraTruncateArg{} }
func (m *CassandraTruncateArg) String() string { return proto.CompactTextString(m) }
func (*CassandraTruncateArg) ProtoMessage()    {}
func (*CassandraTruncateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{57}
}

func (m *CassandraTruncateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraTruncateArg.Unmarshal(m, b)
}
func (m *CassandraTruncateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraTruncateArg.Marshal(b, m, deterministic)
}
func (m *CassandraTruncateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraTruncateArg.Merge(m, src)
}
func (m *CassandraTruncateArg) XXX_Size() int {
	return xxx_messageInfo_CassandraTruncateArg.Size(m)
}
func (m *CassandraTruncateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraTruncateArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraTruncateArg proto.InternalMessageInfo

func (m *CassandraTruncateArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraTruncateArg) GetCfname() string {
	if m != nil && m.Cfname != nil {
		return *m.Cfname
	}
	return ""
}

type CassandraTruncateRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraTruncateRet) Reset()         { *m = CassandraTruncateRet{} }
func (m *CassandraTruncateRet) String() string { return proto.CompactTextString(m) }
func (*CassandraTruncateRet) ProtoMessage()    {}
func (*CassandraTruncateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{58}
}

func (m *CassandraTruncateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraTruncateRet.Unmarshal(m, b)
}
func (m *CassandraTruncateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraTruncateRet.Marshal(b, m, deterministic)
}
func (m *CassandraTruncateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraTruncateRet.Merge(m, src)
}
func (m *CassandraTruncateRet) XXX_Size() int {
	return xxx_messageInfo_CassandraTruncateRet.Size(m)
}
func (m *CassandraTruncateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraTruncateRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraTruncateRet proto.InternalMessageInfo

type CassandraDescribeSchemaVersionsArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeSchemaVersionsArg) Reset()         { *m = CassandraDescribeSchemaVersionsArg{} }
func (m *CassandraDescribeSchemaVersionsArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeSchemaVersionsArg) ProtoMessage()    {}
func (*CassandraDescribeSchemaVersionsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{59}
}

func (m *CassandraDescribeSchemaVersionsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeSchemaVersionsArg.Unmarshal(m, b)
}
func (m *CassandraDescribeSchemaVersionsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeSchemaVersionsArg.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeSchemaVersionsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeSchemaVersionsArg.Merge(m, src)
}
func (m *CassandraDescribeSchemaVersionsArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeSchemaVersionsArg.Size(m)
}
func (m *CassandraDescribeSchemaVersionsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeSchemaVersionsArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeSchemaVersionsArg proto.InternalMessageInfo

type CassandraDescribeSchemaVersionsRet struct {
	Entries              []*CassandraDescribeSchemaVersionsRet_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *CassandraDescribeSchemaVersionsRet) Reset()         { *m = CassandraDescribeSchemaVersionsRet{} }
func (m *CassandraDescribeSchemaVersionsRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeSchemaVersionsRet) ProtoMessage()    {}
func (*CassandraDescribeSchemaVersionsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{60}
}

func (m *CassandraDescribeSchemaVersionsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeSchemaVersionsRet.Unmarshal(m, b)
}
func (m *CassandraDescribeSchemaVersionsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeSchemaVersionsRet.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeSchemaVersionsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeSchemaVersionsRet.Merge(m, src)
}
func (m *CassandraDescribeSchemaVersionsRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeSchemaVersionsRet.Size(m)
}
func (m *CassandraDescribeSchemaVersionsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeSchemaVersionsRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeSchemaVersionsRet proto.InternalMessageInfo

func (m *CassandraDescribeSchemaVersionsRet) GetEntries() []*CassandraDescribeSchemaVersionsRet_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type CassandraDescribeSchemaVersionsRet_Entry struct {
	Key                  *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Values               []string `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeSchemaVersionsRet_Entry) Reset() {
	*m = CassandraDescribeSchemaVersionsRet_Entry{}
}
func (m *CassandraDescribeSchemaVersionsRet_Entry) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeSchemaVersionsRet_Entry) ProtoMessage()    {}
func (*CassandraDescribeSchemaVersionsRet_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{60, 0}
}

func (m *CassandraDescribeSchemaVersionsRet_Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeSchemaVersionsRet_Entry.Unmarshal(m, b)
}
func (m *CassandraDescribeSchemaVersionsRet_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeSchemaVersionsRet_Entry.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeSchemaVersionsRet_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeSchemaVersionsRet_Entry.Merge(m, src)
}
func (m *CassandraDescribeSchemaVersionsRet_Entry) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeSchemaVersionsRet_Entry.Size(m)
}
func (m *CassandraDescribeSchemaVersionsRet_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeSchemaVersionsRet_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeSchemaVersionsRet_Entry proto.InternalMessageInfo

func (m *CassandraDescribeSchemaVersionsRet_Entry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *CassandraDescribeSchemaVersionsRet_Entry) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type CassandraDescribeKeyspacesArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeKeyspacesArg) Reset()         { *m = CassandraDescribeKeyspacesArg{} }
func (m *CassandraDescribeKeyspacesArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeKeyspacesArg) ProtoMessage()    {}
func (*CassandraDescribeKeyspacesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{61}
}

func (m *CassandraDescribeKeyspacesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeKeyspacesArg.Unmarshal(m, b)
}
func (m *CassandraDescribeKeyspacesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeKeyspacesArg.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeKeyspacesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeKeyspacesArg.Merge(m, src)
}
func (m *CassandraDescribeKeyspacesArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeKeyspacesArg.Size(m)
}
func (m *CassandraDescribeKeyspacesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeKeyspacesArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeKeyspacesArg proto.InternalMessageInfo

type CassandraDescribeKeyspacesRet struct {
	Keyspaces            []*CassandraKsDef `protobuf:"bytes,1,rep,name=keyspaces" json:"keyspaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CassandraDescribeKeyspacesRet) Reset()         { *m = CassandraDescribeKeyspacesRet{} }
func (m *CassandraDescribeKeyspacesRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeKeyspacesRet) ProtoMessage()    {}
func (*CassandraDescribeKeyspacesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{62}
}

func (m *CassandraDescribeKeyspacesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeKeyspacesRet.Unmarshal(m, b)
}
func (m *CassandraDescribeKeyspacesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeKeyspacesRet.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeKeyspacesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeKeyspacesRet.Merge(m, src)
}
func (m *CassandraDescribeKeyspacesRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeKeyspacesRet.Size(m)
}
func (m *CassandraDescribeKeyspacesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeKeyspacesRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeKeyspacesRet proto.InternalMessageInfo

func (m *CassandraDescribeKeyspacesRet) GetKeyspaces() []*CassandraKsDef {
	if m != nil {
		return m.Keyspaces
	}
	return nil
}

type CassandraDescribeClusterNameArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeClusterNameArg) Reset()         { *m = CassandraDescribeClusterNameArg{} }
func (m *CassandraDescribeClusterNameArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeClusterNameArg) ProtoMessage()    {}
func (*CassandraDescribeClusterNameArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{63}
}

func (m *CassandraDescribeClusterNameArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeClusterNameArg.Unmarshal(m, b)
}
func (m *CassandraDescribeClusterNameArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeClusterNameArg.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeClusterNameArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeClusterNameArg.Merge(m, src)
}
func (m *CassandraDescribeClusterNameArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeClusterNameArg.Size(m)
}
func (m *CassandraDescribeClusterNameArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeClusterNameArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeClusterNameArg proto.InternalMessageInfo

type CassandraDescribeClusterNameRet struct {
	Name                 *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeClusterNameRet) Reset()         { *m = CassandraDescribeClusterNameRet{} }
func (m *CassandraDescribeClusterNameRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeClusterNameRet) ProtoMessage()    {}
func (*CassandraDescribeClusterNameRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{64}
}

func (m *CassandraDescribeClusterNameRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeClusterNameRet.Unmarshal(m, b)
}
func (m *CassandraDescribeClusterNameRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeClusterNameRet.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeClusterNameRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeClusterNameRet.Merge(m, src)
}
func (m *CassandraDescribeClusterNameRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeClusterNameRet.Size(m)
}
func (m *CassandraDescribeClusterNameRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeClusterNameRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeClusterNameRet proto.InternalMessageInfo

func (m *CassandraDescribeClusterNameRet) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type CassandraDescribeVersionArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeVersionArg) Reset()         { *m = CassandraDescribeVersionArg{} }
func (m *CassandraDescribeVersionArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeVersionArg) ProtoMessage()    {}
func (*CassandraDescribeVersionArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{65}
}

func (m *CassandraDescribeVersionArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeVersionArg.Unmarshal(m, b)
}
func (m *CassandraDescribeVersionArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeVersionArg.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeVersionArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeVersionArg.Merge(m, src)
}
func (m *CassandraDescribeVersionArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeVersionArg.Size(m)
}
func (m *CassandraDescribeVersionArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeVersionArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeVersionArg proto.InternalMessageInfo

type CassandraDescribeVersionRet struct {
	Version              *string  `protobuf:"bytes,1,req,name=version" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeVersionRet) Reset()         { *m = CassandraDescribeVersionRet{} }
func (m *CassandraDescribeVersionRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeVersionRet) ProtoMessage()    {}
func (*CassandraDescribeVersionRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{66}
}

func (m *CassandraDescribeVersionRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeVersionRet.Unmarshal(m, b)
}
func (m *CassandraDescribeVersionRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeVersionRet.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeVersionRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeVersionRet.Merge(m, src)
}
func (m *CassandraDescribeVersionRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeVersionRet.Size(m)
}
func (m *CassandraDescribeVersionRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeVersionRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeVersionRet proto.InternalMessageInfo

func (m *CassandraDescribeVersionRet) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

type CassandraDescribeRingArg struct {
	Keyspace             *string  `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeRingArg) Reset()         { *m = CassandraDescribeRingArg{} }
func (m *CassandraDescribeRingArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeRingArg) ProtoMessage()    {}
func (*CassandraDescribeRingArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{67}
}

func (m *CassandraDescribeRingArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeRingArg.Unmarshal(m, b)
}
func (m *CassandraDescribeRingArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeRingArg.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeRingArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeRingArg.Merge(m, src)
}
func (m *CassandraDescribeRingArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeRingArg.Size(m)
}
func (m *CassandraDescribeRingArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeRingArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeRingArg proto.InternalMessageInfo

func (m *CassandraDescribeRingArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

type CassandraDescribeRingRet struct {
	TokenRanges          []*CassandraTokenRange `protobuf:"bytes,1,rep,name=token_ranges,json=tokenRanges" json:"token_ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CassandraDescribeRingRet) Reset()         { *m = CassandraDescribeRingRet{} }
func (m *CassandraDescribeRingRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeRingRet) ProtoMessage()    {}
func (*CassandraDescribeRingRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{68}
}

func (m *CassandraDescribeRingRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeRingRet.Unmarshal(m, b)
}
func (m *CassandraDescribeRingRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeRingRet.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeRingRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeRingRet.Merge(m, src)
}
func (m *CassandraDescribeRingRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeRingRet.Size(m)
}
func (m *CassandraDescribeRingRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeRingRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeRingRet proto.InternalMessageInfo

func (m *CassandraDescribeRingRet) GetTokenRanges() []*CassandraTokenRange {
	if m != nil {
		return m.TokenRanges
	}
	return nil
}

type CassandraDescribePartitionerArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribePartitionerArg) Reset()         { *m = CassandraDescribePartitionerArg{} }
func (m *CassandraDescribePartitionerArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribePartitionerArg) ProtoMessage()    {}
func (*CassandraDescribePartitionerArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{69}
}

func (m *CassandraDescribePartitionerArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribePartitionerArg.Unmarshal(m, b)
}
func (m *CassandraDescribePartitionerArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribePartitionerArg.Marshal(b, m, deterministic)
}
func (m *CassandraDescribePartitionerArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribePartitionerArg.Merge(m, src)
}
func (m *CassandraDescribePartitionerArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribePartitionerArg.Size(m)
}
func (m *CassandraDescribePartitionerArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribePartitionerArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribePartitionerArg proto.InternalMessageInfo

type CassandraDescribePartitionerRet struct {
	Partitioner          *string  `protobuf:"bytes,1,req,name=partitioner" json:"partitioner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribePartitionerRet) Reset()         { *m = CassandraDescribePartitionerRet{} }
func (m *CassandraDescribePartitionerRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribePartitionerRet) ProtoMessage()    {}
func (*CassandraDescribePartitionerRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{70}
}

func (m *CassandraDescribePartitionerRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribePartitionerRet.Unmarshal(m, b)
}
func (m *CassandraDescribePartitionerRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribePartitionerRet.Marshal(b, m, deterministic)
}
func (m *CassandraDescribePartitionerRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribePartitionerRet.Merge(m, src)
}
func (m *CassandraDescribePartitionerRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribePartitionerRet.Size(m)
}
func (m *CassandraDescribePartitionerRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribePartitionerRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribePartitionerRet proto.InternalMessageInfo

func (m *CassandraDescribePartitionerRet) GetPartitioner() string {
	if m != nil && m.Partitioner != nil {
		return *m.Partitioner
	}
	return ""
}

type CassandraDescribeKeyspaceArg struct {
	Keyspace             *string  `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeKeyspaceArg) Reset()         { *m = CassandraDescribeKeyspaceArg{} }
func (m *CassandraDescribeKeyspaceArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeKeyspaceArg) ProtoMessage()    {}
func (*CassandraDescribeKeyspaceArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{71}
}

func (m *CassandraDescribeKeyspaceArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeKeyspaceArg.Unmarshal(m, b)
}
func (m *CassandraDescribeKeyspaceArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeKeyspaceArg.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeKeyspaceArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeKeyspaceArg.Merge(m, src)
}
func (m *CassandraDescribeKeyspaceArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeKeyspaceArg.Size(m)
}
func (m *CassandraDescribeKeyspaceArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeKeyspaceArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeKeyspaceArg proto.InternalMessageInfo

func (m *CassandraDescribeKeyspaceArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

type CassandraDescribeKeyspaceRet struct {
	KsDef                *CassandraKsDef `protobuf:"bytes,1,req,name=ks_def,json=ksDef" json:"ks_def,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CassandraDescribeKeyspaceRet) Reset()         { *m = CassandraDescribeKeyspaceRet{} }
func (m *CassandraDescribeKeyspaceRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeKeyspaceRet) ProtoMessage()    {}
func (*CassandraDescribeKeyspaceRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{72}
}

func (m *CassandraDescribeKeyspaceRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeKeyspaceRet.Unmarshal(m, b)
}
func (m *CassandraDescribeKeyspaceRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeKeyspaceRet.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeKeyspaceRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeKeyspaceRet.Merge(m, src)
}
func (m *CassandraDescribeKeyspaceRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeKeyspaceRet.Size(m)
}
func (m *CassandraDescribeKeyspaceRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeKeyspaceRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeKeyspaceRet proto.InternalMessageInfo

func (m *CassandraDescribeKeyspaceRet) GetKsDef() *CassandraKsDef {
	if m != nil {
		return m.KsDef
	}
	return nil
}

type CassandraDescribeSplitsArg struct {
	Keyspace             *string  `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	CfName               *string  `protobuf:"bytes,2,req,name=cf_name,json=cfName" json:"cf_name,omitempty"`
	StartToken           *string  `protobuf:"bytes,3,req,name=start_token,json=startToken" json:"start_token,omitempty"`
	EndToken             *string  `protobuf:"bytes,4,req,name=end_token,json=endToken" json:"end_token,omitempty"`
	KeysPerSplit         *int32   `protobuf:"varint,5,req,name=keys_per_split,json=keysPerSplit" json:"keys_per_split,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeSplitsArg) Reset()         { *m = CassandraDescribeSplitsArg{} }
func (m *CassandraDescribeSplitsArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeSplitsArg) ProtoMessage()    {}
func (*CassandraDescribeSplitsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{73}
}

func (m *CassandraDescribeSplitsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeSplitsArg.Unmarshal(m, b)
}
func (m *CassandraDescribeSplitsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeSplitsArg.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeSplitsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeSplitsArg.Merge(m, src)
}
func (m *CassandraDescribeSplitsArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeSplitsArg.Size(m)
}
func (m *CassandraDescribeSplitsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeSplitsArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeSplitsArg proto.InternalMessageInfo

func (m *CassandraDescribeSplitsArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraDescribeSplitsArg) GetCfName() string {
	if m != nil && m.CfName != nil {
		return *m.CfName
	}
	return ""
}

func (m *CassandraDescribeSplitsArg) GetStartToken() string {
	if m != nil && m.StartToken != nil {
		return *m.StartToken
	}
	return ""
}

func (m *CassandraDescribeSplitsArg) GetEndToken() string {
	if m != nil && m.EndToken != nil {
		return *m.EndToken
	}
	return ""
}

func (m *CassandraDescribeSplitsArg) GetKeysPerSplit() int32 {
	if m != nil && m.KeysPerSplit != nil {
		return *m.KeysPerSplit
	}
	return 0
}

type CassandraDescribeSplitsRet struct {
	Splits               []string `protobuf:"bytes,1,rep,name=splits" json:"splits,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeSplitsRet) Reset()         { *m = CassandraDescribeSplitsRet{} }
func (m *CassandraDescribeSplitsRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeSplitsRet) ProtoMessage()    {}
func (*CassandraDescribeSplitsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{74}
}

func (m *CassandraDescribeSplitsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeSplitsRet.Unmarshal(m, b)
}
func (m *CassandraDescribeSplitsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeSplitsRet.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeSplitsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeSplitsRet.Merge(m, src)
}
func (m *CassandraDescribeSplitsRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeSplitsRet.Size(m)
}
func (m *CassandraDescribeSplitsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeSplitsRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeSplitsRet proto.InternalMessageInfo

func (m *CassandraDescribeSplitsRet) GetSplits() []string {
	if m != nil {
		return m.Splits
	}
	return nil
}

type CassandraSystemAddColumnFamilyArg struct {
	CfDef                *CassandraCfDef `protobuf:"bytes,1,req,name=cf_def,json=cfDef" json:"cf_def,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CassandraSystemAddColumnFamilyArg) Reset()         { *m = CassandraSystemAddColumnFamilyArg{} }
func (m *CassandraSystemAddColumnFamilyArg) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemAddColumnFamilyArg) ProtoMessage()    {}
func (*CassandraSystemAddColumnFamilyArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{75}
}

func (m *CassandraSystemAddColumnFamilyArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemAddColumnFamilyArg.Unmarshal(m, b)
}
func (m *CassandraSystemAddColumnFamilyArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemAddColumnFamilyArg.Marshal(b, m, deterministic)
}
func (m *CassandraSystemAddColumnFamilyArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemAddColumnFamilyArg.Merge(m, src)
}
func (m *CassandraSystemAddColumnFamilyArg) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemAddColumnFamilyArg.Size(m)
}
func (m *CassandraSystemAddColumnFamilyArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemAddColumnFamilyArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemAddColumnFamilyArg proto.InternalMessageInfo

func (m *CassandraSystemAddColumnFamilyArg) GetCfDef() *CassandraCfDef {
	if m != nil {
		return m.CfDef
	}
	return nil
}

type CassandraSystemAddColumnFamilyRet struct {
	Result               *string  `protobuf:"bytes,1,req,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSystemAddColumnFamilyRet) Reset()         { *m = CassandraSystemAddColumnFamilyRet{} }
func (m *CassandraSystemAddColumnFamilyRet) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemAddColumnFamilyRet) ProtoMessage()    {}
func (*CassandraSystemAddColumnFamilyRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{76}
}

func (m *CassandraSystemAddColumnFamilyRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemAddColumnFamilyRet.Unmarshal(m, b)
}
func (m *CassandraSystemAddColumnFamilyRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemAddColumnFamilyRet.Marshal(b, m, deterministic)
}
func (m *CassandraSystemAddColumnFamilyRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemAddColumnFamilyRet.Merge(m, src)
}
func (m *CassandraSystemAddColumnFamilyRet) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemAddColumnFamilyRet.Size(m)
}
func (m *CassandraSystemAddColumnFamilyRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemAddColumnFamilyRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemAddColumnFamilyRet proto.InternalMessageInfo

func (m *CassandraSystemAddColumnFamilyRet) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

type CassandraSystemDropColumnFamilyArg struct {
	ColumnFamily         *string  `protobuf:"bytes,1,req,name=column_family,json=columnFamily" json:"column_family,omitempty"`
	Keyspace             *string  `protobuf:"bytes,2,req,name=keyspace" json:"keyspace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSystemDropColumnFamilyArg) Reset()         { *m = CassandraSystemDropColumnFamilyArg{} }
func (m *CassandraSystemDropColumnFamilyArg) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemDropColumnFamilyArg) ProtoMessage()    {}
func (*CassandraSystemDropColumnFamilyArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{77}
}

func (m *CassandraSystemDropColumnFamilyArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemDropColumnFamilyArg.Unmarshal(m, b)
}
func (m *CassandraSystemDropColumnFamilyArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemDropColumnFamilyArg.Marshal(b, m, deterministic)
}
func (m *CassandraSystemDropColumnFamilyArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemDropColumnFamilyArg.Merge(m, src)
}
func (m *CassandraSystemDropColumnFamilyArg) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemDropColumnFamilyArg.Size(m)
}
func (m *CassandraSystemDropColumnFamilyArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemDropColumnFamilyArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemDropColumnFamilyArg proto.InternalMessageInfo

func (m *CassandraSystemDropColumnFamilyArg) GetColumnFamily() string {
	if m != nil && m.ColumnFamily != nil {
		return *m.ColumnFamily
	}
	return ""
}

func (m *CassandraSystemDropColumnFamilyArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

type CassandraSystemDropColumnFamilyRet struct {
	Result               *string  `protobuf:"bytes,1,req,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSystemDropColumnFamilyRet) Reset()         { *m = CassandraSystemDropColumnFamilyRet{} }
func (m *CassandraSystemDropColumnFamilyRet) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemDropColumnFamilyRet) ProtoMessage()    {}
func (*CassandraSystemDropColumnFamilyRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{78}
}

func (m *CassandraSystemDropColumnFamilyRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemDropColumnFamilyRet.Unmarshal(m, b)
}
func (m *CassandraSystemDropColumnFamilyRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemDropColumnFamilyRet.Marshal(b, m, deterministic)
}
func (m *CassandraSystemDropColumnFamilyRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemDropColumnFamilyRet.Merge(m, src)
}
func (m *CassandraSystemDropColumnFamilyRet) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemDropColumnFamilyRet.Size(m)
}
func (m *CassandraSystemDropColumnFamilyRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemDropColumnFamilyRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemDropColumnFamilyRet proto.InternalMessageInfo

func (m *CassandraSystemDropColumnFamilyRet) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

type CassandraSystemRenameColumnFamilyArg struct {
	OldName              *string  `protobuf:"bytes,1,req,name=old_name,json=oldName" json:"old_name,omitempty"`
	NewName              *string  `protobuf:"bytes,2,req,name=new_name,json=newName" json:"new_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSystemRenameColumnFamilyArg) Reset()         { *m = CassandraSystemRenameColumnFamilyArg{} }
func (m *CassandraSystemRenameColumnFamilyArg) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemRenameColumnFamilyArg) ProtoMessage()    {}
func (*CassandraSystemRenameColumnFamilyArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{79}
}

func (m *CassandraSystemRenameColumnFamilyArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemRenameColumnFamilyArg.Unmarshal(m, b)
}
func (m *CassandraSystemRenameColumnFamilyArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemRenameColumnFamilyArg.Marshal(b, m, deterministic)
}
func (m *CassandraSystemRenameColumnFamilyArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemRenameColumnFamilyArg.Merge(m, src)
}
func (m *CassandraSystemRenameColumnFamilyArg) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemRenameColumnFamilyArg.Size(m)
}
func (m *CassandraSystemRenameColumnFamilyArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemRenameColumnFamilyArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemRenameColumnFamilyArg proto.InternalMessageInfo

func (m *CassandraSystemRenameColumnFamilyArg) GetOldName() string {
	if m != nil && m.OldName != nil {
		return *m.OldName
	}
	return ""
}

func (m *CassandraSystemRenameColumnFamilyArg) GetNewName() string {
	if m != nil && m.NewName != nil {
		return *m.NewName
	}
	return ""
}

type CassandraSystemRenameColumnFamilyRet struct {
	Result               *string  `protobuf:"bytes,1,req,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSystemRenameColumnFamilyRet) Reset()         { *m = CassandraSystemRenameColumnFamilyRet{} }
func (m *CassandraSystemRenameColumnFamilyRet) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemRenameColumnFamilyRet) ProtoMessage()    {}
func (*CassandraSystemRenameColumnFamilyRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{80}
}

func (m *CassandraSystemRenameColumnFamilyRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemRenameColumnFamilyRet.Unmarshal(m, b)
}
func (m *CassandraSystemRenameColumnFamilyRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemRenameColumnFamilyRet.Marshal(b, m, deterministic)
}
func (m *CassandraSystemRenameColumnFamilyRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemRenameColumnFamilyRet.Merge(m, src)
}
func (m *CassandraSystemRenameColumnFamilyRet) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemRenameColumnFamilyRet.Size(m)
}
func (m *CassandraSystemRenameColumnFamilyRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemRenameColumnFamilyRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemRenameColumnFamilyRet proto.InternalMessageInfo

func (m *CassandraSystemRenameColumnFamilyRet) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

type CassandraSystemAddKeyspaceArg struct {
	KsDef                *CassandraKsDef `protobuf:"bytes,1,req,name=ks_def,json=ksDef" json:"ks_def,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CassandraSystemAddKeyspaceArg) Reset()         { *m = CassandraSystemAddKeyspaceArg{} }
func (m *CassandraSystemAddKeyspaceArg) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemAddKeyspaceArg) ProtoMessage()    {}
func (*CassandraSystemAddKeyspaceArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{81}
}

func (m *CassandraSystemAddKeyspaceArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemAddKeyspaceArg.Unmarshal(m, b)
}
func (m *CassandraSystemAddKeyspaceArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemAddKeyspaceArg.Marshal(b, m, deterministic)
}
func (m *CassandraSystemAddKeyspaceArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemAddKeyspaceArg.Merge(m, src)
}
func (m *CassandraSystemAddKeyspaceArg) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemAddKeyspaceArg.Size(m)
}
func (m *CassandraSystemAddKeyspaceArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemAddKeyspaceArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemAddKeyspaceArg proto.InternalMessageInfo

func (m *CassandraSystemAddKeyspaceArg) GetKsDef() *CassandraKsDef {
	if m != nil {
		return m.KsDef
	}
	return nil
}

type CassandraSystemAddKeyspaceRet struct {
	Result               *string  `protobuf:"bytes,1,req,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSystemAddKeyspaceRet) Reset()         { *m = CassandraSystemAddKeyspaceRet{} }
func (m *CassandraSystemAddKeyspaceRet) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemAddKeyspaceRet) ProtoMessage()    {}
func (*CassandraSystemAddKeyspaceRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{82}
}

func (m *CassandraSystemAddKeyspaceRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemAddKeyspaceRet.Unmarshal(m, b)
}
func (m *CassandraSystemAddKeyspaceRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemAddKeyspaceRet.Marshal(b, m, deterministic)
}
func (m *CassandraSystemAddKeyspaceRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemAddKeyspaceRet.Merge(m, src)
}
func (m *CassandraSystemAddKeyspaceRet) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemAddKeyspaceRet.Size(m)
}
func (m *CassandraSystemAddKeyspaceRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemAddKeyspaceRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemAddKeyspaceRet proto.InternalMessageInfo

func (m *CassandraSystemAddKeyspaceRet) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

type CassandraSystemDropKeyspaceArg struct {
	Keyspace             *string  `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSystemDropKeyspaceArg) Reset()         { *m = CassandraSystemDropKeyspaceArg{} }
func (m *CassandraSystemDropKeyspaceArg) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemDropKeyspaceArg) ProtoMessage()    {}
func (*CassandraSystemDropKeyspaceArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{83}
}

func (m *CassandraSystemDropKeyspaceArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemDropKeyspaceArg.Unmarshal(m, b)
}
func (m *CassandraSystemDropKeyspaceArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemDropKeyspaceArg.Marshal(b, m, deterministic)
}
func (m *CassandraSystemDropKeyspaceArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemDropKeyspaceArg.Merge(m, src)
}
func (m *CassandraSystemDropKeyspaceArg) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemDropKeyspaceArg.Size(m)
}
func (m *CassandraSystemDropKeyspaceArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemDropKeyspaceArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemDropKeyspaceArg proto.InternalMessageInfo

func (m *CassandraSystemDropKeyspaceArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

type CassandraSystemDropKeyspaceRet struct {
	Result               *string  `protobuf:"bytes,1,req,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSystemDropKeyspaceRet) Reset()         { *m = CassandraSystemDropKeyspaceRet{} }
func (m *CassandraSystemDropKeyspaceRet) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemDropKeyspaceRet) ProtoMessage()    {}
func (*CassandraSystemDropKeyspaceRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{84}
}

func (m *CassandraSystemDropKeyspaceRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemDropKeyspaceRet.Unmarshal(m, b)
}
func (m *CassandraSystemDropKeyspaceRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemDropKeyspaceRet.Marshal(b, m, deterministic)
}
func (m *CassandraSystemDropKeyspaceRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemDropKeyspaceRet.Merge(m, src)
}
func (m *CassandraSystemDropKeyspaceRet) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemDropKeyspaceRet.Size(m)
}
func (m *CassandraSystemDropKeyspaceRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemDropKeyspaceRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemDropKeyspaceRet proto.InternalMessageInfo

func (m *CassandraSystemDropKeyspaceRet) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

type CassandraSystemUpdateKeyspaceArg struct {
	KsDef                *CassandraKsDef `protobuf:"bytes,1,req,name=ks_def,json=ksDef" json:"ks_def,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CassandraSystemUpdateKeyspaceArg) Reset()         { *m = CassandraSystemUpdateKeyspaceArg{} }
func (m *CassandraSystemUpdateKeyspaceArg) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemUpdateKeyspaceArg) ProtoMessage()    {}
func (*CassandraSystemUpdateKeyspaceArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{85}
}

func (m *CassandraSystemUpdateKeyspaceArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemUpdateKeyspaceArg.Unmarshal(m, b)
}
func (m *CassandraSystemUpdateKeyspaceArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemUpdateKeyspaceArg.Marshal(b, m, deterministic)
}
func (m *CassandraSystemUpdateKeyspaceArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemUpdateKeyspaceArg.Merge(m, src)
}
func (m *CassandraSystemUpdateKeyspaceArg) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemUpdateKeyspaceArg.Size(m)
}
func (m *CassandraSystemUpdateKeyspaceArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemUpdateKeyspaceArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemUpdateKeyspaceArg proto.InternalMessageInfo

func (m *CassandraSystemUpdateKeyspaceArg) GetKsDef() *CassandraKsDef {
	if m != nil {
		return m.KsDef
	}
	return nil
}

type CassandraSystemUpdateKeyspaceRet struct {
	Result               *string  `protobuf:"bytes,1,req,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSystemUpdateKeyspaceRet) Reset()         { *m = CassandraSystemUpdateKeyspaceRet{} }
func (m *CassandraSystemUpdateKeyspaceRet) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemUpdateKeyspaceRet) ProtoMessage()    {}
func (*CassandraSystemUpdateKeyspaceRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{86}
}

func (m *CassandraSystemUpdateKeyspaceRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemUpdateKeyspaceRet.Unmarshal(m, b)
}
func (m *CassandraSystemUpdateKeyspaceRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemUpdateKeyspaceRet.Marshal(b, m, deterministic)
}
func (m *CassandraSystemUpdateKeyspaceRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemUpdateKeyspaceRet.Merge(m, src)
}
func (m *CassandraSystemUpdateKeyspaceRet) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemUpdateKeyspaceRet.Size(m)
}
func (m *CassandraSystemUpdateKeyspaceRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemUpdateKeyspaceRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemUpdateKeyspaceRet proto.InternalMessageInfo

func (m *CassandraSystemUpdateKeyspaceRet) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

type CassandraSystemUpdateColumnFamilyArg struct {
	CfDef                *CassandraCfDef `protobuf:"bytes,1,req,name=cf_def,json=cfDef" json:"cf_def,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CassandraSystemUpdateColumnFamilyArg) Reset()         { *m = CassandraSystemUpdateColumnFamilyArg{} }
func (m *CassandraSystemUpdateColumnFamilyArg) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemUpdateColumnFamilyArg) ProtoMessage()    {}
func (*CassandraSystemUpdateColumnFamilyArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{87}
}

func (m *CassandraSystemUpdateColumnFamilyArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemUpdateColumnFamilyArg.Unmarshal(m, b)
}
func (m *CassandraSystemUpdateColumnFamilyArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemUpdateColumnFamilyArg.Marshal(b, m, deterministic)
}
func (m *CassandraSystemUpdateColumnFamilyArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemUpdateColumnFamilyArg.Merge(m, src)
}
func (m *CassandraSystemUpdateColumnFamilyArg) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemUpdateColumnFamilyArg.Size(m)
}
func (m *CassandraSystemUpdateColumnFamilyArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemUpdateColumnFamilyArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemUpdateColumnFamilyArg proto.InternalMessageInfo

func (m *CassandraSystemUpdateColumnFamilyArg) GetCfDef() *CassandraCfDef {
	if m != nil {
		return m.CfDef
	}
	return nil
}

type CassandraSystemUpdateColumnFamilyRet struct {
	Result               *string  `protobuf:"bytes,1,req,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSystemUpdateColumnFamilyRet) Reset()         { *m = CassandraSystemUpdateColumnFamilyRet{} }
func (m *CassandraSystemUpdateColumnFamilyRet) String() string { return proto.CompactTextString(m) }
func (*CassandraSystemUpdateColumnFamilyRet) ProtoMessage()    {}
func (*CassandraSystemUpdateColumnFamilyRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{88}
}

func (m *CassandraSystemUpdateColumnFamilyRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSystemUpdateColumnFamilyRet.Unmarshal(m, b)
}
func (m *CassandraSystemUpdateColumnFamilyRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSystemUpdateColumnFamilyRet.Marshal(b, m, deterministic)
}
func (m *CassandraSystemUpdateColumnFamilyRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSystemUpdateColumnFamilyRet.Merge(m, src)
}
func (m *CassandraSystemUpdateColumnFamilyRet) XXX_Size() int {
	return xxx_messageInfo_CassandraSystemUpdateColumnFamilyRet.Size(m)
}
func (m *CassandraSystemUpdateColumnFamilyRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSystemUpdateColumnFamilyRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSystemUpdateColumnFamilyRet proto.InternalMessageInfo

func (m *CassandraSystemUpdateColumnFamilyRet) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

type CassandraPauseState struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraPauseState) Reset()         { *m = CassandraPauseState{} }
func (m *CassandraPauseState) String() string { return proto.CompactTextString(m) }
func (*CassandraPauseState) ProtoMessage()    {}
func (*CassandraPauseState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{89}
}

func (m *CassandraPauseState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraPauseState.Unmarshal(m, b)
}
func (m *CassandraPauseState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraPauseState.Marshal(b, m, deterministic)
}
func (m *CassandraPauseState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraPauseState.Merge(m, src)
}
func (m *CassandraPauseState) XXX_Size() int {
	return xxx_messageInfo_CassandraPauseState.Size(m)
}
func (m *CassandraPauseState) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraPauseState.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraPauseState proto.InternalMessageInfo

type CassandraPauseCassandraArg struct {
	State                *CassandraPauseState_Type `protobuf:"varint,1,req,name=state,enum=nutanix.cassandra.CassandraPauseState_Type" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CassandraPauseCassandraArg) Reset()         { *m = CassandraPauseCassandraArg{} }
func (m *CassandraPauseCassandraArg) String() string { return proto.CompactTextString(m) }
func (*CassandraPauseCassandraArg) ProtoMessage()    {}
func (*CassandraPauseCassandraArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{90}
}

func (m *CassandraPauseCassandraArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraPauseCassandraArg.Unmarshal(m, b)
}
func (m *CassandraPauseCassandraArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraPauseCassandraArg.Marshal(b, m, deterministic)
}
func (m *CassandraPauseCassandraArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraPauseCassandraArg.Merge(m, src)
}
func (m *CassandraPauseCassandraArg) XXX_Size() int {
	return xxx_messageInfo_CassandraPauseCassandraArg.Size(m)
}
func (m *CassandraPauseCassandraArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraPauseCassandraArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraPauseCassandraArg proto.InternalMessageInfo

func (m *CassandraPauseCassandraArg) GetState() CassandraPauseState_Type {
	if m != nil && m.State != nil {
		return *m.State
	}
	return CassandraPauseState_kNormal
}

type CassandraPauseCassandraRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraPauseCassandraRet) Reset()         { *m = CassandraPauseCassandraRet{} }
func (m *CassandraPauseCassandraRet) String() string { return proto.CompactTextString(m) }
func (*CassandraPauseCassandraRet) ProtoMessage()    {}
func (*CassandraPauseCassandraRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{91}
}

func (m *CassandraPauseCassandraRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraPauseCassandraRet.Unmarshal(m, b)
}
func (m *CassandraPauseCassandraRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraPauseCassandraRet.Marshal(b, m, deterministic)
}
func (m *CassandraPauseCassandraRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraPauseCassandraRet.Merge(m, src)
}
func (m *CassandraPauseCassandraRet) XXX_Size() int {
	return xxx_messageInfo_CassandraPauseCassandraRet.Size(m)
}
func (m *CassandraPauseCassandraRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraPauseCassandraRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraPauseCassandraRet proto.InternalMessageInfo

// If node_ip is not set, we get the limbo state of local cassandra server.
type CassandraGetLimboStateArg struct {
	NodeIp               *string  `protobuf:"bytes,1,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	CassandraToken       *string  `protobuf:"bytes,2,opt,name=cassandra_token,json=cassandraToken" json:"cassandra_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraGetLimboStateArg) Reset()         { *m = CassandraGetLimboStateArg{} }
func (m *CassandraGetLimboStateArg) String() string { return proto.CompactTextString(m) }
func (*CassandraGetLimboStateArg) ProtoMessage()    {}
func (*CassandraGetLimboStateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{92}
}

func (m *CassandraGetLimboStateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetLimboStateArg.Unmarshal(m, b)
}
func (m *CassandraGetLimboStateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetLimboStateArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetLimboStateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetLimboStateArg.Merge(m, src)
}
func (m *CassandraGetLimboStateArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetLimboStateArg.Size(m)
}
func (m *CassandraGetLimboStateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetLimboStateArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetLimboStateArg proto.InternalMessageInfo

func (m *CassandraGetLimboStateArg) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *CassandraGetLimboStateArg) GetCassandraToken() string {
	if m != nil && m.CassandraToken != nil {
		return *m.CassandraToken
	}
	return ""
}

// Information about a node's state in Cassandra.
type CassandraGetLimboStateRet struct {
	// Current Cassandra state for the node,
	CurrentState *CassandraLimboStateLevel_Type `protobuf:"varint,1,req,name=current_state,json=currentState,enum=nutanix.cassandra.CassandraLimboStateLevel_Type" json:"current_state,omitempty"`
	// Cassandra token for the node.
	CassandraNodeToken *string `protobuf:"bytes,2,opt,name=cassandra_node_token,json=cassandraNodeToken" json:"cassandra_node_token,omitempty"`
	// 'current_state_ack_recvd_from_all_nodes' is true when all nodes have
	// acknowledged the 'current_state' for the node.
	CurrentStateAckRecvdFromAllNodes *bool `protobuf:"varint,3,opt,name=current_state_ack_recvd_from_all_nodes,json=currentStateAckRecvdFromAllNodes,def=0" json:"current_state_ack_recvd_from_all_nodes,omitempty"`
	// Cassandra's new state on the node (state change is still in transition).
	TransitioningState *CassandraLimboStateLevel_Type `protobuf:"varint,4,opt,name=transitioning_state,json=transitioningState,enum=nutanix.cassandra.CassandraLimboStateLevel_Type" json:"transitioning_state,omitempty"`
	// Set of nodes (ip addresses) that are yet to acknowledge the node's new
	// state.
	NodesYetToAckTransitionState []string `protobuf:"bytes,5,rep,name=nodes_yet_to_ack_transition_state,json=nodesYetToAckTransitionState" json:"nodes_yet_to_ack_transition_state,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *CassandraGetLimboStateRet) Reset()         { *m = CassandraGetLimboStateRet{} }
func (m *CassandraGetLimboStateRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetLimboStateRet) ProtoMessage()    {}
func (*CassandraGetLimboStateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{93}
}

func (m *CassandraGetLimboStateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetLimboStateRet.Unmarshal(m, b)
}
func (m *CassandraGetLimboStateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetLimboStateRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetLimboStateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetLimboStateRet.Merge(m, src)
}
func (m *CassandraGetLimboStateRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetLimboStateRet.Size(m)
}
func (m *CassandraGetLimboStateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetLimboStateRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetLimboStateRet proto.InternalMessageInfo

const Default_CassandraGetLimboStateRet_CurrentStateAckRecvdFromAllNodes bool = false

func (m *CassandraGetLimboStateRet) GetCurrentState() CassandraLimboStateLevel_Type {
	if m != nil && m.CurrentState != nil {
		return *m.CurrentState
	}
	return CassandraLimboStateLevel_kPreLimbo
}

func (m *CassandraGetLimboStateRet) GetCassandraNodeToken() string {
	if m != nil && m.CassandraNodeToken != nil {
		return *m.CassandraNodeToken
	}
	return ""
}

func (m *CassandraGetLimboStateRet) GetCurrentStateAckRecvdFromAllNodes() bool {
	if m != nil && m.CurrentStateAckRecvdFromAllNodes != nil {
		return *m.CurrentStateAckRecvdFromAllNodes
	}
	return Default_CassandraGetLimboStateRet_CurrentStateAckRecvdFromAllNodes
}

func (m *CassandraGetLimboStateRet) GetTransitioningState() CassandraLimboStateLevel_Type {
	if m != nil && m.TransitioningState != nil {
		return *m.TransitioningState
	}
	return CassandraLimboStateLevel_kPreLimbo
}

func (m *CassandraGetLimboStateRet) GetNodesYetToAckTransitionState() []string {
	if m != nil {
		return m.NodesYetToAckTransitionState
	}
	return nil
}

type CassandraChangeLimboStateArg struct {
	Level                       *CassandraLimboStateLevel_Type `protobuf:"varint,1,req,name=level,enum=nutanix.cassandra.CassandraLimboStateLevel_Type" json:"level,omitempty"`
	NodeIp                      *string                        `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	IpsNodesToBeInformed        []string                       `protobuf:"bytes,3,rep,name=ips_nodes_to_be_informed,json=ipsNodesToBeInformed" json:"ips_nodes_to_be_informed,omitempty"`
	CassandraToken              *string                        `protobuf:"bytes,4,opt,name=cassandra_token,json=cassandraToken" json:"cassandra_token,omitempty"`
	NotifyNodesAboutStateChange *bool                          `protobuf:"varint,5,opt,name=notify_nodes_about_state_change,json=notifyNodesAboutStateChange,def=1" json:"notify_nodes_about_state_change,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}                       `json:"-"`
	XXX_unrecognized            []byte                         `json:"-"`
	XXX_sizecache               int32                          `json:"-"`
}

func (m *CassandraChangeLimboStateArg) Reset()         { *m = CassandraChangeLimboStateArg{} }
func (m *CassandraChangeLimboStateArg) String() string { return proto.CompactTextString(m) }
func (*CassandraChangeLimboStateArg) ProtoMessage()    {}
func (*CassandraChangeLimboStateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{94}
}

func (m *CassandraChangeLimboStateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraChangeLimboStateArg.Unmarshal(m, b)
}
func (m *CassandraChangeLimboStateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraChangeLimboStateArg.Marshal(b, m, deterministic)
}
func (m *CassandraChangeLimboStateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraChangeLimboStateArg.Merge(m, src)
}
func (m *CassandraChangeLimboStateArg) XXX_Size() int {
	return xxx_messageInfo_CassandraChangeLimboStateArg.Size(m)
}
func (m *CassandraChangeLimboStateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraChangeLimboStateArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraChangeLimboStateArg proto.InternalMessageInfo

const Default_CassandraChangeLimboStateArg_NotifyNodesAboutStateChange bool = true

func (m *CassandraChangeLimboStateArg) GetLevel() CassandraLimboStateLevel_Type {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return CassandraLimboStateLevel_kPreLimbo
}

func (m *CassandraChangeLimboStateArg) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *CassandraChangeLimboStateArg) GetIpsNodesToBeInformed() []string {
	if m != nil {
		return m.IpsNodesToBeInformed
	}
	return nil
}

func (m *CassandraChangeLimboStateArg) GetCassandraToken() string {
	if m != nil && m.CassandraToken != nil {
		return *m.CassandraToken
	}
	return ""
}

func (m *CassandraChangeLimboStateArg) GetNotifyNodesAboutStateChange() bool {
	if m != nil && m.NotifyNodesAboutStateChange != nil {
		return *m.NotifyNodesAboutStateChange
	}
	return Default_CassandraChangeLimboStateArg_NotifyNodesAboutStateChange
}

type CassandraChangeLimboStateRet struct {
	Error                *CassandraError_Type `protobuf:"varint,1,req,name=error,enum=nutanix.cassandra.CassandraError_Type" json:"error,omitempty"`
	ErrorString          *string              `protobuf:"bytes,2,opt,name=error_string,json=errorString" json:"error_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CassandraChangeLimboStateRet) Reset()         { *m = CassandraChangeLimboStateRet{} }
func (m *CassandraChangeLimboStateRet) String() string { return proto.CompactTextString(m) }
func (*CassandraChangeLimboStateRet) ProtoMessage()    {}
func (*CassandraChangeLimboStateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{95}
}

func (m *CassandraChangeLimboStateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraChangeLimboStateRet.Unmarshal(m, b)
}
func (m *CassandraChangeLimboStateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraChangeLimboStateRet.Marshal(b, m, deterministic)
}
func (m *CassandraChangeLimboStateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraChangeLimboStateRet.Merge(m, src)
}
func (m *CassandraChangeLimboStateRet) XXX_Size() int {
	return xxx_messageInfo_CassandraChangeLimboStateRet.Size(m)
}
func (m *CassandraChangeLimboStateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraChangeLimboStateRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraChangeLimboStateRet proto.InternalMessageInfo

func (m *CassandraChangeLimboStateRet) GetError() CassandraError_Type {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return CassandraError_kNoError
}

func (m *CassandraChangeLimboStateRet) GetErrorString() string {
	if m != nil && m.ErrorString != nil {
		return *m.ErrorString
	}
	return ""
}

type CassandraDeleteKeyRangeFromNodeArg struct {
	Keyspace             *string            `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	ColumnFamily         *string            `protobuf:"bytes,2,req,name=column_family,json=columnFamily" json:"column_family,omitempty"`
	Range                *CassandraKeyRange `protobuf:"bytes,3,req,name=range" json:"range,omitempty"`
	Clock                *CassandraClock    `protobuf:"bytes,4,req,name=clock" json:"clock,omitempty"`
	Token                *string            `protobuf:"bytes,5,req,name=token" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CassandraDeleteKeyRangeFromNodeArg) Reset()         { *m = CassandraDeleteKeyRangeFromNodeArg{} }
func (m *CassandraDeleteKeyRangeFromNodeArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDeleteKeyRangeFromNodeArg) ProtoMessage()    {}
func (*CassandraDeleteKeyRangeFromNodeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{96}
}

func (m *CassandraDeleteKeyRangeFromNodeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDeleteKeyRangeFromNodeArg.Unmarshal(m, b)
}
func (m *CassandraDeleteKeyRangeFromNodeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDeleteKeyRangeFromNodeArg.Marshal(b, m, deterministic)
}
func (m *CassandraDeleteKeyRangeFromNodeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDeleteKeyRangeFromNodeArg.Merge(m, src)
}
func (m *CassandraDeleteKeyRangeFromNodeArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDeleteKeyRangeFromNodeArg.Size(m)
}
func (m *CassandraDeleteKeyRangeFromNodeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDeleteKeyRangeFromNodeArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDeleteKeyRangeFromNodeArg proto.InternalMessageInfo

func (m *CassandraDeleteKeyRangeFromNodeArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraDeleteKeyRangeFromNodeArg) GetColumnFamily() string {
	if m != nil && m.ColumnFamily != nil {
		return *m.ColumnFamily
	}
	return ""
}

func (m *CassandraDeleteKeyRangeFromNodeArg) GetRange() *CassandraKeyRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *CassandraDeleteKeyRangeFromNodeArg) GetClock() *CassandraClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

func (m *CassandraDeleteKeyRangeFromNodeArg) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type CassandraDeleteKeyRangeFromNodeRet struct {
	TotalRowsDeleted     *int32   `protobuf:"varint,1,req,name=total_rows_deleted,json=totalRowsDeleted" json:"total_rows_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDeleteKeyRangeFromNodeRet) Reset()         { *m = CassandraDeleteKeyRangeFromNodeRet{} }
func (m *CassandraDeleteKeyRangeFromNodeRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDeleteKeyRangeFromNodeRet) ProtoMessage()    {}
func (*CassandraDeleteKeyRangeFromNodeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{97}
}

func (m *CassandraDeleteKeyRangeFromNodeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDeleteKeyRangeFromNodeRet.Unmarshal(m, b)
}
func (m *CassandraDeleteKeyRangeFromNodeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDeleteKeyRangeFromNodeRet.Marshal(b, m, deterministic)
}
func (m *CassandraDeleteKeyRangeFromNodeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDeleteKeyRangeFromNodeRet.Merge(m, src)
}
func (m *CassandraDeleteKeyRangeFromNodeRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDeleteKeyRangeFromNodeRet.Size(m)
}
func (m *CassandraDeleteKeyRangeFromNodeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDeleteKeyRangeFromNodeRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDeleteKeyRangeFromNodeRet proto.InternalMessageInfo

func (m *CassandraDeleteKeyRangeFromNodeRet) GetTotalRowsDeleted() int32 {
	if m != nil && m.TotalRowsDeleted != nil {
		return *m.TotalRowsDeleted
	}
	return 0
}

type CassandraWriteToNodeArg struct {
	Mutations            *CassandraBatchMutateArg `protobuf:"bytes,1,req,name=mutations" json:"mutations,omitempty"`
	NodeIp               *string                  `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CassandraWriteToNodeArg) Reset()         { *m = CassandraWriteToNodeArg{} }
func (m *CassandraWriteToNodeArg) String() string { return proto.CompactTextString(m) }
func (*CassandraWriteToNodeArg) ProtoMessage()    {}
func (*CassandraWriteToNodeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{98}
}

func (m *CassandraWriteToNodeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraWriteToNodeArg.Unmarshal(m, b)
}
func (m *CassandraWriteToNodeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraWriteToNodeArg.Marshal(b, m, deterministic)
}
func (m *CassandraWriteToNodeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraWriteToNodeArg.Merge(m, src)
}
func (m *CassandraWriteToNodeArg) XXX_Size() int {
	return xxx_messageInfo_CassandraWriteToNodeArg.Size(m)
}
func (m *CassandraWriteToNodeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraWriteToNodeArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraWriteToNodeArg proto.InternalMessageInfo

func (m *CassandraWriteToNodeArg) GetMutations() *CassandraBatchMutateArg {
	if m != nil {
		return m.Mutations
	}
	return nil
}

func (m *CassandraWriteToNodeArg) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

type CassandraWriteToNodeRet struct {
	MutationsStatus      *CassandraBatchMutateRet `protobuf:"bytes,1,req,name=mutations_status,json=mutationsStatus" json:"mutations_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CassandraWriteToNodeRet) Reset()         { *m = CassandraWriteToNodeRet{} }
func (m *CassandraWriteToNodeRet) String() string { return proto.CompactTextString(m) }
func (*CassandraWriteToNodeRet) ProtoMessage()    {}
func (*CassandraWriteToNodeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{99}
}

func (m *CassandraWriteToNodeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraWriteToNodeRet.Unmarshal(m, b)
}
func (m *CassandraWriteToNodeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraWriteToNodeRet.Marshal(b, m, deterministic)
}
func (m *CassandraWriteToNodeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraWriteToNodeRet.Merge(m, src)
}
func (m *CassandraWriteToNodeRet) XXX_Size() int {
	return xxx_messageInfo_CassandraWriteToNodeRet.Size(m)
}
func (m *CassandraWriteToNodeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraWriteToNodeRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraWriteToNodeRet proto.InternalMessageInfo

func (m *CassandraWriteToNodeRet) GetMutationsStatus() *CassandraBatchMutateRet {
	if m != nil {
		return m.MutationsStatus
	}
	return nil
}

type CassandraReadFromNodeArg struct {
	MultigetSliceArg     *CassandraMultigetSliceArg `protobuf:"bytes,1,req,name=multiget_slice_arg,json=multigetSliceArg" json:"multiget_slice_arg,omitempty"`
	NodeIp               *string                    `protobuf:"bytes,2,req,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	UsePayloadForValues  *bool                      `protobuf:"varint,3,opt,name=use_payload_for_values,json=usePayloadForValues" json:"use_payload_for_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CassandraReadFromNodeArg) Reset()         { *m = CassandraReadFromNodeArg{} }
func (m *CassandraReadFromNodeArg) String() string { return proto.CompactTextString(m) }
func (*CassandraReadFromNodeArg) ProtoMessage()    {}
func (*CassandraReadFromNodeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{100}
}

func (m *CassandraReadFromNodeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraReadFromNodeArg.Unmarshal(m, b)
}
func (m *CassandraReadFromNodeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraReadFromNodeArg.Marshal(b, m, deterministic)
}
func (m *CassandraReadFromNodeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraReadFromNodeArg.Merge(m, src)
}
func (m *CassandraReadFromNodeArg) XXX_Size() int {
	return xxx_messageInfo_CassandraReadFromNodeArg.Size(m)
}
func (m *CassandraReadFromNodeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraReadFromNodeArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraReadFromNodeArg proto.InternalMessageInfo

func (m *CassandraReadFromNodeArg) GetMultigetSliceArg() *CassandraMultigetSliceArg {
	if m != nil {
		return m.MultigetSliceArg
	}
	return nil
}

func (m *CassandraReadFromNodeArg) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *CassandraReadFromNodeArg) GetUsePayloadForValues() bool {
	if m != nil && m.UsePayloadForValues != nil {
		return *m.UsePayloadForValues
	}
	return false
}

type CassandraReadFromNodeRet struct {
	RowList              *CassandraMultigetSliceRet `protobuf:"bytes,1,req,name=row_list,json=rowList" json:"row_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CassandraReadFromNodeRet) Reset()         { *m = CassandraReadFromNodeRet{} }
func (m *CassandraReadFromNodeRet) String() string { return proto.CompactTextString(m) }
func (*CassandraReadFromNodeRet) ProtoMessage()    {}
func (*CassandraReadFromNodeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{101}
}

func (m *CassandraReadFromNodeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraReadFromNodeRet.Unmarshal(m, b)
}
func (m *CassandraReadFromNodeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraReadFromNodeRet.Marshal(b, m, deterministic)
}
func (m *CassandraReadFromNodeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraReadFromNodeRet.Merge(m, src)
}
func (m *CassandraReadFromNodeRet) XXX_Size() int {
	return xxx_messageInfo_CassandraReadFromNodeRet.Size(m)
}
func (m *CassandraReadFromNodeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraReadFromNodeRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraReadFromNodeRet proto.InternalMessageInfo

func (m *CassandraReadFromNodeRet) GetRowList() *CassandraMultigetSliceRet {
	if m != nil {
		return m.RowList
	}
	return nil
}

type CassandraScanFromNodeArg struct {
	RangeSlicesArg       *CassandraGetRangeSlicesArg `protobuf:"bytes,1,req,name=range_slices_arg,json=rangeSlicesArg" json:"range_slices_arg,omitempty"`
	NodeIp               *string                     `protobuf:"bytes,2,req,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	UsePayloadForValues  *bool                       `protobuf:"varint,3,opt,name=use_payload_for_values,json=usePayloadForValues" json:"use_payload_for_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CassandraScanFromNodeArg) Reset()         { *m = CassandraScanFromNodeArg{} }
func (m *CassandraScanFromNodeArg) String() string { return proto.CompactTextString(m) }
func (*CassandraScanFromNodeArg) ProtoMessage()    {}
func (*CassandraScanFromNodeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{102}
}

func (m *CassandraScanFromNodeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraScanFromNodeArg.Unmarshal(m, b)
}
func (m *CassandraScanFromNodeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraScanFromNodeArg.Marshal(b, m, deterministic)
}
func (m *CassandraScanFromNodeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraScanFromNodeArg.Merge(m, src)
}
func (m *CassandraScanFromNodeArg) XXX_Size() int {
	return xxx_messageInfo_CassandraScanFromNodeArg.Size(m)
}
func (m *CassandraScanFromNodeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraScanFromNodeArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraScanFromNodeArg proto.InternalMessageInfo

func (m *CassandraScanFromNodeArg) GetRangeSlicesArg() *CassandraGetRangeSlicesArg {
	if m != nil {
		return m.RangeSlicesArg
	}
	return nil
}

func (m *CassandraScanFromNodeArg) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *CassandraScanFromNodeArg) GetUsePayloadForValues() bool {
	if m != nil && m.UsePayloadForValues != nil {
		return *m.UsePayloadForValues
	}
	return false
}

type CassandraScanFromNodeRet struct {
	RangeSlices          *CassandraGetRangeSlicesRet `protobuf:"bytes,1,req,name=range_slices,json=rangeSlices" json:"range_slices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CassandraScanFromNodeRet) Reset()         { *m = CassandraScanFromNodeRet{} }
func (m *CassandraScanFromNodeRet) String() string { return proto.CompactTextString(m) }
func (*CassandraScanFromNodeRet) ProtoMessage()    {}
func (*CassandraScanFromNodeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{103}
}

func (m *CassandraScanFromNodeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraScanFromNodeRet.Unmarshal(m, b)
}
func (m *CassandraScanFromNodeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraScanFromNodeRet.Marshal(b, m, deterministic)
}
func (m *CassandraScanFromNodeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraScanFromNodeRet.Merge(m, src)
}
func (m *CassandraScanFromNodeRet) XXX_Size() int {
	return xxx_messageInfo_CassandraScanFromNodeRet.Size(m)
}
func (m *CassandraScanFromNodeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraScanFromNodeRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraScanFromNodeRet proto.InternalMessageInfo

func (m *CassandraScanFromNodeRet) GetRangeSlices() *CassandraGetRangeSlicesRet {
	if m != nil {
		return m.RangeSlices
	}
	return nil
}

type CassandraForceMemtableFlushOnLocalNodeArg struct {
	Keyspace             *string  `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	ColumnFamilies       []string `protobuf:"bytes,2,rep,name=column_families,json=columnFamilies" json:"column_families,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraForceMemtableFlushOnLocalNodeArg) Reset() {
	*m = CassandraForceMemtableFlushOnLocalNodeArg{}
}
func (m *CassandraForceMemtableFlushOnLocalNodeArg) String() string { return proto.CompactTextString(m) }
func (*CassandraForceMemtableFlushOnLocalNodeArg) ProtoMessage()    {}
func (*CassandraForceMemtableFlushOnLocalNodeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{104}
}

func (m *CassandraForceMemtableFlushOnLocalNodeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeArg.Unmarshal(m, b)
}
func (m *CassandraForceMemtableFlushOnLocalNodeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeArg.Marshal(b, m, deterministic)
}
func (m *CassandraForceMemtableFlushOnLocalNodeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeArg.Merge(m, src)
}
func (m *CassandraForceMemtableFlushOnLocalNodeArg) XXX_Size() int {
	return xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeArg.Size(m)
}
func (m *CassandraForceMemtableFlushOnLocalNodeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeArg proto.InternalMessageInfo

func (m *CassandraForceMemtableFlushOnLocalNodeArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraForceMemtableFlushOnLocalNodeArg) GetColumnFamilies() []string {
	if m != nil {
		return m.ColumnFamilies
	}
	return nil
}

type CassandraForceMemtableFlushOnLocalNodeRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraForceMemtableFlushOnLocalNodeRet) Reset() {
	*m = CassandraForceMemtableFlushOnLocalNodeRet{}
}
func (m *CassandraForceMemtableFlushOnLocalNodeRet) String() string { return proto.CompactTextString(m) }
func (*CassandraForceMemtableFlushOnLocalNodeRet) ProtoMessage()    {}
func (*CassandraForceMemtableFlushOnLocalNodeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{105}
}

func (m *CassandraForceMemtableFlushOnLocalNodeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeRet.Unmarshal(m, b)
}
func (m *CassandraForceMemtableFlushOnLocalNodeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeRet.Marshal(b, m, deterministic)
}
func (m *CassandraForceMemtableFlushOnLocalNodeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeRet.Merge(m, src)
}
func (m *CassandraForceMemtableFlushOnLocalNodeRet) XXX_Size() int {
	return xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeRet.Size(m)
}
func (m *CassandraForceMemtableFlushOnLocalNodeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraForceMemtableFlushOnLocalNodeRet proto.InternalMessageInfo

type CassandraForceCompactionOnNodeArg struct {
	NodeIp         *string  `protobuf:"bytes,1,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	NodeToken      *string  `protobuf:"bytes,2,opt,name=node_token,json=nodeToken" json:"node_token,omitempty"`
	Keyspace       *string  `protobuf:"bytes,3,opt,name=keyspace" json:"keyspace,omitempty"`
	ColumnFamilies []string `protobuf:"bytes,4,rep,name=column_families,json=columnFamilies" json:"column_families,omitempty"`
	// Flag to indicate whether to delete the keys not
	// owned by the node as part of compaction.
	RemoveExtraneousKeys *bool `protobuf:"varint,5,opt,name=remove_extraneous_keys,json=removeExtraneousKeys,def=0" json:"remove_extraneous_keys,omitempty"`
	// The range to be compacted.
	Range *CassandraTokenRange `protobuf:"bytes,6,opt,name=range" json:"range,omitempty"`
	// If this flag is set, compaction is skipped if SSTables are already
	// sharded into 'range'.
	SkipCompactionIfSharded *bool `protobuf:"varint,7,opt,name=skip_compaction_if_sharded,json=skipCompactionIfSharded" json:"skip_compaction_if_sharded,omitempty"`
	// If this flag is set, rpc returns before compaction completion. Then
	// compaction status is obtained by 'GetForceCompactionOnNodeStatus' rpc.
	UsePollingForCompactionStatus *bool `protobuf:"varint,8,opt,name=use_polling_for_compaction_status,json=usePollingForCompactionStatus,def=0" json:"use_polling_for_compaction_status,omitempty"`
	// If this flag is set, the force compaction deserializes all columns
	// in the sstables getting compacted.
	DeserializeAllColumns *bool    `protobuf:"varint,9,opt,name=deserialize_all_columns,json=deserializeAllColumns,def=0" json:"deserialize_all_columns,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CassandraForceCompactionOnNodeArg) Reset()         { *m = CassandraForceCompactionOnNodeArg{} }
func (m *CassandraForceCompactionOnNodeArg) String() string { return proto.CompactTextString(m) }
func (*CassandraForceCompactionOnNodeArg) ProtoMessage()    {}
func (*CassandraForceCompactionOnNodeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{106}
}

func (m *CassandraForceCompactionOnNodeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraForceCompactionOnNodeArg.Unmarshal(m, b)
}
func (m *CassandraForceCompactionOnNodeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraForceCompactionOnNodeArg.Marshal(b, m, deterministic)
}
func (m *CassandraForceCompactionOnNodeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraForceCompactionOnNodeArg.Merge(m, src)
}
func (m *CassandraForceCompactionOnNodeArg) XXX_Size() int {
	return xxx_messageInfo_CassandraForceCompactionOnNodeArg.Size(m)
}
func (m *CassandraForceCompactionOnNodeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraForceCompactionOnNodeArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraForceCompactionOnNodeArg proto.InternalMessageInfo

const Default_CassandraForceCompactionOnNodeArg_RemoveExtraneousKeys bool = false
const Default_CassandraForceCompactionOnNodeArg_UsePollingForCompactionStatus bool = false
const Default_CassandraForceCompactionOnNodeArg_DeserializeAllColumns bool = false

func (m *CassandraForceCompactionOnNodeArg) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *CassandraForceCompactionOnNodeArg) GetNodeToken() string {
	if m != nil && m.NodeToken != nil {
		return *m.NodeToken
	}
	return ""
}

func (m *CassandraForceCompactionOnNodeArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraForceCompactionOnNodeArg) GetColumnFamilies() []string {
	if m != nil {
		return m.ColumnFamilies
	}
	return nil
}

func (m *CassandraForceCompactionOnNodeArg) GetRemoveExtraneousKeys() bool {
	if m != nil && m.RemoveExtraneousKeys != nil {
		return *m.RemoveExtraneousKeys
	}
	return Default_CassandraForceCompactionOnNodeArg_RemoveExtraneousKeys
}

func (m *CassandraForceCompactionOnNodeArg) GetRange() *CassandraTokenRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *CassandraForceCompactionOnNodeArg) GetSkipCompactionIfSharded() bool {
	if m != nil && m.SkipCompactionIfSharded != nil {
		return *m.SkipCompactionIfSharded
	}
	return false
}

func (m *CassandraForceCompactionOnNodeArg) GetUsePollingForCompactionStatus() bool {
	if m != nil && m.UsePollingForCompactionStatus != nil {
		return *m.UsePollingForCompactionStatus
	}
	return Default_CassandraForceCompactionOnNodeArg_UsePollingForCompactionStatus
}

func (m *CassandraForceCompactionOnNodeArg) GetDeserializeAllColumns() bool {
	if m != nil && m.DeserializeAllColumns != nil {
		return *m.DeserializeAllColumns
	}
	return Default_CassandraForceCompactionOnNodeArg_DeserializeAllColumns
}

type CassandraForceCompactionOnNodeRet struct {
	// Compaction id for the requested force compaction.
	ForceCompactionId    *string  `protobuf:"bytes,1,opt,name=force_compaction_id,json=forceCompactionId" json:"force_compaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraForceCompactionOnNodeRet) Reset()         { *m = CassandraForceCompactionOnNodeRet{} }
func (m *CassandraForceCompactionOnNodeRet) String() string { return proto.CompactTextString(m) }
func (*CassandraForceCompactionOnNodeRet) ProtoMessage()    {}
func (*CassandraForceCompactionOnNodeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{107}
}

func (m *CassandraForceCompactionOnNodeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraForceCompactionOnNodeRet.Unmarshal(m, b)
}
func (m *CassandraForceCompactionOnNodeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraForceCompactionOnNodeRet.Marshal(b, m, deterministic)
}
func (m *CassandraForceCompactionOnNodeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraForceCompactionOnNodeRet.Merge(m, src)
}
func (m *CassandraForceCompactionOnNodeRet) XXX_Size() int {
	return xxx_messageInfo_CassandraForceCompactionOnNodeRet.Size(m)
}
func (m *CassandraForceCompactionOnNodeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraForceCompactionOnNodeRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraForceCompactionOnNodeRet proto.InternalMessageInfo

func (m *CassandraForceCompactionOnNodeRet) GetForceCompactionId() string {
	if m != nil && m.ForceCompactionId != nil {
		return *m.ForceCompactionId
	}
	return ""
}

type CassandraGetForceCompactionOnNodeStatusArg struct {
	// Force compaction id for which the status is to be queried.
	ForceCompactionId    *string  `protobuf:"bytes,1,opt,name=force_compaction_id,json=forceCompactionId" json:"force_compaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraGetForceCompactionOnNodeStatusArg) Reset() {
	*m = CassandraGetForceCompactionOnNodeStatusArg{}
}
func (m *CassandraGetForceCompactionOnNodeStatusArg) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraGetForceCompactionOnNodeStatusArg) ProtoMessage() {}
func (*CassandraGetForceCompactionOnNodeStatusArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{108}
}

func (m *CassandraGetForceCompactionOnNodeStatusArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusArg.Unmarshal(m, b)
}
func (m *CassandraGetForceCompactionOnNodeStatusArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetForceCompactionOnNodeStatusArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusArg.Merge(m, src)
}
func (m *CassandraGetForceCompactionOnNodeStatusArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusArg.Size(m)
}
func (m *CassandraGetForceCompactionOnNodeStatusArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusArg proto.InternalMessageInfo

func (m *CassandraGetForceCompactionOnNodeStatusArg) GetForceCompactionId() string {
	if m != nil && m.ForceCompactionId != nil {
		return *m.ForceCompactionId
	}
	return ""
}

type CassandraGetForceCompactionOnNodeStatusRet struct {
	// Status of the queried force compaction.
	Status               *CassandraForceCompactionStatus_Type `protobuf:"varint,1,opt,name=status,enum=nutanix.cassandra.CassandraForceCompactionStatus_Type" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *CassandraGetForceCompactionOnNodeStatusRet) Reset() {
	*m = CassandraGetForceCompactionOnNodeStatusRet{}
}
func (m *CassandraGetForceCompactionOnNodeStatusRet) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraGetForceCompactionOnNodeStatusRet) ProtoMessage() {}
func (*CassandraGetForceCompactionOnNodeStatusRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{109}
}

func (m *CassandraGetForceCompactionOnNodeStatusRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusRet.Unmarshal(m, b)
}
func (m *CassandraGetForceCompactionOnNodeStatusRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetForceCompactionOnNodeStatusRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusRet.Merge(m, src)
}
func (m *CassandraGetForceCompactionOnNodeStatusRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusRet.Size(m)
}
func (m *CassandraGetForceCompactionOnNodeStatusRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetForceCompactionOnNodeStatusRet proto.InternalMessageInfo

func (m *CassandraGetForceCompactionOnNodeStatusRet) GetStatus() CassandraForceCompactionStatus_Type {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return CassandraForceCompactionStatus_kFailed
}

type CassandraBinaryLogRecordColumnAndClock struct {
	ColumnName           *string                 `protobuf:"bytes,1,opt,name=column_name,json=columnName" json:"column_name,omitempty"`
	PaxosClock           *PaxosVersionClockProto `protobuf:"bytes,2,opt,name=paxos_clock,json=paxosClock" json:"paxos_clock,omitempty"`
	ReadForColumnFailed  *bool                   `protobuf:"varint,3,opt,name=read_for_column_failed,json=readForColumnFailed" json:"read_for_column_failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CassandraBinaryLogRecordColumnAndClock) Reset() {
	*m = CassandraBinaryLogRecordColumnAndClock{}
}
func (m *CassandraBinaryLogRecordColumnAndClock) String() string { return proto.CompactTextString(m) }
func (*CassandraBinaryLogRecordColumnAndClock) ProtoMessage()    {}
func (*CassandraBinaryLogRecordColumnAndClock) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{110}
}

func (m *CassandraBinaryLogRecordColumnAndClock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraBinaryLogRecordColumnAndClock.Unmarshal(m, b)
}
func (m *CassandraBinaryLogRecordColumnAndClock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraBinaryLogRecordColumnAndClock.Marshal(b, m, deterministic)
}
func (m *CassandraBinaryLogRecordColumnAndClock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraBinaryLogRecordColumnAndClock.Merge(m, src)
}
func (m *CassandraBinaryLogRecordColumnAndClock) XXX_Size() int {
	return xxx_messageInfo_CassandraBinaryLogRecordColumnAndClock.Size(m)
}
func (m *CassandraBinaryLogRecordColumnAndClock) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraBinaryLogRecordColumnAndClock.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraBinaryLogRecordColumnAndClock proto.InternalMessageInfo

func (m *CassandraBinaryLogRecordColumnAndClock) GetColumnName() string {
	if m != nil && m.ColumnName != nil {
		return *m.ColumnName
	}
	return ""
}

func (m *CassandraBinaryLogRecordColumnAndClock) GetPaxosClock() *PaxosVersionClockProto {
	if m != nil {
		return m.PaxosClock
	}
	return nil
}

func (m *CassandraBinaryLogRecordColumnAndClock) GetReadForColumnFailed() bool {
	if m != nil && m.ReadForColumnFailed != nil {
		return *m.ReadForColumnFailed
	}
	return false
}

type CassandraBinaryLogRecordMetadataRow struct {
	// Row Id.
	RowId *string `protobuf:"bytes,1,req,name=row_id,json=rowId" json:"row_id,omitempty"`
	// Columns within a row.
	Columns []string `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	// Number of columns.
	NumColumns *int32 `protobuf:"varint,3,opt,name=num_columns,json=numColumns" json:"num_columns,omitempty"`
	// Only one of 'columns' field or the field below should be set.
	// TODO: Deprecate 'columns' field in favor of 'columns_with_clock'.
	ColumnsWithClock     []*CassandraBinaryLogRecordColumnAndClock `protobuf:"bytes,4,rep,name=columns_with_clock,json=columnsWithClock" json:"columns_with_clock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *CassandraBinaryLogRecordMetadataRow) Reset()         { *m = CassandraBinaryLogRecordMetadataRow{} }
func (m *CassandraBinaryLogRecordMetadataRow) String() string { return proto.CompactTextString(m) }
func (*CassandraBinaryLogRecordMetadataRow) ProtoMessage()    {}
func (*CassandraBinaryLogRecordMetadataRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{111}
}

func (m *CassandraBinaryLogRecordMetadataRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraBinaryLogRecordMetadataRow.Unmarshal(m, b)
}
func (m *CassandraBinaryLogRecordMetadataRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraBinaryLogRecordMetadataRow.Marshal(b, m, deterministic)
}
func (m *CassandraBinaryLogRecordMetadataRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraBinaryLogRecordMetadataRow.Merge(m, src)
}
func (m *CassandraBinaryLogRecordMetadataRow) XXX_Size() int {
	return xxx_messageInfo_CassandraBinaryLogRecordMetadataRow.Size(m)
}
func (m *CassandraBinaryLogRecordMetadataRow) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraBinaryLogRecordMetadataRow.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraBinaryLogRecordMetadataRow proto.InternalMessageInfo

func (m *CassandraBinaryLogRecordMetadataRow) GetRowId() string {
	if m != nil && m.RowId != nil {
		return *m.RowId
	}
	return ""
}

func (m *CassandraBinaryLogRecordMetadataRow) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *CassandraBinaryLogRecordMetadataRow) GetNumColumns() int32 {
	if m != nil && m.NumColumns != nil {
		return *m.NumColumns
	}
	return 0
}

func (m *CassandraBinaryLogRecordMetadataRow) GetColumnsWithClock() []*CassandraBinaryLogRecordColumnAndClock {
	if m != nil {
		return m.ColumnsWithClock
	}
	return nil
}

type CassandraBinaryLogRecordMetadataRange struct {
	// Tokens within a range.
	Token                []string `protobuf:"bytes,1,rep,name=token" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraBinaryLogRecordMetadataRange) Reset()         { *m = CassandraBinaryLogRecordMetadataRange{} }
func (m *CassandraBinaryLogRecordMetadataRange) String() string { return proto.CompactTextString(m) }
func (*CassandraBinaryLogRecordMetadataRange) ProtoMessage()    {}
func (*CassandraBinaryLogRecordMetadataRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{112}
}

func (m *CassandraBinaryLogRecordMetadataRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraBinaryLogRecordMetadataRange.Unmarshal(m, b)
}
func (m *CassandraBinaryLogRecordMetadataRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraBinaryLogRecordMetadataRange.Marshal(b, m, deterministic)
}
func (m *CassandraBinaryLogRecordMetadataRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraBinaryLogRecordMetadataRange.Merge(m, src)
}
func (m *CassandraBinaryLogRecordMetadataRange) XXX_Size() int {
	return xxx_messageInfo_CassandraBinaryLogRecordMetadataRange.Size(m)
}
func (m *CassandraBinaryLogRecordMetadataRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraBinaryLogRecordMetadataRange.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraBinaryLogRecordMetadataRange proto.InternalMessageInfo

func (m *CassandraBinaryLogRecordMetadataRange) GetToken() []string {
	if m != nil {
		return m.Token
	}
	return nil
}

// Metadata used by Cassandra for binary logging.
type CassandraBinaryLogRecordMetadata struct {
	// Descriptor.
	Desc *string `protobuf:"bytes,1,req,name=desc" json:"desc,omitempty"`
	// RPC Id.
	RpcId *int64 `protobuf:"varint,2,opt,name=rpc_id,json=rpcId" json:"rpc_id,omitempty"`
	// RPC Id as sent by the client.
	OriginalRpcId *int64 `protobuf:"varint,3,opt,name=original_rpc_id,json=originalRpcId" json:"original_rpc_id,omitempty"`
	// Paxos message type from leader to replica.
	PaxosMessageTypeFromLeader *int32 `protobuf:"varint,4,opt,name=paxos_message_type_from_leader,json=paxosMessageTypeFromLeader" json:"paxos_message_type_from_leader,omitempty"`
	// List of rows of interest.
	Rows []*CassandraBinaryLogRecordMetadataRow `protobuf:"bytes,5,rep,name=rows" json:"rows,omitempty"`
	// List of token ranges of interest.
	Ranges []*CassandraBinaryLogRecordMetadataRange `protobuf:"bytes,6,rep,name=ranges" json:"ranges,omitempty"`
	// Paxos message reply from replica to leader.
	PaxosMessageTypeToLeader *int32 `protobuf:"varint,7,opt,name=paxos_message_type_to_leader,json=paxosMessageTypeToLeader" json:"paxos_message_type_to_leader,omitempty"`
	// Paxos message recvd time in usecs.
	MessageRecvdTimeUsecs *int64 `protobuf:"varint,8,opt,name=message_recvd_time_usecs,json=messageRecvdTimeUsecs" json:"message_recvd_time_usecs,omitempty"`
	// Time PaxosReplicaWriter initiated lock acquisition for key(s) to be
	// written in nanosecs.
	LockAcquireStartTimeNanos *int64 `protobuf:"varint,9,opt,name=lock_acquire_start_time_nanos,json=lockAcquireStartTimeNanos" json:"lock_acquire_start_time_nanos,omitempty"`
	// Time PaxosReplicaWriter lock acquisition finished in nanos.
	LockAcquireEndTimeNanos *int64 `protobuf:"varint,10,opt,name=lock_acquire_end_time_nanos,json=lockAcquireEndTimeNanos" json:"lock_acquire_end_time_nanos,omitempty"`
	// IP address of source node for this RPC.
	// For paxos replica rpcs, this will be the ip addr of paxos leader.
	// For paxos leader, this will be the ip addr of client node from where the
	// read/write got generated.
	RpcSourceIpAddr *string `protobuf:"bytes,11,opt,name=rpc_source_ip_addr,json=rpcSourceIpAddr" json:"rpc_source_ip_addr,omitempty"`
	// CF name for this paxos op.
	CfName               *string  `protobuf:"bytes,12,opt,name=cf_name,json=cfName" json:"cf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraBinaryLogRecordMetadata) Reset()         { *m = CassandraBinaryLogRecordMetadata{} }
func (m *CassandraBinaryLogRecordMetadata) String() string { return proto.CompactTextString(m) }
func (*CassandraBinaryLogRecordMetadata) ProtoMessage()    {}
func (*CassandraBinaryLogRecordMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{113}
}

func (m *CassandraBinaryLogRecordMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraBinaryLogRecordMetadata.Unmarshal(m, b)
}
func (m *CassandraBinaryLogRecordMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraBinaryLogRecordMetadata.Marshal(b, m, deterministic)
}
func (m *CassandraBinaryLogRecordMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraBinaryLogRecordMetadata.Merge(m, src)
}
func (m *CassandraBinaryLogRecordMetadata) XXX_Size() int {
	return xxx_messageInfo_CassandraBinaryLogRecordMetadata.Size(m)
}
func (m *CassandraBinaryLogRecordMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraBinaryLogRecordMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraBinaryLogRecordMetadata proto.InternalMessageInfo

func (m *CassandraBinaryLogRecordMetadata) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

func (m *CassandraBinaryLogRecordMetadata) GetRpcId() int64 {
	if m != nil && m.RpcId != nil {
		return *m.RpcId
	}
	return 0
}

func (m *CassandraBinaryLogRecordMetadata) GetOriginalRpcId() int64 {
	if m != nil && m.OriginalRpcId != nil {
		return *m.OriginalRpcId
	}
	return 0
}

func (m *CassandraBinaryLogRecordMetadata) GetPaxosMessageTypeFromLeader() int32 {
	if m != nil && m.PaxosMessageTypeFromLeader != nil {
		return *m.PaxosMessageTypeFromLeader
	}
	return 0
}

func (m *CassandraBinaryLogRecordMetadata) GetRows() []*CassandraBinaryLogRecordMetadataRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *CassandraBinaryLogRecordMetadata) GetRanges() []*CassandraBinaryLogRecordMetadataRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *CassandraBinaryLogRecordMetadata) GetPaxosMessageTypeToLeader() int32 {
	if m != nil && m.PaxosMessageTypeToLeader != nil {
		return *m.PaxosMessageTypeToLeader
	}
	return 0
}

func (m *CassandraBinaryLogRecordMetadata) GetMessageRecvdTimeUsecs() int64 {
	if m != nil && m.MessageRecvdTimeUsecs != nil {
		return *m.MessageRecvdTimeUsecs
	}
	return 0
}

func (m *CassandraBinaryLogRecordMetadata) GetLockAcquireStartTimeNanos() int64 {
	if m != nil && m.LockAcquireStartTimeNanos != nil {
		return *m.LockAcquireStartTimeNanos
	}
	return 0
}

func (m *CassandraBinaryLogRecordMetadata) GetLockAcquireEndTimeNanos() int64 {
	if m != nil && m.LockAcquireEndTimeNanos != nil {
		return *m.LockAcquireEndTimeNanos
	}
	return 0
}

func (m *CassandraBinaryLogRecordMetadata) GetRpcSourceIpAddr() string {
	if m != nil && m.RpcSourceIpAddr != nil {
		return *m.RpcSourceIpAddr
	}
	return ""
}

func (m *CassandraBinaryLogRecordMetadata) GetCfName() string {
	if m != nil && m.CfName != nil {
		return *m.CfName
	}
	return ""
}

type CassandraDescribeKeyspaceSizeRet struct {
	// Current size information of a keyspace.
	KsSizeDef            *CassandraKsSizeDef `protobuf:"bytes,1,opt,name=ks_size_def,json=ksSizeDef" json:"ks_size_def,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CassandraDescribeKeyspaceSizeRet) Reset()         { *m = CassandraDescribeKeyspaceSizeRet{} }
func (m *CassandraDescribeKeyspaceSizeRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeKeyspaceSizeRet) ProtoMessage()    {}
func (*CassandraDescribeKeyspaceSizeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{114}
}

func (m *CassandraDescribeKeyspaceSizeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeKeyspaceSizeRet.Unmarshal(m, b)
}
func (m *CassandraDescribeKeyspaceSizeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeKeyspaceSizeRet.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeKeyspaceSizeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeKeyspaceSizeRet.Merge(m, src)
}
func (m *CassandraDescribeKeyspaceSizeRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeKeyspaceSizeRet.Size(m)
}
func (m *CassandraDescribeKeyspaceSizeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeKeyspaceSizeRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeKeyspaceSizeRet proto.InternalMessageInfo

func (m *CassandraDescribeKeyspaceSizeRet) GetKsSizeDef() *CassandraKsSizeDef {
	if m != nil {
		return m.KsSizeDef
	}
	return nil
}

type CassandraDescribeAllKeyspaceSizeRet struct {
	// Current size information of all keyspaces.
	AllKsSizeDef         []*CassandraKsSizeDef `protobuf:"bytes,1,rep,name=all_ks_size_def,json=allKsSizeDef" json:"all_ks_size_def,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CassandraDescribeAllKeyspaceSizeRet) Reset()         { *m = CassandraDescribeAllKeyspaceSizeRet{} }
func (m *CassandraDescribeAllKeyspaceSizeRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeAllKeyspaceSizeRet) ProtoMessage()    {}
func (*CassandraDescribeAllKeyspaceSizeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{115}
}

func (m *CassandraDescribeAllKeyspaceSizeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeAllKeyspaceSizeRet.Unmarshal(m, b)
}
func (m *CassandraDescribeAllKeyspaceSizeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeAllKeyspaceSizeRet.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeAllKeyspaceSizeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeAllKeyspaceSizeRet.Merge(m, src)
}
func (m *CassandraDescribeAllKeyspaceSizeRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeAllKeyspaceSizeRet.Size(m)
}
func (m *CassandraDescribeAllKeyspaceSizeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeAllKeyspaceSizeRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeAllKeyspaceSizeRet proto.InternalMessageInfo

func (m *CassandraDescribeAllKeyspaceSizeRet) GetAllKsSizeDef() []*CassandraKsSizeDef {
	if m != nil {
		return m.AllKsSizeDef
	}
	return nil
}

type CassandraDescribeKeyspaceSizeArg struct {
	// The keyspace name for which size information is requested.
	Keyspace             *string  `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeKeyspaceSizeArg) Reset()         { *m = CassandraDescribeKeyspaceSizeArg{} }
func (m *CassandraDescribeKeyspaceSizeArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeKeyspaceSizeArg) ProtoMessage()    {}
func (*CassandraDescribeKeyspaceSizeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{116}
}

func (m *CassandraDescribeKeyspaceSizeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeKeyspaceSizeArg.Unmarshal(m, b)
}
func (m *CassandraDescribeKeyspaceSizeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeKeyspaceSizeArg.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeKeyspaceSizeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeKeyspaceSizeArg.Merge(m, src)
}
func (m *CassandraDescribeKeyspaceSizeArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeKeyspaceSizeArg.Size(m)
}
func (m *CassandraDescribeKeyspaceSizeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeKeyspaceSizeArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeKeyspaceSizeArg proto.InternalMessageInfo

func (m *CassandraDescribeKeyspaceSizeArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

type CassandraDescribeAllKeyspaceSizeArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeAllKeyspaceSizeArg) Reset()         { *m = CassandraDescribeAllKeyspaceSizeArg{} }
func (m *CassandraDescribeAllKeyspaceSizeArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeAllKeyspaceSizeArg) ProtoMessage()    {}
func (*CassandraDescribeAllKeyspaceSizeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{117}
}

func (m *CassandraDescribeAllKeyspaceSizeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeAllKeyspaceSizeArg.Unmarshal(m, b)
}
func (m *CassandraDescribeAllKeyspaceSizeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeAllKeyspaceSizeArg.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeAllKeyspaceSizeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeAllKeyspaceSizeArg.Merge(m, src)
}
func (m *CassandraDescribeAllKeyspaceSizeArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeAllKeyspaceSizeArg.Size(m)
}
func (m *CassandraDescribeAllKeyspaceSizeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeAllKeyspaceSizeArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeAllKeyspaceSizeArg proto.InternalMessageInfo

type CassandraDescribeSizeRequirementsArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraDescribeSizeRequirementsArg) Reset()         { *m = CassandraDescribeSizeRequirementsArg{} }
func (m *CassandraDescribeSizeRequirementsArg) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeSizeRequirementsArg) ProtoMessage()    {}
func (*CassandraDescribeSizeRequirementsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{118}
}

func (m *CassandraDescribeSizeRequirementsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeSizeRequirementsArg.Unmarshal(m, b)
}
func (m *CassandraDescribeSizeRequirementsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeSizeRequirementsArg.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeSizeRequirementsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeSizeRequirementsArg.Merge(m, src)
}
func (m *CassandraDescribeSizeRequirementsArg) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeSizeRequirementsArg.Size(m)
}
func (m *CassandraDescribeSizeRequirementsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeSizeRequirementsArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeSizeRequirementsArg proto.InternalMessageInfo

type CassandraDescribeSizeRequirementsRet struct {
	// Total size consumed by all column families in the system.
	TotalColumnFamilySize *int64 `protobuf:"varint,1,opt,name=total_column_family_size,json=totalColumnFamilySize" json:"total_column_family_size,omitempty"`
	// Extra space required for compaction.
	CompactionBuffer *int64 `protobuf:"varint,2,opt,name=compaction_buffer,json=compactionBuffer" json:"compaction_buffer,omitempty"`
	// Current total size of commitlog on disk.
	TotalCommitlogSize *int64 `protobuf:"varint,3,opt,name=total_commitlog_size,json=totalCommitlogSize" json:"total_commitlog_size,omitempty"`
	// Extra space reserved for commitlog.
	CommitlogBuffer *int64 `protobuf:"varint,4,opt,name=commitlog_buffer,json=commitlogBuffer" json:"commitlog_buffer,omitempty"`
	// Space used by DRC during metadata transfer.
	DrcMetadataTransferSize *int64   `protobuf:"varint,5,opt,name=drc_metadata_transfer_size,json=drcMetadataTransferSize" json:"drc_metadata_transfer_size,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *CassandraDescribeSizeRequirementsRet) Reset()         { *m = CassandraDescribeSizeRequirementsRet{} }
func (m *CassandraDescribeSizeRequirementsRet) String() string { return proto.CompactTextString(m) }
func (*CassandraDescribeSizeRequirementsRet) ProtoMessage()    {}
func (*CassandraDescribeSizeRequirementsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{119}
}

func (m *CassandraDescribeSizeRequirementsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraDescribeSizeRequirementsRet.Unmarshal(m, b)
}
func (m *CassandraDescribeSizeRequirementsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraDescribeSizeRequirementsRet.Marshal(b, m, deterministic)
}
func (m *CassandraDescribeSizeRequirementsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraDescribeSizeRequirementsRet.Merge(m, src)
}
func (m *CassandraDescribeSizeRequirementsRet) XXX_Size() int {
	return xxx_messageInfo_CassandraDescribeSizeRequirementsRet.Size(m)
}
func (m *CassandraDescribeSizeRequirementsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraDescribeSizeRequirementsRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraDescribeSizeRequirementsRet proto.InternalMessageInfo

func (m *CassandraDescribeSizeRequirementsRet) GetTotalColumnFamilySize() int64 {
	if m != nil && m.TotalColumnFamilySize != nil {
		return *m.TotalColumnFamilySize
	}
	return 0
}

func (m *CassandraDescribeSizeRequirementsRet) GetCompactionBuffer() int64 {
	if m != nil && m.CompactionBuffer != nil {
		return *m.CompactionBuffer
	}
	return 0
}

func (m *CassandraDescribeSizeRequirementsRet) GetTotalCommitlogSize() int64 {
	if m != nil && m.TotalCommitlogSize != nil {
		return *m.TotalCommitlogSize
	}
	return 0
}

func (m *CassandraDescribeSizeRequirementsRet) GetCommitlogBuffer() int64 {
	if m != nil && m.CommitlogBuffer != nil {
		return *m.CommitlogBuffer
	}
	return 0
}

func (m *CassandraDescribeSizeRequirementsRet) GetDrcMetadataTransferSize() int64 {
	if m != nil && m.DrcMetadataTransferSize != nil {
		return *m.DrcMetadataTransferSize
	}
	return 0
}

type CassandraFeature struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraFeature) Reset()         { *m = CassandraFeature{} }
func (m *CassandraFeature) String() string { return proto.CompactTextString(m) }
func (*CassandraFeature) ProtoMessage()    {}
func (*CassandraFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{120}
}

func (m *CassandraFeature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraFeature.Unmarshal(m, b)
}
func (m *CassandraFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraFeature.Marshal(b, m, deterministic)
}
func (m *CassandraFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraFeature.Merge(m, src)
}
func (m *CassandraFeature) XXX_Size() int {
	return xxx_messageInfo_CassandraFeature.Size(m)
}
func (m *CassandraFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraFeature.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraFeature proto.InternalMessageInfo

type CassandraEnableFeaturesArg struct {
	FeatureList          []CassandraFeature_Type `protobuf:"varint,1,rep,name=feature_list,json=featureList,enum=nutanix.cassandra.CassandraFeature_Type" json:"feature_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CassandraEnableFeaturesArg) Reset()         { *m = CassandraEnableFeaturesArg{} }
func (m *CassandraEnableFeaturesArg) String() string { return proto.CompactTextString(m) }
func (*CassandraEnableFeaturesArg) ProtoMessage()    {}
func (*CassandraEnableFeaturesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{121}
}

func (m *CassandraEnableFeaturesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraEnableFeaturesArg.Unmarshal(m, b)
}
func (m *CassandraEnableFeaturesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraEnableFeaturesArg.Marshal(b, m, deterministic)
}
func (m *CassandraEnableFeaturesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraEnableFeaturesArg.Merge(m, src)
}
func (m *CassandraEnableFeaturesArg) XXX_Size() int {
	return xxx_messageInfo_CassandraEnableFeaturesArg.Size(m)
}
func (m *CassandraEnableFeaturesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraEnableFeaturesArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraEnableFeaturesArg proto.InternalMessageInfo

func (m *CassandraEnableFeaturesArg) GetFeatureList() []CassandraFeature_Type {
	if m != nil {
		return m.FeatureList
	}
	return nil
}

type CassandraEnableFeaturesRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraEnableFeaturesRet) Reset()         { *m = CassandraEnableFeaturesRet{} }
func (m *CassandraEnableFeaturesRet) String() string { return proto.CompactTextString(m) }
func (*CassandraEnableFeaturesRet) ProtoMessage()    {}
func (*CassandraEnableFeaturesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{122}
}

func (m *CassandraEnableFeaturesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraEnableFeaturesRet.Unmarshal(m, b)
}
func (m *CassandraEnableFeaturesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraEnableFeaturesRet.Marshal(b, m, deterministic)
}
func (m *CassandraEnableFeaturesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraEnableFeaturesRet.Merge(m, src)
}
func (m *CassandraEnableFeaturesRet) XXX_Size() int {
	return xxx_messageInfo_CassandraEnableFeaturesRet.Size(m)
}
func (m *CassandraEnableFeaturesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraEnableFeaturesRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraEnableFeaturesRet proto.InternalMessageInfo

type CassandraGetStageCountersArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraGetStageCountersArg) Reset()         { *m = CassandraGetStageCountersArg{} }
func (m *CassandraGetStageCountersArg) String() string { return proto.CompactTextString(m) }
func (*CassandraGetStageCountersArg) ProtoMessage()    {}
func (*CassandraGetStageCountersArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{123}
}

func (m *CassandraGetStageCountersArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetStageCountersArg.Unmarshal(m, b)
}
func (m *CassandraGetStageCountersArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetStageCountersArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetStageCountersArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetStageCountersArg.Merge(m, src)
}
func (m *CassandraGetStageCountersArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetStageCountersArg.Size(m)
}
func (m *CassandraGetStageCountersArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetStageCountersArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetStageCountersArg proto.InternalMessageInfo

type CassandraGetStageCountersRet struct {
	StageCounterList     []*CassandraGetStageCountersRet_CassandraStageCounter `protobuf:"bytes,1,rep,name=stage_counter_list,json=stageCounterList" json:"stage_counter_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *CassandraGetStageCountersRet) Reset()         { *m = CassandraGetStageCountersRet{} }
func (m *CassandraGetStageCountersRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetStageCountersRet) ProtoMessage()    {}
func (*CassandraGetStageCountersRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{124}
}

func (m *CassandraGetStageCountersRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetStageCountersRet.Unmarshal(m, b)
}
func (m *CassandraGetStageCountersRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetStageCountersRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetStageCountersRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetStageCountersRet.Merge(m, src)
}
func (m *CassandraGetStageCountersRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetStageCountersRet.Size(m)
}
func (m *CassandraGetStageCountersRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetStageCountersRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetStageCountersRet proto.InternalMessageInfo

func (m *CassandraGetStageCountersRet) GetStageCounterList() []*CassandraGetStageCountersRet_CassandraStageCounter {
	if m != nil {
		return m.StageCounterList
	}
	return nil
}

type CassandraGetStageCountersRet_CassandraStageCounter struct {
	// Stage name.
	StageName *string `protobuf:"bytes,1,opt,name=stage_name,json=stageName" json:"stage_name,omitempty"`
	// Number of pending tasks for the above stage.
	NumPendingTasks *int64 `protobuf:"varint,2,opt,name=num_pending_tasks,json=numPendingTasks" json:"num_pending_tasks,omitempty"`
	// Number of completed tasks in the above stage.
	NumCompletedTasks    *int64   `protobuf:"varint,3,opt,name=num_completed_tasks,json=numCompletedTasks" json:"num_completed_tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraGetStageCountersRet_CassandraStageCounter) Reset() {
	*m = CassandraGetStageCountersRet_CassandraStageCounter{}
}
func (m *CassandraGetStageCountersRet_CassandraStageCounter) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraGetStageCountersRet_CassandraStageCounter) ProtoMessage() {}
func (*CassandraGetStageCountersRet_CassandraStageCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{124, 0}
}

func (m *CassandraGetStageCountersRet_CassandraStageCounter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetStageCountersRet_CassandraStageCounter.Unmarshal(m, b)
}
func (m *CassandraGetStageCountersRet_CassandraStageCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetStageCountersRet_CassandraStageCounter.Marshal(b, m, deterministic)
}
func (m *CassandraGetStageCountersRet_CassandraStageCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetStageCountersRet_CassandraStageCounter.Merge(m, src)
}
func (m *CassandraGetStageCountersRet_CassandraStageCounter) XXX_Size() int {
	return xxx_messageInfo_CassandraGetStageCountersRet_CassandraStageCounter.Size(m)
}
func (m *CassandraGetStageCountersRet_CassandraStageCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetStageCountersRet_CassandraStageCounter.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetStageCountersRet_CassandraStageCounter proto.InternalMessageInfo

func (m *CassandraGetStageCountersRet_CassandraStageCounter) GetStageName() string {
	if m != nil && m.StageName != nil {
		return *m.StageName
	}
	return ""
}

func (m *CassandraGetStageCountersRet_CassandraStageCounter) GetNumPendingTasks() int64 {
	if m != nil && m.NumPendingTasks != nil {
		return *m.NumPendingTasks
	}
	return 0
}

func (m *CassandraGetStageCountersRet_CassandraStageCounter) GetNumCompletedTasks() int64 {
	if m != nil && m.NumCompletedTasks != nil {
		return *m.NumCompletedTasks
	}
	return 0
}

// This message fetches the number of times every cassandra paxos leader
// node has timed out and the number of times it responded.
type CassandraGetDegradedStatsRet struct {
	// List of nodes with paxos leader stats.
	PaxosLeaderStatList  []*CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat `protobuf:"bytes,1,rep,name=paxos_leader_stat_list,json=paxosLeaderStatList" json:"paxos_leader_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *CassandraGetDegradedStatsRet) Reset()         { *m = CassandraGetDegradedStatsRet{} }
func (m *CassandraGetDegradedStatsRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetDegradedStatsRet) ProtoMessage()    {}
func (*CassandraGetDegradedStatsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{125}
}

func (m *CassandraGetDegradedStatsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetDegradedStatsRet.Unmarshal(m, b)
}
func (m *CassandraGetDegradedStatsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetDegradedStatsRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetDegradedStatsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetDegradedStatsRet.Merge(m, src)
}
func (m *CassandraGetDegradedStatsRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetDegradedStatsRet.Size(m)
}
func (m *CassandraGetDegradedStatsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetDegradedStatsRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetDegradedStatsRet proto.InternalMessageInfo

func (m *CassandraGetDegradedStatsRet) GetPaxosLeaderStatList() []*CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat {
	if m != nil {
		return m.PaxosLeaderStatList
	}
	return nil
}

// Stats of one node.
type CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat struct {
	// IP Address of the node.
	HostAddress *string `protobuf:"bytes,1,opt,name=host_address,json=hostAddress" json:"host_address,omitempty"`
	// SVM ID of the leader node.
	SvmId *int64 `protobuf:"varint,2,opt,name=svm_id,json=svmId" json:"svm_id,omitempty"`
	// Number of timeouts.
	NumTimeouts *int64 `protobuf:"varint,3,opt,name=num_timeouts,json=numTimeouts" json:"num_timeouts,omitempty"`
	// Number of responses.
	NumResponses         *int64   `protobuf:"varint,4,opt,name=num_responses,json=numResponses" json:"num_responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) Reset() {
	*m = CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat{}
}
func (m *CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) ProtoMessage() {}
func (*CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{125, 0}
}

func (m *CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat.Unmarshal(m, b)
}
func (m *CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat.Marshal(b, m, deterministic)
}
func (m *CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat.Merge(m, src)
}
func (m *CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) XXX_Size() int {
	return xxx_messageInfo_CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat.Size(m)
}
func (m *CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat proto.InternalMessageInfo

func (m *CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) GetHostAddress() string {
	if m != nil && m.HostAddress != nil {
		return *m.HostAddress
	}
	return ""
}

func (m *CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) GetSvmId() int64 {
	if m != nil && m.SvmId != nil {
		return *m.SvmId
	}
	return 0
}

func (m *CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) GetNumTimeouts() int64 {
	if m != nil && m.NumTimeouts != nil {
		return *m.NumTimeouts
	}
	return 0
}

func (m *CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat) GetNumResponses() int64 {
	if m != nil && m.NumResponses != nil {
		return *m.NumResponses
	}
	return 0
}

type CassandraGetHeapUsageArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraGetHeapUsageArg) Reset()         { *m = CassandraGetHeapUsageArg{} }
func (m *CassandraGetHeapUsageArg) String() string { return proto.CompactTextString(m) }
func (*CassandraGetHeapUsageArg) ProtoMessage()    {}
func (*CassandraGetHeapUsageArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{126}
}

func (m *CassandraGetHeapUsageArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetHeapUsageArg.Unmarshal(m, b)
}
func (m *CassandraGetHeapUsageArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetHeapUsageArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetHeapUsageArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetHeapUsageArg.Merge(m, src)
}
func (m *CassandraGetHeapUsageArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetHeapUsageArg.Size(m)
}
func (m *CassandraGetHeapUsageArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetHeapUsageArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetHeapUsageArg proto.InternalMessageInfo

type CassandraGetHeapUsageRet struct {
	// Total heap size.
	TotalHeapSize *int64 `protobuf:"varint,1,opt,name=total_heap_size,json=totalHeapSize" json:"total_heap_size,omitempty"`
	// Free heap size.
	FreeHeapSize *int64 `protobuf:"varint,2,opt,name=free_heap_size,json=freeHeapSize" json:"free_heap_size,omitempty"`
	// Used heap size.
	UsedHeapSize *int64 `protobuf:"varint,3,opt,name=used_heap_size,json=usedHeapSize" json:"used_heap_size,omitempty"`
	// Total GC pause time since the last heartbeat
	GcTotalPauseTimeMsecs *int64   `protobuf:"varint,4,opt,name=gc_total_pause_time_msecs,json=gcTotalPauseTimeMsecs" json:"gc_total_pause_time_msecs,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CassandraGetHeapUsageRet) Reset()         { *m = CassandraGetHeapUsageRet{} }
func (m *CassandraGetHeapUsageRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetHeapUsageRet) ProtoMessage()    {}
func (*CassandraGetHeapUsageRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{127}
}

func (m *CassandraGetHeapUsageRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetHeapUsageRet.Unmarshal(m, b)
}
func (m *CassandraGetHeapUsageRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetHeapUsageRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetHeapUsageRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetHeapUsageRet.Merge(m, src)
}
func (m *CassandraGetHeapUsageRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetHeapUsageRet.Size(m)
}
func (m *CassandraGetHeapUsageRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetHeapUsageRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetHeapUsageRet proto.InternalMessageInfo

func (m *CassandraGetHeapUsageRet) GetTotalHeapSize() int64 {
	if m != nil && m.TotalHeapSize != nil {
		return *m.TotalHeapSize
	}
	return 0
}

func (m *CassandraGetHeapUsageRet) GetFreeHeapSize() int64 {
	if m != nil && m.FreeHeapSize != nil {
		return *m.FreeHeapSize
	}
	return 0
}

func (m *CassandraGetHeapUsageRet) GetUsedHeapSize() int64 {
	if m != nil && m.UsedHeapSize != nil {
		return *m.UsedHeapSize
	}
	return 0
}

func (m *CassandraGetHeapUsageRet) GetGcTotalPauseTimeMsecs() int64 {
	if m != nil && m.GcTotalPauseTimeMsecs != nil {
		return *m.GcTotalPauseTimeMsecs
	}
	return 0
}

type CassandraGetMBeanDataArg struct {
	MbeanReqs            []*MbeanRequestInfo `protobuf:"bytes,1,rep,name=mbean_reqs,json=mbeanReqs" json:"mbean_reqs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CassandraGetMBeanDataArg) Reset()         { *m = CassandraGetMBeanDataArg{} }
func (m *CassandraGetMBeanDataArg) String() string { return proto.CompactTextString(m) }
func (*CassandraGetMBeanDataArg) ProtoMessage()    {}
func (*CassandraGetMBeanDataArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{128}
}

func (m *CassandraGetMBeanDataArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetMBeanDataArg.Unmarshal(m, b)
}
func (m *CassandraGetMBeanDataArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetMBeanDataArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetMBeanDataArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetMBeanDataArg.Merge(m, src)
}
func (m *CassandraGetMBeanDataArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetMBeanDataArg.Size(m)
}
func (m *CassandraGetMBeanDataArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetMBeanDataArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetMBeanDataArg proto.InternalMessageInfo

func (m *CassandraGetMBeanDataArg) GetMbeanReqs() []*MbeanRequestInfo {
	if m != nil {
		return m.MbeanReqs
	}
	return nil
}

type CassandraGetMBeanDataRet struct {
	MbeanRet             []*misc.VariableMapExporterProto `protobuf:"bytes,1,rep,name=mbean_ret,json=mbeanRet" json:"mbean_ret,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CassandraGetMBeanDataRet) Reset()         { *m = CassandraGetMBeanDataRet{} }
func (m *CassandraGetMBeanDataRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetMBeanDataRet) ProtoMessage()    {}
func (*CassandraGetMBeanDataRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{129}
}

func (m *CassandraGetMBeanDataRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetMBeanDataRet.Unmarshal(m, b)
}
func (m *CassandraGetMBeanDataRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetMBeanDataRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetMBeanDataRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetMBeanDataRet.Merge(m, src)
}
func (m *CassandraGetMBeanDataRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetMBeanDataRet.Size(m)
}
func (m *CassandraGetMBeanDataRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetMBeanDataRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetMBeanDataRet proto.InternalMessageInfo

func (m *CassandraGetMBeanDataRet) GetMbeanRet() []*misc.VariableMapExporterProto {
	if m != nil {
		return m.MbeanRet
	}
	return nil
}

type CassandraGetLocalHealthWarningsArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraGetLocalHealthWarningsArg) Reset()         { *m = CassandraGetLocalHealthWarningsArg{} }
func (m *CassandraGetLocalHealthWarningsArg) String() string { return proto.CompactTextString(m) }
func (*CassandraGetLocalHealthWarningsArg) ProtoMessage()    {}
func (*CassandraGetLocalHealthWarningsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{130}
}

func (m *CassandraGetLocalHealthWarningsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetLocalHealthWarningsArg.Unmarshal(m, b)
}
func (m *CassandraGetLocalHealthWarningsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetLocalHealthWarningsArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetLocalHealthWarningsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetLocalHealthWarningsArg.Merge(m, src)
}
func (m *CassandraGetLocalHealthWarningsArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetLocalHealthWarningsArg.Size(m)
}
func (m *CassandraGetLocalHealthWarningsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetLocalHealthWarningsArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetLocalHealthWarningsArg proto.InternalMessageInfo

type CassandraGetLocalHealthWarningsRet struct {
	Warnings             *CassandraHealthWarningsProto `protobuf:"bytes,1,opt,name=warnings" json:"warnings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CassandraGetLocalHealthWarningsRet) Reset()         { *m = CassandraGetLocalHealthWarningsRet{} }
func (m *CassandraGetLocalHealthWarningsRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetLocalHealthWarningsRet) ProtoMessage()    {}
func (*CassandraGetLocalHealthWarningsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{131}
}

func (m *CassandraGetLocalHealthWarningsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetLocalHealthWarningsRet.Unmarshal(m, b)
}
func (m *CassandraGetLocalHealthWarningsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetLocalHealthWarningsRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetLocalHealthWarningsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetLocalHealthWarningsRet.Merge(m, src)
}
func (m *CassandraGetLocalHealthWarningsRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetLocalHealthWarningsRet.Size(m)
}
func (m *CassandraGetLocalHealthWarningsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetLocalHealthWarningsRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetLocalHealthWarningsRet proto.InternalMessageInfo

func (m *CassandraGetLocalHealthWarningsRet) GetWarnings() *CassandraHealthWarningsProto {
	if m != nil {
		return m.Warnings
	}
	return nil
}

// The LoadSSTables RPC imports the external files specified in 'files_to_load'
// in the CassandraLoadSSTablesArg to be part of the local Cassandra database.
// An SSTable is composed of a set of component files. All specified SSTables
// must belong to the same column family. An SSTable file set must be specified
// in the following manner:
// 1. Entire set of files are present. This means the following components must
// be included:
//   Data.db
//   Index.db
//   Filter.db
//   Metadata.db
//   Statistics.db
type CassandraLoadSSTablesArg struct {
	// List of SSTable files to load.
	FilesToLoad []string `protobuf:"bytes,1,rep,name=files_to_load,json=filesToLoad" json:"files_to_load,omitempty"`
	// Path of the disk on which the above files to load are located. The files
	// are loaded into the data directory which is on the same disk as the
	// location of the files.
	DiskPath *CassandraNodeConfiguration_DiskPath `protobuf:"bytes,2,opt,name=disk_path,json=diskPath" json:"disk_path,omitempty"`
	// Paths of disks used for internal replication.
	ReplicaDiskPaths []*CassandraNodeConfiguration_DiskPath `protobuf:"bytes,3,rep,name=replica_disk_paths,json=replicaDiskPaths" json:"replica_disk_paths,omitempty"`
	// If true, the cassandra should reclaim all commitlog segments created so
	// far by flushing all keyspaces and creating new segments.
	ReclaimCommitlog     *bool    `protobuf:"varint,4,opt,name=reclaim_commitlog,json=reclaimCommitlog,def=0" json:"reclaim_commitlog,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraLoadSSTablesArg) Reset()         { *m = CassandraLoadSSTablesArg{} }
func (m *CassandraLoadSSTablesArg) String() string { return proto.CompactTextString(m) }
func (*CassandraLoadSSTablesArg) ProtoMessage()    {}
func (*CassandraLoadSSTablesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{132}
}

func (m *CassandraLoadSSTablesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraLoadSSTablesArg.Unmarshal(m, b)
}
func (m *CassandraLoadSSTablesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraLoadSSTablesArg.Marshal(b, m, deterministic)
}
func (m *CassandraLoadSSTablesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraLoadSSTablesArg.Merge(m, src)
}
func (m *CassandraLoadSSTablesArg) XXX_Size() int {
	return xxx_messageInfo_CassandraLoadSSTablesArg.Size(m)
}
func (m *CassandraLoadSSTablesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraLoadSSTablesArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraLoadSSTablesArg proto.InternalMessageInfo

const Default_CassandraLoadSSTablesArg_ReclaimCommitlog bool = false

func (m *CassandraLoadSSTablesArg) GetFilesToLoad() []string {
	if m != nil {
		return m.FilesToLoad
	}
	return nil
}

func (m *CassandraLoadSSTablesArg) GetDiskPath() *CassandraNodeConfiguration_DiskPath {
	if m != nil {
		return m.DiskPath
	}
	return nil
}

func (m *CassandraLoadSSTablesArg) GetReplicaDiskPaths() []*CassandraNodeConfiguration_DiskPath {
	if m != nil {
		return m.ReplicaDiskPaths
	}
	return nil
}

func (m *CassandraLoadSSTablesArg) GetReclaimCommitlog() bool {
	if m != nil && m.ReclaimCommitlog != nil {
		return *m.ReclaimCommitlog
	}
	return Default_CassandraLoadSSTablesArg_ReclaimCommitlog
}

type CassandraLoadSSTablesRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraLoadSSTablesRet) Reset()         { *m = CassandraLoadSSTablesRet{} }
func (m *CassandraLoadSSTablesRet) String() string { return proto.CompactTextString(m) }
func (*CassandraLoadSSTablesRet) ProtoMessage()    {}
func (*CassandraLoadSSTablesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{133}
}

func (m *CassandraLoadSSTablesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraLoadSSTablesRet.Unmarshal(m, b)
}
func (m *CassandraLoadSSTablesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraLoadSSTablesRet.Marshal(b, m, deterministic)
}
func (m *CassandraLoadSSTablesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraLoadSSTablesRet.Merge(m, src)
}
func (m *CassandraLoadSSTablesRet) XXX_Size() int {
	return xxx_messageInfo_CassandraLoadSSTablesRet.Size(m)
}
func (m *CassandraLoadSSTablesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraLoadSSTablesRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraLoadSSTablesRet proto.InternalMessageInfo

// The SnapshotSSTables RPC hard links the current SSTables in the specified
// column family to the specified snapshot directory. If a range is specified,
// only the SSTables intersecting with the range will be snapshotted. The
// client is responsible for deleting the snapshot when it is finished.
type CassandraSnapshotSSTablesArg struct {
	// Keyspace name of the SSTables.
	Keyspace *string `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	// Column family for the SSTables.
	ColumnFamily *string `protobuf:"bytes,2,req,name=column_family,json=columnFamily" json:"column_family,omitempty"`
	// Directory where the snapshots are stored.
	SnapshotDirectory *string `protobuf:"bytes,3,req,name=snapshot_directory,json=snapshotDirectory" json:"snapshot_directory,omitempty"`
	// Token range that the SSTables intersect with. If unspecified, all SSTables
	// are snapshotted.
	Range                *CassandraTokenRange `protobuf:"bytes,4,opt,name=range" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CassandraSnapshotSSTablesArg) Reset()         { *m = CassandraSnapshotSSTablesArg{} }
func (m *CassandraSnapshotSSTablesArg) String() string { return proto.CompactTextString(m) }
func (*CassandraSnapshotSSTablesArg) ProtoMessage()    {}
func (*CassandraSnapshotSSTablesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{134}
}

func (m *CassandraSnapshotSSTablesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSnapshotSSTablesArg.Unmarshal(m, b)
}
func (m *CassandraSnapshotSSTablesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSnapshotSSTablesArg.Marshal(b, m, deterministic)
}
func (m *CassandraSnapshotSSTablesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSnapshotSSTablesArg.Merge(m, src)
}
func (m *CassandraSnapshotSSTablesArg) XXX_Size() int {
	return xxx_messageInfo_CassandraSnapshotSSTablesArg.Size(m)
}
func (m *CassandraSnapshotSSTablesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSnapshotSSTablesArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSnapshotSSTablesArg proto.InternalMessageInfo

func (m *CassandraSnapshotSSTablesArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraSnapshotSSTablesArg) GetColumnFamily() string {
	if m != nil && m.ColumnFamily != nil {
		return *m.ColumnFamily
	}
	return ""
}

func (m *CassandraSnapshotSSTablesArg) GetSnapshotDirectory() string {
	if m != nil && m.SnapshotDirectory != nil {
		return *m.SnapshotDirectory
	}
	return ""
}

func (m *CassandraSnapshotSSTablesArg) GetRange() *CassandraTokenRange {
	if m != nil {
		return m.Range
	}
	return nil
}

type CassandraSnapshotSSTablesRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraSnapshotSSTablesRet) Reset()         { *m = CassandraSnapshotSSTablesRet{} }
func (m *CassandraSnapshotSSTablesRet) String() string { return proto.CompactTextString(m) }
func (*CassandraSnapshotSSTablesRet) ProtoMessage()    {}
func (*CassandraSnapshotSSTablesRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{135}
}

func (m *CassandraSnapshotSSTablesRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSnapshotSSTablesRet.Unmarshal(m, b)
}
func (m *CassandraSnapshotSSTablesRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSnapshotSSTablesRet.Marshal(b, m, deterministic)
}
func (m *CassandraSnapshotSSTablesRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSnapshotSSTablesRet.Merge(m, src)
}
func (m *CassandraSnapshotSSTablesRet) XXX_Size() int {
	return xxx_messageInfo_CassandraSnapshotSSTablesRet.Size(m)
}
func (m *CassandraSnapshotSSTablesRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSnapshotSSTablesRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSnapshotSSTablesRet proto.InternalMessageInfo

// This message is used by Cassandra monitor to update Cassandra
// daemon with schema changes.
type CassandraSchema struct {
	// Logical version of the schema.
	LogicalTimestamp *int64 `protobuf:"varint,1,opt,name=logical_timestamp,json=logicalTimestamp" json:"logical_timestamp,omitempty"`
	// List of keyspace definitions.
	Keyspaces []*CassandraKsDef `protobuf:"bytes,2,rep,name=keyspaces" json:"keyspaces,omitempty"`
	// List of features to enable.
	FeatureList          *CassandraEnableFeaturesArg `protobuf:"bytes,3,opt,name=feature_list,json=featureList" json:"feature_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CassandraSchema) Reset()         { *m = CassandraSchema{} }
func (m *CassandraSchema) String() string { return proto.CompactTextString(m) }
func (*CassandraSchema) ProtoMessage()    {}
func (*CassandraSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{136}
}

func (m *CassandraSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSchema.Unmarshal(m, b)
}
func (m *CassandraSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSchema.Marshal(b, m, deterministic)
}
func (m *CassandraSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSchema.Merge(m, src)
}
func (m *CassandraSchema) XXX_Size() int {
	return xxx_messageInfo_CassandraSchema.Size(m)
}
func (m *CassandraSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSchema.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSchema proto.InternalMessageInfo

func (m *CassandraSchema) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return 0
}

func (m *CassandraSchema) GetKeyspaces() []*CassandraKsDef {
	if m != nil {
		return m.Keyspaces
	}
	return nil
}

func (m *CassandraSchema) GetFeatureList() *CassandraEnableFeaturesArg {
	if m != nil {
		return m.FeatureList
	}
	return nil
}

// This message is used by Cassandra monitor to update
// Cassandra schema in zeus.
type CassandraSchemaInfo struct {
	// Svm id of the node that updated the schema.
	SourceSvmId *int64 `protobuf:"varint,1,opt,name=source_svm_id,json=sourceSvmId" json:"source_svm_id,omitempty"`
	// Software version of the Cassandra schema.
	CassandraSchemaVersion *string `protobuf:"bytes,2,opt,name=cassandra_schema_version,json=cassandraSchemaVersion" json:"cassandra_schema_version,omitempty"`
	// Cassandra keyspace definitions.
	CassandraSchema      *CassandraSchema `protobuf:"bytes,3,opt,name=cassandra_schema,json=cassandraSchema" json:"cassandra_schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CassandraSchemaInfo) Reset()         { *m = CassandraSchemaInfo{} }
func (m *CassandraSchemaInfo) String() string { return proto.CompactTextString(m) }
func (*CassandraSchemaInfo) ProtoMessage()    {}
func (*CassandraSchemaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{137}
}

func (m *CassandraSchemaInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraSchemaInfo.Unmarshal(m, b)
}
func (m *CassandraSchemaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraSchemaInfo.Marshal(b, m, deterministic)
}
func (m *CassandraSchemaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraSchemaInfo.Merge(m, src)
}
func (m *CassandraSchemaInfo) XXX_Size() int {
	return xxx_messageInfo_CassandraSchemaInfo.Size(m)
}
func (m *CassandraSchemaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraSchemaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraSchemaInfo proto.InternalMessageInfo

func (m *CassandraSchemaInfo) GetSourceSvmId() int64 {
	if m != nil && m.SourceSvmId != nil {
		return *m.SourceSvmId
	}
	return 0
}

func (m *CassandraSchemaInfo) GetCassandraSchemaVersion() string {
	if m != nil && m.CassandraSchemaVersion != nil {
		return *m.CassandraSchemaVersion
	}
	return ""
}

func (m *CassandraSchemaInfo) GetCassandraSchema() *CassandraSchema {
	if m != nil {
		return m.CassandraSchema
	}
	return nil
}

// Message to represent node's Cassandra configuration.
type CassandraNodeConfiguration struct {
	// Service VM Id of the node.
	ServiceVmId *int64 `protobuf:"varint,1,opt,name=service_vm_id,json=serviceVmId" json:"service_vm_id,omitempty"`
	// Zeus config timestamp on which the node config is based on.
	ZeusConfigLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=zeus_config_logical_timestamp,json=zeusConfigLogicalTimestamp" json:"zeus_config_logical_timestamp,omitempty"`
	// Replication factor of the cluster.
	ReplicationFactor *int32 `protobuf:"varint,3,opt,name=replication_factor,json=replicationFactor" json:"replication_factor,omitempty"`
	// List of DiskPaths on the node.
	DiskPathList []*CassandraNodeConfiguration_DiskPath `protobuf:"bytes,4,rep,name=disk_path_list,json=diskPathList" json:"disk_path_list,omitempty"`
	// List of DataShards present on the node. Cassandra commitlogs, sstables or
	// any other type of storage specified anywhere in the config for this node
	// must be from this list.
	DataShardList []*CassandraNodeConfiguration_DataShards `protobuf:"bytes,5,rep,name=data_shard_list,json=dataShardList" json:"data_shard_list,omitempty"`
	// List of token mappings.
	TokenMappingList []*CassandraNodeConfiguration_TokenMapping `protobuf:"bytes,6,rep,name=token_mapping_list,json=tokenMappingList" json:"token_mapping_list,omitempty"`
	// Definition of local cassandra schema of the node. Column families
	// listed here are local to the node and (may) not (be) globally present
	// on other nodes.
	CassandraSchema *CassandraSchema `protobuf:"bytes,7,opt,name=cassandra_schema,json=cassandraSchema" json:"cassandra_schema,omitempty"`
	// Stores the snapshot info about the local node, and the view of snapshot
	// ids for other nodes from the local node.
	SnapshotInfo         *CassandraNodeConfiguration_CassandraSnapshotInfo `protobuf:"bytes,8,opt,name=snapshot_info,json=snapshotInfo" json:"snapshot_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *CassandraNodeConfiguration) Reset()         { *m = CassandraNodeConfiguration{} }
func (m *CassandraNodeConfiguration) String() string { return proto.CompactTextString(m) }
func (*CassandraNodeConfiguration) ProtoMessage()    {}
func (*CassandraNodeConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{138}
}

func (m *CassandraNodeConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraNodeConfiguration.Unmarshal(m, b)
}
func (m *CassandraNodeConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraNodeConfiguration.Marshal(b, m, deterministic)
}
func (m *CassandraNodeConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraNodeConfiguration.Merge(m, src)
}
func (m *CassandraNodeConfiguration) XXX_Size() int {
	return xxx_messageInfo_CassandraNodeConfiguration.Size(m)
}
func (m *CassandraNodeConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraNodeConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraNodeConfiguration proto.InternalMessageInfo

func (m *CassandraNodeConfiguration) GetServiceVmId() int64 {
	if m != nil && m.ServiceVmId != nil {
		return *m.ServiceVmId
	}
	return 0
}

func (m *CassandraNodeConfiguration) GetZeusConfigLogicalTimestamp() int64 {
	if m != nil && m.ZeusConfigLogicalTimestamp != nil {
		return *m.ZeusConfigLogicalTimestamp
	}
	return 0
}

func (m *CassandraNodeConfiguration) GetReplicationFactor() int32 {
	if m != nil && m.ReplicationFactor != nil {
		return *m.ReplicationFactor
	}
	return 0
}

func (m *CassandraNodeConfiguration) GetDiskPathList() []*CassandraNodeConfiguration_DiskPath {
	if m != nil {
		return m.DiskPathList
	}
	return nil
}

func (m *CassandraNodeConfiguration) GetDataShardList() []*CassandraNodeConfiguration_DataShards {
	if m != nil {
		return m.DataShardList
	}
	return nil
}

func (m *CassandraNodeConfiguration) GetTokenMappingList() []*CassandraNodeConfiguration_TokenMapping {
	if m != nil {
		return m.TokenMappingList
	}
	return nil
}

func (m *CassandraNodeConfiguration) GetCassandraSchema() *CassandraSchema {
	if m != nil {
		return m.CassandraSchema
	}
	return nil
}

func (m *CassandraNodeConfiguration) GetSnapshotInfo() *CassandraNodeConfiguration_CassandraSnapshotInfo {
	if m != nil {
		return m.SnapshotInfo
	}
	return nil
}

// Specifies the directory location on which files will be written. These
// files can represent the commitlog or sstable.
type CassandraNodeConfiguration_DiskPath struct {
	// Unique id to identify the disk path location.
	DiskPathId *int64 `protobuf:"varint,1,opt,name=disk_path_id,json=diskPathId" json:"disk_path_id,omitempty"`
	// The path is relative path on the disk, /mount_path/relative_path gives
	// the full location for the metadata path.
	RelativePath *string `protobuf:"bytes,2,opt,name=relative_path,json=relativePath" json:"relative_path,omitempty"`
	// Disk id associated with the location.
	DiskId *int64 `protobuf:"varint,3,opt,name=disk_id,json=diskId" json:"disk_id,omitempty"`
	// The mount path of the disk.
	MountPath            *string  `protobuf:"bytes,4,opt,name=mount_path,json=mountPath" json:"mount_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraNodeConfiguration_DiskPath) Reset()         { *m = CassandraNodeConfiguration_DiskPath{} }
func (m *CassandraNodeConfiguration_DiskPath) String() string { return proto.CompactTextString(m) }
func (*CassandraNodeConfiguration_DiskPath) ProtoMessage()    {}
func (*CassandraNodeConfiguration_DiskPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{138, 0}
}

func (m *CassandraNodeConfiguration_DiskPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraNodeConfiguration_DiskPath.Unmarshal(m, b)
}
func (m *CassandraNodeConfiguration_DiskPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraNodeConfiguration_DiskPath.Marshal(b, m, deterministic)
}
func (m *CassandraNodeConfiguration_DiskPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraNodeConfiguration_DiskPath.Merge(m, src)
}
func (m *CassandraNodeConfiguration_DiskPath) XXX_Size() int {
	return xxx_messageInfo_CassandraNodeConfiguration_DiskPath.Size(m)
}
func (m *CassandraNodeConfiguration_DiskPath) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraNodeConfiguration_DiskPath.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraNodeConfiguration_DiskPath proto.InternalMessageInfo

func (m *CassandraNodeConfiguration_DiskPath) GetDiskPathId() int64 {
	if m != nil && m.DiskPathId != nil {
		return *m.DiskPathId
	}
	return 0
}

func (m *CassandraNodeConfiguration_DiskPath) GetRelativePath() string {
	if m != nil && m.RelativePath != nil {
		return *m.RelativePath
	}
	return ""
}

func (m *CassandraNodeConfiguration_DiskPath) GetDiskId() int64 {
	if m != nil && m.DiskId != nil {
		return *m.DiskId
	}
	return 0
}

func (m *CassandraNodeConfiguration_DiskPath) GetMountPath() string {
	if m != nil && m.MountPath != nil {
		return *m.MountPath
	}
	return ""
}

// Specifies a combination of directory locations where the data can be
// sharded for the commitlogs or sstables.
type CassandraNodeConfiguration_DataShards struct {
	// Unique id for this combination.
	ShardId *int64 `protobuf:"varint,1,opt,name=shard_id,json=shardId" json:"shard_id,omitempty"`
	// List of DiskPath ids. If more than one is specified the data will be
	// striped across this set.
	DiskPathIds          []int64  `protobuf:"varint,2,rep,name=disk_path_ids,json=diskPathIds" json:"disk_path_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraNodeConfiguration_DataShards) Reset()         { *m = CassandraNodeConfiguration_DataShards{} }
func (m *CassandraNodeConfiguration_DataShards) String() string { return proto.CompactTextString(m) }
func (*CassandraNodeConfiguration_DataShards) ProtoMessage()    {}
func (*CassandraNodeConfiguration_DataShards) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{138, 1}
}

func (m *CassandraNodeConfiguration_DataShards) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraNodeConfiguration_DataShards.Unmarshal(m, b)
}
func (m *CassandraNodeConfiguration_DataShards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraNodeConfiguration_DataShards.Marshal(b, m, deterministic)
}
func (m *CassandraNodeConfiguration_DataShards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraNodeConfiguration_DataShards.Merge(m, src)
}
func (m *CassandraNodeConfiguration_DataShards) XXX_Size() int {
	return xxx_messageInfo_CassandraNodeConfiguration_DataShards.Size(m)
}
func (m *CassandraNodeConfiguration_DataShards) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraNodeConfiguration_DataShards.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraNodeConfiguration_DataShards proto.InternalMessageInfo

func (m *CassandraNodeConfiguration_DataShards) GetShardId() int64 {
	if m != nil && m.ShardId != nil {
		return *m.ShardId
	}
	return 0
}

func (m *CassandraNodeConfiguration_DataShards) GetDiskPathIds() []int64 {
	if m != nil {
		return m.DiskPathIds
	}
	return nil
}

// Message to represent a token range, its associated commitlog and
// data location.
type CassandraNodeConfiguration_TokenMapping struct {
	// Key range which is in the replica set of the local node.
	KeyRange *SSTableMetadataProto_ShardingKeyRange `protobuf:"bytes,1,opt,name=key_range,json=keyRange" json:"key_range,omitempty"`
	// Commitlog DataShards ids for this key range. If there are multiple
	// commit log shards specified, data is replicated across them.
	CommitlogReplicaList []int64 `protobuf:"varint,2,rep,name=commitlog_replica_list,json=commitlogReplicaList" json:"commitlog_replica_list,omitempty"`
	// List of DataShards ids to the (sstable) data locations for this key
	// range. If there are multiple data location shard ids specified, sstable
	// data is replicated across them.
	DataReplicaList      []int64  `protobuf:"varint,3,rep,name=data_replica_list,json=dataReplicaList" json:"data_replica_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraNodeConfiguration_TokenMapping) Reset() {
	*m = CassandraNodeConfiguration_TokenMapping{}
}
func (m *CassandraNodeConfiguration_TokenMapping) String() string { return proto.CompactTextString(m) }
func (*CassandraNodeConfiguration_TokenMapping) ProtoMessage()    {}
func (*CassandraNodeConfiguration_TokenMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{138, 2}
}

func (m *CassandraNodeConfiguration_TokenMapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraNodeConfiguration_TokenMapping.Unmarshal(m, b)
}
func (m *CassandraNodeConfiguration_TokenMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraNodeConfiguration_TokenMapping.Marshal(b, m, deterministic)
}
func (m *CassandraNodeConfiguration_TokenMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraNodeConfiguration_TokenMapping.Merge(m, src)
}
func (m *CassandraNodeConfiguration_TokenMapping) XXX_Size() int {
	return xxx_messageInfo_CassandraNodeConfiguration_TokenMapping.Size(m)
}
func (m *CassandraNodeConfiguration_TokenMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraNodeConfiguration_TokenMapping.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraNodeConfiguration_TokenMapping proto.InternalMessageInfo

func (m *CassandraNodeConfiguration_TokenMapping) GetKeyRange() *SSTableMetadataProto_ShardingKeyRange {
	if m != nil {
		return m.KeyRange
	}
	return nil
}

func (m *CassandraNodeConfiguration_TokenMapping) GetCommitlogReplicaList() []int64 {
	if m != nil {
		return m.CommitlogReplicaList
	}
	return nil
}

func (m *CassandraNodeConfiguration_TokenMapping) GetDataReplicaList() []int64 {
	if m != nil {
		return m.DataReplicaList
	}
	return nil
}

// This message stores the snapshot information for all nodes.
type CassandraNodeConfiguration_CassandraSnapshotInfo struct {
	// Last successful snapshot id on this node.
	LastSuccessfulSnapshotIdOnLocalNode *int64                                                                               `protobuf:"varint,1,opt,name=last_successful_snapshot_id_on_local_node,json=lastSuccessfulSnapshotIdOnLocalNode" json:"last_successful_snapshot_id_on_local_node,omitempty"`
	SnapshotInfoForNodes                *CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes `protobuf:"bytes,2,opt,name=snapshot_info_for_nodes,json=snapshotInfoForNodes" json:"snapshot_info_for_nodes,omitempty"`
	XXX_NoUnkeyedLiteral                struct{}                                                                             `json:"-"`
	XXX_unrecognized                    []byte                                                                               `json:"-"`
	XXX_sizecache                       int32                                                                                `json:"-"`
}

func (m *CassandraNodeConfiguration_CassandraSnapshotInfo) Reset() {
	*m = CassandraNodeConfiguration_CassandraSnapshotInfo{}
}
func (m *CassandraNodeConfiguration_CassandraSnapshotInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraNodeConfiguration_CassandraSnapshotInfo) ProtoMessage() {}
func (*CassandraNodeConfiguration_CassandraSnapshotInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{138, 3}
}

func (m *CassandraNodeConfiguration_CassandraSnapshotInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo.Unmarshal(m, b)
}
func (m *CassandraNodeConfiguration_CassandraSnapshotInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo.Marshal(b, m, deterministic)
}
func (m *CassandraNodeConfiguration_CassandraSnapshotInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo.Merge(m, src)
}
func (m *CassandraNodeConfiguration_CassandraSnapshotInfo) XXX_Size() int {
	return xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo.Size(m)
}
func (m *CassandraNodeConfiguration_CassandraSnapshotInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo proto.InternalMessageInfo

func (m *CassandraNodeConfiguration_CassandraSnapshotInfo) GetLastSuccessfulSnapshotIdOnLocalNode() int64 {
	if m != nil && m.LastSuccessfulSnapshotIdOnLocalNode != nil {
		return *m.LastSuccessfulSnapshotIdOnLocalNode
	}
	return 0
}

func (m *CassandraNodeConfiguration_CassandraSnapshotInfo) GetSnapshotInfoForNodes() *CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes {
	if m != nil {
		return m.SnapshotInfoForNodes
	}
	return nil
}

// This is the snapshot of the state of all nodes' (including self)
// snapshots stored when the local node took a snapshot and was in
// leader-only read mode for all eligible column families.
type CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes struct {
	// List of ranges for which the local node is in leader-only read mode.
	PaxosLeaderOnlyReadRanges []*CassandraTokenRange `protobuf:"bytes,1,rep,name=paxos_leader_only_read_ranges,json=paxosLeaderOnlyReadRanges" json:"paxos_leader_only_read_ranges,omitempty"`
	// SVM id to snapshot mapping for all nodes.
	NodeSnapshotInfoList []*CassandraNodeSnapshotInfo `protobuf:"bytes,2,rep,name=node_snapshot_info_list,json=nodeSnapshotInfoList" json:"node_snapshot_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes) Reset() {
	*m = CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes{}
}
func (m *CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes) ProtoMessage() {
}
func (*CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{138, 3, 0}
}

func (m *CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes.Unmarshal(m, b)
}
func (m *CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes.Marshal(b, m, deterministic)
}
func (m *CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes.Merge(m, src)
}
func (m *CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes) XXX_Size() int {
	return xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes.Size(m)
}
func (m *CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes proto.InternalMessageInfo

func (m *CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes) GetPaxosLeaderOnlyReadRanges() []*CassandraTokenRange {
	if m != nil {
		return m.PaxosLeaderOnlyReadRanges
	}
	return nil
}

func (m *CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes) GetNodeSnapshotInfoList() []*CassandraNodeSnapshotInfo {
	if m != nil {
		return m.NodeSnapshotInfoList
	}
	return nil
}

// This message contains Cassandra configuration for all nodes in
// the cluster. This is stored in a separate zeus node that will
// provide information about how to configure Cassandra data for each
// node in the cluster.
type CassandraConfigForAllNodesInCluster struct {
	// Service VM Id of the node that last updated the configuration.
	SourceSvmId *int64 `protobuf:"varint,1,opt,name=source_svm_id,json=sourceSvmId" json:"source_svm_id,omitempty"`
	// Logical timestamp of the configuration.
	ConfigLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=config_logical_timestamp,json=configLogicalTimestamp" json:"config_logical_timestamp,omitempty"`
	// List of Cassandra configs for all nodes in the cluster.
	CassandraNodeConfigList []*CassandraNodeConfiguration `protobuf:"bytes,3,rep,name=cassandra_node_config_list,json=cassandraNodeConfigList" json:"cassandra_node_config_list,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                      `json:"-"`
	XXX_unrecognized        []byte                        `json:"-"`
	XXX_sizecache           int32                         `json:"-"`
}

func (m *CassandraConfigForAllNodesInCluster) Reset()         { *m = CassandraConfigForAllNodesInCluster{} }
func (m *CassandraConfigForAllNodesInCluster) String() string { return proto.CompactTextString(m) }
func (*CassandraConfigForAllNodesInCluster) ProtoMessage()    {}
func (*CassandraConfigForAllNodesInCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{139}
}

func (m *CassandraConfigForAllNodesInCluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraConfigForAllNodesInCluster.Unmarshal(m, b)
}
func (m *CassandraConfigForAllNodesInCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraConfigForAllNodesInCluster.Marshal(b, m, deterministic)
}
func (m *CassandraConfigForAllNodesInCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraConfigForAllNodesInCluster.Merge(m, src)
}
func (m *CassandraConfigForAllNodesInCluster) XXX_Size() int {
	return xxx_messageInfo_CassandraConfigForAllNodesInCluster.Size(m)
}
func (m *CassandraConfigForAllNodesInCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraConfigForAllNodesInCluster.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraConfigForAllNodesInCluster proto.InternalMessageInfo

func (m *CassandraConfigForAllNodesInCluster) GetSourceSvmId() int64 {
	if m != nil && m.SourceSvmId != nil {
		return *m.SourceSvmId
	}
	return 0
}

func (m *CassandraConfigForAllNodesInCluster) GetConfigLogicalTimestamp() int64 {
	if m != nil && m.ConfigLogicalTimestamp != nil {
		return *m.ConfigLogicalTimestamp
	}
	return 0
}

func (m *CassandraConfigForAllNodesInCluster) GetCassandraNodeConfigList() []*CassandraNodeConfiguration {
	if m != nil {
		return m.CassandraNodeConfigList
	}
	return nil
}

// This message is used by Cassandra monitor to heartbeat the cluster
// status to Cassandra Daemon.
// It is composed of 3 parts:
// 1. Timestamps (zeus update, config, health).
// 2. Node state information.
// 3. Query for health and counters from daemon.
type CassandraHeartbeatArg struct {
	// The current heartbeat version. Its a monotonicall increasing counter. It
	// gets updated when there is a config change, peer health status change,
	// leadership change and also periodically.
	HeartbeatVersion *int64 `protobuf:"varint,1,opt,name=heartbeat_version,json=heartbeatVersion" json:"heartbeat_version,omitempty"`
	// The last time zeus client was successful in updating zeus. The timestamp
	// resolution is in usecs.
	ZeusLastRecvTimeUsecs *int64 `protobuf:"varint,2,opt,name=zeus_last_recv_time_usecs,json=zeusLastRecvTimeUsecs" json:"zeus_last_recv_time_usecs,omitempty"`
	// The logical timestamp of the zeus configuration with the Cassandra
	// Monitor. Cassandra daemon can verify if its local state reflects this
	// configuration.
	ZeusConfigurationLogicalTimestamp *int64 `protobuf:"varint,3,opt,name=zeus_configuration_logical_timestamp,json=zeusConfigurationLogicalTimestamp" json:"zeus_configuration_logical_timestamp,omitempty"`
	// Health information sought from Cassandra daemon, returned by the rpc via
	// 'CassandraHeartbeatRet'.
	HealthCounters []CassandraHeartbeatArg_CassandraHealthCounters_Type `protobuf:"varint,4,rep,name=health_counters,json=healthCounters,enum=nutanix.cassandra.CassandraHeartbeatArg_CassandraHealthCounters_Type" json:"health_counters,omitempty"`
	// This list is optional, as in it will only be populated with the change
	// list of node status information because of zeus config or health changes.
	NodeDataList []*CassandraHeartbeatArg_CassandraNodeData `protobuf:"bytes,5,rep,name=node_data_list,json=nodeDataList" json:"node_data_list,omitempty"`
	// Data location to sharded ranges mapping.
	ShardedRangePathList []*CassandraHeartbeatArg_ShardedRangePathConfig `protobuf:"bytes,6,rep,name=sharded_range_path_list,json=shardedRangePathList" json:"sharded_range_path_list,omitempty"`
	// Identifies if the rpc contains the complete cluster state.
	ResyncOfCompleteZeusConfigState *bool `protobuf:"varint,7,opt,name=resync_of_complete_zeus_config_state,json=resyncOfCompleteZeusConfigState,def=0" json:"resync_of_complete_zeus_config_state,omitempty"`
	// Definitions of Cassandra schema.
	CassandraSchema *CassandraSchema `protobuf:"bytes,8,opt,name=cassandra_schema,json=cassandraSchema" json:"cassandra_schema,omitempty"`
	// Local node configuration.
	LocalNodeConfiguration *CassandraNodeConfiguration `protobuf:"bytes,9,opt,name=local_node_configuration,json=localNodeConfiguration" json:"local_node_configuration,omitempty"`
	// The on-going snapshot id for this node.
	OngoingSnapshotId *int64 `protobuf:"varint,10,opt,name=ongoing_snapshot_id,json=ongoingSnapshotId" json:"ongoing_snapshot_id,omitempty"`
	// Cassandra disk mode config.
	DiskModeConfig *CassandraHeartbeatArg_CassandraDiskModeConfig `protobuf:"bytes,11,opt,name=disk_mode_config,json=diskModeConfig" json:"disk_mode_config,omitempty"`
	// Indicates whether the local node owns the entire token range.
	LocalNodeOwnsEntireTokenRange *bool    `protobuf:"varint,12,opt,name=local_node_owns_entire_token_range,json=localNodeOwnsEntireTokenRange,def=0" json:"local_node_owns_entire_token_range,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *CassandraHeartbeatArg) Reset()         { *m = CassandraHeartbeatArg{} }
func (m *CassandraHeartbeatArg) String() string { return proto.CompactTextString(m) }
func (*CassandraHeartbeatArg) ProtoMessage()    {}
func (*CassandraHeartbeatArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{140}
}

func (m *CassandraHeartbeatArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraHeartbeatArg.Unmarshal(m, b)
}
func (m *CassandraHeartbeatArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraHeartbeatArg.Marshal(b, m, deterministic)
}
func (m *CassandraHeartbeatArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraHeartbeatArg.Merge(m, src)
}
func (m *CassandraHeartbeatArg) XXX_Size() int {
	return xxx_messageInfo_CassandraHeartbeatArg.Size(m)
}
func (m *CassandraHeartbeatArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraHeartbeatArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraHeartbeatArg proto.InternalMessageInfo

const Default_CassandraHeartbeatArg_ResyncOfCompleteZeusConfigState bool = false
const Default_CassandraHeartbeatArg_LocalNodeOwnsEntireTokenRange bool = false

func (m *CassandraHeartbeatArg) GetHeartbeatVersion() int64 {
	if m != nil && m.HeartbeatVersion != nil {
		return *m.HeartbeatVersion
	}
	return 0
}

func (m *CassandraHeartbeatArg) GetZeusLastRecvTimeUsecs() int64 {
	if m != nil && m.ZeusLastRecvTimeUsecs != nil {
		return *m.ZeusLastRecvTimeUsecs
	}
	return 0
}

func (m *CassandraHeartbeatArg) GetZeusConfigurationLogicalTimestamp() int64 {
	if m != nil && m.ZeusConfigurationLogicalTimestamp != nil {
		return *m.ZeusConfigurationLogicalTimestamp
	}
	return 0
}

func (m *CassandraHeartbeatArg) GetHealthCounters() []CassandraHeartbeatArg_CassandraHealthCounters_Type {
	if m != nil {
		return m.HealthCounters
	}
	return nil
}

func (m *CassandraHeartbeatArg) GetNodeDataList() []*CassandraHeartbeatArg_CassandraNodeData {
	if m != nil {
		return m.NodeDataList
	}
	return nil
}

func (m *CassandraHeartbeatArg) GetShardedRangePathList() []*CassandraHeartbeatArg_ShardedRangePathConfig {
	if m != nil {
		return m.ShardedRangePathList
	}
	return nil
}

func (m *CassandraHeartbeatArg) GetResyncOfCompleteZeusConfigState() bool {
	if m != nil && m.ResyncOfCompleteZeusConfigState != nil {
		return *m.ResyncOfCompleteZeusConfigState
	}
	return Default_CassandraHeartbeatArg_ResyncOfCompleteZeusConfigState
}

func (m *CassandraHeartbeatArg) GetCassandraSchema() *CassandraSchema {
	if m != nil {
		return m.CassandraSchema
	}
	return nil
}

func (m *CassandraHeartbeatArg) GetLocalNodeConfiguration() *CassandraNodeConfiguration {
	if m != nil {
		return m.LocalNodeConfiguration
	}
	return nil
}

func (m *CassandraHeartbeatArg) GetOngoingSnapshotId() int64 {
	if m != nil && m.OngoingSnapshotId != nil {
		return *m.OngoingSnapshotId
	}
	return 0
}

func (m *CassandraHeartbeatArg) GetDiskModeConfig() *CassandraHeartbeatArg_CassandraDiskModeConfig {
	if m != nil {
		return m.DiskModeConfig
	}
	return nil
}

func (m *CassandraHeartbeatArg) GetLocalNodeOwnsEntireTokenRange() bool {
	if m != nil && m.LocalNodeOwnsEntireTokenRange != nil {
		return *m.LocalNodeOwnsEntireTokenRange
	}
	return Default_CassandraHeartbeatArg_LocalNodeOwnsEntireTokenRange
}

type CassandraHeartbeatArg_CassandraHealthCounters struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraHeartbeatArg_CassandraHealthCounters) Reset() {
	*m = CassandraHeartbeatArg_CassandraHealthCounters{}
}
func (m *CassandraHeartbeatArg_CassandraHealthCounters) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraHeartbeatArg_CassandraHealthCounters) ProtoMessage() {}
func (*CassandraHeartbeatArg_CassandraHealthCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{140, 0}
}

func (m *CassandraHeartbeatArg_CassandraHealthCounters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraHealthCounters.Unmarshal(m, b)
}
func (m *CassandraHeartbeatArg_CassandraHealthCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraHealthCounters.Marshal(b, m, deterministic)
}
func (m *CassandraHeartbeatArg_CassandraHealthCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraHeartbeatArg_CassandraHealthCounters.Merge(m, src)
}
func (m *CassandraHeartbeatArg_CassandraHealthCounters) XXX_Size() int {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraHealthCounters.Size(m)
}
func (m *CassandraHeartbeatArg_CassandraHealthCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraHeartbeatArg_CassandraHealthCounters.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraHeartbeatArg_CassandraHealthCounters proto.InternalMessageInfo

// This data structure encapsulates the updates in the zeus config or health
// status of any node in the cassandra cluster.
type CassandraHeartbeatArg_CassandraNodeData struct {
	// The globally unique id (within this cluster) assigned to the service VM
	// on this machine. This id also serves to provide an id for this node.
	// Required parameter.
	ServiceVmId *int64 `protobuf:"varint,1,opt,name=service_vm_id,json=serviceVmId" json:"service_vm_id,omitempty"`
	// The IP that Cassandra service binds to on the CVM. This is the IP
	// address in the cvm's backplane subnet. This ip address may change if the
	// cvm's backplane_ip is changed.
	CassandraServiceIp *string `protobuf:"bytes,2,opt,name=cassandra_service_ip,json=cassandraServiceIp" json:"cassandra_service_ip,omitempty"`
	// Cassandra instance's token id.
	CassandraTokenId *string `protobuf:"bytes,3,opt,name=cassandra_token_id,json=cassandraTokenId" json:"cassandra_token_id,omitempty"`
	// Status of Cassandra running on this node.
	CassandraStatus *CassandraLimboStateLevel_Type `protobuf:"varint,4,opt,name=cassandra_status,json=cassandraStatus,enum=nutanix.cassandra.CassandraLimboStateLevel_Type" json:"cassandra_status,omitempty"`
	// Leader svm id for this token.
	LeaderServiceVmId *int64 `protobuf:"varint,5,opt,name=leader_service_vm_id,json=leaderServiceVmId" json:"leader_service_vm_id,omitempty"`
	// Cassandra component id.
	CassandraComponentId *int64 `protobuf:"varint,6,opt,name=cassandra_component_id,json=cassandraComponentId" json:"cassandra_component_id,omitempty"`
	// Cassandra's incarnation id.
	CassandraIncarnationId *int64                                              `protobuf:"varint,7,opt,name=cassandra_incarnation_id,json=cassandraIncarnationId" json:"cassandra_incarnation_id,omitempty"`
	PeerHealth             *CassandraHeartbeatArg_CassandraNodeData_PeerHealth `protobuf:"varint,8,opt,name=peer_health,json=peerHealth,enum=nutanix.cassandra.CassandraHeartbeatArg_CassandraNodeData_PeerHealth,def=0" json:"peer_health,omitempty"`
	// Version of the nutanix core package for which the schema in cassandra
	// was previously created/updated. If this does not match the current
	// version, then the schema need to be updated.
	CassandraSchemaVersion *string `protobuf:"bytes,9,opt,name=cassandra_schema_version,json=cassandraSchemaVersion" json:"cassandra_schema_version,omitempty"`
	// Rack and unit (block) information.
	RackableUnitId *int64 `protobuf:"varint,10,opt,name=rackable_unit_id,json=rackableUnitId" json:"rackable_unit_id,omitempty"`
	// List of cassandra token ranges for which the daemon can server leader
	// only paxos reads.
	PaxosLeaderOnlyReadRanges []*CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges `protobuf:"bytes,12,rep,name=paxos_leader_only_read_ranges,json=paxosLeaderOnlyReadRanges" json:"paxos_leader_only_read_ranges,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                                                             `json:"-"`
	XXX_unrecognized          []byte                                                               `json:"-"`
	XXX_sizecache             int32                                                                `json:"-"`
}

func (m *CassandraHeartbeatArg_CassandraNodeData) Reset() {
	*m = CassandraHeartbeatArg_CassandraNodeData{}
}
func (m *CassandraHeartbeatArg_CassandraNodeData) String() string { return proto.CompactTextString(m) }
func (*CassandraHeartbeatArg_CassandraNodeData) ProtoMessage()    {}
func (*CassandraHeartbeatArg_CassandraNodeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{140, 1}
}

func (m *CassandraHeartbeatArg_CassandraNodeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData.Unmarshal(m, b)
}
func (m *CassandraHeartbeatArg_CassandraNodeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData.Marshal(b, m, deterministic)
}
func (m *CassandraHeartbeatArg_CassandraNodeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData.Merge(m, src)
}
func (m *CassandraHeartbeatArg_CassandraNodeData) XXX_Size() int {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData.Size(m)
}
func (m *CassandraHeartbeatArg_CassandraNodeData) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData proto.InternalMessageInfo

const Default_CassandraHeartbeatArg_CassandraNodeData_PeerHealth CassandraHeartbeatArg_CassandraNodeData_PeerHealth = CassandraHeartbeatArg_CassandraNodeData_kDead

func (m *CassandraHeartbeatArg_CassandraNodeData) GetServiceVmId() int64 {
	if m != nil && m.ServiceVmId != nil {
		return *m.ServiceVmId
	}
	return 0
}

func (m *CassandraHeartbeatArg_CassandraNodeData) GetCassandraServiceIp() string {
	if m != nil && m.CassandraServiceIp != nil {
		return *m.CassandraServiceIp
	}
	return ""
}

func (m *CassandraHeartbeatArg_CassandraNodeData) GetCassandraTokenId() string {
	if m != nil && m.CassandraTokenId != nil {
		return *m.CassandraTokenId
	}
	return ""
}

func (m *CassandraHeartbeatArg_CassandraNodeData) GetCassandraStatus() CassandraLimboStateLevel_Type {
	if m != nil && m.CassandraStatus != nil {
		return *m.CassandraStatus
	}
	return CassandraLimboStateLevel_kPreLimbo
}

func (m *CassandraHeartbeatArg_CassandraNodeData) GetLeaderServiceVmId() int64 {
	if m != nil && m.LeaderServiceVmId != nil {
		return *m.LeaderServiceVmId
	}
	return 0
}

func (m *CassandraHeartbeatArg_CassandraNodeData) GetCassandraComponentId() int64 {
	if m != nil && m.CassandraComponentId != nil {
		return *m.CassandraComponentId
	}
	return 0
}

func (m *CassandraHeartbeatArg_CassandraNodeData) GetCassandraIncarnationId() int64 {
	if m != nil && m.CassandraIncarnationId != nil {
		return *m.CassandraIncarnationId
	}
	return 0
}

func (m *CassandraHeartbeatArg_CassandraNodeData) GetPeerHealth() CassandraHeartbeatArg_CassandraNodeData_PeerHealth {
	if m != nil && m.PeerHealth != nil {
		return *m.PeerHealth
	}
	return Default_CassandraHeartbeatArg_CassandraNodeData_PeerHealth
}

func (m *CassandraHeartbeatArg_CassandraNodeData) GetCassandraSchemaVersion() string {
	if m != nil && m.CassandraSchemaVersion != nil {
		return *m.CassandraSchemaVersion
	}
	return ""
}

func (m *CassandraHeartbeatArg_CassandraNodeData) GetRackableUnitId() int64 {
	if m != nil && m.RackableUnitId != nil {
		return *m.RackableUnitId
	}
	return 0
}

func (m *CassandraHeartbeatArg_CassandraNodeData) GetPaxosLeaderOnlyReadRanges() []*CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges {
	if m != nil {
		return m.PaxosLeaderOnlyReadRanges
	}
	return nil
}

type CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges struct {
	// start_token and end_token represent the range for which paxos leader
	// only reads are applicable.
	StartToken *string `protobuf:"bytes,1,opt,name=start_token,json=startToken" json:"start_token,omitempty"`
	EndToken   *string `protobuf:"bytes,2,opt,name=end_token,json=endToken" json:"end_token,omitempty"`
	// List of column families associated with this token range.
	CfDefList            []*CassandraCfDef `protobuf:"bytes,3,rep,name=cf_def_list,json=cfDefList" json:"cf_def_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) Reset() {
	*m = CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges{}
}
func (m *CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) ProtoMessage() {}
func (*CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{140, 1, 0}
}

func (m *CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges.Unmarshal(m, b)
}
func (m *CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges.Marshal(b, m, deterministic)
}
func (m *CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges.Merge(m, src)
}
func (m *CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) XXX_Size() int {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges.Size(m)
}
func (m *CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges proto.InternalMessageInfo

func (m *CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) GetStartToken() string {
	if m != nil && m.StartToken != nil {
		return *m.StartToken
	}
	return ""
}

func (m *CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) GetEndToken() string {
	if m != nil && m.EndToken != nil {
		return *m.EndToken
	}
	return ""
}

func (m *CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges) GetCfDefList() []*CassandraCfDef {
	if m != nil {
		return m.CfDefList
	}
	return nil
}

type CassandraHeartbeatArg_ShardedRangePathConfig struct {
	// Path where writes for keys in 'ranges' should go.
	Path *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// All the ranges stored in 'path'.
	Ranges               []*SSTableMetadataProto_ShardingKeyRange `protobuf:"bytes,2,rep,name=ranges" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *CassandraHeartbeatArg_ShardedRangePathConfig) Reset() {
	*m = CassandraHeartbeatArg_ShardedRangePathConfig{}
}
func (m *CassandraHeartbeatArg_ShardedRangePathConfig) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraHeartbeatArg_ShardedRangePathConfig) ProtoMessage() {}
func (*CassandraHeartbeatArg_ShardedRangePathConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{140, 2}
}

func (m *CassandraHeartbeatArg_ShardedRangePathConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraHeartbeatArg_ShardedRangePathConfig.Unmarshal(m, b)
}
func (m *CassandraHeartbeatArg_ShardedRangePathConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraHeartbeatArg_ShardedRangePathConfig.Marshal(b, m, deterministic)
}
func (m *CassandraHeartbeatArg_ShardedRangePathConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraHeartbeatArg_ShardedRangePathConfig.Merge(m, src)
}
func (m *CassandraHeartbeatArg_ShardedRangePathConfig) XXX_Size() int {
	return xxx_messageInfo_CassandraHeartbeatArg_ShardedRangePathConfig.Size(m)
}
func (m *CassandraHeartbeatArg_ShardedRangePathConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraHeartbeatArg_ShardedRangePathConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraHeartbeatArg_ShardedRangePathConfig proto.InternalMessageInfo

func (m *CassandraHeartbeatArg_ShardedRangePathConfig) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *CassandraHeartbeatArg_ShardedRangePathConfig) GetRanges() []*SSTableMetadataProto_ShardingKeyRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

type CassandraHeartbeatArg_CassandraDiskModeConfig struct {
	// If true, Cassandra will not access the disk. Cassandra must be in
	// forwarding or pre-limbo mode to run in no disk mode. Also if this is
	// true, then it's possible no disks or disk paths are specified in
	// 'sharded_range_path_list' or the 'default_data_directory' below.
	NoDiskMode *bool `protobuf:"varint,1,opt,name=no_disk_mode,json=noDiskMode,def=0" json:"no_disk_mode,omitempty"`
	// Default data directory path, used by daemon for system table
	// writes. If 'no_disk_mode' is true, then this may be unspecified.
	DefaultDataDirectory *string  `protobuf:"bytes,2,opt,name=default_data_directory,json=defaultDataDirectory" json:"default_data_directory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraHeartbeatArg_CassandraDiskModeConfig) Reset() {
	*m = CassandraHeartbeatArg_CassandraDiskModeConfig{}
}
func (m *CassandraHeartbeatArg_CassandraDiskModeConfig) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraHeartbeatArg_CassandraDiskModeConfig) ProtoMessage() {}
func (*CassandraHeartbeatArg_CassandraDiskModeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{140, 3}
}

func (m *CassandraHeartbeatArg_CassandraDiskModeConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraDiskModeConfig.Unmarshal(m, b)
}
func (m *CassandraHeartbeatArg_CassandraDiskModeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraDiskModeConfig.Marshal(b, m, deterministic)
}
func (m *CassandraHeartbeatArg_CassandraDiskModeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraHeartbeatArg_CassandraDiskModeConfig.Merge(m, src)
}
func (m *CassandraHeartbeatArg_CassandraDiskModeConfig) XXX_Size() int {
	return xxx_messageInfo_CassandraHeartbeatArg_CassandraDiskModeConfig.Size(m)
}
func (m *CassandraHeartbeatArg_CassandraDiskModeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraHeartbeatArg_CassandraDiskModeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraHeartbeatArg_CassandraDiskModeConfig proto.InternalMessageInfo

const Default_CassandraHeartbeatArg_CassandraDiskModeConfig_NoDiskMode bool = false

func (m *CassandraHeartbeatArg_CassandraDiskModeConfig) GetNoDiskMode() bool {
	if m != nil && m.NoDiskMode != nil {
		return *m.NoDiskMode
	}
	return Default_CassandraHeartbeatArg_CassandraDiskModeConfig_NoDiskMode
}

func (m *CassandraHeartbeatArg_CassandraDiskModeConfig) GetDefaultDataDirectory() string {
	if m != nil && m.DefaultDataDirectory != nil {
		return *m.DefaultDataDirectory
	}
	return ""
}

type CassandraHeartbeatRet struct {
	HeapUsage            *CassandraGetHeapUsageRet             `protobuf:"bytes,1,opt,name=heap_usage,json=heapUsage" json:"heap_usage,omitempty"`
	StageCounters        *CassandraGetStageCountersRet         `protobuf:"bytes,2,opt,name=stage_counters,json=stageCounters" json:"stage_counters,omitempty"`
	DegradedStats        *CassandraGetDegradedStatsRet         `protobuf:"bytes,3,opt,name=degraded_stats,json=degradedStats" json:"degraded_stats,omitempty"`
	AllKeyspaceSizes     *CassandraDescribeAllKeyspaceSizeRet  `protobuf:"bytes,4,opt,name=all_keyspace_sizes,json=allKeyspaceSizes" json:"all_keyspace_sizes,omitempty"`
	SizeReqs             *CassandraDescribeSizeRequirementsRet `protobuf:"bytes,5,opt,name=size_reqs,json=sizeReqs" json:"size_reqs,omitempty"`
	HealthWarnings       *CassandraGetLocalHealthWarningsRet   `protobuf:"bytes,6,opt,name=health_warnings,json=healthWarnings" json:"health_warnings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *CassandraHeartbeatRet) Reset()         { *m = CassandraHeartbeatRet{} }
func (m *CassandraHeartbeatRet) String() string { return proto.CompactTextString(m) }
func (*CassandraHeartbeatRet) ProtoMessage()    {}
func (*CassandraHeartbeatRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{141}
}

func (m *CassandraHeartbeatRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraHeartbeatRet.Unmarshal(m, b)
}
func (m *CassandraHeartbeatRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraHeartbeatRet.Marshal(b, m, deterministic)
}
func (m *CassandraHeartbeatRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraHeartbeatRet.Merge(m, src)
}
func (m *CassandraHeartbeatRet) XXX_Size() int {
	return xxx_messageInfo_CassandraHeartbeatRet.Size(m)
}
func (m *CassandraHeartbeatRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraHeartbeatRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraHeartbeatRet proto.InternalMessageInfo

func (m *CassandraHeartbeatRet) GetHeapUsage() *CassandraGetHeapUsageRet {
	if m != nil {
		return m.HeapUsage
	}
	return nil
}

func (m *CassandraHeartbeatRet) GetStageCounters() *CassandraGetStageCountersRet {
	if m != nil {
		return m.StageCounters
	}
	return nil
}

func (m *CassandraHeartbeatRet) GetDegradedStats() *CassandraGetDegradedStatsRet {
	if m != nil {
		return m.DegradedStats
	}
	return nil
}

func (m *CassandraHeartbeatRet) GetAllKeyspaceSizes() *CassandraDescribeAllKeyspaceSizeRet {
	if m != nil {
		return m.AllKeyspaceSizes
	}
	return nil
}

func (m *CassandraHeartbeatRet) GetSizeReqs() *CassandraDescribeSizeRequirementsRet {
	if m != nil {
		return m.SizeReqs
	}
	return nil
}

func (m *CassandraHeartbeatRet) GetHealthWarnings() *CassandraGetLocalHealthWarningsRet {
	if m != nil {
		return m.HealthWarnings
	}
	return nil
}

// This message is used to instruct Cassandra daemon to start a new snapshot.
// The snapshot started here will be completed when the next (new) snapshot RPC
// gets invoked.
// Note: Snapshots are supported only for CFs which allow leader-only reads.
type CassandraStartNewSnapshotArg struct {
	// This is the new snapshot id that will be assigned to the new SStables and
	// Memtables.
	SnapshotId           *int64   `protobuf:"varint,1,opt,name=snapshot_id,json=snapshotId" json:"snapshot_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraStartNewSnapshotArg) Reset()         { *m = CassandraStartNewSnapshotArg{} }
func (m *CassandraStartNewSnapshotArg) String() string { return proto.CompactTextString(m) }
func (*CassandraStartNewSnapshotArg) ProtoMessage()    {}
func (*CassandraStartNewSnapshotArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{142}
}

func (m *CassandraStartNewSnapshotArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraStartNewSnapshotArg.Unmarshal(m, b)
}
func (m *CassandraStartNewSnapshotArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraStartNewSnapshotArg.Marshal(b, m, deterministic)
}
func (m *CassandraStartNewSnapshotArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraStartNewSnapshotArg.Merge(m, src)
}
func (m *CassandraStartNewSnapshotArg) XXX_Size() int {
	return xxx_messageInfo_CassandraStartNewSnapshotArg.Size(m)
}
func (m *CassandraStartNewSnapshotArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraStartNewSnapshotArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraStartNewSnapshotArg proto.InternalMessageInfo

func (m *CassandraStartNewSnapshotArg) GetSnapshotId() int64 {
	if m != nil && m.SnapshotId != nil {
		return *m.SnapshotId
	}
	return 0
}

type CassandraStartNewSnapshotRet struct {
	// This is the snapshot id that can be considered completed on this node.
	// That is, this was the previous on-going snapshot id before the
	// StartNewSnapshot operation was invoked.
	SnapshotIdCompleted  *int64   `protobuf:"varint,1,opt,name=snapshot_id_completed,json=snapshotIdCompleted" json:"snapshot_id_completed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraStartNewSnapshotRet) Reset()         { *m = CassandraStartNewSnapshotRet{} }
func (m *CassandraStartNewSnapshotRet) String() string { return proto.CompactTextString(m) }
func (*CassandraStartNewSnapshotRet) ProtoMessage()    {}
func (*CassandraStartNewSnapshotRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{143}
}

func (m *CassandraStartNewSnapshotRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraStartNewSnapshotRet.Unmarshal(m, b)
}
func (m *CassandraStartNewSnapshotRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraStartNewSnapshotRet.Marshal(b, m, deterministic)
}
func (m *CassandraStartNewSnapshotRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraStartNewSnapshotRet.Merge(m, src)
}
func (m *CassandraStartNewSnapshotRet) XXX_Size() int {
	return xxx_messageInfo_CassandraStartNewSnapshotRet.Size(m)
}
func (m *CassandraStartNewSnapshotRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraStartNewSnapshotRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraStartNewSnapshotRet proto.InternalMessageInfo

func (m *CassandraStartNewSnapshotRet) GetSnapshotIdCompleted() int64 {
	if m != nil && m.SnapshotIdCompleted != nil {
		return *m.SnapshotIdCompleted
	}
	return 0
}

type SSTableJournalFileData struct {
	Path                 []string `protobuf:"bytes,1,rep,name=path" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSTableJournalFileData) Reset()         { *m = SSTableJournalFileData{} }
func (m *SSTableJournalFileData) String() string { return proto.CompactTextString(m) }
func (*SSTableJournalFileData) ProtoMessage()    {}
func (*SSTableJournalFileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{144}
}

func (m *SSTableJournalFileData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSTableJournalFileData.Unmarshal(m, b)
}
func (m *SSTableJournalFileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSTableJournalFileData.Marshal(b, m, deterministic)
}
func (m *SSTableJournalFileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSTableJournalFileData.Merge(m, src)
}
func (m *SSTableJournalFileData) XXX_Size() int {
	return xxx_messageInfo_SSTableJournalFileData.Size(m)
}
func (m *SSTableJournalFileData) XXX_DiscardUnknown() {
	xxx_messageInfo_SSTableJournalFileData.DiscardUnknown(m)
}

var xxx_messageInfo_SSTableJournalFileData proto.InternalMessageInfo

func (m *SSTableJournalFileData) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

// This message encapsulates the load information of cassandra node.
type CassandraNodeInfo struct {
	// Ip address of the node.
	NodeIp *string `protobuf:"bytes,1,opt,name=node_ip,json=nodeIp" json:"node_ip,omitempty"`
	// Svm id of the node.
	SvmId *int64 `protobuf:"varint,2,opt,name=svm_id,json=svmId" json:"svm_id,omitempty"`
	// Generation id of heartbeat state of the node.
	Generation *int64 `protobuf:"varint,3,opt,name=generation" json:"generation,omitempty"`
	// Version of heartbeat state of the node.
	MaxVersion *int64 `protobuf:"varint,4,opt,name=max_version,json=maxVersion" json:"max_version,omitempty"`
	// Load value of the node.
	LoadValue *float64 `protobuf:"fixed64,5,opt,name=load_value,json=loadValue" json:"load_value,omitempty"`
	// Version of the load value of the node.
	LoadVersion          *int32   `protobuf:"varint,6,opt,name=load_version,json=loadVersion" json:"load_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraNodeInfo) Reset()         { *m = CassandraNodeInfo{} }
func (m *CassandraNodeInfo) String() string { return proto.CompactTextString(m) }
func (*CassandraNodeInfo) ProtoMessage()    {}
func (*CassandraNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{145}
}

func (m *CassandraNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraNodeInfo.Unmarshal(m, b)
}
func (m *CassandraNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraNodeInfo.Marshal(b, m, deterministic)
}
func (m *CassandraNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraNodeInfo.Merge(m, src)
}
func (m *CassandraNodeInfo) XXX_Size() int {
	return xxx_messageInfo_CassandraNodeInfo.Size(m)
}
func (m *CassandraNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraNodeInfo proto.InternalMessageInfo

func (m *CassandraNodeInfo) GetNodeIp() string {
	if m != nil && m.NodeIp != nil {
		return *m.NodeIp
	}
	return ""
}

func (m *CassandraNodeInfo) GetSvmId() int64 {
	if m != nil && m.SvmId != nil {
		return *m.SvmId
	}
	return 0
}

func (m *CassandraNodeInfo) GetGeneration() int64 {
	if m != nil && m.Generation != nil {
		return *m.Generation
	}
	return 0
}

func (m *CassandraNodeInfo) GetMaxVersion() int64 {
	if m != nil && m.MaxVersion != nil {
		return *m.MaxVersion
	}
	return 0
}

func (m *CassandraNodeInfo) GetLoadValue() float64 {
	if m != nil && m.LoadValue != nil {
		return *m.LoadValue
	}
	return 0
}

func (m *CassandraNodeInfo) GetLoadVersion() int32 {
	if m != nil && m.LoadVersion != nil {
		return *m.LoadVersion
	}
	return 0
}

// This message acts as Syn or Ack message in the load information exchange
// between nodes. Every node holds the load information of all the nodes in
// the cluster. Cassandra daemon exchanges the information with other
// daemons by sending this message.
type CassandraNodeInfoSynAck struct {
	NodeInfoList         []*CassandraNodeInfo `protobuf:"bytes,1,rep,name=node_info_list,json=nodeInfoList" json:"node_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CassandraNodeInfoSynAck) Reset()         { *m = CassandraNodeInfoSynAck{} }
func (m *CassandraNodeInfoSynAck) String() string { return proto.CompactTextString(m) }
func (*CassandraNodeInfoSynAck) ProtoMessage()    {}
func (*CassandraNodeInfoSynAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{146}
}

func (m *CassandraNodeInfoSynAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraNodeInfoSynAck.Unmarshal(m, b)
}
func (m *CassandraNodeInfoSynAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraNodeInfoSynAck.Marshal(b, m, deterministic)
}
func (m *CassandraNodeInfoSynAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraNodeInfoSynAck.Merge(m, src)
}
func (m *CassandraNodeInfoSynAck) XXX_Size() int {
	return xxx_messageInfo_CassandraNodeInfoSynAck.Size(m)
}
func (m *CassandraNodeInfoSynAck) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraNodeInfoSynAck.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraNodeInfoSynAck proto.InternalMessageInfo

func (m *CassandraNodeInfoSynAck) GetNodeInfoList() []*CassandraNodeInfo {
	if m != nil {
		return m.NodeInfoList
	}
	return nil
}

type CassandraKeyspaceCfPair struct {
	// The keyspace name.
	Keyspace *string `protobuf:"bytes,1,req,name=keyspace" json:"keyspace,omitempty"`
	// The column family name.
	ColumnFamily         *string  `protobuf:"bytes,2,req,name=column_family,json=columnFamily" json:"column_family,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraKeyspaceCfPair) Reset()         { *m = CassandraKeyspaceCfPair{} }
func (m *CassandraKeyspaceCfPair) String() string { return proto.CompactTextString(m) }
func (*CassandraKeyspaceCfPair) ProtoMessage()    {}
func (*CassandraKeyspaceCfPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{147}
}

func (m *CassandraKeyspaceCfPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraKeyspaceCfPair.Unmarshal(m, b)
}
func (m *CassandraKeyspaceCfPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraKeyspaceCfPair.Marshal(b, m, deterministic)
}
func (m *CassandraKeyspaceCfPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraKeyspaceCfPair.Merge(m, src)
}
func (m *CassandraKeyspaceCfPair) XXX_Size() int {
	return xxx_messageInfo_CassandraKeyspaceCfPair.Size(m)
}
func (m *CassandraKeyspaceCfPair) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraKeyspaceCfPair.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraKeyspaceCfPair proto.InternalMessageInfo

func (m *CassandraKeyspaceCfPair) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraKeyspaceCfPair) GetColumnFamily() string {
	if m != nil && m.ColumnFamily != nil {
		return *m.ColumnFamily
	}
	return ""
}

type CassandraQueryLeaderOnlyReadStatusArg struct {
	// Keyspace and column family name list.
	KeyspaceCfList []*CassandraKeyspaceCfPair `protobuf:"bytes,1,rep,name=keyspace_cf_list,json=keyspaceCfList" json:"keyspace_cf_list,omitempty"`
	// Start token.
	StartToken *string `protobuf:"bytes,2,req,name=start_token,json=startToken" json:"start_token,omitempty"`
	// End token.
	EndToken             *string  `protobuf:"bytes,3,req,name=end_token,json=endToken" json:"end_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraQueryLeaderOnlyReadStatusArg) Reset()         { *m = CassandraQueryLeaderOnlyReadStatusArg{} }
func (m *CassandraQueryLeaderOnlyReadStatusArg) String() string { return proto.CompactTextString(m) }
func (*CassandraQueryLeaderOnlyReadStatusArg) ProtoMessage()    {}
func (*CassandraQueryLeaderOnlyReadStatusArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{148}
}

func (m *CassandraQueryLeaderOnlyReadStatusArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusArg.Unmarshal(m, b)
}
func (m *CassandraQueryLeaderOnlyReadStatusArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusArg.Marshal(b, m, deterministic)
}
func (m *CassandraQueryLeaderOnlyReadStatusArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusArg.Merge(m, src)
}
func (m *CassandraQueryLeaderOnlyReadStatusArg) XXX_Size() int {
	return xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusArg.Size(m)
}
func (m *CassandraQueryLeaderOnlyReadStatusArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusArg proto.InternalMessageInfo

func (m *CassandraQueryLeaderOnlyReadStatusArg) GetKeyspaceCfList() []*CassandraKeyspaceCfPair {
	if m != nil {
		return m.KeyspaceCfList
	}
	return nil
}

func (m *CassandraQueryLeaderOnlyReadStatusArg) GetStartToken() string {
	if m != nil && m.StartToken != nil {
		return *m.StartToken
	}
	return ""
}

func (m *CassandraQueryLeaderOnlyReadStatusArg) GetEndToken() string {
	if m != nil && m.EndToken != nil {
		return *m.EndToken
	}
	return ""
}

type CassandraQueryLeaderOnlyReadStatusRet struct {
	// Each field in the list indicates whether leader only read is disabled by
	// configuration for the corresponding cf in the same index in
	// 'keyspace_cf_list' of request. The list should have the same size as
	// 'keyspace_cf_list' in request. Even if leader only read is configured to
	// be true for a cf, it may not be available as the scans to enable leader
	// only reads are yet to finish. In this case, the bool value in
	// 'leader_only_read_available_list' indicates that.
	LeaderOnlyReadDisabledList []bool `protobuf:"varint,1,rep,name=leader_only_read_disabled_list,json=leaderOnlyReadDisabledList" json:"leader_only_read_disabled_list,omitempty"`
	// Each field in the list indicates whether leader only read is available for
	// the corresponding cf in the same index in 'keyspace_cf_list' of request.
	// Leader only read can be available only if the leader only read is
	// configured to be enabled and scan has completed.
	// The list should have the same size as 'keyspace_cf_list' in request.
	LeaderOnlyReadAvailableList []bool   `protobuf:"varint,2,rep,name=leader_only_read_available_list,json=leaderOnlyReadAvailableList" json:"leader_only_read_available_list,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *CassandraQueryLeaderOnlyReadStatusRet) Reset()         { *m = CassandraQueryLeaderOnlyReadStatusRet{} }
func (m *CassandraQueryLeaderOnlyReadStatusRet) String() string { return proto.CompactTextString(m) }
func (*CassandraQueryLeaderOnlyReadStatusRet) ProtoMessage()    {}
func (*CassandraQueryLeaderOnlyReadStatusRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{149}
}

func (m *CassandraQueryLeaderOnlyReadStatusRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusRet.Unmarshal(m, b)
}
func (m *CassandraQueryLeaderOnlyReadStatusRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusRet.Marshal(b, m, deterministic)
}
func (m *CassandraQueryLeaderOnlyReadStatusRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusRet.Merge(m, src)
}
func (m *CassandraQueryLeaderOnlyReadStatusRet) XXX_Size() int {
	return xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusRet.Size(m)
}
func (m *CassandraQueryLeaderOnlyReadStatusRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraQueryLeaderOnlyReadStatusRet proto.InternalMessageInfo

func (m *CassandraQueryLeaderOnlyReadStatusRet) GetLeaderOnlyReadDisabledList() []bool {
	if m != nil {
		return m.LeaderOnlyReadDisabledList
	}
	return nil
}

func (m *CassandraQueryLeaderOnlyReadStatusRet) GetLeaderOnlyReadAvailableList() []bool {
	if m != nil {
		return m.LeaderOnlyReadAvailableList
	}
	return nil
}

type CassandraScrubSSTableWithInvalidSnapshotIdArg struct {
	// Keyspace and column family name list.
	KeyspaceCfList []*CassandraKeyspaceCfPair `protobuf:"bytes,1,rep,name=keyspace_cf_list,json=keyspaceCfList" json:"keyspace_cf_list,omitempty"`
	// Range to scrub the sstable with invalid snapshot id.
	Range                *CassandraTokenRange `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CassandraScrubSSTableWithInvalidSnapshotIdArg) Reset() {
	*m = CassandraScrubSSTableWithInvalidSnapshotIdArg{}
}
func (m *CassandraScrubSSTableWithInvalidSnapshotIdArg) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraScrubSSTableWithInvalidSnapshotIdArg) ProtoMessage() {}
func (*CassandraScrubSSTableWithInvalidSnapshotIdArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{150}
}

func (m *CassandraScrubSSTableWithInvalidSnapshotIdArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdArg.Unmarshal(m, b)
}
func (m *CassandraScrubSSTableWithInvalidSnapshotIdArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdArg.Marshal(b, m, deterministic)
}
func (m *CassandraScrubSSTableWithInvalidSnapshotIdArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdArg.Merge(m, src)
}
func (m *CassandraScrubSSTableWithInvalidSnapshotIdArg) XXX_Size() int {
	return xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdArg.Size(m)
}
func (m *CassandraScrubSSTableWithInvalidSnapshotIdArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdArg proto.InternalMessageInfo

func (m *CassandraScrubSSTableWithInvalidSnapshotIdArg) GetKeyspaceCfList() []*CassandraKeyspaceCfPair {
	if m != nil {
		return m.KeyspaceCfList
	}
	return nil
}

func (m *CassandraScrubSSTableWithInvalidSnapshotIdArg) GetRange() *CassandraTokenRange {
	if m != nil {
		return m.Range
	}
	return nil
}

type CassandraScrubSSTableWithInvalidSnapshotIdRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraScrubSSTableWithInvalidSnapshotIdRet) Reset() {
	*m = CassandraScrubSSTableWithInvalidSnapshotIdRet{}
}
func (m *CassandraScrubSSTableWithInvalidSnapshotIdRet) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraScrubSSTableWithInvalidSnapshotIdRet) ProtoMessage() {}
func (*CassandraScrubSSTableWithInvalidSnapshotIdRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{151}
}

func (m *CassandraScrubSSTableWithInvalidSnapshotIdRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdRet.Unmarshal(m, b)
}
func (m *CassandraScrubSSTableWithInvalidSnapshotIdRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdRet.Marshal(b, m, deterministic)
}
func (m *CassandraScrubSSTableWithInvalidSnapshotIdRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdRet.Merge(m, src)
}
func (m *CassandraScrubSSTableWithInvalidSnapshotIdRet) XXX_Size() int {
	return xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdRet.Size(m)
}
func (m *CassandraScrubSSTableWithInvalidSnapshotIdRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraScrubSSTableWithInvalidSnapshotIdRet proto.InternalMessageInfo

type CassandraGetEstimatedKeyCountArg struct {
	// Name of the keyspace.
	Keyspace *string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	// Name of the column family.
	ColumnFamily *string `protobuf:"bytes,2,opt,name=column_family,json=columnFamily" json:"column_family,omitempty"`
	// Token range.
	TokenRange           *CassandraTokenRange `protobuf:"bytes,3,opt,name=token_range,json=tokenRange" json:"token_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CassandraGetEstimatedKeyCountArg) Reset()         { *m = CassandraGetEstimatedKeyCountArg{} }
func (m *CassandraGetEstimatedKeyCountArg) String() string { return proto.CompactTextString(m) }
func (*CassandraGetEstimatedKeyCountArg) ProtoMessage()    {}
func (*CassandraGetEstimatedKeyCountArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{152}
}

func (m *CassandraGetEstimatedKeyCountArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetEstimatedKeyCountArg.Unmarshal(m, b)
}
func (m *CassandraGetEstimatedKeyCountArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetEstimatedKeyCountArg.Marshal(b, m, deterministic)
}
func (m *CassandraGetEstimatedKeyCountArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetEstimatedKeyCountArg.Merge(m, src)
}
func (m *CassandraGetEstimatedKeyCountArg) XXX_Size() int {
	return xxx_messageInfo_CassandraGetEstimatedKeyCountArg.Size(m)
}
func (m *CassandraGetEstimatedKeyCountArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetEstimatedKeyCountArg.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetEstimatedKeyCountArg proto.InternalMessageInfo

func (m *CassandraGetEstimatedKeyCountArg) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraGetEstimatedKeyCountArg) GetColumnFamily() string {
	if m != nil && m.ColumnFamily != nil {
		return *m.ColumnFamily
	}
	return ""
}

func (m *CassandraGetEstimatedKeyCountArg) GetTokenRange() *CassandraTokenRange {
	if m != nil {
		return m.TokenRange
	}
	return nil
}

type CassandraGetEstimatedKeyCountRet struct {
	// Key count can be estimated only to column families with single column.
	KeyCount             *int64   `protobuf:"varint,1,opt,name=key_count,json=keyCount,def=-1" json:"key_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraGetEstimatedKeyCountRet) Reset()         { *m = CassandraGetEstimatedKeyCountRet{} }
func (m *CassandraGetEstimatedKeyCountRet) String() string { return proto.CompactTextString(m) }
func (*CassandraGetEstimatedKeyCountRet) ProtoMessage()    {}
func (*CassandraGetEstimatedKeyCountRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d7d4be67fa79c77, []int{153}
}

func (m *CassandraGetEstimatedKeyCountRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraGetEstimatedKeyCountRet.Unmarshal(m, b)
}
func (m *CassandraGetEstimatedKeyCountRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraGetEstimatedKeyCountRet.Marshal(b, m, deterministic)
}
func (m *CassandraGetEstimatedKeyCountRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraGetEstimatedKeyCountRet.Merge(m, src)
}
func (m *CassandraGetEstimatedKeyCountRet) XXX_Size() int {
	return xxx_messageInfo_CassandraGetEstimatedKeyCountRet.Size(m)
}
func (m *CassandraGetEstimatedKeyCountRet) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraGetEstimatedKeyCountRet.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraGetEstimatedKeyCountRet proto.InternalMessageInfo

const Default_CassandraGetEstimatedKeyCountRet_KeyCount int64 = -1

func (m *CassandraGetEstimatedKeyCountRet) GetKeyCount() int64 {
	if m != nil && m.KeyCount != nil {
		return *m.KeyCount
	}
	return Default_CassandraGetEstimatedKeyCountRet_KeyCount
}

func init() {
	proto.RegisterEnum("nutanix.cassandra.CassandraError_Type", CassandraError_Type_name, CassandraError_Type_value)
	proto.RegisterEnum("nutanix.cassandra.CassandraConsistencyLevel_Type", CassandraConsistencyLevel_Type_name, CassandraConsistencyLevel_Type_value)
	proto.RegisterEnum("nutanix.cassandra.CassandraLimboStateLevel_Type", CassandraLimboStateLevel_Type_name, CassandraLimboStateLevel_Type_value)
	proto.RegisterEnum("nutanix.cassandra.CassandraIndexOperator_Type", CassandraIndexOperator_Type_name, CassandraIndexOperator_Type_value)
	proto.RegisterEnum("nutanix.cassandra.CassandraForceCompactionStatus_Type", CassandraForceCompactionStatus_Type_name, CassandraForceCompactionStatus_Type_value)
	proto.RegisterEnum("nutanix.cassandra.CassandraInternalPaxosClock_PaxosValueState", CassandraInternalPaxosClock_PaxosValueState_name, CassandraInternalPaxosClock_PaxosValueState_value)
	proto.RegisterEnum("nutanix.cassandra.CassandraIndexType_Type", CassandraIndexType_Type_name, CassandraIndexType_Type_value)
	proto.RegisterEnum("nutanix.cassandra.CassandraPauseState_Type", CassandraPauseState_Type_name, CassandraPauseState_Type_value)
	proto.RegisterEnum("nutanix.cassandra.CassandraFeature_Type", CassandraFeature_Type_name, CassandraFeature_Type_value)
	proto.RegisterEnum("nutanix.cassandra.CassandraHeartbeatArg_CassandraHealthCounters_Type", CassandraHeartbeatArg_CassandraHealthCounters_Type_name, CassandraHeartbeatArg_CassandraHealthCounters_Type_value)
	proto.RegisterEnum("nutanix.cassandra.CassandraHeartbeatArg_CassandraNodeData_PeerHealth", CassandraHeartbeatArg_CassandraNodeData_PeerHealth_name, CassandraHeartbeatArg_CassandraNodeData_PeerHealth_value)
	proto.RegisterType((*CassandraError)(nil), "nutanix.cassandra.CassandraError")
	proto.RegisterType((*CassandraConsistencyLevel)(nil), "nutanix.cassandra.CassandraConsistencyLevel")
	proto.RegisterType((*CassandraLimboStateLevel)(nil), "nutanix.cassandra.CassandraLimboStateLevel")
	proto.RegisterType((*CassandraIndexOperator)(nil), "nutanix.cassandra.CassandraIndexOperator")
	proto.RegisterType((*CassandraForceCompactionStatus)(nil), "nutanix.cassandra.CassandraForceCompactionStatus")
	proto.RegisterType((*CassandraAuthenticationRequest)(nil), "nutanix.cassandra.CassandraAuthenticationRequest")
	proto.RegisterType((*CassandraAuthenticationRequest_Credentials)(nil), "nutanix.cassandra.CassandraAuthenticationRequest.Credentials")
	proto.RegisterType((*CassandraPaxosVersion)(nil), "nutanix.cassandra.CassandraPaxosVersion")
	proto.RegisterType((*CassandraInternalPaxosClock)(nil), "nutanix.cassandra.CassandraInternalPaxosClock")
	proto.RegisterType((*CassandraInternalPaxosClock_PaxosProposalNumberProto)(nil), "nutanix.cassandra.CassandraInternalPaxosClock.PaxosProposalNumberProto")
	proto.RegisterType((*CassandraClock)(nil), "nutanix.cassandra.CassandraClock")
	proto.RegisterType((*CassandraValue)(nil), "nutanix.cassandra.CassandraValue")
	proto.RegisterType((*CassandraValue_ValueOffset)(nil), "nutanix.cassandra.CassandraValue.ValueOffset")
	proto.RegisterType((*CassandraColumn)(nil), "nutanix.cassandra.CassandraColumn")
	proto.RegisterType((*CassandraSuperColumn)(nil), "nutanix.cassandra.CassandraSuperColumn")
	proto.RegisterType((*CassandraColumnOrSuperColumn)(nil), "nutanix.cassandra.CassandraColumnOrSuperColumn")
	proto.RegisterType((*CassandraColumnList)(nil), "nutanix.cassandra.CassandraColumnList")
	proto.RegisterType((*CassandraColumnParent)(nil), "nutanix.cassandra.CassandraColumnParent")
	proto.RegisterType((*CassandraColumnPath)(nil), "nutanix.cassandra.CassandraColumnPath")
	proto.RegisterType((*CassandraSliceRange)(nil), "nutanix.cassandra.CassandraSliceRange")
	proto.RegisterType((*CassandraSlicePredicate)(nil), "nutanix.cassandra.CassandraSlicePredicate")
	proto.RegisterType((*CassandraIndexExpression)(nil), "nutanix.cassandra.CassandraIndexExpression")
	proto.RegisterType((*CassandraIndexClause)(nil), "nutanix.cassandra.CassandraIndexClause")
	proto.RegisterType((*CassandraKeyRange)(nil), "nutanix.cassandra.CassandraKeyRange")
	proto.RegisterType((*CassandraKeySlice)(nil), "nutanix.cassandra.CassandraKeySlice")
	proto.RegisterType((*CassandraKeyCount)(nil), "nutanix.cassandra.CassandraKeyCount")
	proto.RegisterType((*CassandraDeletion)(nil), "nutanix.cassandra.CassandraDeletion")
	proto.RegisterType((*CassandraMutation)(nil), "nutanix.cassandra.CassandraMutation")
	proto.RegisterType((*CassandraMutationsList)(nil), "nutanix.cassandra.CassandraMutationsList")
	proto.RegisterType((*CassandraMutationsList_MutationsList)(nil), "nutanix.cassandra.CassandraMutationsList.MutationsList")
	proto.RegisterType((*CassandraIndexType)(nil), "nutanix.cassandra.CassandraIndexType")
	proto.RegisterType((*CassandraColumnDef)(nil), "nutanix.cassandra.CassandraColumnDef")
	proto.RegisterType((*CassandraCfDef)(nil), "nutanix.cassandra.CassandraCfDef")
	proto.RegisterType((*CassandraKsDef)(nil), "nutanix.cassandra.CassandraKsDef")
	proto.RegisterType((*CassandraKsDef_StrategyOptions)(nil), "nutanix.cassandra.CassandraKsDef.StrategyOptions")
	proto.RegisterType((*CassandraTokenRange)(nil), "nutanix.cassandra.CassandraTokenRange")
	proto.RegisterType((*CassandraActivityTracesProto)(nil), "nutanix.cassandra.CassandraActivityTracesProto")
	proto.RegisterType((*CassandraActivityTracesProto_TraceProto)(nil), "nutanix.cassandra.CassandraActivityTracesProto.TraceProto")
	proto.RegisterType((*CassandraActivityTracesProto_ActivityProto)(nil), "nutanix.cassandra.CassandraActivityTracesProto.ActivityProto")
	proto.RegisterType((*CassandraCfSizeDef)(nil), "nutanix.cassandra.CassandraCfSizeDef")
	proto.RegisterType((*CassandraKsSizeDef)(nil), "nutanix.cassandra.CassandraKsSizeDef")
	proto.RegisterType((*MbeanRequestInfo)(nil), "nutanix.cassandra.MbeanRequestInfo")
	proto.RegisterType((*CassandraLoginArg)(nil), "nutanix.cassandra.CassandraLoginArg")
	proto.RegisterType((*CassandraLoginRet)(nil), "nutanix.cassandra.CassandraLoginRet")
	proto.RegisterType((*CassandraGetArg)(nil), "nutanix.cassandra.CassandraGetArg")
	proto.RegisterType((*CassandraGetRet)(nil), "nutanix.cassandra.CassandraGetRet")
	proto.RegisterType((*CassandraGetSliceArg)(nil), "nutanix.cassandra.CassandraGetSliceArg")
	proto.RegisterType((*CassandraGetSliceRet)(nil), "nutanix.cassandra.CassandraGetSliceRet")
	proto.RegisterType((*CassandraGetCountArg)(nil), "nutanix.cassandra.CassandraGetCountArg")
	proto.RegisterType((*CassandraGetCountRet)(nil), "nutanix.cassandra.CassandraGetCountRet")
	proto.RegisterType((*CassandraMultigetSliceArg)(nil), "nutanix.cassandra.CassandraMultigetSliceArg")
	proto.RegisterType((*CassandraMultigetSliceRet)(nil), "nutanix.cassandra.CassandraMultigetSliceRet")
	proto.RegisterType((*CassandraMultigetCountArg)(nil), "nutanix.cassandra.CassandraMultigetCountArg")
	proto.RegisterType((*CassandraMultigetCountRet)(nil), "nutanix.cassandra.CassandraMultigetCountRet")
	proto.RegisterType((*CassandraGetRangeSlicesArg)(nil), "nutanix.cassandra.CassandraGetRangeSlicesArg")
	proto.RegisterType((*CassandraGetRangeSlicesRet)(nil), "nutanix.cassandra.CassandraGetRangeSlicesRet")
	proto.RegisterType((*CassandraGetIndexedSlicesArg)(nil), "nutanix.cassandra.CassandraGetIndexedSlicesArg")
	proto.RegisterType((*CassandraGetIndexedSlicesRet)(nil), "nutanix.cassandra.CassandraGetIndexedSlicesRet")
	proto.RegisterType((*CassandraInsertArg)(nil), "nutanix.cassandra.CassandraInsertArg")
	proto.RegisterType((*CassandraInsertRet)(nil), "nutanix.cassandra.CassandraInsertRet")
	proto.RegisterType((*CassandraRemoveArg)(nil), "nutanix.cassandra.CassandraRemoveArg")
	proto.RegisterType((*CassandraRemoveRet)(nil), "nutanix.cassandra.CassandraRemoveRet")
	proto.RegisterType((*CassandraBatchMutateArg)(nil), "nutanix.cassandra.CassandraBatchMutateArg")
	proto.RegisterType((*CassandraBatchMutateRet)(nil), "nutanix.cassandra.CassandraBatchMutateRet")
	proto.RegisterType((*CassandraTruncateArg)(nil), "nutanix.cassandra.CassandraTruncateArg")
	proto.RegisterType((*CassandraTruncateRet)(nil), "nutanix.cassandra.CassandraTruncateRet")
	proto.RegisterType((*CassandraDescribeSchemaVersionsArg)(nil), "nutanix.cassandra.CassandraDescribeSchemaVersionsArg")
	proto.RegisterType((*CassandraDescribeSchemaVersionsRet)(nil), "nutanix.cassandra.CassandraDescribeSchemaVersionsRet")
	proto.RegisterType((*CassandraDescribeSchemaVersionsRet_Entry)(nil), "nutanix.cassandra.CassandraDescribeSchemaVersionsRet.Entry")
	proto.RegisterType((*CassandraDescribeKeyspacesArg)(nil), "nutanix.cassandra.CassandraDescribeKeyspacesArg")
	proto.RegisterType((*CassandraDescribeKeyspacesRet)(nil), "nutanix.cassandra.CassandraDescribeKeyspacesRet")
	proto.RegisterType((*CassandraDescribeClusterNameArg)(nil), "nutanix.cassandra.CassandraDescribeClusterNameArg")
	proto.RegisterType((*CassandraDescribeClusterNameRet)(nil), "nutanix.cassandra.CassandraDescribeClusterNameRet")
	proto.RegisterType((*CassandraDescribeVersionArg)(nil), "nutanix.cassandra.CassandraDescribeVersionArg")
	proto.RegisterType((*CassandraDescribeVersionRet)(nil), "nutanix.cassandra.CassandraDescribeVersionRet")
	proto.RegisterType((*CassandraDescribeRingArg)(nil), "nutanix.cassandra.CassandraDescribeRingArg")
	proto.RegisterType((*CassandraDescribeRingRet)(nil), "nutanix.cassandra.CassandraDescribeRingRet")
	proto.RegisterType((*CassandraDescribePartitionerArg)(nil), "nutanix.cassandra.CassandraDescribePartitionerArg")
	proto.RegisterType((*CassandraDescribePartitionerRet)(nil), "nutanix.cassandra.CassandraDescribePartitionerRet")
	proto.RegisterType((*CassandraDescribeKeyspaceArg)(nil), "nutanix.cassandra.CassandraDescribeKeyspaceArg")
	proto.RegisterType((*CassandraDescribeKeyspaceRet)(nil), "nutanix.cassandra.CassandraDescribeKeyspaceRet")
	proto.RegisterType((*CassandraDescribeSplitsArg)(nil), "nutanix.cassandra.CassandraDescribeSplitsArg")
	proto.RegisterType((*CassandraDescribeSplitsRet)(nil), "nutanix.cassandra.CassandraDescribeSplitsRet")
	proto.RegisterType((*CassandraSystemAddColumnFamilyArg)(nil), "nutanix.cassandra.CassandraSystemAddColumnFamilyArg")
	proto.RegisterType((*CassandraSystemAddColumnFamilyRet)(nil), "nutanix.cassandra.CassandraSystemAddColumnFamilyRet")
	proto.RegisterType((*CassandraSystemDropColumnFamilyArg)(nil), "nutanix.cassandra.CassandraSystemDropColumnFamilyArg")
	proto.RegisterType((*CassandraSystemDropColumnFamilyRet)(nil), "nutanix.cassandra.CassandraSystemDropColumnFamilyRet")
	proto.RegisterType((*CassandraSystemRenameColumnFamilyArg)(nil), "nutanix.cassandra.CassandraSystemRenameColumnFamilyArg")
	proto.RegisterType((*CassandraSystemRenameColumnFamilyRet)(nil), "nutanix.cassandra.CassandraSystemRenameColumnFamilyRet")
	proto.RegisterType((*CassandraSystemAddKeyspaceArg)(nil), "nutanix.cassandra.CassandraSystemAddKeyspaceArg")
	proto.RegisterType((*CassandraSystemAddKeyspaceRet)(nil), "nutanix.cassandra.CassandraSystemAddKeyspaceRet")
	proto.RegisterType((*CassandraSystemDropKeyspaceArg)(nil), "nutanix.cassandra.CassandraSystemDropKeyspaceArg")
	proto.RegisterType((*CassandraSystemDropKeyspaceRet)(nil), "nutanix.cassandra.CassandraSystemDropKeyspaceRet")
	proto.RegisterType((*CassandraSystemUpdateKeyspaceArg)(nil), "nutanix.cassandra.CassandraSystemUpdateKeyspaceArg")
	proto.RegisterType((*CassandraSystemUpdateKeyspaceRet)(nil), "nutanix.cassandra.CassandraSystemUpdateKeyspaceRet")
	proto.RegisterType((*CassandraSystemUpdateColumnFamilyArg)(nil), "nutanix.cassandra.CassandraSystemUpdateColumnFamilyArg")
	proto.RegisterType((*CassandraSystemUpdateColumnFamilyRet)(nil), "nutanix.cassandra.CassandraSystemUpdateColumnFamilyRet")
	proto.RegisterType((*CassandraPauseState)(nil), "nutanix.cassandra.CassandraPauseState")
	proto.RegisterType((*CassandraPauseCassandraArg)(nil), "nutanix.cassandra.CassandraPauseCassandraArg")
	proto.RegisterType((*CassandraPauseCassandraRet)(nil), "nutanix.cassandra.CassandraPauseCassandraRet")
	proto.RegisterType((*CassandraGetLimboStateArg)(nil), "nutanix.cassandra.CassandraGetLimboStateArg")
	proto.RegisterType((*CassandraGetLimboStateRet)(nil), "nutanix.cassandra.CassandraGetLimboStateRet")
	proto.RegisterType((*CassandraChangeLimboStateArg)(nil), "nutanix.cassandra.CassandraChangeLimboStateArg")
	proto.RegisterType((*CassandraChangeLimboStateRet)(nil), "nutanix.cassandra.CassandraChangeLimboStateRet")
	proto.RegisterType((*CassandraDeleteKeyRangeFromNodeArg)(nil), "nutanix.cassandra.CassandraDeleteKeyRangeFromNodeArg")
	proto.RegisterType((*CassandraDeleteKeyRangeFromNodeRet)(nil), "nutanix.cassandra.CassandraDeleteKeyRangeFromNodeRet")
	proto.RegisterType((*CassandraWriteToNodeArg)(nil), "nutanix.cassandra.CassandraWriteToNodeArg")
	proto.RegisterType((*CassandraWriteToNodeRet)(nil), "nutanix.cassandra.CassandraWriteToNodeRet")
	proto.RegisterType((*CassandraReadFromNodeArg)(nil), "nutanix.cassandra.CassandraReadFromNodeArg")
	proto.RegisterType((*CassandraReadFromNodeRet)(nil), "nutanix.cassandra.CassandraReadFromNodeRet")
	proto.RegisterType((*CassandraScanFromNodeArg)(nil), "nutanix.cassandra.CassandraScanFromNodeArg")
	proto.RegisterType((*CassandraScanFromNodeRet)(nil), "nutanix.cassandra.CassandraScanFromNodeRet")
	proto.RegisterType((*CassandraForceMemtableFlushOnLocalNodeArg)(nil), "nutanix.cassandra.CassandraForceMemtableFlushOnLocalNodeArg")
	proto.RegisterType((*CassandraForceMemtableFlushOnLocalNodeRet)(nil), "nutanix.cassandra.CassandraForceMemtableFlushOnLocalNodeRet")
	proto.RegisterType((*CassandraForceCompactionOnNodeArg)(nil), "nutanix.cassandra.CassandraForceCompactionOnNodeArg")
	proto.RegisterType((*CassandraForceCompactionOnNodeRet)(nil), "nutanix.cassandra.CassandraForceCompactionOnNodeRet")
	proto.RegisterType((*CassandraGetForceCompactionOnNodeStatusArg)(nil), "nutanix.cassandra.CassandraGetForceCompactionOnNodeStatusArg")
	proto.RegisterType((*CassandraGetForceCompactionOnNodeStatusRet)(nil), "nutanix.cassandra.CassandraGetForceCompactionOnNodeStatusRet")
	proto.RegisterType((*CassandraBinaryLogRecordColumnAndClock)(nil), "nutanix.cassandra.CassandraBinaryLogRecordColumnAndClock")
	proto.RegisterType((*CassandraBinaryLogRecordMetadataRow)(nil), "nutanix.cassandra.CassandraBinaryLogRecordMetadataRow")
	proto.RegisterType((*CassandraBinaryLogRecordMetadataRange)(nil), "nutanix.cassandra.CassandraBinaryLogRecordMetadataRange")
	proto.RegisterType((*CassandraBinaryLogRecordMetadata)(nil), "nutanix.cassandra.CassandraBinaryLogRecordMetadata")
	proto.RegisterType((*CassandraDescribeKeyspaceSizeRet)(nil), "nutanix.cassandra.CassandraDescribeKeyspaceSizeRet")
	proto.RegisterType((*CassandraDescribeAllKeyspaceSizeRet)(nil), "nutanix.cassandra.CassandraDescribeAllKeyspaceSizeRet")
	proto.RegisterType((*CassandraDescribeKeyspaceSizeArg)(nil), "nutanix.cassandra.CassandraDescribeKeyspaceSizeArg")
	proto.RegisterType((*CassandraDescribeAllKeyspaceSizeArg)(nil), "nutanix.cassandra.CassandraDescribeAllKeyspaceSizeArg")
	proto.RegisterType((*CassandraDescribeSizeRequirementsArg)(nil), "nutanix.cassandra.CassandraDescribeSizeRequirementsArg")
	proto.RegisterType((*CassandraDescribeSizeRequirementsRet)(nil), "nutanix.cassandra.CassandraDescribeSizeRequirementsRet")
	proto.RegisterType((*CassandraFeature)(nil), "nutanix.cassandra.CassandraFeature")
	proto.RegisterType((*CassandraEnableFeaturesArg)(nil), "nutanix.cassandra.CassandraEnableFeaturesArg")
	proto.RegisterType((*CassandraEnableFeaturesRet)(nil), "nutanix.cassandra.CassandraEnableFeaturesRet")
	proto.RegisterType((*CassandraGetStageCountersArg)(nil), "nutanix.cassandra.CassandraGetStageCountersArg")
	proto.RegisterType((*CassandraGetStageCountersRet)(nil), "nutanix.cassandra.CassandraGetStageCountersRet")
	proto.RegisterType((*CassandraGetStageCountersRet_CassandraStageCounter)(nil), "nutanix.cassandra.CassandraGetStageCountersRet.CassandraStageCounter")
	proto.RegisterType((*CassandraGetDegradedStatsRet)(nil), "nutanix.cassandra.CassandraGetDegradedStatsRet")
	proto.RegisterType((*CassandraGetDegradedStatsRet_CassandraPaxosLeaderStat)(nil), "nutanix.cassandra.CassandraGetDegradedStatsRet.CassandraPaxosLeaderStat")
	proto.RegisterType((*CassandraGetHeapUsageArg)(nil), "nutanix.cassandra.CassandraGetHeapUsageArg")
	proto.RegisterType((*CassandraGetHeapUsageRet)(nil), "nutanix.cassandra.CassandraGetHeapUsageRet")
	proto.RegisterType((*CassandraGetMBeanDataArg)(nil), "nutanix.cassandra.CassandraGetMBeanDataArg")
	proto.RegisterType((*CassandraGetMBeanDataRet)(nil), "nutanix.cassandra.CassandraGetMBeanDataRet")
	proto.RegisterType((*CassandraGetLocalHealthWarningsArg)(nil), "nutanix.cassandra.CassandraGetLocalHealthWarningsArg")
	proto.RegisterType((*CassandraGetLocalHealthWarningsRet)(nil), "nutanix.cassandra.CassandraGetLocalHealthWarningsRet")
	proto.RegisterType((*CassandraLoadSSTablesArg)(nil), "nutanix.cassandra.CassandraLoadSSTablesArg")
	proto.RegisterType((*CassandraLoadSSTablesRet)(nil), "nutanix.cassandra.CassandraLoadSSTablesRet")
	proto.RegisterType((*CassandraSnapshotSSTablesArg)(nil), "nutanix.cassandra.CassandraSnapshotSSTablesArg")
	proto.RegisterType((*CassandraSnapshotSSTablesRet)(nil), "nutanix.cassandra.CassandraSnapshotSSTablesRet")
	proto.RegisterType((*CassandraSchema)(nil), "nutanix.cassandra.CassandraSchema")
	proto.RegisterType((*CassandraSchemaInfo)(nil), "nutanix.cassandra.CassandraSchemaInfo")
	proto.RegisterType((*CassandraNodeConfiguration)(nil), "nutanix.cassandra.CassandraNodeConfiguration")
	proto.RegisterType((*CassandraNodeConfiguration_DiskPath)(nil), "nutanix.cassandra.CassandraNodeConfiguration.DiskPath")
	proto.RegisterType((*CassandraNodeConfiguration_DataShards)(nil), "nutanix.cassandra.CassandraNodeConfiguration.DataShards")
	proto.RegisterType((*CassandraNodeConfiguration_TokenMapping)(nil), "nutanix.cassandra.CassandraNodeConfiguration.TokenMapping")
	proto.RegisterType((*CassandraNodeConfiguration_CassandraSnapshotInfo)(nil), "nutanix.cassandra.CassandraNodeConfiguration.CassandraSnapshotInfo")
	proto.RegisterType((*CassandraNodeConfiguration_CassandraSnapshotInfo_LeaderOnlyModeSnapshotInfoForNodes)(nil), "nutanix.cassandra.CassandraNodeConfiguration.CassandraSnapshotInfo.LeaderOnlyModeSnapshotInfoForNodes")
	proto.RegisterType((*CassandraConfigForAllNodesInCluster)(nil), "nutanix.cassandra.CassandraConfigForAllNodesInCluster")
	proto.RegisterType((*CassandraHeartbeatArg)(nil), "nutanix.cassandra.CassandraHeartbeatArg")
	proto.RegisterType((*CassandraHeartbeatArg_CassandraHealthCounters)(nil), "nutanix.cassandra.CassandraHeartbeatArg.CassandraHealthCounters")
	proto.RegisterType((*CassandraHeartbeatArg_CassandraNodeData)(nil), "nutanix.cassandra.CassandraHeartbeatArg.CassandraNodeData")
	proto.RegisterType((*CassandraHeartbeatArg_CassandraNodeData_LeaderOnlyReadTokenRanges)(nil), "nutanix.cassandra.CassandraHeartbeatArg.CassandraNodeData.LeaderOnlyReadTokenRanges")
	proto.RegisterType((*CassandraHeartbeatArg_ShardedRangePathConfig)(nil), "nutanix.cassandra.CassandraHeartbeatArg.ShardedRangePathConfig")
	proto.RegisterType((*CassandraHeartbeatArg_CassandraDiskModeConfig)(nil), "nutanix.cassandra.CassandraHeartbeatArg.CassandraDiskModeConfig")
	proto.RegisterType((*CassandraHeartbeatRet)(nil), "nutanix.cassandra.CassandraHeartbeatRet")
	proto.RegisterType((*CassandraStartNewSnapshotArg)(nil), "nutanix.cassandra.CassandraStartNewSnapshotArg")
	proto.RegisterType((*CassandraStartNewSnapshotRet)(nil), "nutanix.cassandra.CassandraStartNewSnapshotRet")
	proto.RegisterType((*SSTableJournalFileData)(nil), "nutanix.cassandra.SSTableJournalFileData")
	proto.RegisterType((*CassandraNodeInfo)(nil), "nutanix.cassandra.CassandraNodeInfo")
	proto.RegisterType((*CassandraNodeInfoSynAck)(nil), "nutanix.cassandra.CassandraNodeInfoSynAck")
	proto.RegisterType((*CassandraKeyspaceCfPair)(nil), "nutanix.cassandra.CassandraKeyspaceCfPair")
	proto.RegisterType((*CassandraQueryLeaderOnlyReadStatusArg)(nil), "nutanix.cassandra.CassandraQueryLeaderOnlyReadStatusArg")
	proto.RegisterType((*CassandraQueryLeaderOnlyReadStatusRet)(nil), "nutanix.cassandra.CassandraQueryLeaderOnlyReadStatusRet")
	proto.RegisterType((*CassandraScrubSSTableWithInvalidSnapshotIdArg)(nil), "nutanix.cassandra.CassandraScrubSSTableWithInvalidSnapshotIdArg")
	proto.RegisterType((*CassandraScrubSSTableWithInvalidSnapshotIdRet)(nil), "nutanix.cassandra.CassandraScrubSSTableWithInvalidSnapshotIdRet")
	proto.RegisterType((*CassandraGetEstimatedKeyCountArg)(nil), "nutanix.cassandra.CassandraGetEstimatedKeyCountArg")
	proto.RegisterType((*CassandraGetEstimatedKeyCountRet)(nil), "nutanix.cassandra.CassandraGetEstimatedKeyCountRet")
}

func init() {
	proto.RegisterFile("cassandra/cassandra_client/cassandra.proto", fileDescriptor_0d7d4be67fa79c77)
}

var fileDescriptor_0d7d4be67fa79c77 = []byte{
	// 10329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x5d, 0x90, 0x24, 0x47,
	0x92, 0x10, 0xac, 0xaa, 0xea, 0x5f, 0xaf, 0xea, 0xee, 0xea, 0x98, 0x9e, 0x9e, 0x9a, 0xd2, 0xf4,
	0x4c, 0x4f, 0x4a, 0xf3, 0xa3, 0xbf, 0x1e, 0x69, 0xa4, 0x95, 0xb4, 0x23, 0xad, 0x76, 0x7b, 0x7a,
	0x7a, 0x46, 0x2d, 0x4d, 0xcf, 0xf4, 0x65, 0xb7, 0xa4, 0x5b, 0x7d, 0xda, 0x4d, 0xe5, 0x64, 0x46,
	0x75, 0xe5, 0x56, 0x56, 0x66, 0x29, 0x23, 0xab, 0x7b, 0x5a, 0xdf, 0x1d, 0x2c, 0x3f, 0x77, 0xec,
	0x99, 0x61, 0xc6, 0x1e, 0x60, 0x07, 0x66, 0xec, 0x02, 0x06, 0x98, 0x0c, 0xcc, 0x96, 0xc3, 0x78,
	0x00, 0xce, 0xe0, 0x0e, 0x38, 0x6e, 0xf9, 0x31, 0x38, 0x33, 0x58, 0x0c, 0x78, 0x85, 0x27, 0x0c,
	0x33, 0x1e, 0xc0, 0x8c, 0xc7, 0x7b, 0x38, 0x2c, 0x3c, 0x22, 0x32, 0x23, 0xeb, 0x27, 0xab, 0xaa,
	0x47, 0xcb, 0xde, 0xc3, 0xea, 0x41, 0x53, 0x19, 0xe1, 0xe1, 0x11, 0xee, 0xe1, 0xe1, 0xe1, 0xe1,
	0xe1, 0xe1, 0x0d, 0xcf, 0x3b, 0x36, 0x63, 0x76, 0xe0, 0x46, 0xf6, 0x8d, 0xe4, 0x97, 0xe5, 0xf8,
	0x1e, 0x0d, 0xe2, 0xb4, 0x60, 0xa3, 0x13, 0x85, 0x71, 0x48, 0x96, 0x83, 0x6e, 0x6c, 0x07, 0xde,
	0xe3, 0x8d, 0xa4, 0xa2, 0xfe, 0xd5, 0x71, 0x9a, 0x5b, 0x4d, 0x6a, 0xfb, 0x71, 0xd3, 0x3a, 0xb6,
	0xa3, 0xc0, 0x0b, 0x0e, 0x05, 0xb6, 0xfa, 0xab, 0x63, 0x35, 0x6d, 0x53, 0xc6, 0xec, 0x43, 0xca,
	0x64, 0xa3, 0xd7, 0xc7, 0x6a, 0xd4, 0xb1, 0x1f, 0x87, 0xcc, 0x72, 0xfc, 0xd0, 0x69, 0xc9, 0x76,
	0x6f, 0x8d, 0xd5, 0x8e, 0xb1, 0xd8, 0x7e, 0xe4, 0x53, 0xab, 0x4d, 0x63, 0xdb, 0xb5, 0x63, 0x49,
	0x77, 0xfd, 0xa5, 0x6e, 0xec, 0xf9, 0x37, 0x98, 0x6f, 0x3d, 0xea, 0x36, 0xd8, 0x8d, 0xb6, 0xc7,
	0x9c, 0x1b, 0x47, 0x76, 0xe4, 0x09, 0x50, 0xbb, 0x63, 0xd1, 0xc7, 0x9d, 0x30, 0x8a, 0x69, 0x24,
	0xc1, 0xeb, 0x19, 0xf0, 0x80, 0xc6, 0x37, 0xa2, 0x8e, 0x23, 0xea, 0x8c, 0x9f, 0x14, 0x61, 0x71,
	0x4b, 0xf5, 0xb7, 0x1d, 0x45, 0x61, 0x64, 0xfc, 0xd3, 0x22, 0x4c, 0x1d, 0x9c, 0x74, 0x28, 0xa9,
	0xc0, 0x5c, 0xeb, 0x41, 0x88, 0x85, 0xd5, 0xa7, 0xc8, 0x02, 0xcc, 0xb7, 0x1e, 0x84, 0xf1, 0xdd,
	0xb0, 0x1b, 0xb8, 0xd5, 0x02, 0x39, 0x03, 0x4b, 0xad, 0x9d, 0xe0, 0xc8, 0xf6, 0x3d, 0xd7, 0xa4,
	0x9f, 0x75, 0x29, 0x8b, 0xab, 0x45, 0x52, 0x85, 0x4a, 0xeb, 0x83, 0xc0, 0x3e, 0xb2, 0x3d, 0x9f,
	0x0f, 0xa6, 0x5a, 0x42, 0x1c, 0x07, 0x5e, 0x9b, 0x86, 0xdd, 0xb8, 0x3a, 0x45, 0xce, 0xc2, 0x72,
	0x6b, 0xb3, 0xd3, 0xf1, 0x3d, 0xc7, 0x8e, 0xbd, 0x30, 0x10, 0xa8, 0xa7, 0x49, 0x0d, 0x56, 0x5a,
	0x9b, 0xdd, 0xb8, 0x49, 0x83, 0x38, 0x53, 0x33, 0x43, 0xce, 0xc1, 0x19, 0xac, 0x09, 0x23, 0xef,
	0x73, 0xad, 0x62, 0x96, 0x2c, 0x41, 0xb9, 0xb5, 0x65, 0xb3, 0xbb, 0xb6, 0xe7, 0x77, 0x23, 0x5a,
	0x9d, 0x23, 0x04, 0x16, 0x5b, 0xdb, 0x9d, 0xd0, 0x69, 0xee, 0x7a, 0xac, 0x6d, 0xc7, 0x4e, 0xb3,
	0x3a, 0x4f, 0x96, 0x61, 0xa1, 0xf5, 0x41, 0xd0, 0x0a, 0xc2, 0x63, 0xd9, 0x0e, 0x48, 0x1d, 0x56,
	0x5b, 0x5b, 0x4d, 0xea, 0xb4, 0x58, 0xb7, 0xad, 0x20, 0x45, 0x5d, 0x99, 0x00, 0xcc, 0xb4, 0x4c,
	0x1a, 0x47, 0x27, 0xd5, 0x0a, 0x31, 0xe0, 0xa2, 0x86, 0x7f, 0xab, 0x19, 0x32, 0x1a, 0x7c, 0x68,
	0xfb, 0x5d, 0x6a, 0xd2, 0xb8, 0x1b, 0x05, 0xd4, 0xad, 0x2e, 0x90, 0x55, 0x20, 0xad, 0x77, 0xa9,
	0x1d, 0xc5, 0x8f, 0xa8, 0x1d, 0x27, 0xdd, 0x2e, 0x1a, 0xff, 0xb6, 0x00, 0xe7, 0x13, 0x9e, 0x6e,
	0x85, 0x01, 0xf3, 0x58, 0x4c, 0x03, 0xe7, 0xe4, 0x3e, 0x3d, 0xa2, 0xbe, 0xf1, 0xa3, 0x82, 0x64,
	0xef, 0x1c, 0x4c, 0xb5, 0x1e, 0x06, 0xb4, 0x5a, 0x20, 0x65, 0x98, 0x6d, 0xfd, 0x42, 0x37, 0x8c,
	0xba, 0x6d, 0xc9, 0xc3, 0xfb, 0xa1, 0x63, 0xfb, 0xb2, 0xa4, 0x84, 0xb4, 0x6e, 0xdb, 0x4e, 0x53,
	0x16, 0x4c, 0x61, 0xcb, 0x4d, 0xdf, 0xaf, 0x4e, 0x8b, 0x5f, 0xc1, 0x49, 0x75, 0x06, 0x7f, 0x1d,
	0x1c, 0x87, 0xd5, 0x59, 0x24, 0xe3, 0xa0, 0x19, 0x51, 0xce, 0x15, 0xde, 0xf4, 0x6e, 0x18, 0x39,
	0x74, 0x8f, 0x4b, 0x60, 0x75, 0x1e, 0xb1, 0x63, 0x81, 0x44, 0x06, 0x64, 0x0d, 0xce, 0xb7, 0x4c,
	0x6a, 0xbb, 0x77, 0xa3, 0xb0, 0xbd, 0xe9, 0xcb, 0x5e, 0x0f, 0xc2, 0xcd, 0x43, 0x8e, 0xa1, 0x6c,
	0xfc, 0xe3, 0x02, 0xd4, 0x12, 0x62, 0xee, 0x7b, 0xed, 0x47, 0xe1, 0x7e, 0x6c, 0xc7, 0x54, 0xd0,
	0xf2, 0x43, 0x45, 0x0b, 0x17, 0x8e, 0xbd, 0x88, 0x62, 0x7d, 0xb5, 0x80, 0x43, 0x10, 0xbf, 0x8b,
	0xe4, 0x69, 0x38, 0x27, 0x7e, 0xdf, 0xa7, 0xf6, 0x91, 0x17, 0x1c, 0xde, 0xa1, 0x9d, 0x88, 0x3a,
	0x76, 0x4c, 0xdd, 0x6a, 0x09, 0x29, 0x7f, 0x10, 0x46, 0x6d, 0xdb, 0xaf, 0x4e, 0x09, 0xca, 0x39,
	0xe4, 0xf6, 0x63, 0xc7, 0x63, 0xb4, 0x3a, 0x8d, 0xd2, 0x23, 0x27, 0xb0, 0x3a, 0xa3, 0x88, 0x39,
	0xb6, 0x23, 0xd7, 0x0b, 0x0e, 0xab, 0xb3, 0x38, 0xbf, 0xb7, 0xa9, 0x17, 0x1c, 0x9a, 0xb4, 0x1d,
	0x1e, 0x51, 0xb7, 0x3a, 0x87, 0x2d, 0xd4, 0xd7, 0xbc, 0xb1, 0x0b, 0xab, 0xc9, 0xd8, 0x77, 0x02,
	0x97, 0x3e, 0x7e, 0xd8, 0xa1, 0x91, 0x1d, 0x87, 0x91, 0xf1, 0xaa, 0x1c, 0xf8, 0x2c, 0x94, 0x5a,
	0xdb, 0x9f, 0x55, 0x9f, 0xc2, 0x1f, 0xf7, 0xf8, 0x64, 0xe0, 0x0f, 0x2e, 0xcc, 0xfc, 0xc7, 0x7d,
	0x2e, 0xc3, 0xf8, 0x23, 0xae, 0x4e, 0x19, 0x7f, 0xba, 0x00, 0x17, 0x13, 0x7c, 0xc8, 0xc5, 0xad,
	0xb0, 0xdd, 0xb1, 0x1d, 0x2e, 0x98, 0x9c, 0x2b, 0x5d, 0x66, 0x3c, 0x92, 0x78, 0x39, 0x61, 0x5c,
	0x78, 0x28, 0x5f, 0x2b, 0x38, 0xa8, 0x6e, 0xc0, 0x75, 0x4d, 0xb5, 0x88, 0xbc, 0xba, 0xeb, 0x05,
	0x1e, 0x6b, 0x22, 0x0b, 0xe4, 0xba, 0xda, 0x7e, 0xec, 0x31, 0xbe, 0x44, 0x52, 0x21, 0x9c, 0xc6,
	0xe5, 0xb2, 0x15, 0x46, 0x51, 0xb7, 0x13, 0x53, 0x77, 0x7f, 0xff, 0x00, 0xd7, 0xd4, 0x0c, 0x9f,
	0x92, 0x74, 0x18, 0xd9, 0x75, 0x23, 0x97, 0x22, 0xb1, 0xa0, 0xec, 0x44, 0xd4, 0xe5, 0x15, 0xb6,
	0xcf, 0x6a, 0x85, 0xf5, 0xd2, 0xf5, 0xf2, 0xcd, 0xaf, 0x6d, 0xf4, 0xe9, 0xcb, 0x8d, 0x7c, 0x3c,
	0x1b, 0x5b, 0x29, 0x12, 0x53, 0xc7, 0x58, 0x7f, 0x03, 0xca, 0x5a, 0x1d, 0x21, 0x30, 0x15, 0xd8,
	0x6d, 0x5a, 0x2b, 0xac, 0x17, 0xaf, 0xcf, 0x9b, 0xf8, 0x9b, 0xac, 0xc0, 0xf4, 0x11, 0x5f, 0x31,
	0xb5, 0x22, 0x16, 0x8a, 0x0f, 0xe3, 0xc7, 0x05, 0x38, 0x9b, 0x74, 0x8a, 0x52, 0xf9, 0x21, 0x8d,
	0x98, 0x17, 0x06, 0x1c, 0x9e, 0xf2, 0x05, 0x8c, 0x48, 0x4a, 0xa6, 0xf8, 0x20, 0x57, 0x60, 0x51,
	0x68, 0x4f, 0x2f, 0x60, 0xb1, 0x1d, 0x38, 0x02, 0x5d, 0xc9, 0x5c, 0xc0, 0xd2, 0x1d, 0x59, 0x48,
	0x02, 0x58, 0x12, 0xda, 0x33, 0xd1, 0x95, 0xb5, 0xd2, 0x7a, 0xe1, 0x7a, 0xf9, 0xe6, 0xf6, 0x86,
	0xdd, 0xb1, 0x9d, 0x26, 0xd5, 0x68, 0x76, 0x1f, 0x6d, 0x60, 0xe3, 0x0d, 0xbd, 0xfb, 0x2d, 0xae,
	0x9c, 0xf7, 0xb8, 0x4e, 0xdc, 0xd8, 0x42, 0x44, 0xbb, 0x12, 0x0f, 0x96, 0x99, 0x8b, 0x4e, 0xa6,
	0xd0, 0xf8, 0xcf, 0x73, 0xf0, 0xb4, 0x26, 0x5a, 0x31, 0x8d, 0x02, 0xdb, 0x47, 0x7c, 0x88, 0x88,
	0x3c, 0x03, 0x0b, 0x4e, 0x37, 0x8a, 0xf8, 0x80, 0x74, 0xa2, 0x2a, 0xb2, 0x10, 0x35, 0x15, 0x79,
	0x0d, 0x56, 0x15, 0xd0, 0x40, 0x1a, 0x57, 0x64, 0xed, 0x5e, 0x86, 0xd4, 0x35, 0x80, 0x80, 0x3e,
	0x56, 0x78, 0x4b, 0x08, 0x39, 0xcf, 0x4b, 0x04, 0xd2, 0x0d, 0x38, 0x83, 0xd5, 0x3d, 0x18, 0xa7,
	0x10, 0x6e, 0x99, 0x57, 0x65, 0xd1, 0xfd, 0x72, 0x3a, 0x08, 0x9c, 0x21, 0xab, 0x13, 0x85, 0x9d,
	0x90, 0xd9, 0x7e, 0x6d, 0x7a, 0xbd, 0x78, 0xbd, 0x7c, 0xf3, 0x5e, 0x9e, 0xd4, 0xf4, 0x53, 0x2e,
	0x98, 0xba, 0x27, 0x71, 0x3c, 0xe8, 0xb6, 0x1f, 0xd1, 0x48, 0xb0, 0x50, 0x51, 0x83, 0x6a, 0x54,
	0x01, 0x10, 0x1b, 0x66, 0x3b, 0x51, 0xd8, 0xf6, 0x18, 0xad, 0xcd, 0x7c, 0xb9, 0xfd, 0x29, 0xbc,
	0x24, 0x80, 0x33, 0x59, 0x0a, 0x19, 0xd7, 0x60, 0xb5, 0xd9, 0xf5, 0xe2, 0xf5, 0xc5, 0x9b, 0xef,
	0x9c, 0xa6, 0x3b, 0x24, 0x01, 0xf5, 0xa0, 0xb9, 0xac, 0x53, 0x85, 0x45, 0xe4, 0x25, 0x20, 0x2e,
	0xf5, 0x29, 0x5f, 0x47, 0x56, 0xec, 0xb5, 0x29, 0x8b, 0xed, 0x76, 0xa7, 0x36, 0xb7, 0x5e, 0xb8,
	0x3e, 0x6d, 0x2e, 0xab, 0x9a, 0x03, 0x55, 0x41, 0xea, 0x30, 0xe7, 0xc8, 0x1d, 0xa9, 0x36, 0xbf,
	0x5e, 0xb8, 0x5e, 0x32, 0x93, 0xef, 0x41, 0x62, 0x0d, 0x3f, 0x45, 0xb1, 0xe6, 0xc2, 0xd3, 0xa2,
	0x27, 0x96, 0x13, 0xfa, 0xdd, 0x76, 0x60, 0x25, 0xc3, 0x2a, 0x8b, 0xb1, 0xb7, 0xe8, 0xc9, 0x16,
	0xd6, 0xa8, 0x1d, 0x94, 0x3c, 0x03, 0xf3, 0x8e, 0x52, 0x50, 0xb5, 0xca, 0x7a, 0xe1, 0xfa, 0xdc,
	0xad, 0xe9, 0x86, 0xed, 0x33, 0x6a, 0xa6, 0xe5, 0xf5, 0x4f, 0xa0, 0x36, 0x6c, 0x92, 0xc8, 0x35,
	0x58, 0x52, 0xf2, 0x66, 0x05, 0x58, 0x2e, 0x57, 0xca, 0x62, 0x27, 0x03, 0x4d, 0xce, 0xc1, 0x6c,
	0x10, 0xba, 0xd4, 0xf2, 0x5c, 0xb9, 0x38, 0x66, 0xf8, 0xe7, 0x8e, 0x6b, 0xfc, 0xbb, 0x02, 0x2c,
	0xf5, 0x4c, 0x0a, 0xb9, 0x04, 0x4f, 0xb7, 0x1e, 0x06, 0xfe, 0xc9, 0x9e, 0x90, 0x80, 0xbb, 0x61,
	0xb4, 0x89, 0xb5, 0xa8, 0x64, 0x59, 0xf5, 0x29, 0xdc, 0x6a, 0xf4, 0x92, 0x02, 0xda, 0x0f, 0x77,
	0xf8, 0xdc, 0x70, 0xe8, 0x2d, 0xea, 0xfb, 0xd5, 0x22, 0x59, 0x87, 0x0b, 0xb2, 0x4c, 0x18, 0x00,
	0xbc, 0xf8, 0x20, 0xbc, 0x4d, 0xd5, 0x06, 0x53, 0x22, 0x17, 0xa0, 0xd6, 0x07, 0xa1, 0x6a, 0xa7,
	0x70, 0x18, 0xfd, 0xed, 0xdb, 0x8f, 0x58, 0x1c, 0x72, 0x0b, 0x62, 0x3a, 0x1d, 0x86, 0xa8, 0xaf,
	0xce, 0x18, 0xff, 0xb5, 0xa0, 0xd9, 0x63, 0x42, 0x95, 0x5c, 0x80, 0xf9, 0x54, 0x8a, 0x0a, 0x28,
	0x20, 0x69, 0x01, 0xd9, 0x05, 0xa1, 0x09, 0xad, 0x23, 0x31, 0xe1, 0xb5, 0x22, 0xca, 0xc7, 0xf5,
	0x3c, 0xb1, 0xd6, 0x05, 0xc4, 0xac, 0x74, 0x74, 0x25, 0xfc, 0x29, 0xac, 0x78, 0x52, 0xe8, 0x75,
	0xab, 0x55, 0x2a, 0xd3, 0x8d, 0xc9, 0x16, 0x8b, 0x49, 0xbc, 0xbe, 0x32, 0xe3, 0xdf, 0xeb, 0x14,
	0x22, 0xf1, 0xe9, 0x4e, 0xc1, 0xa9, 0xab, 0xc8, 0x9d, 0x82, 0xec, 0x41, 0x45, 0x2c, 0xd7, 0xb0,
	0xd1, 0x60, 0x34, 0x96, 0x84, 0xbd, 0x94, 0x37, 0x04, 0x44, 0xb7, 0x81, 0xff, 0x7f, 0x88, 0x8d,
	0xcc, 0xf2, 0x51, 0xfa, 0x91, 0x59, 0x69, 0xa5, 0xec, 0x4a, 0xab, 0x7f, 0x15, 0xca, 0x5a, 0x3b,
	0xb2, 0x0a, 0x33, 0xb2, 0x5b, 0x21, 0x8e, 0xf2, 0x8b, 0x6f, 0x74, 0xcc, 0xfb, 0x5c, 0x29, 0x68,
	0xfc, 0x6d, 0x7c, 0xbf, 0x08, 0x4b, 0x9a, 0xbd, 0xc7, 0x17, 0x48, 0x66, 0x43, 0xac, 0xc8, 0x0d,
	0xf1, 0x0d, 0x7d, 0x43, 0x2c, 0xdf, 0xbc, 0x3c, 0x92, 0x12, 0xc5, 0x89, 0x37, 0x60, 0x5a, 0xcd,
	0xc2, 0xc8, 0x86, 0x82, 0xf1, 0x02, 0x9e, 0x54, 0xa1, 0x14, 0xc7, 0x7e, 0x6d, 0x0a, 0x97, 0x2f,
	0xff, 0x49, 0xee, 0xc2, 0x34, 0xe5, 0xe6, 0x6e, 0x6d, 0x7a, 0xbd, 0x70, 0x7d, 0xf1, 0xe6, 0xd5,
	0x3c, 0x54, 0x68, 0x17, 0x6f, 0x70, 0x73, 0xe6, 0x56, 0x72, 0x10, 0x30, 0x45, 0x73, 0xb2, 0xa6,
	0xb1, 0x72, 0x86, 0xa3, 0xbf, 0x55, 0x78, 0x39, 0xe5, 0xa6, 0xd1, 0x84, 0x95, 0x04, 0xcd, 0x7e,
	0xb7, 0x43, 0xa3, 0x1c, 0xb6, 0xbc, 0x0d, 0xb3, 0x42, 0xdf, 0xb0, 0x5a, 0x11, 0xed, 0x14, 0x23,
	0x97, 0x3e, 0x04, 0x35, 0x55, 0x13, 0xe3, 0x8b, 0x02, 0x5c, 0xe8, 0xa9, 0x7c, 0x18, 0xe9, 0x5d,
	0xde, 0x82, 0x19, 0x01, 0x8b, 0xd2, 0x35, 0x1e, 0x76, 0xd9, 0x82, 0xbc, 0x07, 0x15, 0xc6, 0x51,
	0x49, 0x85, 0x28, 0x45, 0xf0, 0x5a, 0x1e, 0x06, 0xad, 0x6b, 0xb3, 0xcc, 0xd2, 0x0f, 0xe3, 0x53,
	0x38, 0xd3, 0xd3, 0xcd, 0x7d, 0x8f, 0xc5, 0x64, 0x27, 0xa5, 0x5e, 0x58, 0x69, 0x37, 0x46, 0x8f,
	0x2f, 0x43, 0x60, 0xca, 0x0a, 0x4b, 0xb3, 0xac, 0x44, 0xdd, 0x9e, 0xcd, 0xb7, 0x26, 0x34, 0x46,
	0x84, 0x46, 0x6f, 0xd8, 0x6d, 0xcf, 0x3f, 0x91, 0x66, 0x5a, 0x45, 0x14, 0xde, 0xc5, 0x32, 0x72,
	0x79, 0x00, 0xad, 0x95, 0x2c, 0x09, 0xdd, 0x3e, 0x12, 0xf6, 0xec, 0xb8, 0xf9, 0x65, 0xa1, 0xe7,
	0x6b, 0x4e, 0x56, 0x96, 0xb0, 0x52, 0x7e, 0x19, 0x7f, 0xa2, 0xa0, 0xf5, 0xbb, 0xef, 0x7b, 0x0e,
	0x35, 0xed, 0xe0, 0x10, 0xd5, 0x06, 0x8b, 0xed, 0x28, 0x56, 0x6a, 0x03, 0x3f, 0x38, 0x96, 0x06,
	0x5a, 0xd7, 0xb2, 0x0b, 0xf9, 0x45, 0x2e, 0xc3, 0x5c, 0x44, 0xb9, 0x92, 0xa4, 0x2e, 0xe2, 0x4f,
	0x76, 0xaa, 0xa4, 0x98, 0x9c, 0x87, 0x69, 0x27, 0xec, 0x06, 0xb1, 0x58, 0x30, 0xb7, 0x4a, 0xaf,
	0xbc, 0xfc, 0xb2, 0x29, 0x4a, 0x8c, 0xdf, 0x2f, 0xc0, 0xb9, 0xec, 0x18, 0xf6, 0x22, 0xea, 0x72,
	0x6b, 0x99, 0x72, 0xd2, 0x24, 0xfd, 0x5c, 0x9e, 0xc5, 0x3c, 0x56, 0xcc, 0xb2, 0x28, 0x7b, 0xc0,
	0x8b, 0xc8, 0x3d, 0x28, 0x33, 0xde, 0xc8, 0x8a, 0xf8, 0xc8, 0xa5, 0x1c, 0xe5, 0x2e, 0xbe, 0x94,
	0x4e, 0x13, 0x58, 0x4a, 0xf3, 0x25, 0x28, 0xb3, 0x96, 0xd7, 0x11, 0x86, 0x0c, 0x13, 0x84, 0x98,
	0xc0, 0x8b, 0x50, 0x63, 0x30, 0xf2, 0x2c, 0x2c, 0xb6, 0xed, 0xc7, 0x16, 0x57, 0x4c, 0xd6, 0xa3,
	0x93, 0x98, 0x32, 0x24, 0xa6, 0x64, 0x56, 0xda, 0xf6, 0xe3, 0x7d, 0xef, 0x73, 0x7a, 0x9b, 0x97,
	0x19, 0xbf, 0xae, 0x9f, 0xea, 0xf0, 0x64, 0xb4, 0xfd, 0xb8, 0x13, 0x51, 0x86, 0x7b, 0xc0, 0x25,
	0x28, 0x6b, 0xf4, 0xc8, 0xb5, 0x0a, 0x29, 0x39, 0xe4, 0x1d, 0x28, 0x86, 0x1d, 0xd4, 0x62, 0x8b,
	0xa3, 0xb6, 0x04, 0xed, 0xcc, 0x85, 0x9a, 0xc4, 0x2c, 0x86, 0x9d, 0x54, 0xdf, 0x97, 0xf4, 0x93,
	0xc1, 0x0f, 0x0b, 0x9a, 0xd2, 0xc0, 0x96, 0x5b, 0xbe, 0xdd, 0x65, 0x94, 0xec, 0x42, 0x99, 0x26,
	0xa3, 0x53, 0xcb, 0xe4, 0x85, 0x91, 0xfd, 0xa6, 0x14, 0x99, 0x7a, 0x7b, 0xf2, 0x34, 0xcc, 0xa3,
	0xa4, 0x58, 0x2d, 0x7a, 0x82, 0x44, 0x54, 0xcc, 0x39, 0x2c, 0x78, 0x9f, 0x9e, 0xa4, 0x22, 0x50,
	0xea, 0x13, 0x81, 0xbf, 0x51, 0x80, 0xe5, 0xa4, 0x87, 0xf7, 0xe9, 0x89, 0x98, 0x90, 0x0c, 0x36,
	0x21, 0x88, 0x29, 0xb6, 0x73, 0x30, 0x4b, 0x03, 0x57, 0x76, 0x84, 0xc2, 0x48, 0x03, 0x97, 0x57,
	0xf0, 0x69, 0xc4, 0x56, 0x71, 0xd8, 0xa2, 0x4a, 0xde, 0x01, 0x8b, 0x0e, 0x78, 0x09, 0x47, 0xcb,
	0x5b, 0x8a, 0xea, 0x29, 0x81, 0x96, 0x06, 0xae, 0xa8, 0x4c, 0x06, 0x39, 0xdd, 0x37, 0xc8, 0x4e,
	0x76, 0x8c, 0x28, 0x45, 0x7c, 0x1b, 0x10, 0xa3, 0xe3, 0xb4, 0xf2, 0x9f, 0xba, 0xd6, 0x29, 0x3e,
	0xa1, 0xd6, 0x79, 0x2b, 0xdb, 0xe3, 0x16, 0x1f, 0xc6, 0x80, 0x1e, 0x57, 0xd4, 0x98, 0x39, 0xc7,
	0xa7, 0xd5, 0x70, 0xff, 0x52, 0x49, 0x6b, 0x7d, 0x47, 0x9a, 0xc6, 0xe9, 0x7e, 0x57, 0x98, 0x70,
	0xbf, 0xeb, 0x91, 0x5c, 0xc1, 0x73, 0x5d, 0x72, 0x93, 0xed, 0xaf, 0xf4, 0x64, 0xdb, 0x5f, 0xaf,
	0x36, 0x9b, 0xea, 0xd7, 0x66, 0xef, 0xc2, 0x7c, 0x47, 0xa9, 0x08, 0x9c, 0xa8, 0xf2, 0xcd, 0xe7,
	0x47, 0x2e, 0xf8, 0x44, 0xa9, 0x98, 0x69, 0x63, 0x7e, 0xe0, 0xc3, 0x53, 0x03, 0xb5, 0xa2, 0xf0,
	0x18, 0x77, 0xdb, 0x39, 0x73, 0x5e, 0x94, 0x98, 0xe1, 0x31, 0xf9, 0x0a, 0x9c, 0x39, 0x8e, 0xbc,
	0x98, 0x5a, 0x12, 0xc8, 0x41, 0x5b, 0xb2, 0x36, 0xab, 0xeb, 0xb8, 0x65, 0x84, 0xd0, 0x6d, 0xd1,
	0xcc, 0x0e, 0x3e, 0xd7, 0xbf, 0x83, 0xff, 0xc9, 0xa2, 0x36, 0x33, 0xbb, 0xdd, 0x18, 0xdd, 0x02,
	0xe4, 0x5e, 0xcf, 0x66, 0x3a, 0xb1, 0xd8, 0xa8, 0x9d, 0xf5, 0x1b, 0x30, 0xa7, 0x4e, 0x42, 0x52,
	0x1b, 0x3e, 0x9b, 0x87, 0x4a, 0x89, 0x86, 0x99, 0xb4, 0x22, 0xaf, 0xc1, 0x99, 0x08, 0x7d, 0x71,
	0xf2, 0x50, 0x17, 0x06, 0x96, 0x63, 0xb3, 0xac, 0x6a, 0xaf, 0x0a, 0x08, 0x61, 0xd8, 0x05, 0x5b,
	0x36, 0x23, 0x2f, 0xc2, 0x22, 0xea, 0x4f, 0x27, 0x6c, 0xb7, 0xbd, 0xd8, 0x0f, 0x0f, 0x71, 0xea,
	0x92, 0x06, 0x0b, 0xbc, 0x72, 0x4b, 0xd5, 0x19, 0x7f, 0xb3, 0xa8, 0x39, 0x90, 0x14, 0x13, 0x18,
	0xee, 0xdb, 0xfd, 0x12, 0xfe, 0x6d, 0x58, 0x6c, 0x2b, 0x10, 0xcb, 0xf7, 0x58, 0x2c, 0x97, 0xd6,
	0x1b, 0x79, 0x84, 0x65, 0x90, 0x6e, 0x64, 0xbe, 0xcc, 0x85, 0x76, 0xa6, 0xc7, 0xb5, 0x1e, 0xeb,
	0x35, 0x3b, 0x61, 0xf5, 0xc7, 0xb0, 0x90, 0x1d, 0xe1, 0x58, 0xdb, 0xf2, 0x6d, 0x98, 0x4f, 0x7a,
	0x91, 0xe3, 0x7d, 0x76, 0x9c, 0xf1, 0x9a, 0x69, 0x33, 0xe3, 0x2a, 0x90, 0xac, 0xe6, 0xe5, 0x6b,
	0xc6, 0xa8, 0xa6, 0x6e, 0xce, 0xf7, 0xb7, 0xbf, 0xb9, 0x5f, 0x2d, 0x18, 0xbf, 0x55, 0xd0, 0x00,
	0x85, 0x3c, 0xdc, 0xa1, 0x8d, 0x81, 0x36, 0xe1, 0x73, 0x50, 0x45, 0xd7, 0x32, 0xf6, 0x60, 0x39,
	0xbe, 0xcd, 0x98, 0x74, 0x23, 0x2d, 0xa5, 0xe5, 0x5b, 0xbc, 0x98, 0xdc, 0x01, 0xf0, 0x78, 0xa7,
	0x56, 0x7c, 0xd2, 0xa1, 0xf2, 0x9c, 0x72, 0x65, 0xe4, 0xe6, 0x80, 0x7b, 0xd1, 0xbc, 0xa7, 0x7e,
	0xf2, 0x35, 0x26, 0xb0, 0xe0, 0x50, 0xb8, 0x4c, 0xcc, 0xcb, 0x6a, 0xae, 0x37, 0x8c, 0x3f, 0x58,
	0xd1, 0x8f, 0x65, 0x0d, 0x3e, 0xec, 0x3a, 0xcc, 0xb5, 0xe8, 0x09, 0xeb, 0xd8, 0x8e, 0x72, 0x7b,
	0x25, 0xdf, 0x09, 0x49, 0x45, 0xcd, 0x1d, 0x96, 0xea, 0xa6, 0x64, 0xa0, 0xf3, 0x4a, 0x37, 0xa9,
	0x21, 0xa0, 0x16, 0x13, 0xf5, 0x72, 0x08, 0x58, 0x82, 0xd5, 0xd7, 0x60, 0xc9, 0x09, 0xdb, 0x1d,
	0x1b, 0xf7, 0x52, 0x01, 0x33, 0x8d, 0x30, 0x8b, 0x69, 0x31, 0x02, 0xbe, 0x04, 0x84, 0x75, 0x1f,
	0xf5, 0xc2, 0xce, 0x20, 0xec, 0x72, 0xa6, 0x06, 0xc1, 0x2f, 0x02, 0x44, 0xd4, 0x09, 0x03, 0xc7,
	0xf3, 0x69, 0x84, 0x5a, 0x63, 0xde, 0xd4, 0x4a, 0x48, 0x8d, 0x6f, 0x15, 0xed, 0x36, 0x0d, 0x62,
	0x54, 0x13, 0xf3, 0xa6, 0xfa, 0xe4, 0xa6, 0x46, 0x14, 0x1e, 0x5b, 0x8e, 0xed, 0x34, 0x29, 0x1a,
	0x1c, 0xe8, 0xbe, 0x28, 0x98, 0x95, 0x28, 0x3c, 0xde, 0xe2, 0x85, 0xdc, 0xde, 0xe0, 0x50, 0xe8,
	0x52, 0x48, 0xa1, 0x40, 0x40, 0xb5, 0xe8, 0x49, 0x0a, 0xf5, 0x22, 0x90, 0x88, 0xda, 0xae, 0x15,
	0xd1, 0x8e, 0xed, 0x45, 0x96, 0xd3, 0x44, 0xa7, 0x55, 0x19, 0x21, 0xab, 0xbc, 0xc6, 0xc4, 0x8a,
	0x2d, 0x2c, 0x27, 0x0f, 0x38, 0x2f, 0x90, 0x97, 0x89, 0x5b, 0xa4, 0x82, 0xb2, 0x7b, 0x65, 0xb4,
	0x3e, 0xba, 0x43, 0x1b, 0x9c, 0x65, 0xfc, 0x67, 0xe2, 0xf6, 0xb8, 0x0e, 0xd5, 0x43, 0xc7, 0x3a,
	0x8c, 0x6c, 0x87, 0x5a, 0x8c, 0x93, 0xee, 0xb2, 0xda, 0x02, 0x1e, 0x9a, 0x16, 0x0f, 0x9d, 0x7b,
	0xbc, 0x78, 0x5f, 0x94, 0x92, 0x37, 0xa1, 0xe6, 0xd2, 0x86, 0xdd, 0xf5, 0xd1, 0x97, 0x94, 0x15,
	0xd0, 0x45, 0x64, 0xcf, 0xaa, 0xac, 0xff, 0xb0, 0x47, 0x4e, 0x17, 0xa1, 0xe8, 0xb9, 0xb5, 0x25,
	0xc4, 0x5a, 0xf4, 0x5c, 0x8e, 0xa9, 0xed, 0x05, 0x96, 0x93, 0x78, 0x90, 0xad, 0xb8, 0x19, 0x51,
	0xd6, 0x0c, 0x7d, 0xb7, 0x56, 0x45, 0xa8, 0xd5, 0xb6, 0x17, 0xa4, 0x0e, 0xe6, 0x03, 0x55, 0x8b,
	0x2d, 0xed, 0xc7, 0x83, 0x5b, 0x2e, 0xcb, 0x96, 0xf6, 0xe3, 0x41, 0x2d, 0xb7, 0x61, 0x5d, 0x9b,
	0x31, 0xfb, 0x88, 0x5a, 0x1d, 0x1a, 0x79, 0xa1, 0x6b, 0x79, 0x41, 0x42, 0x37, 0x41, 0x0c, 0x4f,
	0x27, 0x73, 0x68, 0x1f, 0xd1, 0x3d, 0x04, 0xda, 0x09, 0x14, 0x13, 0xb6, 0x61, 0x5d, 0x9b, 0xd2,
	0xc1, 0x68, 0xce, 0x08, 0x34, 0xc9, 0x24, 0x0f, 0x40, 0xf3, 0x55, 0x38, 0xdf, 0xa6, 0x6d, 0x71,
	0xc3, 0xd5, 0xf0, 0xbb, 0xac, 0x69, 0xd9, 0x8d, 0x98, 0x46, 0x56, 0xdb, 0x0b, 0x58, 0x6d, 0x45,
	0x12, 0x22, 0x01, 0xee, 0xf2, 0xfa, 0x4d, 0x5e, 0xbd, 0xeb, 0x05, 0xd9, 0xa6, 0x71, 0x33, 0x0a,
	0xbb, 0x87, 0xcd, 0x4e, 0x37, 0xe6, 0xfd, 0xb7, 0x1f, 0xd5, 0xce, 0x66, 0x9b, 0x1e, 0x24, 0xf5,
	0x3b, 0xc1, 0xee, 0x23, 0xb2, 0x0d, 0x97, 0x92, 0xa6, 0x21, 0x9a, 0xa6, 0xa8, 0xb0, 0x79, 0x53,
	0xcf, 0xf7, 0x51, 0x0f, 0xae, 0xa2, 0xd8, 0x5d, 0x50, 0x60, 0x0f, 0x13, 0xa8, 0x9d, 0x60, 0x57,
	0xc2, 0x90, 0x97, 0x61, 0x05, 0xed, 0x6c, 0x71, 0x43, 0xc7, 0x2c, 0xdb, 0xf7, 0xc3, 0x63, 0xea,
	0xd6, 0xce, 0x61, 0xe7, 0x84, 0x5b, 0xdb, 0xb2, 0x6a, 0x53, 0xd4, 0x90, 0xd7, 0xc5, 0xb4, 0xa5,
	0x13, 0x40, 0x83, 0x38, 0x3a, 0x11, 0x4b, 0xa2, 0x86, 0xad, 0x38, 0x46, 0x53, 0xf2, 0x7d, 0x9b,
	0x57, 0xe2, 0xd2, 0xb8, 0x01, 0x2b, 0xd9, 0x65, 0x26, 0xed, 0xfa, 0xf3, 0xc2, 0x29, 0xa7, 0x2f,
	0x36, 0x34, 0xee, 0xb9, 0x34, 0x0b, 0x45, 0xa2, 0xad, 0xb9, 0xba, 0x90, 0x66, 0x2c, 0x4f, 0x57,
	0xdd, 0x73, 0x50, 0xd5, 0xa4, 0x08, 0x89, 0xac, 0x3d, 0x8d, 0xc4, 0x2f, 0xa5, 0xe5, 0x26, 0x2f,
	0x26, 0xef, 0xc3, 0x33, 0x6d, 0xfb, 0x3b, 0x61, 0x94, 0x11, 0x3b, 0xaf, 0xad, 0x4f, 0x7d, 0x33,
	0x62, 0xb5, 0x0b, 0xd8, 0xfa, 0x22, 0x82, 0x6a, 0x12, 0xe8, 0xb5, 0x93, 0xd9, 0x7f, 0x37, 0x62,
	0xe4, 0x26, 0x90, 0x2e, 0xa3, 0xca, 0xcd, 0x88, 0x6a, 0x96, 0x46, 0xb5, 0x35, 0xdc, 0x89, 0xa7,
	0xe2, 0xa8, 0x4b, 0xcd, 0x6a, 0x97, 0x51, 0xb1, 0x5e, 0x77, 0x44, 0x2d, 0xb9, 0x01, 0x55, 0x69,
	0xe0, 0x78, 0x0d, 0x8b, 0xa2, 0xdb, 0xae, 0x76, 0x51, 0xdf, 0xbb, 0x17, 0x45, 0xf5, 0x4e, 0x43,
	0xf8, 0xf4, 0xc8, 0xdb, 0x70, 0x5e, 0xdd, 0x9f, 0x32, 0xc7, 0x0e, 0x02, 0x1a, 0x59, 0x9d, 0x30,
	0xf4, 0x05, 0x3f, 0x2e, 0xa9, 0x0d, 0x74, 0x55, 0xc2, 0xec, 0x0b, 0x90, 0xbd, 0x30, 0xf4, 0x91,
	0x35, 0x6f, 0xc3, 0x39, 0x9c, 0x52, 0xcb, 0xa7, 0xb6, 0x4b, 0x23, 0x2b, 0x0c, 0xfc, 0x13, 0x8b,
	0x2b, 0x22, 0x56, 0x5b, 0xd7, 0x7b, 0x5d, 0x41, 0xa8, 0xfb, 0x08, 0xf4, 0x30, 0xf0, 0x4f, 0x4c,
	0x0e, 0x42, 0xbe, 0x0e, 0xf5, 0x7e, 0x6e, 0x25, 0x8b, 0xf4, 0xb2, 0xe8, 0xfc, 0xa6, 0x59, 0xeb,
	0xe5, 0x53, 0xb2, 0x52, 0xef, 0xc1, 0x3a, 0x0d, 0x70, 0xec, 0xd2, 0xaf, 0x87, 0x7d, 0x5b, 0x61,
	0x27, 0xf6, 0xda, 0xf2, 0x2a, 0xb4, 0x66, 0xa0, 0x25, 0xb8, 0x26, 0xe0, 0x94, 0x3b, 0x8f, 0xda,
	0xee, 0x43, 0x0d, 0x08, 0xef, 0x18, 0x94, 0x3d, 0xc3, 0xb5, 0xab, 0xef, 0x39, 0xb6, 0xb0, 0x4e,
	0x9e, 0x59, 0x2f, 0xe1, 0x1d, 0x83, 0xaa, 0x35, 0x45, 0x25, 0xda, 0x0e, 0xcf, 0xc3, 0x32, 0x57,
	0x8c, 0xd9, 0x06, 0xcf, 0x62, 0x83, 0x25, 0x5e, 0xa1, 0xc3, 0xbe, 0x03, 0x17, 0x14, 0x9f, 0x51,
	0x20, 0x8e, 0xbd, 0xc0, 0x0d, 0x8f, 0x51, 0x20, 0xc2, 0x6e, 0xc4, 0x6a, 0x57, 0x50, 0x24, 0x6a,
	0x12, 0x86, 0x8b, 0xc2, 0x47, 0x08, 0xb1, 0x13, 0xbc, 0xcb, 0xeb, 0xc9, 0x2f, 0xc0, 0x55, 0xa5,
	0x52, 0x7d, 0x7a, 0x68, 0x3b, 0x27, 0xc9, 0xb5, 0x37, 0x7d, 0xdc, 0xf1, 0xa2, 0x93, 0x14, 0xd3,
	0x55, 0x14, 0xe2, 0xcb, 0x12, 0xfa, 0x3e, 0x02, 0xcb, 0x55, 0xb6, 0x8d, 0xa0, 0x0a, 0xe5, 0xc7,
	0x70, 0xcd, 0xf5, 0x18, 0xe2, 0x40, 0xb6, 0xd9, 0x4d, 0xfe, 0xff, 0x46, 0x18, 0x59, 0xed, 0xb6,
	0xdd, 0xe9, 0x50, 0x37, 0x59, 0xb7, 0xb5, 0x6b, 0xfa, 0x64, 0x1a, 0xb2, 0x15, 0xe7, 0xe2, 0x26,
	0x6f, 0x73, 0x37, 0x8c, 0x76, 0x45, 0x0b, 0xb5, 0x9a, 0x07, 0xcc, 0x0c, 0x97, 0xae, 0xec, 0xcc,
	0x5c, 0x1f, 0x30, 0x33, 0x5c, 0xc0, 0x32, 0x33, 0xb3, 0x07, 0x57, 0xd2, 0xfb, 0xfd, 0xe8, 0x90,
	0x0f, 0xd5, 0xf1, 0x6d, 0xaf, 0x2d, 0xd6, 0xa1, 0x26, 0x2e, 0xcf, 0x21, 0x03, 0x2f, 0x4b, 0xe0,
	0x5d, 0x0e, 0x6b, 0x0a, 0x50, 0x5c, 0x9a, 0xa9, 0xd0, 0x50, 0x78, 0x59, 0x61, 0x74, 0xa9, 0x6f,
	0x9f, 0xe8, 0xd2, 0x37, 0x0c, 0xf9, 0xf3, 0x88, 0xfc, 0x05, 0xd9, 0xee, 0x0e, 0x6f, 0x96, 0xca,
	0xe3, 0xe0, 0x6e, 0xbe, 0x06, 0x4f, 0x4b, 0x0e, 0xe0, 0x7c, 0x33, 0x1a, 0x79, 0x94, 0x59, 0x4a,
	0x5b, 0xd6, 0x5e, 0x40, 0xe2, 0x6b, 0x02, 0x84, 0x4f, 0xf7, 0x3e, 0x02, 0xec, 0xca, 0x7a, 0xf2,
	0x3c, 0x2c, 0x0a, 0x53, 0x0b, 0x9d, 0xc3, 0x47, 0xb6, 0x5f, 0x7b, 0x51, 0x1e, 0x63, 0x6f, 0xbe,
	0x69, 0x2e, 0x60, 0xd5, 0x8e, 0xac, 0x21, 0x9f, 0xc0, 0x8b, 0x41, 0xb7, 0x6d, 0xd9, 0xae, 0xeb,
	0xf1, 0xf1, 0xd8, 0xbe, 0x45, 0x03, 0xb7, 0x13, 0x7a, 0x41, 0xcc, 0x70, 0x3a, 0x83, 0x30, 0x90,
	0x6e, 0x6a, 0x3e, 0x09, 0xac, 0xf6, 0x12, 0x4a, 0xc8, 0xd5, 0xa0, 0xdb, 0xde, 0x4c, 0x9a, 0x6c,
	0xab, 0x16, 0x77, 0xc3, 0xe8, 0x41, 0x18, 0xa0, 0x2b, 0x9a, 0x4f, 0x06, 0x23, 0x0f, 0xe0, 0x0a,
	0x57, 0x43, 0xae, 0x17, 0x51, 0x27, 0xb6, 0xbc, 0x10, 0x51, 0x46, 0x76, 0xe0, 0x86, 0xed, 0x44,
	0x06, 0xb9, 0xfc, 0xd4, 0x36, 0x90, 0xa4, 0x4b, 0x5d, 0x46, 0xef, 0x20, 0xec, 0x4e, 0x78, 0x37,
	0x8c, 0x4c, 0x04, 0x94, 0x72, 0xc1, 0x25, 0x86, 0x7c, 0x08, 0xcf, 0xf5, 0xe3, 0x63, 0xf4, 0xb3,
	0xae, 0xb8, 0x26, 0xcd, 0xe2, 0xbc, 0x81, 0x38, 0x9f, 0xc9, 0xe2, 0xdc, 0x4f, 0x80, 0x35, 0xbc,
	0xc6, 0x5f, 0x98, 0xd2, 0xac, 0xcf, 0xf7, 0x59, 0xaf, 0xd1, 0xac, 0x2c, 0xcc, 0x2b, 0xb0, 0xc8,
	0xe2, 0xc8, 0x8e, 0xe9, 0xe1, 0x49, 0xc6, 0x64, 0x5e, 0x50, 0xa5, 0xc2, 0x10, 0x79, 0x89, 0x9b,
	0x5a, 0x49, 0x0c, 0x86, 0xd5, 0xb0, 0x9d, 0x18, 0x0f, 0xc4, 0x45, 0xdc, 0x4d, 0xd2, 0x9a, 0xbb,
	0x58, 0x41, 0x6e, 0xc1, 0xac, 0xd3, 0xb0, 0x5c, 0xda, 0x60, 0xb5, 0x29, 0xb4, 0xb1, 0xf2, 0x8f,
	0xe3, 0xdc, 0x36, 0x36, 0x67, 0x1c, 0xfe, 0x0f, 0x23, 0x9f, 0x40, 0x35, 0x19, 0x11, 0x5f, 0x20,
	0x7c, 0x73, 0x9d, 0x46, 0x24, 0xaf, 0xe4, 0x21, 0x41, 0x12, 0x37, 0xf6, 0x65, 0xcb, 0x87, 0xa2,
	0xa1, 0xb9, 0xc4, 0xb2, 0x05, 0xdc, 0x08, 0x38, 0xb6, 0xbd, 0x18, 0xb9, 0x9c, 0xea, 0x38, 0x3c,
	0xe9, 0x32, 0x79, 0x4c, 0x5e, 0xe5, 0x00, 0x77, 0x51, 0xc5, 0x8a, 0xea, 0x8f, 0xb0, 0x96, 0xbc,
	0x07, 0x46, 0x8f, 0x5c, 0x49, 0xc2, 0x99, 0x15, 0x87, 0x96, 0x17, 0x38, 0x7e, 0xd7, 0xa5, 0x68,
	0x0c, 0x4f, 0x9b, 0x17, 0x33, 0xd2, 0x24, 0x35, 0x1f, 0x3b, 0x08, 0x77, 0x04, 0x14, 0xf9, 0x2a,
	0x9c, 0xcd, 0x1e, 0x29, 0xd5, 0x10, 0xe6, 0x74, 0xd5, 0x72, 0x26, 0x73, 0xb2, 0x14, 0xc3, 0xa8,
	0xbf, 0x05, 0x4b, 0x3d, 0x54, 0x4e, 0x70, 0x93, 0xfe, 0x99, 0xe6, 0x15, 0x45, 0xbf, 0x50, 0xea,
	0x21, 0xd4, 0x5c, 0x4b, 0x02, 0xcf, 0x50, 0xd7, 0x92, 0xc0, 0x98, 0xba, 0x96, 0x2e, 0x60, 0xa5,
	0x58, 0x2f, 0xb5, 0xd2, 0x7a, 0x89, 0x9f, 0x41, 0x92, 0x02, 0xe3, 0x27, 0x25, 0xcd, 0xd9, 0xbe,
	0xe9, 0xc4, 0xde, 0x91, 0x17, 0x9f, 0x1c, 0x70, 0xfb, 0x98, 0x89, 0xeb, 0xbc, 0x37, 0xa0, 0x66,
	0xcb, 0x62, 0x4b, 0x8e, 0x82, 0xab, 0x88, 0x2e, 0xa3, 0x8e, 0xbc, 0x48, 0x39, 0xab, 0xea, 0xf7,
	0x71, 0x44, 0x5e, 0x9b, 0x7e, 0xc0, 0xa8, 0x43, 0xbe, 0x05, 0x20, 0x2b, 0x3c, 0xaa, 0x0e, 0xa2,
	0xf9, 0xf1, 0x0a, 0xfd, 0xbd, 0x6f, 0xa8, 0x32, 0x71, 0xb7, 0xa9, 0x21, 0xac, 0x47, 0x00, 0x08,
	0x28, 0x46, 0x79, 0x19, 0x2a, 0xb1, 0xb0, 0xf5, 0xe3, 0xc8, 0x0b, 0x0e, 0x25, 0x8f, 0xca, 0x58,
	0xb6, 0x8f, 0x45, 0x9c, 0x8b, 0x02, 0xc4, 0xa7, 0x47, 0xd4, 0x97, 0x4e, 0x2b, 0xc0, 0x22, 0x0c,
	0x7d, 0x21, 0xeb, 0x50, 0x41, 0xd2, 0xbc, 0x40, 0x50, 0x27, 0xee, 0xe1, 0x81, 0x97, 0xed, 0x04,
	0x9c, 0xa4, 0xfa, 0xdf, 0x2a, 0xc0, 0x42, 0x66, 0x44, 0xe9, 0x1d, 0x66, 0x47, 0x76, 0x29, 0xee,
	0x30, 0x3b, 0xe4, 0x2a, 0x2c, 0xf5, 0x72, 0x4b, 0x46, 0x39, 0xb0, 0x0c, 0x97, 0x4c, 0x98, 0xc1,
	0x21, 0x88, 0xa9, 0x29, 0xdf, 0xbc, 0x35, 0x29, 0x87, 0x52, 0x26, 0x98, 0x12, 0x93, 0xf1, 0x67,
	0x32, 0xa7, 0xf2, 0x06, 0x37, 0x7e, 0xb2, 0x0a, 0xa6, 0x90, 0xc8, 0xe1, 0xd3, 0x30, 0xef, 0x7b,
	0x47, 0xd2, 0xa2, 0x2c, 0x8a, 0x0b, 0x34, 0x5e, 0x80, 0x06, 0xd3, 0x1a, 0x40, 0x1c, 0xc6, 0xb6,
	0xb4, 0xaf, 0x4a, 0xf2, 0x9e, 0x92, 0x97, 0x60, 0xf5, 0x65, 0xa8, 0xf0, 0x15, 0x97, 0xec, 0xbb,
	0xe2, 0x4e, 0xaa, 0x1c, 0x74, 0x95, 0x06, 0x65, 0xc6, 0x67, 0xda, 0x40, 0xde, 0x67, 0x79, 0x03,
	0xb9, 0x07, 0x15, 0xa7, 0x21, 0x6c, 0x61, 0x54, 0x4c, 0xc5, 0x31, 0x0e, 0x7f, 0x8a, 0x32, 0x13,
	0x1c, 0xf5, 0x93, 0x19, 0x1f, 0x43, 0x75, 0xf7, 0x11, 0xb5, 0x55, 0xbc, 0xcb, 0x4e, 0xd0, 0x08,
	0x39, 0x21, 0x6d, 0x5e, 0x66, 0x69, 0xdd, 0xce, 0x63, 0x09, 0xba, 0x10, 0xaf, 0xc1, 0x92, 0x1d,
	0xc7, 0x91, 0xf7, 0xa8, 0x1b, 0x53, 0xe9, 0xf0, 0x2f, 0xe2, 0x3a, 0x59, 0x4c, 0x8a, 0xd1, 0xe7,
	0x6f, 0xfc, 0x8a, 0xee, 0x2f, 0xbe, 0x1f, 0x1e, 0x7a, 0xc1, 0x66, 0x74, 0x98, 0xeb, 0x36, 0x38,
	0x80, 0x8a, 0xdd, 0x8d, 0x9b, 0x56, 0x24, 0x46, 0x23, 0xef, 0x09, 0x5f, 0x99, 0x38, 0x6c, 0xc7,
	0x2c, 0x73, 0x34, 0xf2, 0xc3, 0x38, 0xd3, 0x3b, 0x0c, 0x93, 0xc6, 0xc6, 0x6f, 0xeb, 0x77, 0x96,
	0xf7, 0x68, 0x3c, 0x6a, 0x68, 0xd2, 0xdd, 0x55, 0x4c, 0xdd, 0x5d, 0xf7, 0x12, 0x7f, 0x46, 0xc7,
	0x8e, 0x9b, 0xf2, 0x6a, 0xf2, 0xea, 0xe8, 0xf3, 0xf7, 0x9e, 0x1d, 0x37, 0x95, 0xdf, 0x03, 0xaf,
	0x8f, 0xbe, 0x0d, 0xcb, 0x4e, 0x1a, 0x24, 0x27, 0x17, 0xdc, 0x14, 0x5e, 0x2e, 0xbc, 0x92, 0x8f,
	0x2e, 0x1b, 0x59, 0x27, 0xee, 0x17, 0xaa, 0x4e, 0x4f, 0x31, 0x79, 0x15, 0x56, 0xf9, 0xae, 0xdc,
	0xb1, 0x4f, 0xfc, 0x50, 0x5a, 0x81, 0xf2, 0xf6, 0x64, 0x1a, 0xf7, 0x88, 0x33, 0x5d, 0x46, 0xf7,
	0x44, 0xe5, 0xdd, 0x30, 0x92, 0xd7, 0x28, 0x6b, 0x30, 0xd7, 0x89, 0xbc, 0x30, 0xf2, 0xe2, 0x13,
	0xed, 0x7e, 0x53, 0x15, 0x19, 0x1f, 0x67, 0xb9, 0x67, 0xd2, 0x38, 0xe3, 0x1a, 0x2d, 0x3e, 0x81,
	0x6b, 0xd4, 0xf8, 0xf5, 0x92, 0x76, 0x0f, 0x72, 0x8f, 0xc6, 0xe8, 0x18, 0x9e, 0x7c, 0x7e, 0x76,
	0x13, 0xf7, 0x5f, 0x07, 0x6f, 0x01, 0xe5, 0x0c, 0x5d, 0x1f, 0x67, 0x86, 0x38, 0xbc, 0x72, 0x14,
	0xca, 0x3b, 0xc4, 0x8c, 0x3b, 0x7b, 0x0a, 0x51, 0x9d, 0xd2, 0x9d, 0x3d, 0x70, 0xbe, 0xa7, 0xff,
	0x5f, 0xcc, 0xf7, 0xcc, 0x78, 0xf3, 0x3d, 0xdb, 0x3f, 0xdf, 0xbf, 0x55, 0x1c, 0x30, 0x27, 0x7c,
	0xd6, 0xbf, 0xbc, 0xeb, 0x5b, 0xf2, 0x8b, 0xb0, 0x94, 0xec, 0x9d, 0x52, 0xcb, 0x17, 0x47, 0x3b,
	0xd9, 0x07, 0x68, 0x79, 0x73, 0xd1, 0xce, 0x14, 0x66, 0x04, 0x47, 0xf8, 0x1d, 0xfb, 0x04, 0x47,
	0x5c, 0x60, 0x0c, 0x16, 0x9c, 0xe9, 0xd1, 0x11, 0x25, 0xc3, 0x05, 0xc7, 0xf8, 0x9d, 0x1e, 0xd6,
	0xe1, 0x05, 0xd1, 0xcf, 0xc5, 0x79, 0x5c, 0x71, 0x36, 0x5e, 0x1c, 0xc0, 0x3e, 0x2e, 0x79, 0xc9,
	0x85, 0x5a, 0x41, 0xbf, 0x50, 0xfb, 0xcb, 0x25, 0x2d, 0xf6, 0x78, 0xb7, 0xeb, 0xc7, 0xde, 0xe1,
	0x98, 0x1a, 0x84, 0xc0, 0x14, 0xff, 0x8d, 0x9b, 0x59, 0xc5, 0xc4, 0xdf, 0x3f, 0xd7, 0x21, 0x5f,
	0xa6, 0x0e, 0xf9, 0x9d, 0xe2, 0xb0, 0xa9, 0x11, 0xdb, 0x87, 0xda, 0x4e, 0xd1, 0xd7, 0x22, 0x94,
	0xc9, 0x18, 0xdb, 0x29, 0xde, 0x14, 0xc9, 0xed, 0x14, 0xdd, 0x31, 0x3f, 0x1b, 0x35, 0xa2, 0xa4,
	0x67, 0x2a, 0x4f, 0x7a, 0x9e, 0x4c, 0x91, 0xfc, 0x78, 0x10, 0xff, 0xc6, 0xd2, 0x26, 0x3f, 0x17,
	0x6d, 0x4d, 0x9f, 0xbc, 0x3a, 0x8c, 0x8b, 0xa6, 0x08, 0x7b, 0x43, 0x3d, 0x22, 0x76, 0xb3, 0x69,
	0x53, 0x7e, 0x19, 0xff, 0x7d, 0x0a, 0xea, 0x19, 0x83, 0x87, 0x1f, 0x35, 0x91, 0x06, 0x36, 0x8a,
	0xf9, 0x7d, 0x8c, 0x2e, 0x7e, 0x79, 0x8c, 0x2e, 0x3d, 0x09, 0xa3, 0x6f, 0xc1, 0xb4, 0x88, 0xc6,
	0x11, 0xd3, 0x95, 0x7b, 0xed, 0xa9, 0xc2, 0x3d, 0x4c, 0xd1, 0xe4, 0x8f, 0xbe, 0xfe, 0x99, 0xeb,
	0xd3, 0x3f, 0xe4, 0x1d, 0x3e, 0xb7, 0x61, 0xcb, 0x13, 0xd7, 0x74, 0xa3, 0xc2, 0x8f, 0x1c, 0x3b,
	0xd8, 0x42, 0x68, 0x53, 0xb6, 0x22, 0x0e, 0x9c, 0x63, 0x81, 0xdd, 0x61, 0xcd, 0x30, 0xb6, 0xbc,
	0xa0, 0x11, 0x4a, 0x07, 0x9c, 0x4b, 0x59, 0x0d, 0x50, 0x5b, 0xbd, 0x98, 0x87, 0xf0, 0x41, 0xe8,
	0xd2, 0x7d, 0xd9, 0x9c, 0x1f, 0xb3, 0xcc, 0x15, 0xa6, 0x7d, 0xa1, 0x6b, 0xce, 0xa5, 0xcc, 0xf8,
	0x83, 0xe2, 0x50, 0x41, 0x13, 0x5a, 0xb2, 0x82, 0x13, 0x60, 0x61, 0x48, 0x94, 0xb2, 0xb9, 0x46,
	0x4d, 0x9d, 0x50, 0xb2, 0xe5, 0x28, 0xc5, 0x95, 0x91, 0xd8, 0x62, 0x8f, 0x2e, 0x1b, 0xa0, 0x1a,
	0x9e, 0x40, 0x6f, 0x69, 0x7c, 0x9f, 0x3a, 0x15, 0xdf, 0x3d, 0xb8, 0x11, 0x51, 0xd6, 0x09, 0x03,
	0x46, 0x95, 0x67, 0x8a, 0x59, 0xe8, 0x9d, 0x6f, 0x44, 0x61, 0xdb, 0xf2, 0xc4, 0x23, 0x2c, 0x2b,
	0x9d, 0x1b, 0x57, 0x1c, 0x6c, 0x94, 0xe7, 0xe9, 0x39, 0xd5, 0x5a, 0x3a, 0xac, 0xd8, 0x1d, 0x3b,
	0xb6, 0xef, 0x46, 0x61, 0x5b, 0x3e, 0xdf, 0x4a, 0x66, 0xc5, 0x35, 0x7e, 0x57, 0xf7, 0xef, 0xdc,
	0xa3, 0xb1, 0xb8, 0x7b, 0x71, 0x7f, 0x26, 0x0b, 0xfd, 0x3d, 0xa8, 0x08, 0x37, 0xb1, 0x83, 0x51,
	0x60, 0x72, 0xad, 0x5f, 0x1b, 0x79, 0xb3, 0x2f, 0x82, 0xc6, 0xcc, 0xb2, 0xa7, 0x45, 0x90, 0x7d,
	0x00, 0x55, 0x35, 0xb4, 0x27, 0x50, 0xd2, 0xf2, 0xce, 0x79, 0xef, 0x8f, 0xb4, 0x15, 0x62, 0xb4,
	0x72, 0xa6, 0x90, 0x2f, 0xa1, 0xf7, 0xa5, 0xfb, 0x9d, 0xba, 0xa7, 0x59, 0x44, 0x0b, 0x9e, 0x8e,
	0xcf, 0xf8, 0x9f, 0xc5, 0x4c, 0xec, 0x07, 0xa3, 0xd1, 0xcf, 0xde, 0xb4, 0x4f, 0x03, 0x7e, 0xc5,
	0x14, 0x4f, 0x12, 0xf0, 0xfb, 0xd3, 0x9e, 0xd1, 0x7c, 0xb7, 0x42, 0x26, 0xc4, 0x67, 0xb6, 0x3f,
	0x26, 0x6b, 0xa5, 0x8f, 0xd9, 0x26, 0x8d, 0x8d, 0xdf, 0xd3, 0xe7, 0x40, 0x3c, 0x3e, 0xf8, 0x19,
	0x7a, 0x73, 0x92, 0xd8, 0xbd, 0xa9, 0x09, 0x63, 0xf7, 0x7e, 0xb6, 0xac, 0xcf, 0xf0, 0x56, 0x30,
	0x91, 0xf3, 0xf6, 0x57, 0x8b, 0x5a, 0xd8, 0xef, 0x6d, 0x3b, 0x76, 0x9a, 0x18, 0x00, 0x35, 0x92,
	0xc1, 0x7b, 0x43, 0x62, 0xc1, 0x9e, 0x1b, 0x3b, 0x16, 0xac, 0x37, 0xfa, 0x6b, 0x20, 0x7b, 0x4a,
	0x3f, 0x1d, 0xf6, 0x4c, 0xf5, 0xb3, 0xe7, 0x5f, 0x16, 0x06, 0x33, 0x82, 0x6b, 0x94, 0x7e, 0x62,
	0x0b, 0x4f, 0x48, 0xec, 0x4f, 0xed, 0x0c, 0x63, 0xbc, 0xa7, 0x9d, 0xa6, 0x0f, 0xa2, 0x6e, 0xe0,
	0x8c, 0x31, 0x99, 0xdc, 0x28, 0x6e, 0x68, 0xf1, 0x5c, 0xf2, 0xcb, 0x58, 0x1d, 0x80, 0x8b, 0x0b,
	0xcd, 0xb3, 0x60, 0x68, 0x81, 0x8b, 0xcc, 0x89, 0xbc, 0x47, 0x74, 0xdf, 0x69, 0xd2, 0xb6, 0x2d,
	0xaf, 0x82, 0xf9, 0x56, 0x6a, 0xfc, 0x66, 0x61, 0x24, 0x18, 0x67, 0xee, 0x07, 0x30, 0x4b, 0x83,
	0x38, 0xf2, 0x12, 0x3d, 0xfd, 0x56, 0x7e, 0x9c, 0xe4, 0x10, 0x3c, 0x1b, 0x18, 0x4f, 0x62, 0x2a,
	0x5c, 0xf5, 0x57, 0x60, 0x1a, 0x4b, 0xf4, 0x38, 0xc6, 0x79, 0xa1, 0x0a, 0x56, 0x61, 0x46, 0xee,
	0x32, 0xc2, 0xaf, 0x2d, 0xbf, 0x8c, 0x4b, 0xb0, 0xd6, 0xd7, 0xcf, 0xfb, 0x92, 0x47, 0x48, 0xd1,
	0xa7, 0x79, 0x00, 0x9c, 0x96, 0xaf, 0xc3, 0xbc, 0x62, 0xaa, 0xa2, 0xe6, 0xf2, 0xc8, 0x7b, 0x40,
	0x33, 0x6d, 0x63, 0x5c, 0x86, 0x4b, 0x7d, 0x3d, 0x6c, 0xf9, 0x5d, 0x16, 0xd3, 0xe8, 0x81, 0xdd,
	0xe6, 0x13, 0x69, 0x7c, 0x25, 0x1f, 0xc4, 0x14, 0x6f, 0x78, 0x7a, 0xaf, 0xd8, 0x8c, 0x35, 0xed,
	0x39, 0xa7, 0x6a, 0x26, 0xd9, 0xc7, 0xb1, 0xbe, 0x31, 0xbc, 0x9a, 0x63, 0xac, 0xc1, 0xac, 0x7a,
	0x7e, 0x25, 0x90, 0xaa, 0x4f, 0xe3, 0x75, 0x2d, 0xce, 0x5e, 0x35, 0x34, 0xbd, 0xe0, 0x70, 0x84,
	0xcc, 0x19, 0x74, 0x48, 0x3b, 0xe1, 0x73, 0xac, 0xe0, 0xe5, 0x9d, 0x78, 0x4c, 0xc0, 0xc6, 0xf1,
	0x15, 0xa4, 0xf7, 0x83, 0x66, 0x39, 0x4e, 0x7e, 0x0f, 0x66, 0xe8, 0x9e, 0x1d, 0xc5, 0x78, 0xd9,
	0x49, 0x23, 0x4e, 0xfa, 0x56, 0x3e, 0x08, 0x1f, 0xd0, 0x3a, 0x94, 0x3b, 0x69, 0x89, 0xba, 0x4e,
	0xd3, 0x8a, 0x8c, 0x5b, 0x9a, 0x51, 0xd2, 0x2b, 0x1a, 0xa3, 0x58, 0xf1, 0x8b, 0x39, 0x6d, 0x79,
	0xef, 0x6f, 0xc2, 0x4c, 0x8b, 0x59, 0x2e, 0x6d, 0x8c, 0x13, 0x2e, 0x2e, 0x44, 0x6a, 0xba, 0xc5,
	0xff, 0x31, 0xfe, 0x41, 0x41, 0x3b, 0x6c, 0x24, 0x4b, 0xa7, 0xe3, 0x7b, 0xf1, 0x48, 0x63, 0xf7,
	0x1c, 0xde, 0x8a, 0x67, 0x95, 0xc2, 0x03, 0x19, 0xe6, 0x99, 0x8d, 0xec, 0xcf, 0xbd, 0x7e, 0x9d,
	0xea, 0xb9, 0x7e, 0x15, 0xc1, 0x92, 0xcc, 0xea, 0xd0, 0xc8, 0x62, 0x7c, 0x20, 0xb8, 0x03, 0x4e,
	0x63, 0xb0, 0x24, 0xdb, 0xa3, 0x11, 0x0e, 0xce, 0x78, 0x6d, 0xe8, 0xb0, 0xe5, 0x19, 0x1e, 0x9b,
	0x0a, 0xc1, 0x98, 0x37, 0xe5, 0x97, 0xf1, 0x2d, 0xb8, 0x9c, 0x5a, 0xb6, 0x27, 0x2c, 0xa6, 0xed,
	0x4d, 0xd7, 0xdd, 0xd2, 0x82, 0x81, 0x39, 0xcd, 0x6f, 0x72, 0x5d, 0x37, 0x2e, 0x33, 0xc5, 0x65,
	0xff, 0x34, 0x5e, 0xf6, 0x1b, 0x6f, 0x8d, 0x42, 0x2f, 0xc7, 0x16, 0x51, 0xd6, 0xf5, 0x63, 0x75,
	0x01, 0x2a, 0xbe, 0x0c, 0xaa, 0xe9, 0x42, 0xd1, 0xf8, 0x4e, 0x14, 0x76, 0x7a, 0x07, 0x37, 0x56,
	0x44, 0x73, 0xf6, 0x64, 0x97, 0x15, 0xa5, 0xb7, 0x47, 0x76, 0x93, 0x37, 0xc8, 0x4f, 0xe0, 0xd9,
	0x9e, 0xd6, 0x26, 0xe5, 0x12, 0xd0, 0x3b, 0xcc, 0xf3, 0x30, 0x17, 0xfa, 0xae, 0xa5, 0xe9, 0x98,
	0xd9, 0xd0, 0x77, 0x51, 0x3a, 0xce, 0xc3, 0x5c, 0x40, 0x8f, 0x75, 0xb9, 0x99, 0x0d, 0xe8, 0x31,
	0x86, 0x18, 0xbf, 0x33, 0x06, 0xf6, 0xbc, 0xd1, 0x7d, 0x53, 0xd3, 0xbe, 0x09, 0xff, 0xf5, 0x35,
	0x76, 0xfa, 0x75, 0xf2, 0x46, 0x1e, 0xea, 0xbc, 0x31, 0xbd, 0xad, 0x25, 0x2a, 0x48, 0xf9, 0x3d,
	0xee, 0xc2, 0x7f, 0x33, 0xb7, 0x75, 0xfe, 0x4c, 0xad, 0xf7, 0xb4, 0xfc, 0xa0, 0xe3, 0xda, 0x31,
	0xfd, 0x72, 0xd8, 0x71, 0x6b, 0x04, 0xf6, 0xbc, 0x91, 0x7d, 0xda, 0x37, 0xcb, 0xa2, 0xed, 0x97,
	0xb7, 0x0e, 0xdf, 0x19, 0xa3, 0x87, 0xbc, 0x11, 0xfe, 0xa3, 0xa2, 0x16, 0x57, 0xb2, 0xc7, 0x8f,
	0xcf, 0xf8, 0xa6, 0xda, 0xf8, 0x6b, 0x45, 0x2d, 0xb5, 0x85, 0xcc, 0xd9, 0xf1, 0x14, 0x59, 0x81,
	0x6a, 0x8b, 0xcf, 0xca, 0xa6, 0xef, 0xef, 0xca, 0xcc, 0x38, 0xd5, 0x02, 0xb9, 0x02, 0x97, 0xb1,
	0x14, 0x63, 0xad, 0x64, 0xf9, 0x41, 0xc8, 0xcd, 0x6a, 0x6e, 0x21, 0x89, 0x00, 0x9a, 0x6a, 0x91,
	0xbc, 0x00, 0xd7, 0x52, 0xb0, 0x4d, 0xc7, 0xa1, 0x9d, 0x78, 0x18, 0x70, 0x89, 0xbc, 0x02, 0x2f,
	0xa5, 0xc0, 0xfa, 0x4b, 0x96, 0x61, 0x4d, 0xa6, 0xc8, 0x33, 0x70, 0x09, 0x9b, 0xa8, 0xa8, 0x2f,
	0x13, 0xe3, 0xc8, 0xf1, 0x56, 0x9c, 0x3d, 0x0c, 0x1e, 0x84, 0x2e, 0xad, 0x4e, 0x93, 0x67, 0x61,
	0x3d, 0x03, 0x84, 0xa1, 0x39, 0x3d, 0x50, 0x33, 0x98, 0x0f, 0x46, 0xe6, 0xb1, 0x11, 0x44, 0x29,
	0x7b, 0x75, 0x33, 0x16, 0xb1, 0x9f, 0xd5, 0x59, 0xc3, 0xd2, 0xd4, 0x32, 0x32, 0x2e, 0xb5, 0x4c,
	0xa3, 0x43, 0xb2, 0x89, 0xaf, 0x15, 0x63, 0x21, 0xe6, 0x8b, 0xf9, 0xef, 0xd7, 0x52, 0xb6, 0x0b,
	0x73, 0x5d, 0xb4, 0x34, 0x2e, 0x0c, 0xed, 0x80, 0x9b, 0x9d, 0xdf, 0xd2, 0x1c, 0xbb, 0xf7, 0x68,
	0x9c, 0xe6, 0x6a, 0xe1, 0xbd, 0x67, 0x42, 0x4f, 0x0a, 0x5a, 0xe8, 0xc9, 0x35, 0x58, 0x4a, 0xf3,
	0x0d, 0xa9, 0x98, 0x20, 0xf1, 0xac, 0x20, 0x63, 0x3c, 0x18, 0x7f, 0xa7, 0x34, 0x0c, 0xbf, 0x30,
	0x53, 0x93, 0x7c, 0x17, 0x3a, 0x95, 0x2f, 0xe7, 0x51, 0xd9, 0x93, 0x4d, 0x46, 0x90, 0xaa, 0x32,
	0x64, 0x88, 0x87, 0xfc, 0x2f, 0xc3, 0x4a, 0x3a, 0x3a, 0x24, 0x40, 0x1f, 0x22, 0x71, 0x74, 0xef,
	0xa2, 0xd8, 0x41, 0x3f, 0x82, 0xab, 0x99, 0x81, 0x58, 0xb6, 0xd3, 0xb2, 0x22, 0xea, 0x1c, 0xb9,
	0xc2, 0x5d, 0x66, 0xfb, 0xbe, 0x74, 0x5a, 0x66, 0x5e, 0x0a, 0xad, 0xeb, 0xdd, 0x6e, 0x3a, 0x2d,
	0x93, 0xb7, 0x90, 0x29, 0x71, 0xd0, 0x33, 0x49, 0x6c, 0x38, 0x13, 0x47, 0x76, 0xc0, 0xd0, 0xa4,
	0xf1, 0x82, 0x43, 0x49, 0xe7, 0x14, 0x3e, 0x24, 0x9b, 0x9c, 0x4e, 0x92, 0x41, 0x26, 0xa8, 0xbd,
	0x07, 0x97, 0x71, 0x68, 0xd6, 0x09, 0xe5, 0xf6, 0x03, 0x0e, 0x3d, 0x05, 0x93, 0x1d, 0x4e, 0xe3,
	0xa6, 0x7e, 0x01, 0x01, 0xbf, 0x49, 0xe3, 0x83, 0x70, 0xd3, 0x69, 0x1d, 0x24, 0x40, 0x62, 0xad,
	0xfe, 0xa8, 0xa8, 0x3f, 0x8a, 0x6e, 0x72, 0x5b, 0x2f, 0x2b, 0x0e, 0x77, 0x61, 0x5a, 0x9c, 0x20,
	0x4f, 0x3b, 0x4d, 0xa2, 0xb9, 0x2e, 0x56, 0xc5, 0x8c, 0x58, 0xbd, 0x0e, 0x35, 0xaf, 0xc3, 0x04,
	0xa7, 0x39, 0x29, 0x8f, 0x28, 0xfa, 0x8c, 0xa3, 0x36, 0xbe, 0xbe, 0xe5, 0x14, 0xac, 0x78, 0x1d,
	0x86, 0x9c, 0x3d, 0x08, 0x6f, 0xd3, 0x1d, 0x59, 0x37, 0x48, 0x1c, 0xa7, 0x06, 0x89, 0x23, 0x79,
	0x0f, 0x2e, 0x05, 0x61, 0xec, 0x35, 0x4e, 0x64, 0x1f, 0xf6, 0xa3, 0xb0, 0xab, 0xa6, 0xdc, 0x41,
	0x8a, 0xa5, 0x17, 0x54, 0xc4, 0x93, 0x3f, 0x2d, 0x80, 0xb1, 0xc3, 0x4d, 0x0e, 0x8a, 0x04, 0x09,
	0xd6, 0x18, 0x7f, 0x3c, 0x87, 0x5b, 0x5c, 0xb8, 0xdf, 0x56, 0xaf, 0x06, 0x05, 0xb7, 0xc6, 0x7c,
	0x35, 0xa8, 0xbd, 0x15, 0xc4, 0x1f, 0x2a, 0xda, 0x4c, 0x30, 0xaa, 0x8c, 0x65, 0x22, 0xda, 0xcc,
	0xf8, 0xdf, 0xd9, 0xb3, 0x20, 0xd7, 0x6d, 0xea, 0xc6, 0x81, 0xcb, 0x20, 0x1f, 0xf5, 0x28, 0x83,
	0xb4, 0xcf, 0x36, 0x2a, 0x0e, 0xb0, 0x8d, 0x92, 0x2b, 0x8f, 0xd2, 0xe4, 0x57, 0x1e, 0xa7, 0x76,
	0xec, 0xac, 0xc0, 0xb4, 0x98, 0xc8, 0x69, 0x11, 0xbd, 0x88, 0x1f, 0x86, 0x39, 0x92, 0x62, 0xce,
	0xf9, 0x17, 0x81, 0x88, 0xa0, 0xb2, 0x28, 0x3c, 0x66, 0xf2, 0x81, 0xa3, 0x2b, 0x6f, 0xbc, 0xab,
	0x58, 0x63, 0x86, 0xc7, 0x72, 0x37, 0x70, 0x8d, 0x5f, 0xd2, 0x7c, 0x14, 0xa8, 0xc6, 0x0f, 0x42,
	0xc5, 0xba, 0x77, 0xf5, 0x77, 0x6e, 0x85, 0xd1, 0xae, 0xdf, 0xac, 0xaf, 0x47, 0x7b, 0xed, 0x36,
	0x54, 0xe4, 0x8d, 0xce, 0xe0, 0xde, 0x85, 0x76, 0xac, 0xa6, 0x1e, 0x12, 0x86, 0x99, 0xa2, 0x26,
	0x1c, 0x84, 0x49, 0x63, 0x73, 0x29, 0xc1, 0x21, 0x93, 0x4d, 0xfd, 0x58, 0x7f, 0xc5, 0xad, 0x72,
	0x78, 0x29, 0x8a, 0x3f, 0x06, 0xd2, 0x96, 0xd7, 0x7b, 0xc2, 0xd1, 0x6b, 0xd9, 0xd1, 0xa1, 0xec,
	0xf5, 0xc5, 0x7c, 0xcf, 0x4c, 0x36, 0x6a, 0xc0, 0xac, 0xb6, 0x7b, 0xe3, 0x08, 0x32, 0x3c, 0xd0,
	0x03, 0x19, 0x87, 0x7b, 0xac, 0x4b, 0xc3, 0x3d, 0xd6, 0xce, 0x10, 0x2a, 0xc4, 0x85, 0xcf, 0x5c,
	0x14, 0x1e, 0x2b, 0xaf, 0xd2, 0x64, 0x63, 0xe7, 0x3c, 0x9b, 0x8d, 0xc2, 0xe3, 0xfb, 0x1e, 0x8b,
	0x8d, 0xdf, 0xd5, 0x79, 0xb5, 0xef, 0xd8, 0x81, 0xce, 0xab, 0x8f, 0xa0, 0xaa, 0x5f, 0x2b, 0x69,
	0x9c, 0xca, 0x4d, 0x37, 0xd2, 0x77, 0x11, 0x6a, 0x2e, 0x46, 0xd9, 0x8b, 0xd1, 0x2f, 0x97, 0x51,
	0xfe, 0x10, 0x12, 0x84, 0x13, 0xae, 0xf7, 0x66, 0x6c, 0xc2, 0xe1, 0x73, 0x6e, 0xe9, 0x57, 0x64,
	0x46, 0x07, 0x9e, 0xcb, 0x26, 0x3b, 0xdb, 0xd5, 0xdf, 0x62, 0x3d, 0x0c, 0x30, 0x49, 0xdd, 0x60,
	0xd5, 0x94, 0xbd, 0x4f, 0xbb, 0x96, 0xbc, 0xd6, 0x43, 0xd5, 0xe4, 0xa5, 0x11, 0x93, 0x9a, 0x72,
	0xf2, 0x28, 0x33, 0x5e, 0x18, 0xb7, 0x47, 0x6e, 0xee, 0xfc, 0x8f, 0x92, 0x76, 0xe0, 0xec, 0x49,
	0xc6, 0x26, 0xcc, 0xb6, 0x5c, 0xbb, 0x67, 0x0d, 0xa0, 0xcf, 0x9e, 0x98, 0x0f, 0x12, 0x33, 0x22,
	0x2f, 0xd6, 0x61, 0x00, 0x3d, 0x53, 0x83, 0xe8, 0x21, 0x6f, 0xc1, 0x6a, 0x84, 0xae, 0x64, 0x8b,
	0x3e, 0xe6, 0xfb, 0x38, 0x0d, 0xbb, 0xcc, 0xc2, 0x48, 0x84, 0xcc, 0x05, 0xdd, 0x8a, 0x00, 0xda,
	0x4e, 0x60, 0xf8, 0x41, 0x82, 0x6f, 0x3a, 0x42, 0x57, 0xcf, 0x8c, 0xbe, 0x35, 0xd4, 0xdc, 0x3b,
	0x52, 0x5b, 0xbf, 0x05, 0x75, 0x15, 0x94, 0xae, 0x5e, 0x80, 0x78, 0x0d, 0x8b, 0x35, 0xed, 0xc8,
	0xa5, 0xae, 0x78, 0x1b, 0x6e, 0x9e, 0x93, 0x21, 0xe9, 0x12, 0x60, 0xa7, 0xb1, 0x2f, 0xaa, 0xc9,
	0x43, 0xb8, 0x8c, 0xc2, 0x19, 0xfa, 0x3e, 0x37, 0x74, 0x1a, 0xd9, 0x77, 0x4c, 0x52, 0x7f, 0x65,
	0xa2, 0xdb, 0xd7, 0xb8, 0xb8, 0x0a, 0xf0, 0xbb, 0xfa, 0x83, 0x26, 0xa1, 0xa8, 0xc8, 0xd7, 0xe0,
	0x9c, 0x4b, 0x19, 0x8d, 0x3c, 0xdb, 0xf7, 0x3e, 0xa7, 0x68, 0x83, 0xa9, 0xa8, 0xb9, 0x79, 0x1d,
	0xcd, 0x59, 0x0d, 0x6a, 0xd3, 0xf7, 0xb7, 0x64, 0x8a, 0x81, 0xfd, 0x51, 0x33, 0xcd, 0x17, 0xc0,
	0x06, 0x9c, 0x69, 0xf0, 0xba, 0x0c, 0xc9, 0xae, 0x9c, 0xf5, 0xe5, 0x46, 0xb6, 0xd9, 0x8e, 0x6b,
	0x7c, 0x02, 0xcf, 0xeb, 0x2b, 0x61, 0x20, 0x5e, 0x31, 0x7c, 0x2e, 0x47, 0x93, 0x62, 0xff, 0xa5,
	0xb1, 0xb1, 0xf3, 0xb1, 0x3f, 0x80, 0x99, 0x64, 0x57, 0xe0, 0xe6, 0xe4, 0xeb, 0x79, 0x93, 0x3d,
	0x30, 0xf1, 0xa0, 0xb0, 0x38, 0x24, 0x16, 0xe3, 0x3f, 0x16, 0xe0, 0x6a, 0xba, 0x8b, 0x78, 0x81,
	0x1d, 0x9d, 0xdc, 0x0f, 0x0f, 0x4d, 0xea, 0x84, 0x91, 0x74, 0xc9, 0x6c, 0x06, 0xee, 0xd6, 0xa0,
	0x94, 0x09, 0x05, 0xfd, 0x59, 0x32, 0xba, 0x2c, 0x4c, 0x28, 0xeb, 0x89, 0xa0, 0x84, 0x1f, 0xfe,
	0x95, 0x89, 0xd3, 0x8f, 0x99, 0xd0, 0x49, 0xb3, 0xe3, 0xbd, 0xca, 0x17, 0x86, 0x54, 0x7b, 0xc9,
	0x52, 0xf2, 0x7c, 0x95, 0x99, 0xc5, 0x3c, 0x13, 0x89, 0xb7, 0x57, 0xea, 0xcc, 0xca, 0xab, 0x8c,
	0xff, 0x56, 0x80, 0x67, 0x86, 0x11, 0xa5, 0x5e, 0xf2, 0x9a, 0xe1, 0x31, 0x39, 0x0b, 0x33, 0x7c,
	0xcb, 0xf0, 0x5c, 0x69, 0x23, 0x4d, 0x47, 0xe1, 0xf1, 0x8e, 0x2b, 0xde, 0x31, 0xa7, 0x29, 0x2f,
	0xe6, 0xd3, 0xc0, 0xcb, 0x4b, 0x50, 0x0e, 0xba, 0xed, 0x44, 0x22, 0xf1, 0x6d, 0xbd, 0x09, 0x41,
	0xb7, 0x2d, 0xe5, 0x8f, 0x1c, 0x02, 0x91, 0x95, 0xd6, 0xb1, 0x17, 0x37, 0x2d, 0x65, 0x07, 0x95,
	0xae, 0x97, 0x6f, 0x7e, 0x35, 0x77, 0x03, 0xcf, 0x63, 0xbd, 0x29, 0xef, 0xa4, 0xd9, 0x47, 0x5e,
	0xdc, 0x14, 0xb9, 0xb1, 0xbe, 0x06, 0x57, 0x46, 0x52, 0xa8, 0x52, 0xdf, 0xa8, 0xe7, 0x1d, 0xa5,
	0xd4, 0xa6, 0xfa, 0x8d, 0x69, 0xcd, 0x33, 0x31, 0xa4, 0x3d, 0x21, 0x30, 0xe5, 0x52, 0xe6, 0x28,
	0xef, 0x37, 0xff, 0x8d, 0x2c, 0xeb, 0x38, 0x22, 0xb7, 0x5a, 0xe1, 0x7a, 0xc9, 0x9c, 0x8e, 0x3a,
	0xce, 0x8e, 0x4b, 0xae, 0xc2, 0x52, 0x18, 0x79, 0x87, 0x1e, 0xbe, 0x8f, 0x11, 0xf5, 0x22, 0xae,
	0x7f, 0x41, 0x15, 0x9b, 0x08, 0x77, 0x1b, 0x2e, 0x0a, 0x11, 0x91, 0xc9, 0x71, 0xf1, 0xc5, 0xb9,
	0x38, 0x6e, 0x89, 0xd7, 0x93, 0x32, 0xda, 0xbf, 0xde, 0xd1, 0xfd, 0x01, 0x27, 0x1d, 0x34, 0xf5,
	0xc4, 0xf1, 0x99, 0xbc, 0x07, 0x53, 0xdc, 0xc6, 0x93, 0xcf, 0x83, 0x5e, 0x9f, 0x80, 0xab, 0xda,
	0xdc, 0x9b, 0x88, 0x83, 0xec, 0xc1, 0x8c, 0x74, 0x8d, 0xcf, 0x20, 0xb6, 0x37, 0x4f, 0x83, 0x0d,
	0xb5, 0xa9, 0xc4, 0x43, 0xde, 0x81, 0x0b, 0x03, 0x28, 0x8c, 0x43, 0x45, 0x9f, 0x78, 0x29, 0x54,
	0xeb, 0xa5, 0xef, 0x20, 0x94, 0xd4, 0xbd, 0x01, 0x35, 0xd5, 0x52, 0x9c, 0x45, 0x93, 0x87, 0x1e,
	0x42, 0x91, 0x96, 0xcc, 0xb3, 0xb2, 0x1e, 0x0f, 0x9e, 0xea, 0xc1, 0x07, 0x23, 0xdf, 0x80, 0x35,
	0x7c, 0xca, 0x6b, 0x3b, 0x9f, 0x75, 0xbd, 0x88, 0xea, 0x8f, 0x6a, 0x02, 0x3b, 0x08, 0x99, 0xcc,
	0x18, 0x78, 0x9e, 0x03, 0x6d, 0x0a, 0x98, 0xe4, 0x61, 0xcd, 0x03, 0x0e, 0x40, 0xde, 0x86, 0xa7,
	0x33, 0x18, 0xd0, 0xf9, 0x9c, 0xb6, 0x07, 0x6c, 0x7f, 0x4e, 0x6b, 0xbf, 0x1d, 0xb8, 0x69, 0xeb,
	0x17, 0x80, 0xf0, 0x99, 0x67, 0x61, 0x97, 0x2b, 0x3f, 0xaf, 0x63, 0xd9, 0xae, 0x1b, 0xe1, 0xbb,
	0xfc, 0x79, 0x73, 0x29, 0xea, 0x38, 0xfb, 0x58, 0xb1, 0xd3, 0xd9, 0x74, 0xdd, 0x48, 0x77, 0x8a,
	0x57, 0xc4, 0x66, 0x2b, 0x9c, 0xe2, 0x86, 0xa7, 0xc9, 0x65, 0xaf, 0x0b, 0x7f, 0xdf, 0xfb, 0x1c,
	0xf5, 0xf7, 0x36, 0x94, 0x5b, 0x2c, 0x79, 0xd3, 0x21, 0xf3, 0x8b, 0x5c, 0xc9, 0x77, 0xca, 0xa9,
	0x27, 0x1d, 0xf3, 0x2d, 0xf5, 0xd3, 0x60, 0x9a, 0x92, 0x50, 0x5d, 0x6d, 0xfa, 0x7e, 0x6f, 0x6f,
	0xf7, 0x61, 0x89, 0xef, 0x42, 0xd9, 0x1e, 0x4b, 0xe3, 0xf7, 0x58, 0xb1, 0x7d, 0x3f, 0xf9, 0x32,
	0xde, 0x19, 0x41, 0xdf, 0x08, 0x0b, 0xc9, 0xb8, 0x32, 0x7a, 0xd0, 0x9b, 0xd1, 0xa1, 0x71, 0x55,
	0x73, 0xed, 0x25, 0x7e, 0x7f, 0x24, 0x08, 0x27, 0xae, 0x4d, 0x03, 0xbc, 0xb8, 0x30, 0xbe, 0x28,
	0x8e, 0x01, 0xc8, 0xb9, 0xf0, 0x06, 0xd4, 0xc4, 0xf1, 0x2a, 0x73, 0x74, 0x14, 0x2f, 0x78, 0x44,
	0xa6, 0xc1, 0xb3, 0x58, 0xaf, 0xfb, 0x0e, 0xf1, 0x35, 0xcf, 0x0b, 0xb0, 0xac, 0x6d, 0x84, 0x8f,
	0xba, 0x8d, 0x06, 0x8d, 0xa4, 0xee, 0xd0, 0x5e, 0x94, 0xdf, 0xc6, 0x72, 0xf2, 0x32, 0xac, 0xa8,
	0x5e, 0xd4, 0x0b, 0x39, 0xed, 0x8d, 0x10, 0x91, 0x3d, 0xc8, 0x2a, 0xed, 0x5d, 0xba, 0x84, 0x95,
	0xd8, 0x45, 0x1a, 0xab, 0xa5, 0xa4, 0x5c, 0x22, 0x7f, 0x0b, 0xea, 0x6e, 0xe4, 0x24, 0x79, 0x20,
	0x84, 0xbf, 0xa4, 0x41, 0x23, 0xd1, 0xc5, 0xb4, 0x90, 0x6e, 0x37, 0x72, 0xd4, 0xba, 0x3e, 0x90,
	0xf5, 0xbc, 0x1f, 0xe3, 0x3f, 0x15, 0xa1, 0x9a, 0xee, 0xab, 0xd4, 0x8e, 0xbb, 0x11, 0x35, 0xfe,
	0x99, 0x72, 0x74, 0xae, 0x02, 0x69, 0x25, 0x7e, 0x43, 0x3c, 0x8b, 0x79, 0xc1, 0x61, 0xf5, 0x29,
	0xcc, 0x21, 0x8d, 0xa6, 0xe8, 0xbb, 0x98, 0x46, 0x7c, 0x37, 0x0c, 0xbc, 0x38, 0xe4, 0xe7, 0xf8,
	0x6a, 0x01, 0x53, 0xf6, 0x8a, 0x64, 0x87, 0x69, 0xca, 0xe8, 0x6a, 0x91, 0x9c, 0x87, 0xb3, 0xa2,
	0xb8, 0xe7, 0xa1, 0x78, 0xb5, 0x84, 0x55, 0xdb, 0x8f, 0x45, 0x9a, 0x44, 0xd1, 0x48, 0x3a, 0x14,
	0xa7, 0xc8, 0x75, 0x78, 0xb6, 0x25, 0xdc, 0xa2, 0xd2, 0x1f, 0xb9, 0xd9, 0xe9, 0xf8, 0x27, 0x88,
	0x93, 0xef, 0x19, 0xca, 0x17, 0x59, 0x9d, 0x16, 0xd9, 0x2b, 0xc5, 0xdb, 0xe5, 0x7b, 0x21, 0x63,
	0x5e, 0xa7, 0x3a, 0x83, 0xde, 0xcf, 0x7d, 0xea, 0x74, 0x23, 0xba, 0x1f, 0x3a, 0x2d, 0x1a, 0xdf,
	0xb7, 0x4f, 0x28, 0x3e, 0x84, 0xec, 0x06, 0xf2, 0xb9, 0x50, 0x75, 0x16, 0x7b, 0xd7, 0xdd, 0xa3,
	0x09, 0x99, 0x73, 0xe4, 0x4d, 0x78, 0x4d, 0x91, 0x8f, 0x1e, 0x55, 0xe9, 0x18, 0xed, 0xf8, 0x27,
	0xdb, 0xed, 0x4e, 0x7c, 0x92, 0x9e, 0x4e, 0x7a, 0xd2, 0x80, 0xcf, 0x1b, 0x9e, 0xe6, 0xa7, 0xdc,
	0xc6, 0x67, 0xc0, 0x92, 0xb7, 0x68, 0x4a, 0xbd, 0x0f, 0x95, 0x86, 0xf8, 0x4c, 0x83, 0x05, 0x16,
	0xf3, 0xa3, 0x7d, 0x64, 0x73, 0x61, 0xe4, 0x94, 0x65, 0x6b, 0x3c, 0xd6, 0x5d, 0x18, 0xda, 0x15,
	0x3f, 0x23, 0x5c, 0xcc, 0xc6, 0x42, 0xed, 0xc7, 0xf6, 0x21, 0xc5, 0x58, 0x57, 0x1a, 0xe1, 0x42,
	0xf9, 0xdb, 0xc5, 0x1c, 0x00, 0xbe, 0x40, 0x18, 0x10, 0xc6, 0xcb, 0x2c, 0x47, 0x14, 0xea, 0xe1,
	0x0d, 0xdb, 0x23, 0xce, 0x56, 0xbd, 0xc8, 0xb4, 0xb8, 0x32, 0xad, 0xc6, 0xac, 0x32, 0xed, 0x8b,
	0xd3, 0x54, 0xff, 0xf3, 0x7a, 0x8a, 0x64, 0x1d, 0x96, 0x1f, 0x5a, 0xc4, 0x70, 0xf4, 0xa7, 0x69,
	0x58, 0x82, 0xa6, 0xda, 0xf3, 0xb0, 0xcc, 0x0d, 0x99, 0x0e, 0x0d, 0x5c, 0x6e, 0xb7, 0xc7, 0x36,
	0x6b, 0x31, 0xb9, 0x2a, 0x97, 0x82, 0x6e, 0x7b, 0x4f, 0x94, 0x1f, 0xf0, 0x62, 0x4c, 0x13, 0x8c,
	0x46, 0x4f, 0xbb, 0x83, 0xce, 0x13, 0x09, 0x2d, 0xd6, 0xe4, 0x32, 0x1a, 0x3f, 0xb2, 0x06, 0xe1,
	0x8d, 0xdf, 0xee, 0x61, 0xd5, 0x1d, 0x7a, 0x18, 0xd9, 0x2e, 0x75, 0xb9, 0xf9, 0x89, 0xac, 0xfa,
	0x65, 0x58, 0x15, 0x5b, 0xa4, 0x4c, 0x98, 0xc0, 0x4d, 0x51, 0x9d, 0x5d, 0xef, 0x8e, 0x60, 0x57,
	0x2f, 0xc2, 0x9e, 0x74, 0xa5, 0x62, 0x51, 0xf0, 0x4a, 0xf3, 0x4c, 0x27, 0x5b, 0x80, 0x4c, 0xfb,
	0x81, 0x7e, 0xbe, 0xef, 0x69, 0x41, 0x2e, 0x43, 0xa5, 0x19, 0xb2, 0x18, 0x37, 0x2f, 0xca, 0x98,
	0xe4, 0x5c, 0x99, 0x97, 0x6d, 0x8a, 0x22, 0x6e, 0x02, 0xb1, 0xa3, 0xb6, 0x66, 0x02, 0xb1, 0xa3,
	0xf6, 0x8e, 0xab, 0x9e, 0x2d, 0xc6, 0xc2, 0xf5, 0xaf, 0xf8, 0xc3, 0xed, 0x45, 0x79, 0x1b, 0xc0,
	0xc8, 0x33, 0xb0, 0xc0, 0x41, 0x54, 0x94, 0x65, 0x92, 0x70, 0x2f, 0xe8, 0xb6, 0x4d, 0x55, 0x66,
	0xd4, 0xb5, 0xd1, 0xdd, 0xa3, 0xf1, 0xbb, 0xd4, 0xee, 0x7c, 0xc0, 0xb7, 0x7b, 0x2e, 0x85, 0xff,
	0xa6, 0x30, 0xa4, 0x92, 0xb3, 0xf5, 0x2a, 0x2c, 0x09, 0xe5, 0xd9, 0xa4, 0x76, 0x47, 0xd7, 0xcc,
	0x0b, 0x58, 0xcc, 0x61, 0x55, 0x9a, 0x9d, 0x46, 0x44, 0xa9, 0x06, 0x26, 0xe8, 0xa8, 0xf0, 0x52,
	0x1d, 0xaa, 0xcb, 0xa8, 0xab, 0x41, 0x09, 0x82, 0x2a, 0xbc, 0x34, 0x81, 0x7a, 0x13, 0xce, 0x1f,
	0x3a, 0x96, 0xe8, 0xb6, 0x63, 0xf3, 0xa3, 0x20, 0x1a, 0x0c, 0x6d, 0x34, 0x57, 0x04, 0x75, 0x67,
	0x0f, 0x9d, 0x03, 0x5e, 0x8f, 0xd7, 0x10, 0x9c, 0x15, 0xbb, 0xbc, 0xd2, 0xf8, 0x76, 0x96, 0x92,
	0xdd, 0xdb, 0xd4, 0x0e, 0xee, 0xd8, 0x31, 0x5e, 0x80, 0xdc, 0x56, 0xef, 0x2a, 0x23, 0xfa, 0x99,
	0x0a, 0x5a, 0x78, 0x66, 0x80, 0x50, 0xf4, 0x3e, 0xc8, 0x94, 0x8f, 0x2f, 0x4d, 0xfa, 0x19, 0x33,
	0xac, 0x21, 0xf8, 0x39, 0xa7, 0xb6, 0x60, 0x5e, 0xe1, 0xef, 0x7f, 0x3f, 0xd1, 0xf6, 0x98, 0xb3,
	0xf1, 0xa1, 0xfc, 0x23, 0x09, 0xbb, 0x76, 0x67, 0x5b, 0xfe, 0x89, 0x04, 0x71, 0x36, 0x99, 0x93,
	0x3d, 0x64, 0x63, 0x77, 0xee, 0xd1, 0x58, 0x53, 0xf3, 0x1f, 0x89, 0x3f, 0x16, 0x81, 0x7a, 0xe3,
	0xb3, 0x91, 0x50, 0x22, 0xd2, 0x72, 0x4e, 0xfe, 0x85, 0x09, 0x36, 0x4e, 0xba, 0xb4, 0x2c, 0x02,
	0x39, 0x30, 0x85, 0xc0, 0xf8, 0xbb, 0x45, 0x3d, 0x0f, 0x7f, 0x68, 0xab, 0x7c, 0xf0, 0xa8, 0x52,
	0x0d, 0x58, 0x68, 0x78, 0xbe, 0xf0, 0xb4, 0x73, 0xa5, 0x2c, 0x8f, 0x05, 0x65, 0x2c, 0x3c, 0x08,
	0x39, 0x38, 0xd9, 0x87, 0x79, 0xd7, 0x63, 0x2d, 0x11, 0xdf, 0x27, 0x4e, 0x71, 0xaf, 0x8f, 0x0a,
	0xd8, 0xde, 0x0a, 0x83, 0x86, 0x77, 0xd8, 0x15, 0xd9, 0x6f, 0x36, 0xee, 0x78, 0xac, 0x85, 0xf1,
	0x7e, 0x73, 0xae, 0xfc, 0x45, 0xdc, 0x24, 0x97, 0x80, 0x95, 0x20, 0x57, 0x8f, 0x93, 0x4f, 0x8b,
	0xbd, 0x2a, 0x31, 0xaa, 0x02, 0x46, 0x6e, 0xc2, 0xb2, 0x4a, 0x5f, 0x31, 0x24, 0x6f, 0x5b, 0x55,
	0xd6, 0xa7, 0xa9, 0xdb, 0xea, 0x43, 0xd8, 0xc5, 0x27, 0xf9, 0xf7, 0xf5, 0x9c, 0xb1, 0x2a, 0xfc,
	0x59, 0xe7, 0xe7, 0x13, 0x3b, 0xda, 0x5f, 0x02, 0x92, 0xc4, 0x63, 0x8b, 0x74, 0x10, 0x61, 0x74,
	0x22, 0x83, 0x41, 0x96, 0x55, 0xcd, 0x1d, 0x55, 0x91, 0xfa, 0x7a, 0xa6, 0x4e, 0xe1, 0xeb, 0xc9,
	0xec, 0x72, 0xbd, 0xd4, 0x70, 0x72, 0x7f, 0x52, 0xd0, 0x5e, 0xab, 0x8a, 0xc8, 0x30, 0x6e, 0xc0,
	0xf9, 0xe1, 0xa1, 0xe7, 0xd8, 0xbe, 0xd5, 0x9b, 0x5c, 0xba, 0x2a, 0x2b, 0xd2, 0x0c, 0xe5, 0x99,
	0xb8, 0xad, 0xe2, 0xe4, 0x71, 0x5b, 0x64, 0xaf, 0x67, 0xcb, 0x2f, 0x8d, 0x4e, 0xe5, 0xdc, 0x67,
	0x37, 0x64, 0xf7, 0xfd, 0x7f, 0x91, 0xc9, 0x09, 0x8b, 0x34, 0xe1, 0xe3, 0x6d, 0x03, 0x16, 0xe4,
	0x59, 0x45, 0x6a, 0x73, 0x41, 0x53, 0x59, 0x14, 0xee, 0xa3, 0x4e, 0x7f, 0x13, 0x6a, 0xda, 0x9f,
	0x58, 0xc1, 0xb6, 0x99, 0xec, 0xd9, 0xf3, 0xe6, 0xaa, 0x93, 0x45, 0xad, 0xb2, 0x63, 0xef, 0x42,
	0xb5, 0xb7, 0xa5, 0xa4, 0xc5, 0xc8, 0x0f, 0xea, 0xe7, 0x90, 0xe6, 0x52, 0x0f, 0x56, 0xe3, 0x9f,
	0x57, 0x34, 0xeb, 0xa5, 0x6f, 0x45, 0x20, 0x2d, 0x34, 0x3a, 0xf2, 0x1c, 0x6a, 0x65, 0x69, 0x11,
	0x85, 0x1f, 0x72, 0x5a, 0x36, 0x61, 0xed, 0x73, 0xda, 0x65, 0x96, 0x83, 0x2d, 0xad, 0xfe, 0x39,
	0x15, 0xbb, 0x40, 0x9d, 0x03, 0x09, 0xec, 0xf7, 0x7b, 0x67, 0x77, 0x58, 0x3e, 0x90, 0xc2, 0xe0,
	0x7c, 0x20, 0x9f, 0xc0, 0x62, 0xb2, 0xd4, 0xc5, 0x6c, 0x4e, 0x3d, 0xd1, 0x72, 0xaf, 0x28, 0x65,
	0x82, 0x91, 0x9f, 0x9f, 0x02, 0xe6, 0x17, 0x12, 0x9e, 0x4a, 0x81, 0x7e, 0x7a, 0xf4, 0x19, 0x7e,
	0x00, 0x7a, 0x3b, 0xb6, 0xd1, 0x9d, 0xc9, 0xcc, 0x05, 0x57, 0xfd, 0xc6, 0x1e, 0x9a, 0x40, 0x44,
	0xf4, 0x5c, 0xdb, 0xee, 0x74, 0xb8, 0x99, 0x84, 0x9d, 0xcc, 0x8c, 0xce, 0xa7, 0xd0, 0xdf, 0x09,
	0x2e, 0xc5, 0x5d, 0x81, 0xc6, 0xac, 0xc6, 0xda, 0x17, 0xf6, 0x34, 0x48, 0x5a, 0x66, 0x4f, 0x2d,
	0x2d, 0xa4, 0x09, 0x0b, 0x99, 0xf7, 0x37, 0xe8, 0x38, 0x28, 0xdf, 0xdc, 0x9a, 0x6c, 0xcc, 0x7d,
	0x9a, 0x02, 0xb7, 0xd8, 0x8a, 0xfe, 0x18, 0xa7, 0xfe, 0x6b, 0x05, 0x98, 0x53, 0xf3, 0x43, 0xd6,
	0xa1, 0x92, 0xce, 0x77, 0x22, 0x84, 0xa0, 0x66, 0x6d, 0xc7, 0xe5, 0x1a, 0x31, 0xa2, 0xbe, 0x1d,
	0x7b, 0x47, 0x34, 0xdd, 0x5d, 0xe6, 0xcd, 0x8a, 0x2a, 0x44, 0x34, 0xe7, 0x60, 0x16, 0xd1, 0x24,
	0x3e, 0xa4, 0x19, 0xfe, 0xb9, 0xe3, 0x62, 0xba, 0x05, 0x6e, 0xde, 0x8a, 0xa6, 0x32, 0xed, 0x21,
	0x96, 0xf0, 0x76, 0xf5, 0xf7, 0x01, 0xd2, 0xb9, 0x24, 0xe7, 0x61, 0x4e, 0x48, 0x46, 0x32, 0x90,
	0x59, 0xfc, 0xde, 0x71, 0xf9, 0x6a, 0xd1, 0xc7, 0x29, 0x14, 0x55, 0xc9, 0x2c, 0xa7, 0x03, 0x65,
	0xf5, 0x7f, 0x5d, 0x80, 0x8a, 0x3e, 0x69, 0xe4, 0x03, 0xd4, 0x6c, 0x32, 0x2b, 0xb3, 0xd8, 0xa3,
	0x07, 0x09, 0x9a, 0xd4, 0xa6, 0x99, 0xbf, 0x9d, 0xb0, 0x81, 0x43, 0xf2, 0x82, 0xc3, 0xe4, 0xa2,
	0x94, 0xef, 0x11, 0xc2, 0x3d, 0x37, 0x3c, 0xe9, 0x56, 0x71, 0xd2, 0xa4, 0x5b, 0xa5, 0x81, 0x49,
	0xb7, 0xea, 0xbf, 0x32, 0xa5, 0x9f, 0x11, 0xb4, 0xc9, 0x23, 0x1f, 0xc2, 0x73, 0xbe, 0xcd, 0x62,
	0x8b, 0x75, 0x1d, 0x87, 0x32, 0xd6, 0xe8, 0xfa, 0xfa, 0xd3, 0x20, 0x2b, 0x0c, 0x2c, 0x9f, 0x9b,
	0x2b, 0x78, 0x6d, 0x2e, 0x79, 0xf8, 0x0c, 0x6f, 0xb0, 0x9f, 0xc0, 0xa7, 0x0f, 0x82, 0xb4, 0x2b,
	0x17, 0xf2, 0xc3, 0xc2, 0xf0, 0xf7, 0x5f, 0xc2, 0x9c, 0x68, 0x7c, 0x09, 0x92, 0xb8, 0x91, 0x1e,
	0x90, 0x77, 0x7b, 0x5e, 0x8c, 0xa9, 0x37, 0x62, 0x83, 0x5f, 0x8e, 0xd5, 0xff, 0x4f, 0x01, 0x8c,
	0xd1, 0x8d, 0x49, 0x13, 0xd6, 0x32, 0xc7, 0x94, 0x24, 0xaf, 0xdb, 0xe9, 0xa2, 0x69, 0xcf, 0x77,
	0xfa, 0x4f, 0xf5, 0x22, 0xb6, 0x96, 0x38, 0x70, 0x0e, 0x6f, 0x98, 0xb2, 0x4c, 0xd3, 0x1e, 0x03,
	0x4c, 0xf8, 0x5e, 0x2e, 0xe8, 0x29, 0xc1, 0x7d, 0xf0, 0x7f, 0xe9, 0x4e, 0x71, 0xc1, 0xdf, 0xbb,
	0x61, 0xa4, 0x82, 0x56, 0x76, 0x02, 0x19, 0xfa, 0x3c, 0xf6, 0xbe, 0x98, 0xbf, 0x8d, 0xac, 0x3a,
	0x83, 0xb7, 0x90, 0xef, 0x40, 0xbd, 0x27, 0x4c, 0x47, 0x21, 0x52, 0x22, 0x3c, 0x62, 0xb7, 0xef,
	0x93, 0x0e, 0xf3, 0x9c, 0xd3, 0x5f, 0x87, 0x14, 0xff, 0x21, 0xd1, 0x24, 0x3f, 0xf9, 0xf3, 0x5b,
	0xdc, 0x6a, 0x7b, 0x01, 0x96, 0x9b, 0xea, 0xdb, 0x4a, 0xe3, 0xb1, 0xd1, 0xa6, 0x49, 0x2a, 0xd4,
	0x56, 0xfe, 0x26, 0x9c, 0xc7, 0x8d, 0x13, 0xd7, 0x4a, 0x44, 0x9d, 0x23, 0xdd, 0x25, 0x2b, 0xa8,
	0x3d, 0xcb, 0x01, 0xee, 0xdb, 0x2c, 0x36, 0xa9, 0x73, 0x94, 0xba, 0x64, 0x1f, 0xc2, 0xb3, 0xda,
	0x96, 0x2b, 0xc7, 0x3b, 0x80, 0x65, 0x42, 0xcd, 0x5d, 0x4e, 0x77, 0x5e, 0x09, 0xda, 0xc7, 0xbd,
	0x00, 0x96, 0xe4, 0x1f, 0xa4, 0x93, 0x5e, 0x06, 0x71, 0x9f, 0xb8, 0x98, 0xef, 0x61, 0xd0, 0x49,
	0xef, 0x3d, 0x44, 0x28, 0xaf, 0x83, 0x70, 0x98, 0x2c, 0x36, 0x33, 0x85, 0xe4, 0x53, 0x58, 0xc4,
	0x39, 0x42, 0x65, 0xa3, 0x6d, 0xb1, 0xb7, 0x26, 0xef, 0x8e, 0xcf, 0x0d, 0x9e, 0xbf, 0x2a, 0x81,
	0xfc, 0x85, 0x9a, 0xec, 0x08, 0xce, 0xc9, 0xab, 0x46, 0xb1, 0xaa, 0x34, 0x63, 0x41, 0x6c, 0xb4,
	0x5f, 0x1f, 0xbb, 0x2b, 0x79, 0x27, 0x89, 0x6b, 0x8a, 0xab, 0x71, 0xc1, 0x4a, 0x73, 0x85, 0xf5,
	0x94, 0x63, 0xbf, 0x07, 0xf0, 0x6c, 0x44, 0xd9, 0x49, 0xe0, 0x58, 0x61, 0x23, 0x71, 0x6d, 0x58,
	0xba, 0x81, 0xa4, 0xfe, 0xf4, 0x8f, 0x76, 0x76, 0xb8, 0x24, 0x9a, 0x3c, 0x6c, 0x28, 0x8f, 0xc7,
	0xc7, 0xc9, 0x8c, 0x89, 0xb0, 0xac, 0x41, 0xfb, 0xf8, 0xdc, 0xe9, 0xf7, 0xf1, 0x43, 0xa8, 0xa5,
	0x1a, 0x38, 0x2b, 0x45, 0xf2, 0x65, 0xee, 0x84, 0x4b, 0x65, 0xd5, 0x57, 0x4a, 0x3a, 0x6b, 0x3f,
	0x6e, 0xc0, 0x99, 0x30, 0x38, 0x0c, 0x31, 0x56, 0x4d, 0x7b, 0x1c, 0x2a, 0x3c, 0xfe, 0xcb, 0xb2,
	0x2a, 0x55, 0xf6, 0xe4, 0x3b, 0x50, 0xc5, 0x1d, 0xb4, 0x9d, 0x8e, 0x0b, 0x3d, 0xfd, 0xe5, 0x9b,
	0xdf, 0x98, 0x5c, 0x32, 0xb8, 0xfd, 0xb0, 0x9b, 0x0c, 0xc9, 0x44, 0x9b, 0x31, 0xfd, 0x26, 0x7b,
	0x60, 0x68, 0x4c, 0x08, 0x8f, 0x03, 0x66, 0xd1, 0x20, 0xf6, 0x22, 0x79, 0x21, 0x2f, 0x77, 0xe4,
	0xcc, 0x5f, 0x14, 0x5a, 0x4b, 0xc8, 0x7c, 0x78, 0x1c, 0xb0, 0x6d, 0x84, 0x4e, 0x35, 0x71, 0xfd,
	0x2f, 0xea, 0x2f, 0x94, 0xb2, 0xcb, 0xc0, 0x38, 0x91, 0x1e, 0xdd, 0x45, 0x80, 0x56, 0xe2, 0x5d,
	0x91, 0x7f, 0xf4, 0x27, 0xe3, 0xa6, 0xab, 0x16, 0xe5, 0x1f, 0x02, 0xd2, 0x7c, 0x51, 0xd5, 0x92,
	0xf8, 0xbb, 0x85, 0x59, 0x7f, 0x3c, 0xab, 0x4e, 0xe1, 0x9f, 0x6e, 0x93, 0x6e, 0x75, 0x56, 0x9d,
	0xc6, 0x3f, 0x89, 0x98, 0x3d, 0xc4, 0x57, 0x67, 0xea, 0xff, 0x65, 0x56, 0x4b, 0xbf, 0xa4, 0x96,
	0xcb, 0x58, 0xa6, 0x7d, 0x26, 0xf6, 0x51, 0x41, 0x27, 0x51, 0x47, 0x69, 0xec, 0xe3, 0xbe, 0xa8,
	0xda, 0xe9, 0x90, 0x17, 0x81, 0xf4, 0x04, 0xcf, 0x29, 0x73, 0x6b, 0xde, 0xac, 0x66, 0xe3, 0xe7,
	0x76, 0x5c, 0xf2, 0xff, 0x65, 0xc4, 0x5a, 0x5c, 0x3f, 0x9f, 0x36, 0x9a, 0x51, 0x13, 0x72, 0x71,
	0xe3, 0x7f, 0x03, 0x56, 0x94, 0x1f, 0x30, 0x43, 0xa7, 0x70, 0xc8, 0x2f, 0x8b, 0xba, 0x7d, 0x8d,
	0x5a, 0x6e, 0x32, 0xa5, 0x7f, 0x08, 0x33, 0x6c, 0x77, 0xc2, 0x80, 0x06, 0x28, 0xaf, 0x33, 0xd8,
	0x24, 0xe5, 0xc5, 0x96, 0xaa, 0xec, 0x3d, 0xca, 0x79, 0x81, 0x63, 0x47, 0x81, 0xad, 0xee, 0xe6,
	0x67, 0xe5, 0x96, 0x95, 0xbe, 0x98, 0x4c, 0xaa, 0x77, 0x5c, 0xd2, 0x86, 0x72, 0x87, 0xd2, 0x48,
	0xfe, 0x29, 0x50, 0x5c, 0xcf, 0xa7, 0x52, 0xb8, 0x6a, 0x4a, 0x37, 0xf6, 0x28, 0x8d, 0xc4, 0xec,
	0xdf, 0x9a, 0x6e, 0xdd, 0xe1, 0x66, 0x00, 0x74, 0x92, 0xa2, 0xdc, 0x33, 0xe7, 0x7c, 0xee, 0x99,
	0xf3, 0x3a, 0x54, 0x23, 0xdb, 0x69, 0x61, 0xe2, 0xc8, 0x6e, 0xe0, 0x69, 0x4b, 0x78, 0x51, 0x95,
	0x7f, 0x10, 0x78, 0x9c, 0x19, 0xbf, 0x51, 0x18, 0x65, 0xdb, 0x88, 0x24, 0xd9, 0x07, 0x4f, 0x40,
	0x65, 0xd6, 0xd2, 0x49, 0x97, 0x1f, 0xcb, 0xb1, 0x84, 0xea, 0x3f, 0x28, 0xc0, 0xf9, 0xa1, 0x0d,
	0xfb, 0x13, 0x16, 0x16, 0xf2, 0x13, 0x16, 0x16, 0x32, 0x2f, 0x66, 0x36, 0xa1, 0x2c, 0x02, 0xe5,
	0x75, 0x5b, 0x63, 0x8c, 0x68, 0xf9, 0x79, 0x8c, 0x96, 0x47, 0x8b, 0xe2, 0x35, 0x80, 0x74, 0xf2,
	0xc8, 0x3c, 0x88, 0xe9, 0xab, 0x3e, 0x85, 0x7f, 0xb7, 0x51, 0x94, 0x9e, 0x54, 0x0b, 0xb8, 0xda,
	0x95, 0x62, 0xa8, 0x16, 0xeb, 0x7f, 0x0c, 0x56, 0x07, 0xef, 0x4d, 0x84, 0xc0, 0x14, 0x9e, 0x65,
	0x64, 0xc6, 0x3a, 0xfe, 0x5b, 0xbb, 0x92, 0x2e, 0x0e, 0x3d, 0xce, 0x8e, 0x77, 0xca, 0x90, 0x78,
	0xea, 0x8f, 0x35, 0x75, 0x97, 0x55, 0xb6, 0xe4, 0x1a, 0x54, 0x82, 0xd0, 0x4a, 0x74, 0x39, 0x0e,
	0x24, 0x51, 0xa3, 0x10, 0x84, 0x0a, 0x9c, 0x2f, 0x3a, 0x95, 0x7a, 0x17, 0x8d, 0x81, 0xd4, 0x55,
	0x25, 0xd8, 0xbc, 0x22, 0x6b, 0xf9, 0xd4, 0x27, 0xde, 0x2a, 0xe3, 0xef, 0x4d, 0x0d, 0xb2, 0xc0,
	0x4c, 0x1a, 0x93, 0xf7, 0x00, 0xd0, 0xb3, 0xdc, 0xe5, 0xfa, 0x55, 0x9e, 0xa7, 0x5e, 0x18, 0xe1,
	0xf7, 0xd7, 0xbd, 0xdd, 0xe6, 0x7c, 0x53, 0x7d, 0x91, 0x0f, 0x61, 0x31, 0x73, 0xf5, 0x32, 0xd6,
	0x13, 0xd0, 0x01, 0xd7, 0x2e, 0x98, 0x43, 0x31, 0x2d, 0xe1, 0x78, 0x5d, 0x39, 0x8b, 0xa8, 0xf5,
	0x98, 0xf4, 0xe0, 0xdc, 0x98, 0xf0, 0x7e, 0xc2, 0x5c, 0x70, 0xf5, 0x12, 0xe2, 0x02, 0xc1, 0x1b,
	0x65, 0xb9, 0x47, 0xa0, 0x77, 0x9d, 0x49, 0x87, 0xde, 0xeb, 0xe3, 0xbc, 0xd9, 0xec, 0xbf, 0xa5,
	0x36, 0xab, 0x76, 0xcf, 0xa6, 0x43, 0x0e, 0x60, 0x1e, 0x2f, 0xac, 0xd1, 0x87, 0x2e, 0xf2, 0xe9,
	0xbc, 0x31, 0xd6, 0x83, 0xd0, 0xfe, 0xdb, 0x5f, 0x73, 0x8e, 0xc9, 0xbd, 0x8b, 0x7c, 0x3b, 0xb1,
	0x40, 0x13, 0x87, 0xb5, 0x88, 0x3a, 0xfb, 0xca, 0x08, 0xa6, 0x0c, 0xf6, 0x7c, 0x2b, 0x8b, 0x53,
	0x15, 0x19, 0x5f, 0xd7, 0x3d, 0x94, 0x7c, 0x61, 0x3f, 0xa0, 0xc7, 0xca, 0xf0, 0xe0, 0x96, 0x3b,
	0x57, 0x01, 0x9a, 0x85, 0x22, 0x5d, 0x0c, 0x2c, 0x4d, 0x4c, 0x61, 0xe6, 0x20, 0xe0, 0x82, 0x77,
	0x13, 0xce, 0xea, 0x87, 0xdc, 0xe4, 0x56, 0x4b, 0xa2, 0x3a, 0x93, 0xa2, 0x4a, 0xae, 0xb5, 0x8c,
	0x17, 0x61, 0x55, 0xae, 0xb8, 0xf7, 0xc2, 0x6e, 0x14, 0xd8, 0xfe, 0x5d, 0xcf, 0x17, 0xbb, 0x73,
	0xba, 0x80, 0x4b, 0x6a, 0x01, 0x1b, 0xff, 0xaa, 0xd0, 0xb3, 0x8f, 0xe3, 0x61, 0x7b, 0x68, 0x78,
	0xe1, 0x90, 0xeb, 0xa4, 0x8b, 0x00, 0x87, 0x34, 0x90, 0xe9, 0xe4, 0xe5, 0x09, 0x41, 0x2b, 0xe1,
	0x8c, 0x68, 0xdb, 0x8f, 0x93, 0x9d, 0x41, 0xdc, 0xb5, 0x40, 0xdb, 0x7e, 0xac, 0x76, 0x83, 0x35,
	0x00, 0x0c, 0x18, 0x15, 0xf9, 0x60, 0xa7, 0x31, 0x79, 0xf3, 0x3c, 0x2f, 0x11, 0x7f, 0x49, 0xef,
	0x32, 0x54, 0x44, 0xb5, 0x44, 0x30, 0x23, 0xb2, 0x6c, 0x22, 0x80, 0x7c, 0x91, 0x4a, 0x35, 0xbd,
	0xa1, 0xe8, 0xd8, 0x3f, 0x09, 0x36, 0x9d, 0x16, 0x79, 0x4f, 0x1e, 0x0c, 0xd2, 0x83, 0xea, 0x18,
	0xa9, 0x21, 0x14, 0x0e, 0x71, 0x04, 0x48, 0x0e, 0xa6, 0x1f, 0x6b, 0xdd, 0x28, 0x11, 0xde, 0x6a,
	0xec, 0xd9, 0x5e, 0xf4, 0xc4, 0xde, 0x75, 0xe3, 0x9f, 0x14, 0xb4, 0x38, 0xa9, 0x5f, 0xe8, 0xd2,
	0xe8, 0x24, 0xbb, 0xbb, 0xa4, 0x61, 0x7b, 0x07, 0x50, 0x4d, 0x16, 0xa4, 0xd3, 0xd0, 0x69, 0x7a,
	0x7e, 0x44, 0xec, 0xbb, 0x36, 0x60, 0x73, 0xb1, 0x95, 0x7c, 0xe3, 0x31, 0xa3, 0x67, 0xc7, 0x2a,
	0xe6, 0xbf, 0xf1, 0x2c, 0x65, 0xdf, 0x78, 0x1a, 0x7f, 0x7f, 0xac, 0xd1, 0x73, 0xa9, 0xbe, 0x0d,
	0x17, 0xfb, 0x76, 0x72, 0x99, 0xa1, 0xdc, 0x4d, 0x69, 0x99, 0x33, 0xeb, 0x7e, 0x06, 0x81, 0x0c,
	0x04, 0x10, 0xee, 0xce, 0x3b, 0x70, 0xa9, 0x0f, 0x47, 0xf2, 0x07, 0xba, 0x53, 0x6f, 0xc4, 0x9c,
	0xf9, 0x74, 0x16, 0xc9, 0xa6, 0x82, 0xc1, 0xd9, 0xfc, 0xbd, 0x02, 0xbc, 0xa4, 0x1d, 0x6c, 0xa2,
	0xee, 0x23, 0xb9, 0x74, 0x3e, 0xf2, 0xe2, 0x66, 0x5f, 0x1e, 0x99, 0x9f, 0x1e, 0xe7, 0x93, 0x8b,
	0x92, 0xe2, 0x69, 0x2e, 0x4a, 0x6e, 0x4c, 0x42, 0x84, 0x49, 0x63, 0xe3, 0x47, 0x05, 0x2d, 0xb0,
	0xe7, 0x1e, 0x8d, 0xb7, 0x59, 0xec, 0xb5, 0xed, 0x98, 0xba, 0xea, 0x0f, 0x5d, 0x8d, 0x0a, 0x7d,
	0x1e, 0x20, 0xce, 0x85, 0xbe, 0xcb, 0xa2, 0x7b, 0x50, 0xd6, 0x0f, 0x3d, 0xa5, 0x89, 0x48, 0x83,
	0xf4, 0x39, 0xb7, 0xb1, 0x35, 0x62, 0xb4, 0x5c, 0xa6, 0x2e, 0x09, 0x8f, 0xa7, 0x4a, 0x1d, 0x58,
	0xb8, 0x5e, 0xba, 0x55, 0x7c, 0xe9, 0x15, 0x1c, 0x32, 0xc2, 0xdc, 0xfc, 0xcd, 0x57, 0xb4, 0xdb,
	0x22, 0xb3, 0xe3, 0xec, 0x1f, 0x39, 0x64, 0x1f, 0xa6, 0x31, 0x73, 0x2c, 0xc9, 0xd5, 0x04, 0x2a,
	0xc7, 0x6d, 0x7d, 0x34, 0x14, 0x1f, 0xc9, 0x2e, 0x94, 0xee, 0xd1, 0x98, 0x18, 0x23, 0xb6, 0x18,
	0x8e, 0x70, 0x14, 0x0c, 0x47, 0xe7, 0xc3, 0x9c, 0x4a, 0xcc, 0x49, 0xae, 0x8d, 0xb2, 0x11, 0xe4,
	0x43, 0x86, 0xfa, 0x58, 0x80, 0x5c, 0x12, 0x16, 0xbf, 0xfb, 0xc5, 0xda, 0x5f, 0xff, 0x41, 0xe1,
	0x7b, 0x5f, 0xac, 0x3d, 0xf5, 0xfd, 0x2f, 0xd6, 0x9e, 0x22, 0x9f, 0x60, 0x6f, 0xe2, 0x8f, 0x9d,
	0x8d, 0x42, 0xa2, 0x24, 0xa5, 0x3e, 0x16, 0x20, 0xa7, 0xe5, 0xff, 0x87, 0x85, 0xcc, 0x4b, 0x06,
	0x32, 0xd1, 0x83, 0x8d, 0xfa, 0x44, 0x4f, 0x24, 0xfa, 0x48, 0x6b, 0xa5, 0x9d, 0x0b, 0xfa, 0xc6,
	0x42, 0x97, 0x10, 0x39, 0x3e, 0x34, 0xa7, 0x34, 0x80, 0xc5, 0xec, 0x33, 0x04, 0x32, 0xd9, 0x8b,
	0x8b, 0xfa, 0x64, 0x2f, 0x1c, 0x48, 0x0c, 0xd5, 0xde, 0xa4, 0x48, 0x64, 0x94, 0xe5, 0xd7, 0x9b,
	0x05, 0xab, 0x3e, 0x51, 0x03, 0xde, 0xeb, 0x87, 0x30, 0x23, 0xf2, 0xf5, 0x90, 0x11, 0x7f, 0x99,
	0x4a, 0x26, 0x50, 0xaa, 0x8f, 0x01, 0x26, 0xf1, 0x8a, 0x5c, 0x35, 0xf9, 0x78, 0x93, 0xa4, 0x40,
	0xf5, 0x31, 0xc0, 0x38, 0xde, 0x2e, 0x94, 0xb5, 0xb7, 0x47, 0x64, 0x82, 0x97, 0x52, 0xf5, 0x09,
	0x1e, 0x34, 0x0d, 0x5a, 0x54, 0x2a, 0x8f, 0x4a, 0xfe, 0xa2, 0xd2, 0x32, 0xb7, 0xd4, 0xc7, 0x02,
	0xe4, 0x44, 0xfd, 0x6a, 0x01, 0x56, 0x07, 0xe7, 0x47, 0x21, 0x5f, 0x99, 0x3c, 0xa7, 0x0a, 0xef,
	0xfa, 0x2b, 0xa7, 0x4a, 0xc5, 0x42, 0x8e, 0x61, 0xb9, 0x2f, 0x3d, 0x0a, 0x79, 0x79, 0x1c, 0x5c,
	0x7a, 0xba, 0x95, 0xfa, 0x64, 0x2d, 0x44, 0x88, 0xd6, 0x99, 0x01, 0x29, 0x51, 0xc8, 0xcd, 0x71,
	0x10, 0x65, 0xd3, 0xac, 0xd4, 0x27, 0x6d, 0xc3, 0xbb, 0xff, 0x0c, 0x96, 0x7a, 0x72, 0xa7, 0x90,
	0x8d, 0x71, 0xd0, 0xa4, 0x79, 0x58, 0xea, 0x93, 0xc0, 0xf3, 0x2e, 0x9b, 0x50, 0xd1, 0xb3, 0xa7,
	0x90, 0x17, 0xc6, 0x69, 0x2f, 0xf3, 0xb3, 0xd4, 0xc7, 0x06, 0xee, 0xe1, 0xad, 0x96, 0x1d, 0x65,
	0x3c, 0xde, 0x66, 0x33, 0xae, 0xd4, 0x27, 0x6d, 0x23, 0xf5, 0x5a, 0xef, 0x94, 0xe7, 0xeb, 0xb5,
	0x01, 0x59, 0x58, 0xea, 0x13, 0x35, 0x90, 0xda, 0x3b, 0x9b, 0x7f, 0x24, 0x5f, 0x7b, 0xf7, 0xa5,
	0x58, 0xa9, 0x4f, 0x00, 0xce, 0xfb, 0xfb, 0x6e, 0x01, 0x56, 0x06, 0xc5, 0x57, 0x93, 0x57, 0x27,
	0x19, 0xb9, 0x0c, 0xa7, 0xae, 0x4f, 0xdc, 0x88, 0x0f, 0xe1, 0xd7, 0x0a, 0x70, 0x6e, 0xc8, 0x89,
	0x9d, 0x9c, 0xe6, 0x98, 0xcf, 0x07, 0x72, 0x4a, 0xf7, 0x00, 0xf9, 0xb3, 0x05, 0xa8, 0x0d, 0x3b,
	0xe0, 0x93, 0x53, 0xb9, 0x05, 0xf8, 0x68, 0x4e, 0xeb, 0x4f, 0x20, 0x7f, 0xaa, 0x00, 0x67, 0x07,
	0x66, 0x7e, 0x21, 0xaf, 0xe5, 0xde, 0x93, 0x0c, 0xc9, 0x45, 0x53, 0x9f, 0xbc, 0x95, 0x52, 0xf3,
	0x83, 0x73, 0xbb, 0xe4, 0xab, 0xf9, 0xa1, 0x69, 0x67, 0xea, 0xa7, 0x68, 0xa6, 0x66, 0x67, 0x58,
	0x22, 0x97, 0xfc, 0xd9, 0xc9, 0x49, 0x2e, 0x53, 0x3f, 0x55, 0x43, 0xb9, 0xeb, 0xf4, 0xe5, 0x6e,
	0xc9, 0xdf, 0x75, 0x06, 0x65, 0x91, 0xa9, 0x4f, 0xd6, 0x82, 0x77, 0xfc, 0x39, 0x90, 0xfe, 0xec,
	0x2d, 0xe4, 0x95, 0xf1, 0x98, 0xaa, 0x77, 0x3d, 0x61, 0x13, 0xa5, 0x30, 0x06, 0xa5, 0x68, 0xc9,
	0x57, 0x18, 0x43, 0x52, 0xc6, 0xd4, 0x27, 0x6e, 0x94, 0x15, 0x83, 0xfe, 0x3c, 0x2c, 0xe3, 0x88,
	0xc1, 0xc0, 0xfc, 0x30, 0xf5, 0x53, 0x35, 0x94, 0x2a, 0x3b, 0x9b, 0x3a, 0x24, 0x5f, 0x65, 0xf7,
	0xe5, 0x31, 0xa9, 0x4f, 0x00, 0xce, 0xfb, 0x6b, 0xc1, 0x42, 0x26, 0x59, 0x48, 0xfe, 0x69, 0xa2,
	0x37, 0x6f, 0x49, 0x7d, 0x7c, 0x68, 0xb9, 0x0b, 0xf6, 0xe6, 0x6f, 0xc8, 0xdf, 0x05, 0x07, 0xe4,
	0xc6, 0xa8, 0x4f, 0xd4, 0x20, 0x35, 0x2c, 0x07, 0xa5, 0x30, 0x18, 0x65, 0x58, 0x0e, 0x49, 0xf4,
	0x50, 0x3f, 0x45, 0x33, 0x3e, 0x10, 0x0a, 0x65, 0x2d, 0xf1, 0x40, 0xbe, 0xd9, 0x9e, 0xcd, 0x8f,
	0x50, 0x1f, 0x17, 0x56, 0x1a, 0x55, 0xfa, 0x33, 0xfd, 0x7c, 0xa3, 0xaa, 0x27, 0x2d, 0x41, 0x7d,
	0x6c, 0x60, 0xd9, 0x93, 0xfe, 0xce, 0x3d, 0xbf, 0xa7, 0x9e, 0x47, 0xfd, 0xf5, 0xb1, 0x81, 0x79,
	0x4f, 0x7f, 0xa5, 0x00, 0x6b, 0xb9, 0x4f, 0xce, 0xc9, 0xdb, 0x23, 0xdf, 0xe4, 0xe6, 0xbc, 0x8f,
	0xaf, 0x9f, 0xbe, 0xb5, 0xda, 0x59, 0x07, 0x3e, 0x21, 0xce, 0xdf, 0x59, 0x87, 0xbd, 0x8a, 0xaf,
	0x4f, 0xde, 0x4a, 0xaa, 0x8e, 0x6c, 0x54, 0x2e, 0x99, 0x2c, 0x82, 0xb7, 0x3e, 0x01, 0xb8, 0x9c,
	0x7d, 0x3d, 0xc6, 0x9f, 0x8c, 0xba, 0x49, 0xd2, 0x5f, 0x1b, 0xd4, 0xc7, 0x06, 0xe6, 0x3d, 0xfd,
	0xd5, 0x02, 0x5c, 0xcc, 0x7f, 0xa5, 0x4d, 0xbe, 0x36, 0x02, 0x5f, 0xfe, 0xfb, 0xf1, 0xfa, 0x13,
	0x34, 0x97, 0x02, 0x50, 0xed, 0xbd, 0xdb, 0x22, 0x13, 0xdd, 0x84, 0x8d, 0xe3, 0xb7, 0xe8, 0xbd,
	0x3a, 0x33, 0x16, 0xbe, 0xfb, 0xc5, 0xda, 0xf7, 0xae, 0x25, 0xe7, 0xf3, 0x63, 0x9c, 0x90, 0xe4,
	0xc2, 0x8e, 0x8c, 0x7d, 0xb5, 0x37, 0xce, 0x84, 0xe8, 0xf7, 0x80, 0xbd, 0x1d, 0x73, 0x0d, 0x3b,
	0xf8, 0xb6, 0x89, 0x9c, 0xe2, 0x86, 0x6a, 0xa4, 0x86, 0x1d, 0xfe, 0xa4, 0xa3, 0x09, 0x15, 0xfd,
	0x31, 0x41, 0x3e, 0x07, 0x7a, 0x5e, 0x69, 0xd4, 0xc7, 0x06, 0x96, 0x5b, 0x59, 0x6f, 0x2c, 0x7f,
	0xfe, 0x84, 0x0f, 0x78, 0xc7, 0x50, 0x9f, 0xa8, 0x81, 0x58, 0xe2, 0xf3, 0xc9, 0x85, 0x2e, 0xb9,
	0x3e, 0x6e, 0x9c, 0x40, 0x7d, 0x3c, 0x48, 0x35, 0xb1, 0xff, 0x61, 0x29, 0x99, 0x58, 0x4e, 0x65,
	0xcf, 0x75, 0xde, 0x08, 0x2a, 0xfb, 0x6f, 0x0f, 0xeb, 0x13, 0x35, 0xe0, 0x54, 0xfe, 0xb9, 0x02,
	0x9c, 0x1f, 0x7a, 0xf1, 0x42, 0x72, 0x23, 0xcd, 0xf3, 0x6e, 0x9b, 0xea, 0xa7, 0x6b, 0xc9, 0x47,
	0xf4, 0x0f, 0x0b, 0x70, 0x79, 0xe4, 0x8d, 0x04, 0xf9, 0x46, 0xfe, 0x8e, 0x36, 0xfa, 0x56, 0xa6,
	0xfe, 0x64, 0x18, 0xd4, 0x04, 0xfe, 0xa1, 0xfa, 0xaf, 0x80, 0x06, 0xf6, 0xa0, 0xab, 0x86, 0x7c,
	0x03, 0x7b, 0xc8, 0x55, 0x4a, 0x7d, 0xe2, 0x46, 0x26, 0x8d, 0x6f, 0x7f, 0x03, 0xce, 0x3a, 0x61,
	0xbb, 0xbf, 0xe5, 0xed, 0xf4, 0x6f, 0xa6, 0x62, 0x28, 0xc5, 0xc7, 0x8b, 0xdd, 0xd8, 0xf3, 0xd3,
	0xfa, 0xef, 0x16, 0x0a, 0xdf, 0x2b, 0x14, 0xbe, 0x5f, 0x28, 0xfc, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x6f, 0x60, 0x37, 0xcf, 0x74, 0x98, 0x00, 0x00,
}

//Generated by ntnx_rpc plugin

// Service CassandraRpcSvc
type ICassandraRpcSvc interface {
	BeforeRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}) error
	AfterRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}, err error) error

	Login(*CassandraLoginArg, *CassandraLoginRet) error
	Get(*CassandraGetArg, *CassandraGetRet) error
	GetSlice(*CassandraGetSliceArg, *CassandraGetSliceRet) error
	GetCount(*CassandraGetCountArg, *CassandraGetCountRet) error
	MultigetSlice(*CassandraMultigetSliceArg, *CassandraMultigetSliceRet) error
	MultigetCount(*CassandraMultigetCountArg, *CassandraMultigetCountRet) error
	GetRangeSlices(*CassandraGetRangeSlicesArg, *CassandraGetRangeSlicesRet) error
	GetIndexedSlices(*CassandraGetIndexedSlicesArg, *CassandraGetIndexedSlicesRet) error
	Insert(*CassandraInsertArg, *CassandraInsertRet) error
	Remove(*CassandraRemoveArg, *CassandraRemoveRet) error
	BatchMutate(*CassandraBatchMutateArg, *CassandraBatchMutateRet) error
	Truncate(*CassandraTruncateArg, *CassandraTruncateRet) error
	DescribeSchemaVersions(*CassandraDescribeSchemaVersionsArg, *CassandraDescribeSchemaVersionsRet) error
	DescribeKeyspaces(*CassandraDescribeKeyspacesArg, *CassandraDescribeKeyspacesRet) error
	DescribeClusterName(*CassandraDescribeClusterNameArg, *CassandraDescribeClusterNameRet) error
	DescribeVersion(*CassandraDescribeVersionArg, *CassandraDescribeVersionRet) error
	DescribeRing(*CassandraDescribeRingArg, *CassandraDescribeRingRet) error
	DescribePartitioner(*CassandraDescribePartitionerArg, *CassandraDescribePartitionerRet) error
	DescribeKeyspace(*CassandraDescribeKeyspaceArg, *CassandraDescribeKeyspaceRet) error
	DescribeSplits(*CassandraDescribeSplitsArg, *CassandraDescribeSplitsRet) error
	DescribeKeyspaceSize(*CassandraDescribeKeyspaceSizeArg, *CassandraDescribeKeyspaceSizeRet) error
	DescribeAllKeyspaceSize(*CassandraDescribeAllKeyspaceSizeArg, *CassandraDescribeAllKeyspaceSizeRet) error
	DescribeSizeRequirements(*CassandraDescribeSizeRequirementsArg, *CassandraDescribeSizeRequirementsRet) error
	SystemAddColumnFamily(*CassandraSystemAddColumnFamilyArg, *CassandraSystemAddColumnFamilyRet) error
	SystemDropColumnFamily(*CassandraSystemDropColumnFamilyArg, *CassandraSystemDropColumnFamilyRet) error
	SystemRenameColumnFamily(*CassandraSystemRenameColumnFamilyArg, *CassandraSystemRenameColumnFamilyRet) error
	SystemAddKeyspace(*CassandraSystemAddKeyspaceArg, *CassandraSystemAddKeyspaceRet) error
	SystemDropKeyspace(*CassandraSystemDropKeyspaceArg, *CassandraSystemDropKeyspaceRet) error
	SystemUpdateKeyspace(*CassandraSystemUpdateKeyspaceArg, *CassandraSystemUpdateKeyspaceRet) error
	SystemUpdateColumnFamily(*CassandraSystemUpdateColumnFamilyArg, *CassandraSystemUpdateColumnFamilyRet) error
	PauseCassandra(*CassandraPauseCassandraArg, *CassandraPauseCassandraRet) error
	GetLimboState(*CassandraGetLimboStateArg, *CassandraGetLimboStateRet) error
	ChangeLimboState(*CassandraChangeLimboStateArg, *CassandraChangeLimboStateRet) error
	DeleteKeyRangeFromNode(*CassandraDeleteKeyRangeFromNodeArg, *CassandraDeleteKeyRangeFromNodeRet) error
	WriteToNode(*CassandraWriteToNodeArg, *CassandraWriteToNodeRet) error
	ReadFromNode(*CassandraReadFromNodeArg, *CassandraReadFromNodeRet) error
	ScanFromNode(*CassandraScanFromNodeArg, *CassandraScanFromNodeRet) error
	ForceMemtableFlushOnLocalNode(*CassandraForceMemtableFlushOnLocalNodeArg, *CassandraForceMemtableFlushOnLocalNodeRet) error
	ForceCompactionOnNode(*CassandraForceCompactionOnNodeArg, *CassandraForceCompactionOnNodeRet) error
	EnableFeatures(*CassandraEnableFeaturesArg, *CassandraEnableFeaturesRet) error
	GetMBeanData(*CassandraGetMBeanDataArg, *CassandraGetMBeanDataRet) error
	GetForceCompactionOnNodeStatus(*CassandraGetForceCompactionOnNodeStatusArg, *CassandraGetForceCompactionOnNodeStatusRet) error
	GetStageCounters(*CassandraGetStageCountersArg, *CassandraGetStageCountersRet) error
	GetHeapUsage(*CassandraGetHeapUsageArg, *CassandraGetHeapUsageRet) error
	GetLocalHealthWarnings(*CassandraGetLocalHealthWarningsArg, *CassandraGetLocalHealthWarningsRet) error
	LoadSSTables(*CassandraLoadSSTablesArg, *CassandraLoadSSTablesRet) error
	SnapshotSSTables(*CassandraSnapshotSSTablesArg, *CassandraSnapshotSSTablesRet) error
	Heartbeat(*CassandraHeartbeatArg, *CassandraHeartbeatRet) error
	StartNewSnapshot(*CassandraStartNewSnapshotArg, *CassandraStartNewSnapshotRet) error
	QueryLeaderOnlyReadStatus(*CassandraQueryLeaderOnlyReadStatusArg, *CassandraQueryLeaderOnlyReadStatusRet) error
	ScrubSSTableWithInvalidSnapshotId(*CassandraScrubSSTableWithInvalidSnapshotIdArg, *CassandraScrubSSTableWithInvalidSnapshotIdRet) error
	GetEstimatedKeyCount(*CassandraGetEstimatedKeyCountArg, *CassandraGetEstimatedKeyCountRet) error
}

func _CassandraRpcSvc_Login_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraLoginArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraLoginRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.Login(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_Get_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.Get(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_GetSlice_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetSliceArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetSliceRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetSlice(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_GetCount_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetCountArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetCountRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetCount(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_MultigetSlice_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraMultigetSliceArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraMultigetSliceRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MultigetSlice(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_MultigetCount_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraMultigetCountArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraMultigetCountRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.MultigetCount(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_GetRangeSlices_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetRangeSlicesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetRangeSlicesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetRangeSlices(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_GetIndexedSlices_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetIndexedSlicesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetIndexedSlicesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetIndexedSlices(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_Insert_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraInsertArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraInsertRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.Insert(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_Remove_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraRemoveArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraRemoveRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.Remove(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_BatchMutate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraBatchMutateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraBatchMutateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.BatchMutate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_Truncate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraTruncateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraTruncateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.Truncate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DescribeSchemaVersions_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDescribeSchemaVersionsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDescribeSchemaVersionsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DescribeSchemaVersions(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DescribeKeyspaces_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDescribeKeyspacesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDescribeKeyspacesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DescribeKeyspaces(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DescribeClusterName_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDescribeClusterNameArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDescribeClusterNameRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DescribeClusterName(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DescribeVersion_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDescribeVersionArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDescribeVersionRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DescribeVersion(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DescribeRing_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDescribeRingArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDescribeRingRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DescribeRing(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DescribePartitioner_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDescribePartitionerArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDescribePartitionerRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DescribePartitioner(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DescribeKeyspace_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDescribeKeyspaceArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDescribeKeyspaceRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DescribeKeyspace(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DescribeSplits_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDescribeSplitsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDescribeSplitsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DescribeSplits(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DescribeKeyspaceSize_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDescribeKeyspaceSizeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDescribeKeyspaceSizeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DescribeKeyspaceSize(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DescribeAllKeyspaceSize_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDescribeAllKeyspaceSizeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDescribeAllKeyspaceSizeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DescribeAllKeyspaceSize(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DescribeSizeRequirements_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDescribeSizeRequirementsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDescribeSizeRequirementsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DescribeSizeRequirements(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_SystemAddColumnFamily_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraSystemAddColumnFamilyArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraSystemAddColumnFamilyRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SystemAddColumnFamily(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_SystemDropColumnFamily_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraSystemDropColumnFamilyArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraSystemDropColumnFamilyRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SystemDropColumnFamily(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_SystemRenameColumnFamily_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraSystemRenameColumnFamilyArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraSystemRenameColumnFamilyRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SystemRenameColumnFamily(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_SystemAddKeyspace_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraSystemAddKeyspaceArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraSystemAddKeyspaceRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SystemAddKeyspace(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_SystemDropKeyspace_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraSystemDropKeyspaceArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraSystemDropKeyspaceRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SystemDropKeyspace(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_SystemUpdateKeyspace_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraSystemUpdateKeyspaceArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraSystemUpdateKeyspaceRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SystemUpdateKeyspace(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_SystemUpdateColumnFamily_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraSystemUpdateColumnFamilyArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraSystemUpdateColumnFamilyRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SystemUpdateColumnFamily(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_PauseCassandra_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraPauseCassandraArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraPauseCassandraRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.PauseCassandra(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_GetLimboState_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetLimboStateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetLimboStateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetLimboState(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_ChangeLimboState_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraChangeLimboStateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraChangeLimboStateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ChangeLimboState(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_DeleteKeyRangeFromNode_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraDeleteKeyRangeFromNodeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraDeleteKeyRangeFromNodeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DeleteKeyRangeFromNode(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_WriteToNode_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraWriteToNodeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraWriteToNodeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.WriteToNode(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_ReadFromNode_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraReadFromNodeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraReadFromNodeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ReadFromNode(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_ScanFromNode_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraScanFromNodeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraScanFromNodeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ScanFromNode(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_ForceMemtableFlushOnLocalNode_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraForceMemtableFlushOnLocalNodeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraForceMemtableFlushOnLocalNodeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ForceMemtableFlushOnLocalNode(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_ForceCompactionOnNode_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraForceCompactionOnNodeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraForceCompactionOnNodeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ForceCompactionOnNode(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_EnableFeatures_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraEnableFeaturesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraEnableFeaturesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.EnableFeatures(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_GetMBeanData_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetMBeanDataArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetMBeanDataRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetMBeanData(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_GetForceCompactionOnNodeStatus_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetForceCompactionOnNodeStatusArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetForceCompactionOnNodeStatusRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetForceCompactionOnNodeStatus(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_GetStageCounters_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetStageCountersArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetStageCountersRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetStageCounters(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_GetHeapUsage_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetHeapUsageArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetHeapUsageRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetHeapUsage(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_GetLocalHealthWarnings_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetLocalHealthWarningsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetLocalHealthWarningsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetLocalHealthWarnings(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_LoadSSTables_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraLoadSSTablesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraLoadSSTablesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.LoadSSTables(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_SnapshotSSTables_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraSnapshotSSTablesArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraSnapshotSSTablesRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SnapshotSSTables(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_Heartbeat_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraHeartbeatArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraHeartbeatRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.Heartbeat(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_StartNewSnapshot_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraStartNewSnapshotArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraStartNewSnapshotRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.StartNewSnapshot(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_QueryLeaderOnlyReadStatus_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraQueryLeaderOnlyReadStatusArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraQueryLeaderOnlyReadStatusRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.QueryLeaderOnlyReadStatus(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_ScrubSSTableWithInvalidSnapshotId_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraScrubSSTableWithInvalidSnapshotIdArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraScrubSSTableWithInvalidSnapshotIdRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ScrubSSTableWithInvalidSnapshotId(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _CassandraRpcSvc_GetEstimatedKeyCount_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(ICassandraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(CassandraGetEstimatedKeyCountArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &CassandraGetEstimatedKeyCountRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.GetEstimatedKeyCount(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

var _CassandraRpcSvcDesc = util_net.ServiceDesc{
	Name: "nutanix.cassandra.CassandraRpcSvc",
	Methods: map[string]util_net.ServiceMethodFn{
		"Login":                             _CassandraRpcSvc_Login_Handler,
		"Get":                               _CassandraRpcSvc_Get_Handler,
		"GetSlice":                          _CassandraRpcSvc_GetSlice_Handler,
		"GetCount":                          _CassandraRpcSvc_GetCount_Handler,
		"MultigetSlice":                     _CassandraRpcSvc_MultigetSlice_Handler,
		"MultigetCount":                     _CassandraRpcSvc_MultigetCount_Handler,
		"GetRangeSlices":                    _CassandraRpcSvc_GetRangeSlices_Handler,
		"GetIndexedSlices":                  _CassandraRpcSvc_GetIndexedSlices_Handler,
		"Insert":                            _CassandraRpcSvc_Insert_Handler,
		"Remove":                            _CassandraRpcSvc_Remove_Handler,
		"BatchMutate":                       _CassandraRpcSvc_BatchMutate_Handler,
		"Truncate":                          _CassandraRpcSvc_Truncate_Handler,
		"DescribeSchemaVersions":            _CassandraRpcSvc_DescribeSchemaVersions_Handler,
		"DescribeKeyspaces":                 _CassandraRpcSvc_DescribeKeyspaces_Handler,
		"DescribeClusterName":               _CassandraRpcSvc_DescribeClusterName_Handler,
		"DescribeVersion":                   _CassandraRpcSvc_DescribeVersion_Handler,
		"DescribeRing":                      _CassandraRpcSvc_DescribeRing_Handler,
		"DescribePartitioner":               _CassandraRpcSvc_DescribePartitioner_Handler,
		"DescribeKeyspace":                  _CassandraRpcSvc_DescribeKeyspace_Handler,
		"DescribeSplits":                    _CassandraRpcSvc_DescribeSplits_Handler,
		"DescribeKeyspaceSize":              _CassandraRpcSvc_DescribeKeyspaceSize_Handler,
		"DescribeAllKeyspaceSize":           _CassandraRpcSvc_DescribeAllKeyspaceSize_Handler,
		"DescribeSizeRequirements":          _CassandraRpcSvc_DescribeSizeRequirements_Handler,
		"SystemAddColumnFamily":             _CassandraRpcSvc_SystemAddColumnFamily_Handler,
		"SystemDropColumnFamily":            _CassandraRpcSvc_SystemDropColumnFamily_Handler,
		"SystemRenameColumnFamily":          _CassandraRpcSvc_SystemRenameColumnFamily_Handler,
		"SystemAddKeyspace":                 _CassandraRpcSvc_SystemAddKeyspace_Handler,
		"SystemDropKeyspace":                _CassandraRpcSvc_SystemDropKeyspace_Handler,
		"SystemUpdateKeyspace":              _CassandraRpcSvc_SystemUpdateKeyspace_Handler,
		"SystemUpdateColumnFamily":          _CassandraRpcSvc_SystemUpdateColumnFamily_Handler,
		"PauseCassandra":                    _CassandraRpcSvc_PauseCassandra_Handler,
		"GetLimboState":                     _CassandraRpcSvc_GetLimboState_Handler,
		"ChangeLimboState":                  _CassandraRpcSvc_ChangeLimboState_Handler,
		"DeleteKeyRangeFromNode":            _CassandraRpcSvc_DeleteKeyRangeFromNode_Handler,
		"WriteToNode":                       _CassandraRpcSvc_WriteToNode_Handler,
		"ReadFromNode":                      _CassandraRpcSvc_ReadFromNode_Handler,
		"ScanFromNode":                      _CassandraRpcSvc_ScanFromNode_Handler,
		"ForceMemtableFlushOnLocalNode":     _CassandraRpcSvc_ForceMemtableFlushOnLocalNode_Handler,
		"ForceCompactionOnNode":             _CassandraRpcSvc_ForceCompactionOnNode_Handler,
		"EnableFeatures":                    _CassandraRpcSvc_EnableFeatures_Handler,
		"GetMBeanData":                      _CassandraRpcSvc_GetMBeanData_Handler,
		"GetForceCompactionOnNodeStatus":    _CassandraRpcSvc_GetForceCompactionOnNodeStatus_Handler,
		"GetStageCounters":                  _CassandraRpcSvc_GetStageCounters_Handler,
		"GetHeapUsage":                      _CassandraRpcSvc_GetHeapUsage_Handler,
		"GetLocalHealthWarnings":            _CassandraRpcSvc_GetLocalHealthWarnings_Handler,
		"LoadSSTables":                      _CassandraRpcSvc_LoadSSTables_Handler,
		"SnapshotSSTables":                  _CassandraRpcSvc_SnapshotSSTables_Handler,
		"Heartbeat":                         _CassandraRpcSvc_Heartbeat_Handler,
		"StartNewSnapshot":                  _CassandraRpcSvc_StartNewSnapshot_Handler,
		"QueryLeaderOnlyReadStatus":         _CassandraRpcSvc_QueryLeaderOnlyReadStatus_Handler,
		"ScrubSSTableWithInvalidSnapshotId": _CassandraRpcSvc_ScrubSSTableWithInvalidSnapshotId_Handler,
		"GetEstimatedKeyCount":              _CassandraRpcSvc_GetEstimatedKeyCount_Handler,
	},
}

func NewCassandraRpcSvc(impl ICassandraRpcSvc) *util_net.Service {
	return &util_net.Service{
		Desc: &_CassandraRpcSvcDesc,
		Impl: impl,
	}
}

type ICassandraRpcClient interface {
	Login(*CassandraLoginArg) (*CassandraLoginRet, error)
	Get(*CassandraGetArg) (*CassandraGetRet, error)
	GetSlice(*CassandraGetSliceArg) (*CassandraGetSliceRet, error)
	GetCount(*CassandraGetCountArg) (*CassandraGetCountRet, error)
	MultigetSlice(*CassandraMultigetSliceArg) (*CassandraMultigetSliceRet, error)
	MultigetCount(*CassandraMultigetCountArg) (*CassandraMultigetCountRet, error)
	GetRangeSlices(*CassandraGetRangeSlicesArg) (*CassandraGetRangeSlicesRet, error)
	GetIndexedSlices(*CassandraGetIndexedSlicesArg) (*CassandraGetIndexedSlicesRet, error)
	Insert(*CassandraInsertArg) (*CassandraInsertRet, error)
	Remove(*CassandraRemoveArg) (*CassandraRemoveRet, error)
	BatchMutate(*CassandraBatchMutateArg) (*CassandraBatchMutateRet, error)
	Truncate(*CassandraTruncateArg) (*CassandraTruncateRet, error)
	DescribeSchemaVersions(*CassandraDescribeSchemaVersionsArg) (*CassandraDescribeSchemaVersionsRet, error)
	DescribeKeyspaces(*CassandraDescribeKeyspacesArg) (*CassandraDescribeKeyspacesRet, error)
	DescribeClusterName(*CassandraDescribeClusterNameArg) (*CassandraDescribeClusterNameRet, error)
	DescribeVersion(*CassandraDescribeVersionArg) (*CassandraDescribeVersionRet, error)
	DescribeRing(*CassandraDescribeRingArg) (*CassandraDescribeRingRet, error)
	DescribePartitioner(*CassandraDescribePartitionerArg) (*CassandraDescribePartitionerRet, error)
	DescribeKeyspace(*CassandraDescribeKeyspaceArg) (*CassandraDescribeKeyspaceRet, error)
	DescribeSplits(*CassandraDescribeSplitsArg) (*CassandraDescribeSplitsRet, error)
	DescribeKeyspaceSize(*CassandraDescribeKeyspaceSizeArg) (*CassandraDescribeKeyspaceSizeRet, error)
	DescribeAllKeyspaceSize(*CassandraDescribeAllKeyspaceSizeArg) (*CassandraDescribeAllKeyspaceSizeRet, error)
	DescribeSizeRequirements(*CassandraDescribeSizeRequirementsArg) (*CassandraDescribeSizeRequirementsRet, error)
	SystemAddColumnFamily(*CassandraSystemAddColumnFamilyArg) (*CassandraSystemAddColumnFamilyRet, error)
	SystemDropColumnFamily(*CassandraSystemDropColumnFamilyArg) (*CassandraSystemDropColumnFamilyRet, error)
	SystemRenameColumnFamily(*CassandraSystemRenameColumnFamilyArg) (*CassandraSystemRenameColumnFamilyRet, error)
	SystemAddKeyspace(*CassandraSystemAddKeyspaceArg) (*CassandraSystemAddKeyspaceRet, error)
	SystemDropKeyspace(*CassandraSystemDropKeyspaceArg) (*CassandraSystemDropKeyspaceRet, error)
	SystemUpdateKeyspace(*CassandraSystemUpdateKeyspaceArg) (*CassandraSystemUpdateKeyspaceRet, error)
	SystemUpdateColumnFamily(*CassandraSystemUpdateColumnFamilyArg) (*CassandraSystemUpdateColumnFamilyRet, error)
	PauseCassandra(*CassandraPauseCassandraArg) (*CassandraPauseCassandraRet, error)
	GetLimboState(*CassandraGetLimboStateArg) (*CassandraGetLimboStateRet, error)
	ChangeLimboState(*CassandraChangeLimboStateArg) (*CassandraChangeLimboStateRet, error)
	DeleteKeyRangeFromNode(*CassandraDeleteKeyRangeFromNodeArg) (*CassandraDeleteKeyRangeFromNodeRet, error)
	WriteToNode(*CassandraWriteToNodeArg) (*CassandraWriteToNodeRet, error)
	ReadFromNode(*CassandraReadFromNodeArg) (*CassandraReadFromNodeRet, error)
	ScanFromNode(*CassandraScanFromNodeArg) (*CassandraScanFromNodeRet, error)
	ForceMemtableFlushOnLocalNode(*CassandraForceMemtableFlushOnLocalNodeArg) (*CassandraForceMemtableFlushOnLocalNodeRet, error)
	ForceCompactionOnNode(*CassandraForceCompactionOnNodeArg) (*CassandraForceCompactionOnNodeRet, error)
	EnableFeatures(*CassandraEnableFeaturesArg) (*CassandraEnableFeaturesRet, error)
	GetMBeanData(*CassandraGetMBeanDataArg) (*CassandraGetMBeanDataRet, error)
	GetForceCompactionOnNodeStatus(*CassandraGetForceCompactionOnNodeStatusArg) (*CassandraGetForceCompactionOnNodeStatusRet, error)
	GetStageCounters(*CassandraGetStageCountersArg) (*CassandraGetStageCountersRet, error)
	GetHeapUsage(*CassandraGetHeapUsageArg) (*CassandraGetHeapUsageRet, error)
	GetLocalHealthWarnings(*CassandraGetLocalHealthWarningsArg) (*CassandraGetLocalHealthWarningsRet, error)
	LoadSSTables(*CassandraLoadSSTablesArg) (*CassandraLoadSSTablesRet, error)
	SnapshotSSTables(*CassandraSnapshotSSTablesArg) (*CassandraSnapshotSSTablesRet, error)
	Heartbeat(*CassandraHeartbeatArg) (*CassandraHeartbeatRet, error)
	StartNewSnapshot(*CassandraStartNewSnapshotArg) (*CassandraStartNewSnapshotRet, error)
	QueryLeaderOnlyReadStatus(*CassandraQueryLeaderOnlyReadStatusArg) (*CassandraQueryLeaderOnlyReadStatusRet, error)
	ScrubSSTableWithInvalidSnapshotId(*CassandraScrubSSTableWithInvalidSnapshotIdArg) (*CassandraScrubSSTableWithInvalidSnapshotIdRet, error)
	GetEstimatedKeyCount(*CassandraGetEstimatedKeyCountArg) (*CassandraGetEstimatedKeyCountRet, error)
}

type CassandraRpcClient struct {
	Impl util_net.ProtobufRPCClientIfc
}

func NewCassandraRpcClient(impl util_net.ProtobufRPCClientIfc) ICassandraRpcClient {
	return &CassandraRpcClient{
		Impl: impl,
	}
}

func (client *CassandraRpcClient) Login(
	arg *CassandraLoginArg) (
	*CassandraLoginRet, error) {

	ret := &CassandraLoginRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "Login", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) Get(
	arg *CassandraGetArg) (
	*CassandraGetRet, error) {

	ret := &CassandraGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "Get", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) GetSlice(
	arg *CassandraGetSliceArg) (
	*CassandraGetSliceRet, error) {

	ret := &CassandraGetSliceRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "GetSlice", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) GetCount(
	arg *CassandraGetCountArg) (
	*CassandraGetCountRet, error) {

	ret := &CassandraGetCountRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "GetCount", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) MultigetSlice(
	arg *CassandraMultigetSliceArg) (
	*CassandraMultigetSliceRet, error) {

	ret := &CassandraMultigetSliceRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "MultigetSlice", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) MultigetCount(
	arg *CassandraMultigetCountArg) (
	*CassandraMultigetCountRet, error) {

	ret := &CassandraMultigetCountRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "MultigetCount", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) GetRangeSlices(
	arg *CassandraGetRangeSlicesArg) (
	*CassandraGetRangeSlicesRet, error) {

	ret := &CassandraGetRangeSlicesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "GetRangeSlices", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) GetIndexedSlices(
	arg *CassandraGetIndexedSlicesArg) (
	*CassandraGetIndexedSlicesRet, error) {

	ret := &CassandraGetIndexedSlicesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "GetIndexedSlices", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) Insert(
	arg *CassandraInsertArg) (
	*CassandraInsertRet, error) {

	ret := &CassandraInsertRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "Insert", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) Remove(
	arg *CassandraRemoveArg) (
	*CassandraRemoveRet, error) {

	ret := &CassandraRemoveRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "Remove", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) BatchMutate(
	arg *CassandraBatchMutateArg) (
	*CassandraBatchMutateRet, error) {

	ret := &CassandraBatchMutateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "BatchMutate", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) Truncate(
	arg *CassandraTruncateArg) (
	*CassandraTruncateRet, error) {

	ret := &CassandraTruncateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "Truncate", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DescribeSchemaVersions(
	arg *CassandraDescribeSchemaVersionsArg) (
	*CassandraDescribeSchemaVersionsRet, error) {

	ret := &CassandraDescribeSchemaVersionsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DescribeSchemaVersions", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DescribeKeyspaces(
	arg *CassandraDescribeKeyspacesArg) (
	*CassandraDescribeKeyspacesRet, error) {

	ret := &CassandraDescribeKeyspacesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DescribeKeyspaces", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DescribeClusterName(
	arg *CassandraDescribeClusterNameArg) (
	*CassandraDescribeClusterNameRet, error) {

	ret := &CassandraDescribeClusterNameRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DescribeClusterName", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DescribeVersion(
	arg *CassandraDescribeVersionArg) (
	*CassandraDescribeVersionRet, error) {

	ret := &CassandraDescribeVersionRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DescribeVersion", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DescribeRing(
	arg *CassandraDescribeRingArg) (
	*CassandraDescribeRingRet, error) {

	ret := &CassandraDescribeRingRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DescribeRing", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DescribePartitioner(
	arg *CassandraDescribePartitionerArg) (
	*CassandraDescribePartitionerRet, error) {

	ret := &CassandraDescribePartitionerRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DescribePartitioner", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DescribeKeyspace(
	arg *CassandraDescribeKeyspaceArg) (
	*CassandraDescribeKeyspaceRet, error) {

	ret := &CassandraDescribeKeyspaceRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DescribeKeyspace", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DescribeSplits(
	arg *CassandraDescribeSplitsArg) (
	*CassandraDescribeSplitsRet, error) {

	ret := &CassandraDescribeSplitsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DescribeSplits", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DescribeKeyspaceSize(
	arg *CassandraDescribeKeyspaceSizeArg) (
	*CassandraDescribeKeyspaceSizeRet, error) {

	ret := &CassandraDescribeKeyspaceSizeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DescribeKeyspaceSize", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DescribeAllKeyspaceSize(
	arg *CassandraDescribeAllKeyspaceSizeArg) (
	*CassandraDescribeAllKeyspaceSizeRet, error) {

	ret := &CassandraDescribeAllKeyspaceSizeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DescribeAllKeyspaceSize", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DescribeSizeRequirements(
	arg *CassandraDescribeSizeRequirementsArg) (
	*CassandraDescribeSizeRequirementsRet, error) {

	ret := &CassandraDescribeSizeRequirementsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DescribeSizeRequirements", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) SystemAddColumnFamily(
	arg *CassandraSystemAddColumnFamilyArg) (
	*CassandraSystemAddColumnFamilyRet, error) {

	ret := &CassandraSystemAddColumnFamilyRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "SystemAddColumnFamily", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) SystemDropColumnFamily(
	arg *CassandraSystemDropColumnFamilyArg) (
	*CassandraSystemDropColumnFamilyRet, error) {

	ret := &CassandraSystemDropColumnFamilyRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "SystemDropColumnFamily", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) SystemRenameColumnFamily(
	arg *CassandraSystemRenameColumnFamilyArg) (
	*CassandraSystemRenameColumnFamilyRet, error) {

	ret := &CassandraSystemRenameColumnFamilyRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "SystemRenameColumnFamily", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) SystemAddKeyspace(
	arg *CassandraSystemAddKeyspaceArg) (
	*CassandraSystemAddKeyspaceRet, error) {

	ret := &CassandraSystemAddKeyspaceRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "SystemAddKeyspace", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) SystemDropKeyspace(
	arg *CassandraSystemDropKeyspaceArg) (
	*CassandraSystemDropKeyspaceRet, error) {

	ret := &CassandraSystemDropKeyspaceRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "SystemDropKeyspace", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) SystemUpdateKeyspace(
	arg *CassandraSystemUpdateKeyspaceArg) (
	*CassandraSystemUpdateKeyspaceRet, error) {

	ret := &CassandraSystemUpdateKeyspaceRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "SystemUpdateKeyspace", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) SystemUpdateColumnFamily(
	arg *CassandraSystemUpdateColumnFamilyArg) (
	*CassandraSystemUpdateColumnFamilyRet, error) {

	ret := &CassandraSystemUpdateColumnFamilyRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "SystemUpdateColumnFamily", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) PauseCassandra(
	arg *CassandraPauseCassandraArg) (
	*CassandraPauseCassandraRet, error) {

	ret := &CassandraPauseCassandraRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "PauseCassandra", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) GetLimboState(
	arg *CassandraGetLimboStateArg) (
	*CassandraGetLimboStateRet, error) {

	ret := &CassandraGetLimboStateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "GetLimboState", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) ChangeLimboState(
	arg *CassandraChangeLimboStateArg) (
	*CassandraChangeLimboStateRet, error) {

	ret := &CassandraChangeLimboStateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "ChangeLimboState", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) DeleteKeyRangeFromNode(
	arg *CassandraDeleteKeyRangeFromNodeArg) (
	*CassandraDeleteKeyRangeFromNodeRet, error) {

	ret := &CassandraDeleteKeyRangeFromNodeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "DeleteKeyRangeFromNode", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) WriteToNode(
	arg *CassandraWriteToNodeArg) (
	*CassandraWriteToNodeRet, error) {

	ret := &CassandraWriteToNodeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "WriteToNode", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) ReadFromNode(
	arg *CassandraReadFromNodeArg) (
	*CassandraReadFromNodeRet, error) {

	ret := &CassandraReadFromNodeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "ReadFromNode", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) ScanFromNode(
	arg *CassandraScanFromNodeArg) (
	*CassandraScanFromNodeRet, error) {

	ret := &CassandraScanFromNodeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "ScanFromNode", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) ForceMemtableFlushOnLocalNode(
	arg *CassandraForceMemtableFlushOnLocalNodeArg) (
	*CassandraForceMemtableFlushOnLocalNodeRet, error) {

	ret := &CassandraForceMemtableFlushOnLocalNodeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "ForceMemtableFlushOnLocalNode", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) ForceCompactionOnNode(
	arg *CassandraForceCompactionOnNodeArg) (
	*CassandraForceCompactionOnNodeRet, error) {

	ret := &CassandraForceCompactionOnNodeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "ForceCompactionOnNode", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) EnableFeatures(
	arg *CassandraEnableFeaturesArg) (
	*CassandraEnableFeaturesRet, error) {

	ret := &CassandraEnableFeaturesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "EnableFeatures", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) GetMBeanData(
	arg *CassandraGetMBeanDataArg) (
	*CassandraGetMBeanDataRet, error) {

	ret := &CassandraGetMBeanDataRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "GetMBeanData", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) GetForceCompactionOnNodeStatus(
	arg *CassandraGetForceCompactionOnNodeStatusArg) (
	*CassandraGetForceCompactionOnNodeStatusRet, error) {

	ret := &CassandraGetForceCompactionOnNodeStatusRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "GetForceCompactionOnNodeStatus", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) GetStageCounters(
	arg *CassandraGetStageCountersArg) (
	*CassandraGetStageCountersRet, error) {

	ret := &CassandraGetStageCountersRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "GetStageCounters", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) GetHeapUsage(
	arg *CassandraGetHeapUsageArg) (
	*CassandraGetHeapUsageRet, error) {

	ret := &CassandraGetHeapUsageRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "GetHeapUsage", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) GetLocalHealthWarnings(
	arg *CassandraGetLocalHealthWarningsArg) (
	*CassandraGetLocalHealthWarningsRet, error) {

	ret := &CassandraGetLocalHealthWarningsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "GetLocalHealthWarnings", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) LoadSSTables(
	arg *CassandraLoadSSTablesArg) (
	*CassandraLoadSSTablesRet, error) {

	ret := &CassandraLoadSSTablesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "LoadSSTables", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) SnapshotSSTables(
	arg *CassandraSnapshotSSTablesArg) (
	*CassandraSnapshotSSTablesRet, error) {

	ret := &CassandraSnapshotSSTablesRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "SnapshotSSTables", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) Heartbeat(
	arg *CassandraHeartbeatArg) (
	*CassandraHeartbeatRet, error) {

	ret := &CassandraHeartbeatRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "Heartbeat", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) StartNewSnapshot(
	arg *CassandraStartNewSnapshotArg) (
	*CassandraStartNewSnapshotRet, error) {

	ret := &CassandraStartNewSnapshotRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "StartNewSnapshot", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) QueryLeaderOnlyReadStatus(
	arg *CassandraQueryLeaderOnlyReadStatusArg) (
	*CassandraQueryLeaderOnlyReadStatusRet, error) {

	ret := &CassandraQueryLeaderOnlyReadStatusRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "QueryLeaderOnlyReadStatus", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) ScrubSSTableWithInvalidSnapshotId(
	arg *CassandraScrubSSTableWithInvalidSnapshotIdArg) (
	*CassandraScrubSSTableWithInvalidSnapshotIdRet, error) {

	ret := &CassandraScrubSSTableWithInvalidSnapshotIdRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "ScrubSSTableWithInvalidSnapshotId", arg, ret, 0)
	return ret, err
}

func (client *CassandraRpcClient) GetEstimatedKeyCount(
	arg *CassandraGetEstimatedKeyCountArg) (
	*CassandraGetEstimatedKeyCountRet, error) {

	ret := &CassandraGetEstimatedKeyCountRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.cassandra.CassandraRpcSvc", "GetEstimatedKeyCount", arg, ret, 0)
	return ret, err
}
