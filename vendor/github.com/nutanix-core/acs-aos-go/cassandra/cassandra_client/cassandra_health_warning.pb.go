// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cassandra/cassandra_client/cassandra_health_warning.proto

package util_cassandra

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Warning types.
type CassandraHealthWarningsProto_HealthWarningType int32

const (
	CassandraHealthWarningsProto_kTooManySSTables  CassandraHealthWarningsProto_HealthWarningType = 0
	CassandraHealthWarningsProto_kCorruptSSTable   CassandraHealthWarningsProto_HealthWarningType = 1
	CassandraHealthWarningsProto_kCommitLogTooBig  CassandraHealthWarningsProto_HealthWarningType = 2
	CassandraHealthWarningsProto_kCorruptCommitLog CassandraHealthWarningsProto_HealthWarningType = 3
)

var CassandraHealthWarningsProto_HealthWarningType_name = map[int32]string{
	0: "kTooManySSTables",
	1: "kCorruptSSTable",
	2: "kCommitLogTooBig",
	3: "kCorruptCommitLog",
}

var CassandraHealthWarningsProto_HealthWarningType_value = map[string]int32{
	"kTooManySSTables":  0,
	"kCorruptSSTable":   1,
	"kCommitLogTooBig":  2,
	"kCorruptCommitLog": 3,
}

func (x CassandraHealthWarningsProto_HealthWarningType) Enum() *CassandraHealthWarningsProto_HealthWarningType {
	p := new(CassandraHealthWarningsProto_HealthWarningType)
	*p = x
	return p
}

func (x CassandraHealthWarningsProto_HealthWarningType) String() string {
	return proto.EnumName(CassandraHealthWarningsProto_HealthWarningType_name, int32(x))
}

func (x *CassandraHealthWarningsProto_HealthWarningType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CassandraHealthWarningsProto_HealthWarningType_value, data, "CassandraHealthWarningsProto_HealthWarningType")
	if err != nil {
		return err
	}
	*x = CassandraHealthWarningsProto_HealthWarningType(value)
	return nil
}

func (CassandraHealthWarningsProto_HealthWarningType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5939bac1c450bdfd, []int{0, 0}
}

type CassandraHealthWarningsProto struct {
	WarningsList []*CassandraHealthWarningsProto_HealthWarning `protobuf:"bytes,1,rep,name=warnings_list,json=warningsList" json:"warnings_list,omitempty"`
	// Track the sstable or commitlog that may be corrupted. Once a file is found
	// to be corrupted the first time, it is put into the list. When a file is
	// found to be corrupted persistently, we raise a warning by moving the file
	// from corrupted_file_info_list to warnings_list.
	CorruptedFileInfoList []*CassandraHealthWarningsProto_CorruptedFileInfo `protobuf:"bytes,2,rep,name=corrupted_file_info_list,json=corruptedFileInfoList" json:"corrupted_file_info_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                          `json:"-"`
	XXX_unrecognized      []byte                                            `json:"-"`
	XXX_sizecache         int32                                             `json:"-"`
}

func (m *CassandraHealthWarningsProto) Reset()         { *m = CassandraHealthWarningsProto{} }
func (m *CassandraHealthWarningsProto) String() string { return proto.CompactTextString(m) }
func (*CassandraHealthWarningsProto) ProtoMessage()    {}
func (*CassandraHealthWarningsProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_5939bac1c450bdfd, []int{0}
}

func (m *CassandraHealthWarningsProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraHealthWarningsProto.Unmarshal(m, b)
}
func (m *CassandraHealthWarningsProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraHealthWarningsProto.Marshal(b, m, deterministic)
}
func (m *CassandraHealthWarningsProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraHealthWarningsProto.Merge(m, src)
}
func (m *CassandraHealthWarningsProto) XXX_Size() int {
	return xxx_messageInfo_CassandraHealthWarningsProto.Size(m)
}
func (m *CassandraHealthWarningsProto) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraHealthWarningsProto.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraHealthWarningsProto proto.InternalMessageInfo

func (m *CassandraHealthWarningsProto) GetWarningsList() []*CassandraHealthWarningsProto_HealthWarning {
	if m != nil {
		return m.WarningsList
	}
	return nil
}

func (m *CassandraHealthWarningsProto) GetCorruptedFileInfoList() []*CassandraHealthWarningsProto_CorruptedFileInfo {
	if m != nil {
		return m.CorruptedFileInfoList
	}
	return nil
}

type CassandraHealthWarningsProto_HealthWarning struct {
	// Warning type.
	WarningType *CassandraHealthWarningsProto_HealthWarningType `protobuf:"varint,1,opt,name=warning_type,json=warningType,enum=nutanix.cassandra.CassandraHealthWarningsProto_HealthWarningType" json:"warning_type,omitempty"`
	// Time in milliseconds when the warning was first observed.
	WarningTimeMillis *int64 `protobuf:"varint,2,opt,name=warning_time_millis,json=warningTimeMillis" json:"warning_time_millis,omitempty"`
	// In case of corruption, list of files that were affected.
	FilePathList []string `protobuf:"bytes,3,rep,name=file_path_list,json=filePathList" json:"file_path_list,omitempty"`
	// In case of SSTable related issues, keyspace and column family
	// names that were affected.
	Keyspace     *string `protobuf:"bytes,4,opt,name=keyspace" json:"keyspace,omitempty"`
	ColumnFamily *string `protobuf:"bytes,5,opt,name=column_family,json=columnFamily" json:"column_family,omitempty"`
	// In case of 'kTooManySSTables' error, specifies the number of times the
	// compaction was attempted and failed. Once the number of failed attempts
	// exceeds certain threshold, we will give up and let the node be detached.
	NumFailedCompactionAttempts *int32   `protobuf:"varint,6,opt,name=num_failed_compaction_attempts,json=numFailedCompactionAttempts" json:"num_failed_compaction_attempts,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *CassandraHealthWarningsProto_HealthWarning) Reset() {
	*m = CassandraHealthWarningsProto_HealthWarning{}
}
func (m *CassandraHealthWarningsProto_HealthWarning) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraHealthWarningsProto_HealthWarning) ProtoMessage() {}
func (*CassandraHealthWarningsProto_HealthWarning) Descriptor() ([]byte, []int) {
	return fileDescriptor_5939bac1c450bdfd, []int{0, 0}
}

func (m *CassandraHealthWarningsProto_HealthWarning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraHealthWarningsProto_HealthWarning.Unmarshal(m, b)
}
func (m *CassandraHealthWarningsProto_HealthWarning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraHealthWarningsProto_HealthWarning.Marshal(b, m, deterministic)
}
func (m *CassandraHealthWarningsProto_HealthWarning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraHealthWarningsProto_HealthWarning.Merge(m, src)
}
func (m *CassandraHealthWarningsProto_HealthWarning) XXX_Size() int {
	return xxx_messageInfo_CassandraHealthWarningsProto_HealthWarning.Size(m)
}
func (m *CassandraHealthWarningsProto_HealthWarning) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraHealthWarningsProto_HealthWarning.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraHealthWarningsProto_HealthWarning proto.InternalMessageInfo

func (m *CassandraHealthWarningsProto_HealthWarning) GetWarningType() CassandraHealthWarningsProto_HealthWarningType {
	if m != nil && m.WarningType != nil {
		return *m.WarningType
	}
	return CassandraHealthWarningsProto_kTooManySSTables
}

func (m *CassandraHealthWarningsProto_HealthWarning) GetWarningTimeMillis() int64 {
	if m != nil && m.WarningTimeMillis != nil {
		return *m.WarningTimeMillis
	}
	return 0
}

func (m *CassandraHealthWarningsProto_HealthWarning) GetFilePathList() []string {
	if m != nil {
		return m.FilePathList
	}
	return nil
}

func (m *CassandraHealthWarningsProto_HealthWarning) GetKeyspace() string {
	if m != nil && m.Keyspace != nil {
		return *m.Keyspace
	}
	return ""
}

func (m *CassandraHealthWarningsProto_HealthWarning) GetColumnFamily() string {
	if m != nil && m.ColumnFamily != nil {
		return *m.ColumnFamily
	}
	return ""
}

func (m *CassandraHealthWarningsProto_HealthWarning) GetNumFailedCompactionAttempts() int32 {
	if m != nil && m.NumFailedCompactionAttempts != nil {
		return *m.NumFailedCompactionAttempts
	}
	return 0
}

type CassandraHealthWarningsProto_CorruptedFileInfo struct {
	// The path of corrupted file.
	FilePath *string `protobuf:"bytes,1,req,name=file_path,json=filePath" json:"file_path,omitempty"`
	// A list of incarnation ids of cassandra which detected the corruption.
	IncarnationIdList    []int64  `protobuf:"varint,2,rep,name=incarnation_id_list,json=incarnationIdList" json:"incarnation_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraHealthWarningsProto_CorruptedFileInfo) Reset() {
	*m = CassandraHealthWarningsProto_CorruptedFileInfo{}
}
func (m *CassandraHealthWarningsProto_CorruptedFileInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CassandraHealthWarningsProto_CorruptedFileInfo) ProtoMessage() {}
func (*CassandraHealthWarningsProto_CorruptedFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5939bac1c450bdfd, []int{0, 1}
}

func (m *CassandraHealthWarningsProto_CorruptedFileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraHealthWarningsProto_CorruptedFileInfo.Unmarshal(m, b)
}
func (m *CassandraHealthWarningsProto_CorruptedFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraHealthWarningsProto_CorruptedFileInfo.Marshal(b, m, deterministic)
}
func (m *CassandraHealthWarningsProto_CorruptedFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraHealthWarningsProto_CorruptedFileInfo.Merge(m, src)
}
func (m *CassandraHealthWarningsProto_CorruptedFileInfo) XXX_Size() int {
	return xxx_messageInfo_CassandraHealthWarningsProto_CorruptedFileInfo.Size(m)
}
func (m *CassandraHealthWarningsProto_CorruptedFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraHealthWarningsProto_CorruptedFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraHealthWarningsProto_CorruptedFileInfo proto.InternalMessageInfo

func (m *CassandraHealthWarningsProto_CorruptedFileInfo) GetFilePath() string {
	if m != nil && m.FilePath != nil {
		return *m.FilePath
	}
	return ""
}

func (m *CassandraHealthWarningsProto_CorruptedFileInfo) GetIncarnationIdList() []int64 {
	if m != nil {
		return m.IncarnationIdList
	}
	return nil
}

func init() {
	proto.RegisterEnum("nutanix.cassandra.CassandraHealthWarningsProto_HealthWarningType", CassandraHealthWarningsProto_HealthWarningType_name, CassandraHealthWarningsProto_HealthWarningType_value)
	proto.RegisterType((*CassandraHealthWarningsProto)(nil), "nutanix.cassandra.CassandraHealthWarningsProto")
	proto.RegisterType((*CassandraHealthWarningsProto_HealthWarning)(nil), "nutanix.cassandra.CassandraHealthWarningsProto.HealthWarning")
	proto.RegisterType((*CassandraHealthWarningsProto_CorruptedFileInfo)(nil), "nutanix.cassandra.CassandraHealthWarningsProto.CorruptedFileInfo")
}

func init() {
	proto.RegisterFile("cassandra/cassandra_client/cassandra_health_warning.proto", fileDescriptor_5939bac1c450bdfd)
}

var fileDescriptor_5939bac1c450bdfd = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xdd, 0x6a, 0xdb, 0x30,
	0x18, 0x9d, 0xe3, 0xb5, 0x2c, 0x6a, 0x92, 0xc5, 0xea, 0x32, 0x4c, 0x3a, 0x86, 0xe9, 0x76, 0xe1,
	0x2b, 0x0f, 0x76, 0xb7, 0x8b, 0x31, 0x9a, 0x40, 0x58, 0xa1, 0x85, 0xe2, 0x06, 0x06, 0xbb, 0xd1,
	0x54, 0x59, 0x49, 0x3e, 0xa2, 0x1f, 0x63, 0xc9, 0x74, 0xde, 0xdb, 0xec, 0x91, 0xf6, 0x46, 0xc3,
	0x4a, 0xec, 0x34, 0xcb, 0x28, 0xf4, 0xce, 0x3a, 0xdf, 0xf9, 0xce, 0x39, 0x3a, 0x32, 0xfa, 0xc4,
	0xa8, 0x31, 0x54, 0x65, 0x05, 0xfd, 0xd0, 0x7e, 0x11, 0x26, 0x80, 0x2b, 0xfb, 0x00, 0x58, 0x71,
	0x2a, 0xec, 0x8a, 0xdc, 0xd3, 0x42, 0x81, 0x5a, 0x26, 0x79, 0xa1, 0xad, 0xc6, 0x81, 0x2a, 0x2d,
	0x55, 0xf0, 0x33, 0x69, 0x79, 0xe7, 0xbf, 0x8f, 0xd1, 0x9b, 0x69, 0x73, 0xfa, 0xea, 0x96, 0xbe,
	0x6d, 0x76, 0xcc, 0x8d, 0xdb, 0xb9, 0x43, 0xfd, 0xad, 0x88, 0x21, 0x02, 0x8c, 0x0d, 0xbd, 0xc8,
	0x8f, 0x4f, 0x3e, 0x7e, 0x4e, 0x0e, 0xb4, 0x92, 0xc7, 0x74, 0x92, 0x3d, 0x2c, 0xed, 0x35, 0x9a,
	0x57, 0x60, 0x2c, 0xfe, 0x85, 0x42, 0xa6, 0x8b, 0xa2, 0xcc, 0x2d, 0xcf, 0xc8, 0x02, 0x04, 0x27,
	0xa0, 0x16, 0x7a, 0x63, 0xd7, 0x71, 0x76, 0x17, 0x4f, 0xb5, 0x9b, 0x36, 0x7a, 0x33, 0x10, 0xfc,
	0x52, 0x2d, 0x74, 0x3a, 0x62, 0xff, 0x42, 0xb5, 0xf7, 0xf8, 0x4f, 0x07, 0xf5, 0xf7, 0x04, 0x70,
	0x86, 0x9a, 0x74, 0xc4, 0x56, 0x39, 0x0f, 0xbd, 0xc8, 0x8b, 0x07, 0x4f, 0x4f, 0xb0, 0x87, 0xcd,
	0xab, 0x9c, 0xa7, 0x27, 0xf7, 0xbb, 0x03, 0x4e, 0xd0, 0x69, 0xeb, 0x02, 0x92, 0x13, 0x09, 0x42,
	0x80, 0x09, 0x3b, 0x91, 0x17, 0xfb, 0x69, 0xd0, 0x30, 0x41, 0xf2, 0x6b, 0x37, 0xc0, 0xef, 0xd1,
	0xc0, 0x35, 0x93, 0x53, 0xbb, 0xda, 0x34, 0xe3, 0x47, 0x7e, 0xdc, 0x4d, 0x7b, 0x35, 0x7a, 0x43,
	0xed, 0xca, 0x35, 0x39, 0x46, 0x2f, 0xd6, 0xbc, 0x32, 0x39, 0x65, 0x3c, 0x7c, 0x1e, 0x79, 0x71,
	0x37, 0x6d, 0xcf, 0xf8, 0x1d, 0xea, 0x33, 0x2d, 0x4a, 0xa9, 0xc8, 0x82, 0x4a, 0x10, 0x55, 0x78,
	0xe4, 0x08, 0xbd, 0x0d, 0x38, 0x73, 0x18, 0x9e, 0xa2, 0xb7, 0xaa, 0x94, 0x64, 0x41, 0x41, 0xf0,
	0x8c, 0x30, 0x2d, 0x73, 0xca, 0x2c, 0x68, 0x45, 0xa8, 0xb5, 0x5c, 0xe6, 0xd6, 0x84, 0xc7, 0x91,
	0x17, 0x1f, 0xa5, 0x67, 0xaa, 0x94, 0x33, 0x47, 0x9a, 0xb6, 0x9c, 0x8b, 0x2d, 0x65, 0xfc, 0x03,
	0x05, 0x07, 0xfd, 0xe3, 0x33, 0xd4, 0x6d, 0x2f, 0x10, 0x7a, 0x51, 0xa7, 0xce, 0xd6, 0x64, 0xaf,
	0xdb, 0x00, 0xc5, 0x68, 0xa1, 0xa8, 0x33, 0x83, 0x6c, 0xf7, 0xf8, 0x7e, 0x1a, 0x3c, 0x18, 0x5d,
	0x66, 0xf5, 0x3d, 0xcf, 0xd7, 0x28, 0x38, 0xe8, 0x17, 0xbf, 0x42, 0xc3, 0xf5, 0x5c, 0xeb, 0x6b,
	0xaa, 0xaa, 0xdb, 0xdb, 0x39, 0xbd, 0x13, 0xdc, 0x0c, 0x9f, 0xe1, 0x53, 0xf4, 0x72, 0xbd, 0x4d,
	0xb3, 0x45, 0x87, 0x9e, 0xa3, 0x4e, 0xb5, 0x94, 0x60, 0xaf, 0xf4, 0x72, 0xae, 0xf5, 0x04, 0x96,
	0xc3, 0x0e, 0x1e, 0xa1, 0xa0, 0xa1, 0xb6, 0xc3, 0xa1, 0x3f, 0xf9, 0x82, 0x46, 0x4c, 0xcb, 0xc3,
	0xf7, 0x9f, 0xbc, 0xfe, 0xff, 0x0f, 0xf0, 0x7d, 0x50, 0x5a, 0x10, 0x3b, 0xde, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x64, 0x13, 0x34, 0x9a, 0xb3, 0x03, 0x00, 0x00,
}
