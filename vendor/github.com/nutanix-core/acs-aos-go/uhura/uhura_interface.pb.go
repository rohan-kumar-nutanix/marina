// Code generated by protoc-gen-go. DO NOT EDIT.
// source: uhura/uhura_interface.proto

package uhura

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/base"
	_ "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/net"
	hyperint "github.com/nutanix-core/acs-aos-go/hyperint"
	math "math"
	config "github.com/nutanix-core/acs-aos-go/zeus/config"
)

import (
	"errors"
	util_net "github.com/nutanix-core/acs-aos-go/nutanix/util-go/net"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BatchRequestArg struct {
	// A list of methods and serialized arguments.
	RequestList          []*MetaRequest `protobuf:"bytes,1,rep,name=request_list,json=requestList" json:"request_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BatchRequestArg) Reset()         { *m = BatchRequestArg{} }
func (m *BatchRequestArg) String() string { return proto.CompactTextString(m) }
func (*BatchRequestArg) ProtoMessage()    {}
func (*BatchRequestArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{0}
}

func (m *BatchRequestArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRequestArg.Unmarshal(m, b)
}
func (m *BatchRequestArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRequestArg.Marshal(b, m, deterministic)
}
func (m *BatchRequestArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequestArg.Merge(m, src)
}
func (m *BatchRequestArg) XXX_Size() int {
	return xxx_messageInfo_BatchRequestArg.Size(m)
}
func (m *BatchRequestArg) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequestArg.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequestArg proto.InternalMessageInfo

func (m *BatchRequestArg) GetRequestList() []*MetaRequest {
	if m != nil {
		return m.RequestList
	}
	return nil
}

type BatchRequestRet struct {
	// A list of responses, in the same order as the provided methods.
	ResponseList         []*MetaResponse `protobuf:"bytes,1,rep,name=response_list,json=responseList" json:"response_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BatchRequestRet) Reset()         { *m = BatchRequestRet{} }
func (m *BatchRequestRet) String() string { return proto.CompactTextString(m) }
func (*BatchRequestRet) ProtoMessage()    {}
func (*BatchRequestRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{1}
}

func (m *BatchRequestRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRequestRet.Unmarshal(m, b)
}
func (m *BatchRequestRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRequestRet.Marshal(b, m, deterministic)
}
func (m *BatchRequestRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequestRet.Merge(m, src)
}
func (m *BatchRequestRet) XXX_Size() int {
	return xxx_messageInfo_BatchRequestRet.Size(m)
}
func (m *BatchRequestRet) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequestRet.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequestRet proto.InternalMessageInfo

func (m *BatchRequestRet) GetResponseList() []*MetaResponse {
	if m != nil {
		return m.ResponseList
	}
	return nil
}

type UuidMappingUpdateArg struct {
	// Type of UUID mapping.
	MappingType *MappingType_Type `protobuf:"varint,1,opt,name=mapping_type,json=mappingType,enum=nutanix.uhura.MappingType_Type" json:"mapping_type,omitempty"`
	// Hypervisor specific ID. This is the key for the UUID mapping.
	SpecificId *string `protobuf:"bytes,2,opt,name=specific_id,json=specificId" json:"specific_id,omitempty"`
	// Hypervisor agnostic UUID. This is the value for the UUID mapping.
	AgnosticUuid []byte `protobuf:"bytes,3,opt,name=agnostic_uuid,json=agnosticUuid" json:"agnostic_uuid,omitempty"`
	// This flag allows creation of two different UUID mappings with same
	// hypervisor agnostic UUID.
	// In case of update key operation, this flag needs to be set to True.
	UpdateKey            *bool    `protobuf:"varint,4,opt,name=update_key,json=updateKey,def=0" json:"update_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UuidMappingUpdateArg) Reset()         { *m = UuidMappingUpdateArg{} }
func (m *UuidMappingUpdateArg) String() string { return proto.CompactTextString(m) }
func (*UuidMappingUpdateArg) ProtoMessage()    {}
func (*UuidMappingUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{2}
}

func (m *UuidMappingUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UuidMappingUpdateArg.Unmarshal(m, b)
}
func (m *UuidMappingUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UuidMappingUpdateArg.Marshal(b, m, deterministic)
}
func (m *UuidMappingUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UuidMappingUpdateArg.Merge(m, src)
}
func (m *UuidMappingUpdateArg) XXX_Size() int {
	return xxx_messageInfo_UuidMappingUpdateArg.Size(m)
}
func (m *UuidMappingUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_UuidMappingUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_UuidMappingUpdateArg proto.InternalMessageInfo

const Default_UuidMappingUpdateArg_UpdateKey bool = false

func (m *UuidMappingUpdateArg) GetMappingType() MappingType_Type {
	if m != nil && m.MappingType != nil {
		return *m.MappingType
	}
	return MappingType_kVM
}

func (m *UuidMappingUpdateArg) GetSpecificId() string {
	if m != nil && m.SpecificId != nil {
		return *m.SpecificId
	}
	return ""
}

func (m *UuidMappingUpdateArg) GetAgnosticUuid() []byte {
	if m != nil {
		return m.AgnosticUuid
	}
	return nil
}

func (m *UuidMappingUpdateArg) GetUpdateKey() bool {
	if m != nil && m.UpdateKey != nil {
		return *m.UpdateKey
	}
	return Default_UuidMappingUpdateArg_UpdateKey
}

type UuidMappingUpdateRet struct {
	// Hypervisor agnostic UUID of the created/updated UUID mapping.
	AgnosticUuid         []byte   `protobuf:"bytes,1,opt,name=agnostic_uuid,json=agnosticUuid" json:"agnostic_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UuidMappingUpdateRet) Reset()         { *m = UuidMappingUpdateRet{} }
func (m *UuidMappingUpdateRet) String() string { return proto.CompactTextString(m) }
func (*UuidMappingUpdateRet) ProtoMessage()    {}
func (*UuidMappingUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{3}
}

func (m *UuidMappingUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UuidMappingUpdateRet.Unmarshal(m, b)
}
func (m *UuidMappingUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UuidMappingUpdateRet.Marshal(b, m, deterministic)
}
func (m *UuidMappingUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UuidMappingUpdateRet.Merge(m, src)
}
func (m *UuidMappingUpdateRet) XXX_Size() int {
	return xxx_messageInfo_UuidMappingUpdateRet.Size(m)
}
func (m *UuidMappingUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UuidMappingUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_UuidMappingUpdateRet proto.InternalMessageInfo

func (m *UuidMappingUpdateRet) GetAgnosticUuid() []byte {
	if m != nil {
		return m.AgnosticUuid
	}
	return nil
}

type UuidMappingDeleteArg struct {
	// Type of UUID mapping.
	MappingType *MappingType_Type `protobuf:"varint,1,opt,name=mapping_type,json=mappingType,enum=nutanix.uhura.MappingType_Type" json:"mapping_type,omitempty"`
	// Hypervisor specific ID. This is the identifier of the entity to delete.
	SpecificId           *string  `protobuf:"bytes,2,opt,name=specific_id,json=specificId" json:"specific_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UuidMappingDeleteArg) Reset()         { *m = UuidMappingDeleteArg{} }
func (m *UuidMappingDeleteArg) String() string { return proto.CompactTextString(m) }
func (*UuidMappingDeleteArg) ProtoMessage()    {}
func (*UuidMappingDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{4}
}

func (m *UuidMappingDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UuidMappingDeleteArg.Unmarshal(m, b)
}
func (m *UuidMappingDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UuidMappingDeleteArg.Marshal(b, m, deterministic)
}
func (m *UuidMappingDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UuidMappingDeleteArg.Merge(m, src)
}
func (m *UuidMappingDeleteArg) XXX_Size() int {
	return xxx_messageInfo_UuidMappingDeleteArg.Size(m)
}
func (m *UuidMappingDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_UuidMappingDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_UuidMappingDeleteArg proto.InternalMessageInfo

func (m *UuidMappingDeleteArg) GetMappingType() MappingType_Type {
	if m != nil && m.MappingType != nil {
		return *m.MappingType
	}
	return MappingType_kVM
}

func (m *UuidMappingDeleteArg) GetSpecificId() string {
	if m != nil && m.SpecificId != nil {
		return *m.SpecificId
	}
	return ""
}

type UuidMappingDeleteRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UuidMappingDeleteRet) Reset()         { *m = UuidMappingDeleteRet{} }
func (m *UuidMappingDeleteRet) String() string { return proto.CompactTextString(m) }
func (*UuidMappingDeleteRet) ProtoMessage()    {}
func (*UuidMappingDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{5}
}

func (m *UuidMappingDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UuidMappingDeleteRet.Unmarshal(m, b)
}
func (m *UuidMappingDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UuidMappingDeleteRet.Marshal(b, m, deterministic)
}
func (m *UuidMappingDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UuidMappingDeleteRet.Merge(m, src)
}
func (m *UuidMappingDeleteRet) XXX_Size() int {
	return xxx_messageInfo_UuidMappingDeleteRet.Size(m)
}
func (m *UuidMappingDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UuidMappingDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_UuidMappingDeleteRet proto.InternalMessageInfo

// Next field tag number: 53
type VmCreateArg struct {
	// Task UUID for task idempotence.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// VM UUID that the client can specify.
	Uuid []byte `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
	// Parent task. This should NOT be set by a client app. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid []byte `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Required. Name of the virtual machine.
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// Small description about the VM.
	Annotation *string `protobuf:"bytes,5,opt,name=annotation" json:"annotation,omitempty"`
	// Number of vCPUs.
	NumVcpus *uint32 `protobuf:"varint,6,opt,name=num_vcpus,json=numVcpus" json:"num_vcpus,omitempty"`
	// Number of cores per vCPU.
	NumCoresPerVcpu *uint32 `protobuf:"varint,7,opt,name=num_cores_per_vcpu,json=numCoresPerVcpu" json:"num_cores_per_vcpu,omitempty"`
	// vCPU reservation in hertz.
	VcpuReservationHz *uint64 `protobuf:"varint,8,opt,name=vcpu_reservation_hz,json=vcpuReservationHz" json:"vcpu_reservation_hz,omitempty"`
	// Memory size in megabytes.
	MemorySizeMb *uint64 `protobuf:"varint,9,opt,name=memory_size_mb,json=memorySizeMb" json:"memory_size_mb,omitempty"`
	// Memory reservation size in megabytes.
	MemoryReservationMb *uint64 `protobuf:"varint,10,opt,name=memory_reservation_mb,json=memoryReservationMb" json:"memory_reservation_mb,omitempty"`
	// Virtual disks configuration.
	DiskList []*VmDiskConfig `protobuf:"bytes,11,rep,name=disk_list,json=diskList" json:"disk_list,omitempty"`
	// VM placement parameters.
	// Only one of 'hypervisor_type' or 'host_uuid' should be specified.
	// The hypervisor type for VM placement.
	HypervisorType *config.ConfigurationProto_ManagementServer_HypervisorType `protobuf:"varint,12,opt,name=hypervisor_type,json=hypervisorType,enum=nutanix.zeus.ConfigurationProto_ManagementServer_HypervisorType" json:"hypervisor_type,omitempty"`
	// Host where the VM needs to be placed. If this field is not specified,
	// then backed will try to place the VM in the local host. Applicable
	// only for ESX.
	HostUuid []byte `protobuf:"bytes,13,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// Virtual NICs configuration.
	NicList []*VmNicConfig `protobuf:"bytes,14,rep,name=nic_list,json=nicList" json:"nic_list,omitempty"`
	// Container on which the VM configuration files should be created.
	// Applicable only for ESX.
	HomeContainerUuid []byte `protobuf:"bytes,15,opt,name=home_container_uuid,json=homeContainerUuid" json:"home_container_uuid,omitempty"`
	// VM configuration NFS file path. e.g. .vmx in ESX. Valid only for ESXi.
	ConfigFilePath *string `protobuf:"bytes,49,opt,name=config_file_path,json=configFilePath" json:"config_file_path,omitempty"`
	// Priority for restarting in case of HA event. Applicable only for AHV.
	HaPriority *int64 `protobuf:"varint,16,opt,name=ha_priority,json=haPriority" json:"ha_priority,omitempty"`
	// The boot configuration.
	BootConfig *VmBootConfig `protobuf:"bytes,17,opt,name=boot_config,json=bootConfig" json:"boot_config,omitempty"`
	// If set to a non-empty string, this VM should be considered incompatible
	// with DR workflows.
	CbrNotCapableReason *string `protobuf:"bytes,18,opt,name=cbr_not_capable_reason,json=cbrNotCapableReason" json:"cbr_not_capable_reason,omitempty"`
	// Guest OS ID for VMWare. Applicable only for ESX.
	// This is mandatory field ESX hosted vm.
	GuestOsId *string `protobuf:"bytes,19,opt,name=guest_os_id,json=guestOsId" json:"guest_os_id,omitempty"`
	// The timezone for the VM's hardware clock. Applicable only for AHV.
	HwclockTimezone *string `protobuf:"bytes,20,opt,name=hwclock_timezone,json=hwclockTimezone,def=UTC" json:"hwclock_timezone,omitempty"`
	// Marks VM as an agent. Applicable only for AHV.
	AgentVm *bool `protobuf:"varint,21,opt,name=agent_vm,json=agentVm" json:"agent_vm,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,22,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// VM to Host affinity setting.
	Affinity *Affinity `protobuf:"bytes,23,opt,name=affinity" json:"affinity,omitempty"`
	// Reflects the virtual machine's supported virtual hardware features.
	// Corresponds to physical hardware available on the underlying ESX host.
	// Virtual hardware features include BIOS and EFI, available virtual PCI
	// slots, maximum number of CPUs, maximum memory configuration, etc.
	// For compatible verions, see https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=2007240
	// Applicable only for ESX.
	// eg: For version 8,version string is "vmx-08".
	HardwareVersion *string `protobuf:"bytes,24,opt,name=hardware_version,json=hardwareVersion" json:"hardware_version,omitempty"`
	// GPU resources.
	GpuConfigList []*VmGPUConfig `protobuf:"bytes,25,rep,name=gpu_config_list,json=gpuConfigList" json:"gpu_config_list,omitempty"`
	// Additional comma-separated VM specific flags. Only for AHV.
	ExtraFlags []*GenericKeyValuePair `protobuf:"bytes,26,rep,name=extra_flags,json=extraFlags" json:"extra_flags,omitempty"`
	// For DIAL workflows only.
	// This field is valid only when 'uuid' field is populated.
	// Boolean to indicate if the UUID specified to overwrite existing entity
	// in case of there is any entity existing with the same UUID.
	OverrideUuid *bool `protobuf:"varint,27,opt,name=override_uuid,json=overrideUuid" json:"override_uuid,omitempty"`
	// Applicable for AHV only.
	// Whether or not to have a VGA console. If unspecified, default will be
	// chosen based on the machine type of the VM.
	VgaConsole *bool `protobuf:"varint,28,opt,name=vga_console,json=vgaConsole" json:"vga_console,omitempty"`
	// UUID of VmGroup that the VM belongs to.  Only for AHV.
	VmGroupUuid []byte `protobuf:"bytes,29,opt,name=vm_group_uuid,json=vmGroupUuid" json:"vm_group_uuid,omitempty"`
	// The type of the VM.
	VmType *VmConfig_VmType `protobuf:"varint,30,opt,name=vm_type,json=vmType,enum=nutanix.uhura.VmConfig_VmType,def=1" json:"vm_type,omitempty"`
	// Applicable only for ESX.
	// Whether or not to allow guest time synchronization by host.
	EnableTimeSync *bool `protobuf:"varint,31,opt,name=enable_time_sync,json=enableTimeSync,def=1" json:"enable_time_sync,omitempty"`
	// Unused field.
	// The generation of VM.
	VmGeneration *uint64 `protobuf:"varint,32,opt,name=vm_generation,json=vmGeneration" json:"vm_generation,omitempty"`
	// 2: Linux Path Notation
	// The path should begin with `/` followed by container name, and then each
	// subsequent folders should be separated with `/`.
	// Ex 1: "/SelfServiceContainer/path/to/vm"
	// Ex 2: "///SelfServiceContainer/path/to//vm"
	VmPath *string `protobuf:"bytes,33,opt,name=vm_path,json=vmPath" json:"vm_path,omitempty"`
	// Unused field.
	// Boolean to denote if dynamic memory needs to be enabled.
	EnableDynamicMemory *bool `protobuf:"varint,34,opt,name=enable_dynamic_memory,json=enableDynamicMemory" json:"enable_dynamic_memory,omitempty"`
	// The number of vNUMA nodes.
	NumVnumaNodes *uint64 `protobuf:"varint,35,opt,name=num_vnuma_nodes,json=numVnumaNodes" json:"num_vnuma_nodes,omitempty"`
	// Virtual serial ports.
	SerialPortList []*VmSerialPortConfig `protobuf:"bytes,36,rep,name=serial_port_list,json=serialPortList" json:"serial_port_list,omitempty"`
	// Indicates how the power state changes.
	PowerStateMechanism *PowerStateMechanism `protobuf:"varint,37,opt,name=power_state_mechanism,json=powerStateMechanism,enum=nutanix.uhura.PowerStateMechanism" json:"power_state_mechanism,omitempty"`
	// Indicates whether to execute set script before ngt shutdown/reboot.
	NgtEnableScriptExec *bool `protobuf:"varint,38,opt,name=ngt_enable_script_exec,json=ngtEnableScriptExec" json:"ngt_enable_script_exec,omitempty"`
	// Indicates whether to abort ngt shutdown/reboot if script fails.
	NgtFailOnScriptFailure *bool `protobuf:"varint,39,opt,name=ngt_fail_on_script_failure,json=ngtFailOnScriptFailure" json:"ngt_fail_on_script_failure,omitempty"`
	// Unused field.
	StartAction *AutomaticStartAction_Action `protobuf:"varint,40,opt,name=start_action,json=startAction,enum=nutanix.uhura.AutomaticStartAction_Action" json:"start_action,omitempty"`
	// Unused field.
	StopAction *AutomaticStopAction_Action `protobuf:"varint,41,opt,name=stop_action,json=stopAction,enum=nutanix.uhura.AutomaticStopAction_Action" json:"stop_action,omitempty"`
	// Number of threads per core.
	NumThreadsPerCore *uint32 `protobuf:"varint,42,opt,name=num_threads_per_core,json=numThreadsPerCore" json:"num_threads_per_core,omitempty"`
	// Whether to hard pin vcpus to vcpus.
	VcpuHardPin *bool `protobuf:"varint,43,opt,name=vcpu_hard_pin,json=vcpuHardPin" json:"vcpu_hard_pin,omitempty"`
	// Incarnation ID required by IDF when the VM entity is migrated from some
	// other cluster to the current cluster.
	DbIncarnationId *uint64 `protobuf:"varint,44,opt,name=db_incarnation_id,json=dbIncarnationId" json:"db_incarnation_id,omitempty"`
	// AHV only: whether to pass through the host's CPU features.
	CpuPassthrough *bool `protobuf:"varint,45,opt,name=cpu_passthrough,json=cpuPassthrough,def=0" json:"cpu_passthrough,omitempty"`
	// The machine type of this VM.
	MachineType *string `protobuf:"bytes,46,opt,name=machine_type,json=machineType,def=pc" json:"machine_type,omitempty"`
	// Whether to disable Nutanix branding.
	DisableBranding *bool `protobuf:"varint,47,opt,name=disable_branding,json=disableBranding,def=0" json:"disable_branding,omitempty"`
	// Whether existing orphan VMs of the same name should be deleted first
	// before creating the new VM.
	DeleteOrphanedVm *bool `protobuf:"varint,48,opt,name=delete_orphaned_vm,json=deleteOrphanedVm" json:"delete_orphaned_vm,omitempty"`
	// Source VM from which the VM spec was created.
	// For internal use only.
	SourceVmUuid []byte `protobuf:"bytes,50,opt,name=source_vm_uuid,json=sourceVmUuid" json:"source_vm_uuid,omitempty"`
	// Whether this VM is created from a dormant VM.
	FromDormantVm *bool `protobuf:"varint,51,opt,name=from_dormant_vm,json=fromDormantVm" json:"from_dormant_vm,omitempty"`
	// If False, it will prevent users from hot plugging and unplugging of
	// PCI based devices from within VMs and from the hypervisor stack. Although
	// this applies equally for all VMs, it is primarily applicable for Windows
	// based VMs. By default, we allow hot-plugging and unplugging of devices.
	AllowHotPlug         *bool    `protobuf:"varint,52,opt,name=allow_hot_plug,json=allowHotPlug,def=1" json:"allow_hot_plug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCreateArg) Reset()         { *m = VmCreateArg{} }
func (m *VmCreateArg) String() string { return proto.CompactTextString(m) }
func (*VmCreateArg) ProtoMessage()    {}
func (*VmCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{6}
}

func (m *VmCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCreateArg.Unmarshal(m, b)
}
func (m *VmCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCreateArg.Marshal(b, m, deterministic)
}
func (m *VmCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCreateArg.Merge(m, src)
}
func (m *VmCreateArg) XXX_Size() int {
	return xxx_messageInfo_VmCreateArg.Size(m)
}
func (m *VmCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmCreateArg proto.InternalMessageInfo

const Default_VmCreateArg_HwclockTimezone string = "UTC"
const Default_VmCreateArg_VmType VmConfig_VmType = VmConfig_kGuestVM
const Default_VmCreateArg_EnableTimeSync bool = true
const Default_VmCreateArg_CpuPassthrough bool = false
const Default_VmCreateArg_MachineType string = "pc"
const Default_VmCreateArg_DisableBranding bool = false
const Default_VmCreateArg_AllowHotPlug bool = true

func (m *VmCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmCreateArg) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *VmCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmCreateArg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VmCreateArg) GetAnnotation() string {
	if m != nil && m.Annotation != nil {
		return *m.Annotation
	}
	return ""
}

func (m *VmCreateArg) GetNumVcpus() uint32 {
	if m != nil && m.NumVcpus != nil {
		return *m.NumVcpus
	}
	return 0
}

func (m *VmCreateArg) GetNumCoresPerVcpu() uint32 {
	if m != nil && m.NumCoresPerVcpu != nil {
		return *m.NumCoresPerVcpu
	}
	return 0
}

func (m *VmCreateArg) GetVcpuReservationHz() uint64 {
	if m != nil && m.VcpuReservationHz != nil {
		return *m.VcpuReservationHz
	}
	return 0
}

func (m *VmCreateArg) GetMemorySizeMb() uint64 {
	if m != nil && m.MemorySizeMb != nil {
		return *m.MemorySizeMb
	}
	return 0
}

func (m *VmCreateArg) GetMemoryReservationMb() uint64 {
	if m != nil && m.MemoryReservationMb != nil {
		return *m.MemoryReservationMb
	}
	return 0
}

func (m *VmCreateArg) GetDiskList() []*VmDiskConfig {
	if m != nil {
		return m.DiskList
	}
	return nil
}

func (m *VmCreateArg) GetHypervisorType() config.ConfigurationProto_ManagementServer_HypervisorType {
	if m != nil && m.HypervisorType != nil {
		return *m.HypervisorType
	}
	return config.ConfigurationProto_ManagementServer_kVMware
}

func (m *VmCreateArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *VmCreateArg) GetNicList() []*VmNicConfig {
	if m != nil {
		return m.NicList
	}
	return nil
}

func (m *VmCreateArg) GetHomeContainerUuid() []byte {
	if m != nil {
		return m.HomeContainerUuid
	}
	return nil
}

func (m *VmCreateArg) GetConfigFilePath() string {
	if m != nil && m.ConfigFilePath != nil {
		return *m.ConfigFilePath
	}
	return ""
}

func (m *VmCreateArg) GetHaPriority() int64 {
	if m != nil && m.HaPriority != nil {
		return *m.HaPriority
	}
	return 0
}

func (m *VmCreateArg) GetBootConfig() *VmBootConfig {
	if m != nil {
		return m.BootConfig
	}
	return nil
}

func (m *VmCreateArg) GetCbrNotCapableReason() string {
	if m != nil && m.CbrNotCapableReason != nil {
		return *m.CbrNotCapableReason
	}
	return ""
}

func (m *VmCreateArg) GetGuestOsId() string {
	if m != nil && m.GuestOsId != nil {
		return *m.GuestOsId
	}
	return ""
}

func (m *VmCreateArg) GetHwclockTimezone() string {
	if m != nil && m.HwclockTimezone != nil {
		return *m.HwclockTimezone
	}
	return Default_VmCreateArg_HwclockTimezone
}

func (m *VmCreateArg) GetAgentVm() bool {
	if m != nil && m.AgentVm != nil {
		return *m.AgentVm
	}
	return false
}

func (m *VmCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmCreateArg) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *VmCreateArg) GetHardwareVersion() string {
	if m != nil && m.HardwareVersion != nil {
		return *m.HardwareVersion
	}
	return ""
}

func (m *VmCreateArg) GetGpuConfigList() []*VmGPUConfig {
	if m != nil {
		return m.GpuConfigList
	}
	return nil
}

func (m *VmCreateArg) GetExtraFlags() []*GenericKeyValuePair {
	if m != nil {
		return m.ExtraFlags
	}
	return nil
}

func (m *VmCreateArg) GetOverrideUuid() bool {
	if m != nil && m.OverrideUuid != nil {
		return *m.OverrideUuid
	}
	return false
}

func (m *VmCreateArg) GetVgaConsole() bool {
	if m != nil && m.VgaConsole != nil {
		return *m.VgaConsole
	}
	return false
}

func (m *VmCreateArg) GetVmGroupUuid() []byte {
	if m != nil {
		return m.VmGroupUuid
	}
	return nil
}

func (m *VmCreateArg) GetVmType() VmConfig_VmType {
	if m != nil && m.VmType != nil {
		return *m.VmType
	}
	return Default_VmCreateArg_VmType
}

func (m *VmCreateArg) GetEnableTimeSync() bool {
	if m != nil && m.EnableTimeSync != nil {
		return *m.EnableTimeSync
	}
	return Default_VmCreateArg_EnableTimeSync
}

func (m *VmCreateArg) GetVmGeneration() uint64 {
	if m != nil && m.VmGeneration != nil {
		return *m.VmGeneration
	}
	return 0
}

func (m *VmCreateArg) GetVmPath() string {
	if m != nil && m.VmPath != nil {
		return *m.VmPath
	}
	return ""
}

func (m *VmCreateArg) GetEnableDynamicMemory() bool {
	if m != nil && m.EnableDynamicMemory != nil {
		return *m.EnableDynamicMemory
	}
	return false
}

func (m *VmCreateArg) GetNumVnumaNodes() uint64 {
	if m != nil && m.NumVnumaNodes != nil {
		return *m.NumVnumaNodes
	}
	return 0
}

func (m *VmCreateArg) GetSerialPortList() []*VmSerialPortConfig {
	if m != nil {
		return m.SerialPortList
	}
	return nil
}

func (m *VmCreateArg) GetPowerStateMechanism() PowerStateMechanism {
	if m != nil && m.PowerStateMechanism != nil {
		return *m.PowerStateMechanism
	}
	return PowerStateMechanism_kHard
}

func (m *VmCreateArg) GetNgtEnableScriptExec() bool {
	if m != nil && m.NgtEnableScriptExec != nil {
		return *m.NgtEnableScriptExec
	}
	return false
}

func (m *VmCreateArg) GetNgtFailOnScriptFailure() bool {
	if m != nil && m.NgtFailOnScriptFailure != nil {
		return *m.NgtFailOnScriptFailure
	}
	return false
}

func (m *VmCreateArg) GetStartAction() AutomaticStartAction_Action {
	if m != nil && m.StartAction != nil {
		return *m.StartAction
	}
	return AutomaticStartAction_kNothing
}

func (m *VmCreateArg) GetStopAction() AutomaticStopAction_Action {
	if m != nil && m.StopAction != nil {
		return *m.StopAction
	}
	return AutomaticStopAction_kTurnOff
}

func (m *VmCreateArg) GetNumThreadsPerCore() uint32 {
	if m != nil && m.NumThreadsPerCore != nil {
		return *m.NumThreadsPerCore
	}
	return 0
}

func (m *VmCreateArg) GetVcpuHardPin() bool {
	if m != nil && m.VcpuHardPin != nil {
		return *m.VcpuHardPin
	}
	return false
}

func (m *VmCreateArg) GetDbIncarnationId() uint64 {
	if m != nil && m.DbIncarnationId != nil {
		return *m.DbIncarnationId
	}
	return 0
}

func (m *VmCreateArg) GetCpuPassthrough() bool {
	if m != nil && m.CpuPassthrough != nil {
		return *m.CpuPassthrough
	}
	return Default_VmCreateArg_CpuPassthrough
}

func (m *VmCreateArg) GetMachineType() string {
	if m != nil && m.MachineType != nil {
		return *m.MachineType
	}
	return Default_VmCreateArg_MachineType
}

func (m *VmCreateArg) GetDisableBranding() bool {
	if m != nil && m.DisableBranding != nil {
		return *m.DisableBranding
	}
	return Default_VmCreateArg_DisableBranding
}

func (m *VmCreateArg) GetDeleteOrphanedVm() bool {
	if m != nil && m.DeleteOrphanedVm != nil {
		return *m.DeleteOrphanedVm
	}
	return false
}

func (m *VmCreateArg) GetSourceVmUuid() []byte {
	if m != nil {
		return m.SourceVmUuid
	}
	return nil
}

func (m *VmCreateArg) GetFromDormantVm() bool {
	if m != nil && m.FromDormantVm != nil {
		return *m.FromDormantVm
	}
	return false
}

func (m *VmCreateArg) GetAllowHotPlug() bool {
	if m != nil && m.AllowHotPlug != nil {
		return *m.AllowHotPlug
	}
	return Default_VmCreateArg_AllowHotPlug
}

type VmCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCreateRet) Reset()         { *m = VmCreateRet{} }
func (m *VmCreateRet) String() string { return proto.CompactTextString(m) }
func (*VmCreateRet) ProtoMessage()    {}
func (*VmCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{7}
}

func (m *VmCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCreateRet.Unmarshal(m, b)
}
func (m *VmCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCreateRet.Marshal(b, m, deterministic)
}
func (m *VmCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCreateRet.Merge(m, src)
}
func (m *VmCreateRet) XXX_Size() int {
	return xxx_messageInfo_VmCreateRet.Size(m)
}
func (m *VmCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCreateRet proto.InternalMessageInfo

func (m *VmCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmCreateTaskRet struct {
	// The hypervisor agnostic Nutanix VM UUID for the created VM. This field
	// will be populated only if the create VM request was successful.
	VmUuid               []byte   `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCreateTaskRet) Reset()         { *m = VmCreateTaskRet{} }
func (m *VmCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmCreateTaskRet) ProtoMessage()    {}
func (*VmCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{8}
}

func (m *VmCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCreateTaskRet.Unmarshal(m, b)
}
func (m *VmCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCreateTaskRet.Merge(m, src)
}
func (m *VmCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmCreateTaskRet.Size(m)
}
func (m *VmCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCreateTaskRet proto.InternalMessageInfo

func (m *VmCreateTaskRet) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

type VmCloneArg struct {
	// Task UUID for task idempotence.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task. This should NOT be set by a client app. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// The source may either be a VM or a snapshot.
	// The source VM UUID.
	SourceVmUuid []byte `protobuf:"bytes,2,opt,name=source_vm_uuid,json=sourceVmUuid" json:"source_vm_uuid,omitempty"`
	// The source snapshot UUID. Only supported for AHV.
	SourceSnapshotUuid []byte `protobuf:"bytes,6,opt,name=source_snapshot_uuid,json=sourceSnapshotUuid" json:"source_snapshot_uuid,omitempty"`
	// Required. Specifications for creating VM clones.
	CloneConfigList []*VmCloneConfig `protobuf:"bytes,3,rep,name=clone_config_list,json=cloneConfigList" json:"clone_config_list,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// For DIAL workflows only.
	// Boolean to denote if there is an existing entity with the specified `uuid`
	// that can be re-used for the current clone request.
	// Conditions when this field is valid:
	//   1. Length of clone_config_list should be one.
	//   2. `uuid` inside clone config is set.
	OverrideUuid         *bool    `protobuf:"varint,7,opt,name=override_uuid,json=overrideUuid" json:"override_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCloneArg) Reset()         { *m = VmCloneArg{} }
func (m *VmCloneArg) String() string { return proto.CompactTextString(m) }
func (*VmCloneArg) ProtoMessage()    {}
func (*VmCloneArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{9}
}

func (m *VmCloneArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCloneArg.Unmarshal(m, b)
}
func (m *VmCloneArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCloneArg.Marshal(b, m, deterministic)
}
func (m *VmCloneArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCloneArg.Merge(m, src)
}
func (m *VmCloneArg) XXX_Size() int {
	return xxx_messageInfo_VmCloneArg.Size(m)
}
func (m *VmCloneArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCloneArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmCloneArg proto.InternalMessageInfo

func (m *VmCloneArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmCloneArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmCloneArg) GetSourceVmUuid() []byte {
	if m != nil {
		return m.SourceVmUuid
	}
	return nil
}

func (m *VmCloneArg) GetSourceSnapshotUuid() []byte {
	if m != nil {
		return m.SourceSnapshotUuid
	}
	return nil
}

func (m *VmCloneArg) GetCloneConfigList() []*VmCloneConfig {
	if m != nil {
		return m.CloneConfigList
	}
	return nil
}

func (m *VmCloneArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmCloneArg) GetOverrideUuid() bool {
	if m != nil && m.OverrideUuid != nil {
		return *m.OverrideUuid
	}
	return false
}

type VmCloneRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmCloneTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCloneRet) Reset()         { *m = VmCloneRet{} }
func (m *VmCloneRet) String() string { return proto.CompactTextString(m) }
func (*VmCloneRet) ProtoMessage()    {}
func (*VmCloneRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{10}
}

func (m *VmCloneRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCloneRet.Unmarshal(m, b)
}
func (m *VmCloneRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCloneRet.Marshal(b, m, deterministic)
}
func (m *VmCloneRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCloneRet.Merge(m, src)
}
func (m *VmCloneRet) XXX_Size() int {
	return xxx_messageInfo_VmCloneRet.Size(m)
}
func (m *VmCloneRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCloneRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCloneRet proto.InternalMessageInfo

func (m *VmCloneRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmCloneTaskRet struct {
	// Hypervisor agnostic UUIDs of VM clones created.
	ResponseList         []*VmCloneTaskRet_VmCloneResponse `protobuf:"bytes,1,rep,name=response_list,json=responseList" json:"response_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *VmCloneTaskRet) Reset()         { *m = VmCloneTaskRet{} }
func (m *VmCloneTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmCloneTaskRet) ProtoMessage()    {}
func (*VmCloneTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{11}
}

func (m *VmCloneTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCloneTaskRet.Unmarshal(m, b)
}
func (m *VmCloneTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCloneTaskRet.Marshal(b, m, deterministic)
}
func (m *VmCloneTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCloneTaskRet.Merge(m, src)
}
func (m *VmCloneTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmCloneTaskRet.Size(m)
}
func (m *VmCloneTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCloneTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCloneTaskRet proto.InternalMessageInfo

func (m *VmCloneTaskRet) GetResponseList() []*VmCloneTaskRet_VmCloneResponse {
	if m != nil {
		return m.ResponseList
	}
	return nil
}

type VmCloneTaskRet_VmCloneResponse struct {
	// An error code indicating whether the RPC was successful.
	ErrorCode *UhuraError_Type `protobuf:"varint,1,opt,name=error_code,json=errorCode,enum=nutanix.uhura.UhuraError_Type" json:"error_code,omitempty"`
	// An optional additional string describing the error, if the RPC was not
	// successful.
	ErrorDetail *string `protobuf:"bytes,2,opt,name=error_detail,json=errorDetail" json:"error_detail,omitempty"`
	// Hypervisor agnostic UUID of the VM clone created
	VmUuid               []byte   `protobuf:"bytes,3,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCloneTaskRet_VmCloneResponse) Reset()         { *m = VmCloneTaskRet_VmCloneResponse{} }
func (m *VmCloneTaskRet_VmCloneResponse) String() string { return proto.CompactTextString(m) }
func (*VmCloneTaskRet_VmCloneResponse) ProtoMessage()    {}
func (*VmCloneTaskRet_VmCloneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{11, 0}
}

func (m *VmCloneTaskRet_VmCloneResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCloneTaskRet_VmCloneResponse.Unmarshal(m, b)
}
func (m *VmCloneTaskRet_VmCloneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCloneTaskRet_VmCloneResponse.Marshal(b, m, deterministic)
}
func (m *VmCloneTaskRet_VmCloneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCloneTaskRet_VmCloneResponse.Merge(m, src)
}
func (m *VmCloneTaskRet_VmCloneResponse) XXX_Size() int {
	return xxx_messageInfo_VmCloneTaskRet_VmCloneResponse.Size(m)
}
func (m *VmCloneTaskRet_VmCloneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCloneTaskRet_VmCloneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VmCloneTaskRet_VmCloneResponse proto.InternalMessageInfo

func (m *VmCloneTaskRet_VmCloneResponse) GetErrorCode() UhuraError_Type {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return UhuraError_kNoError
}

func (m *VmCloneTaskRet_VmCloneResponse) GetErrorDetail() string {
	if m != nil && m.ErrorDetail != nil {
		return *m.ErrorDetail
	}
	return ""
}

func (m *VmCloneTaskRet_VmCloneResponse) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

//-----------------------------------------------------------------------------
// Next id: 44
type VmUpdateArg struct {
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task. This should NOT be set by a client app. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid []byte `protobuf:"bytes,2,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Required. Identifier of the VM to be updated.
	VmUuid []byte `protobuf:"bytes,3,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Name of the virtual machine.
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// Small description about the VM.
	Annotation *string `protobuf:"bytes,5,opt,name=annotation" json:"annotation,omitempty"`
	// Number of vCPUs.
	NumVcpus *uint32 `protobuf:"varint,6,opt,name=num_vcpus,json=numVcpus" json:"num_vcpus,omitempty"`
	// Number of cores per vCPU.
	NumCoresPerVcpu *uint32 `protobuf:"varint,7,opt,name=num_cores_per_vcpu,json=numCoresPerVcpu" json:"num_cores_per_vcpu,omitempty"`
	// Memory size in megabytes.
	MemorySizeMb *uint64 `protobuf:"varint,8,opt,name=memory_size_mb,json=memorySizeMb" json:"memory_size_mb,omitempty"`
	// The boot configuration. Any updates to the boot configuration will be
	// applied during the next VM power cycle.
	BootConfig *VmBootConfig `protobuf:"bytes,9,opt,name=boot_config,json=bootConfig" json:"boot_config,omitempty"`
	// The timezone for the VM's hardware clock. Any updates to the timezone will
	// be applied during the next VM power cycle (but not reset). The default is
	// UTC.
	HwclockTimezone *string `protobuf:"bytes,10,opt,name=hwclock_timezone,json=hwclockTimezone" json:"hwclock_timezone,omitempty"`
	// NOTE: The following fields are applicable only for AHV VMs.
	//
	// The VM logical timestamp. Applicable only for AHV.
	VmLogicalTimestamp *int64 `protobuf:"varint,11,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// Priority for restarting in case of HA event. Applicable only for AHV.
	HaPriority *int64 `protobuf:"varint,12,opt,name=ha_priority,json=haPriority" json:"ha_priority,omitempty"`
	// If set to a non-empty string, this VM should be considered incompatible
	// with DR workflows. Applicable only for AHV.
	//
	// This field is deprecated. It should be exposed in the REST API, but
	// as a hidden parameter. In the future, it will be removed in favor of
	// using tags for identifying service VMs.
	CbrNotCapableReason *string `protobuf:"bytes,13,opt,name=cbr_not_capable_reason,json=cbrNotCapableReason" json:"cbr_not_capable_reason,omitempty"`
	// If set to true, flash mode will be enabled on all vDisks belonging to VM.
	// This is a Nutanix specific feature, not related to any host.
	//
	// Flash mode VM allow admins to override ILM behaviour by ensuring data
	// is always getting served from hot tier.
	FlashModeEnabled *bool `protobuf:"varint,14,opt,name=flash_mode_enabled,json=flashModeEnabled" json:"flash_mode_enabled,omitempty"`
	// VM to Host affinity setting.
	Affinity *Affinity `protobuf:"bytes,15,opt,name=affinity" json:"affinity,omitempty"`
	// Whether to set the the following attribute
	// 'virtual_disk_uuids_disabled_for_flash_mode' for the vm entity.
	SetVirtualDiskUuidsDisabledForFlashMode *bool `protobuf:"varint,19,opt,name=set_virtual_disk_uuids_disabled_for_flash_mode,json=setVirtualDiskUuidsDisabledForFlashMode,def=0" json:"set_virtual_disk_uuids_disabled_for_flash_mode,omitempty"`
	// List of virtual disk UUIDs to be disabled for flash mode.
	VirtualDiskUuidsDisabledForFlashMode [][]byte `protobuf:"bytes,16,rep,name=virtual_disk_uuids_disabled_for_flash_mode,json=virtualDiskUuidsDisabledForFlashMode" json:"virtual_disk_uuids_disabled_for_flash_mode,omitempty"`
	// Marks VM as an agent. Applicable only for AHV.
	AgentVm *bool `protobuf:"varint,17,opt,name=agent_vm,json=agentVm" json:"agent_vm,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,18,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Clear VM-Host affinity rule.
	ClearAffinity *bool `protobuf:"varint,20,opt,name=clear_affinity,json=clearAffinity" json:"clear_affinity,omitempty"`
	// Whether to update the GPU resource configuration.
	UpdateGpuList *bool `protobuf:"varint,21,opt,name=update_gpu_list,json=updateGpuList" json:"update_gpu_list,omitempty"`
	// GPU resources allocated to VM.
	GpuConfigList []*VmGPUConfig `protobuf:"bytes,22,rep,name=gpu_config_list,json=gpuConfigList" json:"gpu_config_list,omitempty"`
	// Additional comma-separated VM specific flags. Only for AHV.
	ExtraFlags []*GenericKeyValuePair `protobuf:"bytes,23,rep,name=extra_flags,json=extraFlags" json:"extra_flags,omitempty"`
	// Applicable only for AHV.
	// Whether or not to have a VGA console.
	VgaConsole *bool `protobuf:"varint,24,opt,name=vga_console,json=vgaConsole" json:"vga_console,omitempty"`
	// UUID of VmGroup that the VM belongs to. Only for AHV.
	VmGroupUuid []byte `protobuf:"bytes,25,opt,name=vm_group_uuid,json=vmGroupUuid" json:"vm_group_uuid,omitempty"`
	// The type of the VM.
	VmType *VmConfig_VmType `protobuf:"varint,26,opt,name=vm_type,json=vmType,enum=nutanix.uhura.VmConfig_VmType,def=1" json:"vm_type,omitempty"`
	// Applicable only for ESX.
	// Whether or not to allow guest time synchronization by host.
	EnableTimeSync *bool `protobuf:"varint,27,opt,name=enable_time_sync,json=enableTimeSync,def=1" json:"enable_time_sync,omitempty"`
	// Unused field.
	// Boolean to denote if dynamic memory needs to be enabled.
	EnableDynamicMemory *bool `protobuf:"varint,28,opt,name=enable_dynamic_memory,json=enableDynamicMemory" json:"enable_dynamic_memory,omitempty"`
	// Unused field.
	StartAction *AutomaticStartAction_Action `protobuf:"varint,29,opt,name=start_action,json=startAction,enum=nutanix.uhura.AutomaticStartAction_Action" json:"start_action,omitempty"`
	// Unused field.
	StopAction *AutomaticStopAction_Action `protobuf:"varint,30,opt,name=stop_action,json=stopAction,enum=nutanix.uhura.AutomaticStopAction_Action" json:"stop_action,omitempty"`
	// The number of vNUMA nodes.
	NumVnumaNodes *uint64 `protobuf:"varint,31,opt,name=num_vnuma_nodes,json=numVnumaNodes" json:"num_vnuma_nodes,omitempty"`
	// Whether to update the serial port configuration.
	UpdateSerialPortList *bool `protobuf:"varint,32,opt,name=update_serial_port_list,json=updateSerialPortList" json:"update_serial_port_list,omitempty"`
	// The new serial port configuration, if update_serial_port_list is True.
	SerialPortList []*VmSerialPortConfig `protobuf:"bytes,33,rep,name=serial_port_list,json=serialPortList" json:"serial_port_list,omitempty"`
	// Indicates how the power state changes.
	PowerStateMechanism *PowerStateMechanism `protobuf:"varint,34,opt,name=power_state_mechanism,json=powerStateMechanism,enum=nutanix.uhura.PowerStateMechanism" json:"power_state_mechanism,omitempty"`
	// Indicates whether to execute set script before ngt shutdown/reboot.
	NgtEnableScriptExec *bool `protobuf:"varint,35,opt,name=ngt_enable_script_exec,json=ngtEnableScriptExec" json:"ngt_enable_script_exec,omitempty"`
	// Indicates whether to abort ngt shutdown/reboot if script fails.
	NgtFailOnScriptFailure *bool `protobuf:"varint,36,opt,name=ngt_fail_on_script_failure,json=ngtFailOnScriptFailure" json:"ngt_fail_on_script_failure,omitempty"`
	// Number of threads per core.
	NumThreadsPerCore *uint32 `protobuf:"varint,37,opt,name=num_threads_per_core,json=numThreadsPerCore" json:"num_threads_per_core,omitempty"`
	// Whether to hard pin vcpus to vcpus.
	VcpuHardPin *bool `protobuf:"varint,38,opt,name=vcpu_hard_pin,json=vcpuHardPin" json:"vcpu_hard_pin,omitempty"`
	// AHV only: whether to pass through the host's CPU features.
	CpuPassthrough *bool `protobuf:"varint,39,opt,name=cpu_passthrough,json=cpuPassthrough" json:"cpu_passthrough,omitempty"`
	// The machine type of this VM.
	MachineType *string `protobuf:"bytes,40,opt,name=machine_type,json=machineType" json:"machine_type,omitempty"`
	// Whether to disable Nutanix branding.
	DisableBranding *bool `protobuf:"varint,41,opt,name=disable_branding,json=disableBranding" json:"disable_branding,omitempty"`
	// Reflects the virtual machine's supported virtual hardware features.
	// Corresponds to physical hardware available on the underlying ESX host.
	// eg: For version 8,version string is "vmx-08".
	HardwareVersion *string `protobuf:"bytes,42,opt,name=hardware_version,json=hardwareVersion" json:"hardware_version,omitempty"`
	// If False, it will prevent users from hot plugging and unplugging of
	// PCI based devices from within VMs and from the hypervisor stack. Although
	// this applies equally for all VMs, it is primarily applicable for Windows
	// based VMs. By default, we allow hot-plugging and unplugging of devices.
	AllowHotPlug         *bool    `protobuf:"varint,43,opt,name=allow_hot_plug,json=allowHotPlug,def=1" json:"allow_hot_plug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateArg) Reset()         { *m = VmUpdateArg{} }
func (m *VmUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VmUpdateArg) ProtoMessage()    {}
func (*VmUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{12}
}

func (m *VmUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateArg.Unmarshal(m, b)
}
func (m *VmUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateArg.Marshal(b, m, deterministic)
}
func (m *VmUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateArg.Merge(m, src)
}
func (m *VmUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VmUpdateArg.Size(m)
}
func (m *VmUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateArg proto.InternalMessageInfo

const Default_VmUpdateArg_VmLogicalTimestamp int64 = -1
const Default_VmUpdateArg_SetVirtualDiskUuidsDisabledForFlashMode bool = false
const Default_VmUpdateArg_VmType VmConfig_VmType = VmConfig_kGuestVM
const Default_VmUpdateArg_EnableTimeSync bool = true
const Default_VmUpdateArg_AllowHotPlug bool = true

func (m *VmUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmUpdateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmUpdateArg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VmUpdateArg) GetAnnotation() string {
	if m != nil && m.Annotation != nil {
		return *m.Annotation
	}
	return ""
}

func (m *VmUpdateArg) GetNumVcpus() uint32 {
	if m != nil && m.NumVcpus != nil {
		return *m.NumVcpus
	}
	return 0
}

func (m *VmUpdateArg) GetNumCoresPerVcpu() uint32 {
	if m != nil && m.NumCoresPerVcpu != nil {
		return *m.NumCoresPerVcpu
	}
	return 0
}

func (m *VmUpdateArg) GetMemorySizeMb() uint64 {
	if m != nil && m.MemorySizeMb != nil {
		return *m.MemorySizeMb
	}
	return 0
}

func (m *VmUpdateArg) GetBootConfig() *VmBootConfig {
	if m != nil {
		return m.BootConfig
	}
	return nil
}

func (m *VmUpdateArg) GetHwclockTimezone() string {
	if m != nil && m.HwclockTimezone != nil {
		return *m.HwclockTimezone
	}
	return ""
}

func (m *VmUpdateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmUpdateArg_VmLogicalTimestamp
}

func (m *VmUpdateArg) GetHaPriority() int64 {
	if m != nil && m.HaPriority != nil {
		return *m.HaPriority
	}
	return 0
}

func (m *VmUpdateArg) GetCbrNotCapableReason() string {
	if m != nil && m.CbrNotCapableReason != nil {
		return *m.CbrNotCapableReason
	}
	return ""
}

func (m *VmUpdateArg) GetFlashModeEnabled() bool {
	if m != nil && m.FlashModeEnabled != nil {
		return *m.FlashModeEnabled
	}
	return false
}

func (m *VmUpdateArg) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *VmUpdateArg) GetSetVirtualDiskUuidsDisabledForFlashMode() bool {
	if m != nil && m.SetVirtualDiskUuidsDisabledForFlashMode != nil {
		return *m.SetVirtualDiskUuidsDisabledForFlashMode
	}
	return Default_VmUpdateArg_SetVirtualDiskUuidsDisabledForFlashMode
}

func (m *VmUpdateArg) GetVirtualDiskUuidsDisabledForFlashMode() [][]byte {
	if m != nil {
		return m.VirtualDiskUuidsDisabledForFlashMode
	}
	return nil
}

func (m *VmUpdateArg) GetAgentVm() bool {
	if m != nil && m.AgentVm != nil {
		return *m.AgentVm
	}
	return false
}

func (m *VmUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmUpdateArg) GetClearAffinity() bool {
	if m != nil && m.ClearAffinity != nil {
		return *m.ClearAffinity
	}
	return false
}

func (m *VmUpdateArg) GetUpdateGpuList() bool {
	if m != nil && m.UpdateGpuList != nil {
		return *m.UpdateGpuList
	}
	return false
}

func (m *VmUpdateArg) GetGpuConfigList() []*VmGPUConfig {
	if m != nil {
		return m.GpuConfigList
	}
	return nil
}

func (m *VmUpdateArg) GetExtraFlags() []*GenericKeyValuePair {
	if m != nil {
		return m.ExtraFlags
	}
	return nil
}

func (m *VmUpdateArg) GetVgaConsole() bool {
	if m != nil && m.VgaConsole != nil {
		return *m.VgaConsole
	}
	return false
}

func (m *VmUpdateArg) GetVmGroupUuid() []byte {
	if m != nil {
		return m.VmGroupUuid
	}
	return nil
}

func (m *VmUpdateArg) GetVmType() VmConfig_VmType {
	if m != nil && m.VmType != nil {
		return *m.VmType
	}
	return Default_VmUpdateArg_VmType
}

func (m *VmUpdateArg) GetEnableTimeSync() bool {
	if m != nil && m.EnableTimeSync != nil {
		return *m.EnableTimeSync
	}
	return Default_VmUpdateArg_EnableTimeSync
}

func (m *VmUpdateArg) GetEnableDynamicMemory() bool {
	if m != nil && m.EnableDynamicMemory != nil {
		return *m.EnableDynamicMemory
	}
	return false
}

func (m *VmUpdateArg) GetStartAction() AutomaticStartAction_Action {
	if m != nil && m.StartAction != nil {
		return *m.StartAction
	}
	return AutomaticStartAction_kNothing
}

func (m *VmUpdateArg) GetStopAction() AutomaticStopAction_Action {
	if m != nil && m.StopAction != nil {
		return *m.StopAction
	}
	return AutomaticStopAction_kTurnOff
}

func (m *VmUpdateArg) GetNumVnumaNodes() uint64 {
	if m != nil && m.NumVnumaNodes != nil {
		return *m.NumVnumaNodes
	}
	return 0
}

func (m *VmUpdateArg) GetUpdateSerialPortList() bool {
	if m != nil && m.UpdateSerialPortList != nil {
		return *m.UpdateSerialPortList
	}
	return false
}

func (m *VmUpdateArg) GetSerialPortList() []*VmSerialPortConfig {
	if m != nil {
		return m.SerialPortList
	}
	return nil
}

func (m *VmUpdateArg) GetPowerStateMechanism() PowerStateMechanism {
	if m != nil && m.PowerStateMechanism != nil {
		return *m.PowerStateMechanism
	}
	return PowerStateMechanism_kHard
}

func (m *VmUpdateArg) GetNgtEnableScriptExec() bool {
	if m != nil && m.NgtEnableScriptExec != nil {
		return *m.NgtEnableScriptExec
	}
	return false
}

func (m *VmUpdateArg) GetNgtFailOnScriptFailure() bool {
	if m != nil && m.NgtFailOnScriptFailure != nil {
		return *m.NgtFailOnScriptFailure
	}
	return false
}

func (m *VmUpdateArg) GetNumThreadsPerCore() uint32 {
	if m != nil && m.NumThreadsPerCore != nil {
		return *m.NumThreadsPerCore
	}
	return 0
}

func (m *VmUpdateArg) GetVcpuHardPin() bool {
	if m != nil && m.VcpuHardPin != nil {
		return *m.VcpuHardPin
	}
	return false
}

func (m *VmUpdateArg) GetCpuPassthrough() bool {
	if m != nil && m.CpuPassthrough != nil {
		return *m.CpuPassthrough
	}
	return false
}

func (m *VmUpdateArg) GetMachineType() string {
	if m != nil && m.MachineType != nil {
		return *m.MachineType
	}
	return ""
}

func (m *VmUpdateArg) GetDisableBranding() bool {
	if m != nil && m.DisableBranding != nil {
		return *m.DisableBranding
	}
	return false
}

func (m *VmUpdateArg) GetHardwareVersion() string {
	if m != nil && m.HardwareVersion != nil {
		return *m.HardwareVersion
	}
	return ""
}

func (m *VmUpdateArg) GetAllowHotPlug() bool {
	if m != nil && m.AllowHotPlug != nil {
		return *m.AllowHotPlug
	}
	return Default_VmUpdateArg_AllowHotPlug
}

type VmUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateRet) Reset()         { *m = VmUpdateRet{} }
func (m *VmUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmUpdateRet) ProtoMessage()    {}
func (*VmUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{13}
}

func (m *VmUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateRet.Unmarshal(m, b)
}
func (m *VmUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateRet.Merge(m, src)
}
func (m *VmUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmUpdateRet.Size(m)
}
func (m *VmUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateRet proto.InternalMessageInfo

func (m *VmUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateTaskRet) Reset()         { *m = VmUpdateTaskRet{} }
func (m *VmUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmUpdateTaskRet) ProtoMessage()    {}
func (*VmUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{14}
}

func (m *VmUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateTaskRet.Merge(m, src)
}
func (m *VmUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmUpdateTaskRet.Size(m)
}
func (m *VmUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateTaskRet proto.InternalMessageInfo

//-----------------------------------------------------------------------------
// Next id: 4
type VmUpgradeArg struct {
	// Required. Identifier of the VM to be upgraded.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Hardware version to which the VM needs to be upgraded to.
	// Corresponds to physical hardware available on the underlying ESX host.
	// eg: For version 8,version string is "vmx-08".
	// Refer: https://kb.vmware.com/s/article/1010675
	HardwareVersion *string `protobuf:"bytes,2,opt,name=hardware_version,json=hardwareVersion" json:"hardware_version,omitempty"`
	// Parent task. This should NOT be set by a client app. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid       []byte   `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpgradeArg) Reset()         { *m = VmUpgradeArg{} }
func (m *VmUpgradeArg) String() string { return proto.CompactTextString(m) }
func (*VmUpgradeArg) ProtoMessage()    {}
func (*VmUpgradeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{15}
}

func (m *VmUpgradeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpgradeArg.Unmarshal(m, b)
}
func (m *VmUpgradeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpgradeArg.Marshal(b, m, deterministic)
}
func (m *VmUpgradeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpgradeArg.Merge(m, src)
}
func (m *VmUpgradeArg) XXX_Size() int {
	return xxx_messageInfo_VmUpgradeArg.Size(m)
}
func (m *VmUpgradeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpgradeArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpgradeArg proto.InternalMessageInfo

func (m *VmUpgradeArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmUpgradeArg) GetHardwareVersion() string {
	if m != nil && m.HardwareVersion != nil {
		return *m.HardwareVersion
	}
	return ""
}

func (m *VmUpgradeArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type VmUpgradeRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmUpgradeTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpgradeRet) Reset()         { *m = VmUpgradeRet{} }
func (m *VmUpgradeRet) String() string { return proto.CompactTextString(m) }
func (*VmUpgradeRet) ProtoMessage()    {}
func (*VmUpgradeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{16}
}

func (m *VmUpgradeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpgradeRet.Unmarshal(m, b)
}
func (m *VmUpgradeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpgradeRet.Marshal(b, m, deterministic)
}
func (m *VmUpgradeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpgradeRet.Merge(m, src)
}
func (m *VmUpgradeRet) XXX_Size() int {
	return xxx_messageInfo_VmUpgradeRet.Size(m)
}
func (m *VmUpgradeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpgradeRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpgradeRet proto.InternalMessageInfo

func (m *VmUpgradeRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmUpgradeTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpgradeTaskRet) Reset()         { *m = VmUpgradeTaskRet{} }
func (m *VmUpgradeTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmUpgradeTaskRet) ProtoMessage()    {}
func (*VmUpgradeTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{17}
}

func (m *VmUpgradeTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpgradeTaskRet.Unmarshal(m, b)
}
func (m *VmUpgradeTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpgradeTaskRet.Marshal(b, m, deterministic)
}
func (m *VmUpgradeTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpgradeTaskRet.Merge(m, src)
}
func (m *VmUpgradeTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmUpgradeTaskRet.Size(m)
}
func (m *VmUpgradeTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpgradeTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpgradeTaskRet proto.InternalMessageInfo

type VmChangePowerStateArg struct {
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task. This should NOT be set by a client app. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid []byte `protobuf:"bytes,2,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Required. Identifier of the VM whose power state is to be changed.
	VmUuid []byte `protobuf:"bytes,3,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The desired state transition.
	Transition *VmStateTransition_Transition `protobuf:"varint,4,opt,name=transition,enum=nutanix.uhura.VmStateTransition_Transition" json:"transition,omitempty"`
	// NOTE: The following fields are applicable only for AHV VMs.
	//
	// The VM logical timestamp. Applicable only for AHV.
	VmLogicalTimestamp *int64 `protobuf:"varint,5,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// Boolean that is only used when we power cycle that indicates when we power
	// the VM back on the VM should be powered on a different host. Applicable
	// only for AHV.
	ChangeHost *bool `protobuf:"varint,6,opt,name=change_host,json=changeHost" json:"change_host,omitempty"`
	// Explicit host UUID on which to power on the VM. This parameter is only
	// honored for kPowerOn, or kPowerCycle when change_host is also set.
	// Applicable only for AHV.
	HostUuid []byte `protobuf:"bytes,7,opt,name=host_uuid,json=hostUuid" json:"host_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,8,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Enable script execution for guest power ops. Specific to AHV.
	EnableScriptExec *bool `protobuf:"varint,9,opt,name=enable_script_exec,json=enableScriptExec" json:"enable_script_exec,omitempty"`
	// Fail guest ops on script failure. Specific to AHV.
	FailOnScriptFailure  *bool    `protobuf:"varint,10,opt,name=fail_on_script_failure,json=failOnScriptFailure" json:"fail_on_script_failure,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmChangePowerStateArg) Reset()         { *m = VmChangePowerStateArg{} }
func (m *VmChangePowerStateArg) String() string { return proto.CompactTextString(m) }
func (*VmChangePowerStateArg) ProtoMessage()    {}
func (*VmChangePowerStateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{18}
}

func (m *VmChangePowerStateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmChangePowerStateArg.Unmarshal(m, b)
}
func (m *VmChangePowerStateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmChangePowerStateArg.Marshal(b, m, deterministic)
}
func (m *VmChangePowerStateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmChangePowerStateArg.Merge(m, src)
}
func (m *VmChangePowerStateArg) XXX_Size() int {
	return xxx_messageInfo_VmChangePowerStateArg.Size(m)
}
func (m *VmChangePowerStateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmChangePowerStateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmChangePowerStateArg proto.InternalMessageInfo

const Default_VmChangePowerStateArg_VmLogicalTimestamp int64 = -1

func (m *VmChangePowerStateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmChangePowerStateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmChangePowerStateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmChangePowerStateArg) GetTransition() VmStateTransition_Transition {
	if m != nil && m.Transition != nil {
		return *m.Transition
	}
	return VmStateTransition_kPowerOn
}

func (m *VmChangePowerStateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmChangePowerStateArg_VmLogicalTimestamp
}

func (m *VmChangePowerStateArg) GetChangeHost() bool {
	if m != nil && m.ChangeHost != nil {
		return *m.ChangeHost
	}
	return false
}

func (m *VmChangePowerStateArg) GetHostUuid() []byte {
	if m != nil {
		return m.HostUuid
	}
	return nil
}

func (m *VmChangePowerStateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmChangePowerStateArg) GetEnableScriptExec() bool {
	if m != nil && m.EnableScriptExec != nil {
		return *m.EnableScriptExec
	}
	return false
}

func (m *VmChangePowerStateArg) GetFailOnScriptFailure() bool {
	if m != nil && m.FailOnScriptFailure != nil {
		return *m.FailOnScriptFailure
	}
	return false
}

type VmChangePowerStateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmChangePowerStateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmChangePowerStateRet) Reset()         { *m = VmChangePowerStateRet{} }
func (m *VmChangePowerStateRet) String() string { return proto.CompactTextString(m) }
func (*VmChangePowerStateRet) ProtoMessage()    {}
func (*VmChangePowerStateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{19}
}

func (m *VmChangePowerStateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmChangePowerStateRet.Unmarshal(m, b)
}
func (m *VmChangePowerStateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmChangePowerStateRet.Marshal(b, m, deterministic)
}
func (m *VmChangePowerStateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmChangePowerStateRet.Merge(m, src)
}
func (m *VmChangePowerStateRet) XXX_Size() int {
	return xxx_messageInfo_VmChangePowerStateRet.Size(m)
}
func (m *VmChangePowerStateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmChangePowerStateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmChangePowerStateRet proto.InternalMessageInfo

func (m *VmChangePowerStateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmChangePowerStateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmChangePowerStateTaskRet) Reset()         { *m = VmChangePowerStateTaskRet{} }
func (m *VmChangePowerStateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmChangePowerStateTaskRet) ProtoMessage()    {}
func (*VmChangePowerStateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{20}
}

func (m *VmChangePowerStateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmChangePowerStateTaskRet.Unmarshal(m, b)
}
func (m *VmChangePowerStateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmChangePowerStateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmChangePowerStateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmChangePowerStateTaskRet.Merge(m, src)
}
func (m *VmChangePowerStateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmChangePowerStateTaskRet.Size(m)
}
func (m *VmChangePowerStateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmChangePowerStateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmChangePowerStateTaskRet proto.InternalMessageInfo

type VmGuestToolsArg struct {
	// Required. Identifier of the VM on which tools will be mounted/unmounted.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Required. Field to denote the kind of guest tools operation.
	ToolsOp *GuestToolsOperation_Operation `protobuf:"varint,2,opt,name=tools_op,json=toolsOp,enum=nutanix.uhura.GuestToolsOperation_Operation" json:"tools_op,omitempty"`
	// Optional. Override the Guest OS CDROM lock.
	OverrideGuest *bool `protobuf:"varint,3,opt,name=override_guest,json=overrideGuest,def=1" json:"override_guest,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task. This should NOT be set by a client app. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGuestToolsArg) Reset()         { *m = VmGuestToolsArg{} }
func (m *VmGuestToolsArg) String() string { return proto.CompactTextString(m) }
func (*VmGuestToolsArg) ProtoMessage()    {}
func (*VmGuestToolsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{21}
}

func (m *VmGuestToolsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGuestToolsArg.Unmarshal(m, b)
}
func (m *VmGuestToolsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGuestToolsArg.Marshal(b, m, deterministic)
}
func (m *VmGuestToolsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGuestToolsArg.Merge(m, src)
}
func (m *VmGuestToolsArg) XXX_Size() int {
	return xxx_messageInfo_VmGuestToolsArg.Size(m)
}
func (m *VmGuestToolsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGuestToolsArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGuestToolsArg proto.InternalMessageInfo

const Default_VmGuestToolsArg_OverrideGuest bool = true

func (m *VmGuestToolsArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmGuestToolsArg) GetToolsOp() GuestToolsOperation_Operation {
	if m != nil && m.ToolsOp != nil {
		return *m.ToolsOp
	}
	return GuestToolsOperation_kMount
}

func (m *VmGuestToolsArg) GetOverrideGuest() bool {
	if m != nil && m.OverrideGuest != nil {
		return *m.OverrideGuest
	}
	return Default_VmGuestToolsArg_OverrideGuest
}

func (m *VmGuestToolsArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmGuestToolsArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmGuestToolsArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmGuestToolsRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmGuestToolsTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGuestToolsRet) Reset()         { *m = VmGuestToolsRet{} }
func (m *VmGuestToolsRet) String() string { return proto.CompactTextString(m) }
func (*VmGuestToolsRet) ProtoMessage()    {}
func (*VmGuestToolsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{22}
}

func (m *VmGuestToolsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGuestToolsRet.Unmarshal(m, b)
}
func (m *VmGuestToolsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGuestToolsRet.Marshal(b, m, deterministic)
}
func (m *VmGuestToolsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGuestToolsRet.Merge(m, src)
}
func (m *VmGuestToolsRet) XXX_Size() int {
	return xxx_messageInfo_VmGuestToolsRet.Size(m)
}
func (m *VmGuestToolsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGuestToolsRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGuestToolsRet proto.InternalMessageInfo

func (m *VmGuestToolsRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmGuestToolsTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGuestToolsTaskRet) Reset()         { *m = VmGuestToolsTaskRet{} }
func (m *VmGuestToolsTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmGuestToolsTaskRet) ProtoMessage()    {}
func (*VmGuestToolsTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{23}
}

func (m *VmGuestToolsTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGuestToolsTaskRet.Unmarshal(m, b)
}
func (m *VmGuestToolsTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGuestToolsTaskRet.Marshal(b, m, deterministic)
}
func (m *VmGuestToolsTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGuestToolsTaskRet.Merge(m, src)
}
func (m *VmGuestToolsTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmGuestToolsTaskRet.Size(m)
}
func (m *VmGuestToolsTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGuestToolsTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGuestToolsTaskRet proto.InternalMessageInfo

type VmDeleteArg struct {
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task. This should NOT be set by a client app. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid []byte `protobuf:"bytes,2,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Required. Identifier of VM to be deleted.
	VmUuid []byte `protobuf:"bytes,3,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	// Applicable only for AHV.
	VmLogicalTimestamp *int64 `protobuf:"varint,4,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// Whether to also delete all snapshots.
	DeleteSnapshots *bool `protobuf:"varint,5,opt,name=delete_snapshots,json=deleteSnapshots" json:"delete_snapshots,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDeleteArg) Reset()         { *m = VmDeleteArg{} }
func (m *VmDeleteArg) String() string { return proto.CompactTextString(m) }
func (*VmDeleteArg) ProtoMessage()    {}
func (*VmDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{24}
}

func (m *VmDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDeleteArg.Unmarshal(m, b)
}
func (m *VmDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDeleteArg.Marshal(b, m, deterministic)
}
func (m *VmDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDeleteArg.Merge(m, src)
}
func (m *VmDeleteArg) XXX_Size() int {
	return xxx_messageInfo_VmDeleteArg.Size(m)
}
func (m *VmDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDeleteArg proto.InternalMessageInfo

const Default_VmDeleteArg_VmLogicalTimestamp int64 = -1

func (m *VmDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmDeleteArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmDeleteArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmDeleteArg_VmLogicalTimestamp
}

func (m *VmDeleteArg) GetDeleteSnapshots() bool {
	if m != nil && m.DeleteSnapshots != nil {
		return *m.DeleteSnapshots
	}
	return false
}

func (m *VmDeleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmDeleteRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDeleteRet) Reset()         { *m = VmDeleteRet{} }
func (m *VmDeleteRet) String() string { return proto.CompactTextString(m) }
func (*VmDeleteRet) ProtoMessage()    {}
func (*VmDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{25}
}

func (m *VmDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDeleteRet.Unmarshal(m, b)
}
func (m *VmDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDeleteRet.Marshal(b, m, deterministic)
}
func (m *VmDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDeleteRet.Merge(m, src)
}
func (m *VmDeleteRet) XXX_Size() int {
	return xxx_messageInfo_VmDeleteRet.Size(m)
}
func (m *VmDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDeleteRet proto.InternalMessageInfo

func (m *VmDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmDeleteTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDeleteTaskRet) Reset()         { *m = VmDeleteTaskRet{} }
func (m *VmDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmDeleteTaskRet) ProtoMessage()    {}
func (*VmDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{26}
}

func (m *VmDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDeleteTaskRet.Unmarshal(m, b)
}
func (m *VmDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *VmDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDeleteTaskRet.Merge(m, src)
}
func (m *VmDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmDeleteTaskRet.Size(m)
}
func (m *VmDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDeleteTaskRet proto.InternalMessageInfo

type VmGetArg struct {
	// List of VM UUIDs. If none is specified, then return info for all VMs
	// for given hypervisor type. Only one of the fields vm_uuid_list or
	// hypervisor_type needs to be provided to fetch VMs.
	VmUuidList [][]byte `protobuf:"bytes,1,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	// If set to true, return proto will also contain the VM's virtual disk and
	// CD information. Please note that setting this field to true might make
	// the RPC consume more time.
	IncludeVdiskConfig *bool `protobuf:"varint,2,opt,name=include_vdisk_config,json=includeVdiskConfig,def=0" json:"include_vdisk_config,omitempty"`
	// If set to true, return proto will also contain the VM's NIC information.
	// Please note that setting this field to true might make the RPC consume
	// more time.
	IncludeNicConfig *bool `protobuf:"varint,3,opt,name=include_nic_config,json=includeNicConfig,def=0" json:"include_nic_config,omitempty"`
	// Whether to include cvm or not in VmGet All. This field won't be honoured if
	// specific VM UUID's are provided in 'vm_uuid_list'. Valid only for ESX.
	IncludeCvm *bool `protobuf:"varint,4,opt,name=include_cvm,json=includeCvm,def=0" json:"include_cvm,omitempty"`
	// Hypervisor type.
	// Only one of the fields vm_uuid_list or hypervisor_type needs to be
	// provided to fetch VMs.
	HypervisorType *config.ConfigurationProto_ManagementServer_HypervisorType `protobuf:"varint,5,opt,name=hypervisor_type,json=hypervisorType,enum=nutanix.zeus.ConfigurationProto_ManagementServer_HypervisorType" json:"hypervisor_type,omitempty"`
	// List of the UUIDs of the containers. When specified, the result will
	// include only those virtual machines that use any of the specified
	// containers. Valid only in the case of ESXi.
	ContainerUuidList [][]byte `protobuf:"bytes,6,rep,name=container_uuid_list,json=containerUuidList" json:"container_uuid_list,omitempty"`
	// If set to true, return proto will also contain the VM's complete config
	// information from its configuration file present on hypervisor (e.g. *.vmx).
	// As of now it is valid only for ESX.
	IncludeRawVmConfig *bool `protobuf:"varint,7,opt,name=include_raw_vm_config,json=includeRawVmConfig,def=0" json:"include_raw_vm_config,omitempty"`
	// If set to true, return proto will also contain a bool which would tell if
	// some task in the VM is in progress, or is in pending state. Currently
	// valid only for ESX.
	IncludeIsVmTaskInProgress *bool    `protobuf:"varint,8,opt,name=include_is_vm_task_in_progress,json=includeIsVmTaskInProgress,def=0" json:"include_is_vm_task_in_progress,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *VmGetArg) Reset()         { *m = VmGetArg{} }
func (m *VmGetArg) String() string { return proto.CompactTextString(m) }
func (*VmGetArg) ProtoMessage()    {}
func (*VmGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{27}
}

func (m *VmGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGetArg.Unmarshal(m, b)
}
func (m *VmGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGetArg.Marshal(b, m, deterministic)
}
func (m *VmGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGetArg.Merge(m, src)
}
func (m *VmGetArg) XXX_Size() int {
	return xxx_messageInfo_VmGetArg.Size(m)
}
func (m *VmGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGetArg proto.InternalMessageInfo

const Default_VmGetArg_IncludeVdiskConfig bool = false
const Default_VmGetArg_IncludeNicConfig bool = false
const Default_VmGetArg_IncludeCvm bool = false
const Default_VmGetArg_IncludeRawVmConfig bool = false
const Default_VmGetArg_IncludeIsVmTaskInProgress bool = false

func (m *VmGetArg) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

func (m *VmGetArg) GetIncludeVdiskConfig() bool {
	if m != nil && m.IncludeVdiskConfig != nil {
		return *m.IncludeVdiskConfig
	}
	return Default_VmGetArg_IncludeVdiskConfig
}

func (m *VmGetArg) GetIncludeNicConfig() bool {
	if m != nil && m.IncludeNicConfig != nil {
		return *m.IncludeNicConfig
	}
	return Default_VmGetArg_IncludeNicConfig
}

func (m *VmGetArg) GetIncludeCvm() bool {
	if m != nil && m.IncludeCvm != nil {
		return *m.IncludeCvm
	}
	return Default_VmGetArg_IncludeCvm
}

func (m *VmGetArg) GetHypervisorType() config.ConfigurationProto_ManagementServer_HypervisorType {
	if m != nil && m.HypervisorType != nil {
		return *m.HypervisorType
	}
	return config.ConfigurationProto_ManagementServer_kVMware
}

func (m *VmGetArg) GetContainerUuidList() [][]byte {
	if m != nil {
		return m.ContainerUuidList
	}
	return nil
}

func (m *VmGetArg) GetIncludeRawVmConfig() bool {
	if m != nil && m.IncludeRawVmConfig != nil {
		return *m.IncludeRawVmConfig
	}
	return Default_VmGetArg_IncludeRawVmConfig
}

func (m *VmGetArg) GetIncludeIsVmTaskInProgress() bool {
	if m != nil && m.IncludeIsVmTaskInProgress != nil {
		return *m.IncludeIsVmTaskInProgress
	}
	return Default_VmGetArg_IncludeIsVmTaskInProgress
}

type VmGetRet struct {
	// List of VM infos obtained successfully. No specific ordering is guaranteed
	// in the list. Clients should check the vm_uuid in each 'vm_info_list'
	// element to do their respective mapping.
	VmInfoList           []*VmInfo `protobuf:"bytes,1,rep,name=vm_info_list,json=vmInfoList" json:"vm_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VmGetRet) Reset()         { *m = VmGetRet{} }
func (m *VmGetRet) String() string { return proto.CompactTextString(m) }
func (*VmGetRet) ProtoMessage()    {}
func (*VmGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{28}
}

func (m *VmGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGetRet.Unmarshal(m, b)
}
func (m *VmGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGetRet.Marshal(b, m, deterministic)
}
func (m *VmGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGetRet.Merge(m, src)
}
func (m *VmGetRet) XXX_Size() int {
	return xxx_messageInfo_VmGetRet.Size(m)
}
func (m *VmGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGetRet proto.InternalMessageInfo

func (m *VmGetRet) GetVmInfoList() []*VmInfo {
	if m != nil {
		return m.VmInfoList
	}
	return nil
}

type VmDiskAttachArg struct {
	// Task UUID for task idempotence.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,6,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// Parent task. This should NOT be set by a client app. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Required. UUID of the VM to which to attach.
	VmUuid []byte `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Required. Information about the virtual disk or CD-ROM to be attached.
	// Only the new disk(s) specifications are to be provided.
	DiskList []*VmDiskConfig `protobuf:"bytes,3,rep,name=disk_list,json=diskList" json:"disk_list,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskAttachArg) Reset()         { *m = VmDiskAttachArg{} }
func (m *VmDiskAttachArg) String() string { return proto.CompactTextString(m) }
func (*VmDiskAttachArg) ProtoMessage()    {}
func (*VmDiskAttachArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{29}
}

func (m *VmDiskAttachArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskAttachArg.Unmarshal(m, b)
}
func (m *VmDiskAttachArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskAttachArg.Marshal(b, m, deterministic)
}
func (m *VmDiskAttachArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskAttachArg.Merge(m, src)
}
func (m *VmDiskAttachArg) XXX_Size() int {
	return xxx_messageInfo_VmDiskAttachArg.Size(m)
}
func (m *VmDiskAttachArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskAttachArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskAttachArg proto.InternalMessageInfo

const Default_VmDiskAttachArg_VmLogicalTimestamp int64 = -1

func (m *VmDiskAttachArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmDiskAttachArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmDiskAttachArg_VmLogicalTimestamp
}

func (m *VmDiskAttachArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmDiskAttachArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmDiskAttachArg) GetDiskList() []*VmDiskConfig {
	if m != nil {
		return m.DiskList
	}
	return nil
}

func (m *VmDiskAttachArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmDiskAttachRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmDiskAttachTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskAttachRet) Reset()         { *m = VmDiskAttachRet{} }
func (m *VmDiskAttachRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskAttachRet) ProtoMessage()    {}
func (*VmDiskAttachRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{30}
}

func (m *VmDiskAttachRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskAttachRet.Unmarshal(m, b)
}
func (m *VmDiskAttachRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskAttachRet.Marshal(b, m, deterministic)
}
func (m *VmDiskAttachRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskAttachRet.Merge(m, src)
}
func (m *VmDiskAttachRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskAttachRet.Size(m)
}
func (m *VmDiskAttachRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskAttachRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskAttachRet proto.InternalMessageInfo

func (m *VmDiskAttachRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmDiskAttachTaskRet struct {
	// Description of the storage device attached in this request. This field
	// will be populated only if the attach VM request was successful.
	DiskList             *VmDiskInfo `protobuf:"bytes,1,opt,name=disk_list,json=diskList" json:"disk_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VmDiskAttachTaskRet) Reset()         { *m = VmDiskAttachTaskRet{} }
func (m *VmDiskAttachTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskAttachTaskRet) ProtoMessage()    {}
func (*VmDiskAttachTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{31}
}

func (m *VmDiskAttachTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskAttachTaskRet.Unmarshal(m, b)
}
func (m *VmDiskAttachTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskAttachTaskRet.Marshal(b, m, deterministic)
}
func (m *VmDiskAttachTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskAttachTaskRet.Merge(m, src)
}
func (m *VmDiskAttachTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskAttachTaskRet.Size(m)
}
func (m *VmDiskAttachTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskAttachTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskAttachTaskRet proto.InternalMessageInfo

func (m *VmDiskAttachTaskRet) GetDiskList() *VmDiskInfo {
	if m != nil {
		return m.DiskList
	}
	return nil
}

type VmDiskDetachArg struct {
	// Task UUID for task idempotence.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,6,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// Parent task. This should NOT be set by a client app. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Required. UUID of the VM from which to detach.
	VmUuid []byte `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Required. Information about the virtual disk or CD-ROM to be detached.
	DiskList []*VmDiskInfo `protobuf:"bytes,3,rep,name=disk_list,json=diskList" json:"disk_list,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskDetachArg) Reset()         { *m = VmDiskDetachArg{} }
func (m *VmDiskDetachArg) String() string { return proto.CompactTextString(m) }
func (*VmDiskDetachArg) ProtoMessage()    {}
func (*VmDiskDetachArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{32}
}

func (m *VmDiskDetachArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskDetachArg.Unmarshal(m, b)
}
func (m *VmDiskDetachArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskDetachArg.Marshal(b, m, deterministic)
}
func (m *VmDiskDetachArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskDetachArg.Merge(m, src)
}
func (m *VmDiskDetachArg) XXX_Size() int {
	return xxx_messageInfo_VmDiskDetachArg.Size(m)
}
func (m *VmDiskDetachArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskDetachArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskDetachArg proto.InternalMessageInfo

const Default_VmDiskDetachArg_VmLogicalTimestamp int64 = -1

func (m *VmDiskDetachArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmDiskDetachArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmDiskDetachArg_VmLogicalTimestamp
}

func (m *VmDiskDetachArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmDiskDetachArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmDiskDetachArg) GetDiskList() []*VmDiskInfo {
	if m != nil {
		return m.DiskList
	}
	return nil
}

func (m *VmDiskDetachArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmDiskDetachRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmDiskDetachTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskDetachRet) Reset()         { *m = VmDiskDetachRet{} }
func (m *VmDiskDetachRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskDetachRet) ProtoMessage()    {}
func (*VmDiskDetachRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{33}
}

func (m *VmDiskDetachRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskDetachRet.Unmarshal(m, b)
}
func (m *VmDiskDetachRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskDetachRet.Marshal(b, m, deterministic)
}
func (m *VmDiskDetachRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskDetachRet.Merge(m, src)
}
func (m *VmDiskDetachRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskDetachRet.Size(m)
}
func (m *VmDiskDetachRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskDetachRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskDetachRet proto.InternalMessageInfo

func (m *VmDiskDetachRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmDiskDetachTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskDetachTaskRet) Reset()         { *m = VmDiskDetachTaskRet{} }
func (m *VmDiskDetachTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskDetachTaskRet) ProtoMessage()    {}
func (*VmDiskDetachTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{34}
}

func (m *VmDiskDetachTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskDetachTaskRet.Unmarshal(m, b)
}
func (m *VmDiskDetachTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskDetachTaskRet.Marshal(b, m, deterministic)
}
func (m *VmDiskDetachTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskDetachTaskRet.Merge(m, src)
}
func (m *VmDiskDetachTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskDetachTaskRet.Size(m)
}
func (m *VmDiskDetachTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskDetachTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskDetachTaskRet proto.InternalMessageInfo

type VmDiskUpdateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// A list of disks to update.
	UpdateList []*VmDiskUpdateArg_VmDiskUpdateConfig `protobuf:"bytes,3,rep,name=update_list,json=updateList" json:"update_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Optional, applicable only for ESX for IDE devices.
	// Override the Guest OS CDROM lock.
	OverrideGuest *bool `protobuf:"varint,7,opt,name=override_guest,json=overrideGuest,def=1" json:"override_guest,omitempty"`
	// Optional, to skip NGT ISO mounted check which forwards request to NGT.
	SkipNgtIsoMountedCheck *bool    `protobuf:"varint,8,opt,name=skip_ngt_iso_mounted_check,json=skipNgtIsoMountedCheck" json:"skip_ngt_iso_mounted_check,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *VmDiskUpdateArg) Reset()         { *m = VmDiskUpdateArg{} }
func (m *VmDiskUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VmDiskUpdateArg) ProtoMessage()    {}
func (*VmDiskUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{35}
}

func (m *VmDiskUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskUpdateArg.Unmarshal(m, b)
}
func (m *VmDiskUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskUpdateArg.Marshal(b, m, deterministic)
}
func (m *VmDiskUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskUpdateArg.Merge(m, src)
}
func (m *VmDiskUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VmDiskUpdateArg.Size(m)
}
func (m *VmDiskUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskUpdateArg proto.InternalMessageInfo

const Default_VmDiskUpdateArg_VmLogicalTimestamp int64 = -1
const Default_VmDiskUpdateArg_OverrideGuest bool = true

func (m *VmDiskUpdateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmDiskUpdateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmDiskUpdateArg_VmLogicalTimestamp
}

func (m *VmDiskUpdateArg) GetUpdateList() []*VmDiskUpdateArg_VmDiskUpdateConfig {
	if m != nil {
		return m.UpdateList
	}
	return nil
}

func (m *VmDiskUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmDiskUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmDiskUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmDiskUpdateArg) GetOverrideGuest() bool {
	if m != nil && m.OverrideGuest != nil {
		return *m.OverrideGuest
	}
	return Default_VmDiskUpdateArg_OverrideGuest
}

func (m *VmDiskUpdateArg) GetSkipNgtIsoMountedCheck() bool {
	if m != nil && m.SkipNgtIsoMountedCheck != nil {
		return *m.SkipNgtIsoMountedCheck
	}
	return false
}

type VmDiskUpdateArg_VmDiskUpdateConfig struct {
	// The disk address.
	DiskAddr *VmDiskAddress `protobuf:"bytes,1,opt,name=disk_addr,json=diskAddr" json:"disk_addr,omitempty"`
	// The new disk config.
	Config *VmDiskConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	// New disk size in bytes. Only one of new_size and config must be provided.
	NewSize              *uint64  `protobuf:"varint,3,opt,name=new_size,json=newSize" json:"new_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskUpdateArg_VmDiskUpdateConfig) Reset()         { *m = VmDiskUpdateArg_VmDiskUpdateConfig{} }
func (m *VmDiskUpdateArg_VmDiskUpdateConfig) String() string { return proto.CompactTextString(m) }
func (*VmDiskUpdateArg_VmDiskUpdateConfig) ProtoMessage()    {}
func (*VmDiskUpdateArg_VmDiskUpdateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{35, 0}
}

func (m *VmDiskUpdateArg_VmDiskUpdateConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateConfig.Unmarshal(m, b)
}
func (m *VmDiskUpdateArg_VmDiskUpdateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateConfig.Marshal(b, m, deterministic)
}
func (m *VmDiskUpdateArg_VmDiskUpdateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateConfig.Merge(m, src)
}
func (m *VmDiskUpdateArg_VmDiskUpdateConfig) XXX_Size() int {
	return xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateConfig.Size(m)
}
func (m *VmDiskUpdateArg_VmDiskUpdateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskUpdateArg_VmDiskUpdateConfig proto.InternalMessageInfo

func (m *VmDiskUpdateArg_VmDiskUpdateConfig) GetDiskAddr() *VmDiskAddress {
	if m != nil {
		return m.DiskAddr
	}
	return nil
}

func (m *VmDiskUpdateArg_VmDiskUpdateConfig) GetConfig() *VmDiskConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *VmDiskUpdateArg_VmDiskUpdateConfig) GetNewSize() uint64 {
	if m != nil && m.NewSize != nil {
		return *m.NewSize
	}
	return 0
}

type VmDiskUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmDiskUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDiskUpdateRet) Reset()         { *m = VmDiskUpdateRet{} }
func (m *VmDiskUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskUpdateRet) ProtoMessage()    {}
func (*VmDiskUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{36}
}

func (m *VmDiskUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskUpdateRet.Unmarshal(m, b)
}
func (m *VmDiskUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmDiskUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskUpdateRet.Merge(m, src)
}
func (m *VmDiskUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskUpdateRet.Size(m)
}
func (m *VmDiskUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskUpdateRet proto.InternalMessageInfo

func (m *VmDiskUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmDiskUpdateTaskRet struct {
	DeletedVmdiskUuidList [][]byte `protobuf:"bytes,1,rep,name=deleted_vmdisk_uuid_list,json=deletedVmdiskUuidList" json:"deleted_vmdisk_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VmDiskUpdateTaskRet) Reset()         { *m = VmDiskUpdateTaskRet{} }
func (m *VmDiskUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskUpdateTaskRet) ProtoMessage()    {}
func (*VmDiskUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{37}
}

func (m *VmDiskUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmDiskUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmDiskUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskUpdateTaskRet.Merge(m, src)
}
func (m *VmDiskUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskUpdateTaskRet.Size(m)
}
func (m *VmDiskUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskUpdateTaskRet proto.InternalMessageInfo

func (m *VmDiskUpdateTaskRet) GetDeletedVmdiskUuidList() [][]byte {
	if m != nil {
		return m.DeletedVmdiskUuidList
	}
	return nil
}

type VmDiskCloneConfigGetArg struct {
	// The VM Disk clone configs to get details about.
	CloneConfigList      []*VmDiskCloneConfig `protobuf:"bytes,1,rep,name=clone_config_list,json=cloneConfigList" json:"clone_config_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VmDiskCloneConfigGetArg) Reset()         { *m = VmDiskCloneConfigGetArg{} }
func (m *VmDiskCloneConfigGetArg) String() string { return proto.CompactTextString(m) }
func (*VmDiskCloneConfigGetArg) ProtoMessage()    {}
func (*VmDiskCloneConfigGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{38}
}

func (m *VmDiskCloneConfigGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskCloneConfigGetArg.Unmarshal(m, b)
}
func (m *VmDiskCloneConfigGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskCloneConfigGetArg.Marshal(b, m, deterministic)
}
func (m *VmDiskCloneConfigGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskCloneConfigGetArg.Merge(m, src)
}
func (m *VmDiskCloneConfigGetArg) XXX_Size() int {
	return xxx_messageInfo_VmDiskCloneConfigGetArg.Size(m)
}
func (m *VmDiskCloneConfigGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskCloneConfigGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskCloneConfigGetArg proto.InternalMessageInfo

func (m *VmDiskCloneConfigGetArg) GetCloneConfigList() []*VmDiskCloneConfig {
	if m != nil {
		return m.CloneConfigList
	}
	return nil
}

type VmDiskCloneConfigGetRet struct {
	DetailList           []*VmDiskCloneConfigDetails `protobuf:"bytes,1,rep,name=detail_list,json=detailList" json:"detail_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *VmDiskCloneConfigGetRet) Reset()         { *m = VmDiskCloneConfigGetRet{} }
func (m *VmDiskCloneConfigGetRet) String() string { return proto.CompactTextString(m) }
func (*VmDiskCloneConfigGetRet) ProtoMessage()    {}
func (*VmDiskCloneConfigGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{39}
}

func (m *VmDiskCloneConfigGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDiskCloneConfigGetRet.Unmarshal(m, b)
}
func (m *VmDiskCloneConfigGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDiskCloneConfigGetRet.Marshal(b, m, deterministic)
}
func (m *VmDiskCloneConfigGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDiskCloneConfigGetRet.Merge(m, src)
}
func (m *VmDiskCloneConfigGetRet) XXX_Size() int {
	return xxx_messageInfo_VmDiskCloneConfigGetRet.Size(m)
}
func (m *VmDiskCloneConfigGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDiskCloneConfigGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDiskCloneConfigGetRet proto.InternalMessageInfo

func (m *VmDiskCloneConfigGetRet) GetDetailList() []*VmDiskCloneConfigDetails {
	if m != nil {
		return m.DetailList
	}
	return nil
}

type VmCreateWithCustomizeArg struct {
	// Task UUID for task idempotence.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task. This should NOT be set by a client app. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// VM Create Argument .
	VmcreateArg *VmCreateArg `protobuf:"bytes,2,opt,name=vmcreate_arg,json=vmcreateArg" json:"vmcreate_arg,omitempty"`
	// Vm customization configuration. At boot time, this config will be replayed
	// by VM customization tool(cloudinit/sysprep) installed in the VM to bring
	// VM to the state defined by this config.
	CustomizationConfig *VmCustomizationConfig `protobuf:"bytes,3,opt,name=customization_config,json=customizationConfig" json:"customization_config,omitempty"`
	// Container on which the customization config ISO files should be created is
	// If container_uuid is specified and the associated container exists, that
	// container is used; otherwise one of the existing containers is used.
	ContainerUuid []byte `protobuf:"bytes,4,opt,name=container_uuid,json=containerUuid" json:"container_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// This should NOT be set by non ahv-mgmt clients. It is solely meant to be
	// set by ahv-mgmt clients (for them to avoid re-serializing an already
	// serialized op to acropolis)
	IsSerializedRequest  *bool    `protobuf:"varint,7,opt,name=is_serialized_request,json=isSerializedRequest,def=0" json:"is_serialized_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCreateWithCustomizeArg) Reset()         { *m = VmCreateWithCustomizeArg{} }
func (m *VmCreateWithCustomizeArg) String() string { return proto.CompactTextString(m) }
func (*VmCreateWithCustomizeArg) ProtoMessage()    {}
func (*VmCreateWithCustomizeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{40}
}

func (m *VmCreateWithCustomizeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCreateWithCustomizeArg.Unmarshal(m, b)
}
func (m *VmCreateWithCustomizeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCreateWithCustomizeArg.Marshal(b, m, deterministic)
}
func (m *VmCreateWithCustomizeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCreateWithCustomizeArg.Merge(m, src)
}
func (m *VmCreateWithCustomizeArg) XXX_Size() int {
	return xxx_messageInfo_VmCreateWithCustomizeArg.Size(m)
}
func (m *VmCreateWithCustomizeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCreateWithCustomizeArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmCreateWithCustomizeArg proto.InternalMessageInfo

const Default_VmCreateWithCustomizeArg_IsSerializedRequest bool = false

func (m *VmCreateWithCustomizeArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmCreateWithCustomizeArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmCreateWithCustomizeArg) GetVmcreateArg() *VmCreateArg {
	if m != nil {
		return m.VmcreateArg
	}
	return nil
}

func (m *VmCreateWithCustomizeArg) GetCustomizationConfig() *VmCustomizationConfig {
	if m != nil {
		return m.CustomizationConfig
	}
	return nil
}

func (m *VmCreateWithCustomizeArg) GetContainerUuid() []byte {
	if m != nil {
		return m.ContainerUuid
	}
	return nil
}

func (m *VmCreateWithCustomizeArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmCreateWithCustomizeArg) GetIsSerializedRequest() bool {
	if m != nil && m.IsSerializedRequest != nil {
		return *m.IsSerializedRequest
	}
	return Default_VmCreateWithCustomizeArg_IsSerializedRequest
}

type VmCreateWithCustomizeRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmCreateWithCustomizeTaskRet. Task will have details of status and
	// vm_uuid.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCreateWithCustomizeRet) Reset()         { *m = VmCreateWithCustomizeRet{} }
func (m *VmCreateWithCustomizeRet) String() string { return proto.CompactTextString(m) }
func (*VmCreateWithCustomizeRet) ProtoMessage()    {}
func (*VmCreateWithCustomizeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{41}
}

func (m *VmCreateWithCustomizeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCreateWithCustomizeRet.Unmarshal(m, b)
}
func (m *VmCreateWithCustomizeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCreateWithCustomizeRet.Marshal(b, m, deterministic)
}
func (m *VmCreateWithCustomizeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCreateWithCustomizeRet.Merge(m, src)
}
func (m *VmCreateWithCustomizeRet) XXX_Size() int {
	return xxx_messageInfo_VmCreateWithCustomizeRet.Size(m)
}
func (m *VmCreateWithCustomizeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCreateWithCustomizeRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCreateWithCustomizeRet proto.InternalMessageInfo

func (m *VmCreateWithCustomizeRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmCreateWithCustomizeTaskRet struct {
	// The hypervisor agnostic Nutanix VM UUID for the created VM. This field
	// will be populated only if the create VM request was successful.
	VmUuid               []byte   `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCreateWithCustomizeTaskRet) Reset()         { *m = VmCreateWithCustomizeTaskRet{} }
func (m *VmCreateWithCustomizeTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmCreateWithCustomizeTaskRet) ProtoMessage()    {}
func (*VmCreateWithCustomizeTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{42}
}

func (m *VmCreateWithCustomizeTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCreateWithCustomizeTaskRet.Unmarshal(m, b)
}
func (m *VmCreateWithCustomizeTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCreateWithCustomizeTaskRet.Marshal(b, m, deterministic)
}
func (m *VmCreateWithCustomizeTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCreateWithCustomizeTaskRet.Merge(m, src)
}
func (m *VmCreateWithCustomizeTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmCreateWithCustomizeTaskRet.Size(m)
}
func (m *VmCreateWithCustomizeTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCreateWithCustomizeTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCreateWithCustomizeTaskRet proto.InternalMessageInfo

func (m *VmCreateWithCustomizeTaskRet) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

type VmCloneWithCustomizeArg struct {
	// Task UUID for task idempotence.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task. This should NOT be set by a client app. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// VM clone argument.
	VmcloneArg *VmCloneArg `protobuf:"bytes,2,opt,name=vmclone_arg,json=vmcloneArg" json:"vmclone_arg,omitempty"`
	// Vm customization configuration. At boot time, this config will be replayed
	// by VM customization tool(cloudinit/sysprep) installed in the VM to bring
	// VM to the stated defined by this config.
	CustomizationConfig *VmCustomizationConfig `protobuf:"bytes,3,opt,name=customization_config,json=customizationConfig" json:"customization_config,omitempty"`
	// Container on which the customization config iso files should be created.
	// Must be provided when cluster has more than one container.
	ContainerUuid []byte `protobuf:"bytes,4,opt,name=container_uuid,json=containerUuid" json:"container_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,6,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// This should NOT be set by non ahv-mgmt clients. It is solely meant to be
	// set by ahv-mgmt clients (for them to avoid re-serializing an already
	// serialized op to acropolis)
	IsSerializedRequest  *bool    `protobuf:"varint,7,opt,name=is_serialized_request,json=isSerializedRequest,def=1" json:"is_serialized_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCloneWithCustomizeArg) Reset()         { *m = VmCloneWithCustomizeArg{} }
func (m *VmCloneWithCustomizeArg) String() string { return proto.CompactTextString(m) }
func (*VmCloneWithCustomizeArg) ProtoMessage()    {}
func (*VmCloneWithCustomizeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{43}
}

func (m *VmCloneWithCustomizeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCloneWithCustomizeArg.Unmarshal(m, b)
}
func (m *VmCloneWithCustomizeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCloneWithCustomizeArg.Marshal(b, m, deterministic)
}
func (m *VmCloneWithCustomizeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCloneWithCustomizeArg.Merge(m, src)
}
func (m *VmCloneWithCustomizeArg) XXX_Size() int {
	return xxx_messageInfo_VmCloneWithCustomizeArg.Size(m)
}
func (m *VmCloneWithCustomizeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCloneWithCustomizeArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmCloneWithCustomizeArg proto.InternalMessageInfo

const Default_VmCloneWithCustomizeArg_IsSerializedRequest bool = true

func (m *VmCloneWithCustomizeArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmCloneWithCustomizeArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmCloneWithCustomizeArg) GetVmcloneArg() *VmCloneArg {
	if m != nil {
		return m.VmcloneArg
	}
	return nil
}

func (m *VmCloneWithCustomizeArg) GetCustomizationConfig() *VmCustomizationConfig {
	if m != nil {
		return m.CustomizationConfig
	}
	return nil
}

func (m *VmCloneWithCustomizeArg) GetContainerUuid() []byte {
	if m != nil {
		return m.ContainerUuid
	}
	return nil
}

func (m *VmCloneWithCustomizeArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmCloneWithCustomizeArg) GetIsSerializedRequest() bool {
	if m != nil && m.IsSerializedRequest != nil {
		return *m.IsSerializedRequest
	}
	return Default_VmCloneWithCustomizeArg_IsSerializedRequest
}

type VmCloneWithCustomizeRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmCreateWithCustomizeTaskRet. Task will have details of status and
	// vm_uuid.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCloneWithCustomizeRet) Reset()         { *m = VmCloneWithCustomizeRet{} }
func (m *VmCloneWithCustomizeRet) String() string { return proto.CompactTextString(m) }
func (*VmCloneWithCustomizeRet) ProtoMessage()    {}
func (*VmCloneWithCustomizeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{44}
}

func (m *VmCloneWithCustomizeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCloneWithCustomizeRet.Unmarshal(m, b)
}
func (m *VmCloneWithCustomizeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCloneWithCustomizeRet.Marshal(b, m, deterministic)
}
func (m *VmCloneWithCustomizeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCloneWithCustomizeRet.Merge(m, src)
}
func (m *VmCloneWithCustomizeRet) XXX_Size() int {
	return xxx_messageInfo_VmCloneWithCustomizeRet.Size(m)
}
func (m *VmCloneWithCustomizeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCloneWithCustomizeRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCloneWithCustomizeRet proto.InternalMessageInfo

func (m *VmCloneWithCustomizeRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmCloneWithCustomizeTaskRet struct {
	// Hypervisor agnostic UUIDs of VM clones created.
	ResponseList         []*VmCloneWithCustomizeTaskRet_VmCloneResponse `protobuf:"bytes,1,rep,name=response_list,json=responseList" json:"response_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *VmCloneWithCustomizeTaskRet) Reset()         { *m = VmCloneWithCustomizeTaskRet{} }
func (m *VmCloneWithCustomizeTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmCloneWithCustomizeTaskRet) ProtoMessage()    {}
func (*VmCloneWithCustomizeTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{45}
}

func (m *VmCloneWithCustomizeTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCloneWithCustomizeTaskRet.Unmarshal(m, b)
}
func (m *VmCloneWithCustomizeTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCloneWithCustomizeTaskRet.Marshal(b, m, deterministic)
}
func (m *VmCloneWithCustomizeTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCloneWithCustomizeTaskRet.Merge(m, src)
}
func (m *VmCloneWithCustomizeTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmCloneWithCustomizeTaskRet.Size(m)
}
func (m *VmCloneWithCustomizeTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCloneWithCustomizeTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmCloneWithCustomizeTaskRet proto.InternalMessageInfo

func (m *VmCloneWithCustomizeTaskRet) GetResponseList() []*VmCloneWithCustomizeTaskRet_VmCloneResponse {
	if m != nil {
		return m.ResponseList
	}
	return nil
}

type VmCloneWithCustomizeTaskRet_VmCloneResponse struct {
	// An error code indicating whether the RPC was successful.
	ErrorCode *UhuraError_Type `protobuf:"varint,1,opt,name=error_code,json=errorCode,enum=nutanix.uhura.UhuraError_Type" json:"error_code,omitempty"`
	// An optional additional string describing the error, if the RPC was not
	// successful.
	ErrorDetail *string `protobuf:"bytes,2,opt,name=error_detail,json=errorDetail" json:"error_detail,omitempty"`
	// Hypervisor agnostic UUID of the VM clone created
	VmUuid               []byte   `protobuf:"bytes,3,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmCloneWithCustomizeTaskRet_VmCloneResponse) Reset() {
	*m = VmCloneWithCustomizeTaskRet_VmCloneResponse{}
}
func (m *VmCloneWithCustomizeTaskRet_VmCloneResponse) String() string {
	return proto.CompactTextString(m)
}
func (*VmCloneWithCustomizeTaskRet_VmCloneResponse) ProtoMessage() {}
func (*VmCloneWithCustomizeTaskRet_VmCloneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{45, 0}
}

func (m *VmCloneWithCustomizeTaskRet_VmCloneResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmCloneWithCustomizeTaskRet_VmCloneResponse.Unmarshal(m, b)
}
func (m *VmCloneWithCustomizeTaskRet_VmCloneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmCloneWithCustomizeTaskRet_VmCloneResponse.Marshal(b, m, deterministic)
}
func (m *VmCloneWithCustomizeTaskRet_VmCloneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmCloneWithCustomizeTaskRet_VmCloneResponse.Merge(m, src)
}
func (m *VmCloneWithCustomizeTaskRet_VmCloneResponse) XXX_Size() int {
	return xxx_messageInfo_VmCloneWithCustomizeTaskRet_VmCloneResponse.Size(m)
}
func (m *VmCloneWithCustomizeTaskRet_VmCloneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VmCloneWithCustomizeTaskRet_VmCloneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VmCloneWithCustomizeTaskRet_VmCloneResponse proto.InternalMessageInfo

func (m *VmCloneWithCustomizeTaskRet_VmCloneResponse) GetErrorCode() UhuraError_Type {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return UhuraError_kNoError
}

func (m *VmCloneWithCustomizeTaskRet_VmCloneResponse) GetErrorDetail() string {
	if m != nil && m.ErrorDetail != nil {
		return *m.ErrorDetail
	}
	return ""
}

func (m *VmCloneWithCustomizeTaskRet_VmCloneResponse) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

// This message is specifically for deleting a VM during an in-place VM revert
// operation by Cerebro. VmDestroy lets the caller control whether the VM entity
// should be deleted from the persistent store (such as Insights DB) or not.
// Callers wanting to perform a normal VM delete should call VmDelete API.
type VmDestroyArg struct {
	// Task UUID for task idempotence.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid []byte `protobuf:"bytes,2,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Required. The hypervisor agnostic UUID of the VM being destroyed.
	VmUuid []byte `protobuf:"bytes,3,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Required. Indicates whether to keep the deleted VM in Insights DB. Can not
	// be set to True in case, "moved_to_cluster_uuid" is specified.
	KeepDeletedEntity *bool `protobuf:"varint,4,opt,name=keep_deleted_entity,json=keepDeletedEntity" json:"keep_deleted_entity,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// The UUID of the cluster where the VM entity is being migrated. Can not be
	// specified in case "keep_deleted_entity" is set to True.
	// For ESXi, detaches only the VM from Insights DB while for
	// AHV, detaches the VM as well as its child entities mentioned in
	// "child_entity_type_detach_list".
	MovedToClusterUuid []byte `protobuf:"bytes,6,opt,name=moved_to_cluster_uuid,json=movedToClusterUuid" json:"moved_to_cluster_uuid,omitempty"`
	// If a Vm_destroy RPC was called with keep_deleted_entity=True,
	// vm entity is not deleted from DB. In case of failure of the subsequent
	// Vm register RPC, users may want to roll back/delete the entity
	// from DB as well. If so, they can call Vm_Destroy RPC with
	// detach_from_db option set to True and keep_deleted_entity=False.
	DetachOnlyFromDb *bool `protobuf:"varint,7,opt,name=detach_only_from_db,json=detachOnlyFromDb" json:"detach_only_from_db,omitempty"`
	// Use vCenter. Only valid for ESXi.
	UseVcenter *bool `protobuf:"varint,8,opt,name=use_vcenter,json=useVcenter" json:"use_vcenter,omitempty"`
	// Applicable only for AHV when moved_to_cluster_uuid is set.
	ChildEntityTypeDetachList []VmChildEntityType `protobuf:"varint,9,rep,name=child_entity_type_detach_list,json=childEntityTypeDetachList,enum=nutanix.uhura.VmChildEntityType" json:"child_entity_type_detach_list,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}            `json:"-"`
	XXX_unrecognized          []byte              `json:"-"`
	XXX_sizecache             int32               `json:"-"`
}

func (m *VmDestroyArg) Reset()         { *m = VmDestroyArg{} }
func (m *VmDestroyArg) String() string { return proto.CompactTextString(m) }
func (*VmDestroyArg) ProtoMessage()    {}
func (*VmDestroyArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{46}
}

func (m *VmDestroyArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDestroyArg.Unmarshal(m, b)
}
func (m *VmDestroyArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDestroyArg.Marshal(b, m, deterministic)
}
func (m *VmDestroyArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDestroyArg.Merge(m, src)
}
func (m *VmDestroyArg) XXX_Size() int {
	return xxx_messageInfo_VmDestroyArg.Size(m)
}
func (m *VmDestroyArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDestroyArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmDestroyArg proto.InternalMessageInfo

func (m *VmDestroyArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmDestroyArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmDestroyArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmDestroyArg) GetKeepDeletedEntity() bool {
	if m != nil && m.KeepDeletedEntity != nil {
		return *m.KeepDeletedEntity
	}
	return false
}

func (m *VmDestroyArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmDestroyArg) GetMovedToClusterUuid() []byte {
	if m != nil {
		return m.MovedToClusterUuid
	}
	return nil
}

func (m *VmDestroyArg) GetDetachOnlyFromDb() bool {
	if m != nil && m.DetachOnlyFromDb != nil {
		return *m.DetachOnlyFromDb
	}
	return false
}

func (m *VmDestroyArg) GetUseVcenter() bool {
	if m != nil && m.UseVcenter != nil {
		return *m.UseVcenter
	}
	return false
}

func (m *VmDestroyArg) GetChildEntityTypeDetachList() []VmChildEntityType {
	if m != nil {
		return m.ChildEntityTypeDetachList
	}
	return nil
}

type VmDestroyRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmDestroyTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDestroyRet) Reset()         { *m = VmDestroyRet{} }
func (m *VmDestroyRet) String() string { return proto.CompactTextString(m) }
func (*VmDestroyRet) ProtoMessage()    {}
func (*VmDestroyRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{47}
}

func (m *VmDestroyRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDestroyRet.Unmarshal(m, b)
}
func (m *VmDestroyRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDestroyRet.Marshal(b, m, deterministic)
}
func (m *VmDestroyRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDestroyRet.Merge(m, src)
}
func (m *VmDestroyRet) XXX_Size() int {
	return xxx_messageInfo_VmDestroyRet.Size(m)
}
func (m *VmDestroyRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDestroyRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDestroyRet proto.InternalMessageInfo

func (m *VmDestroyRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmDestroyTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmDestroyTaskRet) Reset()         { *m = VmDestroyTaskRet{} }
func (m *VmDestroyTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmDestroyTaskRet) ProtoMessage()    {}
func (*VmDestroyTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{48}
}

func (m *VmDestroyTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmDestroyTaskRet.Unmarshal(m, b)
}
func (m *VmDestroyTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmDestroyTaskRet.Marshal(b, m, deterministic)
}
func (m *VmDestroyTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmDestroyTaskRet.Merge(m, src)
}
func (m *VmDestroyTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmDestroyTaskRet.Size(m)
}
func (m *VmDestroyTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmDestroyTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmDestroyTaskRet proto.InternalMessageInfo

// This message is for registering a new VM.
type VmRegisterArg struct {
	// Task UUID for task idempotence.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid []byte `protobuf:"bytes,2,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// The hypervisor agnostic UUID of the VM being registered.
	// For the in-place VM revert workflow, the source VM is deleted by calling
	// VmDestroy RPC; after that VmRegister RPC is called with vm_uuid set to the
	// hypervisor agnostic VM UUID of the source VM. This way the newly registered
	// or migrated VM will preserve the hypervisor agnostic VM UUID. In other
	// cases, vm_uuid can be not set, and Uhura will just generated a new
	// hypervisor agnostic VM UUID for the newly registered VM.
	VmUuid []byte `protobuf:"bytes,3,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The RegisterVmArg to register the new VM using Hyperint.
	// Note that we only support registering at most one VM in each VmRegister
	// request.
	// If not set, vm_name and config_file_path field should be set. In that case,
	// VmRegister will use the native Uhura implementation.
	RegisterVmArg *hyperint.RegisterVmArg `protobuf:"bytes,4,opt,name=register_vm_arg,json=registerVmArg" json:"register_vm_arg,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Name of the VM. Valid only for ESXi.
	VmName *string `protobuf:"bytes,6,opt,name=vm_name,json=vmName" json:"vm_name,omitempty"`
	// VM configuration NFS file path. e.g. .vmx in ESX. Valid only for ESXi.
	ConfigFilePath *string `protobuf:"bytes,7,opt,name=config_file_path,json=configFilePath" json:"config_file_path,omitempty"`
	// Hypervisor type. Valid only in the mixed hypervisor setup. Valid only
	// for ESXi.
	HypervisorType *config.ConfigurationProto_ManagementServer_HypervisorType `protobuf:"varint,8,opt,name=hypervisor_type,json=hypervisorType,enum=nutanix.zeus.ConfigurationProto_ManagementServer_HypervisorType" json:"hypervisor_type,omitempty"`
	// Incarnation ID required by IDF when the VM entity is migrated from some
	// other cluster to the current cluster.
	DbIncarnationId *uint64 `protobuf:"varint,9,opt,name=db_incarnation_id,json=dbIncarnationId" json:"db_incarnation_id,omitempty"`
	// Valid only for ESXi.
	// If True, Uhura shall process request instead of forwarding it to Hyperint.
	UseUhuraVmRegister   *bool    `protobuf:"varint,10,opt,name=use_uhura_vm_register,json=useUhuraVmRegister,def=0" json:"use_uhura_vm_register,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRegisterArg) Reset()         { *m = VmRegisterArg{} }
func (m *VmRegisterArg) String() string { return proto.CompactTextString(m) }
func (*VmRegisterArg) ProtoMessage()    {}
func (*VmRegisterArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{49}
}

func (m *VmRegisterArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRegisterArg.Unmarshal(m, b)
}
func (m *VmRegisterArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRegisterArg.Marshal(b, m, deterministic)
}
func (m *VmRegisterArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRegisterArg.Merge(m, src)
}
func (m *VmRegisterArg) XXX_Size() int {
	return xxx_messageInfo_VmRegisterArg.Size(m)
}
func (m *VmRegisterArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRegisterArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmRegisterArg proto.InternalMessageInfo

const Default_VmRegisterArg_UseUhuraVmRegister bool = false

func (m *VmRegisterArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmRegisterArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmRegisterArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmRegisterArg) GetRegisterVmArg() *hyperint.RegisterVmArg {
	if m != nil {
		return m.RegisterVmArg
	}
	return nil
}

func (m *VmRegisterArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *VmRegisterArg) GetVmName() string {
	if m != nil && m.VmName != nil {
		return *m.VmName
	}
	return ""
}

func (m *VmRegisterArg) GetConfigFilePath() string {
	if m != nil && m.ConfigFilePath != nil {
		return *m.ConfigFilePath
	}
	return ""
}

func (m *VmRegisterArg) GetHypervisorType() config.ConfigurationProto_ManagementServer_HypervisorType {
	if m != nil && m.HypervisorType != nil {
		return *m.HypervisorType
	}
	return config.ConfigurationProto_ManagementServer_kVMware
}

func (m *VmRegisterArg) GetDbIncarnationId() uint64 {
	if m != nil && m.DbIncarnationId != nil {
		return *m.DbIncarnationId
	}
	return 0
}

func (m *VmRegisterArg) GetUseUhuraVmRegister() bool {
	if m != nil && m.UseUhuraVmRegister != nil {
		return *m.UseUhuraVmRegister
	}
	return Default_VmRegisterArg_UseUhuraVmRegister
}

type VmRegisterRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmRegisterTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRegisterRet) Reset()         { *m = VmRegisterRet{} }
func (m *VmRegisterRet) String() string { return proto.CompactTextString(m) }
func (*VmRegisterRet) ProtoMessage()    {}
func (*VmRegisterRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{50}
}

func (m *VmRegisterRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRegisterRet.Unmarshal(m, b)
}
func (m *VmRegisterRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRegisterRet.Marshal(b, m, deterministic)
}
func (m *VmRegisterRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRegisterRet.Merge(m, src)
}
func (m *VmRegisterRet) XXX_Size() int {
	return xxx_messageInfo_VmRegisterRet.Size(m)
}
func (m *VmRegisterRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRegisterRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmRegisterRet proto.InternalMessageInfo

func (m *VmRegisterRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmRegisterTaskRet struct {
	// The return value as returned by a Hyperint call to register VM.
	RegisterVmRet *hyperint.RegisterVmRet `protobuf:"bytes,1,opt,name=register_vm_ret,json=registerVmRet" json:"register_vm_ret,omitempty"`
	// The hypervisor agnostic VM UUID of the newly registered VM.
	VmUuid               []byte   `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRegisterTaskRet) Reset()         { *m = VmRegisterTaskRet{} }
func (m *VmRegisterTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmRegisterTaskRet) ProtoMessage()    {}
func (*VmRegisterTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{51}
}

func (m *VmRegisterTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRegisterTaskRet.Unmarshal(m, b)
}
func (m *VmRegisterTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRegisterTaskRet.Marshal(b, m, deterministic)
}
func (m *VmRegisterTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRegisterTaskRet.Merge(m, src)
}
func (m *VmRegisterTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmRegisterTaskRet.Size(m)
}
func (m *VmRegisterTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRegisterTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmRegisterTaskRet proto.InternalMessageInfo

func (m *VmRegisterTaskRet) GetRegisterVmRet() *hyperint.RegisterVmRet {
	if m != nil {
		return m.RegisterVmRet
	}
	return nil
}

func (m *VmRegisterTaskRet) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

// This message is for unregistering existing VM.
type VmUnregisterArg struct {
	// Task UUID for task idempotence.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Required. The hypervisor agnostic UUID of the VM being unregistered.
	VmUuid []byte `protobuf:"bytes,2,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Clear pithos mapping for this VM entity.
	// This is valid only in case of non-AHV VMs.
	ClearUuidMapping *bool `protobuf:"varint,3,opt,name=clear_uuid_mapping,json=clearUuidMapping" json:"clear_uuid_mapping,omitempty"`
	// Required. Indicates whether to keep the deleted VM in Insights DB.
	KeepDeletedEntity *bool `protobuf:"varint,4,opt,name=keep_deleted_entity,json=keepDeletedEntity" json:"keep_deleted_entity,omitempty"`
	// To store the task_uuid of the caller task (parent_task)
	ParentTaskUuid       []byte   `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUnregisterArg) Reset()         { *m = VmUnregisterArg{} }
func (m *VmUnregisterArg) String() string { return proto.CompactTextString(m) }
func (*VmUnregisterArg) ProtoMessage()    {}
func (*VmUnregisterArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{52}
}

func (m *VmUnregisterArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUnregisterArg.Unmarshal(m, b)
}
func (m *VmUnregisterArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUnregisterArg.Marshal(b, m, deterministic)
}
func (m *VmUnregisterArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUnregisterArg.Merge(m, src)
}
func (m *VmUnregisterArg) XXX_Size() int {
	return xxx_messageInfo_VmUnregisterArg.Size(m)
}
func (m *VmUnregisterArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUnregisterArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmUnregisterArg proto.InternalMessageInfo

func (m *VmUnregisterArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmUnregisterArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmUnregisterArg) GetClearUuidMapping() bool {
	if m != nil && m.ClearUuidMapping != nil {
		return *m.ClearUuidMapping
	}
	return false
}

func (m *VmUnregisterArg) GetKeepDeletedEntity() bool {
	if m != nil && m.KeepDeletedEntity != nil {
		return *m.KeepDeletedEntity
	}
	return false
}

func (m *VmUnregisterArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type VmUnregisterRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmUnregisterTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUnregisterRet) Reset()         { *m = VmUnregisterRet{} }
func (m *VmUnregisterRet) String() string { return proto.CompactTextString(m) }
func (*VmUnregisterRet) ProtoMessage()    {}
func (*VmUnregisterRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{53}
}

func (m *VmUnregisterRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUnregisterRet.Unmarshal(m, b)
}
func (m *VmUnregisterRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUnregisterRet.Marshal(b, m, deterministic)
}
func (m *VmUnregisterRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUnregisterRet.Merge(m, src)
}
func (m *VmUnregisterRet) XXX_Size() int {
	return xxx_messageInfo_VmUnregisterRet.Size(m)
}
func (m *VmUnregisterRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUnregisterRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUnregisterRet proto.InternalMessageInfo

func (m *VmUnregisterRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmUnregisterTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUnregisterTaskRet) Reset()         { *m = VmUnregisterTaskRet{} }
func (m *VmUnregisterTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmUnregisterTaskRet) ProtoMessage()    {}
func (*VmUnregisterTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{54}
}

func (m *VmUnregisterTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUnregisterTaskRet.Unmarshal(m, b)
}
func (m *VmUnregisterTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUnregisterTaskRet.Marshal(b, m, deterministic)
}
func (m *VmUnregisterTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUnregisterTaskRet.Merge(m, src)
}
func (m *VmUnregisterTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmUnregisterTaskRet.Size(m)
}
func (m *VmUnregisterTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUnregisterTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUnregisterTaskRet proto.InternalMessageInfo

// This message is for Acropolis to notify Uhura that there is change to a VM.
type VmUpdateNotificationArg struct {
	// UUID of the VM that has been updated.
	VmUuidList           [][]byte `protobuf:"bytes,1,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateNotificationArg) Reset()         { *m = VmUpdateNotificationArg{} }
func (m *VmUpdateNotificationArg) String() string { return proto.CompactTextString(m) }
func (*VmUpdateNotificationArg) ProtoMessage()    {}
func (*VmUpdateNotificationArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{55}
}

func (m *VmUpdateNotificationArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateNotificationArg.Unmarshal(m, b)
}
func (m *VmUpdateNotificationArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateNotificationArg.Marshal(b, m, deterministic)
}
func (m *VmUpdateNotificationArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateNotificationArg.Merge(m, src)
}
func (m *VmUpdateNotificationArg) XXX_Size() int {
	return xxx_messageInfo_VmUpdateNotificationArg.Size(m)
}
func (m *VmUpdateNotificationArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateNotificationArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateNotificationArg proto.InternalMessageInfo

func (m *VmUpdateNotificationArg) GetVmUuidList() [][]byte {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

type VmUpdateNotificationRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateNotificationRet) Reset()         { *m = VmUpdateNotificationRet{} }
func (m *VmUpdateNotificationRet) String() string { return proto.CompactTextString(m) }
func (*VmUpdateNotificationRet) ProtoMessage()    {}
func (*VmUpdateNotificationRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{56}
}

func (m *VmUpdateNotificationRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateNotificationRet.Unmarshal(m, b)
}
func (m *VmUpdateNotificationRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateNotificationRet.Marshal(b, m, deterministic)
}
func (m *VmUpdateNotificationRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateNotificationRet.Merge(m, src)
}
func (m *VmUpdateNotificationRet) XXX_Size() int {
	return xxx_messageInfo_VmUpdateNotificationRet.Size(m)
}
func (m *VmUpdateNotificationRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateNotificationRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateNotificationRet proto.InternalMessageInfo

// This message stores both hypervisor agnostic and specific Vm UUIDs.
type VmUuidInfo struct {
	// The hypervisor agnostic VM UUID.
	HypervisorAgnosticVmUuid []byte `protobuf:"bytes,1,opt,name=hypervisor_agnostic_vm_uuid,json=hypervisorAgnosticVmUuid" json:"hypervisor_agnostic_vm_uuid,omitempty"`
	// The hypervisor specific VM UUID.
	HypervisorSpecificVmUuid []byte   `protobuf:"bytes,2,opt,name=hypervisor_specific_vm_uuid,json=hypervisorSpecificVmUuid" json:"hypervisor_specific_vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *VmUuidInfo) Reset()         { *m = VmUuidInfo{} }
func (m *VmUuidInfo) String() string { return proto.CompactTextString(m) }
func (*VmUuidInfo) ProtoMessage()    {}
func (*VmUuidInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{57}
}

func (m *VmUuidInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUuidInfo.Unmarshal(m, b)
}
func (m *VmUuidInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUuidInfo.Marshal(b, m, deterministic)
}
func (m *VmUuidInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUuidInfo.Merge(m, src)
}
func (m *VmUuidInfo) XXX_Size() int {
	return xxx_messageInfo_VmUuidInfo.Size(m)
}
func (m *VmUuidInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUuidInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VmUuidInfo proto.InternalMessageInfo

func (m *VmUuidInfo) GetHypervisorAgnosticVmUuid() []byte {
	if m != nil {
		return m.HypervisorAgnosticVmUuid
	}
	return nil
}

func (m *VmUuidInfo) GetHypervisorSpecificVmUuid() []byte {
	if m != nil {
		return m.HypervisorSpecificVmUuid
	}
	return nil
}

// This message is for getting all VM UUIDs.
type VmGetAllUuidsArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGetAllUuidsArg) Reset()         { *m = VmGetAllUuidsArg{} }
func (m *VmGetAllUuidsArg) String() string { return proto.CompactTextString(m) }
func (*VmGetAllUuidsArg) ProtoMessage()    {}
func (*VmGetAllUuidsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{58}
}

func (m *VmGetAllUuidsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGetAllUuidsArg.Unmarshal(m, b)
}
func (m *VmGetAllUuidsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGetAllUuidsArg.Marshal(b, m, deterministic)
}
func (m *VmGetAllUuidsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGetAllUuidsArg.Merge(m, src)
}
func (m *VmGetAllUuidsArg) XXX_Size() int {
	return xxx_messageInfo_VmGetAllUuidsArg.Size(m)
}
func (m *VmGetAllUuidsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGetAllUuidsArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGetAllUuidsArg proto.InternalMessageInfo

type VmGetAllUuidsRet struct {
	// Returned hypervisor agnostic and specific VM UUIDs for all VMs.
	VmUuidList           []*VmUuidInfo `protobuf:"bytes,1,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VmGetAllUuidsRet) Reset()         { *m = VmGetAllUuidsRet{} }
func (m *VmGetAllUuidsRet) String() string { return proto.CompactTextString(m) }
func (*VmGetAllUuidsRet) ProtoMessage()    {}
func (*VmGetAllUuidsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{59}
}

func (m *VmGetAllUuidsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGetAllUuidsRet.Unmarshal(m, b)
}
func (m *VmGetAllUuidsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGetAllUuidsRet.Marshal(b, m, deterministic)
}
func (m *VmGetAllUuidsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGetAllUuidsRet.Merge(m, src)
}
func (m *VmGetAllUuidsRet) XXX_Size() int {
	return xxx_messageInfo_VmGetAllUuidsRet.Size(m)
}
func (m *VmGetAllUuidsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGetAllUuidsRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGetAllUuidsRet proto.InternalMessageInfo

func (m *VmGetAllUuidsRet) GetVmUuidList() []*VmUuidInfo {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

// This message is for updating hypervisor specific VM UUIDs to be the same as
// the hypervisor agnostic VM UUIDs.
type VmUpdateAllUuidsArg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateAllUuidsArg) Reset()         { *m = VmUpdateAllUuidsArg{} }
func (m *VmUpdateAllUuidsArg) String() string { return proto.CompactTextString(m) }
func (*VmUpdateAllUuidsArg) ProtoMessage()    {}
func (*VmUpdateAllUuidsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{60}
}

func (m *VmUpdateAllUuidsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateAllUuidsArg.Unmarshal(m, b)
}
func (m *VmUpdateAllUuidsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateAllUuidsArg.Marshal(b, m, deterministic)
}
func (m *VmUpdateAllUuidsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateAllUuidsArg.Merge(m, src)
}
func (m *VmUpdateAllUuidsArg) XXX_Size() int {
	return xxx_messageInfo_VmUpdateAllUuidsArg.Size(m)
}
func (m *VmUpdateAllUuidsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateAllUuidsArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateAllUuidsArg proto.InternalMessageInfo

type VmUpdateAllUuidsRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateAllUuidsRet) Reset()         { *m = VmUpdateAllUuidsRet{} }
func (m *VmUpdateAllUuidsRet) String() string { return proto.CompactTextString(m) }
func (*VmUpdateAllUuidsRet) ProtoMessage()    {}
func (*VmUpdateAllUuidsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{61}
}

func (m *VmUpdateAllUuidsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateAllUuidsRet.Unmarshal(m, b)
}
func (m *VmUpdateAllUuidsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateAllUuidsRet.Marshal(b, m, deterministic)
}
func (m *VmUpdateAllUuidsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateAllUuidsRet.Merge(m, src)
}
func (m *VmUpdateAllUuidsRet) XXX_Size() int {
	return xxx_messageInfo_VmUpdateAllUuidsRet.Size(m)
}
func (m *VmUpdateAllUuidsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateAllUuidsRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateAllUuidsRet proto.InternalMessageInfo

// This message is for updating hypervisor specific VM UUID to a given value for
// a VM with a certain given hypervisor agnostic VM UUID.
type VmUpdateUuidsArg struct {
	// The hypervisor agnostic VM UUID is used for looking up the VM entity whose
	// hypervisor specific VM UUID is to be updated as the given value in this
	// argument.
	VmUuidList           []*VmUuidInfo `protobuf:"bytes,1,rep,name=vm_uuid_list,json=vmUuidList" json:"vm_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VmUpdateUuidsArg) Reset()         { *m = VmUpdateUuidsArg{} }
func (m *VmUpdateUuidsArg) String() string { return proto.CompactTextString(m) }
func (*VmUpdateUuidsArg) ProtoMessage()    {}
func (*VmUpdateUuidsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{62}
}

func (m *VmUpdateUuidsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateUuidsArg.Unmarshal(m, b)
}
func (m *VmUpdateUuidsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateUuidsArg.Marshal(b, m, deterministic)
}
func (m *VmUpdateUuidsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateUuidsArg.Merge(m, src)
}
func (m *VmUpdateUuidsArg) XXX_Size() int {
	return xxx_messageInfo_VmUpdateUuidsArg.Size(m)
}
func (m *VmUpdateUuidsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateUuidsArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateUuidsArg proto.InternalMessageInfo

func (m *VmUpdateUuidsArg) GetVmUuidList() []*VmUuidInfo {
	if m != nil {
		return m.VmUuidList
	}
	return nil
}

type VmUpdateUuidsRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmUpdateUuidsRet) Reset()         { *m = VmUpdateUuidsRet{} }
func (m *VmUpdateUuidsRet) String() string { return proto.CompactTextString(m) }
func (*VmUpdateUuidsRet) ProtoMessage()    {}
func (*VmUpdateUuidsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{63}
}

func (m *VmUpdateUuidsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmUpdateUuidsRet.Unmarshal(m, b)
}
func (m *VmUpdateUuidsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmUpdateUuidsRet.Marshal(b, m, deterministic)
}
func (m *VmUpdateUuidsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmUpdateUuidsRet.Merge(m, src)
}
func (m *VmUpdateUuidsRet) XXX_Size() int {
	return xxx_messageInfo_VmUpdateUuidsRet.Size(m)
}
func (m *VmUpdateUuidsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmUpdateUuidsRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmUpdateUuidsRet proto.InternalMessageInfo

type VmGetConsoleTicketArg struct {
	VmUuid               []byte   `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGetConsoleTicketArg) Reset()         { *m = VmGetConsoleTicketArg{} }
func (m *VmGetConsoleTicketArg) String() string { return proto.CompactTextString(m) }
func (*VmGetConsoleTicketArg) ProtoMessage()    {}
func (*VmGetConsoleTicketArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{64}
}

func (m *VmGetConsoleTicketArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGetConsoleTicketArg.Unmarshal(m, b)
}
func (m *VmGetConsoleTicketArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGetConsoleTicketArg.Marshal(b, m, deterministic)
}
func (m *VmGetConsoleTicketArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGetConsoleTicketArg.Merge(m, src)
}
func (m *VmGetConsoleTicketArg) XXX_Size() int {
	return xxx_messageInfo_VmGetConsoleTicketArg.Size(m)
}
func (m *VmGetConsoleTicketArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGetConsoleTicketArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmGetConsoleTicketArg proto.InternalMessageInfo

func (m *VmGetConsoleTicketArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

type VmGetConsoleTicketRet struct {
	// WebMKS ticket.
	ConsoleTicket []byte `protobuf:"bytes,1,opt,name=console_ticket,json=consoleTicket" json:"console_ticket,omitempty"`
	// IP address of host which is currently hosting the VM.
	HostIp               *string  `protobuf:"bytes,2,opt,name=host_ip,json=hostIp" json:"host_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmGetConsoleTicketRet) Reset()         { *m = VmGetConsoleTicketRet{} }
func (m *VmGetConsoleTicketRet) String() string { return proto.CompactTextString(m) }
func (*VmGetConsoleTicketRet) ProtoMessage()    {}
func (*VmGetConsoleTicketRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{65}
}

func (m *VmGetConsoleTicketRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmGetConsoleTicketRet.Unmarshal(m, b)
}
func (m *VmGetConsoleTicketRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmGetConsoleTicketRet.Marshal(b, m, deterministic)
}
func (m *VmGetConsoleTicketRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmGetConsoleTicketRet.Merge(m, src)
}
func (m *VmGetConsoleTicketRet) XXX_Size() int {
	return xxx_messageInfo_VmGetConsoleTicketRet.Size(m)
}
func (m *VmGetConsoleTicketRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmGetConsoleTicketRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmGetConsoleTicketRet proto.InternalMessageInfo

func (m *VmGetConsoleTicketRet) GetConsoleTicket() []byte {
	if m != nil {
		return m.ConsoleTicket
	}
	return nil
}

func (m *VmGetConsoleTicketRet) GetHostIp() string {
	if m != nil && m.HostIp != nil {
		return *m.HostIp
	}
	return ""
}

type VmNicCreateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// A list of NIC specifications.
	SpecList []*VmNicConfig `protobuf:"bytes,3,rep,name=spec_list,json=specList" json:"spec_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid       []byte   `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicCreateArg) Reset()         { *m = VmNicCreateArg{} }
func (m *VmNicCreateArg) String() string { return proto.CompactTextString(m) }
func (*VmNicCreateArg) ProtoMessage()    {}
func (*VmNicCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{66}
}

func (m *VmNicCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicCreateArg.Unmarshal(m, b)
}
func (m *VmNicCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicCreateArg.Marshal(b, m, deterministic)
}
func (m *VmNicCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicCreateArg.Merge(m, src)
}
func (m *VmNicCreateArg) XXX_Size() int {
	return xxx_messageInfo_VmNicCreateArg.Size(m)
}
func (m *VmNicCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicCreateArg proto.InternalMessageInfo

const Default_VmNicCreateArg_VmLogicalTimestamp int64 = -1

func (m *VmNicCreateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmNicCreateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmNicCreateArg_VmLogicalTimestamp
}

func (m *VmNicCreateArg) GetSpecList() []*VmNicConfig {
	if m != nil {
		return m.SpecList
	}
	return nil
}

func (m *VmNicCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmNicCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type VmNicCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmNicCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicCreateRet) Reset()         { *m = VmNicCreateRet{} }
func (m *VmNicCreateRet) String() string { return proto.CompactTextString(m) }
func (*VmNicCreateRet) ProtoMessage()    {}
func (*VmNicCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{67}
}

func (m *VmNicCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicCreateRet.Unmarshal(m, b)
}
func (m *VmNicCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicCreateRet.Marshal(b, m, deterministic)
}
func (m *VmNicCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicCreateRet.Merge(m, src)
}
func (m *VmNicCreateRet) XXX_Size() int {
	return xxx_messageInfo_VmNicCreateRet.Size(m)
}
func (m *VmNicCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicCreateRet proto.InternalMessageInfo

func (m *VmNicCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmNicCreateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicCreateTaskRet) Reset()         { *m = VmNicCreateTaskRet{} }
func (m *VmNicCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmNicCreateTaskRet) ProtoMessage()    {}
func (*VmNicCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{68}
}

func (m *VmNicCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicCreateTaskRet.Unmarshal(m, b)
}
func (m *VmNicCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmNicCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicCreateTaskRet.Merge(m, src)
}
func (m *VmNicCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmNicCreateTaskRet.Size(m)
}
func (m *VmNicCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicCreateTaskRet proto.InternalMessageInfo

type VmNicGetArg struct {
	// The VM identifier
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// List of VM NIC MAC Ids. If none is specified, then all NICs are returned.
	MacAddrList [][]byte `protobuf:"bytes,2,rep,name=mac_addr_list,json=macAddrList" json:"mac_addr_list,omitempty"`
	// Whether to fetch current network address assignments.
	IncludeAddressAssignments *bool `protobuf:"varint,3,opt,name=include_address_assignments,json=includeAddressAssignments" json:"include_address_assignments,omitempty"`
	// The list of UUIDs of the NICs.
	NicUuidList          [][]byte `protobuf:"bytes,4,rep,name=nic_uuid_list,json=nicUuidList" json:"nic_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicGetArg) Reset()         { *m = VmNicGetArg{} }
func (m *VmNicGetArg) String() string { return proto.CompactTextString(m) }
func (*VmNicGetArg) ProtoMessage()    {}
func (*VmNicGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{69}
}

func (m *VmNicGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicGetArg.Unmarshal(m, b)
}
func (m *VmNicGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicGetArg.Marshal(b, m, deterministic)
}
func (m *VmNicGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicGetArg.Merge(m, src)
}
func (m *VmNicGetArg) XXX_Size() int {
	return xxx_messageInfo_VmNicGetArg.Size(m)
}
func (m *VmNicGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicGetArg proto.InternalMessageInfo

func (m *VmNicGetArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmNicGetArg) GetMacAddrList() [][]byte {
	if m != nil {
		return m.MacAddrList
	}
	return nil
}

func (m *VmNicGetArg) GetIncludeAddressAssignments() bool {
	if m != nil && m.IncludeAddressAssignments != nil {
		return *m.IncludeAddressAssignments
	}
	return false
}

func (m *VmNicGetArg) GetNicUuidList() [][]byte {
	if m != nil {
		return m.NicUuidList
	}
	return nil
}

type VmNicGetRet struct {
	// A list of sorted, filtered VM NICs.
	NicList              []*VmNicConfig `protobuf:"bytes,2,rep,name=nic_list,json=nicList" json:"nic_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VmNicGetRet) Reset()         { *m = VmNicGetRet{} }
func (m *VmNicGetRet) String() string { return proto.CompactTextString(m) }
func (*VmNicGetRet) ProtoMessage()    {}
func (*VmNicGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{70}
}

func (m *VmNicGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicGetRet.Unmarshal(m, b)
}
func (m *VmNicGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicGetRet.Marshal(b, m, deterministic)
}
func (m *VmNicGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicGetRet.Merge(m, src)
}
func (m *VmNicGetRet) XXX_Size() int {
	return xxx_messageInfo_VmNicGetRet.Size(m)
}
func (m *VmNicGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicGetRet proto.InternalMessageInfo

func (m *VmNicGetRet) GetNicList() []*VmNicConfig {
	if m != nil {
		return m.NicList
	}
	return nil
}

type VmNicUpdateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// A list of NICs to update.
	UpdateList []*VmNicUpdateConfig `protobuf:"bytes,3,rep,name=update_list,json=updateList" json:"update_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid       []byte   `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicUpdateArg) Reset()         { *m = VmNicUpdateArg{} }
func (m *VmNicUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VmNicUpdateArg) ProtoMessage()    {}
func (*VmNicUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{71}
}

func (m *VmNicUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicUpdateArg.Unmarshal(m, b)
}
func (m *VmNicUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicUpdateArg.Marshal(b, m, deterministic)
}
func (m *VmNicUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicUpdateArg.Merge(m, src)
}
func (m *VmNicUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VmNicUpdateArg.Size(m)
}
func (m *VmNicUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicUpdateArg proto.InternalMessageInfo

const Default_VmNicUpdateArg_VmLogicalTimestamp int64 = -1

func (m *VmNicUpdateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmNicUpdateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmNicUpdateArg_VmLogicalTimestamp
}

func (m *VmNicUpdateArg) GetUpdateList() []*VmNicUpdateConfig {
	if m != nil {
		return m.UpdateList
	}
	return nil
}

func (m *VmNicUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmNicUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type VmNicUpdateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmNicUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicUpdateRet) Reset()         { *m = VmNicUpdateRet{} }
func (m *VmNicUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmNicUpdateRet) ProtoMessage()    {}
func (*VmNicUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{72}
}

func (m *VmNicUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicUpdateRet.Unmarshal(m, b)
}
func (m *VmNicUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmNicUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicUpdateRet.Merge(m, src)
}
func (m *VmNicUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmNicUpdateRet.Size(m)
}
func (m *VmNicUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicUpdateRet proto.InternalMessageInfo

func (m *VmNicUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmNicUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicUpdateTaskRet) Reset()         { *m = VmNicUpdateTaskRet{} }
func (m *VmNicUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmNicUpdateTaskRet) ProtoMessage()    {}
func (*VmNicUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{73}
}

func (m *VmNicUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmNicUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmNicUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicUpdateTaskRet.Merge(m, src)
}
func (m *VmNicUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmNicUpdateTaskRet.Size(m)
}
func (m *VmNicUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicUpdateTaskRet proto.InternalMessageInfo

type VmNicDeleteArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// The list of MAC addresses of the NIC to detach.
	MacAddrList [][]byte `protobuf:"bytes,3,rep,name=mac_addr_list,json=macAddrList" json:"mac_addr_list,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,4,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,5,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// The list of UUIDs of the NICs to detach.
	NicUuidList          [][]byte `protobuf:"bytes,6,rep,name=nic_uuid_list,json=nicUuidList" json:"nic_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicDeleteArg) Reset()         { *m = VmNicDeleteArg{} }
func (m *VmNicDeleteArg) String() string { return proto.CompactTextString(m) }
func (*VmNicDeleteArg) ProtoMessage()    {}
func (*VmNicDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{74}
}

func (m *VmNicDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicDeleteArg.Unmarshal(m, b)
}
func (m *VmNicDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicDeleteArg.Marshal(b, m, deterministic)
}
func (m *VmNicDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicDeleteArg.Merge(m, src)
}
func (m *VmNicDeleteArg) XXX_Size() int {
	return xxx_messageInfo_VmNicDeleteArg.Size(m)
}
func (m *VmNicDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicDeleteArg proto.InternalMessageInfo

const Default_VmNicDeleteArg_VmLogicalTimestamp int64 = -1

func (m *VmNicDeleteArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmNicDeleteArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmNicDeleteArg_VmLogicalTimestamp
}

func (m *VmNicDeleteArg) GetMacAddrList() [][]byte {
	if m != nil {
		return m.MacAddrList
	}
	return nil
}

func (m *VmNicDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmNicDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmNicDeleteArg) GetNicUuidList() [][]byte {
	if m != nil {
		return m.NicUuidList
	}
	return nil
}

type VmNicDeleteRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmNicDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicDeleteRet) Reset()         { *m = VmNicDeleteRet{} }
func (m *VmNicDeleteRet) String() string { return proto.CompactTextString(m) }
func (*VmNicDeleteRet) ProtoMessage()    {}
func (*VmNicDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{75}
}

func (m *VmNicDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicDeleteRet.Unmarshal(m, b)
}
func (m *VmNicDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicDeleteRet.Marshal(b, m, deterministic)
}
func (m *VmNicDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicDeleteRet.Merge(m, src)
}
func (m *VmNicDeleteRet) XXX_Size() int {
	return xxx_messageInfo_VmNicDeleteRet.Size(m)
}
func (m *VmNicDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicDeleteRet proto.InternalMessageInfo

func (m *VmNicDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmNicDeleteTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicDeleteTaskRet) Reset()         { *m = VmNicDeleteTaskRet{} }
func (m *VmNicDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmNicDeleteTaskRet) ProtoMessage()    {}
func (*VmNicDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{76}
}

func (m *VmNicDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicDeleteTaskRet.Unmarshal(m, b)
}
func (m *VmNicDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *VmNicDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicDeleteTaskRet.Merge(m, src)
}
func (m *VmNicDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmNicDeleteTaskRet.Size(m)
}
func (m *VmNicDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicDeleteTaskRet proto.InternalMessageInfo

type VmNicListArg struct {
	// The VM identifier.
	VmUuid               []byte   `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicListArg) Reset()         { *m = VmNicListArg{} }
func (m *VmNicListArg) String() string { return proto.CompactTextString(m) }
func (*VmNicListArg) ProtoMessage()    {}
func (*VmNicListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{77}
}

func (m *VmNicListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicListArg.Unmarshal(m, b)
}
func (m *VmNicListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicListArg.Marshal(b, m, deterministic)
}
func (m *VmNicListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicListArg.Merge(m, src)
}
func (m *VmNicListArg) XXX_Size() int {
	return xxx_messageInfo_VmNicListArg.Size(m)
}
func (m *VmNicListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicListArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicListArg proto.InternalMessageInfo

func (m *VmNicListArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

type VmNicListRet struct {
	// A list of sorted, filtered VM nic mac ids.
	MacAddrList          [][]byte `protobuf:"bytes,2,rep,name=mac_addr_list,json=macAddrList" json:"mac_addr_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmNicListRet) Reset()         { *m = VmNicListRet{} }
func (m *VmNicListRet) String() string { return proto.CompactTextString(m) }
func (*VmNicListRet) ProtoMessage()    {}
func (*VmNicListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{78}
}

func (m *VmNicListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmNicListRet.Unmarshal(m, b)
}
func (m *VmNicListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmNicListRet.Marshal(b, m, deterministic)
}
func (m *VmNicListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmNicListRet.Merge(m, src)
}
func (m *VmNicListRet) XXX_Size() int {
	return xxx_messageInfo_VmNicListRet.Size(m)
}
func (m *VmNicListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmNicListRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmNicListRet proto.InternalMessageInfo

func (m *VmNicListRet) GetMacAddrList() [][]byte {
	if m != nil {
		return m.MacAddrList
	}
	return nil
}

type NetworkGetArg struct {
	// The list of networks to lookup.
	NetworkUuidList [][]byte `protobuf:"bytes,1,rep,name=network_uuid_list,json=networkUuidList" json:"network_uuid_list,omitempty"`
	// Set this to fetch list of valid networks for a list of host uuids.
	// Valid only for ESX.
	HostUuidList [][]byte `protobuf:"bytes,2,rep,name=host_uuid_list,json=hostUuidList" json:"host_uuid_list,omitempty"`
	// Hypervisor type. Valid only in the mixed hypervisor environment.
	HypervisorType       *config.ConfigurationProto_ManagementServer_HypervisorType `protobuf:"varint,3,opt,name=hypervisor_type,json=hypervisorType,enum=nutanix.zeus.ConfigurationProto_ManagementServer_HypervisorType" json:"hypervisor_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *NetworkGetArg) Reset()         { *m = NetworkGetArg{} }
func (m *NetworkGetArg) String() string { return proto.CompactTextString(m) }
func (*NetworkGetArg) ProtoMessage()    {}
func (*NetworkGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{79}
}

func (m *NetworkGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkGetArg.Unmarshal(m, b)
}
func (m *NetworkGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkGetArg.Marshal(b, m, deterministic)
}
func (m *NetworkGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkGetArg.Merge(m, src)
}
func (m *NetworkGetArg) XXX_Size() int {
	return xxx_messageInfo_NetworkGetArg.Size(m)
}
func (m *NetworkGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkGetArg proto.InternalMessageInfo

func (m *NetworkGetArg) GetNetworkUuidList() [][]byte {
	if m != nil {
		return m.NetworkUuidList
	}
	return nil
}

func (m *NetworkGetArg) GetHostUuidList() [][]byte {
	if m != nil {
		return m.HostUuidList
	}
	return nil
}

func (m *NetworkGetArg) GetHypervisorType() config.ConfigurationProto_ManagementServer_HypervisorType {
	if m != nil && m.HypervisorType != nil {
		return *m.HypervisorType
	}
	return config.ConfigurationProto_ManagementServer_kVMware
}

type NetworkGetRet struct {
	// The list of lookup results.
	NetworkConfigList    []*NetworkConfig `protobuf:"bytes,1,rep,name=network_config_list,json=networkConfigList" json:"network_config_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NetworkGetRet) Reset()         { *m = NetworkGetRet{} }
func (m *NetworkGetRet) String() string { return proto.CompactTextString(m) }
func (*NetworkGetRet) ProtoMessage()    {}
func (*NetworkGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{80}
}

func (m *NetworkGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkGetRet.Unmarshal(m, b)
}
func (m *NetworkGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkGetRet.Marshal(b, m, deterministic)
}
func (m *NetworkGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkGetRet.Merge(m, src)
}
func (m *NetworkGetRet) XXX_Size() int {
	return xxx_messageInfo_NetworkGetRet.Size(m)
}
func (m *NetworkGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkGetRet proto.InternalMessageInfo

func (m *NetworkGetRet) GetNetworkConfigList() []*NetworkConfig {
	if m != nil {
		return m.NetworkConfigList
	}
	return nil
}

type VmToVmAffinityCreateArg struct {
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Affinity configuration.
	AffinityConfig *VmToVmAffinityConfig `protobuf:"bytes,2,opt,name=affinity_config,json=affinityConfig" json:"affinity_config,omitempty"`
	// Parent task UUID.
	ParentTaskUuid       []byte   `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmToVmAffinityCreateArg) Reset()         { *m = VmToVmAffinityCreateArg{} }
func (m *VmToVmAffinityCreateArg) String() string { return proto.CompactTextString(m) }
func (*VmToVmAffinityCreateArg) ProtoMessage()    {}
func (*VmToVmAffinityCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{81}
}

func (m *VmToVmAffinityCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmToVmAffinityCreateArg.Unmarshal(m, b)
}
func (m *VmToVmAffinityCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmToVmAffinityCreateArg.Marshal(b, m, deterministic)
}
func (m *VmToVmAffinityCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmToVmAffinityCreateArg.Merge(m, src)
}
func (m *VmToVmAffinityCreateArg) XXX_Size() int {
	return xxx_messageInfo_VmToVmAffinityCreateArg.Size(m)
}
func (m *VmToVmAffinityCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmToVmAffinityCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmToVmAffinityCreateArg proto.InternalMessageInfo

func (m *VmToVmAffinityCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmToVmAffinityCreateArg) GetAffinityConfig() *VmToVmAffinityConfig {
	if m != nil {
		return m.AffinityConfig
	}
	return nil
}

func (m *VmToVmAffinityCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type VmToVmAffinityCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmAffinityCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmToVmAffinityCreateRet) Reset()         { *m = VmToVmAffinityCreateRet{} }
func (m *VmToVmAffinityCreateRet) String() string { return proto.CompactTextString(m) }
func (*VmToVmAffinityCreateRet) ProtoMessage()    {}
func (*VmToVmAffinityCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{82}
}

func (m *VmToVmAffinityCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmToVmAffinityCreateRet.Unmarshal(m, b)
}
func (m *VmToVmAffinityCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmToVmAffinityCreateRet.Marshal(b, m, deterministic)
}
func (m *VmToVmAffinityCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmToVmAffinityCreateRet.Merge(m, src)
}
func (m *VmToVmAffinityCreateRet) XXX_Size() int {
	return xxx_messageInfo_VmToVmAffinityCreateRet.Size(m)
}
func (m *VmToVmAffinityCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmToVmAffinityCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmToVmAffinityCreateRet proto.InternalMessageInfo

func (m *VmToVmAffinityCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmToVmAffinityCreateTaskRet struct {
	// Hypervisor agnostic UUID of the affinity rule.
	AffinityUuid         []byte   `protobuf:"bytes,1,opt,name=affinity_uuid,json=affinityUuid" json:"affinity_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmToVmAffinityCreateTaskRet) Reset()         { *m = VmToVmAffinityCreateTaskRet{} }
func (m *VmToVmAffinityCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmToVmAffinityCreateTaskRet) ProtoMessage()    {}
func (*VmToVmAffinityCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{83}
}

func (m *VmToVmAffinityCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmToVmAffinityCreateTaskRet.Unmarshal(m, b)
}
func (m *VmToVmAffinityCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmToVmAffinityCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmToVmAffinityCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmToVmAffinityCreateTaskRet.Merge(m, src)
}
func (m *VmToVmAffinityCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmToVmAffinityCreateTaskRet.Size(m)
}
func (m *VmToVmAffinityCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmToVmAffinityCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmToVmAffinityCreateTaskRet proto.InternalMessageInfo

func (m *VmToVmAffinityCreateTaskRet) GetAffinityUuid() []byte {
	if m != nil {
		return m.AffinityUuid
	}
	return nil
}

type VmToVmAffinityDeleteArg struct {
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Hypervisor agnostic UUID of the affinity rule.
	AffinityUuid []byte `protobuf:"bytes,2,opt,name=affinity_uuid,json=affinityUuid" json:"affinity_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid       []byte   `protobuf:"bytes,3,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmToVmAffinityDeleteArg) Reset()         { *m = VmToVmAffinityDeleteArg{} }
func (m *VmToVmAffinityDeleteArg) String() string { return proto.CompactTextString(m) }
func (*VmToVmAffinityDeleteArg) ProtoMessage()    {}
func (*VmToVmAffinityDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{84}
}

func (m *VmToVmAffinityDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmToVmAffinityDeleteArg.Unmarshal(m, b)
}
func (m *VmToVmAffinityDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmToVmAffinityDeleteArg.Marshal(b, m, deterministic)
}
func (m *VmToVmAffinityDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmToVmAffinityDeleteArg.Merge(m, src)
}
func (m *VmToVmAffinityDeleteArg) XXX_Size() int {
	return xxx_messageInfo_VmToVmAffinityDeleteArg.Size(m)
}
func (m *VmToVmAffinityDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmToVmAffinityDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmToVmAffinityDeleteArg proto.InternalMessageInfo

func (m *VmToVmAffinityDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmToVmAffinityDeleteArg) GetAffinityUuid() []byte {
	if m != nil {
		return m.AffinityUuid
	}
	return nil
}

func (m *VmToVmAffinityDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type VmToVmAffinityDeleteRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmAffinityDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmToVmAffinityDeleteRet) Reset()         { *m = VmToVmAffinityDeleteRet{} }
func (m *VmToVmAffinityDeleteRet) String() string { return proto.CompactTextString(m) }
func (*VmToVmAffinityDeleteRet) ProtoMessage()    {}
func (*VmToVmAffinityDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{85}
}

func (m *VmToVmAffinityDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmToVmAffinityDeleteRet.Unmarshal(m, b)
}
func (m *VmToVmAffinityDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmToVmAffinityDeleteRet.Marshal(b, m, deterministic)
}
func (m *VmToVmAffinityDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmToVmAffinityDeleteRet.Merge(m, src)
}
func (m *VmToVmAffinityDeleteRet) XXX_Size() int {
	return xxx_messageInfo_VmToVmAffinityDeleteRet.Size(m)
}
func (m *VmToVmAffinityDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmToVmAffinityDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmToVmAffinityDeleteRet proto.InternalMessageInfo

func (m *VmToVmAffinityDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmToVmAffinityDeleteTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmToVmAffinityDeleteTaskRet) Reset()         { *m = VmToVmAffinityDeleteTaskRet{} }
func (m *VmToVmAffinityDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmToVmAffinityDeleteTaskRet) ProtoMessage()    {}
func (*VmToVmAffinityDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{86}
}

func (m *VmToVmAffinityDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmToVmAffinityDeleteTaskRet.Unmarshal(m, b)
}
func (m *VmToVmAffinityDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmToVmAffinityDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *VmToVmAffinityDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmToVmAffinityDeleteTaskRet.Merge(m, src)
}
func (m *VmToVmAffinityDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmToVmAffinityDeleteTaskRet.Size(m)
}
func (m *VmToVmAffinityDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmToVmAffinityDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmToVmAffinityDeleteTaskRet proto.InternalMessageInfo

type VmToVmAffinityUpdateArg struct {
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// UUID of the VM Affinity rule.
	AffinityUuid []byte `protobuf:"bytes,2,opt,name=affinity_uuid,json=affinityUuid" json:"affinity_uuid,omitempty"`
	// Affinity configuration.
	AffinityConfig *VmToVmAffinityConfig `protobuf:"bytes,3,opt,name=affinity_config,json=affinityConfig" json:"affinity_config,omitempty"`
	// Parent task UUID.
	ParentTaskUuid       []byte   `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmToVmAffinityUpdateArg) Reset()         { *m = VmToVmAffinityUpdateArg{} }
func (m *VmToVmAffinityUpdateArg) String() string { return proto.CompactTextString(m) }
func (*VmToVmAffinityUpdateArg) ProtoMessage()    {}
func (*VmToVmAffinityUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{87}
}

func (m *VmToVmAffinityUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmToVmAffinityUpdateArg.Unmarshal(m, b)
}
func (m *VmToVmAffinityUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmToVmAffinityUpdateArg.Marshal(b, m, deterministic)
}
func (m *VmToVmAffinityUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmToVmAffinityUpdateArg.Merge(m, src)
}
func (m *VmToVmAffinityUpdateArg) XXX_Size() int {
	return xxx_messageInfo_VmToVmAffinityUpdateArg.Size(m)
}
func (m *VmToVmAffinityUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmToVmAffinityUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmToVmAffinityUpdateArg proto.InternalMessageInfo

func (m *VmToVmAffinityUpdateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmToVmAffinityUpdateArg) GetAffinityUuid() []byte {
	if m != nil {
		return m.AffinityUuid
	}
	return nil
}

func (m *VmToVmAffinityUpdateArg) GetAffinityConfig() *VmToVmAffinityConfig {
	if m != nil {
		return m.AffinityConfig
	}
	return nil
}

func (m *VmToVmAffinityUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type VmToVmAffinityUpdateRet struct {
	// A task to poll for completion. On success, the
	// task will contain a VmAffinityUpdateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmToVmAffinityUpdateRet) Reset()         { *m = VmToVmAffinityUpdateRet{} }
func (m *VmToVmAffinityUpdateRet) String() string { return proto.CompactTextString(m) }
func (*VmToVmAffinityUpdateRet) ProtoMessage()    {}
func (*VmToVmAffinityUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{88}
}

func (m *VmToVmAffinityUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmToVmAffinityUpdateRet.Unmarshal(m, b)
}
func (m *VmToVmAffinityUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmToVmAffinityUpdateRet.Marshal(b, m, deterministic)
}
func (m *VmToVmAffinityUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmToVmAffinityUpdateRet.Merge(m, src)
}
func (m *VmToVmAffinityUpdateRet) XXX_Size() int {
	return xxx_messageInfo_VmToVmAffinityUpdateRet.Size(m)
}
func (m *VmToVmAffinityUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmToVmAffinityUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmToVmAffinityUpdateRet proto.InternalMessageInfo

func (m *VmToVmAffinityUpdateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmToVmAffinityUpdateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmToVmAffinityUpdateTaskRet) Reset()         { *m = VmToVmAffinityUpdateTaskRet{} }
func (m *VmToVmAffinityUpdateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmToVmAffinityUpdateTaskRet) ProtoMessage()    {}
func (*VmToVmAffinityUpdateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{89}
}

func (m *VmToVmAffinityUpdateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmToVmAffinityUpdateTaskRet.Unmarshal(m, b)
}
func (m *VmToVmAffinityUpdateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmToVmAffinityUpdateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmToVmAffinityUpdateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmToVmAffinityUpdateTaskRet.Merge(m, src)
}
func (m *VmToVmAffinityUpdateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmToVmAffinityUpdateTaskRet.Size(m)
}
func (m *VmToVmAffinityUpdateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmToVmAffinityUpdateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmToVmAffinityUpdateTaskRet proto.InternalMessageInfo

type VmToVmAffinityGetArg struct {
	// List of Hypervisor agnostic Vm-Vm Affinity rule UUIDs.
	// If the input list is not provided, RPC call will return all the rules.
	AffinityUuidList     [][]byte `protobuf:"bytes,1,rep,name=affinity_uuid_list,json=affinityUuidList" json:"affinity_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmToVmAffinityGetArg) Reset()         { *m = VmToVmAffinityGetArg{} }
func (m *VmToVmAffinityGetArg) String() string { return proto.CompactTextString(m) }
func (*VmToVmAffinityGetArg) ProtoMessage()    {}
func (*VmToVmAffinityGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{90}
}

func (m *VmToVmAffinityGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmToVmAffinityGetArg.Unmarshal(m, b)
}
func (m *VmToVmAffinityGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmToVmAffinityGetArg.Marshal(b, m, deterministic)
}
func (m *VmToVmAffinityGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmToVmAffinityGetArg.Merge(m, src)
}
func (m *VmToVmAffinityGetArg) XXX_Size() int {
	return xxx_messageInfo_VmToVmAffinityGetArg.Size(m)
}
func (m *VmToVmAffinityGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmToVmAffinityGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmToVmAffinityGetArg proto.InternalMessageInfo

func (m *VmToVmAffinityGetArg) GetAffinityUuidList() [][]byte {
	if m != nil {
		return m.AffinityUuidList
	}
	return nil
}

type VmToVmAffinityGetRet struct {
	// Affinity info for the input affinity rule.
	AffinityInfoList     []*VmToVmAffinityInfo `protobuf:"bytes,1,rep,name=affinity_info_list,json=affinityInfoList" json:"affinity_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *VmToVmAffinityGetRet) Reset()         { *m = VmToVmAffinityGetRet{} }
func (m *VmToVmAffinityGetRet) String() string { return proto.CompactTextString(m) }
func (*VmToVmAffinityGetRet) ProtoMessage()    {}
func (*VmToVmAffinityGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{91}
}

func (m *VmToVmAffinityGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmToVmAffinityGetRet.Unmarshal(m, b)
}
func (m *VmToVmAffinityGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmToVmAffinityGetRet.Marshal(b, m, deterministic)
}
func (m *VmToVmAffinityGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmToVmAffinityGetRet.Merge(m, src)
}
func (m *VmToVmAffinityGetRet) XXX_Size() int {
	return xxx_messageInfo_VmToVmAffinityGetRet.Size(m)
}
func (m *VmToVmAffinityGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmToVmAffinityGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmToVmAffinityGetRet proto.InternalMessageInfo

func (m *VmToVmAffinityGetRet) GetAffinityInfoList() []*VmToVmAffinityInfo {
	if m != nil {
		return m.AffinityInfoList
	}
	return nil
}

type VmSnapshotGetArg struct {
	// The list of snapshot UUIDs to lookup.
	SnapshotUuidList     [][]byte `protobuf:"bytes,1,rep,name=snapshot_uuid_list,json=snapshotUuidList" json:"snapshot_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSnapshotGetArg) Reset()         { *m = VmSnapshotGetArg{} }
func (m *VmSnapshotGetArg) String() string { return proto.CompactTextString(m) }
func (*VmSnapshotGetArg) ProtoMessage()    {}
func (*VmSnapshotGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{92}
}

func (m *VmSnapshotGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSnapshotGetArg.Unmarshal(m, b)
}
func (m *VmSnapshotGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSnapshotGetArg.Marshal(b, m, deterministic)
}
func (m *VmSnapshotGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSnapshotGetArg.Merge(m, src)
}
func (m *VmSnapshotGetArg) XXX_Size() int {
	return xxx_messageInfo_VmSnapshotGetArg.Size(m)
}
func (m *VmSnapshotGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSnapshotGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmSnapshotGetArg proto.InternalMessageInfo

func (m *VmSnapshotGetArg) GetSnapshotUuidList() [][]byte {
	if m != nil {
		return m.SnapshotUuidList
	}
	return nil
}

type VmSnapshotGetRet struct {
	// The list of lookup results.
	SnapshotInfoList     []*VmSnapshotInfo `protobuf:"bytes,1,rep,name=snapshot_info_list,json=snapshotInfoList" json:"snapshot_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *VmSnapshotGetRet) Reset()         { *m = VmSnapshotGetRet{} }
func (m *VmSnapshotGetRet) String() string { return proto.CompactTextString(m) }
func (*VmSnapshotGetRet) ProtoMessage()    {}
func (*VmSnapshotGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{93}
}

func (m *VmSnapshotGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSnapshotGetRet.Unmarshal(m, b)
}
func (m *VmSnapshotGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSnapshotGetRet.Marshal(b, m, deterministic)
}
func (m *VmSnapshotGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSnapshotGetRet.Merge(m, src)
}
func (m *VmSnapshotGetRet) XXX_Size() int {
	return xxx_messageInfo_VmSnapshotGetRet.Size(m)
}
func (m *VmSnapshotGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSnapshotGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSnapshotGetRet proto.InternalMessageInfo

func (m *VmSnapshotGetRet) GetSnapshotInfoList() []*VmSnapshotInfo {
	if m != nil {
		return m.SnapshotInfoList
	}
	return nil
}

type VmSnapshotCreateArg struct {
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Snapshot UUID that the client can specify.
	Uuid []byte `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
	// The VM identifier.
	// This is a required field for SnapshotCreate.
	VmUuid []byte `protobuf:"bytes,3,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Required. Snapshot name.
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// Small description about the snapshot.
	Annotation *string `protobuf:"bytes,5,opt,name=annotation" json:"annotation,omitempty"`
	// The VM logical timestamp.
	VmLogicalTimestamp *int64 `protobuf:"varint,6,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,7,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,8,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSnapshotCreateArg) Reset()         { *m = VmSnapshotCreateArg{} }
func (m *VmSnapshotCreateArg) String() string { return proto.CompactTextString(m) }
func (*VmSnapshotCreateArg) ProtoMessage()    {}
func (*VmSnapshotCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{94}
}

func (m *VmSnapshotCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSnapshotCreateArg.Unmarshal(m, b)
}
func (m *VmSnapshotCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSnapshotCreateArg.Marshal(b, m, deterministic)
}
func (m *VmSnapshotCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSnapshotCreateArg.Merge(m, src)
}
func (m *VmSnapshotCreateArg) XXX_Size() int {
	return xxx_messageInfo_VmSnapshotCreateArg.Size(m)
}
func (m *VmSnapshotCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSnapshotCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmSnapshotCreateArg proto.InternalMessageInfo

const Default_VmSnapshotCreateArg_VmLogicalTimestamp int64 = -1

func (m *VmSnapshotCreateArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmSnapshotCreateArg) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *VmSnapshotCreateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmSnapshotCreateArg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VmSnapshotCreateArg) GetAnnotation() string {
	if m != nil && m.Annotation != nil {
		return *m.Annotation
	}
	return ""
}

func (m *VmSnapshotCreateArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmSnapshotCreateArg_VmLogicalTimestamp
}

func (m *VmSnapshotCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmSnapshotCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmSnapshotCreateRet struct {
	// A task to poll for completion. On success, the task will contain a
	// SnapshotCreateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSnapshotCreateRet) Reset()         { *m = VmSnapshotCreateRet{} }
func (m *VmSnapshotCreateRet) String() string { return proto.CompactTextString(m) }
func (*VmSnapshotCreateRet) ProtoMessage()    {}
func (*VmSnapshotCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{95}
}

func (m *VmSnapshotCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSnapshotCreateRet.Unmarshal(m, b)
}
func (m *VmSnapshotCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSnapshotCreateRet.Marshal(b, m, deterministic)
}
func (m *VmSnapshotCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSnapshotCreateRet.Merge(m, src)
}
func (m *VmSnapshotCreateRet) XXX_Size() int {
	return xxx_messageInfo_VmSnapshotCreateRet.Size(m)
}
func (m *VmSnapshotCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSnapshotCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSnapshotCreateRet proto.InternalMessageInfo

func (m *VmSnapshotCreateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmSnapshotCreateTaskRet struct {
	// The newly-created snapshot UUID.
	SnapshotUuid         []byte   `protobuf:"bytes,1,opt,name=snapshot_uuid,json=snapshotUuid" json:"snapshot_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSnapshotCreateTaskRet) Reset()         { *m = VmSnapshotCreateTaskRet{} }
func (m *VmSnapshotCreateTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmSnapshotCreateTaskRet) ProtoMessage()    {}
func (*VmSnapshotCreateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{96}
}

func (m *VmSnapshotCreateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSnapshotCreateTaskRet.Unmarshal(m, b)
}
func (m *VmSnapshotCreateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSnapshotCreateTaskRet.Marshal(b, m, deterministic)
}
func (m *VmSnapshotCreateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSnapshotCreateTaskRet.Merge(m, src)
}
func (m *VmSnapshotCreateTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmSnapshotCreateTaskRet.Size(m)
}
func (m *VmSnapshotCreateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSnapshotCreateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSnapshotCreateTaskRet proto.InternalMessageInfo

func (m *VmSnapshotCreateTaskRet) GetSnapshotUuid() []byte {
	if m != nil {
		return m.SnapshotUuid
	}
	return nil
}

type VmSnapshotDeleteArg struct {
	// The snapshot identifier.
	SnapshotUuid []byte `protobuf:"bytes,1,opt,name=snapshot_uuid,json=snapshotUuid" json:"snapshot_uuid,omitempty"`
	// Snapshot logical timestamp.
	LogicalTimestamp *int64 `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,4,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,5,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSnapshotDeleteArg) Reset()         { *m = VmSnapshotDeleteArg{} }
func (m *VmSnapshotDeleteArg) String() string { return proto.CompactTextString(m) }
func (*VmSnapshotDeleteArg) ProtoMessage()    {}
func (*VmSnapshotDeleteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{97}
}

func (m *VmSnapshotDeleteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSnapshotDeleteArg.Unmarshal(m, b)
}
func (m *VmSnapshotDeleteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSnapshotDeleteArg.Marshal(b, m, deterministic)
}
func (m *VmSnapshotDeleteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSnapshotDeleteArg.Merge(m, src)
}
func (m *VmSnapshotDeleteArg) XXX_Size() int {
	return xxx_messageInfo_VmSnapshotDeleteArg.Size(m)
}
func (m *VmSnapshotDeleteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSnapshotDeleteArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmSnapshotDeleteArg proto.InternalMessageInfo

const Default_VmSnapshotDeleteArg_LogicalTimestamp int64 = -1

func (m *VmSnapshotDeleteArg) GetSnapshotUuid() []byte {
	if m != nil {
		return m.SnapshotUuid
	}
	return nil
}

func (m *VmSnapshotDeleteArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_VmSnapshotDeleteArg_LogicalTimestamp
}

func (m *VmSnapshotDeleteArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmSnapshotDeleteArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmSnapshotDeleteArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmSnapshotDeleteRet struct {
	// A task to poll for completion. On success, the task will contain a
	// SnapshotDeleteTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSnapshotDeleteRet) Reset()         { *m = VmSnapshotDeleteRet{} }
func (m *VmSnapshotDeleteRet) String() string { return proto.CompactTextString(m) }
func (*VmSnapshotDeleteRet) ProtoMessage()    {}
func (*VmSnapshotDeleteRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{98}
}

func (m *VmSnapshotDeleteRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSnapshotDeleteRet.Unmarshal(m, b)
}
func (m *VmSnapshotDeleteRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSnapshotDeleteRet.Marshal(b, m, deterministic)
}
func (m *VmSnapshotDeleteRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSnapshotDeleteRet.Merge(m, src)
}
func (m *VmSnapshotDeleteRet) XXX_Size() int {
	return xxx_messageInfo_VmSnapshotDeleteRet.Size(m)
}
func (m *VmSnapshotDeleteRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSnapshotDeleteRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSnapshotDeleteRet proto.InternalMessageInfo

func (m *VmSnapshotDeleteRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmSnapshotDeleteTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmSnapshotDeleteTaskRet) Reset()         { *m = VmSnapshotDeleteTaskRet{} }
func (m *VmSnapshotDeleteTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmSnapshotDeleteTaskRet) ProtoMessage()    {}
func (*VmSnapshotDeleteTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{99}
}

func (m *VmSnapshotDeleteTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmSnapshotDeleteTaskRet.Unmarshal(m, b)
}
func (m *VmSnapshotDeleteTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmSnapshotDeleteTaskRet.Marshal(b, m, deterministic)
}
func (m *VmSnapshotDeleteTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmSnapshotDeleteTaskRet.Merge(m, src)
}
func (m *VmSnapshotDeleteTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmSnapshotDeleteTaskRet.Size(m)
}
func (m *VmSnapshotDeleteTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmSnapshotDeleteTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmSnapshotDeleteTaskRet proto.InternalMessageInfo

//-----------------------------------------------------------------------------
type DatastoreGetArg struct {
	// Hypervisor type. Valid only for ESXi.
	HypervisorType       *config.ConfigurationProto_ManagementServer_HypervisorType `protobuf:"varint,1,opt,name=hypervisor_type,json=hypervisorType,enum=nutanix.zeus.ConfigurationProto_ManagementServer_HypervisorType" json:"hypervisor_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *DatastoreGetArg) Reset()         { *m = DatastoreGetArg{} }
func (m *DatastoreGetArg) String() string { return proto.CompactTextString(m) }
func (*DatastoreGetArg) ProtoMessage()    {}
func (*DatastoreGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{100}
}

func (m *DatastoreGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatastoreGetArg.Unmarshal(m, b)
}
func (m *DatastoreGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatastoreGetArg.Marshal(b, m, deterministic)
}
func (m *DatastoreGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatastoreGetArg.Merge(m, src)
}
func (m *DatastoreGetArg) XXX_Size() int {
	return xxx_messageInfo_DatastoreGetArg.Size(m)
}
func (m *DatastoreGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_DatastoreGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_DatastoreGetArg proto.InternalMessageInfo

func (m *DatastoreGetArg) GetHypervisorType() config.ConfigurationProto_ManagementServer_HypervisorType {
	if m != nil && m.HypervisorType != nil {
		return *m.HypervisorType
	}
	return config.ConfigurationProto_ManagementServer_kVMware
}

//-----------------------------------------------------------------------------
type DatastoreGetRet struct {
	// The list of the datastores (NFS mounts) in the cluster.
	DatastoreConfigList  []*DatastoreConfig `protobuf:"bytes,1,rep,name=datastore_config_list,json=datastoreConfigList" json:"datastore_config_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DatastoreGetRet) Reset()         { *m = DatastoreGetRet{} }
func (m *DatastoreGetRet) String() string { return proto.CompactTextString(m) }
func (*DatastoreGetRet) ProtoMessage()    {}
func (*DatastoreGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{101}
}

func (m *DatastoreGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatastoreGetRet.Unmarshal(m, b)
}
func (m *DatastoreGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatastoreGetRet.Marshal(b, m, deterministic)
}
func (m *DatastoreGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatastoreGetRet.Merge(m, src)
}
func (m *DatastoreGetRet) XXX_Size() int {
	return xxx_messageInfo_DatastoreGetRet.Size(m)
}
func (m *DatastoreGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_DatastoreGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_DatastoreGetRet proto.InternalMessageInfo

func (m *DatastoreGetRet) GetDatastoreConfigList() []*DatastoreConfig {
	if m != nil {
		return m.DatastoreConfigList
	}
	return nil
}

//-----------------------------------------------------------------------------
type ManagementServerRegisterArg struct {
	// Required. Address of the Management Server e.g., vCenter Server.
	Address *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// Required. Port of the vCenter Server.
	Port *uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	// Required. Administrator username of the vCenter Server.
	AdminUsername *string `protobuf:"bytes,3,opt,name=admin_username,json=adminUsername" json:"admin_username,omitempty"`
	// Required. Administrator password of the vCenter Server.
	AdminPassword *string `protobuf:"bytes,4,opt,name=admin_password,json=adminPassword" json:"admin_password,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid       []byte   `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagementServerRegisterArg) Reset()         { *m = ManagementServerRegisterArg{} }
func (m *ManagementServerRegisterArg) String() string { return proto.CompactTextString(m) }
func (*ManagementServerRegisterArg) ProtoMessage()    {}
func (*ManagementServerRegisterArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{102}
}

func (m *ManagementServerRegisterArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagementServerRegisterArg.Unmarshal(m, b)
}
func (m *ManagementServerRegisterArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagementServerRegisterArg.Marshal(b, m, deterministic)
}
func (m *ManagementServerRegisterArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagementServerRegisterArg.Merge(m, src)
}
func (m *ManagementServerRegisterArg) XXX_Size() int {
	return xxx_messageInfo_ManagementServerRegisterArg.Size(m)
}
func (m *ManagementServerRegisterArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagementServerRegisterArg.DiscardUnknown(m)
}

var xxx_messageInfo_ManagementServerRegisterArg proto.InternalMessageInfo

func (m *ManagementServerRegisterArg) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *ManagementServerRegisterArg) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *ManagementServerRegisterArg) GetAdminUsername() string {
	if m != nil && m.AdminUsername != nil {
		return *m.AdminUsername
	}
	return ""
}

func (m *ManagementServerRegisterArg) GetAdminPassword() string {
	if m != nil && m.AdminPassword != nil {
		return *m.AdminPassword
	}
	return ""
}

func (m *ManagementServerRegisterArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *ManagementServerRegisterArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type ManagementServerRegisterRet struct {
	// A task to poll for completion. On success, the
	// task will contain a ManagementServerRegisterTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagementServerRegisterRet) Reset()         { *m = ManagementServerRegisterRet{} }
func (m *ManagementServerRegisterRet) String() string { return proto.CompactTextString(m) }
func (*ManagementServerRegisterRet) ProtoMessage()    {}
func (*ManagementServerRegisterRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{103}
}

func (m *ManagementServerRegisterRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagementServerRegisterRet.Unmarshal(m, b)
}
func (m *ManagementServerRegisterRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagementServerRegisterRet.Marshal(b, m, deterministic)
}
func (m *ManagementServerRegisterRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagementServerRegisterRet.Merge(m, src)
}
func (m *ManagementServerRegisterRet) XXX_Size() int {
	return xxx_messageInfo_ManagementServerRegisterRet.Size(m)
}
func (m *ManagementServerRegisterRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagementServerRegisterRet.DiscardUnknown(m)
}

var xxx_messageInfo_ManagementServerRegisterRet proto.InternalMessageInfo

func (m *ManagementServerRegisterRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type ManagementServerRegisterTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagementServerRegisterTaskRet) Reset()         { *m = ManagementServerRegisterTaskRet{} }
func (m *ManagementServerRegisterTaskRet) String() string { return proto.CompactTextString(m) }
func (*ManagementServerRegisterTaskRet) ProtoMessage()    {}
func (*ManagementServerRegisterTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{104}
}

func (m *ManagementServerRegisterTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagementServerRegisterTaskRet.Unmarshal(m, b)
}
func (m *ManagementServerRegisterTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagementServerRegisterTaskRet.Marshal(b, m, deterministic)
}
func (m *ManagementServerRegisterTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagementServerRegisterTaskRet.Merge(m, src)
}
func (m *ManagementServerRegisterTaskRet) XXX_Size() int {
	return xxx_messageInfo_ManagementServerRegisterTaskRet.Size(m)
}
func (m *ManagementServerRegisterTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagementServerRegisterTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_ManagementServerRegisterTaskRet proto.InternalMessageInfo

type ManagementServerUnregisterArg struct {
	// Required. Address of the Management Server e.g., vCenter Server.
	Address *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// Required. Port of the vCenter Server.
	Port *uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	// Required. Administrator username of the vCenter Server.
	AdminUsername *string `protobuf:"bytes,3,opt,name=admin_username,json=adminUsername" json:"admin_username,omitempty"`
	// Required. Administrator password of the vCenter Server.
	AdminPassword *string `protobuf:"bytes,4,opt,name=admin_password,json=adminPassword" json:"admin_password,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task UUID.
	ParentTaskUuid       []byte   `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagementServerUnregisterArg) Reset()         { *m = ManagementServerUnregisterArg{} }
func (m *ManagementServerUnregisterArg) String() string { return proto.CompactTextString(m) }
func (*ManagementServerUnregisterArg) ProtoMessage()    {}
func (*ManagementServerUnregisterArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{105}
}

func (m *ManagementServerUnregisterArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagementServerUnregisterArg.Unmarshal(m, b)
}
func (m *ManagementServerUnregisterArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagementServerUnregisterArg.Marshal(b, m, deterministic)
}
func (m *ManagementServerUnregisterArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagementServerUnregisterArg.Merge(m, src)
}
func (m *ManagementServerUnregisterArg) XXX_Size() int {
	return xxx_messageInfo_ManagementServerUnregisterArg.Size(m)
}
func (m *ManagementServerUnregisterArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagementServerUnregisterArg.DiscardUnknown(m)
}

var xxx_messageInfo_ManagementServerUnregisterArg proto.InternalMessageInfo

func (m *ManagementServerUnregisterArg) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *ManagementServerUnregisterArg) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *ManagementServerUnregisterArg) GetAdminUsername() string {
	if m != nil && m.AdminUsername != nil {
		return *m.AdminUsername
	}
	return ""
}

func (m *ManagementServerUnregisterArg) GetAdminPassword() string {
	if m != nil && m.AdminPassword != nil {
		return *m.AdminPassword
	}
	return ""
}

func (m *ManagementServerUnregisterArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *ManagementServerUnregisterArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

type ManagementServerUnregisterRet struct {
	// A task to poll for completion. On success, the
	// task will contain a ManagementServerUnregisterTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagementServerUnregisterRet) Reset()         { *m = ManagementServerUnregisterRet{} }
func (m *ManagementServerUnregisterRet) String() string { return proto.CompactTextString(m) }
func (*ManagementServerUnregisterRet) ProtoMessage()    {}
func (*ManagementServerUnregisterRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{106}
}

func (m *ManagementServerUnregisterRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagementServerUnregisterRet.Unmarshal(m, b)
}
func (m *ManagementServerUnregisterRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagementServerUnregisterRet.Marshal(b, m, deterministic)
}
func (m *ManagementServerUnregisterRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagementServerUnregisterRet.Merge(m, src)
}
func (m *ManagementServerUnregisterRet) XXX_Size() int {
	return xxx_messageInfo_ManagementServerUnregisterRet.Size(m)
}
func (m *ManagementServerUnregisterRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagementServerUnregisterRet.DiscardUnknown(m)
}

var xxx_messageInfo_ManagementServerUnregisterRet proto.InternalMessageInfo

func (m *ManagementServerUnregisterRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type ManagementServerUnregisterTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagementServerUnregisterTaskRet) Reset()         { *m = ManagementServerUnregisterTaskRet{} }
func (m *ManagementServerUnregisterTaskRet) String() string { return proto.CompactTextString(m) }
func (*ManagementServerUnregisterTaskRet) ProtoMessage()    {}
func (*ManagementServerUnregisterTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{107}
}

func (m *ManagementServerUnregisterTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagementServerUnregisterTaskRet.Unmarshal(m, b)
}
func (m *ManagementServerUnregisterTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagementServerUnregisterTaskRet.Marshal(b, m, deterministic)
}
func (m *ManagementServerUnregisterTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagementServerUnregisterTaskRet.Merge(m, src)
}
func (m *ManagementServerUnregisterTaskRet) XXX_Size() int {
	return xxx_messageInfo_ManagementServerUnregisterTaskRet.Size(m)
}
func (m *ManagementServerUnregisterTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagementServerUnregisterTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_ManagementServerUnregisterTaskRet proto.InternalMessageInfo

type ManagementServerGetArg struct {
	// Flag to fetch the extension key and cert files. The cert
	// and key values are returned only when the management server
	// has been registered and is in use.
	IncludeCertAndKeyValues *bool    `protobuf:"varint,1,opt,name=include_cert_and_key_values,json=includeCertAndKeyValues" json:"include_cert_and_key_values,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *ManagementServerGetArg) Reset()         { *m = ManagementServerGetArg{} }
func (m *ManagementServerGetArg) String() string { return proto.CompactTextString(m) }
func (*ManagementServerGetArg) ProtoMessage()    {}
func (*ManagementServerGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{108}
}

func (m *ManagementServerGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagementServerGetArg.Unmarshal(m, b)
}
func (m *ManagementServerGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagementServerGetArg.Marshal(b, m, deterministic)
}
func (m *ManagementServerGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagementServerGetArg.Merge(m, src)
}
func (m *ManagementServerGetArg) XXX_Size() int {
	return xxx_messageInfo_ManagementServerGetArg.Size(m)
}
func (m *ManagementServerGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagementServerGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_ManagementServerGetArg proto.InternalMessageInfo

func (m *ManagementServerGetArg) GetIncludeCertAndKeyValues() bool {
	if m != nil && m.IncludeCertAndKeyValues != nil {
		return *m.IncludeCertAndKeyValues
	}
	return false
}

type ManagementServerGetRet struct {
	MgmtServerInfo       []*ServerInfo `protobuf:"bytes,1,rep,name=mgmt_server_info,json=mgmtServerInfo" json:"mgmt_server_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ManagementServerGetRet) Reset()         { *m = ManagementServerGetRet{} }
func (m *ManagementServerGetRet) String() string { return proto.CompactTextString(m) }
func (*ManagementServerGetRet) ProtoMessage()    {}
func (*ManagementServerGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{109}
}

func (m *ManagementServerGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagementServerGetRet.Unmarshal(m, b)
}
func (m *ManagementServerGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagementServerGetRet.Marshal(b, m, deterministic)
}
func (m *ManagementServerGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagementServerGetRet.Merge(m, src)
}
func (m *ManagementServerGetRet) XXX_Size() int {
	return xxx_messageInfo_ManagementServerGetRet.Size(m)
}
func (m *ManagementServerGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagementServerGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_ManagementServerGetRet proto.InternalMessageInfo

func (m *ManagementServerGetRet) GetMgmtServerInfo() []*ServerInfo {
	if m != nil {
		return m.MgmtServerInfo
	}
	return nil
}

type VmRestoreArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// The VM logical timestamp, optional for consistency.
	VmLogicalTimestamp *int64 `protobuf:"varint,2,opt,name=vm_logical_timestamp,json=vmLogicalTimestamp,def=-1" json:"vm_logical_timestamp,omitempty"`
	// The UUID of the snapshot from which to restore.
	SnapshotUuid []byte `protobuf:"bytes,3,opt,name=snapshot_uuid,json=snapshotUuid" json:"snapshot_uuid,omitempty"`
	// Whether to reset the VM's current networking configuration. If this flag
	// is set, the VM's current network adapters will be replaced with the
	// network adapters specified in the snapshot. Otherwise, the VM's current
	// networking adapters will be retained, and the network adapters specified
	// in the snapshot will be ignored.
	RestoreNetworkConfig *bool `protobuf:"varint,4,opt,name=restore_network_config,json=restoreNetworkConfig,def=1" json:"restore_network_config,omitempty"`
	// Task UUID. This is used as an idempotence token.
	TaskUuid []byte `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// Parent task.
	ParentTaskUuid []byte `protobuf:"bytes,6,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set. Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId    *uint64  `protobuf:"varint,7,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRestoreArg) Reset()         { *m = VmRestoreArg{} }
func (m *VmRestoreArg) String() string { return proto.CompactTextString(m) }
func (*VmRestoreArg) ProtoMessage()    {}
func (*VmRestoreArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{110}
}

func (m *VmRestoreArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRestoreArg.Unmarshal(m, b)
}
func (m *VmRestoreArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRestoreArg.Marshal(b, m, deterministic)
}
func (m *VmRestoreArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRestoreArg.Merge(m, src)
}
func (m *VmRestoreArg) XXX_Size() int {
	return xxx_messageInfo_VmRestoreArg.Size(m)
}
func (m *VmRestoreArg) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRestoreArg.DiscardUnknown(m)
}

var xxx_messageInfo_VmRestoreArg proto.InternalMessageInfo

const Default_VmRestoreArg_VmLogicalTimestamp int64 = -1
const Default_VmRestoreArg_RestoreNetworkConfig bool = true

func (m *VmRestoreArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *VmRestoreArg) GetVmLogicalTimestamp() int64 {
	if m != nil && m.VmLogicalTimestamp != nil {
		return *m.VmLogicalTimestamp
	}
	return Default_VmRestoreArg_VmLogicalTimestamp
}

func (m *VmRestoreArg) GetSnapshotUuid() []byte {
	if m != nil {
		return m.SnapshotUuid
	}
	return nil
}

func (m *VmRestoreArg) GetRestoreNetworkConfig() bool {
	if m != nil && m.RestoreNetworkConfig != nil {
		return *m.RestoreNetworkConfig
	}
	return Default_VmRestoreArg_RestoreNetworkConfig
}

func (m *VmRestoreArg) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *VmRestoreArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *VmRestoreArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

type VmRestoreRet struct {
	// A task to poll for completion. On success, the task will contain a
	// VmRestoreTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRestoreRet) Reset()         { *m = VmRestoreRet{} }
func (m *VmRestoreRet) String() string { return proto.CompactTextString(m) }
func (*VmRestoreRet) ProtoMessage()    {}
func (*VmRestoreRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{111}
}

func (m *VmRestoreRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRestoreRet.Unmarshal(m, b)
}
func (m *VmRestoreRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRestoreRet.Marshal(b, m, deterministic)
}
func (m *VmRestoreRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRestoreRet.Merge(m, src)
}
func (m *VmRestoreRet) XXX_Size() int {
	return xxx_messageInfo_VmRestoreRet.Size(m)
}
func (m *VmRestoreRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRestoreRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmRestoreRet proto.InternalMessageInfo

func (m *VmRestoreRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type VmRestoreTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmRestoreTaskRet) Reset()         { *m = VmRestoreTaskRet{} }
func (m *VmRestoreTaskRet) String() string { return proto.CompactTextString(m) }
func (*VmRestoreTaskRet) ProtoMessage()    {}
func (*VmRestoreTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{112}
}

func (m *VmRestoreTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmRestoreTaskRet.Unmarshal(m, b)
}
func (m *VmRestoreTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmRestoreTaskRet.Marshal(b, m, deterministic)
}
func (m *VmRestoreTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmRestoreTaskRet.Merge(m, src)
}
func (m *VmRestoreTaskRet) XXX_Size() int {
	return xxx_messageInfo_VmRestoreTaskRet.Size(m)
}
func (m *VmRestoreTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_VmRestoreTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_VmRestoreTaskRet proto.InternalMessageInfo

type UpdateVmDbStateArg struct {
	// The VM identifier.
	VmUuid []byte `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
	// Cerebro information.
	CerebroVmInfo *CerebroVmInfo `protobuf:"bytes,2,opt,name=cerebro_vm_info,json=cerebroVmInfo" json:"cerebro_vm_info,omitempty"`
	// NGT information.
	NgtVmInfo *NgtVmInfo `protobuf:"bytes,3,opt,name=ngt_vm_info,json=ngtVmInfo" json:"ngt_vm_info,omitempty"`
	// QOS information.
	QosVmInfo            *QosVmInfo `protobuf:"bytes,4,opt,name=qos_vm_info,json=qosVmInfo" json:"qos_vm_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpdateVmDbStateArg) Reset()         { *m = UpdateVmDbStateArg{} }
func (m *UpdateVmDbStateArg) String() string { return proto.CompactTextString(m) }
func (*UpdateVmDbStateArg) ProtoMessage()    {}
func (*UpdateVmDbStateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{113}
}

func (m *UpdateVmDbStateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateVmDbStateArg.Unmarshal(m, b)
}
func (m *UpdateVmDbStateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateVmDbStateArg.Marshal(b, m, deterministic)
}
func (m *UpdateVmDbStateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVmDbStateArg.Merge(m, src)
}
func (m *UpdateVmDbStateArg) XXX_Size() int {
	return xxx_messageInfo_UpdateVmDbStateArg.Size(m)
}
func (m *UpdateVmDbStateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVmDbStateArg.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVmDbStateArg proto.InternalMessageInfo

func (m *UpdateVmDbStateArg) GetVmUuid() []byte {
	if m != nil {
		return m.VmUuid
	}
	return nil
}

func (m *UpdateVmDbStateArg) GetCerebroVmInfo() *CerebroVmInfo {
	if m != nil {
		return m.CerebroVmInfo
	}
	return nil
}

func (m *UpdateVmDbStateArg) GetNgtVmInfo() *NgtVmInfo {
	if m != nil {
		return m.NgtVmInfo
	}
	return nil
}

func (m *UpdateVmDbStateArg) GetQosVmInfo() *QosVmInfo {
	if m != nil {
		return m.QosVmInfo
	}
	return nil
}

type UpdateVmDbStateRet struct {
	// A task to poll for completion. On success, the task will contain
	// UpdateVmDbStateTaskRet.
	TaskUuid             []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateVmDbStateRet) Reset()         { *m = UpdateVmDbStateRet{} }
func (m *UpdateVmDbStateRet) String() string { return proto.CompactTextString(m) }
func (*UpdateVmDbStateRet) ProtoMessage()    {}
func (*UpdateVmDbStateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{114}
}

func (m *UpdateVmDbStateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateVmDbStateRet.Unmarshal(m, b)
}
func (m *UpdateVmDbStateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateVmDbStateRet.Marshal(b, m, deterministic)
}
func (m *UpdateVmDbStateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVmDbStateRet.Merge(m, src)
}
func (m *UpdateVmDbStateRet) XXX_Size() int {
	return xxx_messageInfo_UpdateVmDbStateRet.Size(m)
}
func (m *UpdateVmDbStateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVmDbStateRet.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVmDbStateRet proto.InternalMessageInfo

func (m *UpdateVmDbStateRet) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

type UpdateVmDbStateTaskRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateVmDbStateTaskRet) Reset()         { *m = UpdateVmDbStateTaskRet{} }
func (m *UpdateVmDbStateTaskRet) String() string { return proto.CompactTextString(m) }
func (*UpdateVmDbStateTaskRet) ProtoMessage()    {}
func (*UpdateVmDbStateTaskRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ceb20bbe0dfcd3c7, []int{115}
}

func (m *UpdateVmDbStateTaskRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateVmDbStateTaskRet.Unmarshal(m, b)
}
func (m *UpdateVmDbStateTaskRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateVmDbStateTaskRet.Marshal(b, m, deterministic)
}
func (m *UpdateVmDbStateTaskRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVmDbStateTaskRet.Merge(m, src)
}
func (m *UpdateVmDbStateTaskRet) XXX_Size() int {
	return xxx_messageInfo_UpdateVmDbStateTaskRet.Size(m)
}
func (m *UpdateVmDbStateTaskRet) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVmDbStateTaskRet.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVmDbStateTaskRet proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BatchRequestArg)(nil), "nutanix.uhura.BatchRequestArg")
	proto.RegisterType((*BatchRequestRet)(nil), "nutanix.uhura.BatchRequestRet")
	proto.RegisterType((*UuidMappingUpdateArg)(nil), "nutanix.uhura.UuidMappingUpdateArg")
	proto.RegisterType((*UuidMappingUpdateRet)(nil), "nutanix.uhura.UuidMappingUpdateRet")
	proto.RegisterType((*UuidMappingDeleteArg)(nil), "nutanix.uhura.UuidMappingDeleteArg")
	proto.RegisterType((*UuidMappingDeleteRet)(nil), "nutanix.uhura.UuidMappingDeleteRet")
	proto.RegisterType((*VmCreateArg)(nil), "nutanix.uhura.VmCreateArg")
	proto.RegisterType((*VmCreateRet)(nil), "nutanix.uhura.VmCreateRet")
	proto.RegisterType((*VmCreateTaskRet)(nil), "nutanix.uhura.VmCreateTaskRet")
	proto.RegisterType((*VmCloneArg)(nil), "nutanix.uhura.VmCloneArg")
	proto.RegisterType((*VmCloneRet)(nil), "nutanix.uhura.VmCloneRet")
	proto.RegisterType((*VmCloneTaskRet)(nil), "nutanix.uhura.VmCloneTaskRet")
	proto.RegisterType((*VmCloneTaskRet_VmCloneResponse)(nil), "nutanix.uhura.VmCloneTaskRet.VmCloneResponse")
	proto.RegisterType((*VmUpdateArg)(nil), "nutanix.uhura.VmUpdateArg")
	proto.RegisterType((*VmUpdateRet)(nil), "nutanix.uhura.VmUpdateRet")
	proto.RegisterType((*VmUpdateTaskRet)(nil), "nutanix.uhura.VmUpdateTaskRet")
	proto.RegisterType((*VmUpgradeArg)(nil), "nutanix.uhura.VmUpgradeArg")
	proto.RegisterType((*VmUpgradeRet)(nil), "nutanix.uhura.VmUpgradeRet")
	proto.RegisterType((*VmUpgradeTaskRet)(nil), "nutanix.uhura.VmUpgradeTaskRet")
	proto.RegisterType((*VmChangePowerStateArg)(nil), "nutanix.uhura.VmChangePowerStateArg")
	proto.RegisterType((*VmChangePowerStateRet)(nil), "nutanix.uhura.VmChangePowerStateRet")
	proto.RegisterType((*VmChangePowerStateTaskRet)(nil), "nutanix.uhura.VmChangePowerStateTaskRet")
	proto.RegisterType((*VmGuestToolsArg)(nil), "nutanix.uhura.VmGuestToolsArg")
	proto.RegisterType((*VmGuestToolsRet)(nil), "nutanix.uhura.VmGuestToolsRet")
	proto.RegisterType((*VmGuestToolsTaskRet)(nil), "nutanix.uhura.VmGuestToolsTaskRet")
	proto.RegisterType((*VmDeleteArg)(nil), "nutanix.uhura.VmDeleteArg")
	proto.RegisterType((*VmDeleteRet)(nil), "nutanix.uhura.VmDeleteRet")
	proto.RegisterType((*VmDeleteTaskRet)(nil), "nutanix.uhura.VmDeleteTaskRet")
	proto.RegisterType((*VmGetArg)(nil), "nutanix.uhura.VmGetArg")
	proto.RegisterType((*VmGetRet)(nil), "nutanix.uhura.VmGetRet")
	proto.RegisterType((*VmDiskAttachArg)(nil), "nutanix.uhura.VmDiskAttachArg")
	proto.RegisterType((*VmDiskAttachRet)(nil), "nutanix.uhura.VmDiskAttachRet")
	proto.RegisterType((*VmDiskAttachTaskRet)(nil), "nutanix.uhura.VmDiskAttachTaskRet")
	proto.RegisterType((*VmDiskDetachArg)(nil), "nutanix.uhura.VmDiskDetachArg")
	proto.RegisterType((*VmDiskDetachRet)(nil), "nutanix.uhura.VmDiskDetachRet")
	proto.RegisterType((*VmDiskDetachTaskRet)(nil), "nutanix.uhura.VmDiskDetachTaskRet")
	proto.RegisterType((*VmDiskUpdateArg)(nil), "nutanix.uhura.VmDiskUpdateArg")
	proto.RegisterType((*VmDiskUpdateArg_VmDiskUpdateConfig)(nil), "nutanix.uhura.VmDiskUpdateArg.VmDiskUpdateConfig")
	proto.RegisterType((*VmDiskUpdateRet)(nil), "nutanix.uhura.VmDiskUpdateRet")
	proto.RegisterType((*VmDiskUpdateTaskRet)(nil), "nutanix.uhura.VmDiskUpdateTaskRet")
	proto.RegisterType((*VmDiskCloneConfigGetArg)(nil), "nutanix.uhura.VmDiskCloneConfigGetArg")
	proto.RegisterType((*VmDiskCloneConfigGetRet)(nil), "nutanix.uhura.VmDiskCloneConfigGetRet")
	proto.RegisterType((*VmCreateWithCustomizeArg)(nil), "nutanix.uhura.VmCreateWithCustomizeArg")
	proto.RegisterType((*VmCreateWithCustomizeRet)(nil), "nutanix.uhura.VmCreateWithCustomizeRet")
	proto.RegisterType((*VmCreateWithCustomizeTaskRet)(nil), "nutanix.uhura.VmCreateWithCustomizeTaskRet")
	proto.RegisterType((*VmCloneWithCustomizeArg)(nil), "nutanix.uhura.VmCloneWithCustomizeArg")
	proto.RegisterType((*VmCloneWithCustomizeRet)(nil), "nutanix.uhura.VmCloneWithCustomizeRet")
	proto.RegisterType((*VmCloneWithCustomizeTaskRet)(nil), "nutanix.uhura.VmCloneWithCustomizeTaskRet")
	proto.RegisterType((*VmCloneWithCustomizeTaskRet_VmCloneResponse)(nil), "nutanix.uhura.VmCloneWithCustomizeTaskRet.VmCloneResponse")
	proto.RegisterType((*VmDestroyArg)(nil), "nutanix.uhura.VmDestroyArg")
	proto.RegisterType((*VmDestroyRet)(nil), "nutanix.uhura.VmDestroyRet")
	proto.RegisterType((*VmDestroyTaskRet)(nil), "nutanix.uhura.VmDestroyTaskRet")
	proto.RegisterType((*VmRegisterArg)(nil), "nutanix.uhura.VmRegisterArg")
	proto.RegisterType((*VmRegisterRet)(nil), "nutanix.uhura.VmRegisterRet")
	proto.RegisterType((*VmRegisterTaskRet)(nil), "nutanix.uhura.VmRegisterTaskRet")
	proto.RegisterType((*VmUnregisterArg)(nil), "nutanix.uhura.VmUnregisterArg")
	proto.RegisterType((*VmUnregisterRet)(nil), "nutanix.uhura.VmUnregisterRet")
	proto.RegisterType((*VmUnregisterTaskRet)(nil), "nutanix.uhura.VmUnregisterTaskRet")
	proto.RegisterType((*VmUpdateNotificationArg)(nil), "nutanix.uhura.VmUpdateNotificationArg")
	proto.RegisterType((*VmUpdateNotificationRet)(nil), "nutanix.uhura.VmUpdateNotificationRet")
	proto.RegisterType((*VmUuidInfo)(nil), "nutanix.uhura.VmUuidInfo")
	proto.RegisterType((*VmGetAllUuidsArg)(nil), "nutanix.uhura.VmGetAllUuidsArg")
	proto.RegisterType((*VmGetAllUuidsRet)(nil), "nutanix.uhura.VmGetAllUuidsRet")
	proto.RegisterType((*VmUpdateAllUuidsArg)(nil), "nutanix.uhura.VmUpdateAllUuidsArg")
	proto.RegisterType((*VmUpdateAllUuidsRet)(nil), "nutanix.uhura.VmUpdateAllUuidsRet")
	proto.RegisterType((*VmUpdateUuidsArg)(nil), "nutanix.uhura.VmUpdateUuidsArg")
	proto.RegisterType((*VmUpdateUuidsRet)(nil), "nutanix.uhura.VmUpdateUuidsRet")
	proto.RegisterType((*VmGetConsoleTicketArg)(nil), "nutanix.uhura.VmGetConsoleTicketArg")
	proto.RegisterType((*VmGetConsoleTicketRet)(nil), "nutanix.uhura.VmGetConsoleTicketRet")
	proto.RegisterType((*VmNicCreateArg)(nil), "nutanix.uhura.VmNicCreateArg")
	proto.RegisterType((*VmNicCreateRet)(nil), "nutanix.uhura.VmNicCreateRet")
	proto.RegisterType((*VmNicCreateTaskRet)(nil), "nutanix.uhura.VmNicCreateTaskRet")
	proto.RegisterType((*VmNicGetArg)(nil), "nutanix.uhura.VmNicGetArg")
	proto.RegisterType((*VmNicGetRet)(nil), "nutanix.uhura.VmNicGetRet")
	proto.RegisterType((*VmNicUpdateArg)(nil), "nutanix.uhura.VmNicUpdateArg")
	proto.RegisterType((*VmNicUpdateRet)(nil), "nutanix.uhura.VmNicUpdateRet")
	proto.RegisterType((*VmNicUpdateTaskRet)(nil), "nutanix.uhura.VmNicUpdateTaskRet")
	proto.RegisterType((*VmNicDeleteArg)(nil), "nutanix.uhura.VmNicDeleteArg")
	proto.RegisterType((*VmNicDeleteRet)(nil), "nutanix.uhura.VmNicDeleteRet")
	proto.RegisterType((*VmNicDeleteTaskRet)(nil), "nutanix.uhura.VmNicDeleteTaskRet")
	proto.RegisterType((*VmNicListArg)(nil), "nutanix.uhura.VmNicListArg")
	proto.RegisterType((*VmNicListRet)(nil), "nutanix.uhura.VmNicListRet")
	proto.RegisterType((*NetworkGetArg)(nil), "nutanix.uhura.NetworkGetArg")
	proto.RegisterType((*NetworkGetRet)(nil), "nutanix.uhura.NetworkGetRet")
	proto.RegisterType((*VmToVmAffinityCreateArg)(nil), "nutanix.uhura.VmToVmAffinityCreateArg")
	proto.RegisterType((*VmToVmAffinityCreateRet)(nil), "nutanix.uhura.VmToVmAffinityCreateRet")
	proto.RegisterType((*VmToVmAffinityCreateTaskRet)(nil), "nutanix.uhura.VmToVmAffinityCreateTaskRet")
	proto.RegisterType((*VmToVmAffinityDeleteArg)(nil), "nutanix.uhura.VmToVmAffinityDeleteArg")
	proto.RegisterType((*VmToVmAffinityDeleteRet)(nil), "nutanix.uhura.VmToVmAffinityDeleteRet")
	proto.RegisterType((*VmToVmAffinityDeleteTaskRet)(nil), "nutanix.uhura.VmToVmAffinityDeleteTaskRet")
	proto.RegisterType((*VmToVmAffinityUpdateArg)(nil), "nutanix.uhura.VmToVmAffinityUpdateArg")
	proto.RegisterType((*VmToVmAffinityUpdateRet)(nil), "nutanix.uhura.VmToVmAffinityUpdateRet")
	proto.RegisterType((*VmToVmAffinityUpdateTaskRet)(nil), "nutanix.uhura.VmToVmAffinityUpdateTaskRet")
	proto.RegisterType((*VmToVmAffinityGetArg)(nil), "nutanix.uhura.VmToVmAffinityGetArg")
	proto.RegisterType((*VmToVmAffinityGetRet)(nil), "nutanix.uhura.VmToVmAffinityGetRet")
	proto.RegisterType((*VmSnapshotGetArg)(nil), "nutanix.uhura.VmSnapshotGetArg")
	proto.RegisterType((*VmSnapshotGetRet)(nil), "nutanix.uhura.VmSnapshotGetRet")
	proto.RegisterType((*VmSnapshotCreateArg)(nil), "nutanix.uhura.VmSnapshotCreateArg")
	proto.RegisterType((*VmSnapshotCreateRet)(nil), "nutanix.uhura.VmSnapshotCreateRet")
	proto.RegisterType((*VmSnapshotCreateTaskRet)(nil), "nutanix.uhura.VmSnapshotCreateTaskRet")
	proto.RegisterType((*VmSnapshotDeleteArg)(nil), "nutanix.uhura.VmSnapshotDeleteArg")
	proto.RegisterType((*VmSnapshotDeleteRet)(nil), "nutanix.uhura.VmSnapshotDeleteRet")
	proto.RegisterType((*VmSnapshotDeleteTaskRet)(nil), "nutanix.uhura.VmSnapshotDeleteTaskRet")
	proto.RegisterType((*DatastoreGetArg)(nil), "nutanix.uhura.DatastoreGetArg")
	proto.RegisterType((*DatastoreGetRet)(nil), "nutanix.uhura.DatastoreGetRet")
	proto.RegisterType((*ManagementServerRegisterArg)(nil), "nutanix.uhura.ManagementServerRegisterArg")
	proto.RegisterType((*ManagementServerRegisterRet)(nil), "nutanix.uhura.ManagementServerRegisterRet")
	proto.RegisterType((*ManagementServerRegisterTaskRet)(nil), "nutanix.uhura.ManagementServerRegisterTaskRet")
	proto.RegisterType((*ManagementServerUnregisterArg)(nil), "nutanix.uhura.ManagementServerUnregisterArg")
	proto.RegisterType((*ManagementServerUnregisterRet)(nil), "nutanix.uhura.ManagementServerUnregisterRet")
	proto.RegisterType((*ManagementServerUnregisterTaskRet)(nil), "nutanix.uhura.ManagementServerUnregisterTaskRet")
	proto.RegisterType((*ManagementServerGetArg)(nil), "nutanix.uhura.ManagementServerGetArg")
	proto.RegisterType((*ManagementServerGetRet)(nil), "nutanix.uhura.ManagementServerGetRet")
	proto.RegisterType((*VmRestoreArg)(nil), "nutanix.uhura.VmRestoreArg")
	proto.RegisterType((*VmRestoreRet)(nil), "nutanix.uhura.VmRestoreRet")
	proto.RegisterType((*VmRestoreTaskRet)(nil), "nutanix.uhura.VmRestoreTaskRet")
	proto.RegisterType((*UpdateVmDbStateArg)(nil), "nutanix.uhura.UpdateVmDbStateArg")
	proto.RegisterType((*UpdateVmDbStateRet)(nil), "nutanix.uhura.UpdateVmDbStateRet")
	proto.RegisterType((*UpdateVmDbStateTaskRet)(nil), "nutanix.uhura.UpdateVmDbStateTaskRet")
}

func init() { proto.RegisterFile("uhura/uhura_interface.proto", fileDescriptor_ceb20bbe0dfcd3c7) }

var fileDescriptor_ceb20bbe0dfcd3c7 = []byte{
	// 5372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x7c, 0xcb, 0x6f, 0x1c, 0x47,
	0x7a, 0x38, 0x86, 0x43, 0xf1, 0x51, 0xc3, 0xe1, 0xa3, 0x48, 0x8a, 0xcd, 0xa1, 0x25, 0x51, 0x23,
	0x59, 0xa2, 0x28, 0x89, 0xb2, 0x29, 0xaf, 0x65, 0xcb, 0xf6, 0xfe, 0x4c, 0x91, 0xd6, 0xe3, 0x67,
	0x93, 0xe2, 0x36, 0xa9, 0x71, 0xb0, 0x80, 0xd1, 0x69, 0x76, 0x17, 0x67, 0x1a, 0x9c, 0x7e, 0xb8,
	0xaa, 0x67, 0x64, 0x2a, 0x7b, 0x58, 0x04, 0x48, 0xb0, 0xc8, 0x03, 0xd9, 0x9c, 0xf6, 0x98, 0x00,
	0xb9, 0xef, 0x4d, 0xf9, 0x13, 0x72, 0x48, 0x02, 0xe4, 0x90, 0x3f, 0x20, 0xc9, 0x5e, 0x82, 0x1c,
	0xb2, 0x97, 0x5c, 0x83, 0x45, 0x50, 0x5f, 0x55, 0xbf, 0xa6, 0xab, 0x67, 0x86, 0x36, 0xe5, 0xcd,
	0xe6, 0x22, 0xcd, 0xd4, 0xf7, 0xa8, 0xaa, 0xaf, 0xbe, 0xef, 0xab, 0xef, 0x51, 0x43, 0xb4, 0xd2,
	0x69, 0x75, 0xa8, 0x79, 0x0f, 0xfe, 0x35, 0x1c, 0x2f, 0x24, 0xf4, 0xd8, 0xb4, 0xc8, 0x46, 0x40,
	0xfd, 0xd0, 0xc7, 0x55, 0xaf, 0x13, 0x9a, 0x9e, 0xf3, 0xcd, 0x06, 0x80, 0x6b, 0x4b, 0xad, 0xd3,
	0x80, 0x50, 0xc7, 0x0b, 0xef, 0x45, 0x1f, 0x04, 0x5e, 0xed, 0x4a, 0x27, 0x74, 0xda, 0xf7, 0x58,
	0xdb, 0x38, 0xea, 0x1c, 0xb3, 0x7b, 0x47, 0x26, 0x23, 0xf7, 0x18, 0xa1, 0x5d, 0x27, 0x62, 0x54,
	0xab, 0x65, 0x10, 0x3c, 0x12, 0xde, 0xa3, 0x81, 0x25, 0x61, 0xda, 0x2b, 0xd2, 0x61, 0xf7, 0x2c,
	0xdf, 0x3b, 0x76, 0x9a, 0x1d, 0x6a, 0x86, 0x8e, 0xef, 0x49, 0xc8, 0x52, 0x7a, 0x6d, 0x84, 0x52,
	0x9f, 0xaa, 0x00, 0xe1, 0x69, 0x40, 0x98, 0x00, 0xd4, 0xf7, 0xd1, 0xcc, 0x23, 0x33, 0xb4, 0x5a,
	0x3a, 0xf9, 0xba, 0x43, 0x58, 0xb8, 0x45, 0x9b, 0xf8, 0x13, 0x34, 0x45, 0xc5, 0x37, 0xa3, 0xed,
	0xb0, 0x50, 0x2b, 0xad, 0x96, 0xd7, 0x2a, 0x9b, 0xb5, 0x8d, 0xcc, 0xd6, 0x36, 0x76, 0x49, 0x68,
	0x4a, 0x22, 0xbd, 0x22, 0xf1, 0xbf, 0x70, 0x58, 0x58, 0x3f, 0xc8, 0x72, 0xd4, 0x49, 0x88, 0x3f,
	0x45, 0x55, 0x4a, 0x58, 0xe0, 0x7b, 0x8c, 0xa4, 0x59, 0xae, 0x28, 0x59, 0x0a, 0x3c, 0x7d, 0x2a,
	0xa2, 0x00, 0xa6, 0x7f, 0x57, 0x42, 0x0b, 0x2f, 0x3a, 0x8e, 0xbd, 0x6b, 0x06, 0x81, 0xe3, 0x35,
	0x5f, 0x04, 0xb6, 0x19, 0x12, 0xbe, 0xd8, 0x47, 0x68, 0xca, 0x15, 0x63, 0xb0, 0x2d, 0xad, 0xb4,
	0x5a, 0x5a, 0x9b, 0xde, 0xbc, 0xd2, 0xcb, 0x59, 0xa0, 0x1c, 0x9e, 0x06, 0x64, 0x83, 0xff, 0xa3,
	0x57, 0xdc, 0x64, 0x04, 0x5f, 0x41, 0x15, 0x16, 0x10, 0xcb, 0x39, 0x76, 0x2c, 0xc3, 0xb1, 0xb5,
	0x91, 0xd5, 0xd2, 0xda, 0xa4, 0x8e, 0xa2, 0xa1, 0x67, 0x36, 0xbe, 0x86, 0xaa, 0x66, 0xd3, 0xf3,
	0x59, 0xe8, 0x58, 0x46, 0xa7, 0xe3, 0xd8, 0x5a, 0x79, 0xb5, 0xb4, 0x36, 0xa5, 0x4f, 0x45, 0x83,
	0x7c, 0x65, 0xf8, 0x3a, 0x42, 0x1d, 0x58, 0x96, 0x71, 0x42, 0x4e, 0xb5, 0xd1, 0xd5, 0xd2, 0xda,
	0xc4, 0xc3, 0x0b, 0xc7, 0x66, 0x9b, 0x11, 0x7d, 0x52, 0x00, 0x3e, 0x27, 0xa7, 0xf5, 0x8f, 0x14,
	0xfb, 0xe0, 0x22, 0xca, 0x4d, 0x51, 0xca, 0x4f, 0x51, 0xff, 0x83, 0x0c, 0xf1, 0x0e, 0x69, 0x93,
	0xef, 0x4f, 0x08, 0xf5, 0x8b, 0x8a, 0xc9, 0x75, 0x12, 0xd6, 0x5f, 0xcf, 0xa3, 0x4a, 0xc3, 0xdd,
	0xa6, 0x44, 0x9e, 0xc8, 0x0a, 0x9a, 0x0c, 0x4d, 0x76, 0x92, 0xde, 0xc5, 0x04, 0x1f, 0x00, 0x21,
	0x61, 0x34, 0x0a, 0xe3, 0x23, 0x30, 0x0e, 0x9f, 0xf1, 0x1a, 0x9a, 0x0d, 0x4c, 0x4a, 0xbc, 0xd0,
	0x48, 0xe8, 0x84, 0x80, 0xa7, 0xc5, 0xf8, 0x61, 0x8a, 0xda, 0x33, 0x5d, 0x02, 0xc2, 0x9d, 0xd4,
	0xe1, 0x33, 0xbe, 0x8c, 0x90, 0xe9, 0x79, 0x7e, 0x08, 0x66, 0xa0, 0x5d, 0x10, 0xcb, 0x4e, 0x46,
	0xf8, 0x72, 0xbc, 0x8e, 0x6b, 0x74, 0xad, 0xa0, 0xc3, 0xb4, 0xb1, 0xd5, 0xd2, 0x5a, 0x55, 0x9f,
	0xf0, 0x3a, 0x6e, 0x83, 0x7f, 0xc7, 0xb7, 0x11, 0xe6, 0x40, 0xcb, 0xa7, 0x84, 0x19, 0x01, 0xa1,
	0x80, 0xa6, 0x8d, 0x03, 0xd6, 0x8c, 0xd7, 0x71, 0xb7, 0x39, 0x60, 0x9f, 0x50, 0x8e, 0x8d, 0x37,
	0xd0, 0x3c, 0x07, 0x1b, 0x94, 0x70, 0x53, 0x05, 0xee, 0x46, 0xeb, 0x95, 0x36, 0xb1, 0x5a, 0x5a,
	0x1b, 0xd5, 0xe7, 0x38, 0x48, 0x4f, 0x20, 0x4f, 0x5f, 0xe1, 0xeb, 0x68, 0xda, 0x25, 0xae, 0x4f,
	0x4f, 0x0d, 0xe6, 0xbc, 0x22, 0x86, 0x7b, 0xa4, 0x4d, 0x02, 0xea, 0x94, 0x18, 0x3d, 0x70, 0x5e,
	0x91, 0xdd, 0x23, 0xbc, 0x89, 0x16, 0x25, 0x56, 0x9a, 0xaf, 0x7b, 0xa4, 0x21, 0x40, 0x9e, 0x17,
	0xc0, 0x14, 0xe7, 0xdd, 0x23, 0xfc, 0x01, 0x9a, 0xb4, 0x1d, 0x76, 0x22, 0x6c, 0xa9, 0xa2, 0xb4,
	0xa5, 0x86, 0xbb, 0xe3, 0xb0, 0x93, 0x6d, 0xf0, 0x11, 0xfa, 0x04, 0xc7, 0xe6, 0x76, 0x84, 0x1d,
	0x34, 0x03, 0x9e, 0xa8, 0xeb, 0x30, 0x9f, 0x0a, 0x65, 0x99, 0x02, 0x65, 0xf9, 0x34, 0xa6, 0xe7,
	0xce, 0x65, 0x63, 0x3b, 0xed, 0x5c, 0xf6, 0xb9, 0xa7, 0xd8, 0xd8, 0x35, 0x3d, 0xb3, 0x49, 0x5c,
	0xe2, 0x85, 0x07, 0x84, 0x76, 0x09, 0xdd, 0x78, 0x1a, 0x33, 0x02, 0x6d, 0x9a, 0x6e, 0x65, 0xbe,
	0x73, 0xc1, 0xb7, 0x7c, 0x16, 0x8a, 0xf3, 0xac, 0x0a, 0x3d, 0xe0, 0x03, 0x70, 0x92, 0x3f, 0x40,
	0x13, 0x9e, 0x63, 0x89, 0x0d, 0x4c, 0x2b, 0xfd, 0x4b, 0xc3, 0xdd, 0x73, 0x2c, 0xb9, 0xfe, 0x71,
	0xcf, 0xb1, 0x60, 0xf9, 0x1b, 0x68, 0xbe, 0xe5, 0xbb, 0xc4, 0xb0, 0x7c, 0x2f, 0x34, 0x1d, 0x8f,
	0x50, 0xc1, 0x7d, 0x06, 0xb8, 0xcf, 0x71, 0xd0, 0x76, 0x04, 0x79, 0x21, 0x55, 0x4b, 0xb8, 0x49,
	0xe3, 0xd8, 0x69, 0x13, 0x23, 0x30, 0xc3, 0x96, 0xf6, 0x2e, 0xa8, 0xc8, 0xb4, 0x18, 0x7f, 0xec,
	0xb4, 0xc9, 0xbe, 0x19, 0xb6, 0xb8, 0xfa, 0xb7, 0x4c, 0x23, 0xa0, 0x8e, 0x4f, 0x9d, 0xf0, 0x54,
	0x9b, 0x5d, 0x2d, 0xad, 0x95, 0x75, 0xd4, 0x32, 0xf7, 0xe5, 0x08, 0xfe, 0x18, 0x55, 0x8e, 0x7c,
	0x3f, 0x34, 0x04, 0x9d, 0x36, 0xb7, 0x5a, 0x52, 0x4a, 0xfd, 0x91, 0xef, 0x87, 0x72, 0xd5, 0xe8,
	0x28, 0xfe, 0x8c, 0xef, 0xa3, 0x8b, 0xd6, 0x11, 0x35, 0x3c, 0xce, 0xc0, 0x0c, 0xcc, 0xa3, 0x36,
	0x31, 0x28, 0x31, 0x99, 0xef, 0x69, 0x18, 0x96, 0x33, 0x6f, 0x1d, 0xd1, 0x3d, 0x3f, 0xdc, 0x16,
	0x30, 0x1d, 0x40, 0xf8, 0x32, 0xaa, 0x34, 0xc1, 0x0d, 0xfb, 0x8c, 0x9b, 0xe4, 0x3c, 0x60, 0x4e,
	0xc2, 0xd0, 0x73, 0xf6, 0xcc, 0xc6, 0x1b, 0x68, 0xb6, 0xf5, 0xd2, 0x6a, 0xfb, 0xd6, 0x89, 0x11,
	0x3a, 0x2e, 0x79, 0xe5, 0x7b, 0x44, 0x5b, 0xe0, 0x48, 0x0f, 0xcb, 0x2f, 0x0e, 0xb7, 0xf5, 0x19,
	0x09, 0x3c, 0x94, 0x30, 0xbc, 0x8c, 0x26, 0xcc, 0x26, 0xb7, 0xb3, 0xae, 0xab, 0x2d, 0x72, 0xff,
	0xa4, 0x8f, 0xc3, 0xf7, 0x86, 0xcb, 0x05, 0xcb, 0x3a, 0x47, 0x60, 0x7f, 0x8c, 0xfb, 0x6d, 0xcf,
	0x22, 0x7c, 0xca, 0x8b, 0x42, 0xb7, 0x25, 0xe8, 0x40, 0x42, 0x9e, 0xd9, 0xf8, 0x3e, 0x9a, 0x30,
	0x8f, 0x8f, 0x1d, 0x8f, 0xcb, 0x6a, 0x09, 0x44, 0xb1, 0xd4, 0x23, 0x8a, 0x2d, 0x09, 0xd6, 0x63,
	0x44, 0x7c, 0x0b, 0xcd, 0xb6, 0x4c, 0x6a, 0xbf, 0x34, 0x29, 0x31, 0xba, 0x84, 0x32, 0x6e, 0xb0,
	0x1a, 0x6c, 0x6a, 0x26, 0x1a, 0x6f, 0x88, 0x61, 0xfc, 0x08, 0xcd, 0x34, 0x83, 0x8e, 0x14, 0xb6,
	0x50, 0x93, 0xe5, 0x02, 0x35, 0x79, 0xb2, 0xff, 0x42, 0x0a, 0xbc, 0xda, 0x0c, 0x3a, 0xe2, 0x23,
	0x28, 0xcb, 0x36, 0xaa, 0x90, 0x6f, 0x42, 0x6a, 0x1a, 0xc7, 0x6d, 0xb3, 0xc9, 0xb4, 0x1a, 0xd0,
	0xd7, 0x7b, 0xe8, 0x9f, 0x10, 0x8f, 0x50, 0xc7, 0xfa, 0x9c, 0x9c, 0x36, 0xcc, 0x76, 0x87, 0xec,
	0x9b, 0x0e, 0xd5, 0x11, 0x90, 0x3d, 0xe6, 0x54, 0xdc, 0x2f, 0xfb, 0x5d, 0x42, 0xa9, 0x63, 0x13,
	0xa1, 0x6b, 0x2b, 0x20, 0xb8, 0xa9, 0x68, 0x10, 0xd4, 0xec, 0x0a, 0xaa, 0x74, 0x9b, 0x26, 0x5f,
	0x2d, 0xf3, 0xdb, 0x44, 0x7b, 0x0b, 0x50, 0x50, 0xb7, 0x69, 0x6e, 0x8b, 0x11, 0x5c, 0x47, 0xd5,
	0xae, 0x6b, 0x34, 0xa9, 0xdf, 0x09, 0x04, 0x97, 0x4b, 0xa0, 0xb1, 0x95, 0xae, 0xfb, 0x84, 0x8f,
	0x01, 0x93, 0x2d, 0x34, 0xde, 0x75, 0x85, 0x49, 0x5e, 0x06, 0x93, 0xbc, 0x9c, 0xdb, 0xaa, 0xd8,
	0xdc, 0x46, 0xc3, 0xe5, 0x06, 0xf6, 0x70, 0xe2, 0xe4, 0x09, 0x57, 0x85, 0xc6, 0xae, 0x3e, 0xd6,
	0x85, 0x11, 0xae, 0x10, 0xc4, 0x03, 0xe5, 0xe2, 0xfa, 0x60, 0xb0, 0x53, 0xcf, 0xd2, 0xae, 0xc0,
	0x45, 0x34, 0x1a, 0xd2, 0x0e, 0xd1, 0xa7, 0x05, 0x94, 0x2b, 0xc4, 0xc1, 0xa9, 0x67, 0xf1, 0xcd,
	0xf1, 0x65, 0x71, 0x11, 0x08, 0xf7, 0xb9, 0x2a, 0x1c, 0x54, 0xd7, 0x7d, 0x12, 0x8f, 0xe1, 0x25,
	0x58, 0x17, 0x98, 0xce, 0x55, 0x38, 0xac, 0xb1, 0xae, 0x0b, 0x26, 0xb3, 0x89, 0x16, 0xe5, 0x6c,
	0xf6, 0xa9, 0x67, 0xba, 0x8e, 0x65, 0x08, 0x5f, 0xa5, 0xd5, 0x61, 0xff, 0xf3, 0x02, 0xb8, 0x23,
	0x60, 0xbb, 0x00, 0xc2, 0x37, 0xd0, 0x0c, 0x78, 0x63, 0xaf, 0xe3, 0x9a, 0x86, 0xe7, 0xdb, 0x84,
	0x69, 0xd7, 0x60, 0xce, 0x2a, 0xf7, 0xc9, 0x7c, 0x74, 0x8f, 0x0f, 0xe2, 0xcf, 0xd1, 0x2c, 0x23,
	0xd4, 0x31, 0xdb, 0x46, 0xe0, 0x53, 0x19, 0x87, 0x5c, 0x87, 0x03, 0xbc, 0x9a, 0x93, 0xca, 0x01,
	0x20, 0xee, 0xfb, 0x34, 0x32, 0xbc, 0x69, 0x16, 0x8f, 0x80, 0x22, 0x34, 0xd0, 0x62, 0xe0, 0xbf,
	0x24, 0xd4, 0x60, 0x21, 0xbf, 0x9e, 0x5d, 0x62, 0xb5, 0x4c, 0xcf, 0x61, 0xae, 0xf6, 0x36, 0xc8,
	0xb9, 0x57, 0x25, 0xf6, 0x39, 0xee, 0x01, 0x47, 0xdd, 0x8d, 0x30, 0xf5, 0xf9, 0x20, 0x3f, 0xc8,
	0x8d, 0xda, 0x6b, 0x86, 0x86, 0x14, 0x02, 0xb3, 0xa8, 0x13, 0x84, 0x06, 0xf9, 0x86, 0x58, 0xda,
	0x0d, 0x21, 0x01, 0xaf, 0x19, 0x7e, 0x06, 0xc0, 0x03, 0x80, 0x7d, 0xf6, 0x0d, 0xb1, 0xf0, 0x43,
	0x54, 0xe3, 0x44, 0xc7, 0xa6, 0xd3, 0x36, 0x7c, 0x2f, 0xa2, 0xe2, 0x5f, 0x3b, 0x94, 0x68, 0x37,
	0x81, 0x90, 0xb3, 0x7d, 0x6c, 0x3a, 0xed, 0xe7, 0x9e, 0x20, 0x7c, 0x2c, 0xa0, 0x78, 0x17, 0x4d,
	0xb1, 0xd0, 0xa4, 0xa1, 0x61, 0x5a, 0x70, 0x5c, 0x6b, 0xb0, 0xfe, 0xf5, 0x5e, 0xcb, 0xeb, 0x84,
	0xbe, 0x6b, 0x86, 0x8e, 0x75, 0xc0, 0x71, 0xb7, 0x00, 0x75, 0x43, 0xfc, 0xa7, 0x57, 0x58, 0x32,
	0x86, 0xff, 0x3f, 0xaa, 0xb0, 0xd0, 0x0f, 0x22, 0x6e, 0xb7, 0x80, 0xdb, 0xad, 0x62, 0x6e, 0x7e,
	0x90, 0x65, 0x86, 0x58, 0x3c, 0x84, 0xef, 0xa1, 0x05, 0x7e, 0xb0, 0x61, 0x8b, 0x12, 0xd3, 0x16,
	0x77, 0x29, 0xbf, 0x55, 0xb5, 0x75, 0xb8, 0x4b, 0xe7, 0xbc, 0x8e, 0x7b, 0x28, 0x40, 0xfb, 0x84,
	0xf2, 0x5b, 0x15, 0x4c, 0x82, 0xdf, 0xa6, 0xdc, 0xf2, 0x8d, 0xc0, 0xf1, 0xb4, 0xdb, 0xb0, 0xf5,
	0x0a, 0x1f, 0x7c, 0x6a, 0x52, 0x7b, 0xdf, 0xf1, 0xf0, 0x3a, 0x9a, 0xb3, 0x8f, 0x0c, 0xc7, 0xb3,
	0x4c, 0xea, 0x89, 0x7b, 0xd1, 0xb1, 0xb5, 0x3b, 0xa0, 0x2f, 0x33, 0xf6, 0xd1, 0xb3, 0x64, 0x1c,
	0x9c, 0xe1, 0x0c, 0x67, 0x17, 0x98, 0x8c, 0x85, 0x2d, 0xea, 0x77, 0x9a, 0x2d, 0xed, 0x6e, 0x3a,
	0x06, 0x9b, 0xb6, 0x82, 0xce, 0x7e, 0x02, 0xc4, 0x6f, 0xf3, 0x98, 0xc9, 0x6a, 0x39, 0x1e, 0x11,
	0x36, 0xb7, 0x01, 0x8e, 0x73, 0x24, 0xb0, 0x78, 0x58, 0x04, 0xe3, 0x60, 0x52, 0xef, 0xa0, 0x59,
	0xdb, 0x61, 0x70, 0xc0, 0x47, 0xd4, 0xf4, 0x6c, 0xc7, 0x6b, 0x6a, 0xf7, 0xd2, 0x7c, 0x67, 0x24,
	0xf8, 0x91, 0x84, 0xe2, 0x3b, 0x08, 0xdb, 0x10, 0x1c, 0x19, 0x3e, 0x0d, 0x5a, 0xa6, 0x47, 0x6c,
	0xee, 0x6f, 0xdf, 0x81, 0xdd, 0xcd, 0x0a, 0xc8, 0x73, 0x09, 0x68, 0xb8, 0x3c, 0x48, 0x60, 0x7e,
	0x87, 0x5a, 0xc4, 0xe8, 0xba, 0xc2, 0x35, 0x6c, 0x8a, 0xc0, 0x4f, 0x8c, 0x36, 0x5c, 0xf0, 0x0d,
	0x37, 0xd0, 0xcc, 0x31, 0xf5, 0x5d, 0xc3, 0xf6, 0xa9, 0x6b, 0x0a, 0x07, 0x7e, 0x1f, 0x18, 0x56,
	0xf9, 0xf0, 0x8e, 0x18, 0x6d, 0xb8, 0x78, 0x1d, 0x4d, 0x9b, 0xed, 0xb6, 0xff, 0xd2, 0x68, 0xf9,
	0xa1, 0x11, 0xb4, 0x3b, 0x4d, 0xed, 0xbd, 0x94, 0xf9, 0x4f, 0x01, 0xec, 0xa9, 0x1f, 0xee, 0xb7,
	0x3b, 0xcd, 0xfa, 0x7a, 0x12, 0xb6, 0xf1, 0x00, 0xb4, 0x5f, 0xd8, 0x56, 0x5f, 0x47, 0x33, 0x11,
	0x2e, 0x0f, 0xc6, 0x38, 0xbe, 0x70, 0x0b, 0x29, 0xec, 0xb1, 0x2e, 0xac, 0xb5, 0xfe, 0xf7, 0x23,
	0x08, 0x35, 0xdc, 0xed, 0xb6, 0xef, 0x0d, 0x0e, 0x07, 0x55, 0xa1, 0xdf, 0xa8, 0x32, 0xf4, 0xcb,
	0xcb, 0x69, 0x44, 0x21, 0xa7, 0x77, 0xd0, 0x82, 0xc4, 0x62, 0x9e, 0x19, 0x30, 0x2e, 0x05, 0xc0,
	0x1d, 0x03, 0x5c, 0x2c, 0x60, 0x07, 0x12, 0x04, 0x14, 0x4f, 0xd1, 0x9c, 0xc5, 0x97, 0x9a, 0xb9,
	0x6a, 0xca, 0xe0, 0x69, 0xde, 0xca, 0xfb, 0x5f, 0x8e, 0x29, 0x9d, 0xcc, 0x8c, 0x95, 0x7c, 0x89,
	0x62, 0x13, 0xd5, 0x15, 0x7a, 0xa1, 0xe8, 0x0a, 0xcd, 0xdd, 0x2c, 0xe3, 0xf9, 0x9b, 0xa5, 0x7e,
	0x2b, 0x96, 0xe5, 0xc0, 0x33, 0xfa, 0xaf, 0x12, 0x9a, 0x96, 0xb8, 0xd1, 0x19, 0xe9, 0xea, 0xbc,
	0xeb, 0xae, 0x7a, 0x63, 0x92, 0x6a, 0x23, 0x9e, 0x50, 0x95, 0x89, 0xd5, 0xfe, 0xac, 0x04, 0xba,
	0x90, 0xc6, 0xc0, 0x9f, 0x20, 0x04, 0xc9, 0xa6, 0x61, 0xf9, 0x76, 0x94, 0x7d, 0xf4, 0xde, 0x5e,
	0x2f, 0xf8, 0xbf, 0x9f, 0x41, 0x4a, 0x0a, 0xe1, 0xe2, 0x24, 0x50, 0x6c, 0xfb, 0x36, 0xc1, 0x57,
	0xd1, 0x94, 0x20, 0xb7, 0x49, 0x68, 0x3a, 0x6d, 0x99, 0x7b, 0x54, 0x60, 0x6c, 0x07, 0x86, 0xd2,
	0xda, 0x56, 0xce, 0x68, 0xdb, 0x7f, 0xce, 0x72, 0x35, 0x4e, 0xf2, 0xc1, 0x33, 0xab, 0xdb, 0x88,
	0x52, 0xdd, 0x8a, 0xe6, 0xfb, 0x2d, 0xa7, 0x20, 0xf9, 0x94, 0x62, 0x42, 0x91, 0x52, 0xf4, 0x84,
	0xaa, 0x93, 0x67, 0x0b, 0x55, 0x6f, 0x29, 0xa2, 0x4a, 0x24, 0xa3, 0xb4, 0x9e, 0x80, 0xf2, 0x3d,
	0xb4, 0xd0, 0x75, 0x8d, 0xb6, 0xdf, 0x74, 0x2c, 0xb3, 0x0d, 0xd8, 0x2c, 0x34, 0xdd, 0x40, 0xab,
	0xf0, 0xe8, 0xf9, 0xe1, 0xc8, 0xdd, 0x77, 0x75, 0xdc, 0x75, 0xbf, 0x10, 0xe0, 0xc3, 0x08, 0xda,
	0x1b, 0x6a, 0x4f, 0xe5, 0x42, 0xed, 0xe2, 0x60, 0xb9, 0x5a, 0x1c, 0x2c, 0xdf, 0x41, 0xf8, 0xb8,
	0x6d, 0xb2, 0x96, 0xe1, 0xfa, 0x36, 0x91, 0x77, 0xb2, 0xad, 0x4d, 0x0b, 0xb7, 0x0b, 0x90, 0x5d,
	0xdf, 0x26, 0xe2, 0x3a, 0xce, 0xc6, 0xaf, 0x33, 0xc3, 0xc6, 0xaf, 0xc7, 0x68, 0x83, 0x91, 0xd0,
	0xe8, 0x3a, 0x34, 0xec, 0x98, 0x6d, 0x03, 0x52, 0x30, 0xae, 0x22, 0xcc, 0x90, 0x77, 0x80, 0x6d,
	0x1c, 0xfb, 0xd4, 0x48, 0x96, 0x01, 0x21, 0x7b, 0x7c, 0x53, 0xdc, 0x64, 0x24, 0x6c, 0x08, 0x5a,
	0x9e, 0x9b, 0x71, 0x75, 0x62, 0x3b, 0x92, 0xf0, 0xb1, 0x4f, 0x1f, 0x47, 0x6b, 0xc4, 0xbf, 0x87,
	0xd6, 0xcf, 0x30, 0xc7, 0xec, 0x6a, 0x79, 0x6d, 0x4a, 0xbf, 0xde, 0x1d, 0x86, 0x73, 0x3a, 0x03,
	0x98, 0x1b, 0x2a, 0x03, 0xc0, 0x45, 0xee, 0xeb, 0x6d, 0x34, 0x6d, 0xb5, 0x89, 0x49, 0x8d, 0x58,
	0x8e, 0x0b, 0xe2, 0x46, 0x82, 0xd1, 0x48, 0x7a, 0xfc, 0xe6, 0x92, 0x55, 0x11, 0x1e, 0xcf, 0x83,
	0x13, 0x12, 0xa9, 0x47, 0x55, 0x0c, 0x3f, 0x09, 0x3a, 0xe0, 0x3d, 0x15, 0x01, 0xff, 0xc5, 0xef,
	0x18, 0xf0, 0x2f, 0x7d, 0xab, 0x80, 0xbf, 0x27, 0x96, 0xd7, 0x06, 0xc7, 0xf2, 0xcb, 0x7d, 0x63,
	0xf9, 0xda, 0x39, 0xc6, 0xf2, 0x2b, 0x7d, 0x62, 0xf9, 0xc2, 0x68, 0xfc, 0xad, 0xe2, 0x68, 0xbc,
	0x37, 0x9e, 0xbc, 0x74, 0xae, 0xf1, 0xe4, 0xe5, 0xef, 0x12, 0x4f, 0x2a, 0x12, 0x85, 0x2b, 0xaa,
	0x44, 0xe1, 0x07, 0x68, 0x49, 0xea, 0x57, 0x2e, 0x5f, 0x58, 0x85, 0x8d, 0x2f, 0x08, 0xf0, 0x41,
	0x36, 0x25, 0x50, 0xe5, 0x17, 0x57, 0xcf, 0x3d, 0xbf, 0xa8, 0xbf, 0xa9, 0xfc, 0xe2, 0xda, 0xb7,
	0xcd, 0x2f, 0xae, 0xf7, 0xcd, 0x2f, 0x8a, 0x82, 0xf8, 0xb7, 0x87, 0x0e, 0xe2, 0x6f, 0xe4, 0x83,
	0xf8, 0x9b, 0xf9, 0xc0, 0x5c, 0x64, 0x39, 0xbd, 0x11, 0xf9, 0xd5, 0x9e, 0x88, 0x7c, 0x4d, 0x84,
	0x01, 0xe9, 0x68, 0xfc, 0x96, 0x22, 0x1a, 0xbf, 0x05, 0xcc, 0x72, 0x61, 0xb8, 0xaa, 0xd8, 0xb0,
	0xae, 0x2e, 0x36, 0xe4, 0xa3, 0xe6, 0xdb, 0xfd, 0xa3, 0xe6, 0xa4, 0x6c, 0xdb, 0x37, 0x22, 0x9b,
	0xe3, 0x91, 0x92, 0xc0, 0x95, 0xb1, 0x55, 0xfd, 0x27, 0x68, 0x8a, 0x0f, 0x35, 0xa9, 0x69, 0x43,
	0xb8, 0x52, 0x14, 0x45, 0x2b, 0x97, 0x3f, 0xa2, 0x5e, 0xfe, 0xd0, 0xf5, 0xd3, 0xfa, 0xed, 0xd4,
	0xec, 0x03, 0x57, 0x8f, 0xd1, 0x6c, 0x8c, 0x1c, 0x2d, 0xff, 0x1f, 0xca, 0x68, 0xb1, 0xe1, 0x6e,
	0xb7, 0x4c, 0xaf, 0x49, 0x12, 0x35, 0xfe, 0x3e, 0xe2, 0xae, 0xcf, 0x11, 0x0a, 0xa9, 0xe9, 0x31,
	0x07, 0x5c, 0xcb, 0x28, 0x18, 0xd6, 0xed, 0xbc, 0xa9, 0xf2, 0xe5, 0x1c, 0xc6, 0x78, 0x1b, 0xc9,
	0x47, 0x3d, 0x45, 0x5e, 0x18, 0xb7, 0x5c, 0x18, 0x14, 0xb7, 0x58, 0xb0, 0x73, 0xa3, 0xe5, 0xb3,
	0x10, 0x02, 0xb9, 0x09, 0x1d, 0x89, 0xa1, 0xa7, 0x3e, 0x0b, 0xb3, 0x15, 0xcf, 0xf1, 0x9e, 0x8a,
	0x67, 0xc1, 0xfd, 0x3a, 0x51, 0x74, 0xbf, 0xde, 0x41, 0x58, 0x61, 0xf8, 0x93, 0x22, 0x9e, 0x21,
	0xbd, 0x56, 0x7f, 0x1f, 0x5d, 0x2c, 0xb0, 0x78, 0x24, 0x5c, 0xc5, 0x71, 0xde, 0xdc, 0xeb, 0xef,
	0xa9, 0x0e, 0x73, 0xa0, 0x5e, 0xac, 0xa0, 0xe5, 0x3c, 0x55, 0xa4, 0x20, 0xbf, 0x18, 0xe1, 0x3a,
	0x0f, 0x77, 0xd9, 0xa1, 0xef, 0xb7, 0x59, 0x5f, 0x1d, 0x7f, 0x82, 0x26, 0x42, 0x8e, 0x64, 0xf8,
	0x01, 0xa8, 0xc3, 0xf4, 0xe6, 0x9d, 0xde, 0xcb, 0x3a, 0x66, 0xf4, 0x3c, 0x90, 0xf5, 0xa8, 0x8d,
	0xf8, 0x93, 0x3e, 0x1e, 0x0a, 0x08, 0xbe, 0x8d, 0xa6, 0xe3, 0x54, 0x0a, 0xca, 0xa3, 0xa0, 0x3c,
	0x91, 0x01, 0xc7, 0x69, 0x16, 0x70, 0xcb, 0x6e, 0x6e, 0x74, 0x08, 0x4d, 0xbd, 0xa0, 0xd4, 0xd4,
	0x82, 0xf3, 0x1c, 0x2b, 0x38, 0xcf, 0xfa, 0x46, 0x56, 0x30, 0x03, 0xc5, 0xbc, 0x88, 0xe6, 0xd3,
	0xf8, 0x91, 0x80, 0x7f, 0x53, 0xe2, 0x0e, 0x28, 0x69, 0xfd, 0xbc, 0x69, 0xbb, 0x2b, 0x32, 0x95,
	0xd1, 0xbe, 0xa6, 0xc2, 0xfd, 0xb4, 0xa8, 0x81, 0x44, 0x79, 0x38, 0x03, 0x31, 0x72, 0x3f, 0x0d,
	0xe3, 0x51, 0x0e, 0xce, 0xce, 0x2c, 0xc7, 0xf5, 0x64, 0xff, 0xc3, 0x39, 0x60, 0x81, 0x1b, 0xc9,
	0xef, 0xdf, 0xca, 0x68, 0xa2, 0xe1, 0x3e, 0x21, 0xd0, 0xe9, 0x5c, 0x45, 0x53, 0x72, 0xd7, 0x49,
	0x7a, 0x3c, 0xa5, 0x23, 0xb1, 0x75, 0xb8, 0xda, 0x1f, 0xa0, 0x05, 0xc7, 0xb3, 0xda, 0x1d, 0x9b,
	0x18, 0x5d, 0x88, 0xc5, 0x65, 0x4e, 0x35, 0x92, 0x0e, 0xec, 0xb1, 0x44, 0x69, 0xd8, 0x71, 0xcb,
	0x05, 0xdf, 0x47, 0xd1, 0xa8, 0xe1, 0x39, 0x56, 0x44, 0x56, 0x4e, 0x93, 0xcd, 0x4a, 0x84, 0xb8,
	0xcf, 0x81, 0x6f, 0xa0, 0x4a, 0x44, 0x64, 0x75, 0xdd, 0x6c, 0x0f, 0x11, 0x49, 0xc8, 0x76, 0xd7,
	0x55, 0x75, 0x71, 0x2e, 0xbc, 0xa1, 0x2e, 0xce, 0x06, 0x9a, 0xcf, 0x36, 0x5b, 0x84, 0xa4, 0xc6,
	0x40, 0x52, 0x73, 0x56, 0xba, 0xdb, 0x02, 0x02, 0xfb, 0x00, 0x2d, 0x46, 0x5b, 0xa0, 0xe6, 0x4b,
	0xa3, 0xeb, 0x46, 0x5b, 0x1f, 0x57, 0x49, 0x4c, 0x37, 0x5f, 0x46, 0x91, 0x30, 0x7e, 0x8a, 0x2e,
	0x47, 0x94, 0x0e, 0xe3, 0x84, 0x70, 0xae, 0x8e, 0x67, 0x04, 0xd4, 0x6f, 0x52, 0xc2, 0x18, 0xf8,
	0xca, 0x98, 0xc5, 0xb2, 0x44, 0x7e, 0xc6, 0x1a, 0x2e, 0x3f, 0xdc, 0x67, 0x7c, 0x83, 0x80, 0x57,
	0xdf, 0x96, 0x47, 0xcc, 0xf5, 0xe3, 0x01, 0x1c, 0xb1, 0xe3, 0x1d, 0xfb, 0xe9, 0x0a, 0xc8, 0x62,
	0xee, 0xe6, 0x78, 0xe6, 0x1d, 0xfb, 0xfc, 0xe4, 0xf9, 0xff, 0xd0, 0x71, 0xfe, 0x4b, 0xf0, 0x64,
	0x3c, 0x9d, 0xda, 0x0a, 0x43, 0xd3, 0x6a, 0x0d, 0x34, 0xb6, 0x22, 0x4b, 0x19, 0xeb, 0x6b, 0x29,
	0xc3, 0x57, 0xc0, 0x52, 0x26, 0x3a, 0x92, 0x31, 0xd1, 0x4c, 0x37, 0xb0, 0x7c, 0x96, 0x6e, 0xe0,
	0x19, 0x4b, 0x56, 0xc2, 0x87, 0x25, 0x22, 0x19, 0x68, 0x7f, 0xbb, 0xdc, 0x87, 0x25, 0xf8, 0x51,
	0x59, 0xea, 0xfd, 0xf4, 0x82, 0x4b, 0x90, 0x7d, 0x2f, 0x2b, 0x17, 0x0c, 0x87, 0x12, 0x2f, 0xb7,
	0xfe, 0x17, 0xf1, 0x91, 0xec, 0x90, 0xff, 0xdd, 0x47, 0xf2, 0x7e, 0xfe, 0x48, 0x86, 0xd9, 0xe1,
	0xb7, 0x3f, 0x10, 0x21, 0x90, 0xe1, 0x2e, 0x95, 0x04, 0x3f, 0x72, 0x8a, 0x7f, 0x3b, 0x1a, 0xf1,
	0x49, 0x0a, 0x69, 0x85, 0xb7, 0x76, 0x91, 0x50, 0x47, 0xfa, 0x0a, 0x55, 0x47, 0x15, 0x99, 0xa7,
	0xa5, 0x64, 0xf2, 0xae, 0x52, 0x26, 0xf1, 0x1a, 0x32, 0xdf, 0xa3, 0x4a, 0x95, 0xe0, 0x02, 0xd2,
	0xfa, 0xed, 0xdc, 0xe4, 0x8a, 0x68, 0x63, 0xbc, 0x38, 0xda, 0x78, 0x88, 0x6a, 0xec, 0xc4, 0x09,
	0x0c, 0x9e, 0x93, 0x39, 0xcc, 0x37, 0x5c, 0xbf, 0xe3, 0x85, 0xc4, 0x36, 0xac, 0x16, 0xb1, 0x4e,
	0x84, 0x47, 0xd3, 0x2f, 0x72, 0x8c, 0xbd, 0x66, 0xf8, 0x8c, 0xf9, 0xbb, 0x02, 0xbc, 0xcd, 0xa1,
	0xb5, 0xbf, 0x2a, 0x21, 0x9c, 0x17, 0x01, 0xfe, 0x50, 0x2a, 0x97, 0x69, 0xdb, 0x54, 0x9a, 0xcf,
	0x5b, 0x4a, 0x41, 0x6e, 0xd9, 0x36, 0xf7, 0x87, 0x42, 0xbf, 0xf8, 0x17, 0x7c, 0x1f, 0x8d, 0xa5,
	0x2e, 0xb0, 0x01, 0x7e, 0x42, 0xa2, 0xe2, 0x65, 0x34, 0xe1, 0x91, 0x97, 0x50, 0x71, 0x84, 0x0b,
	0x6c, 0x54, 0x1f, 0xf7, 0xc8, 0xcb, 0x03, 0xe7, 0x15, 0x49, 0xf4, 0x6f, 0xc8, 0x8c, 0x68, 0x2f,
	0xd2, 0xbf, 0x4c, 0x56, 0x84, 0x1f, 0x20, 0x4d, 0x84, 0x05, 0xb6, 0xd1, 0x75, 0xe3, 0x92, 0x57,
	0xfa, 0x4e, 0x5e, 0x94, 0xf0, 0x06, 0x80, 0xa3, 0xdb, 0xa6, 0xde, 0x44, 0x4b, 0x72, 0xc9, 0x49,
	0x31, 0x5e, 0xde, 0xed, 0x5f, 0xa8, 0x0a, 0xfb, 0xc2, 0xfb, 0xaf, 0xaa, 0x77, 0xdd, 0xa7, 0xb8,
	0x5f, 0xb7, 0xd4, 0x13, 0xf1, 0xc5, 0x3f, 0x45, 0x15, 0x51, 0xb7, 0x4e, 0x4f, 0x71, 0x73, 0xd0,
	0x14, 0xa2, 0xae, 0xcd, 0x74, 0x24, 0x68, 0x61, 0x92, 0x3f, 0x2d, 0x23, 0x2d, 0x6a, 0xb3, 0x7c,
	0xe9, 0x84, 0xad, 0xed, 0x0e, 0x0b, 0x7d, 0xd7, 0x79, 0xf5, 0xed, 0x02, 0x3d, 0xb5, 0xb2, 0x7f,
	0xc2, 0xef, 0x43, 0x0b, 0xa6, 0x30, 0x4c, 0x1a, 0xe9, 0x41, 0xbe, 0xc8, 0x16, 0xbf, 0xe7, 0xd1,
	0x2b, 0x11, 0x3e, 0x5f, 0xc5, 0x97, 0x68, 0xc1, 0x92, 0xab, 0x12, 0x0d, 0xb9, 0x54, 0x60, 0x53,
	0xd9, 0xbc, 0x9e, 0x67, 0x93, 0x46, 0x96, 0xc2, 0x9d, 0xb7, 0xf2, 0x83, 0x50, 0x4e, 0xcc, 0x3e,
	0xea, 0x10, 0x06, 0x5d, 0xcd, 0x84, 0x18, 0x67, 0xb6, 0xd5, 0x0f, 0xd1, 0xa2, 0xc3, 0x64, 0x69,
	0xc8, 0x79, 0x45, 0x6c, 0x43, 0xbe, 0x54, 0xcb, 0x86, 0x23, 0xf3, 0x0e, 0x3b, 0x88, 0x51, 0xe4,
	0xbb, 0xb5, 0xfa, 0x83, 0x82, 0xc3, 0x18, 0xa8, 0xe4, 0x0f, 0xd0, 0x5b, 0x4a, 0xc2, 0x81, 0x9d,
	0xb3, 0x3f, 0x2e, 0x73, 0x2d, 0x03, 0x25, 0x79, 0x53, 0xc7, 0xff, 0x10, 0xf1, 0xe3, 0x04, 0xbb,
	0x48, 0x4e, 0x7f, 0x59, 0xdd, 0x0f, 0xe2, 0x87, 0x8f, 0x24, 0xf6, 0xef, 0xe2, 0xd9, 0x7f, 0xd0,
	0xff, 0xec, 0x85, 0xbb, 0x56, 0x1e, 0xfd, 0xfb, 0xea, 0x73, 0x18, 0x78, 0xf2, 0x7f, 0x3e, 0x82,
	0x56, 0x54, 0x84, 0xd1, 0xc9, 0x1b, 0xea, 0x7e, 0xdc, 0x43, 0xb5, 0xfc, 0x55, 0x2c, 0x7e, 0xb7,
	0x9a, 0x73, 0xaf, 0xcb, 0x68, 0x8a, 0x27, 0x60, 0x2c, 0xa4, 0xfe, 0xe9, 0xf7, 0x91, 0xad, 0x6e,
	0xa0, 0xf9, 0x13, 0x42, 0x02, 0x23, 0xba, 0x4d, 0x88, 0x17, 0x3a, 0xa1, 0x7c, 0x8c, 0xa9, 0xcf,
	0x71, 0x90, 0xc8, 0x06, 0xed, 0xcf, 0x00, 0x70, 0xe6, 0x9e, 0xed, 0xbb, 0x68, 0xd1, 0xf5, 0xbb,
	0xc4, 0x36, 0x42, 0xdf, 0xb0, 0xda, 0x1d, 0x16, 0x46, 0x0a, 0x2b, 0x1b, 0xcc, 0x00, 0x3c, 0xf4,
	0xb7, 0x05, 0x08, 0x96, 0x74, 0x17, 0xcd, 0xdb, 0x10, 0x6c, 0x19, 0xbe, 0xd7, 0x3e, 0x35, 0x44,
	0x1b, 0xff, 0x48, 0x36, 0x7b, 0x67, 0x05, 0xe8, 0xb9, 0xd7, 0x3e, 0x7d, 0x4c, 0x7d, 0x77, 0xe7,
	0x08, 0x5f, 0x41, 0x95, 0x0e, 0x23, 0x46, 0xd7, 0x22, 0x5e, 0x48, 0xa8, 0x0c, 0x10, 0x50, 0x87,
	0x91, 0x86, 0x18, 0xc1, 0x47, 0xe8, 0x92, 0xd5, 0x72, 0xda, 0xd1, 0xde, 0x20, 0xfb, 0x33, 0xe4,
	0x0c, 0xa0, 0x53, 0x93, 0xab, 0xe5, 0xb5, 0x69, 0xc5, 0x1d, 0xb7, 0xcd, 0xa9, 0xc4, 0xbe, 0xe1,
	0x8c, 0x97, 0xad, 0xec, 0x80, 0x08, 0x09, 0xe1, 0x22, 0xba, 0x9d, 0x3a, 0xb6, 0xe1, 0xea, 0x84,
	0x12, 0x39, 0x0a, 0x28, 0xff, 0xbb, 0x8c, 0xaa, 0x0d, 0x57, 0x27, 0x4d, 0x87, 0xcb, 0xe1, 0xfb,
	0x38, 0xf9, 0x27, 0x68, 0x86, 0xca, 0xe9, 0x78, 0xee, 0xc8, 0x9d, 0xdb, 0x28, 0xf8, 0xa5, 0xe4,
	0x15, 0x6c, 0xfc, 0x04, 0x3b, 0x5a, 0x57, 0xc3, 0xe5, 0x2e, 0xae, 0x4a, 0xd3, 0x5f, 0xcf, 0xac,
	0x12, 0x62, 0x45, 0xd0, 0x13, 0x1e, 0x8b, 0x9e, 0x47, 0xed, 0x99, 0x2e, 0x51, 0xbe, 0x3d, 0x1c,
	0x57, 0xbe, 0x3d, 0x54, 0xa4, 0xf3, 0x13, 0x6f, 0x28, 0x9d, 0x57, 0xbe, 0xa8, 0x99, 0x54, 0xbf,
	0xa8, 0xf9, 0x00, 0x2d, 0x72, 0x55, 0x14, 0x6f, 0xc6, 0xbb, 0xae, 0x11, 0xc9, 0x49, 0x94, 0x14,
	0xe3, 0x54, 0xbe, 0xc3, 0x08, 0xb8, 0x8f, 0xe4, 0xbc, 0xeb, 0x77, 0xd2, 0xa7, 0x3f, 0x50, 0x81,
	0x3a, 0x68, 0x2e, 0xc1, 0x8e, 0x5c, 0x65, 0xcf, 0x79, 0x52, 0x12, 0x65, 0x8a, 0x7d, 0xcf, 0x53,
	0x27, 0x61, 0xfa, 0x3c, 0x7b, 0x6e, 0xdb, 0x4c, 0x8e, 0x56, 0xff, 0x27, 0xf0, 0x95, 0x2f, 0x3c,
	0x3a, 0xac, 0x96, 0x16, 0x66, 0x7b, 0x77, 0x10, 0x16, 0xad, 0x50, 0x88, 0x5a, 0xe5, 0xa3, 0x6a,
	0x51, 0xeb, 0xd1, 0x67, 0x01, 0x92, 0x7a, 0x38, 0x7d, 0x66, 0x1f, 0x35, 0xf4, 0xe5, 0x2e, 0xa2,
	0xf1, 0x64, 0x43, 0xc3, 0x65, 0x83, 0x09, 0x7e, 0x64, 0xbc, 0x1f, 0xf1, 0xdb, 0x4f, 0x04, 0xe8,
	0x7b, 0x7e, 0xe8, 0x1c, 0x3b, 0x16, 0x68, 0xc4, 0x50, 0x05, 0xb3, 0xfa, 0xb2, 0x9a, 0x98, 0xf3,
	0xfd, 0x93, 0x12, 0x42, 0xe2, 0x9d, 0x0e, 0xcf, 0x7a, 0xf1, 0x27, 0x68, 0x25, 0xa5, 0xf5, 0xf1,
	0xe3, 0xf7, 0x6c, 0x68, 0xa4, 0x25, 0x28, 0x5b, 0x12, 0x43, 0x3e, 0xf5, 0xc9, 0x92, 0xc7, 0x4f,
	0xd7, 0xb3, 0x27, 0x94, 0x22, 0x3f, 0x90, 0x18, 0x82, 0x5c, 0x78, 0x2d, 0x9e, 0x2a, 0xb4, 0xdb,
	0xd0, 0x2e, 0xdf, 0xa2, 0xcd, 0xfa, 0xf3, 0x9e, 0x31, 0x2e, 0xc0, 0x8f, 0x14, 0x3b, 0x56, 0x45,
	0x4c, 0xd1, 0xb6, 0x32, 0xc2, 0x10, 0x02, 0x16, 0xe9, 0x6c, 0x6a, 0x1e, 0xc5, 0x30, 0x97, 0xcf,
	0x73, 0xd1, 0x70, 0xe1, 0xc3, 0x11, 0xea, 0x77, 0x9b, 0x1e, 0xf7, 0x30, 0xe4, 0x93, 0xbc, 0x83,
	0x16, 0x61, 0x8f, 0xb2, 0x9b, 0x7d, 0xe8, 0x58, 0x27, 0x22, 0x5f, 0x2a, 0x8c, 0x4a, 0xbf, 0x54,
	0x51, 0x70, 0xd1, 0x88, 0xb0, 0x8d, 0x8f, 0x19, 0x21, 0x0c, 0x4a, 0xc2, 0xaa, 0x95, 0xc6, 0xe4,
	0x8c, 0xa1, 0x2b, 0xe2, 0x04, 0x32, 0x76, 0x18, 0xe3, 0x5f, 0x9f, 0x05, 0xf5, 0x7f, 0x81, 0x07,
	0x4b, 0x7b, 0x8e, 0x95, 0xfc, 0x76, 0xe0, 0x9c, 0x8b, 0x0e, 0x0f, 0xd0, 0x24, 0x57, 0x8c, 0x74,
	0xc9, 0xa1, 0xdf, 0x33, 0xf3, 0x09, 0x8e, 0x7c, 0x8e, 0x95, 0x85, 0xfa, 0xdd, 0xcc, 0x06, 0x07,
	0xda, 0xe3, 0x02, 0x4f, 0xf7, 0x63, 0xf4, 0xc8, 0x1c, 0x7f, 0x09, 0x15, 0xff, 0x3d, 0xc7, 0x7a,
	0xd2, 0xff, 0xa0, 0x70, 0x1d, 0x55, 0x5d, 0xd3, 0x82, 0xb2, 0x80, 0xd8, 0xf1, 0x08, 0x58, 0x67,
	0xc5, 0x35, 0x2d, 0x9e, 0xfc, 0xc3, 0xc6, 0x7e, 0x88, 0x56, 0xa2, 0x22, 0xab, 0x29, 0xaa, 0x03,
	0x86, 0xc9, 0x98, 0xd3, 0xf4, 0xf8, 0x15, 0xc2, 0xa4, 0xcf, 0x8a, 0x4a, 0xab, 0xb2, 0x7e, 0xb0,
	0x95, 0x20, 0xf0, 0x39, 0x3c, 0xf9, 0x0b, 0x15, 0x31, 0xc7, 0xa8, 0x98, 0xc3, 0x13, 0xbf, 0x50,
	0x01, 0xb5, 0xdb, 0x49, 0xd6, 0xcb, 0xb7, 0x9c, 0x7e, 0xea, 0x3f, 0x32, 0xf4, 0x53, 0xff, 0xfa,
	0x7f, 0x44, 0xda, 0xf1, 0xc6, 0x4a, 0x52, 0x5b, 0xaa, 0x92, 0xd4, 0xaa, 0x6a, 0x6d, 0x6f, 0xb8,
	0x02, 0x15, 0xeb, 0xc9, 0x90, 0x55, 0x94, 0x48, 0x4f, 0xb2, 0xad, 0xe5, 0x5f, 0x47, 0x02, 0x4b,
	0x9a, 0x43, 0xe7, 0x2c, 0xb0, 0x9c, 0x82, 0x95, 0xf3, 0x0a, 0x76, 0x4e, 0x35, 0xb9, 0x9c, 0x9e,
	0x8d, 0xe5, 0xf5, 0xec, 0x6e, 0x66, 0xbf, 0x43, 0x4b, 0x2d, 0xdb, 0x0f, 0xba, 0xc9, 0x43, 0xdd,
	0x3d, 0xa1, 0x73, 0x7d, 0xdd, 0xe0, 0x66, 0x0a, 0x91, 0xcf, 0x35, 0x84, 0xb5, 0xd5, 0xff, 0xb1,
	0x84, 0xaa, 0x7b, 0x24, 0x7c, 0xe9, 0xd3, 0x13, 0x69, 0xbc, 0xeb, 0x68, 0xce, 0x13, 0x03, 0xb9,
	0x5b, 0x74, 0x46, 0x02, 0xe2, 0x56, 0xca, 0x75, 0x34, 0x1d, 0xb7, 0x93, 0xd3, 0x53, 0x4c, 0x45,
	0x3d, 0xe5, 0xa2, 0x5f, 0xf4, 0x94, 0xdf, 0x4c, 0xf0, 0x58, 0xff, 0x2a, 0xbd, 0x1b, 0x2e, 0x83,
	0x2f, 0xd0, 0x7c, 0xb4, 0x9b, 0x7c, 0x95, 0xad, 0xb7, 0x26, 0x29, 0x49, 0xa5, 0x15, 0x45, 0x62,
	0x48, 0xd5, 0xd8, 0x7e, 0x59, 0xe2, 0xb1, 0xc3, 0xa1, 0xdf, 0x70, 0xa3, 0xd7, 0x63, 0x43, 0xfe,
	0xa8, 0xec, 0x0b, 0x34, 0x13, 0x3d, 0x42, 0x33, 0x32, 0xe5, 0xcd, 0x6b, 0x39, 0x63, 0xce, 0x70,
	0x97, 0xaf, 0x79, 0xcc, 0xcc, 0xf7, 0x33, 0x3c, 0xa7, 0x78, 0x5f, 0xbd, 0xde, 0x81, 0x9a, 0xf8,
	0x08, 0xad, 0xa8, 0xe8, 0xa2, 0xd0, 0xf7, 0x1a, 0xaa, 0xc6, 0xdb, 0xc9, 0xfc, 0x14, 0x50, 0x0e,
	0x02, 0x8f, 0x3f, 0xca, 0x09, 0x6b, 0xc8, 0x9e, 0x70, 0x8e, 0xfb, 0x48, 0x9e, 0xfb, 0x77, 0x91,
	0xc1, 0x90, 0xd6, 0x78, 0xa9, 0x57, 0x06, 0x59, 0xb3, 0xfc, 0xe7, 0xdc, 0xf6, 0x86, 0x7c, 0xe2,
	0x3b, 0xd4, 0xf6, 0x14, 0x0a, 0x53, 0x3e, 0x5f, 0x85, 0x19, 0x1d, 0x4e, 0x58, 0x43, 0x3a, 0xfc,
	0x9c, 0xb0, 0xb2, 0x9e, 0x7f, 0x07, 0x2d, 0x64, 0xc1, 0xd2, 0xd9, 0xdc, 0x41, 0x38, 0x23, 0x8b,
	0xb4, 0xb7, 0x99, 0x4d, 0x0b, 0x44, 0xd6, 0xd2, 0xf3, 0x5c, 0xf8, 0xca, 0x9e, 0xa7, 0xb8, 0xf4,
	0xf6, 0x51, 0xaf, 0xf6, 0x95, 0x17, 0x04, 0xa4, 0xf1, 0x44, 0x71, 0x67, 0xf5, 0x53, 0x1e, 0x96,
	0x46, 0x0f, 0x00, 0x92, 0xa5, 0x66, 0x5e, 0xec, 0x67, 0x96, 0xca, 0x52, 0x0f, 0xf6, 0x81, 0x83,
	0xd1, 0xc3, 0x81, 0x2f, 0xf3, 0xf3, 0x14, 0x87, 0xde, 0x65, 0x5e, 0xca, 0x3f, 0x14, 0x92, 0xa8,
	0x62, 0x89, 0x2c, 0xf5, 0x0d, 0x26, 0xf8, 0x9b, 0x11, 0x1e, 0xa2, 0x47, 0x48, 0xdf, 0xe1, 0xb7,
	0xad, 0xe7, 0xfa, 0x8e, 0xfc, 0xfc, 0xda, 0x99, 0xe3, 0x67, 0x69, 0x84, 0x15, 0x3d, 0x51, 0xaa,
	0x6f, 0xe6, 0x85, 0x34, 0x50, 0x95, 0x7f, 0xc8, 0x4d, 0x20, 0x4b, 0x93, 0xf2, 0x7b, 0xd9, 0x5f,
	0x6d, 0x48, 0xbf, 0x97, 0x3e, 0xfe, 0xfa, 0xaf, 0x4a, 0xe9, 0x49, 0x13, 0x9f, 0x37, 0x0c, 0x31,
	0xbe, 0x87, 0xe6, 0xfa, 0xc5, 0x3c, 0xb3, 0xed, 0x5e, 0xd9, 0x65, 0xb6, 0x52, 0xfe, 0xd6, 0x3f,
	0x5e, 0x39, 0x6b, 0x5b, 0x77, 0x33, 0xbf, 0xc7, 0x81, 0x82, 0x5d, 0x4e, 0x0b, 0x36, 0xeb, 0x4c,
	0x7f, 0x82, 0x66, 0x76, 0xcc, 0xd0, 0x64, 0xa1, 0x4f, 0x89, 0xb4, 0x37, 0x45, 0xd4, 0x50, 0x7a,
	0x43, 0x51, 0x03, 0xc9, 0xce, 0x2e, 0x7e, 0x97, 0xb2, 0x68, 0x47, 0x43, 0x8a, 0xc8, 0xa1, 0xb7,
	0x3a, 0x1d, 0x93, 0x47, 0x4d, 0x04, 0x3b, 0x3b, 0x00, 0x26, 0xfb, 0xaf, 0x25, 0xb4, 0xd2, 0xbb,
	0xb4, 0x74, 0x01, 0x52, 0x43, 0xe3, 0x32, 0xe3, 0x81, 0x9d, 0x4e, 0xea, 0xd1, 0x57, 0x6e, 0x8a,
	0x81, 0x4f, 0x43, 0x50, 0x84, 0xaa, 0x0e, 0x9f, 0x79, 0x6e, 0x6b, 0xda, 0xae, 0xe3, 0x19, 0x1d,
	0x46, 0x28, 0x18, 0x6a, 0x19, 0x88, 0xaa, 0x30, 0xfa, 0x42, 0x0e, 0x26, 0x68, 0x81, 0xc9, 0xd8,
	0x4b, 0x9f, 0xda, 0xd2, 0x9e, 0x05, 0xda, 0xbe, 0x1c, 0xcc, 0x1e, 0xdc, 0x85, 0x21, 0xd4, 0x68,
	0x4c, 0x79, 0x7d, 0x3c, 0x2c, 0xde, 0xe1, 0x40, 0xf5, 0xb8, 0x8a, 0xae, 0x14, 0xd1, 0x46, 0x6a,
	0xf2, 0xab, 0x12, 0xba, 0xd4, 0x8b, 0x93, 0x2d, 0x8f, 0xfd, 0x1f, 0x90, 0xe1, 0xc7, 0xfd, 0xf6,
	0x38, 0x50, 0x8a, 0xd7, 0xd0, 0xd5, 0x62, 0xea, 0x48, 0x8e, 0x0d, 0x74, 0xb1, 0x17, 0x49, 0x5a,
	0xdd, 0xc7, 0x49, 0xf6, 0x6d, 0x11, 0x1a, 0x1a, 0xa6, 0x67, 0x1b, 0x27, 0xe4, 0xd4, 0xe8, 0x9a,
	0xed, 0x0e, 0x11, 0x32, 0x9d, 0xd0, 0x97, 0xa2, 0x87, 0x5e, 0x84, 0x86, 0x5b, 0x9e, 0x1d, 0xfd,
	0x50, 0x81, 0xd5, 0xbf, 0x52, 0xf2, 0xe5, 0x6b, 0xde, 0x46, 0xb3, 0x6e, 0xd3, 0x0d, 0x0d, 0x06,
	0x83, 0x70, 0xfd, 0x15, 0x54, 0x8a, 0x04, 0x19, 0xdc, 0x7a, 0xd3, 0x9c, 0x24, 0xf9, 0x5e, 0x7f,
	0x3d, 0xc2, 0x33, 0x1c, 0x9d, 0x80, 0x61, 0xbd, 0x81, 0xec, 0x31, 0xe7, 0xa1, 0xcb, 0x0a, 0x0f,
	0xfd, 0x10, 0x5d, 0xa4, 0x62, 0x05, 0x46, 0x36, 0xb3, 0x90, 0x8f, 0xe1, 0x44, 0xd3, 0x6e, 0x41,
	0xe2, 0x64, 0x52, 0x8a, 0x73, 0xd2, 0x90, 0x22, 0x67, 0x3d, 0x5e, 0xe4, 0xac, 0x6f, 0xa7, 0xc4,
	0x36, 0x5c, 0xb3, 0x44, 0x22, 0x47, 0xfa, 0xf2, 0xef, 0x25, 0x84, 0x45, 0x40, 0xd7, 0x70, 0x77,
	0x8e, 0xe2, 0x17, 0xd5, 0x85, 0xe2, 0xdf, 0x41, 0x33, 0x16, 0xa1, 0xe4, 0x88, 0xfa, 0x86, 0x7c,
	0xda, 0x26, 0xd3, 0x9d, 0xde, 0x8c, 0x6b, 0x5b, 0x60, 0xc9, 0xc7, 0x6d, 0x55, 0x2b, 0xfd, 0x15,
	0x7f, 0x80, 0x2a, 0x5e, 0x33, 0x8c, 0x39, 0x88, 0xf8, 0x57, 0xeb, 0xcd, 0xd9, 0x9a, 0xa1, 0xa4,
	0x9e, 0xf4, 0xa2, 0x8f, 0x9c, 0xf2, 0x6b, 0x9f, 0xc5, 0x94, 0xa3, 0x4a, 0xca, 0x1f, 0xf9, 0x2c,
	0xa2, 0xfc, 0x3a, 0xfa, 0x58, 0x7f, 0x37, 0xb7, 0xd1, 0x81, 0x02, 0xd3, 0xd0, 0xc5, 0x1e, 0x12,
	0x29, 0xb6, 0xcd, 0x5f, 0x5f, 0x42, 0x15, 0x68, 0x3c, 0xe8, 0x81, 0x75, 0xd0, 0xb5, 0xf0, 0x1e,
	0x9a, 0x4a, 0xff, 0xdd, 0x19, 0xdc, 0x7b, 0x8b, 0xf4, 0xfc, 0x99, 0x9b, 0x5a, 0x3f, 0x38, 0x5f,
	0xd6, 0x23, 0x34, 0x11, 0xb5, 0xf1, 0x71, 0x9f, 0xf7, 0x11, 0xb5, 0x22, 0x18, 0xe7, 0xf1, 0xff,
	0xd0, 0xb8, 0x6c, 0xc7, 0xe2, 0xe2, 0x26, 0x7b, 0xad, 0x00, 0x14, 0x2f, 0x42, 0x08, 0x40, 0xb1,
	0x88, 0x38, 0x27, 0xaa, 0x15, 0xc1, 0x38, 0x8f, 0xcf, 0xd0, 0x64, 0xfc, 0x90, 0x1f, 0xaf, 0x28,
	0x10, 0xa3, 0x5f, 0x23, 0xd4, 0x0a, 0x81, 0x9c, 0xcd, 0xef, 0x23, 0x9c, 0x7f, 0xf7, 0x8d, 0x15,
	0x6d, 0xff, 0xfc, 0xaf, 0x03, 0x6a, 0x83, 0xb1, 0xe2, 0xcd, 0x8a, 0xd0, 0x45, 0xb1, 0xd9, 0x38,
	0xd6, 0xab, 0x15, 0xc1, 0x38, 0x8f, 0x0f, 0xd1, 0x05, 0xa8, 0x56, 0xe3, 0xa5, 0xfc, 0xef, 0xc6,
	0xc0, 0x09, 0xd7, 0x94, 0x00, 0x4e, 0xba, 0x07, 0x5d, 0xcf, 0xf8, 0xb5, 0x22, 0xbe, 0xac, 0x7e,
	0x54, 0x15, 0xbd, 0x06, 0xad, 0xf5, 0x83, 0x67, 0xf8, 0x89, 0xce, 0x6a, 0x01, 0xbf, 0xf8, 0x29,
	0x63, 0xad, 0x1f, 0x3c, 0xc3, 0x4f, 0xea, 0xc3, 0xe5, 0xfe, 0xaf, 0xe7, 0x6a, 0xfd, 0xe0, 0x9c,
	0xdf, 0x31, 0x4f, 0xf8, 0xf2, 0x6f, 0x9a, 0xf0, 0x8d, 0x41, 0x6f, 0x97, 0xa4, 0x20, 0x87, 0xc1,
	0xe3, 0xf3, 0x38, 0xf0, 0x33, 0x83, 0xfc, 0x7b, 0x18, 0x7c, 0xb3, 0xc0, 0x72, 0x7a, 0x1f, 0xbf,
	0xd4, 0x86, 0x42, 0x8c, 0xb7, 0x94, 0x7f, 0x3c, 0xa1, 0xd8, 0x92, 0xf2, 0x95, 0x4d, 0x6d, 0x18,
	0xbc, 0xd8, 0xa4, 0x64, 0xcf, 0x5b, 0x61, 0x52, 0xc9, 0x8b, 0x87, 0x5a, 0x21, 0x50, 0x3c, 0x1d,
	0x43, 0x49, 0xe7, 0x13, 0xe7, 0x1f, 0xf1, 0xa5, 0xe2, 0xd7, 0x5a, 0x31, 0x34, 0xd6, 0x8d, 0x24,
	0x14, 0x51, 0xe8, 0x46, 0x26, 0x92, 0xab, 0xf5, 0x83, 0xc7, 0x82, 0xcc, 0xb7, 0xf1, 0x14, 0x82,
	0x54, 0x36, 0x0a, 0x6b, 0xc3, 0xe0, 0xf1, 0x79, 0x7e, 0x84, 0xaa, 0x99, 0x96, 0x1b, 0xbe, 0xa2,
	0x34, 0xdb, 0xa4, 0x79, 0x56, 0xeb, 0x8b, 0xc0, 0x59, 0xfe, 0x38, 0xe9, 0x7a, 0xc5, 0x5c, 0xeb,
	0x45, 0xae, 0x33, 0xc5, 0x78, 0x10, 0x4e, 0xbc, 0xdc, 0x54, 0x47, 0x4d, 0xb1, 0xdc, 0x6c, 0x03,
	0xaf, 0xd6, 0x17, 0x21, 0x76, 0xab, 0xbd, 0xed, 0x35, 0x85, 0x5b, 0x55, 0xf4, 0xec, 0x6a, 0x83,
	0xb1, 0x62, 0xdd, 0x48, 0x7e, 0x49, 0xa2, 0xd0, 0x8d, 0xcc, 0xef, 0x75, 0x6a, 0xfd, 0xe0, 0xa2,
	0xd2, 0x52, 0x49, 0xb5, 0xa9, 0xf0, 0x25, 0x65, 0x37, 0x27, 0xbe, 0x1e, 0xfb, 0x80, 0xd3, 0xcc,
	0xa4, 0x4f, 0xbb, 0x54, 0xdc, 0x7e, 0x29, 0x64, 0x96, 0x78, 0xb4, 0x88, 0x99, 0xbc, 0x43, 0x94,
	0xd8, 0xc9, 0x35, 0xd2, 0x07, 0x1c, 0xdf, 0x46, 0xa2, 0x8d, 0x85, 0x95, 0x1d, 0x2b, 0xe9, 0x06,
	0x8b, 0x60, 0xb1, 0x9f, 0x90, 0xe1, 0x9e, 0xc2, 0x4f, 0x24, 0xc1, 0x76, 0xad, 0x10, 0x18, 0xab,
	0x74, 0xb6, 0x68, 0xa2, 0x50, 0xe9, 0x5c, 0xb9, 0xaa, 0x36, 0x08, 0x27, 0xc7, 0x5b, 0x0a, 0xae,
	0x98, 0x2e, 0x91, 0xde, 0x20, 0x9c, 0x78, 0xfb, 0xb2, 0x67, 0xa2, 0xd8, 0x7e, 0xd2, 0x76, 0xa9,
	0x15, 0x02, 0xa5, 0x9b, 0x4c, 0xfa, 0x0e, 0xb8, 0xa0, 0xaf, 0x20, 0x4f, 0xa3, 0x18, 0x2a, 0x4d,
	0x21, 0x5d, 0x8b, 0xc0, 0x85, 0x95, 0x06, 0xc9, 0xad, 0x1f, 0x3c, 0x76, 0x93, 0xf9, 0x4a, 0xbe,
	0xc2, 0x4d, 0x2a, 0xdb, 0x1a, 0xb5, 0x61, 0xf0, 0x94, 0xf3, 0xc8, 0x83, 0xea, 0x4f, 0x9f, 0x1c,
	0xd6, 0x30, 0x78, 0xca, 0x79, 0xa4, 0x59, 0xf6, 0xa7, 0x4f, 0xec, 0x73, 0x18, 0x3c, 0x3e, 0xcf,
	0x57, 0x68, 0x2e, 0x57, 0x6b, 0xc6, 0xfd, 0x8b, 0xef, 0xf2, 0x44, 0x06, 0x22, 0xc5, 0x6e, 0x3a,
	0x55, 0x1f, 0x56, 0xb8, 0xe9, 0x6c, 0xfd, 0xb9, 0xd6, 0x17, 0x81, 0xb3, 0xa4, 0x48, 0x2b, 0xaa,
	0x9f, 0xe0, 0xf5, 0xdc, 0x1f, 0x5a, 0x2c, 0x2c, 0x43, 0xd5, 0x86, 0xc5, 0xe5, 0x73, 0x7e, 0x83,
	0x6a, 0xc5, 0xd5, 0x06, 0x7c, 0x67, 0x00, 0xa7, 0xec, 0x85, 0x3f, 0x3c, 0x36, 0x9f, 0xd9, 0x42,
	0xf3, 0x8a, 0x52, 0x03, 0x7e, 0x7b, 0x00, 0x13, 0x29, 0xcc, 0x21, 0xd0, 0xa4, 0x12, 0xe4, 0xfe,
	0x14, 0x66, 0x4e, 0x09, 0x54, 0x7f, 0xf4, 0xb3, 0x36, 0x10, 0x29, 0xcf, 0x5e, 0x1a, 0x4c, 0x1f,
	0xca, 0xc4, 0x5a, 0x06, 0x22, 0x71, 0xf6, 0x5f, 0xa2, 0x99, 0x9e, 0xc4, 0x14, 0xf7, 0x76, 0x43,
	0xf2, 0x49, 0x7d, 0x6d, 0x00, 0x8a, 0x4e, 0xc2, 0xda, 0xd2, 0x4f, 0x5f, 0x6b, 0x7f, 0xfd, 0x1b,
	0xf4, 0xb3, 0xd7, 0xda, 0xc8, 0xcf, 0x5f, 0x6b, 0xa5, 0x3f, 0xfc, 0x45, 0xfd, 0x02, 0xe0, 0x3e,
	0x9a, 0xfd, 0xb1, 0xf8, 0xf0, 0xd3, 0x52, 0xe9, 0x67, 0xa5, 0xd2, 0xcf, 0x4b, 0xa5, 0xff, 0x09,
	0x00, 0x00, 0xff, 0xff, 0x38, 0x14, 0xd9, 0x66, 0x8b, 0x56, 0x00, 0x00,
}

//Generated by ntnx_rpc plugin

// Service UhuraRpcSvc
type IUhuraRpcSvc interface {
	BeforeRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}) error
	AfterRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}, err error) error

	BatchRequest(*BatchRequestArg, *BatchRequestRet) error
	VmCreate(*VmCreateArg, *VmCreateRet) error
	VmClone(*VmCloneArg, *VmCloneRet) error
	VmUpdate(*VmUpdateArg, *VmUpdateRet) error
	VmUpgrade(*VmUpgradeArg, *VmUpgradeRet) error
	VmChangePowerState(*VmChangePowerStateArg, *VmChangePowerStateRet) error
	VmDelete(*VmDeleteArg, *VmDeleteRet) error
	VmGet(*VmGetArg, *VmGetRet) error
	VmDiskAttach(*VmDiskAttachArg, *VmDiskAttachRet) error
	VmDiskDetach(*VmDiskDetachArg, *VmDiskDetachRet) error
	VmDiskUpdate(*VmDiskUpdateArg, *VmDiskUpdateRet) error
	VmDiskCloneConfigGet(*VmDiskCloneConfigGetArg, *VmDiskCloneConfigGetRet) error
	VmCreateWithCustomize(*VmCreateWithCustomizeArg, *VmCreateWithCustomizeRet) error
	VmCloneWithCustomize(*VmCloneWithCustomizeArg, *VmCloneWithCustomizeRet) error
	VmDestroy(*VmDestroyArg, *VmDestroyRet) error
	VmRegister(*VmRegisterArg, *VmRegisterRet) error
	VmUnregister(*VmUnregisterArg, *VmUnregisterRet) error
	VmUpdateNotification(*VmUpdateNotificationArg, *VmUpdateNotificationRet) error
	VmGetAllUuids(*VmGetAllUuidsArg, *VmGetAllUuidsRet) error
	VmUpdateAllUuids(*VmUpdateAllUuidsArg, *VmUpdateAllUuidsRet) error
	VmUpdateUuids(*VmUpdateUuidsArg, *VmUpdateUuidsRet) error
	VmGetConsoleTicket(*VmGetConsoleTicketArg, *VmGetConsoleTicketRet) error
	VmGuestTools(*VmGuestToolsArg, *VmGuestToolsRet) error
	VmNicCreate(*VmNicCreateArg, *VmNicCreateRet) error
	VmNicUpdate(*VmNicUpdateArg, *VmNicUpdateRet) error
	VmNicDelete(*VmNicDeleteArg, *VmNicDeleteRet) error
	VmNicGet(*VmNicGetArg, *VmNicGetRet) error
	VmRestore(*VmRestoreArg, *VmRestoreRet) error
	VmSnapshotCreate(*VmSnapshotCreateArg, *VmSnapshotCreateRet) error
	VmSnapshotDelete(*VmSnapshotDeleteArg, *VmSnapshotDeleteRet) error
	VmNicList(*VmNicListArg, *VmNicListRet) error
	NetworkGet(*NetworkGetArg, *NetworkGetRet) error
	DatastoreGet(*DatastoreGetArg, *DatastoreGetRet) error
	VmToVmAffinityCreate(*VmToVmAffinityCreateArg, *VmToVmAffinityCreateRet) error
	VmToVmAffinityDelete(*VmToVmAffinityDeleteArg, *VmToVmAffinityDeleteRet) error
	VmToVmAffinityUpdate(*VmToVmAffinityUpdateArg, *VmToVmAffinityUpdateRet) error
	VmToVmAffinityGet(*VmToVmAffinityGetArg, *VmToVmAffinityGetRet) error
	VmSnapshotGet(*VmSnapshotGetArg, *VmSnapshotGetRet) error
	ManagementServerRegister(*ManagementServerRegisterArg, *ManagementServerRegisterRet) error
	ManagementServerUnregister(*ManagementServerUnregisterArg, *ManagementServerUnregisterRet) error
	ManagementServerGet(*ManagementServerGetArg, *ManagementServerGetRet) error
	UuidMappingUpdate(*UuidMappingUpdateArg, *UuidMappingUpdateRet) error
	UuidMappingDelete(*UuidMappingDeleteArg, *UuidMappingDeleteRet) error
	UpdateVmDbState(*UpdateVmDbStateArg, *UpdateVmDbStateRet) error
}

func _UhuraRpcSvc_BatchRequest_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(BatchRequestArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &BatchRequestRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.BatchRequest(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmClone_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmCloneArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmCloneRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmClone(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmUpgrade_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmUpgradeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmUpgradeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmUpgrade(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmChangePowerState_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmChangePowerStateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmChangePowerStateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmChangePowerState(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmDiskAttach_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDiskAttachArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDiskAttachRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDiskAttach(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmDiskDetach_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDiskDetachArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDiskDetachRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDiskDetach(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmDiskUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDiskUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDiskUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDiskUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmDiskCloneConfigGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDiskCloneConfigGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDiskCloneConfigGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDiskCloneConfigGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmCreateWithCustomize_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmCreateWithCustomizeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmCreateWithCustomizeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmCreateWithCustomize(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmCloneWithCustomize_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmCloneWithCustomizeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmCloneWithCustomizeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmCloneWithCustomize(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmDestroy_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmDestroyArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmDestroyRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmDestroy(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmRegister_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmRegisterArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmRegisterRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmRegister(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmUnregister_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmUnregisterArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmUnregisterRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmUnregister(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmUpdateNotification_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmUpdateNotificationArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmUpdateNotificationRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmUpdateNotification(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmGetAllUuids_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGetAllUuidsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGetAllUuidsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGetAllUuids(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmUpdateAllUuids_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmUpdateAllUuidsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmUpdateAllUuidsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmUpdateAllUuids(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmUpdateUuids_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmUpdateUuidsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmUpdateUuidsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmUpdateUuids(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmGetConsoleTicket_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGetConsoleTicketArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGetConsoleTicketRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGetConsoleTicket(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmGuestTools_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmGuestToolsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmGuestToolsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmGuestTools(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmNicCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmNicCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmNicCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmNicCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmNicUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmNicUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmNicUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmNicUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmNicDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmNicDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmNicDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmNicDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmNicGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmNicGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmNicGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmNicGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmRestore_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmRestoreArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmRestoreRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmRestore(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmSnapshotCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmSnapshotCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmSnapshotCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmSnapshotCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmSnapshotDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmSnapshotDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmSnapshotDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmSnapshotDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmNicList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmNicListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmNicListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmNicList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_NetworkGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(NetworkGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &NetworkGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.NetworkGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_DatastoreGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(DatastoreGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &DatastoreGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.DatastoreGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmToVmAffinityCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmToVmAffinityCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmToVmAffinityCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmToVmAffinityCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmToVmAffinityDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmToVmAffinityDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmToVmAffinityDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmToVmAffinityDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmToVmAffinityUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmToVmAffinityUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmToVmAffinityUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmToVmAffinityUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmToVmAffinityGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmToVmAffinityGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmToVmAffinityGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmToVmAffinityGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_VmSnapshotGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(VmSnapshotGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &VmSnapshotGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.VmSnapshotGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_ManagementServerRegister_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ManagementServerRegisterArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ManagementServerRegisterRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ManagementServerRegister(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_ManagementServerUnregister_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ManagementServerUnregisterArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ManagementServerUnregisterRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ManagementServerUnregister(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_ManagementServerGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(ManagementServerGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &ManagementServerGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.ManagementServerGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_UuidMappingUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(UuidMappingUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &UuidMappingUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.UuidMappingUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_UuidMappingDelete_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(UuidMappingDeleteArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &UuidMappingDeleteRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.UuidMappingDelete(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _UhuraRpcSvc_UpdateVmDbState_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IUhuraRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(UpdateVmDbStateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &UpdateVmDbStateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.UpdateVmDbState(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

var _UhuraRpcSvcDesc = util_net.ServiceDesc{
	Name: "nutanix.uhura.UhuraRpcSvc",
	Methods: map[string]util_net.ServiceMethodFn{
		"BatchRequest":               _UhuraRpcSvc_BatchRequest_Handler,
		"VmCreate":                   _UhuraRpcSvc_VmCreate_Handler,
		"VmClone":                    _UhuraRpcSvc_VmClone_Handler,
		"VmUpdate":                   _UhuraRpcSvc_VmUpdate_Handler,
		"VmUpgrade":                  _UhuraRpcSvc_VmUpgrade_Handler,
		"VmChangePowerState":         _UhuraRpcSvc_VmChangePowerState_Handler,
		"VmDelete":                   _UhuraRpcSvc_VmDelete_Handler,
		"VmGet":                      _UhuraRpcSvc_VmGet_Handler,
		"VmDiskAttach":               _UhuraRpcSvc_VmDiskAttach_Handler,
		"VmDiskDetach":               _UhuraRpcSvc_VmDiskDetach_Handler,
		"VmDiskUpdate":               _UhuraRpcSvc_VmDiskUpdate_Handler,
		"VmDiskCloneConfigGet":       _UhuraRpcSvc_VmDiskCloneConfigGet_Handler,
		"VmCreateWithCustomize":      _UhuraRpcSvc_VmCreateWithCustomize_Handler,
		"VmCloneWithCustomize":       _UhuraRpcSvc_VmCloneWithCustomize_Handler,
		"VmDestroy":                  _UhuraRpcSvc_VmDestroy_Handler,
		"VmRegister":                 _UhuraRpcSvc_VmRegister_Handler,
		"VmUnregister":               _UhuraRpcSvc_VmUnregister_Handler,
		"VmUpdateNotification":       _UhuraRpcSvc_VmUpdateNotification_Handler,
		"VmGetAllUuids":              _UhuraRpcSvc_VmGetAllUuids_Handler,
		"VmUpdateAllUuids":           _UhuraRpcSvc_VmUpdateAllUuids_Handler,
		"VmUpdateUuids":              _UhuraRpcSvc_VmUpdateUuids_Handler,
		"VmGetConsoleTicket":         _UhuraRpcSvc_VmGetConsoleTicket_Handler,
		"VmGuestTools":               _UhuraRpcSvc_VmGuestTools_Handler,
		"VmNicCreate":                _UhuraRpcSvc_VmNicCreate_Handler,
		"VmNicUpdate":                _UhuraRpcSvc_VmNicUpdate_Handler,
		"VmNicDelete":                _UhuraRpcSvc_VmNicDelete_Handler,
		"VmNicGet":                   _UhuraRpcSvc_VmNicGet_Handler,
		"VmRestore":                  _UhuraRpcSvc_VmRestore_Handler,
		"VmSnapshotCreate":           _UhuraRpcSvc_VmSnapshotCreate_Handler,
		"VmSnapshotDelete":           _UhuraRpcSvc_VmSnapshotDelete_Handler,
		"VmNicList":                  _UhuraRpcSvc_VmNicList_Handler,
		"NetworkGet":                 _UhuraRpcSvc_NetworkGet_Handler,
		"DatastoreGet":               _UhuraRpcSvc_DatastoreGet_Handler,
		"VmToVmAffinityCreate":       _UhuraRpcSvc_VmToVmAffinityCreate_Handler,
		"VmToVmAffinityDelete":       _UhuraRpcSvc_VmToVmAffinityDelete_Handler,
		"VmToVmAffinityUpdate":       _UhuraRpcSvc_VmToVmAffinityUpdate_Handler,
		"VmToVmAffinityGet":          _UhuraRpcSvc_VmToVmAffinityGet_Handler,
		"VmSnapshotGet":              _UhuraRpcSvc_VmSnapshotGet_Handler,
		"ManagementServerRegister":   _UhuraRpcSvc_ManagementServerRegister_Handler,
		"ManagementServerUnregister": _UhuraRpcSvc_ManagementServerUnregister_Handler,
		"ManagementServerGet":        _UhuraRpcSvc_ManagementServerGet_Handler,
		"UuidMappingUpdate":          _UhuraRpcSvc_UuidMappingUpdate_Handler,
		"UuidMappingDelete":          _UhuraRpcSvc_UuidMappingDelete_Handler,
		"UpdateVmDbState":            _UhuraRpcSvc_UpdateVmDbState_Handler,
	},
}

func NewUhuraRpcSvc(impl IUhuraRpcSvc) *util_net.Service {
	return &util_net.Service{
		Desc: &_UhuraRpcSvcDesc,
		Impl: impl,
	}
}

type IUhuraRpcClient interface {
	BatchRequest(*BatchRequestArg) (*BatchRequestRet, error)
	VmCreate(*VmCreateArg) (*VmCreateRet, error)
	VmClone(*VmCloneArg) (*VmCloneRet, error)
	VmUpdate(*VmUpdateArg) (*VmUpdateRet, error)
	VmUpgrade(*VmUpgradeArg) (*VmUpgradeRet, error)
	VmChangePowerState(*VmChangePowerStateArg) (*VmChangePowerStateRet, error)
	VmDelete(*VmDeleteArg) (*VmDeleteRet, error)
	VmGet(*VmGetArg) (*VmGetRet, error)
	VmDiskAttach(*VmDiskAttachArg) (*VmDiskAttachRet, error)
	VmDiskDetach(*VmDiskDetachArg) (*VmDiskDetachRet, error)
	VmDiskUpdate(*VmDiskUpdateArg) (*VmDiskUpdateRet, error)
	VmDiskCloneConfigGet(*VmDiskCloneConfigGetArg) (*VmDiskCloneConfigGetRet, error)
	VmCreateWithCustomize(*VmCreateWithCustomizeArg) (*VmCreateWithCustomizeRet, error)
	VmCloneWithCustomize(*VmCloneWithCustomizeArg) (*VmCloneWithCustomizeRet, error)
	VmDestroy(*VmDestroyArg) (*VmDestroyRet, error)
	VmRegister(*VmRegisterArg) (*VmRegisterRet, error)
	VmUnregister(*VmUnregisterArg) (*VmUnregisterRet, error)
	VmUpdateNotification(*VmUpdateNotificationArg) (*VmUpdateNotificationRet, error)
	VmGetAllUuids(*VmGetAllUuidsArg) (*VmGetAllUuidsRet, error)
	VmUpdateAllUuids(*VmUpdateAllUuidsArg) (*VmUpdateAllUuidsRet, error)
	VmUpdateUuids(*VmUpdateUuidsArg) (*VmUpdateUuidsRet, error)
	VmGetConsoleTicket(*VmGetConsoleTicketArg) (*VmGetConsoleTicketRet, error)
	VmGuestTools(*VmGuestToolsArg) (*VmGuestToolsRet, error)
	VmNicCreate(*VmNicCreateArg) (*VmNicCreateRet, error)
	VmNicUpdate(*VmNicUpdateArg) (*VmNicUpdateRet, error)
	VmNicDelete(*VmNicDeleteArg) (*VmNicDeleteRet, error)
	VmNicGet(*VmNicGetArg) (*VmNicGetRet, error)
	VmRestore(*VmRestoreArg) (*VmRestoreRet, error)
	VmSnapshotCreate(*VmSnapshotCreateArg) (*VmSnapshotCreateRet, error)
	VmSnapshotDelete(*VmSnapshotDeleteArg) (*VmSnapshotDeleteRet, error)
	VmNicList(*VmNicListArg) (*VmNicListRet, error)
	NetworkGet(*NetworkGetArg) (*NetworkGetRet, error)
	DatastoreGet(*DatastoreGetArg) (*DatastoreGetRet, error)
	VmToVmAffinityCreate(*VmToVmAffinityCreateArg) (*VmToVmAffinityCreateRet, error)
	VmToVmAffinityDelete(*VmToVmAffinityDeleteArg) (*VmToVmAffinityDeleteRet, error)
	VmToVmAffinityUpdate(*VmToVmAffinityUpdateArg) (*VmToVmAffinityUpdateRet, error)
	VmToVmAffinityGet(*VmToVmAffinityGetArg) (*VmToVmAffinityGetRet, error)
	VmSnapshotGet(*VmSnapshotGetArg) (*VmSnapshotGetRet, error)
	ManagementServerRegister(*ManagementServerRegisterArg) (*ManagementServerRegisterRet, error)
	ManagementServerUnregister(*ManagementServerUnregisterArg) (*ManagementServerUnregisterRet, error)
	ManagementServerGet(*ManagementServerGetArg) (*ManagementServerGetRet, error)
	UuidMappingUpdate(*UuidMappingUpdateArg) (*UuidMappingUpdateRet, error)
	UuidMappingDelete(*UuidMappingDeleteArg) (*UuidMappingDeleteRet, error)
	UpdateVmDbState(*UpdateVmDbStateArg) (*UpdateVmDbStateRet, error)
}

type UhuraRpcClient struct {
	Impl util_net.ProtobufRPCClientIfc
}

func NewUhuraRpcClient(impl util_net.ProtobufRPCClientIfc) IUhuraRpcClient {
	return &UhuraRpcClient{
		Impl: impl,
	}
}

func (client *UhuraRpcClient) BatchRequest(
	arg *BatchRequestArg) (
	*BatchRequestRet, error) {

	ret := &BatchRequestRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "BatchRequest", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmCreate(
	arg *VmCreateArg) (
	*VmCreateRet, error) {

	ret := &VmCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmCreate", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmClone(
	arg *VmCloneArg) (
	*VmCloneRet, error) {

	ret := &VmCloneRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmClone", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmUpdate(
	arg *VmUpdateArg) (
	*VmUpdateRet, error) {

	ret := &VmUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmUpdate", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmUpgrade(
	arg *VmUpgradeArg) (
	*VmUpgradeRet, error) {

	ret := &VmUpgradeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmUpgrade", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmChangePowerState(
	arg *VmChangePowerStateArg) (
	*VmChangePowerStateRet, error) {

	ret := &VmChangePowerStateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmChangePowerState", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmDelete(
	arg *VmDeleteArg) (
	*VmDeleteRet, error) {

	ret := &VmDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmDelete", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmGet(
	arg *VmGetArg) (
	*VmGetRet, error) {

	ret := &VmGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmGet", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmDiskAttach(
	arg *VmDiskAttachArg) (
	*VmDiskAttachRet, error) {

	ret := &VmDiskAttachRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmDiskAttach", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmDiskDetach(
	arg *VmDiskDetachArg) (
	*VmDiskDetachRet, error) {

	ret := &VmDiskDetachRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmDiskDetach", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmDiskUpdate(
	arg *VmDiskUpdateArg) (
	*VmDiskUpdateRet, error) {

	ret := &VmDiskUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmDiskUpdate", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmDiskCloneConfigGet(
	arg *VmDiskCloneConfigGetArg) (
	*VmDiskCloneConfigGetRet, error) {

	ret := &VmDiskCloneConfigGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmDiskCloneConfigGet", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmCreateWithCustomize(
	arg *VmCreateWithCustomizeArg) (
	*VmCreateWithCustomizeRet, error) {

	ret := &VmCreateWithCustomizeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmCreateWithCustomize", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmCloneWithCustomize(
	arg *VmCloneWithCustomizeArg) (
	*VmCloneWithCustomizeRet, error) {

	ret := &VmCloneWithCustomizeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmCloneWithCustomize", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmDestroy(
	arg *VmDestroyArg) (
	*VmDestroyRet, error) {

	ret := &VmDestroyRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmDestroy", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmRegister(
	arg *VmRegisterArg) (
	*VmRegisterRet, error) {

	ret := &VmRegisterRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmRegister", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmUnregister(
	arg *VmUnregisterArg) (
	*VmUnregisterRet, error) {

	ret := &VmUnregisterRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmUnregister", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmUpdateNotification(
	arg *VmUpdateNotificationArg) (
	*VmUpdateNotificationRet, error) {

	ret := &VmUpdateNotificationRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmUpdateNotification", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmGetAllUuids(
	arg *VmGetAllUuidsArg) (
	*VmGetAllUuidsRet, error) {

	ret := &VmGetAllUuidsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmGetAllUuids", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmUpdateAllUuids(
	arg *VmUpdateAllUuidsArg) (
	*VmUpdateAllUuidsRet, error) {

	ret := &VmUpdateAllUuidsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmUpdateAllUuids", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmUpdateUuids(
	arg *VmUpdateUuidsArg) (
	*VmUpdateUuidsRet, error) {

	ret := &VmUpdateUuidsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmUpdateUuids", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmGetConsoleTicket(
	arg *VmGetConsoleTicketArg) (
	*VmGetConsoleTicketRet, error) {

	ret := &VmGetConsoleTicketRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmGetConsoleTicket", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmGuestTools(
	arg *VmGuestToolsArg) (
	*VmGuestToolsRet, error) {

	ret := &VmGuestToolsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmGuestTools", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmNicCreate(
	arg *VmNicCreateArg) (
	*VmNicCreateRet, error) {

	ret := &VmNicCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmNicCreate", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmNicUpdate(
	arg *VmNicUpdateArg) (
	*VmNicUpdateRet, error) {

	ret := &VmNicUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmNicUpdate", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmNicDelete(
	arg *VmNicDeleteArg) (
	*VmNicDeleteRet, error) {

	ret := &VmNicDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmNicDelete", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmNicGet(
	arg *VmNicGetArg) (
	*VmNicGetRet, error) {

	ret := &VmNicGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmNicGet", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmRestore(
	arg *VmRestoreArg) (
	*VmRestoreRet, error) {

	ret := &VmRestoreRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmRestore", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmSnapshotCreate(
	arg *VmSnapshotCreateArg) (
	*VmSnapshotCreateRet, error) {

	ret := &VmSnapshotCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmSnapshotCreate", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmSnapshotDelete(
	arg *VmSnapshotDeleteArg) (
	*VmSnapshotDeleteRet, error) {

	ret := &VmSnapshotDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmSnapshotDelete", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmNicList(
	arg *VmNicListArg) (
	*VmNicListRet, error) {

	ret := &VmNicListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmNicList", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) NetworkGet(
	arg *NetworkGetArg) (
	*NetworkGetRet, error) {

	ret := &NetworkGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "NetworkGet", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) DatastoreGet(
	arg *DatastoreGetArg) (
	*DatastoreGetRet, error) {

	ret := &DatastoreGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "DatastoreGet", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmToVmAffinityCreate(
	arg *VmToVmAffinityCreateArg) (
	*VmToVmAffinityCreateRet, error) {

	ret := &VmToVmAffinityCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmToVmAffinityCreate", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmToVmAffinityDelete(
	arg *VmToVmAffinityDeleteArg) (
	*VmToVmAffinityDeleteRet, error) {

	ret := &VmToVmAffinityDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmToVmAffinityDelete", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmToVmAffinityUpdate(
	arg *VmToVmAffinityUpdateArg) (
	*VmToVmAffinityUpdateRet, error) {

	ret := &VmToVmAffinityUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmToVmAffinityUpdate", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmToVmAffinityGet(
	arg *VmToVmAffinityGetArg) (
	*VmToVmAffinityGetRet, error) {

	ret := &VmToVmAffinityGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmToVmAffinityGet", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) VmSnapshotGet(
	arg *VmSnapshotGetArg) (
	*VmSnapshotGetRet, error) {

	ret := &VmSnapshotGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "VmSnapshotGet", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) ManagementServerRegister(
	arg *ManagementServerRegisterArg) (
	*ManagementServerRegisterRet, error) {

	ret := &ManagementServerRegisterRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "ManagementServerRegister", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) ManagementServerUnregister(
	arg *ManagementServerUnregisterArg) (
	*ManagementServerUnregisterRet, error) {

	ret := &ManagementServerUnregisterRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "ManagementServerUnregister", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) ManagementServerGet(
	arg *ManagementServerGetArg) (
	*ManagementServerGetRet, error) {

	ret := &ManagementServerGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "ManagementServerGet", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) UuidMappingUpdate(
	arg *UuidMappingUpdateArg) (
	*UuidMappingUpdateRet, error) {

	ret := &UuidMappingUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "UuidMappingUpdate", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) UuidMappingDelete(
	arg *UuidMappingDeleteArg) (
	*UuidMappingDeleteRet, error) {

	ret := &UuidMappingDeleteRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "UuidMappingDelete", arg, ret, 0)
	return ret, err
}

func (client *UhuraRpcClient) UpdateVmDbState(
	arg *UpdateVmDbStateArg) (
	*UpdateVmDbStateRet, error) {

	ret := &UpdateVmDbStateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.uhura.UhuraRpcSvc", "UpdateVmDbState", arg, ret, 0)
	return ret, err
}
