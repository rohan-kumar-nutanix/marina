// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medusa/medusa_printer.proto

package medusa

import (
	cassandra_client "github.com/nutanix-core/acs-aos-go/cassandra/cassandra_client"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MedusaPrinterColumn struct {
	ColumnName *string `protobuf:"bytes,1,req,name=column_name,json=columnName" json:"column_name,omitempty"`
	Epoch      *int64  `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	Timestamp  *int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	SizeOnDisk *int64  `protobuf:"varint,4,opt,name=size_on_disk,json=sizeOnDisk" json:"size_on_disk,omitempty"`
	// Only one of the following will be applicable.
	BlockMapEntry            *MedusaVDiskBlockMapEntryProto           `protobuf:"bytes,5,opt,name=block_map_entry,json=blockMapEntry" json:"block_map_entry,omitempty"`
	ExtentIdMapEntry         *MedusaExtentIdMapEntryProto             `protobuf:"bytes,6,opt,name=extent_id_map_entry,json=extentIdMapEntry" json:"extent_id_map_entry,omitempty"`
	ExtentGroupidMapEntry    *MedusaExtentGroupIdMapEntryProto        `protobuf:"bytes,7,opt,name=extent_groupid_map_entry,json=extentGroupidMapEntry" json:"extent_groupid_map_entry,omitempty"`
	OplogMapEntry            *MedusaVDiskOplogMapEntryProto           `protobuf:"bytes,8,opt,name=oplog_map_entry,json=oplogMapEntry" json:"oplog_map_entry,omitempty"`
	NfsMapEntry              *MedusaNFSMapEntryProto                  `protobuf:"bytes,9,opt,name=nfs_map_entry,json=nfsMapEntry" json:"nfs_map_entry,omitempty"`
	SmbFileidMapEntry        *MedusaSmbFileIdMapEntryProto            `protobuf:"bytes,10,opt,name=smb_fileid_map_entry,json=smbFileidMapEntry" json:"smb_fileid_map_entry,omitempty"`
	RowCasSpecialColumnValue *cassandra_client.PaxosVersionClockProto `protobuf:"bytes,11,opt,name=row_cas_special_column_value,json=rowCasSpecialColumnValue" json:"row_cas_special_column_value,omitempty"`
	// Indicates whether the column is in deleted state.
	IsDeletedColumn *bool `protobuf:"varint,12,opt,name=is_deleted_column,json=isDeletedColumn" json:"is_deleted_column,omitempty"`
	// Same as above proto optionals.
	EgroupAccessDataMapEntry         *MedusaExtentGroupIdMapEntryProto_AccessData `protobuf:"bytes,13,opt,name=egroup_access_data_map_entry,json=egroupAccessDataMapEntry" json:"egroup_access_data_map_entry,omitempty"`
	NearSyncConsistencyGroupMapEntry *MedusaNearSyncConsistencyGroupMapEntryProto `protobuf:"bytes,14,opt,name=near_sync_consistency_group_map_entry,json=nearSyncConsistencyGroupMapEntry" json:"near_sync_consistency_group_map_entry,omitempty"`
	NearSyncLwsMapEntry              *MedusaNearSyncLWSMapEntryProto              `protobuf:"bytes,15,opt,name=near_sync_lws_map_entry,json=nearSyncLwsMapEntry" json:"near_sync_lws_map_entry,omitempty"`
	NearSyncOplogMapEntry            *MedusaNearSyncOplogMapEntryProto            `protobuf:"bytes,16,opt,name=near_sync_oplog_map_entry,json=nearSyncOplogMapEntry" json:"near_sync_oplog_map_entry,omitempty"`
	NearSyncStagingAreaMapEntry      *MedusaNearSyncStagingAreaMapEntryProto      `protobuf:"bytes,17,opt,name=near_sync_staging_area_map_entry,json=nearSyncStagingAreaMapEntry" json:"near_sync_staging_area_map_entry,omitempty"`
	CountersFileMapEntry             *string                                      `protobuf:"bytes,18,opt,name=counters_file_map_entry,json=countersFileMapEntry" json:"counters_file_map_entry,omitempty"`
	CountersDataMapEntry             *string                                      `protobuf:"bytes,19,opt,name=counters_data_map_entry,json=countersDataMapEntry" json:"counters_data_map_entry,omitempty"`
	NearSyncEpisodeLinkMapEntry      *MedusaNearSyncEpisodeLinkMapEntryProto      `protobuf:"bytes,20,opt,name=near_sync_episode_link_map_entry,json=nearSyncEpisodeLinkMapEntry" json:"near_sync_episode_link_map_entry,omitempty"`
	DistributedOplogMapEntry         *MedusaDistributedOplogMapEntryProto         `protobuf:"bytes,21,opt,name=distributed_oplog_map_entry,json=distributedOplogMapEntry" json:"distributed_oplog_map_entry,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}                                     `json:"-"`
	XXX_unrecognized                 []byte                                       `json:"-"`
	XXX_sizecache                    int32                                        `json:"-"`
}

func (m *MedusaPrinterColumn) Reset()         { *m = MedusaPrinterColumn{} }
func (m *MedusaPrinterColumn) String() string { return proto.CompactTextString(m) }
func (*MedusaPrinterColumn) ProtoMessage()    {}
func (*MedusaPrinterColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac740af891e870, []int{0}
}

func (m *MedusaPrinterColumn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MedusaPrinterColumn.Unmarshal(m, b)
}
func (m *MedusaPrinterColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MedusaPrinterColumn.Marshal(b, m, deterministic)
}
func (m *MedusaPrinterColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedusaPrinterColumn.Merge(m, src)
}
func (m *MedusaPrinterColumn) XXX_Size() int {
	return xxx_messageInfo_MedusaPrinterColumn.Size(m)
}
func (m *MedusaPrinterColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_MedusaPrinterColumn.DiscardUnknown(m)
}

var xxx_messageInfo_MedusaPrinterColumn proto.InternalMessageInfo

func (m *MedusaPrinterColumn) GetColumnName() string {
	if m != nil && m.ColumnName != nil {
		return *m.ColumnName
	}
	return ""
}

func (m *MedusaPrinterColumn) GetEpoch() int64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

func (m *MedusaPrinterColumn) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *MedusaPrinterColumn) GetSizeOnDisk() int64 {
	if m != nil && m.SizeOnDisk != nil {
		return *m.SizeOnDisk
	}
	return 0
}

func (m *MedusaPrinterColumn) GetBlockMapEntry() *MedusaVDiskBlockMapEntryProto {
	if m != nil {
		return m.BlockMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetExtentIdMapEntry() *MedusaExtentIdMapEntryProto {
	if m != nil {
		return m.ExtentIdMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetExtentGroupidMapEntry() *MedusaExtentGroupIdMapEntryProto {
	if m != nil {
		return m.ExtentGroupidMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetOplogMapEntry() *MedusaVDiskOplogMapEntryProto {
	if m != nil {
		return m.OplogMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetNfsMapEntry() *MedusaNFSMapEntryProto {
	if m != nil {
		return m.NfsMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetSmbFileidMapEntry() *MedusaSmbFileIdMapEntryProto {
	if m != nil {
		return m.SmbFileidMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetRowCasSpecialColumnValue() *cassandra_client.PaxosVersionClockProto {
	if m != nil {
		return m.RowCasSpecialColumnValue
	}
	return nil
}

func (m *MedusaPrinterColumn) GetIsDeletedColumn() bool {
	if m != nil && m.IsDeletedColumn != nil {
		return *m.IsDeletedColumn
	}
	return false
}

func (m *MedusaPrinterColumn) GetEgroupAccessDataMapEntry() *MedusaExtentGroupIdMapEntryProto_AccessData {
	if m != nil {
		return m.EgroupAccessDataMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetNearSyncConsistencyGroupMapEntry() *MedusaNearSyncConsistencyGroupMapEntryProto {
	if m != nil {
		return m.NearSyncConsistencyGroupMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetNearSyncLwsMapEntry() *MedusaNearSyncLWSMapEntryProto {
	if m != nil {
		return m.NearSyncLwsMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetNearSyncOplogMapEntry() *MedusaNearSyncOplogMapEntryProto {
	if m != nil {
		return m.NearSyncOplogMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetNearSyncStagingAreaMapEntry() *MedusaNearSyncStagingAreaMapEntryProto {
	if m != nil {
		return m.NearSyncStagingAreaMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetCountersFileMapEntry() string {
	if m != nil && m.CountersFileMapEntry != nil {
		return *m.CountersFileMapEntry
	}
	return ""
}

func (m *MedusaPrinterColumn) GetCountersDataMapEntry() string {
	if m != nil && m.CountersDataMapEntry != nil {
		return *m.CountersDataMapEntry
	}
	return ""
}

func (m *MedusaPrinterColumn) GetNearSyncEpisodeLinkMapEntry() *MedusaNearSyncEpisodeLinkMapEntryProto {
	if m != nil {
		return m.NearSyncEpisodeLinkMapEntry
	}
	return nil
}

func (m *MedusaPrinterColumn) GetDistributedOplogMapEntry() *MedusaDistributedOplogMapEntryProto {
	if m != nil {
		return m.DistributedOplogMapEntry
	}
	return nil
}

type MedusaPrinterRow struct {
	RowKey               *string                `protobuf:"bytes,1,opt,name=row_key,json=rowKey" json:"row_key,omitempty"`
	Columns              []*MedusaPrinterColumn `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MedusaPrinterRow) Reset()         { *m = MedusaPrinterRow{} }
func (m *MedusaPrinterRow) String() string { return proto.CompactTextString(m) }
func (*MedusaPrinterRow) ProtoMessage()    {}
func (*MedusaPrinterRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac740af891e870, []int{1}
}

func (m *MedusaPrinterRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MedusaPrinterRow.Unmarshal(m, b)
}
func (m *MedusaPrinterRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MedusaPrinterRow.Marshal(b, m, deterministic)
}
func (m *MedusaPrinterRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedusaPrinterRow.Merge(m, src)
}
func (m *MedusaPrinterRow) XXX_Size() int {
	return xxx_messageInfo_MedusaPrinterRow.Size(m)
}
func (m *MedusaPrinterRow) XXX_DiscardUnknown() {
	xxx_messageInfo_MedusaPrinterRow.DiscardUnknown(m)
}

var xxx_messageInfo_MedusaPrinterRow proto.InternalMessageInfo

func (m *MedusaPrinterRow) GetRowKey() string {
	if m != nil && m.RowKey != nil {
		return *m.RowKey
	}
	return ""
}

func (m *MedusaPrinterRow) GetColumns() []*MedusaPrinterColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

type MedusaPrinterProto struct {
	Rows                 []*MedusaPrinterRow `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MedusaPrinterProto) Reset()         { *m = MedusaPrinterProto{} }
func (m *MedusaPrinterProto) String() string { return proto.CompactTextString(m) }
func (*MedusaPrinterProto) ProtoMessage()    {}
func (*MedusaPrinterProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac740af891e870, []int{2}
}

func (m *MedusaPrinterProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MedusaPrinterProto.Unmarshal(m, b)
}
func (m *MedusaPrinterProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MedusaPrinterProto.Marshal(b, m, deterministic)
}
func (m *MedusaPrinterProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedusaPrinterProto.Merge(m, src)
}
func (m *MedusaPrinterProto) XXX_Size() int {
	return xxx_messageInfo_MedusaPrinterProto.Size(m)
}
func (m *MedusaPrinterProto) XXX_DiscardUnknown() {
	xxx_messageInfo_MedusaPrinterProto.DiscardUnknown(m)
}

var xxx_messageInfo_MedusaPrinterProto proto.InternalMessageInfo

func (m *MedusaPrinterProto) GetRows() []*MedusaPrinterRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterType((*MedusaPrinterColumn)(nil), "nutanix.medusa.MedusaPrinterColumn")
	proto.RegisterType((*MedusaPrinterRow)(nil), "nutanix.medusa.MedusaPrinterRow")
	proto.RegisterType((*MedusaPrinterProto)(nil), "nutanix.medusa.MedusaPrinterProto")
}

func init() { proto.RegisterFile("medusa/medusa_printer.proto", fileDescriptor_27ac740af891e870) }

var fileDescriptor_27ac740af891e870 = []byte{
	// 832 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x6d, 0x6f, 0xdb, 0x36,
	0x10, 0x86, 0x92, 0x36, 0x69, 0xe8, 0xe6, 0x8d, 0x4e, 0x10, 0xad, 0x09, 0x30, 0x21, 0xc3, 0x06,
	0x63, 0x2f, 0x6a, 0xd7, 0x6d, 0xfd, 0x32, 0xec, 0x43, 0x13, 0xa7, 0xc3, 0xba, 0x34, 0x0d, 0x64,
	0x34, 0x03, 0x0a, 0x0c, 0x04, 0x4d, 0x5d, 0x5c, 0xd6, 0x12, 0xa9, 0x91, 0x72, 0x15, 0x6f, 0xd8,
	0x0f, 0x18, 0xb0, 0x1f, 0x3d, 0x90, 0xb4, 0xad, 0x17, 0x28, 0xce, 0xfa, 0xc5, 0x96, 0xee, 0xee,
	0x79, 0x9e, 0xbb, 0xe3, 0x1d, 0x85, 0x0e, 0x53, 0x88, 0x27, 0x9a, 0x3e, 0x76, 0x7f, 0x24, 0x53,
	0x5c, 0xe4, 0xa0, 0xc2, 0x4c, 0xc9, 0x5c, 0xe2, 0x2d, 0x31, 0xc9, 0xa9, 0xe0, 0x37, 0xa1, 0xf3,
	0x3e, 0xea, 0xd6, 0x82, 0x5d, 0xd0, 0xa3, 0xa3, 0x99, 0xf1, 0x43, 0xcc, 0xf5, 0x98, 0x0c, 0x13,
	0xc9, 0xc6, 0x24, 0xa5, 0xd9, 0xcc, 0xfb, 0x8c, 0x51, 0xad, 0xa9, 0x88, 0x15, 0x7d, 0xbc, 0x78,
	0x22, 0x2c, 0xe1, 0x20, 0xf2, 0x8a, 0x21, 0xa3, 0x37, 0x52, 0x13, 0x66, 0xb0, 0x0e, 0x77, 0xfc,
	0xcf, 0x16, 0xea, 0xbe, 0xb2, 0xc4, 0x97, 0x2e, 0xa5, 0x53, 0x99, 0x4c, 0x52, 0x81, 0x3f, 0x45,
	0x1d, 0x66, 0x9f, 0x88, 0xa0, 0x29, 0xf8, 0x5e, 0xb0, 0xd2, 0xdb, 0x88, 0x90, 0x33, 0x5d, 0xd0,
	0x14, 0xf0, 0x1e, 0xba, 0x0f, 0x99, 0x64, 0xef, 0xfc, 0x95, 0xc0, 0xeb, 0xad, 0x46, 0xee, 0x05,
	0x1f, 0xa1, 0x8d, 0x9c, 0xa7, 0xa0, 0x73, 0x9a, 0x66, 0xfe, 0xaa, 0xf5, 0x94, 0x06, 0x1c, 0xa0,
	0x87, 0x9a, 0xff, 0x09, 0x44, 0x0a, 0x62, 0x8a, 0xf0, 0xef, 0xd9, 0x00, 0x64, 0x6c, 0xaf, 0x45,
	0x9f, 0xeb, 0x31, 0x7e, 0x83, 0xb6, 0x17, 0x95, 0x11, 0x10, 0xb9, 0x9a, 0xfa, 0xf7, 0x03, 0xaf,
	0xd7, 0x79, 0xfa, 0x4d, 0x58, 0xef, 0x51, 0xe8, 0x92, 0xbe, 0x32, 0xa8, 0x13, 0x83, 0x78, 0x45,
	0xb3, 0x33, 0x13, 0x7f, 0x69, 0xca, 0x8a, 0x36, 0x87, 0x55, 0x1b, 0x7e, 0x8b, 0xba, 0x70, 0x93,
	0x83, 0xc8, 0x09, 0x8f, 0x2b, 0xd4, 0x6b, 0x96, 0xfa, 0xab, 0x76, 0xea, 0x33, 0x0b, 0xf8, 0x25,
	0xae, 0x13, 0xef, 0x40, 0xc3, 0x8c, 0x39, 0xf2, 0x67, 0xdc, 0x23, 0x25, 0x27, 0x59, 0x4d, 0x60,
	0xdd, 0x0a, 0x3c, 0x59, 0x26, 0xf0, 0xb3, 0x01, 0x35, 0x55, 0xf6, 0xa1, 0xf4, 0xf1, 0x52, 0xea,
	0x0d, 0xda, 0x96, 0x59, 0x22, 0x47, 0x15, 0x85, 0x07, 0x77, 0x76, 0xe7, 0xb5, 0x41, 0x34, 0xba,
	0x23, 0xab, 0x36, 0xfc, 0x12, 0x6d, 0x8a, 0x6b, 0x5d, 0x21, 0xdd, 0xb0, 0xa4, 0x5f, 0xb4, 0x93,
	0x5e, 0xbc, 0x18, 0xd4, 0xd9, 0x3a, 0xe2, 0x5a, 0x2f, 0xb8, 0x7e, 0x47, 0x7b, 0x3a, 0x1d, 0x92,
	0x6b, 0x9e, 0x40, 0xad, 0x13, 0xc8, 0x52, 0x7e, 0xdd, 0x4e, 0x39, 0x48, 0x87, 0x2f, 0x78, 0x02,
	0xcd, 0x2e, 0xec, 0x6a, 0x67, 0xaf, 0x74, 0xe0, 0x0f, 0x74, 0xa4, 0x64, 0x41, 0x18, 0xd5, 0x44,
	0x67, 0xc0, 0x38, 0x4d, 0xc8, 0x6c, 0x4c, 0x3f, 0xd0, 0x64, 0x02, 0x7e, 0xc7, 0xca, 0x7c, 0x1b,
	0xd2, 0x8c, 0xb2, 0x77, 0x10, 0x2e, 0x26, 0x3f, 0x8c, 0x87, 0xa1, 0x1d, 0xfe, 0xf0, 0xd2, 0xfc,
	0x5e, 0x81, 0xd2, 0x5c, 0x8a, 0x53, 0x33, 0x24, 0x4e, 0xcb, 0x57, 0xb2, 0x38, 0xa5, 0x7a, 0xe0,
	0x48, 0xdd, 0x12, 0x5c, 0x19, 0x4a, 0xfc, 0x25, 0xda, 0xe5, 0x9a, 0xc4, 0x90, 0x40, 0x0e, 0xf1,
	0x4c, 0xcd, 0x7f, 0x18, 0x78, 0xbd, 0x07, 0xd1, 0x36, 0xd7, 0x7d, 0x67, 0x9f, 0x6d, 0xcd, 0x5f,
	0xe8, 0x08, 0xec, 0x14, 0x10, 0xca, 0x18, 0x68, 0x4d, 0x62, 0x9a, 0xd3, 0x4a, 0x17, 0x36, 0x6d,
	0x7a, 0x3f, 0x7e, 0xec, 0x3c, 0x84, 0xcf, 0x2d, 0x5b, 0x9f, 0xe6, 0x34, 0xf2, 0x9d, 0x40, 0x69,
	0x59, 0xf4, 0xe6, 0x5f, 0x0f, 0x7d, 0x2e, 0x80, 0x2a, 0xa2, 0xa7, 0x82, 0x11, 0x26, 0x85, 0xe6,
	0x3a, 0x07, 0xc1, 0xa6, 0x6e, 0x30, 0x2b, 0x69, 0x6c, 0x2d, 0x4b, 0xe3, 0x02, 0xa8, 0x1a, 0x4c,
	0x05, 0x3b, 0x2d, 0x09, 0x6c, 0x4e, 0xf5, 0xb3, 0x09, 0xc4, 0x1d, 0x61, 0x38, 0x46, 0x07, 0x65,
	0x36, 0x49, 0x51, 0x9d, 0xaf, 0x6d, 0xab, 0x1f, 0x2e, 0xd7, 0x3f, 0xff, 0xad, 0x31, 0x67, 0xdd,
	0xb9, 0xe4, 0x79, 0x51, 0xce, 0xdb, 0x7b, 0xf4, 0x49, 0xa9, 0xd2, 0x5c, 0x8e, 0x9d, 0x65, 0xeb,
	0x37, 0xd7, 0x69, 0xd9, 0x8f, 0x7d, 0xd1, 0xe6, 0xc3, 0x7f, 0xa3, 0xa0, 0xd4, 0xd2, 0x39, 0x1d,
	0x71, 0x31, 0x22, 0x54, 0x41, 0xf5, 0x84, 0x77, 0xad, 0xe4, 0xb3, 0xe5, 0x92, 0x03, 0x87, 0x7d,
	0xae, 0x80, 0xd6, 0x85, 0x0f, 0xc5, 0xed, 0x11, 0xf8, 0x07, 0x74, 0xc0, 0xe4, 0xc4, 0xdc, 0xd1,
	0xda, 0xee, 0x57, 0x45, 0x15, 0x07, 0x5e, 0x6f, 0x23, 0xda, 0x9b, 0xbb, 0xcd, 0xd2, 0xb4, 0xc2,
	0x1a, 0xe3, 0xd8, 0xad, 0xc3, 0x6a, 0xd3, 0x54, 0x2b, 0x16, 0x32, 0xae, 0x65, 0x0c, 0x24, 0xe1,
	0xa2, 0x7a, 0x35, 0xef, 0xfd, 0x9f, 0x62, 0xcf, 0x1c, 0xf6, 0x9c, 0x8b, 0xf1, 0x2d, 0xc5, 0xb6,
	0x44, 0x60, 0x85, 0x0e, 0x63, 0xae, 0x73, 0xc5, 0x87, 0x13, 0xb3, 0x76, 0xcd, 0x93, 0xdd, 0xb7,
	0xca, 0xdf, 0xb5, 0x2b, 0xf7, 0x4b, 0x60, 0xcb, 0xe1, 0xfa, 0xf1, 0x2d, 0xee, 0xe3, 0xf7, 0x68,
	0xa7, 0xf6, 0x29, 0x8c, 0x64, 0x81, 0x0f, 0xd0, 0xba, 0xb9, 0x70, 0xc6, 0x30, 0xf5, 0x3d, 0xdb,
	0xad, 0x35, 0x25, 0x8b, 0x5f, 0x61, 0x8a, 0x7f, 0x42, 0xeb, 0xee, 0x2e, 0xd0, 0xfe, 0x4a, 0xb0,
	0xda, 0xeb, 0x3c, 0xfd, 0xac, 0x3d, 0x99, 0xda, 0x67, 0x35, 0x9a, 0x63, 0x8e, 0x5f, 0x22, 0x5c,
	0xf3, 0xdb, 0xdc, 0xf0, 0xf7, 0xe8, 0x9e, 0x92, 0x85, 0xf6, 0x3d, 0xcb, 0x18, 0x2c, 0x65, 0x8c,
	0x64, 0x11, 0xd9, 0xe8, 0x93, 0x27, 0x08, 0x33, 0x99, 0x36, 0x82, 0x4f, 0x5a, 0xf8, 0xdf, 0xae,
	0x39, 0xdf, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x5c, 0xd0, 0x99, 0x8e, 0x08, 0x00, 0x00,
}
