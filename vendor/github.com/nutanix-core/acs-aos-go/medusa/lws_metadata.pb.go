// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medusa/lws_metadata.proto

package medusa

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This is the Light Weight Snapshot(LWS) meta-data exposed to cerebro.
type LWSMetadataProto struct {
	// The consistency group id for which the LWS was created.
	CgId *ConsistencyGroupIdProto `protobuf:"bytes,1,opt,name=cg_id,json=cgId" json:"cg_id,omitempty"`
	// Id of the Light Weight Snapshot (LWS).
	LwsId *int64 `protobuf:"varint,2,opt,name=lws_id,json=lwsId" json:"lws_id,omitempty"`
	// LWSs can only be applied in the order they were generated. The following
	// specifies the previous LWSs Id.
	PreviousLwsId *int64 `protobuf:"varint,3,opt,name=previous_lws_id,json=previousLwsId,def=-1" json:"previous_lws_id,omitempty"`
	// Path prefixes for files in 'originating_file_names'. On the src, the
	// prefix includes the container name on the source while on the
	// replicated target, this prefix contains the mapped vstore name (if
	// configured at the time of LWS replication).
	OriginatingPathPrefixes []string `protobuf:"bytes,4,rep,name=originating_path_prefixes,json=originatingPathPrefixes" json:"originating_path_prefixes,omitempty"`
	// The file names that are included in the LWS. These also include files
	// that were detected as removed from the cg or nfs name space at LWS
	// finalization time.
	OriginatingFileNames []string `protobuf:"bytes,5,rep,name=originating_file_names,json=originatingFileNames" json:"originating_file_names,omitempty"`
	// For each file name in 'originating_file_names', the index in
	// 'originating_path_prefixes' that gives the file's path prefix.
	OriginatingPrefixPathIndices []int32 `protobuf:"varint,6,rep,name=originating_prefix_path_indices,json=originatingPrefixPathIndices" json:"originating_prefix_path_indices,omitempty"`
	// The files at the following indices in 'originating_file_names' were
	// present at LWS finalization time.
	CurrentFileNameIndices []int32 `protobuf:"varint,7,rep,name=current_file_name_indices,json=currentFileNameIndices" json:"current_file_name_indices,omitempty"`
	// The corresponding inode ids for files in 'current_file_name_indices'.
	CurrentFileInodeIds []*NfsInodeIdProto `protobuf:"bytes,8,rep,name=current_file_inode_ids,json=currentFileInodeIds" json:"current_file_inode_ids,omitempty"`
	// The file in 'originating_file_names' at the following indices were backed
	// by vdisks when the LWS was finalized. These indices will only point to
	// existing files.
	VdiskBackedCurrentFileNameIndices []int32 `protobuf:"varint,9,rep,name=vdisk_backed_current_file_name_indices,json=vdiskBackedCurrentFileNameIndices" json:"vdisk_backed_current_file_name_indices,omitempty"`
	// The corresponding oplog bytes captured in the LWS.
	OplogBytes []int64 `protobuf:"varint,10,rep,name=oplog_bytes,json=oplogBytes" json:"oplog_bytes,omitempty"`
	// One or more files in 'originating_file_names' may have been detected as
	// newly added at LWS finalization. The entries at the following indices
	// in 'originating_file_names' were considered newly added when the LWS
	// was finalized.
	AddedFileNameIndices []int32 `protobuf:"varint,11,rep,name=added_file_name_indices,json=addedFileNameIndices" json:"added_file_name_indices,omitempty"`
	// The files at the following indices in 'originating_file_names' were
	// detected as having been removed from the cg at LWS finalization time.
	RemovedFileNameIndices []int32 `protobuf:"varint,12,rep,name=removed_file_name_indices,json=removedFileNameIndices" json:"removed_file_name_indices,omitempty"`
	// The following 2 fields are used to capture nfs file path renames detected
	// while finalizing the LWS.
	// The files at the following indices in 'originating_file_names' were
	// detected as having been renamed at LWS finalization time.
	RenamedSrcFileNameIndices []int32 `protobuf:"varint,13,rep,name=renamed_src_file_name_indices,json=renamedSrcFileNameIndices" json:"renamed_src_file_name_indices,omitempty"`
	// The files at the following indices in 'originating_file_names' were
	// detected as being the target of the renames at LWS finalization time.
	RenamedDestFileNameIndices []int32 `protobuf:"varint,14,rep,name=renamed_dest_file_name_indices,json=renamedDestFileNameIndices" json:"renamed_dest_file_name_indices,omitempty"`
	// The files at the following indices in 'originating_file_names' were
	// converted from small file to a large file between previous LWS finalization
	// and this LWS finalization.
	ConvertedFileNameIndices []int32 `protobuf:"varint,15,rep,name=converted_file_name_indices,json=convertedFileNameIndices" json:"converted_file_name_indices,omitempty"`
	// List of remote site uuids this LWS will get replicated to.
	RemoteSiteUuids [][]byte `protobuf:"bytes,16,rep,name=remote_site_uuids,json=remoteSiteUuids" json:"remote_site_uuids,omitempty"`
	// One or more remotes may have been newly added at LWS finalization.
	// The following field lists indices into 'remotes' that have been newly
	// added at LWS finalization. It is the responsibility of cerebro to
	// replicate the newly created partial snapshots to the added remote sites.
	AddedRemotesIndices []int32 `protobuf:"varint,17,rep,name=added_remotes_indices,json=addedRemotesIndices" json:"added_remotes_indices,omitempty"`
	// Set to 'true' if the LWS is generated autonomously by stargate as a part
	// of disabling near-sync or removing remote (disabling near-sync to a
	// particular remote).
	IsInternallyGenerated *bool `protobuf:"varint,18,opt,name=is_internally_generated,json=isInternallyGenerated" json:"is_internally_generated,omitempty"`
	// Size (in bytes) for every file specified in 'originating_file_names'
	// at creation of this LWS. Note that only files present at LWS finalization
	// time (i.e. specified in 'current_file_name_indices') will have valid
	// size stats. Other files will have a value of -1 as their file bytes.
	OriginatingFileFileBytesVec []int64 `protobuf:"varint,19,rep,name=originating_file_file_bytes_vec,json=originatingFileFileBytesVec" json:"originating_file_file_bytes_vec,omitempty"`
	// Size of user written bytes for every file specified in
	// 'originating_file_names' at creation of this LWS. Note that only files
	// present at LWS finalization time
	// (i.e. specified in 'current_file_name_indices') will have valid
	// size stats. Other files will have a value of -1 as their user bytes.
	OriginatingFileUserBytesVec []int64 `protobuf:"varint,20,rep,name=originating_file_user_bytes_vec,json=originatingFileUserBytesVec" json:"originating_file_user_bytes_vec,omitempty"`
	// Whether a full snapshot was explicitly requested by cerebro during LWS
	// finalize. It may be possible that full snapshot was taken internally due
	// to added remotes, in that case it will be set to false.
	ExplicitFullSnapshot *bool `protobuf:"varint,21,opt,name=explicit_full_snapshot,json=explicitFullSnapshot" json:"explicit_full_snapshot,omitempty"`
	// Vdisk snapshot uuids corresponding to files specified by indices in
	// 'vdisk_backed_current_file_name_indices'.
	VdiskSnapshotUuids [][]byte `protobuf:"bytes,22,rep,name=vdisk_snapshot_uuids,json=vdiskSnapshotUuids" json:"vdisk_snapshot_uuids,omitempty"`
	// Indicates if this LWS is invalid. By default it is valid. An LWS is
	// created in invalid state after we encounter a timestamp validation
	// error, since we cannot trust the file list any more. Once Cerebro
	// sends down the updated file list for the CG, we revert back to creating
	// valid LWSs.
	IsInvalid *bool `protobuf:"varint,23,opt,name=is_invalid,json=isInvalid" json:"is_invalid,omitempty"`
	// The time when this LWS was finalized.
	CreationTimeUsecs *int64 `protobuf:"varint,24,opt,name=creation_time_usecs,json=creationTimeUsecs" json:"creation_time_usecs,omitempty"`
	// The time when this LWS expires.
	ExpiryTimeUsecs *int64 `protobuf:"varint,25,opt,name=expiry_time_usecs,json=expiryTimeUsecs" json:"expiry_time_usecs,omitempty"`
	// Whether this LWS was finalized without involving the NFS master.
	MasterlessFinalize *bool `protobuf:"varint,26,opt,name=masterless_finalize,json=masterlessFinalize,def=0" json:"masterless_finalize,omitempty"`
	// If true, nfs file paths were modified on source cluster using container
	// mapping and should not be modified while receiving LWS metadata.
	NfsPathModifiedOnSource *bool `protobuf:"varint,27,opt,name=nfs_path_modified_on_source,json=nfsPathModifiedOnSource,def=0" json:"nfs_path_modified_on_source,omitempty"`
	// Approximate bytes of zero oplog data captured in the LWS per vdisk. We can
	// derive effective size of oplog data per vdisk by subtracting
	// 'zero_oplog_bytes' from 'oplog_bytes'.
	ZeroOplogBytes []int64 `protobuf:"varint,28,rep,name=zero_oplog_bytes,json=zeroOplogBytes" json:"zero_oplog_bytes,omitempty"`
	// Snapshot prefix path. This prefix path helps construct absolute file paths
	// that are expected to exist in this snapshot; viz. the absolute file paths
	// of added files.
	SnapshotPrefixPath *string `protobuf:"bytes,29,opt,name=snapshot_prefix_path,json=snapshotPrefixPath" json:"snapshot_prefix_path,omitempty"`
	// DEPRECATED: This field is deprecated and should not be used.
	IsRecoverable *bool `protobuf:"varint,30,opt,name=is_recoverable,json=isRecoverable" json:"is_recoverable,omitempty"` // Deprecated: Do not use.
	// DEPRECATED: This field is deprecated in favor of 'seeding_vdisk_ids' and
	// should not be used.
	DependentVdiskIds []int64 `protobuf:"varint,31,rep,name=dependent_vdisk_ids,json=dependentVdiskIds" json:"dependent_vdisk_ids,omitempty"` // Deprecated: Do not use.
	// This field is empty for incremental LWSs. For full LWSs, this is the list
	// of seeding vdisks ids corresponding to any newly added or converted files.
	// The vdisk ids in this list have 1:1 mapping with the indices in
	// 'vdisk_backed_current_file_name_indices' field.
	SeedingVdiskIds      []int64  `protobuf:"varint,32,rep,name=seeding_vdisk_ids,json=seedingVdiskIds" json:"seeding_vdisk_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LWSMetadataProto) Reset()         { *m = LWSMetadataProto{} }
func (m *LWSMetadataProto) String() string { return proto.CompactTextString(m) }
func (*LWSMetadataProto) ProtoMessage()    {}
func (*LWSMetadataProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e60d5cb4785b1cf, []int{0}
}

func (m *LWSMetadataProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LWSMetadataProto.Unmarshal(m, b)
}
func (m *LWSMetadataProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LWSMetadataProto.Marshal(b, m, deterministic)
}
func (m *LWSMetadataProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LWSMetadataProto.Merge(m, src)
}
func (m *LWSMetadataProto) XXX_Size() int {
	return xxx_messageInfo_LWSMetadataProto.Size(m)
}
func (m *LWSMetadataProto) XXX_DiscardUnknown() {
	xxx_messageInfo_LWSMetadataProto.DiscardUnknown(m)
}

var xxx_messageInfo_LWSMetadataProto proto.InternalMessageInfo

const Default_LWSMetadataProto_PreviousLwsId int64 = -1
const Default_LWSMetadataProto_MasterlessFinalize bool = false
const Default_LWSMetadataProto_NfsPathModifiedOnSource bool = false

func (m *LWSMetadataProto) GetCgId() *ConsistencyGroupIdProto {
	if m != nil {
		return m.CgId
	}
	return nil
}

func (m *LWSMetadataProto) GetLwsId() int64 {
	if m != nil && m.LwsId != nil {
		return *m.LwsId
	}
	return 0
}

func (m *LWSMetadataProto) GetPreviousLwsId() int64 {
	if m != nil && m.PreviousLwsId != nil {
		return *m.PreviousLwsId
	}
	return Default_LWSMetadataProto_PreviousLwsId
}

func (m *LWSMetadataProto) GetOriginatingPathPrefixes() []string {
	if m != nil {
		return m.OriginatingPathPrefixes
	}
	return nil
}

func (m *LWSMetadataProto) GetOriginatingFileNames() []string {
	if m != nil {
		return m.OriginatingFileNames
	}
	return nil
}

func (m *LWSMetadataProto) GetOriginatingPrefixPathIndices() []int32 {
	if m != nil {
		return m.OriginatingPrefixPathIndices
	}
	return nil
}

func (m *LWSMetadataProto) GetCurrentFileNameIndices() []int32 {
	if m != nil {
		return m.CurrentFileNameIndices
	}
	return nil
}

func (m *LWSMetadataProto) GetCurrentFileInodeIds() []*NfsInodeIdProto {
	if m != nil {
		return m.CurrentFileInodeIds
	}
	return nil
}

func (m *LWSMetadataProto) GetVdiskBackedCurrentFileNameIndices() []int32 {
	if m != nil {
		return m.VdiskBackedCurrentFileNameIndices
	}
	return nil
}

func (m *LWSMetadataProto) GetOplogBytes() []int64 {
	if m != nil {
		return m.OplogBytes
	}
	return nil
}

func (m *LWSMetadataProto) GetAddedFileNameIndices() []int32 {
	if m != nil {
		return m.AddedFileNameIndices
	}
	return nil
}

func (m *LWSMetadataProto) GetRemovedFileNameIndices() []int32 {
	if m != nil {
		return m.RemovedFileNameIndices
	}
	return nil
}

func (m *LWSMetadataProto) GetRenamedSrcFileNameIndices() []int32 {
	if m != nil {
		return m.RenamedSrcFileNameIndices
	}
	return nil
}

func (m *LWSMetadataProto) GetRenamedDestFileNameIndices() []int32 {
	if m != nil {
		return m.RenamedDestFileNameIndices
	}
	return nil
}

func (m *LWSMetadataProto) GetConvertedFileNameIndices() []int32 {
	if m != nil {
		return m.ConvertedFileNameIndices
	}
	return nil
}

func (m *LWSMetadataProto) GetRemoteSiteUuids() [][]byte {
	if m != nil {
		return m.RemoteSiteUuids
	}
	return nil
}

func (m *LWSMetadataProto) GetAddedRemotesIndices() []int32 {
	if m != nil {
		return m.AddedRemotesIndices
	}
	return nil
}

func (m *LWSMetadataProto) GetIsInternallyGenerated() bool {
	if m != nil && m.IsInternallyGenerated != nil {
		return *m.IsInternallyGenerated
	}
	return false
}

func (m *LWSMetadataProto) GetOriginatingFileFileBytesVec() []int64 {
	if m != nil {
		return m.OriginatingFileFileBytesVec
	}
	return nil
}

func (m *LWSMetadataProto) GetOriginatingFileUserBytesVec() []int64 {
	if m != nil {
		return m.OriginatingFileUserBytesVec
	}
	return nil
}

func (m *LWSMetadataProto) GetExplicitFullSnapshot() bool {
	if m != nil && m.ExplicitFullSnapshot != nil {
		return *m.ExplicitFullSnapshot
	}
	return false
}

func (m *LWSMetadataProto) GetVdiskSnapshotUuids() [][]byte {
	if m != nil {
		return m.VdiskSnapshotUuids
	}
	return nil
}

func (m *LWSMetadataProto) GetIsInvalid() bool {
	if m != nil && m.IsInvalid != nil {
		return *m.IsInvalid
	}
	return false
}

func (m *LWSMetadataProto) GetCreationTimeUsecs() int64 {
	if m != nil && m.CreationTimeUsecs != nil {
		return *m.CreationTimeUsecs
	}
	return 0
}

func (m *LWSMetadataProto) GetExpiryTimeUsecs() int64 {
	if m != nil && m.ExpiryTimeUsecs != nil {
		return *m.ExpiryTimeUsecs
	}
	return 0
}

func (m *LWSMetadataProto) GetMasterlessFinalize() bool {
	if m != nil && m.MasterlessFinalize != nil {
		return *m.MasterlessFinalize
	}
	return Default_LWSMetadataProto_MasterlessFinalize
}

func (m *LWSMetadataProto) GetNfsPathModifiedOnSource() bool {
	if m != nil && m.NfsPathModifiedOnSource != nil {
		return *m.NfsPathModifiedOnSource
	}
	return Default_LWSMetadataProto_NfsPathModifiedOnSource
}

func (m *LWSMetadataProto) GetZeroOplogBytes() []int64 {
	if m != nil {
		return m.ZeroOplogBytes
	}
	return nil
}

func (m *LWSMetadataProto) GetSnapshotPrefixPath() string {
	if m != nil && m.SnapshotPrefixPath != nil {
		return *m.SnapshotPrefixPath
	}
	return ""
}

// Deprecated: Do not use.
func (m *LWSMetadataProto) GetIsRecoverable() bool {
	if m != nil && m.IsRecoverable != nil {
		return *m.IsRecoverable
	}
	return false
}

// Deprecated: Do not use.
func (m *LWSMetadataProto) GetDependentVdiskIds() []int64 {
	if m != nil {
		return m.DependentVdiskIds
	}
	return nil
}

func (m *LWSMetadataProto) GetSeedingVdiskIds() []int64 {
	if m != nil {
		return m.SeedingVdiskIds
	}
	return nil
}

func init() {
	proto.RegisterType((*LWSMetadataProto)(nil), "nutanix.medusa.LWSMetadataProto")
}

func init() { proto.RegisterFile("medusa/lws_metadata.proto", fileDescriptor_7e60d5cb4785b1cf) }

var fileDescriptor_7e60d5cb4785b1cf = []byte{
	// 906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0x5d, 0x6f, 0xdb, 0x36,
	0x17, 0x86, 0xe3, 0x3a, 0x6f, 0x43, 0x37, 0x71, 0x4c, 0x3b, 0xb6, 0x9c, 0x34, 0x8d, 0xfa, 0x5e,
	0x6c, 0x6a, 0x80, 0x79, 0x5d, 0xd0, 0x15, 0x68, 0xb0, 0x01, 0x83, 0xd3, 0xa5, 0x30, 0xd0, 0x8f,
	0x4c, 0x6e, 0x3b, 0x60, 0x37, 0x04, 0x23, 0x1e, 0x3b, 0x44, 0x65, 0x4a, 0x20, 0x29, 0x37, 0xe9,
	0xdf, 0xde, 0x1f, 0x18, 0x78, 0x24, 0xd9, 0x8a, 0xe7, 0x5d, 0x24, 0x17, 0x7c, 0xbe, 0x0e, 0xcf,
	0x11, 0x8f, 0xc9, 0x60, 0x0e, 0x22, 0x33, 0xfc, 0xc7, 0xf8, 0xab, 0x61, 0x73, 0xb0, 0x5c, 0x70,
	0xcb, 0x87, 0xa9, 0x4e, 0x6c, 0x42, 0xf7, 0x54, 0x66, 0xb9, 0x92, 0xb7, 0xc3, 0x9c, 0x72, 0xf8,
	0xb4, 0xa0, 0x46, 0x89, 0x32, 0xd2, 0x58, 0x50, 0xd1, 0x1d, 0x9b, 0xe9, 0x24, 0x4b, 0x99, 0x14,
	0xb9, 0xe4, 0xb0, 0x74, 0x53, 0x53, 0xc3, 0xa4, 0x4a, 0x04, 0x2c, 0xa1, 0xff, 0xff, 0xbd, 0x4b,
	0xf6, 0xdf, 0xfe, 0x39, 0x79, 0x57, 0x64, 0x5c, 0x61, 0xc4, 0x2f, 0xa4, 0x11, 0xcd, 0x98, 0x14,
	0x5e, 0xcd, 0xaf, 0x05, 0xcd, 0xb3, 0xef, 0x87, 0xf7, 0x23, 0x87, 0x17, 0xab, 0xa8, 0x37, 0x2e,
	0x69, 0x2c, 0x50, 0x17, 0x3e, 0x88, 0x66, 0x63, 0x41, 0x0f, 0xc8, 0xb6, 0x2b, 0x5b, 0x0a, 0x6f,
	0xcb, 0xaf, 0x05, 0xf5, 0xb0, 0x11, 0x7f, 0x35, 0x63, 0x41, 0x4f, 0x49, 0x2b, 0xd5, 0xb0, 0x90,
	0x49, 0x66, 0x58, 0x81, 0xd7, 0x1d, 0x7e, 0xbe, 0xf5, 0xc3, 0x4f, 0xe1, 0x6e, 0x09, 0xbd, 0x45,
	0xee, 0x39, 0x19, 0x24, 0x5a, 0xce, 0xa4, 0xe2, 0x56, 0xaa, 0x19, 0x4b, 0xb9, 0xbd, 0x61, 0xa9,
	0x86, 0xa9, 0xbc, 0x05, 0xe3, 0x3d, 0xf0, 0xeb, 0xc1, 0x4e, 0xd8, 0xaf, 0x10, 0xae, 0xb8, 0xbd,
	0xb9, 0x2a, 0x60, 0xfa, 0x82, 0xf4, 0xaa, 0xda, 0xa9, 0x8c, 0x81, 0x29, 0x3e, 0x07, 0xe3, 0x35,
	0x50, 0xd8, 0xad, 0xa0, 0x97, 0x32, 0x86, 0xf7, 0x0e, 0xa3, 0xbf, 0x93, 0x93, 0x7b, 0x89, 0xe8,
	0x96, 0x07, 0x4b, 0x25, 0x64, 0x04, 0xc6, 0xdb, 0xf6, 0xeb, 0x41, 0x23, 0x7c, 0x5c, 0xcd, 0x45,
	0x96, 0x4b, 0x1f, 0xe7, 0x1c, 0xfa, 0x8a, 0x0c, 0xa2, 0x4c, 0x6b, 0x50, 0x76, 0x15, 0xbc, 0x34,
	0xf8, 0x1f, 0x1a, 0xf4, 0x0a, 0x42, 0x99, 0x5d, 0x4a, 0x3f, 0x92, 0xde, 0x3d, 0x69, 0x39, 0x28,
	0xe3, 0x3d, 0xf4, 0xeb, 0x41, 0xf3, 0xec, 0x64, 0x7d, 0x0a, 0xef, 0xa7, 0x66, 0xec, 0x38, 0x65,
	0xf7, 0x3b, 0x15, 0xe3, 0x02, 0x30, 0xf4, 0x0f, 0xf2, 0xdd, 0x42, 0x48, 0xf3, 0x85, 0x5d, 0xf3,
	0xe8, 0x0b, 0x08, 0xf6, 0xdf, 0xd5, 0xed, 0x60, 0x75, 0x4f, 0x91, 0x3d, 0x42, 0xf2, 0xc5, 0xe6,
	0x42, 0x4f, 0x48, 0x33, 0x49, 0xe3, 0x64, 0xc6, 0xae, 0xef, 0x2c, 0x18, 0x8f, 0xf8, 0xf5, 0xa0,
	0x1e, 0x12, 0x3c, 0x1a, 0xb9, 0x13, 0xfa, 0x33, 0xe9, 0x73, 0x21, 0x40, 0x6c, 0x08, 0x69, 0x62,
	0x48, 0x17, 0xe1, 0x75, 0xdf, 0x57, 0x64, 0xa0, 0x61, 0x9e, 0x2c, 0x36, 0x0a, 0x1f, 0xe5, 0xbd,
	0x2b, 0x08, 0xeb, 0xd2, 0xdf, 0xc8, 0xb1, 0x06, 0xc7, 0x17, 0xcc, 0xe8, 0x68, 0x83, 0x7c, 0x17,
	0xe5, 0x83, 0x82, 0x34, 0xd1, 0xd1, 0xba, 0xc3, 0x88, 0x3c, 0x29, 0x1d, 0x04, 0x98, 0x4d, 0xfd,
	0xd9, 0x43, 0x8b, 0xc3, 0x82, 0xf5, 0x1a, 0xcc, 0xbf, 0x1a, 0xf3, 0x2b, 0x39, 0x8a, 0x12, 0xb5,
	0x00, 0x6d, 0x37, 0x5e, 0xa1, 0x85, 0x06, 0xde, 0x92, 0xb2, 0x2e, 0x3f, 0x25, 0x6d, 0x77, 0x3d,
	0x0b, 0xcc, 0x48, 0x0b, 0x2c, 0xcb, 0xdc, 0xec, 0xf7, 0xfd, 0x7a, 0xf0, 0x28, 0x6c, 0xe5, 0xc0,
	0x44, 0x5a, 0xf8, 0xe4, 0x8e, 0xe9, 0x19, 0x39, 0xc8, 0x5b, 0x9c, 0x03, 0x66, 0x19, 0xd2, 0xc6,
	0x90, 0x0e, 0x82, 0x61, 0x8e, 0x95, 0xfe, 0x2f, 0x49, 0x5f, 0x3a, 0xa2, 0x05, 0xad, 0x78, 0x1c,
	0xdf, 0xb1, 0x19, 0x28, 0xd0, 0xdc, 0x82, 0xf0, 0xa8, 0x5f, 0x0b, 0x1e, 0x86, 0x07, 0xd2, 0x8c,
	0x97, 0xe8, 0x9b, 0x12, 0xa4, 0xaf, 0xef, 0x3f, 0x0d, 0xbc, 0x18, 0xfe, 0xc3, 0xf9, 0xb3, 0x05,
	0x44, 0x5e, 0x07, 0xbf, 0x81, 0xa3, 0xb5, 0x97, 0xe5, 0xfe, 0xf0, 0x8b, 0xf8, 0x0c, 0xd1, 0x46,
	0x97, 0xcc, 0x80, 0xae, 0xb8, 0x74, 0x37, 0xba, 0x7c, 0x32, 0xa0, 0x97, 0x2e, 0x2f, 0x48, 0x0f,
	0x6e, 0xd3, 0x58, 0x46, 0xd2, 0xb2, 0x69, 0x16, 0xc7, 0xcc, 0x28, 0x9e, 0x9a, 0x9b, 0xc4, 0x7a,
	0x07, 0x78, 0x85, 0x6e, 0x89, 0x5e, 0x66, 0x71, 0x3c, 0x29, 0x30, 0xfa, 0x9c, 0x74, 0xf3, 0x47,
	0x50, 0xb2, 0x8b, 0xe6, 0xf6, 0xb0, 0xb9, 0x14, 0xb1, 0x92, 0x9c, 0xf7, 0xf7, 0x98, 0x10, 0xec,
	0xd5, 0x82, 0xc7, 0x52, 0x78, 0x7d, 0xf4, 0xde, 0x71, 0xed, 0xc1, 0x03, 0x3a, 0x24, 0x9d, 0x48,
	0x03, 0xb7, 0x32, 0x51, 0xcc, 0xca, 0x39, 0xde, 0x24, 0x32, 0x9e, 0x87, 0xfb, 0xae, 0x5d, 0x42,
	0x1f, 0xe5, 0xdc, 0x55, 0x1f, 0xe1, 0x68, 0xe1, 0x36, 0x95, 0xfa, 0xae, 0xca, 0x1e, 0x20, 0xbb,
	0x95, 0x03, 0x2b, 0xee, 0x4b, 0xd2, 0x99, 0x73, 0x63, 0x41, 0xc7, 0x60, 0x0c, 0x9b, 0x4a, 0xc5,
	0x63, 0xf9, 0x0d, 0xbc, 0x43, 0x57, 0xc3, 0x79, 0x63, 0xca, 0x63, 0x03, 0x21, 0x5d, 0x31, 0x2e,
	0x0b, 0x02, 0xbd, 0x20, 0x47, 0x6e, 0xbf, 0xe3, 0xca, 0x9a, 0x27, 0x42, 0x4e, 0x25, 0x08, 0x96,
	0x28, 0x66, 0x92, 0x4c, 0x47, 0xe0, 0x1d, 0x55, 0xf5, 0x7d, 0x35, 0x35, 0x6e, 0x6d, 0xbd, 0x2b,
	0x78, 0x1f, 0xd4, 0x04, 0x59, 0x34, 0x20, 0xfb, 0xdf, 0x40, 0x27, 0xac, 0xfa, 0xc0, 0x1f, 0xe3,
	0x58, 0xf6, 0xdc, 0xf9, 0x87, 0xd5, 0x23, 0x7f, 0x4e, 0xba, 0xcb, 0x6e, 0x56, 0xb6, 0xa5, 0x77,
	0xec, 0xd7, 0x82, 0x9d, 0x90, 0x96, 0xd8, 0x6a, 0x45, 0xd2, 0x67, 0x64, 0x4f, 0x1a, 0xa6, 0x21,
	0x4a, 0x16, 0xa0, 0xf9, 0x75, 0x0c, 0xde, 0x13, 0x57, 0xd3, 0x68, 0xcb, 0xab, 0x85, 0xbb, 0xd2,
	0x84, 0x2b, 0x80, 0x9e, 0x91, 0x8e, 0x80, 0x14, 0x94, 0x70, 0xab, 0x2a, 0x1f, 0x9d, 0x9b, 0xd7,
	0x89, 0xab, 0x04, 0xf9, 0xed, 0x25, 0xfc, 0xd9, 0xa1, 0x6e, 0xd3, 0x9d, 0x92, 0xb6, 0x01, 0x10,
	0xee, 0xe3, 0x5a, 0x29, 0x7c, 0xac, 0xbd, 0x55, 0x00, 0x25, 0x77, 0xf4, 0x8c, 0xd0, 0x28, 0x99,
	0xaf, 0x2d, 0xd4, 0x51, 0xb3, 0xf2, 0x43, 0xf8, 0xd7, 0x76, 0x7e, 0xf8, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xcd, 0xd4, 0xb1, 0x44, 0x8a, 0x07, 0x00, 0x00,
}
