// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medusa/extent_id.proto

package medusa

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExtentIdProto struct {
	// Block number of the vdisk in case its not a dedup extent.
	VdiskBlock *int64 `protobuf:"varint,1,opt,name=vdisk_block,json=vdiskBlock" json:"vdisk_block,omitempty"`
	// Whether the mapping to an extent group exists in Medusa's vdisk block
	// map or in Medusa's extent id map. If true, then its in Medusa's extent id
	// map.
	//
	// This field is only set for a non-dedup extent (it is always unset for a
	// dedup extent as dedup extents are always mapped in Medusa's extent id map)
	// when its mapping is moved from the vdisk block map to the extent id map.
	// Additionally, this field is only set to 'true', never explicitly to
	// 'false'.
	//
	// Note that this means that the extent id itself changes when a mapping
	// to an extent group is moved from the vdisk block map to the extent id
	// map.
	EgroupMappingInEidMap *bool `protobuf:"varint,2,opt,name=egroup_mapping_in_eid_map,json=egroupMappingInEidMap" json:"egroup_mapping_in_eid_map,omitempty"`
	// SHA-1 hash of the extent data in case its a dedup extent.
	Sha1Hash []byte `protobuf:"bytes,3,opt,name=sha1_hash,json=sha1Hash" json:"sha1_hash,omitempty"`
	// Size of the extent - only specified in case its a dedup'd extent. For
	// non-dedup'd extents, the size is the same as the size of a vdisk block.
	ExtentSize *int32 `protobuf:"varint,4,opt,name=extent_size,json=extentSize" json:"extent_size,omitempty"`
	// 64-bit id of the owner. The owner is a container in case this is a
	// dedup'd extent, else its a vdisk. This field is optional only because in
	// some contexts the owner is already known. For example, the owner of
	// all extents stored in the Medusa table for a vdisk can be derived -
	// for non-deup'd extents, the owner is the vdisk; for dedup'd extents, the
	// owner is the container to which that vdisk belongs.
	OwnerId              *int64   `protobuf:"varint,5,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtentIdProto) Reset()         { *m = ExtentIdProto{} }
func (m *ExtentIdProto) String() string { return proto.CompactTextString(m) }
func (*ExtentIdProto) ProtoMessage()    {}
func (*ExtentIdProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1d7049d837f36d1, []int{0}
}

func (m *ExtentIdProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtentIdProto.Unmarshal(m, b)
}
func (m *ExtentIdProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtentIdProto.Marshal(b, m, deterministic)
}
func (m *ExtentIdProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtentIdProto.Merge(m, src)
}
func (m *ExtentIdProto) XXX_Size() int {
	return xxx_messageInfo_ExtentIdProto.Size(m)
}
func (m *ExtentIdProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtentIdProto.DiscardUnknown(m)
}

var xxx_messageInfo_ExtentIdProto proto.InternalMessageInfo

func (m *ExtentIdProto) GetVdiskBlock() int64 {
	if m != nil && m.VdiskBlock != nil {
		return *m.VdiskBlock
	}
	return 0
}

func (m *ExtentIdProto) GetEgroupMappingInEidMap() bool {
	if m != nil && m.EgroupMappingInEidMap != nil {
		return *m.EgroupMappingInEidMap
	}
	return false
}

func (m *ExtentIdProto) GetSha1Hash() []byte {
	if m != nil {
		return m.Sha1Hash
	}
	return nil
}

func (m *ExtentIdProto) GetExtentSize() int32 {
	if m != nil && m.ExtentSize != nil {
		return *m.ExtentSize
	}
	return 0
}

func (m *ExtentIdProto) GetOwnerId() int64 {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return 0
}

func init() {
	proto.RegisterType((*ExtentIdProto)(nil), "nutanix.medusa.ExtentIdProto")
}

func init() { proto.RegisterFile("medusa/extent_id.proto", fileDescriptor_a1d7049d837f36d1) }

var fileDescriptor_a1d7049d837f36d1 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x3f, 0x4b, 0xc4, 0x40,
	0x10, 0xc5, 0x59, 0xcf, 0xd3, 0x38, 0xfe, 0x29, 0x16, 0x94, 0x3d, 0x2c, 0x0c, 0x56, 0xb1, 0x89,
	0xd8, 0x59, 0x07, 0x0e, 0x4c, 0x71, 0x20, 0xb1, 0xb3, 0x59, 0xd6, 0x9b, 0xe1, 0x32, 0x9c, 0xd9,
	0x5d, 0xb2, 0x89, 0x1e, 0xf7, 0xf5, 0xfc, 0x52, 0x96, 0x92, 0x5d, 0x2d, 0x2c, 0xe7, 0xf7, 0x7e,
	0x30, 0xef, 0xc1, 0x55, 0x47, 0x38, 0x06, 0x73, 0x4f, 0xbb, 0x81, 0xec, 0xa0, 0x19, 0x4b, 0xdf,
	0xbb, 0xc1, 0xc9, 0x0b, 0x3b, 0x0e, 0xc6, 0xf2, 0xae, 0x4c, 0xf9, 0xed, 0x97, 0x80, 0xf3, 0x65,
	0x74, 0x6a, 0x7c, 0x8e, 0xc6, 0x0d, 0x9c, 0x7e, 0x20, 0x87, 0xad, 0x7e, 0x7b, 0x77, 0xeb, 0xad,
	0x12, 0xb9, 0x28, 0x66, 0x0d, 0x44, 0x54, 0x4d, 0x44, 0x3e, 0xc2, 0x82, 0x36, 0xbd, 0x1b, 0xbd,
	0xee, 0x8c, 0xf7, 0x6c, 0x37, 0x9a, 0xad, 0x26, 0xc6, 0xe9, 0x54, 0x07, 0xb9, 0x28, 0xb2, 0xe6,
	0x32, 0x09, 0xab, 0x94, 0xd7, 0x76, 0xc9, 0xb8, 0x32, 0x5e, 0x5e, 0xc3, 0x49, 0x68, 0xcd, 0x83,
	0x6e, 0x4d, 0x68, 0xd5, 0x2c, 0x17, 0xc5, 0x59, 0x93, 0x4d, 0xe0, 0xc9, 0x84, 0x76, 0xfa, 0xfb,
	0x5b, 0x36, 0xf0, 0x9e, 0xd4, 0x61, 0x2e, 0x8a, 0x79, 0x03, 0x09, 0xbd, 0xf0, 0x9e, 0xe4, 0x02,
	0x32, 0xf7, 0x69, 0xa9, 0xd7, 0x8c, 0x6a, 0x1e, 0x5b, 0x1d, 0xc7, 0xbb, 0xc6, 0xea, 0x0e, 0xe4,
	0xda, 0x75, 0xe5, 0xff, 0x6d, 0x55, 0xf6, 0x37, 0xec, 0xf5, 0x28, 0x91, 0x6f, 0x21, 0x7e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x27, 0x2e, 0x04, 0xec, 0x19, 0x01, 0x00, 0x00,
}
