// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medusa/consistency_group_id.proto

package medusa

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Identifies a consistency group. A consistency group is defined as a
// collection of one more files that need a consistent point in time snapshot
// of its contents. This identifier is used to represent such a collection of
// files between Cerebro and Stargate during snapshot creation.
type ConsistencyGroupIdProto struct {
	// The id of the cluster where this consistency group is defined.
	OriginatingClusterId *int64 `protobuf:"varint,1,opt,name=originating_cluster_id,json=originatingClusterId" json:"originating_cluster_id,omitempty"`
	// The incarnation id of the cluster where the consistency group is defined.
	OriginatingClusterIncarnationId *int64 `protobuf:"varint,2,opt,name=originating_cluster_incarnation_id,json=originatingClusterIncarnationId" json:"originating_cluster_incarnation_id,omitempty"`
	// Cluster wide unique id for the consistency group on the originating
	// cluster.
	Id                   *int64   `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsistencyGroupIdProto) Reset()         { *m = ConsistencyGroupIdProto{} }
func (m *ConsistencyGroupIdProto) String() string { return proto.CompactTextString(m) }
func (*ConsistencyGroupIdProto) ProtoMessage()    {}
func (*ConsistencyGroupIdProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_8360fbc542f79975, []int{0}
}

func (m *ConsistencyGroupIdProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsistencyGroupIdProto.Unmarshal(m, b)
}
func (m *ConsistencyGroupIdProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsistencyGroupIdProto.Marshal(b, m, deterministic)
}
func (m *ConsistencyGroupIdProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsistencyGroupIdProto.Merge(m, src)
}
func (m *ConsistencyGroupIdProto) XXX_Size() int {
	return xxx_messageInfo_ConsistencyGroupIdProto.Size(m)
}
func (m *ConsistencyGroupIdProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsistencyGroupIdProto.DiscardUnknown(m)
}

var xxx_messageInfo_ConsistencyGroupIdProto proto.InternalMessageInfo

func (m *ConsistencyGroupIdProto) GetOriginatingClusterId() int64 {
	if m != nil && m.OriginatingClusterId != nil {
		return *m.OriginatingClusterId
	}
	return 0
}

func (m *ConsistencyGroupIdProto) GetOriginatingClusterIncarnationId() int64 {
	if m != nil && m.OriginatingClusterIncarnationId != nil {
		return *m.OriginatingClusterIncarnationId
	}
	return 0
}

func (m *ConsistencyGroupIdProto) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*ConsistencyGroupIdProto)(nil), "nutanix.medusa.ConsistencyGroupIdProto")
}

func init() { proto.RegisterFile("medusa/consistency_group_id.proto", fileDescriptor_8360fbc542f79975) }

var fileDescriptor_8360fbc542f79975 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcc, 0x4d, 0x4d, 0x29,
	0x2d, 0x4e, 0xd4, 0x4f, 0xce, 0xcf, 0x2b, 0xce, 0x2c, 0x2e, 0x49, 0xcd, 0x4b, 0xae, 0x8c, 0x4f,
	0x2f, 0xca, 0x2f, 0x2d, 0x88, 0xcf, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcb,
	0x2b, 0x2d, 0x49, 0xcc, 0xcb, 0xac, 0xd0, 0x83, 0x28, 0x55, 0x5a, 0xc3, 0xc8, 0x25, 0xee, 0x8c,
	0x50, 0xee, 0x0e, 0x52, 0xed, 0x99, 0x12, 0x00, 0x56, 0x6b, 0xc2, 0x25, 0x96, 0x5f, 0x94, 0x99,
	0x9e, 0x99, 0x97, 0x58, 0x92, 0x99, 0x97, 0x1e, 0x9f, 0x9c, 0x53, 0x5a, 0x5c, 0x92, 0x5a, 0x14,
	0x9f, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1c, 0x24, 0x82, 0x24, 0xeb, 0x0c, 0x91, 0xf4,
	0x4c, 0x11, 0xf2, 0xe6, 0x52, 0xc2, 0xaa, 0x2b, 0x2f, 0x39, 0xb1, 0x08, 0x24, 0x96, 0x9f, 0x07,
	0x32, 0x81, 0x09, 0x6c, 0x82, 0x3c, 0x16, 0x13, 0x10, 0xea, 0x3c, 0x53, 0x84, 0xf8, 0xb8, 0x98,
	0x32, 0x53, 0x24, 0x98, 0xc1, 0x8a, 0x99, 0x32, 0x53, 0x9c, 0x0c, 0xb8, 0x84, 0x92, 0xf3, 0x73,
	0xf5, 0x50, 0x3d, 0xe1, 0x24, 0x84, 0xe9, 0x83, 0x28, 0x36, 0x88, 0x1c, 0x20, 0x00, 0x00, 0xff,
	0xff, 0xdf, 0x5a, 0xc6, 0xc3, 0x14, 0x01, 0x00, 0x00,
}
