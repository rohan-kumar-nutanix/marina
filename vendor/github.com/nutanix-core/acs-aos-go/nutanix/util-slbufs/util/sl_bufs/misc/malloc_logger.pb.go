// Code generated by protoc-gen-go. DO NOT EDIT.
// source: util/sl_bufs/misc/malloc_logger.proto

package misc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MallocLoggerMapsProto struct {
	// A single string containing the contents of /proc/self/maps.
	Maps                 *string  `protobuf:"bytes,1,opt,name=maps" json:"maps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MallocLoggerMapsProto) Reset()         { *m = MallocLoggerMapsProto{} }
func (m *MallocLoggerMapsProto) String() string { return proto.CompactTextString(m) }
func (*MallocLoggerMapsProto) ProtoMessage()    {}
func (*MallocLoggerMapsProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_765e28f7dd0b5f92, []int{0}
}

func (m *MallocLoggerMapsProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MallocLoggerMapsProto.Unmarshal(m, b)
}
func (m *MallocLoggerMapsProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MallocLoggerMapsProto.Marshal(b, m, deterministic)
}
func (m *MallocLoggerMapsProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MallocLoggerMapsProto.Merge(m, src)
}
func (m *MallocLoggerMapsProto) XXX_Size() int {
	return xxx_messageInfo_MallocLoggerMapsProto.Size(m)
}
func (m *MallocLoggerMapsProto) XXX_DiscardUnknown() {
	xxx_messageInfo_MallocLoggerMapsProto.DiscardUnknown(m)
}

var xxx_messageInfo_MallocLoggerMapsProto proto.InternalMessageInfo

func (m *MallocLoggerMapsProto) GetMaps() string {
	if m != nil && m.Maps != nil {
		return *m.Maps
	}
	return ""
}

type MallocLoggerSummaryProto struct {
	// The number of outstanding allocations (i.e., memory not yet free).
	OutstandingAllocations *int64 `protobuf:"varint,1,opt,name=outstanding_allocations,json=outstandingAllocations" json:"outstanding_allocations,omitempty"`
	// The number of bytes used by the outstanding allocations.
	OutstandingBytes *int64 `protobuf:"varint,2,opt,name=outstanding_bytes,json=outstandingBytes" json:"outstanding_bytes,omitempty"`
	// The time of the first outstanding allocation.
	FirstAllocationUsecs *int64 `protobuf:"varint,3,opt,name=first_allocation_usecs,json=firstAllocationUsecs" json:"first_allocation_usecs,omitempty"`
	// The time of the last outstanding allocation.
	LastAllocationUsecs *int64 `protobuf:"varint,4,opt,name=last_allocation_usecs,json=lastAllocationUsecs" json:"last_allocation_usecs,omitempty"`
	// The minimum size of the outstanding allocation from this frame.
	MinimumSizeBytes *int32 `protobuf:"varint,5,opt,name=minimum_size_bytes,json=minimumSizeBytes" json:"minimum_size_bytes,omitempty"`
	// The maximum size of the outstanding allocation from this frame.
	MaximumSizeBytes *int32 `protobuf:"varint,6,opt,name=maximum_size_bytes,json=maximumSizeBytes" json:"maximum_size_bytes,omitempty"`
	// The stack frame at the time of allocation.
	Frame []int64 `protobuf:"varint,7,rep,name=frame" json:"frame,omitempty"`
	// The total number of bytes allocated.
	TotalAllocatedBytes *int64 `protobuf:"varint,8,opt,name=total_allocated_bytes,json=totalAllocatedBytes" json:"total_allocated_bytes,omitempty"`
	// The total number of bytes freed.
	TotalFreedBytes *int64 `protobuf:"varint,9,opt,name=total_freed_bytes,json=totalFreedBytes" json:"total_freed_bytes,omitempty"`
	// The total number of times there was an allocation.
	TotalAllocations *int64 `protobuf:"varint,10,opt,name=total_allocations,json=totalAllocations" json:"total_allocations,omitempty"`
	// The total number of times there was a free.
	TotalFrees *int64 `protobuf:"varint,11,opt,name=total_frees,json=totalFrees" json:"total_frees,omitempty"`
	// The total number of usecs elapsed between the allocation and the free.
	TotalAllocatedUsecs *int64 `protobuf:"varint,12,opt,name=total_allocated_usecs,json=totalAllocatedUsecs" json:"total_allocated_usecs,omitempty"`
	// The sum of all the products of allocation: bytes * microseconds. This
	// provides a metric for how important this frame is, based on the area
	// under the time vs. space curve.
	TotalBytesUsecs *float64 `protobuf:"fixed64,13,opt,name=total_bytes_usecs,json=totalBytesUsecs" json:"total_bytes_usecs,omitempty"`
	// The hash of the stack frame. This is used to match records from one dump
	// to the next.
	Hash                 *int64   `protobuf:"varint,14,opt,name=hash" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MallocLoggerSummaryProto) Reset()         { *m = MallocLoggerSummaryProto{} }
func (m *MallocLoggerSummaryProto) String() string { return proto.CompactTextString(m) }
func (*MallocLoggerSummaryProto) ProtoMessage()    {}
func (*MallocLoggerSummaryProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_765e28f7dd0b5f92, []int{1}
}

func (m *MallocLoggerSummaryProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MallocLoggerSummaryProto.Unmarshal(m, b)
}
func (m *MallocLoggerSummaryProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MallocLoggerSummaryProto.Marshal(b, m, deterministic)
}
func (m *MallocLoggerSummaryProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MallocLoggerSummaryProto.Merge(m, src)
}
func (m *MallocLoggerSummaryProto) XXX_Size() int {
	return xxx_messageInfo_MallocLoggerSummaryProto.Size(m)
}
func (m *MallocLoggerSummaryProto) XXX_DiscardUnknown() {
	xxx_messageInfo_MallocLoggerSummaryProto.DiscardUnknown(m)
}

var xxx_messageInfo_MallocLoggerSummaryProto proto.InternalMessageInfo

func (m *MallocLoggerSummaryProto) GetOutstandingAllocations() int64 {
	if m != nil && m.OutstandingAllocations != nil {
		return *m.OutstandingAllocations
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetOutstandingBytes() int64 {
	if m != nil && m.OutstandingBytes != nil {
		return *m.OutstandingBytes
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetFirstAllocationUsecs() int64 {
	if m != nil && m.FirstAllocationUsecs != nil {
		return *m.FirstAllocationUsecs
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetLastAllocationUsecs() int64 {
	if m != nil && m.LastAllocationUsecs != nil {
		return *m.LastAllocationUsecs
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetMinimumSizeBytes() int32 {
	if m != nil && m.MinimumSizeBytes != nil {
		return *m.MinimumSizeBytes
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetMaximumSizeBytes() int32 {
	if m != nil && m.MaximumSizeBytes != nil {
		return *m.MaximumSizeBytes
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetFrame() []int64 {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *MallocLoggerSummaryProto) GetTotalAllocatedBytes() int64 {
	if m != nil && m.TotalAllocatedBytes != nil {
		return *m.TotalAllocatedBytes
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetTotalFreedBytes() int64 {
	if m != nil && m.TotalFreedBytes != nil {
		return *m.TotalFreedBytes
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetTotalAllocations() int64 {
	if m != nil && m.TotalAllocations != nil {
		return *m.TotalAllocations
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetTotalFrees() int64 {
	if m != nil && m.TotalFrees != nil {
		return *m.TotalFrees
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetTotalAllocatedUsecs() int64 {
	if m != nil && m.TotalAllocatedUsecs != nil {
		return *m.TotalAllocatedUsecs
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetTotalBytesUsecs() float64 {
	if m != nil && m.TotalBytesUsecs != nil {
		return *m.TotalBytesUsecs
	}
	return 0
}

func (m *MallocLoggerSummaryProto) GetHash() int64 {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return 0
}

func init() {
	proto.RegisterType((*MallocLoggerMapsProto)(nil), "nutanix.malloc_logger.MallocLoggerMapsProto")
	proto.RegisterType((*MallocLoggerSummaryProto)(nil), "nutanix.malloc_logger.MallocLoggerSummaryProto")
}

func init() {
	proto.RegisterFile("util/sl_bufs/misc/malloc_logger.proto", fileDescriptor_765e28f7dd0b5f92)
}

var fileDescriptor_765e28f7dd0b5f92 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xb1, 0x6f, 0xd4, 0x30,
	0x18, 0xc5, 0x65, 0x2e, 0x07, 0xf4, 0x6b, 0x81, 0x36, 0xf4, 0x4a, 0x98, 0x88, 0x2a, 0x21, 0x45,
	0x1c, 0x24, 0x12, 0x42, 0x62, 0x61, 0xe9, 0x0d, 0x4c, 0x54, 0x42, 0xa9, 0x58, 0x58, 0x22, 0x5f,
	0xea, 0xe4, 0x2c, 0xd9, 0x71, 0x14, 0xdb, 0x52, 0xdb, 0x89, 0x91, 0x91, 0xbf, 0x18, 0xa1, 0x7c,
	0xce, 0x25, 0xa6, 0xcd, 0x66, 0xfb, 0xfd, 0xde, 0xd3, 0x93, 0xed, 0x0f, 0xde, 0x5a, 0xc3, 0x45,
	0xa6, 0x45, 0xb1, 0xb5, 0x95, 0xce, 0x24, 0xd7, 0x65, 0x26, 0xa9, 0x10, 0xaa, 0x2c, 0x84, 0xaa,
	0x6b, 0xd6, 0xa5, 0x6d, 0xa7, 0x8c, 0x0a, 0x57, 0x8d, 0x35, 0xb4, 0xe1, 0x37, 0xe9, 0x7f, 0xe2,
	0xf9, 0x1a, 0x56, 0x97, 0x78, 0xf0, 0x0d, 0xf7, 0x97, 0xb4, 0xd5, 0xdf, 0x91, 0x0f, 0x21, 0x90,
	0xb4, 0xd5, 0x11, 0x89, 0x49, 0x72, 0x90, 0xe3, 0xfa, 0xfc, 0x6f, 0x00, 0x91, 0x4f, 0x5f, 0x59,
	0x29, 0x69, 0x77, 0xeb, 0x0c, 0x9f, 0xe1, 0x95, 0xb2, 0x46, 0x1b, 0xda, 0x5c, 0xf3, 0xa6, 0x2e,
	0x10, 0xa3, 0x86, 0xab, 0xc6, 0x65, 0x2c, 0xf2, 0x33, 0x4f, 0xbe, 0x98, 0xd4, 0x70, 0x0d, 0x27,
	0xbe, 0x71, 0x7b, 0x6b, 0x98, 0x8e, 0x1e, 0xa1, 0xe5, 0xd8, 0x13, 0x36, 0xfd, 0x79, 0xf8, 0x09,
	0xce, 0x2a, 0xde, 0x69, 0xe3, 0xe5, 0x17, 0x56, 0xb3, 0x52, 0x47, 0x0b, 0x74, 0x9c, 0xa2, 0x3a,
	0xc5, 0xff, 0xe8, 0xb5, 0xf0, 0x23, 0xac, 0x04, 0x9d, 0x33, 0x05, 0x68, 0x7a, 0xd9, 0x8b, 0xf7,
	0x3d, 0xef, 0x21, 0x94, 0xbc, 0xe1, 0xd2, 0xca, 0x42, 0xf3, 0x3b, 0x36, 0xf4, 0x5a, 0xc6, 0x24,
	0x59, 0xe6, 0xc7, 0x83, 0x72, 0xc5, 0xef, 0x98, 0xeb, 0xd5, 0xd3, 0xf4, 0xe6, 0x3e, 0xfd, 0x78,
	0xa0, 0x9d, 0x32, 0xd1, 0xa7, 0xb0, 0xac, 0x3a, 0x2a, 0x59, 0xf4, 0x24, 0x5e, 0x24, 0x8b, 0xdc,
	0x6d, 0xfa, 0x96, 0x46, 0x19, 0x2a, 0xf6, 0x35, 0xd9, 0xf5, 0x10, 0xf3, 0xd4, 0xb5, 0x44, 0xf1,
	0x62, 0xaf, 0xb9, 0xa4, 0x77, 0x70, 0xe2, 0x3c, 0x55, 0xc7, 0x46, 0xfe, 0x00, 0xf9, 0x17, 0x28,
	0x7c, 0xed, 0xcf, 0x1d, 0xbb, 0xde, 0xb3, 0xfe, 0xdb, 0x80, 0xbb, 0x68, 0x3f, 0x1b, 0x5f, 0xe5,
	0x0d, 0x1c, 0x4e, 0xc1, 0x3a, 0x3a, 0x44, 0x0c, 0xc6, 0x48, 0x3d, 0xd7, 0xd6, 0xdd, 0xe9, 0xd1,
	0x5c, 0x5b, 0x77, 0xa7, 0x63, 0x5b, 0xec, 0x39, 0xf0, 0xcf, 0x62, 0x92, 0x90, 0xa1, 0x2d, 0x16,
	0x75, 0x6c, 0x08, 0xc1, 0x8e, 0xea, 0x5d, 0xf4, 0x1c, 0xe3, 0x70, 0xbd, 0x69, 0xe1, 0x75, 0xa9,
	0x64, 0x3a, 0xfb, 0x95, 0x37, 0x47, 0xfe, 0xd7, 0xfc, 0xf9, 0xa5, 0xe6, 0x66, 0x67, 0xb7, 0x29,
	0x6b, 0xea, 0x91, 0x2f, 0x95, 0xcc, 0x86, 0x75, 0xd6, 0x4f, 0xcd, 0x07, 0x2d, 0x70, 0x68, 0x1e,
	0x4c, 0xd0, 0x2f, 0x42, 0x7e, 0x13, 0xf2, 0x87, 0x90, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbf,
	0x68, 0x45, 0x21, 0x5e, 0x03, 0x00, 0x00,
}
