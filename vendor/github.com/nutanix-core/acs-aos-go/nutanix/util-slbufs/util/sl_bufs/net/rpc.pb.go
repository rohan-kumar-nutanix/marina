// Code generated by protoc-gen-go. DO NOT EDIT.
// source: util/sl_bufs/net/rpc.proto

package net

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Status of the overall RPC. If any new value is added here, the method
// Rpc::RpcResponseStatusToString() should also be changed.
type RpcResponseHeader_RpcStatus int32

const (
	RpcResponseHeader_kNoError        RpcResponseHeader_RpcStatus = 0
	RpcResponseHeader_kMethodError    RpcResponseHeader_RpcStatus = 1
	RpcResponseHeader_kAppError       RpcResponseHeader_RpcStatus = 2
	RpcResponseHeader_kCanceled       RpcResponseHeader_RpcStatus = 3
	RpcResponseHeader_kTimeout        RpcResponseHeader_RpcStatus = 4
	RpcResponseHeader_kTransportError RpcResponseHeader_RpcStatus = 5
)

var RpcResponseHeader_RpcStatus_name = map[int32]string{
	0: "kNoError",
	1: "kMethodError",
	2: "kAppError",
	3: "kCanceled",
	4: "kTimeout",
	5: "kTransportError",
}

var RpcResponseHeader_RpcStatus_value = map[string]int32{
	"kNoError":        0,
	"kMethodError":    1,
	"kAppError":       2,
	"kCanceled":       3,
	"kTimeout":        4,
	"kTransportError": 5,
}

func (x RpcResponseHeader_RpcStatus) Enum() *RpcResponseHeader_RpcStatus {
	p := new(RpcResponseHeader_RpcStatus)
	*p = x
	return p
}

func (x RpcResponseHeader_RpcStatus) String() string {
	return proto.EnumName(RpcResponseHeader_RpcStatus_name, int32(x))
}

func (x *RpcResponseHeader_RpcStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RpcResponseHeader_RpcStatus_value, data, "RpcResponseHeader_RpcStatus")
	if err != nil {
		return err
	}
	*x = RpcResponseHeader_RpcStatus(value)
	return nil
}

func (RpcResponseHeader_RpcStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6467b70072175a90, []int{5, 0}
}

// Options that control the behavior of the RPCs.
type RpcOptions struct {
	// Timeout on the RPC. A value <= 0 implies an infinite timeout.
	TimeoutMsecs *int32 `protobuf:"varint,1,opt,name=timeout_msecs,json=timeoutMsecs" json:"timeout_msecs,omitempty"`
	// Number of times to retry the RPC upon a timeout.
	MaxRetries *int32 `protobuf:"varint,2,opt,name=max_retries,json=maxRetries" json:"max_retries,omitempty"`
	// Whether to exponentially backoff the timeout upon a retry.
	ExponentialBackoffTimeout *bool `protobuf:"varint,3,opt,name=exponential_backoff_timeout,json=exponentialBackoffTimeout,def=1" json:"exponential_backoff_timeout,omitempty"`
	// Cluster Id where the RPC originates. It is up to the service to determine
	// the behavior when this is not set.
	ClusterId *int64 `protobuf:"varint,4,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	// Indicates whether the RPC method will be processed only on an rpc server
	// which accepts external connections from another cluster.
	ExternalRpcMethod    *bool    `protobuf:"varint,5,opt,name=external_rpc_method,json=externalRpcMethod,def=0" json:"external_rpc_method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcOptions) Reset()         { *m = RpcOptions{} }
func (m *RpcOptions) String() string { return proto.CompactTextString(m) }
func (*RpcOptions) ProtoMessage()    {}
func (*RpcOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6467b70072175a90, []int{0}
}

func (m *RpcOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcOptions.Unmarshal(m, b)
}
func (m *RpcOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcOptions.Marshal(b, m, deterministic)
}
func (m *RpcOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcOptions.Merge(m, src)
}
func (m *RpcOptions) XXX_Size() int {
	return xxx_messageInfo_RpcOptions.Size(m)
}
func (m *RpcOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RpcOptions proto.InternalMessageInfo

const Default_RpcOptions_ExponentialBackoffTimeout bool = true
const Default_RpcOptions_ExternalRpcMethod bool = false

func (m *RpcOptions) GetTimeoutMsecs() int32 {
	if m != nil && m.TimeoutMsecs != nil {
		return *m.TimeoutMsecs
	}
	return 0
}

func (m *RpcOptions) GetMaxRetries() int32 {
	if m != nil && m.MaxRetries != nil {
		return *m.MaxRetries
	}
	return 0
}

func (m *RpcOptions) GetExponentialBackoffTimeout() bool {
	if m != nil && m.ExponentialBackoffTimeout != nil {
		return *m.ExponentialBackoffTimeout
	}
	return Default_RpcOptions_ExponentialBackoffTimeout
}

func (m *RpcOptions) GetClusterId() int64 {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return 0
}

func (m *RpcOptions) GetExternalRpcMethod() bool {
	if m != nil && m.ExternalRpcMethod != nil {
		return *m.ExternalRpcMethod
	}
	return Default_RpcOptions_ExternalRpcMethod
}

// Optional information about the context of the RPC request.
type RpcRequestContext struct {
	// UUID of the Nutanix end user who issued the request.
	UserUuid []byte `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
	// Name of the Nutanix end user who issued the request.
	UserName *string `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// IP from which a Nutanix end user issued the request.
	UserIp *string `protobuf:"bytes,3,opt,name=user_ip,json=userIp" json:"user_ip,omitempty"`
	// ID of the session between the Nutanix end user and the Nutanix API
	// gateway.
	UserSessionId *string `protobuf:"bytes,4,opt,name=user_session_id,json=userSessionId" json:"user_session_id,omitempty"`
	// UUID of the tenant that the Nutanix end user belongs to.
	TenantUuid []byte `protobuf:"bytes,5,opt,name=tenant_uuid,json=tenantUuid" json:"tenant_uuid,omitempty"`
	// security_token (i.e. JWT token) associated with the request.
	SecurityToken *string `protobuf:"bytes,6,opt,name=security_token,json=securityToken" json:"security_token,omitempty"`
	// Name of the Service which issued the request.
	ServiceName *string `protobuf:"bytes,7,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// Flag to indicates whether the  RPC request should be authorized.
	// Services with rbac enabled use this flag to determine if the request
	// should be authorized. Default value is set to False for service to
	// service RPC requests. API Gateways use this flag to enable
	// respective services to authorize the requests for the entities it manages
	ShouldAuthorize *bool `protobuf:"varint,8,opt,name=should_authorize,json=shouldAuthorize,def=0" json:"should_authorize,omitempty"`
	// List of user groups the end user who issued the request belongs to.
	UserGroupUuids       [][]byte `protobuf:"bytes,9,rep,name=user_group_uuids,json=userGroupUuids" json:"user_group_uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcRequestContext) Reset()         { *m = RpcRequestContext{} }
func (m *RpcRequestContext) String() string { return proto.CompactTextString(m) }
func (*RpcRequestContext) ProtoMessage()    {}
func (*RpcRequestContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_6467b70072175a90, []int{1}
}

func (m *RpcRequestContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcRequestContext.Unmarshal(m, b)
}
func (m *RpcRequestContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcRequestContext.Marshal(b, m, deterministic)
}
func (m *RpcRequestContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcRequestContext.Merge(m, src)
}
func (m *RpcRequestContext) XXX_Size() int {
	return xxx_messageInfo_RpcRequestContext.Size(m)
}
func (m *RpcRequestContext) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcRequestContext.DiscardUnknown(m)
}

var xxx_messageInfo_RpcRequestContext proto.InternalMessageInfo

const Default_RpcRequestContext_ShouldAuthorize bool = false

func (m *RpcRequestContext) GetUserUuid() []byte {
	if m != nil {
		return m.UserUuid
	}
	return nil
}

func (m *RpcRequestContext) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *RpcRequestContext) GetUserIp() string {
	if m != nil && m.UserIp != nil {
		return *m.UserIp
	}
	return ""
}

func (m *RpcRequestContext) GetUserSessionId() string {
	if m != nil && m.UserSessionId != nil {
		return *m.UserSessionId
	}
	return ""
}

func (m *RpcRequestContext) GetTenantUuid() []byte {
	if m != nil {
		return m.TenantUuid
	}
	return nil
}

func (m *RpcRequestContext) GetSecurityToken() string {
	if m != nil && m.SecurityToken != nil {
		return *m.SecurityToken
	}
	return ""
}

func (m *RpcRequestContext) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *RpcRequestContext) GetShouldAuthorize() bool {
	if m != nil && m.ShouldAuthorize != nil {
		return *m.ShouldAuthorize
	}
	return Default_RpcRequestContext_ShouldAuthorize
}

func (m *RpcRequestContext) GetUserGroupUuids() [][]byte {
	if m != nil {
		return m.UserGroupUuids
	}
	return nil
}

// Auth context containing information about the originating cluster/node of
// the RPC.
type SourceAuthContext struct {
	// Spiffe  URI that identifies the cluster on which the calling service is
	// hosted.
	SpiffeUri            []byte   `protobuf:"bytes,1,opt,name=spiffe_uri,json=spiffeUri" json:"spiffe_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SourceAuthContext) Reset()         { *m = SourceAuthContext{} }
func (m *SourceAuthContext) String() string { return proto.CompactTextString(m) }
func (*SourceAuthContext) ProtoMessage()    {}
func (*SourceAuthContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_6467b70072175a90, []int{2}
}

func (m *SourceAuthContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceAuthContext.Unmarshal(m, b)
}
func (m *SourceAuthContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceAuthContext.Marshal(b, m, deterministic)
}
func (m *SourceAuthContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceAuthContext.Merge(m, src)
}
func (m *SourceAuthContext) XXX_Size() int {
	return xxx_messageInfo_SourceAuthContext.Size(m)
}
func (m *SourceAuthContext) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceAuthContext.DiscardUnknown(m)
}

var xxx_messageInfo_SourceAuthContext proto.InternalMessageInfo

func (m *SourceAuthContext) GetSpiffeUri() []byte {
	if m != nil {
		return m.SpiffeUri
	}
	return nil
}

// Stream context containing information for streaming RPCs.
type StreamContext struct {
	// Sequential message number in the stream. This is a monotonically
	// increasing number that uniquely identifies the position of the message
	// within a stream.
	StreamMsgNum *int64 `protobuf:"varint,1,opt,name=stream_msg_num,json=streamMsgNum" json:"stream_msg_num,omitempty"`
	// This flag indicates whether this is the last message in the stream.
	IsLastMsg            *bool    `protobuf:"varint,2,opt,name=is_last_msg,json=isLastMsg,def=0" json:"is_last_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamContext) Reset()         { *m = StreamContext{} }
func (m *StreamContext) String() string { return proto.CompactTextString(m) }
func (*StreamContext) ProtoMessage()    {}
func (*StreamContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_6467b70072175a90, []int{3}
}

func (m *StreamContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamContext.Unmarshal(m, b)
}
func (m *StreamContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamContext.Marshal(b, m, deterministic)
}
func (m *StreamContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamContext.Merge(m, src)
}
func (m *StreamContext) XXX_Size() int {
	return xxx_messageInfo_StreamContext.Size(m)
}
func (m *StreamContext) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamContext.DiscardUnknown(m)
}

var xxx_messageInfo_StreamContext proto.InternalMessageInfo

const Default_StreamContext_IsLastMsg bool = false

func (m *StreamContext) GetStreamMsgNum() int64 {
	if m != nil && m.StreamMsgNum != nil {
		return *m.StreamMsgNum
	}
	return 0
}

func (m *StreamContext) GetIsLastMsg() bool {
	if m != nil && m.IsLastMsg != nil {
		return *m.IsLastMsg
	}
	return Default_StreamContext_IsLastMsg
}

// Header used in all RPC requests.
type RpcRequestHeader struct {
	// Unique id that's assigned to this RPC. This can be used for duplicate
	// detection - a retry would reuse the same id.
	RpcId *int64 `protobuf:"varint,1,req,name=rpc_id,json=rpcId" json:"rpc_id,omitempty"`
	// Size of the protomsg sent in the request.
	ProtobufSize *int32 `protobuf:"varint,2,req,name=protobuf_size,json=protobufSize" json:"protobuf_size,omitempty"`
	// Size of the payload sent in the request. A payload is a sequence of
	// uninterpreted bytes that is communicated to the peer. It is not stored
	// as a 'string' inside the request/response protobuf as that would result
	// in unnecessary overhead due to serialization/de-serialization of
	// protobufs.
	PayloadSize *int32 `protobuf:"varint,3,opt,name=payload_size,json=payloadSize" json:"payload_size,omitempty"`
	// Name of the method to be invoked at the server.
	MethodName *string `protobuf:"bytes,4,req,name=method_name,json=methodName" json:"method_name,omitempty"`
	// Absolute time at the client when the RPC was initiated.
	SendTimeUsecs *int64 `protobuf:"varint,5,req,name=send_time_usecs,json=sendTimeUsecs" json:"send_time_usecs,omitempty"`
	// Absolute time at the client when the RPC will be timed out. The server
	// can use this as a hint to terminate processing the request if the client
	// has already timed out the request. The server should still send a reply
	// back - it'll simply be discarded by the RPC library at the client end.
	DeadlineUsecs *int64 `protobuf:"varint,6,opt,name=deadline_usecs,json=deadlineUsecs" json:"deadline_usecs,omitempty"`
	// Cluster Id where the RPC originates. It is up to the service to determine
	// the behavior when this is not set.
	ClusterId *int64 `protobuf:"varint,7,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	// Cluster UUID where the RPC originates. Similar to above, it is up to the
	// service to determine the behavior when this is set or unset. Please refer
	// to the 'source_auth_context' field below which should be preferred over
	// this field.
	ClusterUuid []byte `protobuf:"bytes,8,opt,name=cluster_uuid,json=clusterUuid" json:"cluster_uuid,omitempty"`
	// Optional RPC Context information which might be required by some
	// components that is populated with information about the user in whose
	// context this RPC request may have originated.
	RequestContext *RpcRequestContext `protobuf:"bytes,9,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	// Adler32 checksum of the RPC request.
	Checksum *uint32 `protobuf:"varint,10,opt,name=checksum" json:"checksum,omitempty"`
	// Name of the service to be invoked at the server. If not provided then
	// the default service is used.
	ServiceName *string `protobuf:"bytes,11,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// Context containing auth information of the source cluster/node. This
	// context contains a 'spiffe_uri' which will contain a spiffe representation
	// of the node resource and would include the node's uuid, as well as the
	// cluster's uuid. This field should be preferred over 'cluster_uuid' field
	// above as this field provides more generic and complete information about
	// a node/cluster.
	SourceAuthContext *SourceAuthContext `protobuf:"bytes,12,opt,name=source_auth_context,json=sourceAuthContext" json:"source_auth_context,omitempty"`
	// Context for client's RPC stream.
	RpcStreamContext     *StreamContext `protobuf:"bytes,13,opt,name=rpc_stream_context,json=rpcStreamContext" json:"rpc_stream_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RpcRequestHeader) Reset()         { *m = RpcRequestHeader{} }
func (m *RpcRequestHeader) String() string { return proto.CompactTextString(m) }
func (*RpcRequestHeader) ProtoMessage()    {}
func (*RpcRequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_6467b70072175a90, []int{4}
}

func (m *RpcRequestHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcRequestHeader.Unmarshal(m, b)
}
func (m *RpcRequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcRequestHeader.Marshal(b, m, deterministic)
}
func (m *RpcRequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcRequestHeader.Merge(m, src)
}
func (m *RpcRequestHeader) XXX_Size() int {
	return xxx_messageInfo_RpcRequestHeader.Size(m)
}
func (m *RpcRequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcRequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RpcRequestHeader proto.InternalMessageInfo

func (m *RpcRequestHeader) GetRpcId() int64 {
	if m != nil && m.RpcId != nil {
		return *m.RpcId
	}
	return 0
}

func (m *RpcRequestHeader) GetProtobufSize() int32 {
	if m != nil && m.ProtobufSize != nil {
		return *m.ProtobufSize
	}
	return 0
}

func (m *RpcRequestHeader) GetPayloadSize() int32 {
	if m != nil && m.PayloadSize != nil {
		return *m.PayloadSize
	}
	return 0
}

func (m *RpcRequestHeader) GetMethodName() string {
	if m != nil && m.MethodName != nil {
		return *m.MethodName
	}
	return ""
}

func (m *RpcRequestHeader) GetSendTimeUsecs() int64 {
	if m != nil && m.SendTimeUsecs != nil {
		return *m.SendTimeUsecs
	}
	return 0
}

func (m *RpcRequestHeader) GetDeadlineUsecs() int64 {
	if m != nil && m.DeadlineUsecs != nil {
		return *m.DeadlineUsecs
	}
	return 0
}

func (m *RpcRequestHeader) GetClusterId() int64 {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return 0
}

func (m *RpcRequestHeader) GetClusterUuid() []byte {
	if m != nil {
		return m.ClusterUuid
	}
	return nil
}

func (m *RpcRequestHeader) GetRequestContext() *RpcRequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *RpcRequestHeader) GetChecksum() uint32 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return 0
}

func (m *RpcRequestHeader) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *RpcRequestHeader) GetSourceAuthContext() *SourceAuthContext {
	if m != nil {
		return m.SourceAuthContext
	}
	return nil
}

func (m *RpcRequestHeader) GetRpcStreamContext() *StreamContext {
	if m != nil {
		return m.RpcStreamContext
	}
	return nil
}

// Header used in all RPC responses.
type RpcResponseHeader struct {
	// RPC id in the corresponding request - this is simply reflected back.
	RpcId     *int64                       `protobuf:"varint,1,req,name=rpc_id,json=rpcId" json:"rpc_id,omitempty"`
	RpcStatus *RpcResponseHeader_RpcStatus `protobuf:"varint,2,opt,name=rpc_status,json=rpcStatus,enum=nutanix.net.RpcResponseHeader_RpcStatus,def=0" json:"rpc_status,omitempty"`
	// If rpc_status is kAppError, then the following describes an application
	// specific error. This is opaque to the RPC library and its semantics are
	// meaningful only to the application.
	AppError *int32 `protobuf:"varint,3,opt,name=app_error,json=appError" json:"app_error,omitempty"`
	// An optional string that describes the error. If rpc_status is kAppError,
	// then the application may set this. On other errors, the RPC library may
	// set this. In either case, it is not required that this be set.
	ErrorDetail *string `protobuf:"bytes,4,opt,name=error_detail,json=errorDetail" json:"error_detail,omitempty"`
	// Size of the response protobuf. We always send a response protobuf back
	// on kNoError. On kAppError, it's up to the server application if it wants
	// to send a response protobuf back or not. On other errors, a response
	// protobuf is not sent back.
	ProtobufSize *int32 `protobuf:"varint,5,opt,name=protobuf_size,json=protobufSize" json:"protobuf_size,omitempty"`
	// Size of the response payload if any. This may be sent when rpc_status is
	// kNoError or kAppError, not otherwise.
	PayloadSize *int32 `protobuf:"varint,6,opt,name=payload_size,json=payloadSize" json:"payload_size,omitempty"`
	// Adler32 checksum of the RPC response.
	Checksum *uint32 `protobuf:"varint,7,opt,name=checksum" json:"checksum,omitempty"`
	// Context for server's stream RPC response.
	RpcStreamContext     *StreamContext `protobuf:"bytes,8,opt,name=rpc_stream_context,json=rpcStreamContext" json:"rpc_stream_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RpcResponseHeader) Reset()         { *m = RpcResponseHeader{} }
func (m *RpcResponseHeader) String() string { return proto.CompactTextString(m) }
func (*RpcResponseHeader) ProtoMessage()    {}
func (*RpcResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_6467b70072175a90, []int{5}
}

func (m *RpcResponseHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcResponseHeader.Unmarshal(m, b)
}
func (m *RpcResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcResponseHeader.Marshal(b, m, deterministic)
}
func (m *RpcResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcResponseHeader.Merge(m, src)
}
func (m *RpcResponseHeader) XXX_Size() int {
	return xxx_messageInfo_RpcResponseHeader.Size(m)
}
func (m *RpcResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RpcResponseHeader proto.InternalMessageInfo

const Default_RpcResponseHeader_RpcStatus RpcResponseHeader_RpcStatus = RpcResponseHeader_kNoError

func (m *RpcResponseHeader) GetRpcId() int64 {
	if m != nil && m.RpcId != nil {
		return *m.RpcId
	}
	return 0
}

func (m *RpcResponseHeader) GetRpcStatus() RpcResponseHeader_RpcStatus {
	if m != nil && m.RpcStatus != nil {
		return *m.RpcStatus
	}
	return Default_RpcResponseHeader_RpcStatus
}

func (m *RpcResponseHeader) GetAppError() int32 {
	if m != nil && m.AppError != nil {
		return *m.AppError
	}
	return 0
}

func (m *RpcResponseHeader) GetErrorDetail() string {
	if m != nil && m.ErrorDetail != nil {
		return *m.ErrorDetail
	}
	return ""
}

func (m *RpcResponseHeader) GetProtobufSize() int32 {
	if m != nil && m.ProtobufSize != nil {
		return *m.ProtobufSize
	}
	return 0
}

func (m *RpcResponseHeader) GetPayloadSize() int32 {
	if m != nil && m.PayloadSize != nil {
		return *m.PayloadSize
	}
	return 0
}

func (m *RpcResponseHeader) GetChecksum() uint32 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return 0
}

func (m *RpcResponseHeader) GetRpcStreamContext() *StreamContext {
	if m != nil {
		return m.RpcStreamContext
	}
	return nil
}

// Additional metadata logged by the RPC library when writing binary log
// records.
type RpcBinaryLogRecordMetadata struct {
	// Whether the logger was the sender of the RPC request.
	IsClient *bool `protobuf:"varint,1,opt,name=is_client,json=isClient" json:"is_client,omitempty"`
	// TCP endpoint pair information if available.
	LocalIp    *uint32 `protobuf:"varint,2,opt,name=local_ip,json=localIp" json:"local_ip,omitempty"`
	LocalPort  *int32  `protobuf:"varint,3,opt,name=local_port,json=localPort" json:"local_port,omitempty"`
	RemoteIp   *uint32 `protobuf:"varint,4,opt,name=remote_ip,json=remoteIp" json:"remote_ip,omitempty"`
	RemotePort *int32  `protobuf:"varint,5,opt,name=remote_port,json=remotePort" json:"remote_port,omitempty"`
	// The following is set if the peer is communicated with using RPC local.
	PeerIsLocal *bool `protobuf:"varint,6,opt,name=peer_is_local,json=peerIsLocal" json:"peer_is_local,omitempty"`
	// The following is set if the peer is a remote cluster and is using Aplos
	// as the underlying transport.
	AplosConnectionUuid *string `protobuf:"bytes,7,opt,name=aplos_connection_uuid,json=aplosConnectionUuid" json:"aplos_connection_uuid,omitempty"`
	// The presence of this field in the metadata indicates that the Rpc is
	// serialized using a flatbuffer. In that case, this metadata is followed by
	// RpcHeaderFB which is then followed by a flatbuffer with the name contained
	// in this field.
	FlatbufferName *string `protobuf:"bytes,8,opt,name=flatbuffer_name,json=flatbufferName" json:"flatbuffer_name,omitempty"`
	// TCP endpoint pair information for IPv6, if available.
	LocalIpv6            *string  `protobuf:"bytes,9,opt,name=local_ipv6,json=localIpv6" json:"local_ipv6,omitempty"`
	RemoteIpv6           *string  `protobuf:"bytes,10,opt,name=remote_ipv6,json=remoteIpv6" json:"remote_ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcBinaryLogRecordMetadata) Reset()         { *m = RpcBinaryLogRecordMetadata{} }
func (m *RpcBinaryLogRecordMetadata) String() string { return proto.CompactTextString(m) }
func (*RpcBinaryLogRecordMetadata) ProtoMessage()    {}
func (*RpcBinaryLogRecordMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_6467b70072175a90, []int{6}
}

func (m *RpcBinaryLogRecordMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcBinaryLogRecordMetadata.Unmarshal(m, b)
}
func (m *RpcBinaryLogRecordMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcBinaryLogRecordMetadata.Marshal(b, m, deterministic)
}
func (m *RpcBinaryLogRecordMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcBinaryLogRecordMetadata.Merge(m, src)
}
func (m *RpcBinaryLogRecordMetadata) XXX_Size() int {
	return xxx_messageInfo_RpcBinaryLogRecordMetadata.Size(m)
}
func (m *RpcBinaryLogRecordMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcBinaryLogRecordMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RpcBinaryLogRecordMetadata proto.InternalMessageInfo

func (m *RpcBinaryLogRecordMetadata) GetIsClient() bool {
	if m != nil && m.IsClient != nil {
		return *m.IsClient
	}
	return false
}

func (m *RpcBinaryLogRecordMetadata) GetLocalIp() uint32 {
	if m != nil && m.LocalIp != nil {
		return *m.LocalIp
	}
	return 0
}

func (m *RpcBinaryLogRecordMetadata) GetLocalPort() int32 {
	if m != nil && m.LocalPort != nil {
		return *m.LocalPort
	}
	return 0
}

func (m *RpcBinaryLogRecordMetadata) GetRemoteIp() uint32 {
	if m != nil && m.RemoteIp != nil {
		return *m.RemoteIp
	}
	return 0
}

func (m *RpcBinaryLogRecordMetadata) GetRemotePort() int32 {
	if m != nil && m.RemotePort != nil {
		return *m.RemotePort
	}
	return 0
}

func (m *RpcBinaryLogRecordMetadata) GetPeerIsLocal() bool {
	if m != nil && m.PeerIsLocal != nil {
		return *m.PeerIsLocal
	}
	return false
}

func (m *RpcBinaryLogRecordMetadata) GetAplosConnectionUuid() string {
	if m != nil && m.AplosConnectionUuid != nil {
		return *m.AplosConnectionUuid
	}
	return ""
}

func (m *RpcBinaryLogRecordMetadata) GetFlatbufferName() string {
	if m != nil && m.FlatbufferName != nil {
		return *m.FlatbufferName
	}
	return ""
}

func (m *RpcBinaryLogRecordMetadata) GetLocalIpv6() string {
	if m != nil && m.LocalIpv6 != nil {
		return *m.LocalIpv6
	}
	return ""
}

func (m *RpcBinaryLogRecordMetadata) GetRemoteIpv6() string {
	if m != nil && m.RemoteIpv6 != nil {
		return *m.RemoteIpv6
	}
	return ""
}

var E_DefaultTimeoutMsecs = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         50000,
	Name:          "nutanix.net.default_timeout_msecs",
	Tag:           "varint,50000,opt,name=default_timeout_msecs",
	Filename:      "util/sl_bufs/net/rpc.proto",
}

var E_DefaultMaxRetries = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         50001,
	Name:          "nutanix.net.default_max_retries",
	Tag:           "varint,50001,opt,name=default_max_retries",
	Filename:      "util/sl_bufs/net/rpc.proto",
}

var E_DefaultExponentialBackoffTimeout = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50002,
	Name:          "nutanix.net.default_exponential_backoff_timeout",
	Tag:           "varint,50002,opt,name=default_exponential_backoff_timeout",
	Filename:      "util/sl_bufs/net/rpc.proto",
}

var E_TimeoutMsecs = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         60000,
	Name:          "nutanix.net.timeout_msecs",
	Tag:           "varint,60000,opt,name=timeout_msecs",
	Filename:      "util/sl_bufs/net/rpc.proto",
}

var E_MaxRetries = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         60001,
	Name:          "nutanix.net.max_retries",
	Tag:           "varint,60001,opt,name=max_retries",
	Filename:      "util/sl_bufs/net/rpc.proto",
}

var E_ExponentialBackoffTimeout = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         60002,
	Name:          "nutanix.net.exponential_backoff_timeout",
	Tag:           "varint,60002,opt,name=exponential_backoff_timeout",
	Filename:      "util/sl_bufs/net/rpc.proto",
}

var E_ExternalRpcMethod = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         60003,
	Name:          "nutanix.net.external_rpc_method",
	Tag:           "varint,60003,opt,name=external_rpc_method",
	Filename:      "util/sl_bufs/net/rpc.proto",
}

var E_GrpcTimeoutMsecs = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         70000,
	Name:          "nutanix.net.grpc_timeout_msecs",
	Tag:           "varint,70000,opt,name=grpc_timeout_msecs",
	Filename:      "util/sl_bufs/net/rpc.proto",
}

func init() {
	proto.RegisterEnum("nutanix.net.RpcResponseHeader_RpcStatus", RpcResponseHeader_RpcStatus_name, RpcResponseHeader_RpcStatus_value)
	proto.RegisterType((*RpcOptions)(nil), "nutanix.net.RpcOptions")
	proto.RegisterType((*RpcRequestContext)(nil), "nutanix.net.RpcRequestContext")
	proto.RegisterType((*SourceAuthContext)(nil), "nutanix.net.SourceAuthContext")
	proto.RegisterType((*StreamContext)(nil), "nutanix.net.StreamContext")
	proto.RegisterType((*RpcRequestHeader)(nil), "nutanix.net.RpcRequestHeader")
	proto.RegisterType((*RpcResponseHeader)(nil), "nutanix.net.RpcResponseHeader")
	proto.RegisterType((*RpcBinaryLogRecordMetadata)(nil), "nutanix.net.RpcBinaryLogRecordMetadata")
	proto.RegisterExtension(E_DefaultTimeoutMsecs)
	proto.RegisterExtension(E_DefaultMaxRetries)
	proto.RegisterExtension(E_DefaultExponentialBackoffTimeout)
	proto.RegisterExtension(E_TimeoutMsecs)
	proto.RegisterExtension(E_MaxRetries)
	proto.RegisterExtension(E_ExponentialBackoffTimeout)
	proto.RegisterExtension(E_ExternalRpcMethod)
	proto.RegisterExtension(E_GrpcTimeoutMsecs)
}

func init() { proto.RegisterFile("util/sl_bufs/net/rpc.proto", fileDescriptor_6467b70072175a90) }

var fileDescriptor_6467b70072175a90 = []byte{
	// 1318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x7e, 0xf5, 0x65, 0x93, 0xa3, 0x4f, 0xd3, 0x08, 0x5e, 0xc5, 0x41, 0x12, 0x45, 0x69, 0x52,
	0x5d, 0x2a, 0x15, 0x06, 0x9a, 0x83, 0x7a, 0x8a, 0x9d, 0x20, 0x11, 0x10, 0x39, 0x09, 0x6d, 0x03,
	0x45, 0x51, 0x80, 0x5d, 0x93, 0x2b, 0x79, 0x21, 0x92, 0xbb, 0xdd, 0x5d, 0x1a, 0x4e, 0x7f, 0x40,
	0x7f, 0x48, 0xff, 0x4b, 0xef, 0x6d, 0x91, 0x1e, 0x7a, 0xeb, 0xc7, 0xbd, 0x28, 0xfa, 0x0b, 0x8a,
	0x9d, 0x25, 0x15, 0xd9, 0x4a, 0x6c, 0xa0, 0x37, 0xe9, 0x99, 0xd9, 0x67, 0x77, 0x66, 0x9e, 0x19,
	0x0e, 0xec, 0x64, 0x9a, 0xc5, 0x23, 0x15, 0x07, 0x27, 0xd9, 0x4c, 0x8d, 0x52, 0xaa, 0x47, 0x52,
	0x84, 0x43, 0x21, 0xb9, 0xe6, 0x5e, 0x3d, 0xcd, 0x34, 0x49, 0xd9, 0xf9, 0x30, 0xa5, 0x7a, 0xa7,
	0x37, 0xe7, 0x7c, 0x1e, 0xd3, 0x11, 0x9a, 0x4e, 0xb2, 0xd9, 0x28, 0xa2, 0x2a, 0x94, 0x4c, 0x68,
	0x2e, 0xad, 0x7b, 0xff, 0xaf, 0x12, 0x80, 0x2f, 0xc2, 0x97, 0x42, 0x33, 0x9e, 0x2a, 0xef, 0x3e,
	0x34, 0x35, 0x4b, 0x28, 0xcf, 0x74, 0x90, 0x28, 0x1a, 0xaa, 0x6e, 0xa9, 0x57, 0x1a, 0xd4, 0xfc,
	0x46, 0x0e, 0x4e, 0x0d, 0xe6, 0xdd, 0x85, 0x7a, 0x42, 0xce, 0x03, 0x49, 0xb5, 0x64, 0x54, 0x75,
	0xcb, 0xe8, 0x02, 0x09, 0x39, 0xf7, 0x2d, 0xe2, 0x3d, 0x81, 0x5b, 0xf4, 0x5c, 0xf0, 0x94, 0xa6,
	0x9a, 0x91, 0x38, 0x38, 0x21, 0xe1, 0x82, 0xcf, 0x66, 0x41, 0x4e, 0xd2, 0xad, 0xf4, 0x4a, 0x03,
	0x67, 0x5c, 0xd5, 0x32, 0xa3, 0xfe, 0xcd, 0x15, 0xc7, 0x3d, 0xeb, 0x77, 0x64, 0xdd, 0xbc, 0xdb,
	0x00, 0x61, 0x9c, 0x29, 0x4d, 0x65, 0xc0, 0xa2, 0x6e, 0xb5, 0x57, 0x1a, 0x54, 0x7c, 0x37, 0x47,
	0x26, 0x91, 0xf7, 0x19, 0x6c, 0xd3, 0x73, 0x4d, 0x65, 0x4a, 0xe2, 0x40, 0x8a, 0x30, 0x48, 0xa8,
	0x3e, 0xe5, 0x51, 0xb7, 0x86, 0xe4, 0xb5, 0x19, 0x89, 0x15, 0xf5, 0xb7, 0x0a, 0x0f, 0x5f, 0x84,
	0x53, 0xb4, 0xf7, 0x7f, 0x29, 0xc3, 0x96, 0x2f, 0x42, 0x9f, 0x7e, 0x93, 0x51, 0xa5, 0xf7, 0x79,
	0xaa, 0xe9, 0xb9, 0xf6, 0x6e, 0x81, 0x9b, 0x29, 0x2a, 0x83, 0x2c, 0x63, 0x11, 0xc6, 0xdc, 0xf0,
	0x1d, 0x03, 0x1c, 0x67, 0x2c, 0x5a, 0x1a, 0x53, 0x92, 0x50, 0x8c, 0xd6, 0xb5, 0xc6, 0x03, 0x92,
	0x50, 0xef, 0xff, 0xb0, 0x89, 0x46, 0x26, 0x30, 0x2e, 0xd7, 0xdf, 0x30, 0x7f, 0x27, 0xc2, 0x7b,
	0x08, 0x6d, 0x34, 0x28, 0xaa, 0x14, 0xe3, 0x69, 0x11, 0x83, 0xeb, 0x37, 0x0d, 0x7c, 0x68, 0xd1,
	0x49, 0x64, 0xb2, 0xa9, 0x69, 0x4a, 0x52, 0x6d, 0x2f, 0xaf, 0xe1, 0xe5, 0x60, 0x21, 0xbc, 0xfe,
	0x01, 0xb4, 0x14, 0x0d, 0x33, 0xc9, 0xf4, 0x9b, 0x40, 0xf3, 0x05, 0x4d, 0xbb, 0x1b, 0x96, 0xa7,
	0x40, 0x8f, 0x0c, 0xe8, 0xdd, 0x83, 0x86, 0xa2, 0xf2, 0x8c, 0x85, 0xd4, 0x3e, 0x74, 0x13, 0x9d,
	0xea, 0x39, 0x86, 0x6f, 0xfd, 0x14, 0x3a, 0xea, 0x94, 0x67, 0x71, 0x14, 0x90, 0x4c, 0x9f, 0x72,
	0xc9, 0xbe, 0xa5, 0x5d, 0x67, 0x35, 0x5f, 0x6d, 0x6b, 0x7e, 0x5c, 0x58, 0xbd, 0x01, 0x74, 0x30,
	0x88, 0xb9, 0xe4, 0x99, 0xc0, 0x07, 0xaa, 0xae, 0xdb, 0xab, 0x0c, 0x1a, 0x7e, 0xcb, 0xe0, 0xcf,
	0x0c, 0x6c, 0x1e, 0xa9, 0xfa, 0xbb, 0xb0, 0x75, 0xc8, 0x33, 0x19, 0x52, 0x73, 0xb8, 0x48, 0xeb,
	0x6d, 0x00, 0x25, 0xd8, 0x6c, 0x46, 0x83, 0x4c, 0xb2, 0x3c, 0xaf, 0xae, 0x45, 0x8e, 0x25, 0xeb,
	0x7f, 0x05, 0xcd, 0x43, 0x2d, 0x29, 0x49, 0x0a, 0xff, 0x8f, 0xa0, 0xa5, 0x10, 0x08, 0x12, 0x35,
	0x0f, 0xd2, 0x2c, 0xc1, 0x33, 0x15, 0xbf, 0x61, 0xd1, 0xa9, 0x9a, 0x1f, 0x64, 0x89, 0xf7, 0x00,
	0xea, 0x4c, 0x05, 0x31, 0x51, 0x46, 0xa4, 0x73, 0xac, 0xc8, 0x32, 0x02, 0x97, 0xa9, 0x17, 0x44,
	0xe9, 0xa9, 0x9a, 0xf7, 0x7f, 0xa8, 0x42, 0xe7, 0x5d, 0xa5, 0x9f, 0x53, 0x12, 0x51, 0xe9, 0xdd,
	0x80, 0x0d, 0x23, 0x16, 0xac, 0x72, 0x79, 0x50, 0xf1, 0x6b, 0x52, 0x84, 0x93, 0xc8, 0xe8, 0xbe,
	0xe8, 0x91, 0x40, 0x99, 0xb4, 0x94, 0x7b, 0x65, 0xa3, 0xfb, 0x02, 0x3c, 0x34, 0xc9, 0xb8, 0x07,
	0x0d, 0x41, 0xde, 0xc4, 0x9c, 0x44, 0xd6, 0xa7, 0x82, 0xc2, 0xaf, 0xe7, 0x18, 0xba, 0x98, 0xd6,
	0x40, 0x9d, 0xd9, 0x1a, 0x54, 0x7b, 0xe5, 0x81, 0xeb, 0x83, 0x85, 0xb0, 0x04, 0x0f, 0xa1, 0xad,
	0x68, 0x1a, 0x61, 0x2f, 0x04, 0x19, 0xb6, 0x58, 0x0d, 0x1f, 0xd2, 0x34, 0xb0, 0x91, 0xfe, 0x31,
	0xf6, 0xd8, 0x03, 0x68, 0x45, 0x94, 0x44, 0x31, 0x4b, 0x0b, 0xb7, 0x0d, 0xcc, 0x44, 0xb3, 0x40,
	0xad, 0xdb, 0xc5, 0x1e, 0xd9, 0xbc, 0xdc, 0x23, 0xf7, 0xa0, 0x51, 0x98, 0x51, 0x5c, 0x0e, 0x56,
	0xa0, 0x9e, 0x63, 0xa8, 0xae, 0x67, 0xd0, 0x96, 0x36, 0x43, 0x41, 0x68, 0xab, 0xd0, 0x75, 0x7b,
	0xa5, 0x41, 0x7d, 0xf7, 0xce, 0x70, 0x65, 0x92, 0x0c, 0xd7, 0x5a, 0xc6, 0x6f, 0xc9, 0x8b, 0x2d,
	0xb4, 0x03, 0x4e, 0x78, 0x4a, 0xc3, 0x85, 0xca, 0x92, 0x2e, 0xf4, 0x4a, 0x83, 0xa6, 0xbf, 0xfc,
	0xbf, 0xa6, 0xcd, 0xfa, 0xba, 0x36, 0x0f, 0x60, 0x5b, 0xa1, 0x7e, 0x50, 0x9b, 0xcb, 0xb7, 0x34,
	0xde, 0xf3, 0x96, 0x35, 0x9d, 0xf9, 0x5b, 0x6a, 0x4d, 0x7a, 0xcf, 0xc1, 0x33, 0x85, 0xce, 0xe5,
	0x54, 0xd0, 0x35, 0x91, 0x6e, 0xe7, 0x22, 0xdd, 0xaa, 0x04, 0xfd, 0x8e, 0x14, 0xe1, 0x05, 0xa4,
	0xff, 0x6b, 0x25, 0x9f, 0x18, 0x4a, 0xf0, 0x54, 0xd1, 0xab, 0x85, 0xf4, 0x1a, 0xc0, 0x5e, 0x4b,
	0x74, 0x66, 0x47, 0x63, 0x6b, 0x77, 0xb0, 0x9e, 0xc9, 0x55, 0x2a, 0x83, 0x1c, 0xa2, 0xff, 0xd8,
	0x59, 0x1c, 0xf0, 0xa7, 0x52, 0x72, 0xe9, 0xbb, 0xb2, 0x00, 0xcd, 0xf8, 0x21, 0x42, 0x04, 0xd4,
	0xe0, 0xb9, 0xe6, 0x1c, 0x22, 0x04, 0xfa, 0x99, 0xcc, 0xa2, 0x21, 0x88, 0xa8, 0x26, 0x2c, 0xce,
	0x47, 0x4c, 0x1d, 0xb1, 0x27, 0x08, 0xad, 0x6b, 0xbb, 0x66, 0x67, 0xfa, 0x95, 0xda, 0xde, 0x58,
	0xd7, 0xf6, 0x6a, 0x81, 0x37, 0x2f, 0x15, 0xf8, 0xfd, 0xd9, 0x76, 0xfe, 0x43, 0xb6, 0x63, 0x70,
	0x97, 0xf9, 0xf0, 0x1a, 0xb0, 0xcc, 0x48, 0xe7, 0x7f, 0x5e, 0x07, 0x1a, 0x0b, 0x3b, 0xc5, 0x2d,
	0x52, 0xf2, 0x9a, 0xe0, 0x2e, 0x1e, 0xe7, 0xa9, 0xe8, 0x94, 0xf1, 0xef, 0x3e, 0x49, 0x43, 0x1a,
	0xd3, 0xa8, 0x53, 0xc1, 0xd3, 0xf9, 0xc7, 0xa4, 0x53, 0xf5, 0xb6, 0xa1, 0xbd, 0x38, 0x92, 0x24,
	0x55, 0x82, 0x4b, 0x6d, 0x4f, 0xd4, 0xfa, 0xff, 0x94, 0x61, 0xc7, 0x17, 0xe1, 0x1e, 0x4b, 0x89,
	0x7c, 0xf3, 0x82, 0xcf, 0x7d, 0x1a, 0x72, 0x19, 0x4d, 0xa9, 0x26, 0x11, 0xd1, 0xc4, 0xa4, 0x9e,
	0xa9, 0x20, 0x8c, 0x19, 0x4d, 0x35, 0x8e, 0x22, 0xc7, 0x77, 0x98, 0xda, 0xc7, 0xff, 0xde, 0x4d,
	0x70, 0x62, 0x1e, 0x92, 0xd8, 0x8c, 0xfe, 0x32, 0xe6, 0x63, 0x13, 0xff, 0x4f, 0x84, 0x69, 0x4b,
	0x6b, 0x32, 0x77, 0xe5, 0x35, 0x73, 0x11, 0x79, 0xc5, 0x25, 0x7e, 0x6d, 0x24, 0x4d, 0xb8, 0xa6,
	0xe6, 0x68, 0xd5, 0xa6, 0xd2, 0x02, 0x13, 0x61, 0x46, 0x48, 0x6e, 0xc4, 0xc3, 0xb6, 0x58, 0x60,
	0x21, 0x3c, 0xdd, 0x87, 0xa6, 0xa0, 0xa6, 0xe1, 0x55, 0x80, 0x94, 0x58, 0x2b, 0xc7, 0xaf, 0x1b,
	0x70, 0xa2, 0x5e, 0x18, 0xc8, 0xdb, 0x85, 0x1b, 0x44, 0xc4, 0x5c, 0x99, 0x52, 0xa4, 0x34, 0x34,
	0x1f, 0x77, 0x3b, 0x01, 0xec, 0x57, 0x61, 0x1b, 0x8d, 0xfb, 0x4b, 0x1b, 0x4e, 0x82, 0x8f, 0xa1,
	0x3d, 0x8b, 0x89, 0x3e, 0xc9, 0x66, 0xb3, 0xe2, 0x63, 0xe7, 0xa0, 0x77, 0xeb, 0x1d, 0x8c, 0xad,
	0xba, 0x8c, 0x8e, 0x89, 0xb3, 0x47, 0x38, 0x2d, 0xdc, 0x3c, 0xba, 0x89, 0x38, 0x7b, 0xb4, 0x12,
	0x00, 0xda, 0x01, 0xed, 0x50, 0xc4, 0x77, 0xf6, 0x68, 0x7c, 0x0c, 0x37, 0x22, 0x3a, 0x23, 0x59,
	0xac, 0x83, 0x0b, 0xcb, 0x86, 0x77, 0x77, 0x68, 0xf7, 0x95, 0x61, 0x21, 0xcd, 0xe1, 0xa1, 0x9d,
	0x10, 0xf9, 0x7a, 0xd2, 0xfd, 0xf1, 0x3b, 0x9b, 0xcb, 0xed, 0xfc, 0xfc, 0xd1, 0xca, 0x5a, 0x32,
	0x7e, 0x0d, 0x05, 0x1c, 0xac, 0xac, 0x27, 0xd7, 0x93, 0xfe, 0x94, 0x93, 0x6e, 0xe5, 0xa7, 0xa7,
	0xcb, 0x45, 0x66, 0x2c, 0xe0, 0x7e, 0x41, 0x79, 0xc5, 0x42, 0x73, 0xfd, 0x15, 0x3f, 0xe3, 0x15,
	0x8e, 0xdf, 0xcb, 0xd9, 0x9e, 0x7e, 0x68, 0xe9, 0x19, 0x3f, 0xbd, 0xb4, 0x80, 0x79, 0x77, 0xd6,
	0xb8, 0x6d, 0x0b, 0x14, 0xd4, 0xbf, 0xbd, 0xad, 0xac, 0xaf, 0x68, 0xe3, 0xc7, 0x17, 0x56, 0xb4,
	0x6b, 0x49, 0x7e, 0xcf, 0x49, 0x56, 0x96, 0xb8, 0xf1, 0xd7, 0x57, 0x2e, 0x71, 0xd7, 0x52, 0xfe,
	0xf1, 0xd6, 0x86, 0xfc, 0xe1, 0x05, 0x6f, 0xfc, 0xea, 0xbd, 0x1b, 0xdc, 0xb5, 0xcc, 0x7f, 0xe6,
	0xcc, 0xeb, 0xcb, 0xdd, 0xf8, 0x25, 0x78, 0x73, 0xc3, 0x74, 0x9d, 0xac, 0xa6, 0x54, 0x29, 0x32,
	0x5f, 0x96, 0xe7, 0xef, 0xef, 0xab, 0x18, 0x7e, 0xc7, 0x1c, 0x5e, 0xd5, 0xd4, 0xde, 0x17, 0xd0,
	0x0e, 0x79, 0xb2, 0x3a, 0xc0, 0xf6, 0x1c, 0x5f, 0x84, 0xaf, 0x0c, 0xd1, 0x97, 0x9f, 0xcf, 0x99,
	0x3e, 0xcd, 0x4e, 0x86, 0x34, 0x9d, 0x2f, 0x3d, 0x42, 0x9e, 0x8c, 0xf2, 0xdf, 0x23, 0xb3, 0xa5,
	0x7f, 0xa2, 0x62, 0x5c, 0xd2, 0x2f, 0x6f, 0xec, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xf6,
	0x8f, 0xda, 0xc4, 0x0b, 0x00, 0x00,
}
