// Code generated by protoc-gen-go. DO NOT EDIT.
// source: util/sl_bufs/misc/variable_map_exporter.proto

package misc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The type of the value, which determines which field(s) will be set.
type VariableMapExporterProto_Type int32

const (
	VariableMapExporterProto_kBoolType   VariableMapExporterProto_Type = 0
	VariableMapExporterProto_kCharType   VariableMapExporterProto_Type = 1
	VariableMapExporterProto_kIntType    VariableMapExporterProto_Type = 2
	VariableMapExporterProto_kUintType   VariableMapExporterProto_Type = 3
	VariableMapExporterProto_kFloatType  VariableMapExporterProto_Type = 4
	VariableMapExporterProto_kDoubleType VariableMapExporterProto_Type = 5
	VariableMapExporterProto_kStringType VariableMapExporterProto_Type = 6
	VariableMapExporterProto_kListType   VariableMapExporterProto_Type = 7
	VariableMapExporterProto_kSetType    VariableMapExporterProto_Type = 8
	VariableMapExporterProto_kMapType    VariableMapExporterProto_Type = 9
	VariableMapExporterProto_kTupleType  VariableMapExporterProto_Type = 10
)

var VariableMapExporterProto_Type_name = map[int32]string{
	0:  "kBoolType",
	1:  "kCharType",
	2:  "kIntType",
	3:  "kUintType",
	4:  "kFloatType",
	5:  "kDoubleType",
	6:  "kStringType",
	7:  "kListType",
	8:  "kSetType",
	9:  "kMapType",
	10: "kTupleType",
}

var VariableMapExporterProto_Type_value = map[string]int32{
	"kBoolType":   0,
	"kCharType":   1,
	"kIntType":    2,
	"kUintType":   3,
	"kFloatType":  4,
	"kDoubleType": 5,
	"kStringType": 6,
	"kListType":   7,
	"kSetType":    8,
	"kMapType":    9,
	"kTupleType":  10,
}

func (x VariableMapExporterProto_Type) Enum() *VariableMapExporterProto_Type {
	p := new(VariableMapExporterProto_Type)
	*p = x
	return p
}

func (x VariableMapExporterProto_Type) String() string {
	return proto.EnumName(VariableMapExporterProto_Type_name, int32(x))
}

func (x *VariableMapExporterProto_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VariableMapExporterProto_Type_value, data, "VariableMapExporterProto_Type")
	if err != nil {
		return err
	}
	*x = VariableMapExporterProto_Type(value)
	return nil
}

func (VariableMapExporterProto_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c26f0778ff651dc, []int{0, 0}
}

type VariableMapExporterProto struct {
	// Collection of exported variables. Every variable has a unique name.
	Variables            []*VariableMapExporterProto_Variable `protobuf:"bytes,1,rep,name=variables" json:"variables,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *VariableMapExporterProto) Reset()         { *m = VariableMapExporterProto{} }
func (m *VariableMapExporterProto) String() string { return proto.CompactTextString(m) }
func (*VariableMapExporterProto) ProtoMessage()    {}
func (*VariableMapExporterProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c26f0778ff651dc, []int{0}
}

func (m *VariableMapExporterProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariableMapExporterProto.Unmarshal(m, b)
}
func (m *VariableMapExporterProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariableMapExporterProto.Marshal(b, m, deterministic)
}
func (m *VariableMapExporterProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariableMapExporterProto.Merge(m, src)
}
func (m *VariableMapExporterProto) XXX_Size() int {
	return xxx_messageInfo_VariableMapExporterProto.Size(m)
}
func (m *VariableMapExporterProto) XXX_DiscardUnknown() {
	xxx_messageInfo_VariableMapExporterProto.DiscardUnknown(m)
}

var xxx_messageInfo_VariableMapExporterProto proto.InternalMessageInfo

func (m *VariableMapExporterProto) GetVariables() []*VariableMapExporterProto_Variable {
	if m != nil {
		return m.Variables
	}
	return nil
}

// A value for an exported variable. Container values (lists, sets, maps,
// and tuples) may contain sub-values. Every value contains a type that
// should be used to access specific fields within the proto.
type VariableMapExporterProto_Value struct {
	// The type of the value.
	Type *VariableMapExporterProto_Type `protobuf:"varint,1,req,name=type,enum=nutanix.misc.VariableMapExporterProto_Type" json:"type,omitempty"`
	// Boolean value, only set if type is 'kBoolType'.
	BoolValue *bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	// Character value, only set if type is 'kCharType'.
	CharValue *uint32 `protobuf:"varint,3,opt,name=char_value,json=charValue" json:"char_value,omitempty"`
	// Integer value, only set if type is 'kIntType'.
	IntValue *int64 `protobuf:"zigzag64,4,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	// Unsigned integer value, only set if type is 'kUintType'.
	UintValue *uint64 `protobuf:"varint,5,opt,name=uint_value,json=uintValue" json:"uint_value,omitempty"`
	// Float value, only set if type is 'kFloatType'.
	FloatValue *float32 `protobuf:"fixed32,6,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	// Double value, only set if type is 'kDoubleType'.
	DoubleValue *float64 `protobuf:"fixed64,7,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	// String value, only set if type is 'kStringType'.
	StringValue *string `protobuf:"bytes,8,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	// A collection of keys, only set if type is 'kMapType'. Every value is
	// guaranteed to have the same type. 'repeated_values' will have the same
	// size, and every index into 'repeated_keys' will correspond to the value
	// with the same index in 'repeated_values'.
	RepeatedKeys []*VariableMapExporterProto_Value `protobuf:"bytes,9,rep,name=repeated_keys,json=repeatedKeys" json:"repeated_keys,omitempty"`
	// A collection of keys, set if type is 'kListType', 'kSetType',
	// 'kMapType', or 'kTupleType'. Every value is guaranteed to have the same
	// type if this values type is *not* 'kTupleType'.
	RepeatedValues       []*VariableMapExporterProto_Value `protobuf:"bytes,10,rep,name=repeated_values,json=repeatedValues" json:"repeated_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *VariableMapExporterProto_Value) Reset()         { *m = VariableMapExporterProto_Value{} }
func (m *VariableMapExporterProto_Value) String() string { return proto.CompactTextString(m) }
func (*VariableMapExporterProto_Value) ProtoMessage()    {}
func (*VariableMapExporterProto_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c26f0778ff651dc, []int{0, 0}
}

func (m *VariableMapExporterProto_Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariableMapExporterProto_Value.Unmarshal(m, b)
}
func (m *VariableMapExporterProto_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariableMapExporterProto_Value.Marshal(b, m, deterministic)
}
func (m *VariableMapExporterProto_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariableMapExporterProto_Value.Merge(m, src)
}
func (m *VariableMapExporterProto_Value) XXX_Size() int {
	return xxx_messageInfo_VariableMapExporterProto_Value.Size(m)
}
func (m *VariableMapExporterProto_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_VariableMapExporterProto_Value.DiscardUnknown(m)
}

var xxx_messageInfo_VariableMapExporterProto_Value proto.InternalMessageInfo

func (m *VariableMapExporterProto_Value) GetType() VariableMapExporterProto_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return VariableMapExporterProto_kBoolType
}

func (m *VariableMapExporterProto_Value) GetBoolValue() bool {
	if m != nil && m.BoolValue != nil {
		return *m.BoolValue
	}
	return false
}

func (m *VariableMapExporterProto_Value) GetCharValue() uint32 {
	if m != nil && m.CharValue != nil {
		return *m.CharValue
	}
	return 0
}

func (m *VariableMapExporterProto_Value) GetIntValue() int64 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *VariableMapExporterProto_Value) GetUintValue() uint64 {
	if m != nil && m.UintValue != nil {
		return *m.UintValue
	}
	return 0
}

func (m *VariableMapExporterProto_Value) GetFloatValue() float32 {
	if m != nil && m.FloatValue != nil {
		return *m.FloatValue
	}
	return 0
}

func (m *VariableMapExporterProto_Value) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *VariableMapExporterProto_Value) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *VariableMapExporterProto_Value) GetRepeatedKeys() []*VariableMapExporterProto_Value {
	if m != nil {
		return m.RepeatedKeys
	}
	return nil
}

func (m *VariableMapExporterProto_Value) GetRepeatedValues() []*VariableMapExporterProto_Value {
	if m != nil {
		return m.RepeatedValues
	}
	return nil
}

// Represents a single exported variable.
type VariableMapExporterProto_Variable struct {
	// The name assigned to the variable.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The variable's value.
	Value *VariableMapExporterProto_Value `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	// Comment about the variable.
	Comment              *string  `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VariableMapExporterProto_Variable) Reset()         { *m = VariableMapExporterProto_Variable{} }
func (m *VariableMapExporterProto_Variable) String() string { return proto.CompactTextString(m) }
func (*VariableMapExporterProto_Variable) ProtoMessage()    {}
func (*VariableMapExporterProto_Variable) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c26f0778ff651dc, []int{0, 1}
}

func (m *VariableMapExporterProto_Variable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariableMapExporterProto_Variable.Unmarshal(m, b)
}
func (m *VariableMapExporterProto_Variable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariableMapExporterProto_Variable.Marshal(b, m, deterministic)
}
func (m *VariableMapExporterProto_Variable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariableMapExporterProto_Variable.Merge(m, src)
}
func (m *VariableMapExporterProto_Variable) XXX_Size() int {
	return xxx_messageInfo_VariableMapExporterProto_Variable.Size(m)
}
func (m *VariableMapExporterProto_Variable) XXX_DiscardUnknown() {
	xxx_messageInfo_VariableMapExporterProto_Variable.DiscardUnknown(m)
}

var xxx_messageInfo_VariableMapExporterProto_Variable proto.InternalMessageInfo

func (m *VariableMapExporterProto_Variable) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VariableMapExporterProto_Variable) GetValue() *VariableMapExporterProto_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *VariableMapExporterProto_Variable) GetComment() string {
	if m != nil && m.Comment != nil {
		return *m.Comment
	}
	return ""
}

func init() {
	proto.RegisterEnum("nutanix.misc.VariableMapExporterProto_Type", VariableMapExporterProto_Type_name, VariableMapExporterProto_Type_value)
	proto.RegisterType((*VariableMapExporterProto)(nil), "nutanix.misc.VariableMapExporterProto")
	proto.RegisterType((*VariableMapExporterProto_Value)(nil), "nutanix.misc.VariableMapExporterProto.Value")
	proto.RegisterType((*VariableMapExporterProto_Variable)(nil), "nutanix.misc.VariableMapExporterProto.Variable")
}

func init() {
	proto.RegisterFile("util/sl_bufs/misc/variable_map_exporter.proto", fileDescriptor_5c26f0778ff651dc)
}

var fileDescriptor_5c26f0778ff651dc = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xdd, 0x8a, 0xd3, 0x40,
	0x14, 0x76, 0xda, 0x74, 0x9b, 0x39, 0xfd, 0x59, 0x99, 0xab, 0xb0, 0xb2, 0x18, 0xf7, 0x2a, 0xa0,
	0xdb, 0xc0, 0x5e, 0x8b, 0x42, 0xfd, 0x01, 0xd1, 0x82, 0xce, 0xfe, 0x5c, 0x78, 0x53, 0xa6, 0xdd,
	0xd9, 0x76, 0x68, 0x92, 0x09, 0x99, 0x99, 0x65, 0x0b, 0x3e, 0x93, 0x2f, 0xe3, 0x7b, 0xf8, 0x0c,
	0x92, 0x33, 0x49, 0x56, 0x10, 0x61, 0xf5, 0x2e, 0xdf, 0xef, 0xc0, 0x39, 0x39, 0x70, 0xea, 0xac,
	0xca, 0x52, 0x93, 0x2d, 0x57, 0xee, 0xc6, 0xa4, 0xb9, 0x32, 0xeb, 0xf4, 0x56, 0x54, 0x4a, 0xac,
	0x32, 0xb9, 0xcc, 0x45, 0xb9, 0x94, 0x77, 0xa5, 0xae, 0xac, 0xac, 0x66, 0x65, 0xa5, 0xad, 0x66,
	0xe3, 0xc2, 0x59, 0x51, 0xa8, 0xbb, 0x59, 0xed, 0x3c, 0xf9, 0x79, 0x00, 0xd1, 0x55, 0xe3, 0x5e,
	0x88, 0xf2, 0x5d, 0xe3, 0xfd, 0x8c, 0xd6, 0x05, 0xd0, 0xb6, 0xc9, 0x44, 0x24, 0xee, 0x27, 0xa3,
	0xb3, 0x74, 0xf6, 0x7b, 0x7c, 0xf6, 0xb7, 0x68, 0x27, 0xf0, 0xfb, 0x86, 0xa3, 0x1f, 0x7d, 0x18,
	0x5c, 0x89, 0xcc, 0x49, 0xf6, 0x1a, 0x02, 0xbb, 0x2f, 0x65, 0x44, 0xe2, 0x5e, 0x32, 0x3d, 0x7b,
	0xfe, 0xc0, 0xce, 0x8b, 0x7d, 0x29, 0x39, 0x06, 0xd9, 0x31, 0xc0, 0x4a, 0xeb, 0x6c, 0x79, 0x5b,
	0xd7, 0x45, 0xbd, 0x98, 0x24, 0x21, 0xa7, 0x35, 0xe3, 0xfb, 0x8f, 0x01, 0xd6, 0x5b, 0x51, 0x35,
	0x72, 0x3f, 0x26, 0xc9, 0x84, 0xd3, 0x9a, 0xf1, 0xf2, 0x13, 0xa0, 0xaa, 0xb0, 0x8d, 0x1a, 0xc4,
	0x24, 0x61, 0x3c, 0x54, 0x85, 0xed, 0xb2, 0xee, 0x5e, 0x1d, 0xc4, 0x24, 0x09, 0x38, 0x75, 0x9d,
	0xfc, 0x14, 0x46, 0x37, 0x99, 0x16, 0xad, 0x7e, 0x10, 0x93, 0xa4, 0xc7, 0x01, 0x29, 0x6f, 0x78,
	0x06, 0xe3, 0x6b, 0xed, 0xea, 0xe1, 0x7b, 0xc7, 0x30, 0x26, 0x09, 0xe1, 0x23, 0xcf, 0x75, 0x16,
	0x63, 0x2b, 0x55, 0x6c, 0x1a, 0x4b, 0x18, 0x93, 0x84, 0xf2, 0x91, 0xe7, 0xbc, 0xe5, 0x0b, 0x4c,
	0x2a, 0x59, 0x4a, 0x61, 0xe5, 0xf5, 0x72, 0x27, 0xf7, 0x26, 0xa2, 0x38, 0xfe, 0x17, 0x0f, 0x1e,
	0x7f, 0xe6, 0x24, 0x1f, 0xb7, 0x15, 0x1f, 0xe5, 0xde, 0xb0, 0x4b, 0x38, 0xec, 0x2a, 0xf1, 0x5d,
	0x13, 0xc1, 0x7f, 0x94, 0x4e, 0xdb, 0x12, 0x84, 0xe6, 0xe8, 0x1b, 0x84, 0x6d, 0x82, 0x31, 0x08,
	0x0a, 0x91, 0xfb, 0xbd, 0x52, 0x8e, 0xdf, 0x6c, 0x0e, 0x83, 0x76, 0x4b, 0xbd, 0x7f, 0x7e, 0xcc,
	0x47, 0x59, 0x04, 0xc3, 0xb5, 0xce, 0x73, 0x59, 0x58, 0x5c, 0x26, 0xe5, 0x2d, 0x3c, 0xf9, 0x4e,
	0x20, 0xa8, 0xff, 0x0b, 0x36, 0x01, 0xba, 0x9b, 0x6b, 0x9d, 0xd5, 0xe0, 0xf1, 0x23, 0x84, 0x6f,
	0xb6, 0xa2, 0x42, 0x48, 0xd8, 0x18, 0xc2, 0xdd, 0x87, 0xc2, 0x22, 0xea, 0xa1, 0x78, 0xa9, 0x1a,
	0xd8, 0x67, 0x53, 0x80, 0xdd, 0xfb, 0x7a, 0x81, 0x88, 0x03, 0x76, 0x08, 0xa3, 0xdd, 0x5b, 0x5c,
	0x17, 0x12, 0x03, 0x24, 0xce, 0x71, 0x39, 0x48, 0x1c, 0x60, 0xc1, 0x27, 0x65, 0x7c, 0x60, 0x88,
	0xed, 0xe7, 0xd2, 0xa3, 0x10, 0xd1, 0x42, 0x94, 0x88, 0x28, 0x96, 0x5f, 0xb8, 0xb2, 0xe9, 0x82,
	0xf9, 0xab, 0xaf, 0x2f, 0x37, 0xca, 0x6e, 0xdd, 0x6a, 0x26, 0x8b, 0x4d, 0x37, 0x8b, 0xb5, 0xce,
	0xd3, 0xe6, 0x3b, 0xad, 0xcf, 0xf9, 0xd4, 0x64, 0x78, 0xcd, 0x7f, 0x9c, 0xf6, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x4c, 0xb0, 0x88, 0x4e, 0xee, 0x03, 0x00, 0x00,
}
