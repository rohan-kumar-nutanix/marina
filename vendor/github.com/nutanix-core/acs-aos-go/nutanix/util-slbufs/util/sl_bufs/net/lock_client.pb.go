// Code generated by protoc-gen-go. DO NOT EDIT.
// source: util/sl_bufs/net/lock_client.proto

package net

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type of client sending the request.
type LockClientIdentifier_ClientType int32

const (
	// iSCSI client.
	LockClientIdentifier_kIscsi LockClientIdentifier_ClientType = 0
)

var LockClientIdentifier_ClientType_name = map[int32]string{
	0: "kIscsi",
}

var LockClientIdentifier_ClientType_value = map[string]int32{
	"kIscsi": 0,
}

func (x LockClientIdentifier_ClientType) Enum() *LockClientIdentifier_ClientType {
	p := new(LockClientIdentifier_ClientType)
	*p = x
	return p
}

func (x LockClientIdentifier_ClientType) String() string {
	return proto.EnumName(LockClientIdentifier_ClientType_name, int32(x))
}

func (x *LockClientIdentifier_ClientType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LockClientIdentifier_ClientType_value, data, "LockClientIdentifier_ClientType")
	if err != nil {
		return err
	}
	*x = LockClientIdentifier_ClientType(value)
	return nil
}

func (LockClientIdentifier_ClientType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1ddb1cbe6efb136, []int{1, 0}
}

type IscsiLockClientIdentifier struct {
	// Required. Specifies the worldwide unique name of the initiator.
	InitiatorName *string `protobuf:"bytes,1,opt,name=initiator_name,json=initiatorName" json:"initiator_name,omitempty"`
	// Required. Initiator part of the Session Identifier.
	Isid *uint64 `protobuf:"varint,2,opt,name=isid" json:"isid,omitempty"`
	// Required. Specifies the worldwide unique name of the target.
	TargetName *string `protobuf:"bytes,3,opt,name=target_name,json=targetName" json:"target_name,omitempty"`
	// Required. Identifies a Portal Group within an iSCSI Node. This field plus
	// the three above fields is enough to specify an I_T nexus.
	PortalGroupTag *uint32 `protobuf:"varint,4,opt,name=portal_group_tag,json=portalGroupTag" json:"portal_group_tag,omitempty"`
	// Required. Key registered by the application client for the above I_T
	// nexus with the device server. It is possible for multiple I_T nexuses to
	// register the same key.
	ReservationKey       *int64   `protobuf:"varint,5,opt,name=reservation_key,json=reservationKey" json:"reservation_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IscsiLockClientIdentifier) Reset()         { *m = IscsiLockClientIdentifier{} }
func (m *IscsiLockClientIdentifier) String() string { return proto.CompactTextString(m) }
func (*IscsiLockClientIdentifier) ProtoMessage()    {}
func (*IscsiLockClientIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ddb1cbe6efb136, []int{0}
}

func (m *IscsiLockClientIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IscsiLockClientIdentifier.Unmarshal(m, b)
}
func (m *IscsiLockClientIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IscsiLockClientIdentifier.Marshal(b, m, deterministic)
}
func (m *IscsiLockClientIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscsiLockClientIdentifier.Merge(m, src)
}
func (m *IscsiLockClientIdentifier) XXX_Size() int {
	return xxx_messageInfo_IscsiLockClientIdentifier.Size(m)
}
func (m *IscsiLockClientIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_IscsiLockClientIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_IscsiLockClientIdentifier proto.InternalMessageInfo

func (m *IscsiLockClientIdentifier) GetInitiatorName() string {
	if m != nil && m.InitiatorName != nil {
		return *m.InitiatorName
	}
	return ""
}

func (m *IscsiLockClientIdentifier) GetIsid() uint64 {
	if m != nil && m.Isid != nil {
		return *m.Isid
	}
	return 0
}

func (m *IscsiLockClientIdentifier) GetTargetName() string {
	if m != nil && m.TargetName != nil {
		return *m.TargetName
	}
	return ""
}

func (m *IscsiLockClientIdentifier) GetPortalGroupTag() uint32 {
	if m != nil && m.PortalGroupTag != nil {
		return *m.PortalGroupTag
	}
	return 0
}

func (m *IscsiLockClientIdentifier) GetReservationKey() int64 {
	if m != nil && m.ReservationKey != nil {
		return *m.ReservationKey
	}
	return 0
}

// Identifier of the client sending the request. This identifier should be used
// in conjunction with the lock manager to determine whether the client is
// actually able to execute the request.
type LockClientIdentifier struct {
	// Required. Type of client to identify the locking protocol being used.
	ClientType *LockClientIdentifier_ClientType `protobuf:"varint,1,opt,name=client_type,json=clientType,enum=nutanix.net.LockClientIdentifier_ClientType" json:"client_type,omitempty"`
	// Optional. If client_type == kIscsi, this field must be present.
	IscsiClient          *IscsiLockClientIdentifier `protobuf:"bytes,2,opt,name=iscsi_client,json=iscsiClient" json:"iscsi_client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LockClientIdentifier) Reset()         { *m = LockClientIdentifier{} }
func (m *LockClientIdentifier) String() string { return proto.CompactTextString(m) }
func (*LockClientIdentifier) ProtoMessage()    {}
func (*LockClientIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ddb1cbe6efb136, []int{1}
}

func (m *LockClientIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockClientIdentifier.Unmarshal(m, b)
}
func (m *LockClientIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockClientIdentifier.Marshal(b, m, deterministic)
}
func (m *LockClientIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockClientIdentifier.Merge(m, src)
}
func (m *LockClientIdentifier) XXX_Size() int {
	return xxx_messageInfo_LockClientIdentifier.Size(m)
}
func (m *LockClientIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_LockClientIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_LockClientIdentifier proto.InternalMessageInfo

func (m *LockClientIdentifier) GetClientType() LockClientIdentifier_ClientType {
	if m != nil && m.ClientType != nil {
		return *m.ClientType
	}
	return LockClientIdentifier_kIscsi
}

func (m *LockClientIdentifier) GetIscsiClient() *IscsiLockClientIdentifier {
	if m != nil {
		return m.IscsiClient
	}
	return nil
}

func init() {
	proto.RegisterEnum("nutanix.net.LockClientIdentifier_ClientType", LockClientIdentifier_ClientType_name, LockClientIdentifier_ClientType_value)
	proto.RegisterType((*IscsiLockClientIdentifier)(nil), "nutanix.net.IscsiLockClientIdentifier")
	proto.RegisterType((*LockClientIdentifier)(nil), "nutanix.net.LockClientIdentifier")
}

func init() { proto.RegisterFile("util/sl_bufs/net/lock_client.proto", fileDescriptor_d1ddb1cbe6efb136) }

var fileDescriptor_d1ddb1cbe6efb136 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x4b, 0xeb, 0x40,
	0x14, 0xc5, 0x5f, 0x5e, 0xfb, 0x1e, 0xbc, 0x9b, 0xd7, 0xb4, 0x0c, 0x2e, 0xe2, 0xca, 0x50, 0x50,
	0xb3, 0xd0, 0x04, 0xba, 0x75, 0x57, 0x17, 0x52, 0xfc, 0x83, 0x84, 0xae, 0xdc, 0x0c, 0xd3, 0x74,
	0x1a, 0x2f, 0x49, 0x66, 0xc2, 0xe4, 0x46, 0xcc, 0x57, 0xf4, 0x53, 0x49, 0x26, 0xa5, 0xad, 0x52,
	0x77, 0x97, 0x1f, 0xf7, 0xdc, 0xe1, 0x9c, 0x39, 0x30, 0x6d, 0x08, 0x8b, 0xb8, 0x2e, 0xf8, 0xaa,
	0xd9, 0xd4, 0xb1, 0x92, 0x14, 0x17, 0x3a, 0xcd, 0x79, 0x5a, 0xa0, 0x54, 0x14, 0x55, 0x46, 0x93,
	0x66, 0xae, 0x6a, 0x48, 0x28, 0x7c, 0x8f, 0x94, 0xa4, 0xe9, 0x87, 0x03, 0xa7, 0x8b, 0x3a, 0xad,
	0xf1, 0x41, 0xa7, 0xf9, 0xad, 0x5d, 0x5b, 0xac, 0xa5, 0x22, 0xdc, 0xa0, 0x34, 0xec, 0x1c, 0x3c,
	0x54, 0x48, 0x28, 0x48, 0x1b, 0xae, 0x44, 0x29, 0x7d, 0x27, 0x70, 0xc2, 0x7f, 0xc9, 0x68, 0x47,
	0x9f, 0x44, 0x29, 0x19, 0x83, 0x21, 0xd6, 0xb8, 0xf6, 0x7f, 0x07, 0x4e, 0x38, 0x4c, 0xec, 0xcc,
	0xce, 0xc0, 0x25, 0x61, 0x32, 0x49, 0xbd, 0x6e, 0x60, 0x75, 0xd0, 0x23, 0x2b, 0x0a, 0x61, 0x52,
	0x69, 0x43, 0xa2, 0xe0, 0x99, 0xd1, 0x4d, 0xc5, 0x49, 0x64, 0xfe, 0x30, 0x70, 0xc2, 0x51, 0xe2,
	0xf5, 0xfc, 0xae, 0xc3, 0x4b, 0x91, 0xb1, 0x4b, 0x18, 0x1b, 0x59, 0x4b, 0xf3, 0x26, 0x08, 0xb5,
	0xe2, 0xb9, 0x6c, 0xfd, 0x3f, 0x81, 0x13, 0x0e, 0x12, 0xef, 0x00, 0xdf, 0xcb, 0xb6, 0x33, 0x73,
	0x72, 0xd4, 0xc7, 0x23, 0xb8, 0x7d, 0x04, 0x9c, 0xda, 0xaa, 0x37, 0xe1, 0xcd, 0xae, 0xa2, 0x83,
	0x20, 0xa2, 0x63, 0xba, 0xa8, 0x07, 0xcb, 0xb6, 0x92, 0x09, 0xa4, 0xbb, 0x99, 0x2d, 0xe0, 0x3f,
	0x76, 0x99, 0x6d, 0x73, 0xb5, 0xbe, 0xdd, 0xd9, 0xc5, 0x97, 0x7b, 0x3f, 0x86, 0x9a, 0xb8, 0x56,
	0xdb, 0xe3, 0xa9, 0x0f, 0xb0, 0x7f, 0x84, 0x01, 0xfc, 0xcd, 0xad, 0x70, 0xf2, 0x6b, 0xce, 0x61,
	0x9c, 0xea, 0xf2, 0xf0, 0xe6, 0x7c, 0xbc, 0xbf, 0xf7, 0xdc, 0x7d, 0xe5, 0xcb, 0x4d, 0x86, 0xf4,
	0xda, 0xac, 0x22, 0xa9, 0xb2, 0xdd, 0x62, 0xaa, 0xcb, 0x78, 0x3b, 0xc7, 0x5d, 0x1b, 0xae, 0xeb,
	0xc2, 0x96, 0xe1, 0x7b, 0x33, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x80, 0x92, 0xab, 0x67, 0x2c,
	0x02, 0x00, 0x00,
}
