// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stats/stats.proto

package stats

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/net"
	math "math"
)

import (
	"errors"
	util_net "github.com/nutanix-core/acs-aos-go/nutanix/util-go/net"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServiceAttributes_ServicePorts int32

const (
	ServiceAttributes_kStatsAggregatorPort ServiceAttributes_ServicePorts = 2023
)

var ServiceAttributes_ServicePorts_name = map[int32]string{
	2023: "kStatsAggregatorPort",
}

var ServiceAttributes_ServicePorts_value = map[string]int32{
	"kStatsAggregatorPort": 2023,
}

func (x ServiceAttributes_ServicePorts) Enum() *ServiceAttributes_ServicePorts {
	p := new(ServiceAttributes_ServicePorts)
	*p = x
	return p
}

func (x ServiceAttributes_ServicePorts) String() string {
	return proto.EnumName(ServiceAttributes_ServicePorts_name, int32(x))
}

func (x *ServiceAttributes_ServicePorts) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServiceAttributes_ServicePorts_value, data, "ServiceAttributes_ServicePorts")
	if err != nil {
		return err
	}
	*x = ServiceAttributes_ServicePorts(value)
	return nil
}

func (ServiceAttributes_ServicePorts) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{14, 0}
}

// Stat maintained for the oplog directory on every SVM. Oplog data for
// multiple vdisks is maintained in this directory.
type OplogUsageStatProto struct {
	// Total current usage in bytes in the oplog directory.
	TotalUsage *int64 `protobuf:"varint,1,opt,name=total_usage,json=totalUsage" json:"total_usage,omitempty"`
	// Usage as reported by statfs. This may differ from total_usage as the
	// statfs usage also accounts for non-oplog data on the corresponding
	// disk. For example, if oplogs and zookeeper share a disk, the statfs usage
	// would also include the usage by zookeeper.
	StatfsUsage          *int64   `protobuf:"varint,2,opt,name=statfs_usage,json=statfsUsage" json:"statfs_usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OplogUsageStatProto) Reset()         { *m = OplogUsageStatProto{} }
func (m *OplogUsageStatProto) String() string { return proto.CompactTextString(m) }
func (*OplogUsageStatProto) ProtoMessage()    {}
func (*OplogUsageStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{0}
}

func (m *OplogUsageStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OplogUsageStatProto.Unmarshal(m, b)
}
func (m *OplogUsageStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OplogUsageStatProto.Marshal(b, m, deterministic)
}
func (m *OplogUsageStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OplogUsageStatProto.Merge(m, src)
}
func (m *OplogUsageStatProto) XXX_Size() int {
	return xxx_messageInfo_OplogUsageStatProto.Size(m)
}
func (m *OplogUsageStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_OplogUsageStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_OplogUsageStatProto proto.InternalMessageInfo

func (m *OplogUsageStatProto) GetTotalUsage() int64 {
	if m != nil && m.TotalUsage != nil {
		return *m.TotalUsage
	}
	return 0
}

func (m *OplogUsageStatProto) GetStatfsUsage() int64 {
	if m != nil && m.StatfsUsage != nil {
		return *m.StatfsUsage
	}
	return 0
}

// Stat maintained for lws store on every disk.
type LWSUsageStatProto struct {
	// Total current usage in bytes of lws store.
	TotalUsage *int64 `protobuf:"varint,1,opt,name=total_usage,json=totalUsage" json:"total_usage,omitempty"`
	// Usage as reported by statfs. This may differ from total_usage as the
	// statfs usage also accounts for non-LWS data on the corresponding
	// disk. For example, if LWSes and zookeeper share a disk, the statfs usage
	// would also include the usage by zookeeper.
	StatfsUsage *int64 `protobuf:"varint,2,opt,name=statfs_usage,json=statfsUsage" json:"statfs_usage,omitempty"`
	// Portion of 'total_usage' that is currently shared with the oplog store.
	SharedUsage          *int64   `protobuf:"varint,3,opt,name=shared_usage,json=sharedUsage" json:"shared_usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LWSUsageStatProto) Reset()         { *m = LWSUsageStatProto{} }
func (m *LWSUsageStatProto) String() string { return proto.CompactTextString(m) }
func (*LWSUsageStatProto) ProtoMessage()    {}
func (*LWSUsageStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{1}
}

func (m *LWSUsageStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LWSUsageStatProto.Unmarshal(m, b)
}
func (m *LWSUsageStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LWSUsageStatProto.Marshal(b, m, deterministic)
}
func (m *LWSUsageStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LWSUsageStatProto.Merge(m, src)
}
func (m *LWSUsageStatProto) XXX_Size() int {
	return xxx_messageInfo_LWSUsageStatProto.Size(m)
}
func (m *LWSUsageStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_LWSUsageStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_LWSUsageStatProto proto.InternalMessageInfo

func (m *LWSUsageStatProto) GetTotalUsage() int64 {
	if m != nil && m.TotalUsage != nil {
		return *m.TotalUsage
	}
	return 0
}

func (m *LWSUsageStatProto) GetStatfsUsage() int64 {
	if m != nil && m.StatfsUsage != nil {
		return *m.StatfsUsage
	}
	return 0
}

func (m *LWSUsageStatProto) GetSharedUsage() int64 {
	if m != nil && m.SharedUsage != nil {
		return *m.SharedUsage
	}
	return 0
}

// Stat maintained for every disk.
type DiskUsageStatProto struct {
	// Total current usage in bytes on this disk. Note that this usage may not
	// equal the sum total of all container usages and the garbage. This is
	// specially true of total_usage.transformed - for each extent group, the
	// latter is known to extent store, but the rest of the metadata may not be
	// known as that sits in Medusa.
	TotalUsage *DiskUsageStatProto_Usage `protobuf:"bytes,1,opt,name=total_usage,json=totalUsage" json:"total_usage,omitempty"`
	// Total disk usage as reported by statfs. This may differ from total_usage
	// as the latter is computed by the extent store by summing up the sizes of
	// the various extent groups and may be off at times. It would also differ
	// from the usage reported by the extent store in case the disk directory
	// managed by the extent store is not the root of the filesystem on this
	// disk.
	StatfsUsage *int64 `protobuf:"varint,2,opt,name=statfs_usage,json=statfsUsage" json:"statfs_usage,omitempty"`
	// The list of containers that have bytes on this disk.
	Containers []int64 `protobuf:"varint,3,rep,name=containers" json:"containers,omitempty"`
	// Usage for each of the above containers on this disk. The unshared usage
	// corresponds to those bytes belonging to extents that are not deduped. The
	// deduped usage belongs to deduplicated extents. The container garbage
	// corresponds to the sum total of the sizes of all the extent groups that
	// are owned by this container minus the sum total of live extents in those
	// extent groups.
	ContainerUnsharedUsage []*DiskUsageStatProto_Usage `protobuf:"bytes,4,rep,name=container_unshared_usage,json=containerUnsharedUsage" json:"container_unshared_usage,omitempty"`
	ContainerDedupedUsage  []*DiskUsageStatProto_Usage `protobuf:"bytes,5,rep,name=container_deduped_usage,json=containerDedupedUsage" json:"container_deduped_usage,omitempty"`
	ContainerGarbage       []*DiskUsageStatProto_Usage `protobuf:"bytes,6,rep,name=container_garbage,json=containerGarbage" json:"container_garbage,omitempty"`
	// Garbage data on this disk. This is the sum total of all the extent group
	// sizes minus the sum total of all the live extents kept on this disk.
	Garbage *DiskUsageStatProto_Usage `protobuf:"bytes,8,opt,name=garbage" json:"garbage,omitempty"`
	// The number of written bytes for which fingerprints are added.
	FingerprintAddedBytes *int64 `protobuf:"varint,9,opt,name=fingerprint_added_bytes,json=fingerprintAddedBytes" json:"fingerprint_added_bytes,omitempty"`
	// The number of written bytes for which fingerprints are cleared.
	FingerprintClearedBytes *int64 `protobuf:"varint,10,opt,name=fingerprint_cleared_bytes,json=fingerprintClearedBytes" json:"fingerprint_cleared_bytes,omitempty"`
	// The number of bytes for erasure code parity for each of the
	// above containers on this disk.
	ContainerEcParity []*DiskUsageStatProto_Usage `protobuf:"bytes,11,rep,name=container_ec_parity,json=containerEcParity" json:"container_ec_parity,omitempty"`
	// Total Metadata usage on this disk.
	MetadataUsage        []*DiskUsageStatProto_MetadataUsage `protobuf:"bytes,12,rep,name=metadata_usage,json=metadataUsage" json:"metadata_usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *DiskUsageStatProto) Reset()         { *m = DiskUsageStatProto{} }
func (m *DiskUsageStatProto) String() string { return proto.CompactTextString(m) }
func (*DiskUsageStatProto) ProtoMessage()    {}
func (*DiskUsageStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{2}
}

func (m *DiskUsageStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiskUsageStatProto.Unmarshal(m, b)
}
func (m *DiskUsageStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiskUsageStatProto.Marshal(b, m, deterministic)
}
func (m *DiskUsageStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskUsageStatProto.Merge(m, src)
}
func (m *DiskUsageStatProto) XXX_Size() int {
	return xxx_messageInfo_DiskUsageStatProto.Size(m)
}
func (m *DiskUsageStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskUsageStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_DiskUsageStatProto proto.InternalMessageInfo

func (m *DiskUsageStatProto) GetTotalUsage() *DiskUsageStatProto_Usage {
	if m != nil {
		return m.TotalUsage
	}
	return nil
}

func (m *DiskUsageStatProto) GetStatfsUsage() int64 {
	if m != nil && m.StatfsUsage != nil {
		return *m.StatfsUsage
	}
	return 0
}

func (m *DiskUsageStatProto) GetContainers() []int64 {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *DiskUsageStatProto) GetContainerUnsharedUsage() []*DiskUsageStatProto_Usage {
	if m != nil {
		return m.ContainerUnsharedUsage
	}
	return nil
}

func (m *DiskUsageStatProto) GetContainerDedupedUsage() []*DiskUsageStatProto_Usage {
	if m != nil {
		return m.ContainerDedupedUsage
	}
	return nil
}

func (m *DiskUsageStatProto) GetContainerGarbage() []*DiskUsageStatProto_Usage {
	if m != nil {
		return m.ContainerGarbage
	}
	return nil
}

func (m *DiskUsageStatProto) GetGarbage() *DiskUsageStatProto_Usage {
	if m != nil {
		return m.Garbage
	}
	return nil
}

func (m *DiskUsageStatProto) GetFingerprintAddedBytes() int64 {
	if m != nil && m.FingerprintAddedBytes != nil {
		return *m.FingerprintAddedBytes
	}
	return 0
}

func (m *DiskUsageStatProto) GetFingerprintClearedBytes() int64 {
	if m != nil && m.FingerprintClearedBytes != nil {
		return *m.FingerprintClearedBytes
	}
	return 0
}

func (m *DiskUsageStatProto) GetContainerEcParity() []*DiskUsageStatProto_Usage {
	if m != nil {
		return m.ContainerEcParity
	}
	return nil
}

func (m *DiskUsageStatProto) GetMetadataUsage() []*DiskUsageStatProto_MetadataUsage {
	if m != nil {
		return m.MetadataUsage
	}
	return nil
}

type DiskUsageStatProto_Usage struct {
	// Transformed usage is bytes after transformation (like compression,
	// encryption etc).
	Transformed          *int64   `protobuf:"varint,1,opt,name=transformed" json:"transformed,omitempty"`
	Untransformed        *int64   `protobuf:"varint,2,opt,name=untransformed" json:"untransformed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiskUsageStatProto_Usage) Reset()         { *m = DiskUsageStatProto_Usage{} }
func (m *DiskUsageStatProto_Usage) String() string { return proto.CompactTextString(m) }
func (*DiskUsageStatProto_Usage) ProtoMessage()    {}
func (*DiskUsageStatProto_Usage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{2, 0}
}

func (m *DiskUsageStatProto_Usage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiskUsageStatProto_Usage.Unmarshal(m, b)
}
func (m *DiskUsageStatProto_Usage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiskUsageStatProto_Usage.Marshal(b, m, deterministic)
}
func (m *DiskUsageStatProto_Usage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskUsageStatProto_Usage.Merge(m, src)
}
func (m *DiskUsageStatProto_Usage) XXX_Size() int {
	return xxx_messageInfo_DiskUsageStatProto_Usage.Size(m)
}
func (m *DiskUsageStatProto_Usage) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskUsageStatProto_Usage.DiscardUnknown(m)
}

var xxx_messageInfo_DiskUsageStatProto_Usage proto.InternalMessageInfo

func (m *DiskUsageStatProto_Usage) GetTransformed() int64 {
	if m != nil && m.Transformed != nil {
		return *m.Transformed
	}
	return 0
}

func (m *DiskUsageStatProto_Usage) GetUntransformed() int64 {
	if m != nil && m.Untransformed != nil {
		return *m.Untransformed
	}
	return 0
}

// The following fields represents the metadata usage on this disk.
type DiskUsageStatProto_MetadataUsage struct {
	// If set, this denotes the ID of the disk on behalf of which the
	// current disk is storing the metadata. If this field is not set, the
	// metadata utilization is for the current disk.
	DiskId *int64 `protobuf:"varint,1,opt,name=disk_id,json=diskId" json:"disk_id,omitempty"`
	// Total usage in bytes of the KV-store on this disk. This can be RocksDB,
	// LevelDB or any other key-value stores which stores the metadata for a
	// disk.
	KvStoreUsageBytes *int64 `protobuf:"varint,2,opt,name=kv_store_usage_bytes,json=kvStoreUsageBytes" json:"kv_store_usage_bytes,omitempty"`
	// Total usage in bytes of disk WAL on this disk.
	DiskWalUsageBytes    *int64   `protobuf:"varint,3,opt,name=disk_wal_usage_bytes,json=diskWalUsageBytes" json:"disk_wal_usage_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiskUsageStatProto_MetadataUsage) Reset()         { *m = DiskUsageStatProto_MetadataUsage{} }
func (m *DiskUsageStatProto_MetadataUsage) String() string { return proto.CompactTextString(m) }
func (*DiskUsageStatProto_MetadataUsage) ProtoMessage()    {}
func (*DiskUsageStatProto_MetadataUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{2, 1}
}

func (m *DiskUsageStatProto_MetadataUsage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiskUsageStatProto_MetadataUsage.Unmarshal(m, b)
}
func (m *DiskUsageStatProto_MetadataUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiskUsageStatProto_MetadataUsage.Marshal(b, m, deterministic)
}
func (m *DiskUsageStatProto_MetadataUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskUsageStatProto_MetadataUsage.Merge(m, src)
}
func (m *DiskUsageStatProto_MetadataUsage) XXX_Size() int {
	return xxx_messageInfo_DiskUsageStatProto_MetadataUsage.Size(m)
}
func (m *DiskUsageStatProto_MetadataUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskUsageStatProto_MetadataUsage.DiscardUnknown(m)
}

var xxx_messageInfo_DiskUsageStatProto_MetadataUsage proto.InternalMessageInfo

func (m *DiskUsageStatProto_MetadataUsage) GetDiskId() int64 {
	if m != nil && m.DiskId != nil {
		return *m.DiskId
	}
	return 0
}

func (m *DiskUsageStatProto_MetadataUsage) GetKvStoreUsageBytes() int64 {
	if m != nil && m.KvStoreUsageBytes != nil {
		return *m.KvStoreUsageBytes
	}
	return 0
}

func (m *DiskUsageStatProto_MetadataUsage) GetDiskWalUsageBytes() int64 {
	if m != nil && m.DiskWalUsageBytes != nil {
		return *m.DiskWalUsageBytes
	}
	return 0
}

// Stat maintained for every vdisk.
type VDiskUsageStatProto struct {
	// Total number of user bytes used by this vdisk and not inherited from any
	// of its predecessors in the snapshot tree (see inherited_user_bytes field
	// for more details). In other words, user_bytes counts those bytes that are
	// actually mapped in Medusa's vdisk block map and excludes those vdisk
	// blocks that are mapped but don't contain any extents (i.e., they are
	// zeros).
	//
	// User bytes is data before transformation (e.g., compression, encryption)
	// and replication.
	UserBytes *int64 `protobuf:"varint,1,req,name=user_bytes,json=userBytes" json:"user_bytes,omitempty"`
	// The list of disks that have bytes for this vdisk.
	Disks []int64 `protobuf:"varint,2,rep,name=disks" json:"disks,omitempty"`
	// Current usage in disk bytes for this vdisk on each of the above
	// mentioned disks. Disk bytes is data after transformation and
	// replication. We divide the disk bytes further into two kinds -
	// deduped and unshared. Deduplicated data is contributed equally towards
	// all the vdisks that share that data. Thus, if two vdisks share N bytes of
	// deduplicated data, the disk_deduped_bytes for each would reflect N/2.
	//
	// The disk_deduped_bytes is updated by the curator when it periodically
	// scans the whole metadata of a vdisk.
	DiskDedupedBytes []int64 `protobuf:"varint,3,rep,name=disk_deduped_bytes,json=diskDedupedBytes" json:"disk_deduped_bytes,omitempty"`
	// Total number of bytes this vdisk inherits from all of its predecessors in
	// the snapshot tree. When a snapshot is first created, the child vdisk's
	// inherited_user_bytes is set to the user_bytes + inherited_user_bytes of
	// its parent and user_bytes is set to zero.
	//
	// Stargate would incrementally update the user_bytes and
	// inherited_user_bytes fields as the data is written. Curator would
	// periodically recompute these values for accuracy.
	InheritedUserBytes *int64 `protobuf:"varint,4,opt,name=inherited_user_bytes,json=inheritedUserBytes" json:"inherited_user_bytes,omitempty"`
	// Total number of bytes owned by this vdisk after transformation (e.g.,
	// compression, encryption). In other words, this is the sum total of the
	// disk space used by the extents of this vdisk.
	TransformedUserBytes *int64 `protobuf:"varint,5,opt,name=transformed_user_bytes,json=transformedUserBytes" json:"transformed_user_bytes,omitempty"`
	// Fingerprinted user bytes is the amount of fingerprinted data before
	// transformation (e.g., compression, encryption) and replication.
	// Like user_bytes, this doesn't include bytes inherited from a
	// predecessor in the snapshot tree.
	FingerprintedUserBytes *int64                           `protobuf:"varint,6,opt,name=fingerprinted_user_bytes,json=fingerprintedUserBytes" json:"fingerprinted_user_bytes,omitempty"`
	TierUsageList          []*VDiskUsageStatProto_TierUsage `protobuf:"bytes,7,rep,name=tier_usage_list,json=tierUsageList" json:"tier_usage_list,omitempty"`
	// Total number of user bytes written explicitly by the user to this vdisk
	// from the time of creation of the vdisk. In other words,
	// explicit_user_bytes counts only those bytes that got written explicilty
	// to this vdisk, excluding any inherited bytes from the parent.
	ExplicitUserBytes *int64 `protobuf:"varint,8,opt,name=explicit_user_bytes,json=explicitUserBytes" json:"explicit_user_bytes,omitempty"`
	// Parent's user_bytes + inherited_user_bytes used as the base for this
	// (child) vdisk's 'inherited_user_bytes'. At the time of a snapshot, this is
	// initialized in the child vdisk to the same value as its
	// 'inherited_user_bytes'. After that, two things happen concurrently:
	// 1) 'inherited_user_bytes' and 'user_bytes' change in the root oplog's
	// vdisk as it drains.
	// 2) Child's 'inherited_user_bytes' and 'user_bytes' change due to writes
	// that skip oplog.
	// This value remembers the parent's contribution already accounted for in
	// 'inherited_user_bytes', so that we can update it after parent updates its
	// own 'inherited_user_bytes'.
	ReferenceInheritedUserBytes *int64 `protobuf:"varint,9,opt,name=reference_inherited_user_bytes,json=referenceInheritedUserBytes" json:"reference_inherited_user_bytes,omitempty"`
	// If true, these vdisk usage stats have been consolidated after the parent
	// vdisk finished draining its oplog. Vdisk usage stats are updated as part
	// of oplog drain and estore-bound user writes. After a snapshot, the parent
	// vdisk can continue draining its oplog even as child vdisk does user
	// writes. So the stats of both vdisks are updated independently for a while.
	// Consolidation refers to the process of propagating parent's stats to
	// descendent vdisks.
	FinishedConsolidationWithParent *bool    `protobuf:"varint,10,opt,name=finished_consolidation_with_parent,json=finishedConsolidationWithParent" json:"finished_consolidation_with_parent,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *VDiskUsageStatProto) Reset()         { *m = VDiskUsageStatProto{} }
func (m *VDiskUsageStatProto) String() string { return proto.CompactTextString(m) }
func (*VDiskUsageStatProto) ProtoMessage()    {}
func (*VDiskUsageStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{3}
}

func (m *VDiskUsageStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VDiskUsageStatProto.Unmarshal(m, b)
}
func (m *VDiskUsageStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VDiskUsageStatProto.Marshal(b, m, deterministic)
}
func (m *VDiskUsageStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VDiskUsageStatProto.Merge(m, src)
}
func (m *VDiskUsageStatProto) XXX_Size() int {
	return xxx_messageInfo_VDiskUsageStatProto.Size(m)
}
func (m *VDiskUsageStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_VDiskUsageStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_VDiskUsageStatProto proto.InternalMessageInfo

func (m *VDiskUsageStatProto) GetUserBytes() int64 {
	if m != nil && m.UserBytes != nil {
		return *m.UserBytes
	}
	return 0
}

func (m *VDiskUsageStatProto) GetDisks() []int64 {
	if m != nil {
		return m.Disks
	}
	return nil
}

func (m *VDiskUsageStatProto) GetDiskDedupedBytes() []int64 {
	if m != nil {
		return m.DiskDedupedBytes
	}
	return nil
}

func (m *VDiskUsageStatProto) GetInheritedUserBytes() int64 {
	if m != nil && m.InheritedUserBytes != nil {
		return *m.InheritedUserBytes
	}
	return 0
}

func (m *VDiskUsageStatProto) GetTransformedUserBytes() int64 {
	if m != nil && m.TransformedUserBytes != nil {
		return *m.TransformedUserBytes
	}
	return 0
}

func (m *VDiskUsageStatProto) GetFingerprintedUserBytes() int64 {
	if m != nil && m.FingerprintedUserBytes != nil {
		return *m.FingerprintedUserBytes
	}
	return 0
}

func (m *VDiskUsageStatProto) GetTierUsageList() []*VDiskUsageStatProto_TierUsage {
	if m != nil {
		return m.TierUsageList
	}
	return nil
}

func (m *VDiskUsageStatProto) GetExplicitUserBytes() int64 {
	if m != nil && m.ExplicitUserBytes != nil {
		return *m.ExplicitUserBytes
	}
	return 0
}

func (m *VDiskUsageStatProto) GetReferenceInheritedUserBytes() int64 {
	if m != nil && m.ReferenceInheritedUserBytes != nil {
		return *m.ReferenceInheritedUserBytes
	}
	return 0
}

func (m *VDiskUsageStatProto) GetFinishedConsolidationWithParent() bool {
	if m != nil && m.FinishedConsolidationWithParent != nil {
		return *m.FinishedConsolidationWithParent
	}
	return false
}

// Vdisk tier usage stats.
type VDiskUsageStatProto_TierUsage struct {
	// Required : Tier name.
	TierName *string `protobuf:"bytes,1,opt,name=tier_name,json=tierName" json:"tier_name,omitempty"`
	// Usage based on egroups owned on this tier by the vdisk.
	UsageBytes *int64 `protobuf:"varint,2,opt,name=usage_bytes,json=usageBytes,def=0" json:"usage_bytes,omitempty"`
	// Usage basedo n egroups owned on this tier by the vdisk's ancestors.
	InheritedUsageBytes  *int64   `protobuf:"varint,3,opt,name=inherited_usage_bytes,json=inheritedUsageBytes,def=0" json:"inherited_usage_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VDiskUsageStatProto_TierUsage) Reset()         { *m = VDiskUsageStatProto_TierUsage{} }
func (m *VDiskUsageStatProto_TierUsage) String() string { return proto.CompactTextString(m) }
func (*VDiskUsageStatProto_TierUsage) ProtoMessage()    {}
func (*VDiskUsageStatProto_TierUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{3, 0}
}

func (m *VDiskUsageStatProto_TierUsage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VDiskUsageStatProto_TierUsage.Unmarshal(m, b)
}
func (m *VDiskUsageStatProto_TierUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VDiskUsageStatProto_TierUsage.Marshal(b, m, deterministic)
}
func (m *VDiskUsageStatProto_TierUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VDiskUsageStatProto_TierUsage.Merge(m, src)
}
func (m *VDiskUsageStatProto_TierUsage) XXX_Size() int {
	return xxx_messageInfo_VDiskUsageStatProto_TierUsage.Size(m)
}
func (m *VDiskUsageStatProto_TierUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_VDiskUsageStatProto_TierUsage.DiscardUnknown(m)
}

var xxx_messageInfo_VDiskUsageStatProto_TierUsage proto.InternalMessageInfo

const Default_VDiskUsageStatProto_TierUsage_UsageBytes int64 = 0
const Default_VDiskUsageStatProto_TierUsage_InheritedUsageBytes int64 = 0

func (m *VDiskUsageStatProto_TierUsage) GetTierName() string {
	if m != nil && m.TierName != nil {
		return *m.TierName
	}
	return ""
}

func (m *VDiskUsageStatProto_TierUsage) GetUsageBytes() int64 {
	if m != nil && m.UsageBytes != nil {
		return *m.UsageBytes
	}
	return Default_VDiskUsageStatProto_TierUsage_UsageBytes
}

func (m *VDiskUsageStatProto_TierUsage) GetInheritedUsageBytes() int64 {
	if m != nil && m.InheritedUsageBytes != nil {
		return *m.InheritedUsageBytes
	}
	return Default_VDiskUsageStatProto_TierUsage_InheritedUsageBytes
}

// IO Performance statistics. This is used by a vdisk or disk. Individual
// statistics are the aggregated/average values computed from the samples
// collected over some time unit. The time unit is configurable by the
// administrator through prism UI and ranges from one second to one day.
type IoStatProto struct {
	// Total number of IO operations.
	NumIops *int64 `protobuf:"varint,1,req,name=num_iops,json=numIops" json:"num_iops,omitempty"`
	// Total number of bytes read or written. These are transformed bytes (i.e.,
	// after compression, encryption etc).
	TotalBytes *int64 `protobuf:"varint,2,req,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	// Total number of bytes read.
	ReadBytes *int64 `protobuf:"varint,3,req,name=read_bytes,json=readBytes" json:"read_bytes,omitempty"`
	// Total IO time measured in microseconds.
	IoTimeUsec *int64 `protobuf:"varint,4,req,name=io_time_usec,json=ioTimeUsec" json:"io_time_usec,omitempty"`
	// Total number of read operations.
	NumReadops *int64 `protobuf:"varint,5,req,name=num_readops,json=numReadops" json:"num_readops,omitempty"`
	// Total number of random access operations.
	NumRandomAccessOps *int64 `protobuf:"varint,6,opt,name=num_random_access_ops,json=numRandomAccessOps" json:"num_random_access_ops,omitempty"`
	// Total number of io operations that resulted in error.
	NumErrorOps *int64 `protobuf:"varint,7,opt,name=num_error_ops,json=numErrorOps" json:"num_error_ops,omitempty"`
	// Length of the queue integrated over time. Divide by the time span
	// to get the average queue length.
	IntegratedQueueLength *int64 `protobuf:"varint,8,opt,name=integrated_queue_length,json=integratedQueueLength" json:"integrated_queue_length,omitempty"`
	// Percentage of time that this disk/vdisk has had at least one request.
	BusyPercentage *float64 `protobuf:"fixed64,9,opt,name=busy_percentage,json=busyPercentage" json:"busy_percentage,omitempty"`
	// Time span in micro seconds for which these stats were observed.
	TimeSpanUsec *int64 `protobuf:"varint,10,opt,name=time_span_usec,json=timeSpanUsec" json:"time_span_usec,omitempty"`
	// Total queueing delay measured in microseconds. Divide by the number of
	// queueing delays to get the average queueing delay.
	QdelayUsec *int64 `protobuf:"varint,11,opt,name=qdelay_usec,json=qdelayUsec" json:"qdelay_usec,omitempty"`
	// Number of queueing delays reported.
	NumQdelays           *int64   `protobuf:"varint,12,opt,name=num_qdelays,json=numQdelays" json:"num_qdelays,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IoStatProto) Reset()         { *m = IoStatProto{} }
func (m *IoStatProto) String() string { return proto.CompactTextString(m) }
func (*IoStatProto) ProtoMessage()    {}
func (*IoStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{4}
}

func (m *IoStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IoStatProto.Unmarshal(m, b)
}
func (m *IoStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IoStatProto.Marshal(b, m, deterministic)
}
func (m *IoStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IoStatProto.Merge(m, src)
}
func (m *IoStatProto) XXX_Size() int {
	return xxx_messageInfo_IoStatProto.Size(m)
}
func (m *IoStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_IoStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_IoStatProto proto.InternalMessageInfo

func (m *IoStatProto) GetNumIops() int64 {
	if m != nil && m.NumIops != nil {
		return *m.NumIops
	}
	return 0
}

func (m *IoStatProto) GetTotalBytes() int64 {
	if m != nil && m.TotalBytes != nil {
		return *m.TotalBytes
	}
	return 0
}

func (m *IoStatProto) GetReadBytes() int64 {
	if m != nil && m.ReadBytes != nil {
		return *m.ReadBytes
	}
	return 0
}

func (m *IoStatProto) GetIoTimeUsec() int64 {
	if m != nil && m.IoTimeUsec != nil {
		return *m.IoTimeUsec
	}
	return 0
}

func (m *IoStatProto) GetNumReadops() int64 {
	if m != nil && m.NumReadops != nil {
		return *m.NumReadops
	}
	return 0
}

func (m *IoStatProto) GetNumRandomAccessOps() int64 {
	if m != nil && m.NumRandomAccessOps != nil {
		return *m.NumRandomAccessOps
	}
	return 0
}

func (m *IoStatProto) GetNumErrorOps() int64 {
	if m != nil && m.NumErrorOps != nil {
		return *m.NumErrorOps
	}
	return 0
}

func (m *IoStatProto) GetIntegratedQueueLength() int64 {
	if m != nil && m.IntegratedQueueLength != nil {
		return *m.IntegratedQueueLength
	}
	return 0
}

func (m *IoStatProto) GetBusyPercentage() float64 {
	if m != nil && m.BusyPercentage != nil {
		return *m.BusyPercentage
	}
	return 0
}

func (m *IoStatProto) GetTimeSpanUsec() int64 {
	if m != nil && m.TimeSpanUsec != nil {
		return *m.TimeSpanUsec
	}
	return 0
}

func (m *IoStatProto) GetQdelayUsec() int64 {
	if m != nil && m.QdelayUsec != nil {
		return *m.QdelayUsec
	}
	return 0
}

func (m *IoStatProto) GetNumQdelays() int64 {
	if m != nil && m.NumQdelays != nil {
		return *m.NumQdelays
	}
	return 0
}

// Performance statistics of a vdisk.
type VDiskPerfStatProto struct {
	// Performance stats of the vdisk.
	IoStats *IoStatProto `protobuf:"bytes,1,opt,name=io_stats,json=ioStats" json:"io_stats,omitempty"`
	// The list of disks for which the operations are generated.
	Disks []int64 `protobuf:"varint,2,rep,name=disks" json:"disks,omitempty"`
	// Stats (iops, bandwidth, io time, etc) from this vdisk to each of
	// the above listed disk.
	DiskIoStats []*IoStatProto `protobuf:"bytes,3,rep,name=disk_io_stats,json=diskIoStats" json:"disk_io_stats,omitempty"`
	// Time span in micro seconds for which the above stats were observed.
	TimeSpanUsec         *int64   `protobuf:"varint,4,opt,name=time_span_usec,json=timeSpanUsec" json:"time_span_usec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VDiskPerfStatProto) Reset()         { *m = VDiskPerfStatProto{} }
func (m *VDiskPerfStatProto) String() string { return proto.CompactTextString(m) }
func (*VDiskPerfStatProto) ProtoMessage()    {}
func (*VDiskPerfStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{5}
}

func (m *VDiskPerfStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VDiskPerfStatProto.Unmarshal(m, b)
}
func (m *VDiskPerfStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VDiskPerfStatProto.Marshal(b, m, deterministic)
}
func (m *VDiskPerfStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VDiskPerfStatProto.Merge(m, src)
}
func (m *VDiskPerfStatProto) XXX_Size() int {
	return xxx_messageInfo_VDiskPerfStatProto.Size(m)
}
func (m *VDiskPerfStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_VDiskPerfStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_VDiskPerfStatProto proto.InternalMessageInfo

func (m *VDiskPerfStatProto) GetIoStats() *IoStatProto {
	if m != nil {
		return m.IoStats
	}
	return nil
}

func (m *VDiskPerfStatProto) GetDisks() []int64 {
	if m != nil {
		return m.Disks
	}
	return nil
}

func (m *VDiskPerfStatProto) GetDiskIoStats() []*IoStatProto {
	if m != nil {
		return m.DiskIoStats
	}
	return nil
}

func (m *VDiskPerfStatProto) GetTimeSpanUsec() int64 {
	if m != nil && m.TimeSpanUsec != nil {
		return *m.TimeSpanUsec
	}
	return 0
}

// Performance statistics of a disk.
type DiskPerfStatProto struct {
	IoStats *IoStatProto `protobuf:"bytes,1,req,name=io_stats,json=ioStats" json:"io_stats,omitempty"`
	// Time span in micro seconds for which the above stats were observed.
	TimeSpanUsec         *int64   `protobuf:"varint,2,opt,name=time_span_usec,json=timeSpanUsec" json:"time_span_usec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiskPerfStatProto) Reset()         { *m = DiskPerfStatProto{} }
func (m *DiskPerfStatProto) String() string { return proto.CompactTextString(m) }
func (*DiskPerfStatProto) ProtoMessage()    {}
func (*DiskPerfStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{6}
}

func (m *DiskPerfStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiskPerfStatProto.Unmarshal(m, b)
}
func (m *DiskPerfStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiskPerfStatProto.Marshal(b, m, deterministic)
}
func (m *DiskPerfStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskPerfStatProto.Merge(m, src)
}
func (m *DiskPerfStatProto) XXX_Size() int {
	return xxx_messageInfo_DiskPerfStatProto.Size(m)
}
func (m *DiskPerfStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskPerfStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_DiskPerfStatProto proto.InternalMessageInfo

func (m *DiskPerfStatProto) GetIoStats() *IoStatProto {
	if m != nil {
		return m.IoStats
	}
	return nil
}

func (m *DiskPerfStatProto) GetTimeSpanUsec() int64 {
	if m != nil && m.TimeSpanUsec != nil {
		return *m.TimeSpanUsec
	}
	return 0
}

// Performance statistics of a service vm.
type ServiceVmStatProto struct {
	// Average queue length of the stargate running in this service vm.
	AvgQueueLength *int32 `protobuf:"varint,1,req,name=avg_queue_length,json=avgQueueLength" json:"avg_queue_length,omitempty"`
	// Percentage of time that the stargate running in this service vm has
	// had at least one request.
	BusyPercentage *float64 `protobuf:"fixed64,2,req,name=busy_percentage,json=busyPercentage" json:"busy_percentage,omitempty"`
	// Time when the stargate was last started. Indicative of the stability of
	// the stargate.
	StargateStartTimeUsecs *int64 `protobuf:"varint,3,req,name=stargate_start_time_usecs,json=stargateStartTimeUsecs" json:"stargate_start_time_usecs,omitempty"`
	// Time span in micro seconds for which the above stats were observed.
	TimeSpanUsec         *int64   `protobuf:"varint,4,opt,name=time_span_usec,json=timeSpanUsec" json:"time_span_usec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceVmStatProto) Reset()         { *m = ServiceVmStatProto{} }
func (m *ServiceVmStatProto) String() string { return proto.CompactTextString(m) }
func (*ServiceVmStatProto) ProtoMessage()    {}
func (*ServiceVmStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{7}
}

func (m *ServiceVmStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceVmStatProto.Unmarshal(m, b)
}
func (m *ServiceVmStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceVmStatProto.Marshal(b, m, deterministic)
}
func (m *ServiceVmStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceVmStatProto.Merge(m, src)
}
func (m *ServiceVmStatProto) XXX_Size() int {
	return xxx_messageInfo_ServiceVmStatProto.Size(m)
}
func (m *ServiceVmStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceVmStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceVmStatProto proto.InternalMessageInfo

func (m *ServiceVmStatProto) GetAvgQueueLength() int32 {
	if m != nil && m.AvgQueueLength != nil {
		return *m.AvgQueueLength
	}
	return 0
}

func (m *ServiceVmStatProto) GetBusyPercentage() float64 {
	if m != nil && m.BusyPercentage != nil {
		return *m.BusyPercentage
	}
	return 0
}

func (m *ServiceVmStatProto) GetStargateStartTimeUsecs() int64 {
	if m != nil && m.StargateStartTimeUsecs != nil {
		return *m.StargateStartTimeUsecs
	}
	return 0
}

func (m *ServiceVmStatProto) GetTimeSpanUsec() int64 {
	if m != nil && m.TimeSpanUsec != nil {
		return *m.TimeSpanUsec
	}
	return 0
}

// Performance statistics of a virtual machine.
type VmPerfStatProto struct {
	// Virtual machine name.
	VmName *string `protobuf:"bytes,1,req,name=vm_name,json=vmName" json:"vm_name,omitempty"`
	// CPU usage percentage of the VM.
	CpuUsagePercent *float64 `protobuf:"fixed64,2,opt,name=cpu_usage_percent,json=cpuUsagePercent" json:"cpu_usage_percent,omitempty"`
	// Memory usage of the VM measured in bytes.
	MemoryUsageBytes *int64 `protobuf:"varint,3,opt,name=memory_usage_bytes,json=memoryUsageBytes" json:"memory_usage_bytes,omitempty"`
	// Number of IO operations issued by the VM.
	NumIops *int64 `protobuf:"varint,4,opt,name=num_iops,json=numIops" json:"num_iops,omitempty"`
	// Disk bandwidth used by the VM measured in kB/s.
	DiskBandwidthKbps *int64 `protobuf:"varint,5,opt,name=disk_bandwidth_kbps,json=diskBandwidthKbps" json:"disk_bandwidth_kbps,omitempty"`
	// Total IO latency measured in microseconds.
	IoLatencyUsec *int64 `protobuf:"varint,6,opt,name=io_latency_usec,json=ioLatencyUsec" json:"io_latency_usec,omitempty"`
	// Network bandwidth used by the VM measured in kB/s.
	NetworkBandwidthKbps *int64 `protobuf:"varint,7,opt,name=network_bandwidth_kbps,json=networkBandwidthKbps" json:"network_bandwidth_kbps,omitempty"`
	// Start time of the VM measured in microseconds, from the Unix epoch.
	StarttimeUsecs *int64 `protobuf:"varint,8,opt,name=starttime_usecs,json=starttimeUsecs" json:"starttime_usecs,omitempty"`
	// Time span in micro seconds for which the above stats were observed.
	TimeSpanUsec         *int64   `protobuf:"varint,9,opt,name=time_span_usec,json=timeSpanUsec" json:"time_span_usec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmPerfStatProto) Reset()         { *m = VmPerfStatProto{} }
func (m *VmPerfStatProto) String() string { return proto.CompactTextString(m) }
func (*VmPerfStatProto) ProtoMessage()    {}
func (*VmPerfStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{8}
}

func (m *VmPerfStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmPerfStatProto.Unmarshal(m, b)
}
func (m *VmPerfStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmPerfStatProto.Marshal(b, m, deterministic)
}
func (m *VmPerfStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmPerfStatProto.Merge(m, src)
}
func (m *VmPerfStatProto) XXX_Size() int {
	return xxx_messageInfo_VmPerfStatProto.Size(m)
}
func (m *VmPerfStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_VmPerfStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_VmPerfStatProto proto.InternalMessageInfo

func (m *VmPerfStatProto) GetVmName() string {
	if m != nil && m.VmName != nil {
		return *m.VmName
	}
	return ""
}

func (m *VmPerfStatProto) GetCpuUsagePercent() float64 {
	if m != nil && m.CpuUsagePercent != nil {
		return *m.CpuUsagePercent
	}
	return 0
}

func (m *VmPerfStatProto) GetMemoryUsageBytes() int64 {
	if m != nil && m.MemoryUsageBytes != nil {
		return *m.MemoryUsageBytes
	}
	return 0
}

func (m *VmPerfStatProto) GetNumIops() int64 {
	if m != nil && m.NumIops != nil {
		return *m.NumIops
	}
	return 0
}

func (m *VmPerfStatProto) GetDiskBandwidthKbps() int64 {
	if m != nil && m.DiskBandwidthKbps != nil {
		return *m.DiskBandwidthKbps
	}
	return 0
}

func (m *VmPerfStatProto) GetIoLatencyUsec() int64 {
	if m != nil && m.IoLatencyUsec != nil {
		return *m.IoLatencyUsec
	}
	return 0
}

func (m *VmPerfStatProto) GetNetworkBandwidthKbps() int64 {
	if m != nil && m.NetworkBandwidthKbps != nil {
		return *m.NetworkBandwidthKbps
	}
	return 0
}

func (m *VmPerfStatProto) GetStarttimeUsecs() int64 {
	if m != nil && m.StarttimeUsecs != nil {
		return *m.StarttimeUsecs
	}
	return 0
}

func (m *VmPerfStatProto) GetTimeSpanUsec() int64 {
	if m != nil && m.TimeSpanUsec != nil {
		return *m.TimeSpanUsec
	}
	return 0
}

// Performance statistics for replications.
type ReplicationStatProto struct {
	// Remote site name.
	RemoteName *string `protobuf:"bytes,1,req,name=remote_name,json=remoteName" json:"remote_name,omitempty"`
	// Total number of bytes replicated to this remote.
	NumBytesTransmitted *int64 `protobuf:"varint,2,opt,name=num_bytes_transmitted,json=numBytesTransmitted" json:"num_bytes_transmitted,omitempty"`
	// Total number of bytes received from this remote.
	NumBytesReceived *int64 `protobuf:"varint,3,opt,name=num_bytes_received,json=numBytesReceived" json:"num_bytes_received,omitempty"`
	// Time span in microseconds for which the above stats were observed.
	TimeSpanUsec         *int64   `protobuf:"varint,4,opt,name=time_span_usec,json=timeSpanUsec" json:"time_span_usec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplicationStatProto) Reset()         { *m = ReplicationStatProto{} }
func (m *ReplicationStatProto) String() string { return proto.CompactTextString(m) }
func (*ReplicationStatProto) ProtoMessage()    {}
func (*ReplicationStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{9}
}

func (m *ReplicationStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicationStatProto.Unmarshal(m, b)
}
func (m *ReplicationStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicationStatProto.Marshal(b, m, deterministic)
}
func (m *ReplicationStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationStatProto.Merge(m, src)
}
func (m *ReplicationStatProto) XXX_Size() int {
	return xxx_messageInfo_ReplicationStatProto.Size(m)
}
func (m *ReplicationStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationStatProto proto.InternalMessageInfo

func (m *ReplicationStatProto) GetRemoteName() string {
	if m != nil && m.RemoteName != nil {
		return *m.RemoteName
	}
	return ""
}

func (m *ReplicationStatProto) GetNumBytesTransmitted() int64 {
	if m != nil && m.NumBytesTransmitted != nil {
		return *m.NumBytesTransmitted
	}
	return 0
}

func (m *ReplicationStatProto) GetNumBytesReceived() int64 {
	if m != nil && m.NumBytesReceived != nil {
		return *m.NumBytesReceived
	}
	return 0
}

func (m *ReplicationStatProto) GetTimeSpanUsec() int64 {
	if m != nil && m.TimeSpanUsec != nil {
		return *m.TimeSpanUsec
	}
	return 0
}

// Performance statistics of a host system.
type HostPerfStatProto struct {
	// Host name.
	HostName *string `protobuf:"bytes,1,req,name=host_name,json=hostName" json:"host_name,omitempty"`
	// Average CPU usage percentage of the host.
	CpuUsagePercent *float64 `protobuf:"fixed64,2,opt,name=cpu_usage_percent,json=cpuUsagePercent" json:"cpu_usage_percent,omitempty"`
	// Average memory usage of the host measured in bytes.
	MemoryUsageBytes *int64 `protobuf:"varint,3,opt,name=memory_usage_bytes,json=memoryUsageBytes" json:"memory_usage_bytes,omitempty"`
	// Total number of IO operations issued by the host.
	NumIops *int64 `protobuf:"varint,4,opt,name=num_iops,json=numIops" json:"num_iops,omitempty"`
	// Average disk bandwidth usage of the host measured in kB/s.
	DiskBandwidthKbps *int64 `protobuf:"varint,5,opt,name=disk_bandwidth_kbps,json=diskBandwidthKbps" json:"disk_bandwidth_kbps,omitempty"`
	// Average IO latency measured in microseconds.
	IoLatencyUsec *int64 `protobuf:"varint,6,opt,name=io_latency_usec,json=ioLatencyUsec" json:"io_latency_usec,omitempty"`
	// Network bandwidth used by the host measured in kB/s.
	NetworkBandwidthKbps *int64 `protobuf:"varint,7,opt,name=network_bandwidth_kbps,json=networkBandwidthKbps" json:"network_bandwidth_kbps,omitempty"`
	// Start time of the host measured in microseconds, from the Unix epoch.
	StarttimeUsecs *int64 `protobuf:"varint,8,opt,name=starttime_usecs,json=starttimeUsecs" json:"starttime_usecs,omitempty"`
	// Number of VMs running on this host.
	NumVms *int64 `protobuf:"varint,9,opt,name=num_vms,json=numVms" json:"num_vms,omitempty"`
	// ID of the service VM running on this host.
	ServiceVmId *int64 `protobuf:"varint,10,opt,name=service_vm_id,json=serviceVmId" json:"service_vm_id,omitempty"`
	// Time span in micro seconds for which the above stats were observed.
	TimeSpanUsec *int64 `protobuf:"varint,11,opt,name=time_span_usec,json=timeSpanUsec" json:"time_span_usec,omitempty"`
	// UUID of the node.
	NodeUuid             []byte   `protobuf:"bytes,13,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostPerfStatProto) Reset()         { *m = HostPerfStatProto{} }
func (m *HostPerfStatProto) String() string { return proto.CompactTextString(m) }
func (*HostPerfStatProto) ProtoMessage()    {}
func (*HostPerfStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{10}
}

func (m *HostPerfStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostPerfStatProto.Unmarshal(m, b)
}
func (m *HostPerfStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostPerfStatProto.Marshal(b, m, deterministic)
}
func (m *HostPerfStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostPerfStatProto.Merge(m, src)
}
func (m *HostPerfStatProto) XXX_Size() int {
	return xxx_messageInfo_HostPerfStatProto.Size(m)
}
func (m *HostPerfStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_HostPerfStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_HostPerfStatProto proto.InternalMessageInfo

func (m *HostPerfStatProto) GetHostName() string {
	if m != nil && m.HostName != nil {
		return *m.HostName
	}
	return ""
}

func (m *HostPerfStatProto) GetCpuUsagePercent() float64 {
	if m != nil && m.CpuUsagePercent != nil {
		return *m.CpuUsagePercent
	}
	return 0
}

func (m *HostPerfStatProto) GetMemoryUsageBytes() int64 {
	if m != nil && m.MemoryUsageBytes != nil {
		return *m.MemoryUsageBytes
	}
	return 0
}

func (m *HostPerfStatProto) GetNumIops() int64 {
	if m != nil && m.NumIops != nil {
		return *m.NumIops
	}
	return 0
}

func (m *HostPerfStatProto) GetDiskBandwidthKbps() int64 {
	if m != nil && m.DiskBandwidthKbps != nil {
		return *m.DiskBandwidthKbps
	}
	return 0
}

func (m *HostPerfStatProto) GetIoLatencyUsec() int64 {
	if m != nil && m.IoLatencyUsec != nil {
		return *m.IoLatencyUsec
	}
	return 0
}

func (m *HostPerfStatProto) GetNetworkBandwidthKbps() int64 {
	if m != nil && m.NetworkBandwidthKbps != nil {
		return *m.NetworkBandwidthKbps
	}
	return 0
}

func (m *HostPerfStatProto) GetStarttimeUsecs() int64 {
	if m != nil && m.StarttimeUsecs != nil {
		return *m.StarttimeUsecs
	}
	return 0
}

func (m *HostPerfStatProto) GetNumVms() int64 {
	if m != nil && m.NumVms != nil {
		return *m.NumVms
	}
	return 0
}

func (m *HostPerfStatProto) GetServiceVmId() int64 {
	if m != nil && m.ServiceVmId != nil {
		return *m.ServiceVmId
	}
	return 0
}

func (m *HostPerfStatProto) GetTimeSpanUsec() int64 {
	if m != nil && m.TimeSpanUsec != nil {
		return *m.TimeSpanUsec
	}
	return 0
}

func (m *HostPerfStatProto) GetNodeUuid() []byte {
	if m != nil {
		return m.NodeUuid
	}
	return nil
}

// Performance statistics of a VDisk or a container as observed by the
// front-end (iSCSI adapter or NFS server).
type FrontendPerfStatProto struct {
	// Total number of read operations completed.
	NumReadOps *int64 `protobuf:"varint,1,req,name=num_read_ops,json=numReadOps" json:"num_read_ops,omitempty"`
	// Total number of write operations completed.
	NumWriteOps *int64 `protobuf:"varint,2,req,name=num_write_ops,json=numWriteOps" json:"num_write_ops,omitempty"`
	// Number of read operations that were failed.
	NumReadErrors *int64 `protobuf:"varint,3,req,name=num_read_errors,json=numReadErrors" json:"num_read_errors,omitempty"`
	// Number of write operations that were failed.
	NumWriteErrors *int64 `protobuf:"varint,4,req,name=num_write_errors,json=numWriteErrors" json:"num_write_errors,omitempty"`
	// Number of internal read retries.
	NumReadRetries *int64 `protobuf:"varint,5,req,name=num_read_retries,json=numReadRetries" json:"num_read_retries,omitempty"`
	// Number of internal write retries.
	NumWriteRetries *int64 `protobuf:"varint,6,req,name=num_write_retries,json=numWriteRetries" json:"num_write_retries,omitempty"`
	// Total number of bytes read.
	NumReadBytes *int64 `protobuf:"varint,7,req,name=num_read_bytes,json=numReadBytes" json:"num_read_bytes,omitempty"`
	// Total number of bytes written.
	NumWriteBytes *int64 `protobuf:"varint,8,req,name=num_write_bytes,json=numWriteBytes" json:"num_write_bytes,omitempty"`
	// Total read time measured in microseconds.
	ReadIoTimeUsec *int64 `protobuf:"varint,9,req,name=read_io_time_usec,json=readIoTimeUsec" json:"read_io_time_usec,omitempty"`
	// Total write time measured in microseconds.
	WriteIoTimeUsec *int64 `protobuf:"varint,10,req,name=write_io_time_usec,json=writeIoTimeUsec" json:"write_io_time_usec,omitempty"`
	// Time span in microseconds for which the above stats were observed.
	TimeSpanUsec *int64 `protobuf:"varint,11,req,name=time_span_usec,json=timeSpanUsec" json:"time_span_usec,omitempty"`
	// Percentage of time that this entity has had at least one request.
	BusyPercentage *float64 `protobuf:"fixed64,12,opt,name=busy_percentage,json=busyPercentage" json:"busy_percentage,omitempty"`
	// Total number of read operations requested (started/queued).
	NumQueuedReadOps *int64 `protobuf:"varint,13,opt,name=num_queued_read_ops,json=numQueuedReadOps" json:"num_queued_read_ops,omitempty"`
	// Total number of write operations requested (started/queued).
	NumQueuedWriteOps    *int64   `protobuf:"varint,14,opt,name=num_queued_write_ops,json=numQueuedWriteOps" json:"num_queued_write_ops,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrontendPerfStatProto) Reset()         { *m = FrontendPerfStatProto{} }
func (m *FrontendPerfStatProto) String() string { return proto.CompactTextString(m) }
func (*FrontendPerfStatProto) ProtoMessage()    {}
func (*FrontendPerfStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{11}
}

func (m *FrontendPerfStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrontendPerfStatProto.Unmarshal(m, b)
}
func (m *FrontendPerfStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrontendPerfStatProto.Marshal(b, m, deterministic)
}
func (m *FrontendPerfStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontendPerfStatProto.Merge(m, src)
}
func (m *FrontendPerfStatProto) XXX_Size() int {
	return xxx_messageInfo_FrontendPerfStatProto.Size(m)
}
func (m *FrontendPerfStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontendPerfStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_FrontendPerfStatProto proto.InternalMessageInfo

func (m *FrontendPerfStatProto) GetNumReadOps() int64 {
	if m != nil && m.NumReadOps != nil {
		return *m.NumReadOps
	}
	return 0
}

func (m *FrontendPerfStatProto) GetNumWriteOps() int64 {
	if m != nil && m.NumWriteOps != nil {
		return *m.NumWriteOps
	}
	return 0
}

func (m *FrontendPerfStatProto) GetNumReadErrors() int64 {
	if m != nil && m.NumReadErrors != nil {
		return *m.NumReadErrors
	}
	return 0
}

func (m *FrontendPerfStatProto) GetNumWriteErrors() int64 {
	if m != nil && m.NumWriteErrors != nil {
		return *m.NumWriteErrors
	}
	return 0
}

func (m *FrontendPerfStatProto) GetNumReadRetries() int64 {
	if m != nil && m.NumReadRetries != nil {
		return *m.NumReadRetries
	}
	return 0
}

func (m *FrontendPerfStatProto) GetNumWriteRetries() int64 {
	if m != nil && m.NumWriteRetries != nil {
		return *m.NumWriteRetries
	}
	return 0
}

func (m *FrontendPerfStatProto) GetNumReadBytes() int64 {
	if m != nil && m.NumReadBytes != nil {
		return *m.NumReadBytes
	}
	return 0
}

func (m *FrontendPerfStatProto) GetNumWriteBytes() int64 {
	if m != nil && m.NumWriteBytes != nil {
		return *m.NumWriteBytes
	}
	return 0
}

func (m *FrontendPerfStatProto) GetReadIoTimeUsec() int64 {
	if m != nil && m.ReadIoTimeUsec != nil {
		return *m.ReadIoTimeUsec
	}
	return 0
}

func (m *FrontendPerfStatProto) GetWriteIoTimeUsec() int64 {
	if m != nil && m.WriteIoTimeUsec != nil {
		return *m.WriteIoTimeUsec
	}
	return 0
}

func (m *FrontendPerfStatProto) GetTimeSpanUsec() int64 {
	if m != nil && m.TimeSpanUsec != nil {
		return *m.TimeSpanUsec
	}
	return 0
}

func (m *FrontendPerfStatProto) GetBusyPercentage() float64 {
	if m != nil && m.BusyPercentage != nil {
		return *m.BusyPercentage
	}
	return 0
}

func (m *FrontendPerfStatProto) GetNumQueuedReadOps() int64 {
	if m != nil && m.NumQueuedReadOps != nil {
		return *m.NumQueuedReadOps
	}
	return 0
}

func (m *FrontendPerfStatProto) GetNumQueuedWriteOps() int64 {
	if m != nil && m.NumQueuedWriteOps != nil {
		return *m.NumQueuedWriteOps
	}
	return 0
}

// NFS performance statistics to be stored for each container on each
// NFS master/slave. The data includes container performance stats that
// are obtained by aggregating vdisk performance data.
//
// NFS read/write operations contribute to data read/write statistics.
// These values are stored within the FrontendPerfStatProto instance below.
// All other NFS operations contribute to namespace statistics that are stored
// directly in ContainerNFSStatProto.
type ContainerNFSStatProto struct {
	// IO performance metrics for a container.
	IoStats *FrontendPerfStatProto `protobuf:"bytes,1,opt,name=io_stats,json=ioStats" json:"io_stats,omitempty"`
	// Total number of namespace lookup operations.
	NumNamespaceLookupOps *int64 `protobuf:"varint,2,req,name=num_namespace_lookup_ops,json=numNamespaceLookupOps" json:"num_namespace_lookup_ops,omitempty"`
	// Total number of namespace update operations.
	NumNamespaceUpdateOps *int64 `protobuf:"varint,3,req,name=num_namespace_update_ops,json=numNamespaceUpdateOps" json:"num_namespace_update_ops,omitempty"`
	// Number of namespace lookup operations that failed.
	NumNamespaceLookupErrors *int64 `protobuf:"varint,4,req,name=num_namespace_lookup_errors,json=numNamespaceLookupErrors" json:"num_namespace_lookup_errors,omitempty"`
	// Number of namespace update operations that failed.
	NumNamespaceUpdateErrors *int64 `protobuf:"varint,5,req,name=num_namespace_update_errors,json=numNamespaceUpdateErrors" json:"num_namespace_update_errors,omitempty"`
	// Total time for namespace lookups measured in microseconds.
	NamespaceLookupTimeUsec *int64 `protobuf:"varint,6,req,name=namespace_lookup_time_usec,json=namespaceLookupTimeUsec" json:"namespace_lookup_time_usec,omitempty"`
	// Total time for namespace updates measured in microseconds.
	NamespaceUpdateTimeUsec *int64 `protobuf:"varint,7,req,name=namespace_update_time_usec,json=namespaceUpdateTimeUsec" json:"namespace_update_time_usec,omitempty"`
	// Time span in microseconds for which the above stats were observed.
	TimeSpanUsec         *int64   `protobuf:"varint,8,req,name=time_span_usec,json=timeSpanUsec" json:"time_span_usec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerNFSStatProto) Reset()         { *m = ContainerNFSStatProto{} }
func (m *ContainerNFSStatProto) String() string { return proto.CompactTextString(m) }
func (*ContainerNFSStatProto) ProtoMessage()    {}
func (*ContainerNFSStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{12}
}

func (m *ContainerNFSStatProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerNFSStatProto.Unmarshal(m, b)
}
func (m *ContainerNFSStatProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerNFSStatProto.Marshal(b, m, deterministic)
}
func (m *ContainerNFSStatProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerNFSStatProto.Merge(m, src)
}
func (m *ContainerNFSStatProto) XXX_Size() int {
	return xxx_messageInfo_ContainerNFSStatProto.Size(m)
}
func (m *ContainerNFSStatProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerNFSStatProto.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerNFSStatProto proto.InternalMessageInfo

func (m *ContainerNFSStatProto) GetIoStats() *FrontendPerfStatProto {
	if m != nil {
		return m.IoStats
	}
	return nil
}

func (m *ContainerNFSStatProto) GetNumNamespaceLookupOps() int64 {
	if m != nil && m.NumNamespaceLookupOps != nil {
		return *m.NumNamespaceLookupOps
	}
	return 0
}

func (m *ContainerNFSStatProto) GetNumNamespaceUpdateOps() int64 {
	if m != nil && m.NumNamespaceUpdateOps != nil {
		return *m.NumNamespaceUpdateOps
	}
	return 0
}

func (m *ContainerNFSStatProto) GetNumNamespaceLookupErrors() int64 {
	if m != nil && m.NumNamespaceLookupErrors != nil {
		return *m.NumNamespaceLookupErrors
	}
	return 0
}

func (m *ContainerNFSStatProto) GetNumNamespaceUpdateErrors() int64 {
	if m != nil && m.NumNamespaceUpdateErrors != nil {
		return *m.NumNamespaceUpdateErrors
	}
	return 0
}

func (m *ContainerNFSStatProto) GetNamespaceLookupTimeUsec() int64 {
	if m != nil && m.NamespaceLookupTimeUsec != nil {
		return *m.NamespaceLookupTimeUsec
	}
	return 0
}

func (m *ContainerNFSStatProto) GetNamespaceUpdateTimeUsec() int64 {
	if m != nil && m.NamespaceUpdateTimeUsec != nil {
		return *m.NamespaceUpdateTimeUsec
	}
	return 0
}

func (m *ContainerNFSStatProto) GetTimeSpanUsec() int64 {
	if m != nil && m.TimeSpanUsec != nil {
		return *m.TimeSpanUsec
	}
	return 0
}

type StatsSubscriptionProto struct {
	Subscriptions        []*StatsSubscriptionProto_Subscription `protobuf:"bytes,1,rep,name=subscriptions" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *StatsSubscriptionProto) Reset()         { *m = StatsSubscriptionProto{} }
func (m *StatsSubscriptionProto) String() string { return proto.CompactTextString(m) }
func (*StatsSubscriptionProto) ProtoMessage()    {}
func (*StatsSubscriptionProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{13}
}

func (m *StatsSubscriptionProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsSubscriptionProto.Unmarshal(m, b)
}
func (m *StatsSubscriptionProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsSubscriptionProto.Marshal(b, m, deterministic)
}
func (m *StatsSubscriptionProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsSubscriptionProto.Merge(m, src)
}
func (m *StatsSubscriptionProto) XXX_Size() int {
	return xxx_messageInfo_StatsSubscriptionProto.Size(m)
}
func (m *StatsSubscriptionProto) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsSubscriptionProto.DiscardUnknown(m)
}

var xxx_messageInfo_StatsSubscriptionProto proto.InternalMessageInfo

func (m *StatsSubscriptionProto) GetSubscriptions() []*StatsSubscriptionProto_Subscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type StatsSubscriptionProto_Subscription struct {
	// Stat type.
	StatType *string `protobuf:"bytes,1,req,name=stat_type,json=statType" json:"stat_type,omitempty"`
	// Object id.
	ObjectId *string `protobuf:"bytes,2,req,name=object_id,json=objectId" json:"object_id,omitempty"`
	// ip:port of the subscriber.
	SubscriberHandle     *string  `protobuf:"bytes,3,req,name=subscriber_handle,json=subscriberHandle" json:"subscriber_handle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatsSubscriptionProto_Subscription) Reset()         { *m = StatsSubscriptionProto_Subscription{} }
func (m *StatsSubscriptionProto_Subscription) String() string { return proto.CompactTextString(m) }
func (*StatsSubscriptionProto_Subscription) ProtoMessage()    {}
func (*StatsSubscriptionProto_Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{13, 0}
}

func (m *StatsSubscriptionProto_Subscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsSubscriptionProto_Subscription.Unmarshal(m, b)
}
func (m *StatsSubscriptionProto_Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsSubscriptionProto_Subscription.Marshal(b, m, deterministic)
}
func (m *StatsSubscriptionProto_Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsSubscriptionProto_Subscription.Merge(m, src)
}
func (m *StatsSubscriptionProto_Subscription) XXX_Size() int {
	return xxx_messageInfo_StatsSubscriptionProto_Subscription.Size(m)
}
func (m *StatsSubscriptionProto_Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsSubscriptionProto_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_StatsSubscriptionProto_Subscription proto.InternalMessageInfo

func (m *StatsSubscriptionProto_Subscription) GetStatType() string {
	if m != nil && m.StatType != nil {
		return *m.StatType
	}
	return ""
}

func (m *StatsSubscriptionProto_Subscription) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *StatsSubscriptionProto_Subscription) GetSubscriberHandle() string {
	if m != nil && m.SubscriberHandle != nil {
		return *m.SubscriberHandle
	}
	return ""
}

type ServiceAttributes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceAttributes) Reset()         { *m = ServiceAttributes{} }
func (m *ServiceAttributes) String() string { return proto.CompactTextString(m) }
func (*ServiceAttributes) ProtoMessage()    {}
func (*ServiceAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{14}
}

func (m *ServiceAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAttributes.Unmarshal(m, b)
}
func (m *ServiceAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAttributes.Marshal(b, m, deterministic)
}
func (m *ServiceAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAttributes.Merge(m, src)
}
func (m *ServiceAttributes) XXX_Size() int {
	return xxx_messageInfo_ServiceAttributes.Size(m)
}
func (m *ServiceAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAttributes proto.InternalMessageInfo

type SendStatsArg struct {
	Stats                []*SendStatsArg_StatsList `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SendStatsArg) Reset()         { *m = SendStatsArg{} }
func (m *SendStatsArg) String() string { return proto.CompactTextString(m) }
func (*SendStatsArg) ProtoMessage()    {}
func (*SendStatsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{15}
}

func (m *SendStatsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendStatsArg.Unmarshal(m, b)
}
func (m *SendStatsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendStatsArg.Marshal(b, m, deterministic)
}
func (m *SendStatsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendStatsArg.Merge(m, src)
}
func (m *SendStatsArg) XXX_Size() int {
	return xxx_messageInfo_SendStatsArg.Size(m)
}
func (m *SendStatsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_SendStatsArg.DiscardUnknown(m)
}

var xxx_messageInfo_SendStatsArg proto.InternalMessageInfo

func (m *SendStatsArg) GetStats() []*SendStatsArg_StatsList {
	if m != nil {
		return m.Stats
	}
	return nil
}

type SendStatsArg_StatsList struct {
	// Stat type.
	StatType *string `protobuf:"bytes,1,req,name=stat_type,json=statType" json:"stat_type,omitempty"`
	// Object id.
	ObjectId *string `protobuf:"bytes,2,req,name=object_id,json=objectId" json:"object_id,omitempty"`
	// List of stats.
	StatsList            [][]byte `protobuf:"bytes,3,rep,name=stats_list,json=statsList" json:"stats_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendStatsArg_StatsList) Reset()         { *m = SendStatsArg_StatsList{} }
func (m *SendStatsArg_StatsList) String() string { return proto.CompactTextString(m) }
func (*SendStatsArg_StatsList) ProtoMessage()    {}
func (*SendStatsArg_StatsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{15, 0}
}

func (m *SendStatsArg_StatsList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendStatsArg_StatsList.Unmarshal(m, b)
}
func (m *SendStatsArg_StatsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendStatsArg_StatsList.Marshal(b, m, deterministic)
}
func (m *SendStatsArg_StatsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendStatsArg_StatsList.Merge(m, src)
}
func (m *SendStatsArg_StatsList) XXX_Size() int {
	return xxx_messageInfo_SendStatsArg_StatsList.Size(m)
}
func (m *SendStatsArg_StatsList) XXX_DiscardUnknown() {
	xxx_messageInfo_SendStatsArg_StatsList.DiscardUnknown(m)
}

var xxx_messageInfo_SendStatsArg_StatsList proto.InternalMessageInfo

func (m *SendStatsArg_StatsList) GetStatType() string {
	if m != nil && m.StatType != nil {
		return *m.StatType
	}
	return ""
}

func (m *SendStatsArg_StatsList) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *SendStatsArg_StatsList) GetStatsList() [][]byte {
	if m != nil {
		return m.StatsList
	}
	return nil
}

type SendStatsRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendStatsRet) Reset()         { *m = SendStatsRet{} }
func (m *SendStatsRet) String() string { return proto.CompactTextString(m) }
func (*SendStatsRet) ProtoMessage()    {}
func (*SendStatsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537a116482db188, []int{16}
}

func (m *SendStatsRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendStatsRet.Unmarshal(m, b)
}
func (m *SendStatsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendStatsRet.Marshal(b, m, deterministic)
}
func (m *SendStatsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendStatsRet.Merge(m, src)
}
func (m *SendStatsRet) XXX_Size() int {
	return xxx_messageInfo_SendStatsRet.Size(m)
}
func (m *SendStatsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_SendStatsRet.DiscardUnknown(m)
}

var xxx_messageInfo_SendStatsRet proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("nutanix.stats.ServiceAttributes_ServicePorts", ServiceAttributes_ServicePorts_name, ServiceAttributes_ServicePorts_value)
	proto.RegisterType((*OplogUsageStatProto)(nil), "nutanix.stats.OplogUsageStatProto")
	proto.RegisterType((*LWSUsageStatProto)(nil), "nutanix.stats.LWSUsageStatProto")
	proto.RegisterType((*DiskUsageStatProto)(nil), "nutanix.stats.DiskUsageStatProto")
	proto.RegisterType((*DiskUsageStatProto_Usage)(nil), "nutanix.stats.DiskUsageStatProto.Usage")
	proto.RegisterType((*DiskUsageStatProto_MetadataUsage)(nil), "nutanix.stats.DiskUsageStatProto.MetadataUsage")
	proto.RegisterType((*VDiskUsageStatProto)(nil), "nutanix.stats.VDiskUsageStatProto")
	proto.RegisterType((*VDiskUsageStatProto_TierUsage)(nil), "nutanix.stats.VDiskUsageStatProto.TierUsage")
	proto.RegisterType((*IoStatProto)(nil), "nutanix.stats.IoStatProto")
	proto.RegisterType((*VDiskPerfStatProto)(nil), "nutanix.stats.VDiskPerfStatProto")
	proto.RegisterType((*DiskPerfStatProto)(nil), "nutanix.stats.DiskPerfStatProto")
	proto.RegisterType((*ServiceVmStatProto)(nil), "nutanix.stats.ServiceVmStatProto")
	proto.RegisterType((*VmPerfStatProto)(nil), "nutanix.stats.VmPerfStatProto")
	proto.RegisterType((*ReplicationStatProto)(nil), "nutanix.stats.ReplicationStatProto")
	proto.RegisterType((*HostPerfStatProto)(nil), "nutanix.stats.HostPerfStatProto")
	proto.RegisterType((*FrontendPerfStatProto)(nil), "nutanix.stats.FrontendPerfStatProto")
	proto.RegisterType((*ContainerNFSStatProto)(nil), "nutanix.stats.ContainerNFSStatProto")
	proto.RegisterType((*StatsSubscriptionProto)(nil), "nutanix.stats.StatsSubscriptionProto")
	proto.RegisterType((*StatsSubscriptionProto_Subscription)(nil), "nutanix.stats.StatsSubscriptionProto.Subscription")
	proto.RegisterType((*ServiceAttributes)(nil), "nutanix.stats.ServiceAttributes")
	proto.RegisterType((*SendStatsArg)(nil), "nutanix.stats.SendStatsArg")
	proto.RegisterType((*SendStatsArg_StatsList)(nil), "nutanix.stats.SendStatsArg.StatsList")
	proto.RegisterType((*SendStatsRet)(nil), "nutanix.stats.SendStatsRet")
}

func init() { proto.RegisterFile("stats/stats.proto", fileDescriptor_d537a116482db188) }

var fileDescriptor_d537a116482db188 = []byte{
	// 1992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x4b, 0x73, 0x24, 0x47,
	0xf1, 0x8f, 0x9e, 0x91, 0x34, 0x33, 0x39, 0x0f, 0x69, 0x5a, 0xaf, 0xd9, 0x51, 0xac, 0xad, 0xff,
	0xfc, 0x17, 0x56, 0xc6, 0x46, 0x32, 0x1b, 0xb6, 0x01, 0x3b, 0x30, 0xa1, 0x5d, 0xaf, 0x59, 0x85,
	0xc5, 0xae, 0xdc, 0x7a, 0x01, 0x97, 0x8e, 0x9e, 0xee, 0xd2, 0x4c, 0xa1, 0xe9, 0xea, 0x76, 0x75,
	0xf5, 0xc8, 0xe2, 0x64, 0x82, 0x8b, 0x83, 0x13, 0x5f, 0x85, 0xc3, 0x46, 0x70, 0xe3, 0x08, 0x11,
	0x7c, 0x03, 0x82, 0x3b, 0xe6, 0x1b, 0x70, 0xe0, 0x40, 0x54, 0x56, 0x55, 0x3f, 0x34, 0xb3, 0x0f,
	0x05, 0x1c, 0xb9, 0x28, 0x34, 0xf9, 0xf8, 0x65, 0x55, 0xe6, 0x2f, 0x33, 0xab, 0xa1, 0x9b, 0x08,
	0x4f, 0x24, 0x7b, 0xf8, 0x77, 0x37, 0xe6, 0x91, 0x88, 0xec, 0x36, 0x4b, 0x85, 0xc7, 0xe8, 0x97,
	0xbb, 0x28, 0xec, 0xf7, 0x53, 0x41, 0x27, 0x7b, 0xc9, 0xc4, 0x1d, 0xa6, 0x17, 0xc9, 0x1e, 0x23,
	0x62, 0x8f, 0xc7, 0xbe, 0x32, 0x1d, 0xfc, 0x1c, 0x56, 0x9f, 0xc5, 0x93, 0x68, 0x74, 0x9a, 0x78,
	0x23, 0x72, 0x2c, 0x3c, 0x71, 0x84, 0x08, 0x6f, 0x42, 0x53, 0x44, 0xc2, 0x9b, 0xb8, 0xa9, 0x94,
	0xf7, 0xac, 0x6d, 0x6b, 0xa7, 0xea, 0x00, 0x8a, 0xd0, 0xd2, 0xfe, 0x3f, 0x68, 0x49, 0xf0, 0x8b,
	0x44, 0x5b, 0x54, 0xd0, 0xa2, 0xa9, 0x64, 0x68, 0x32, 0xf8, 0x15, 0x74, 0x0f, 0xcf, 0x8f, 0xff,
	0xfb, 0xc0, 0x68, 0x32, 0xf6, 0x38, 0x09, 0xb4, 0x49, 0x55, 0x9b, 0xa0, 0x4c, 0xc5, 0xfe, 0x75,
	0x1d, 0xec, 0x4f, 0x68, 0x72, 0x79, 0x23, 0xfa, 0x93, 0xd9, 0xe8, 0xcd, 0x07, 0xf7, 0x77, 0x4b,
	0xe9, 0xda, 0x9d, 0xf5, 0xdb, 0xc5, 0x9f, 0xb7, 0x3d, 0xe6, 0x1b, 0x00, 0x7e, 0xc4, 0x84, 0x47,
	0x19, 0xe1, 0x49, 0xaf, 0xba, 0x5d, 0x95, 0x37, 0xcd, 0x25, 0xb6, 0x07, 0xbd, 0xec, 0x97, 0x9b,
	0xb2, 0xd2, 0x95, 0x16, 0xb6, 0xab, 0xb7, 0x39, 0xd9, 0x46, 0x06, 0x74, 0xca, 0x0a, 0x69, 0xb0,
	0x5d, 0xd8, 0xcc, 0x43, 0x04, 0x24, 0x48, 0xe3, 0x2c, 0xc2, 0xe2, 0xed, 0x22, 0xac, 0x67, 0x38,
	0x9f, 0x28, 0x18, 0x15, 0xe0, 0x04, 0xba, 0x79, 0x80, 0x91, 0xc7, 0x87, 0x12, 0x7a, 0xe9, 0x76,
	0xd0, 0x2b, 0x19, 0xc2, 0x4f, 0x14, 0x80, 0xbd, 0x0f, 0x35, 0x83, 0x55, 0xbf, 0x5d, 0x89, 0x8c,
	0x9f, 0xfd, 0x01, 0x6c, 0x5e, 0x50, 0x36, 0x22, 0x3c, 0xe6, 0x94, 0x09, 0xd7, 0x0b, 0x02, 0x12,
	0xb8, 0xc3, 0x6b, 0x41, 0x92, 0x5e, 0x03, 0x4b, 0xb5, 0x5e, 0x50, 0xef, 0x4b, 0xed, 0x43, 0xa9,
	0xb4, 0x3f, 0x84, 0x3b, 0x45, 0x3f, 0x7f, 0x42, 0xb0, 0x2a, 0xca, 0x13, 0xd0, 0xb3, 0x08, 0xfc,
	0x48, 0xe9, 0x95, 0xef, 0x39, 0xac, 0xe6, 0xc9, 0x20, 0xbe, 0x1b, 0x7b, 0x9c, 0x8a, 0xeb, 0x5e,
	0xf3, 0x76, 0xe9, 0xc8, 0x13, 0xfa, 0xd8, 0x3f, 0x42, 0x04, 0xfb, 0x0c, 0x3a, 0x21, 0x11, 0x5e,
	0xe0, 0x09, 0x4f, 0x57, 0xaf, 0x85, 0x98, 0x7b, 0xaf, 0xc6, 0xfc, 0xa9, 0xf6, 0x53, 0xd8, 0xed,
	0xb0, 0xf8, 0xb3, 0xff, 0x0c, 0x16, 0x55, 0x19, 0xb7, 0xa1, 0x29, 0xb8, 0xc7, 0x92, 0x8b, 0x88,
	0x87, 0x24, 0xd0, 0x5d, 0x59, 0x14, 0xd9, 0xf7, 0xa0, 0x9d, 0xb2, 0xa2, 0x8d, 0x22, 0x7c, 0x59,
	0xd8, 0xff, 0xad, 0x05, 0xed, 0x52, 0x44, 0x7b, 0x13, 0x6a, 0x01, 0x4d, 0x2e, 0x5d, 0x6a, 0x50,
	0x97, 0xe4, 0xcf, 0x83, 0xc0, 0xde, 0x83, 0xb5, 0xcb, 0xa9, 0x9b, 0x88, 0x88, 0x13, 0x75, 0x27,
	0x9d, 0x63, 0x85, 0xdb, 0xbd, 0x9c, 0x1e, 0x4b, 0x15, 0x82, 0xa8, 0xec, 0xee, 0xc1, 0x1a, 0x22,
	0x5d, 0x99, 0xf6, 0xd5, 0x0e, 0xaa, 0xfb, 0xbb, 0x52, 0x77, 0xae, 0xbb, 0x13, 0x1d, 0x06, 0x7f,
	0x58, 0x84, 0xd5, 0xb3, 0x39, 0x43, 0xe0, 0x2e, 0x40, 0x9a, 0x10, 0xae, 0xdd, 0xad, 0xed, 0xca,
	0x4e, 0xd5, 0x69, 0x48, 0x89, 0x8a, 0xb3, 0x06, 0x8b, 0x12, 0x4b, 0x9e, 0x44, 0x76, 0xac, 0xfa,
	0x61, 0xbf, 0x03, 0x36, 0x46, 0x37, 0x4d, 0x64, 0x62, 0x4b, 0x93, 0x15, 0xa9, 0xd1, 0x6d, 0xa1,
	0x30, 0xde, 0x85, 0x35, 0xca, 0xc6, 0x84, 0x53, 0x81, 0xfd, 0x96, 0x05, 0x5b, 0xc0, 0xb3, 0xda,
	0x99, 0xee, 0x34, 0x8b, 0xfa, 0x1e, 0x6c, 0x14, 0x12, 0x59, 0xf4, 0x59, 0x44, 0x9f, 0xb5, 0x82,
	0x36, 0xf7, 0xfa, 0x01, 0xf4, 0x0a, 0x64, 0x2c, 0xfb, 0x2d, 0xa1, 0xdf, 0x46, 0x49, 0x9f, 0x7b,
	0x9e, 0xc0, 0xb2, 0xa0, 0x72, 0xee, 0x60, 0x26, 0x27, 0x34, 0x11, 0xbd, 0x1a, 0x72, 0xea, 0x9d,
	0x1b, 0x9c, 0x9a, 0x93, 0xc1, 0xdd, 0x13, 0x4a, 0xb8, 0x26, 0x94, 0x30, 0xff, 0x1e, 0xd2, 0x44,
	0xd8, 0xbb, 0xb0, 0x4a, 0xbe, 0x8c, 0x27, 0xd4, 0xa7, 0xa2, 0x78, 0x94, 0xba, 0x2a, 0x91, 0x51,
	0xe5, 0xa7, 0x78, 0x04, 0x6f, 0x70, 0x72, 0x41, 0x38, 0x61, 0x3e, 0x71, 0xe7, 0x66, 0x4c, 0x35,
	0xeb, 0x56, 0x66, 0x75, 0x30, 0x9b, 0xba, 0xcf, 0x60, 0x70, 0x41, 0x19, 0x4d, 0xc6, 0x24, 0x70,
	0xfd, 0x88, 0x25, 0xd1, 0x84, 0x06, 0x9e, 0xa0, 0x11, 0x73, 0xaf, 0xa8, 0x18, 0xcb, 0x2e, 0x24,
	0x4c, 0x60, 0xef, 0xd6, 0x9d, 0x37, 0x8d, 0xe5, 0xa3, 0xa2, 0xe1, 0x39, 0x15, 0xe3, 0x23, 0x34,
	0xeb, 0xff, 0xc6, 0x82, 0x46, 0x76, 0x3d, 0x7b, 0x0b, 0x1a, 0x98, 0x25, 0xe6, 0x85, 0x6a, 0x5b,
	0x34, 0x9c, 0xba, 0x14, 0x3c, 0xf5, 0x42, 0x62, 0x0f, 0xa0, 0x39, 0x43, 0xdc, 0x0f, 0xad, 0x77,
	0x1d, 0x48, 0x73, 0xd2, 0xbe, 0x0f, 0xeb, 0xc5, 0x6b, 0xdd, 0x60, 0xad, 0xb4, 0x5e, 0x2d, 0x90,
	0x21, 0xa3, 0xee, 0x5f, 0xaa, 0xd0, 0x3c, 0x88, 0x72, 0xca, 0xde, 0x81, 0x3a, 0x4b, 0x43, 0x97,
	0x46, 0xb1, 0x21, 0x6c, 0x8d, 0xa5, 0xe1, 0x41, 0x14, 0x27, 0xf9, 0x42, 0x35, 0xa7, 0xa8, 0x64,
	0x0b, 0x55, 0x1d, 0xe1, 0x2e, 0x00, 0x27, 0x5e, 0xce, 0x58, 0xa4, 0xbb, 0x94, 0x28, 0xf5, 0x36,
	0xb4, 0x68, 0xe4, 0x0a, 0x1a, 0xca, 0x36, 0x24, 0x7e, 0x6f, 0x41, 0x01, 0xd0, 0xe8, 0x84, 0x86,
	0xe4, 0x34, 0x21, 0xbe, 0x8c, 0x20, 0x83, 0x4b, 0x17, 0x19, 0x7f, 0x51, 0x19, 0xb0, 0x34, 0x74,
	0x94, 0xc4, 0xfe, 0x1e, 0xac, 0xa3, 0x81, 0xc7, 0x82, 0x28, 0x74, 0x3d, 0xdf, 0x27, 0x49, 0xe2,
	0x4a, 0x53, 0x45, 0x41, 0x5b, 0x9a, 0xa2, 0x6e, 0x1f, 0x55, 0xcf, 0xe2, 0xc4, 0x1e, 0x40, 0x5b,
	0xba, 0x10, 0xce, 0x23, 0x8e, 0xa6, 0x35, 0x35, 0x72, 0x58, 0x1a, 0x3e, 0x96, 0x32, 0x69, 0xf3,
	0x01, 0x6c, 0x4a, 0xd2, 0x8e, 0xb8, 0x27, 0x93, 0xf7, 0x45, 0x4a, 0x52, 0xe2, 0x4e, 0x08, 0x1b,
	0x89, 0xb1, 0x26, 0xd4, 0x7a, 0xae, 0xfe, 0x5c, 0x6a, 0x0f, 0x51, 0x69, 0xdf, 0x87, 0xe5, 0x61,
	0x9a, 0x5c, 0xbb, 0x31, 0xe1, 0x3e, 0x61, 0x42, 0x8e, 0x4b, 0xc9, 0x22, 0xcb, 0xe9, 0x48, 0xf1,
	0x51, 0x26, 0xb5, 0xef, 0x41, 0x07, 0xef, 0x9d, 0xc4, 0x1e, 0x53, 0x97, 0x57, 0x03, 0xbe, 0x25,
	0xa5, 0xc7, 0xb1, 0xc7, 0xcc, 0xf5, 0xbf, 0x08, 0xc8, 0xc4, 0xbb, 0x56, 0x26, 0x4d, 0xf5, 0x62,
	0x51, 0xa2, 0x62, 0x7e, 0x94, 0x24, 0xe9, 0xb5, 0x94, 0x01, 0x4b, 0xc3, 0xcf, 0x95, 0x64, 0xf0,
	0x27, 0x0b, 0x6c, 0x6c, 0xa3, 0x23, 0xc2, 0x2f, 0xf2, 0xa2, 0xbe, 0x0f, 0x75, 0x1a, 0xb9, 0xd8,
	0x65, 0xfa, 0x25, 0xd2, 0xbf, 0xd1, 0x7b, 0x05, 0x0a, 0x38, 0x35, 0x8a, 0x3f, 0x5e, 0x34, 0x9f,
	0x3e, 0x86, 0xb6, 0x9a, 0xb3, 0x06, 0xb1, 0x8a, 0xdd, 0xfc, 0x32, 0xc4, 0x26, 0x4e, 0x62, 0x8d,
	0x3a, 0x9b, 0x8b, 0x85, 0xd9, 0x5c, 0x0c, 0x62, 0xe8, 0xbe, 0xea, 0x1e, 0x95, 0xd7, 0xbd, 0xc7,
	0x6c, 0xc4, 0xca, 0x9c, 0x88, 0x7f, 0xb6, 0xc0, 0x3e, 0x26, 0x7c, 0x4a, 0x7d, 0x72, 0x16, 0xe6,
	0x31, 0x77, 0x60, 0xc5, 0x9b, 0x8e, 0xca, 0xa4, 0x90, 0xb1, 0x17, 0x9d, 0x8e, 0x37, 0x1d, 0xbd,
	0x82, 0x0d, 0xb2, 0x47, 0x66, 0xd9, 0xf0, 0x43, 0xb8, 0x93, 0x08, 0x8f, 0x8f, 0x3c, 0x41, 0xe4,
	0x65, 0xb8, 0xc8, 0x9b, 0xc2, 0xb4, 0xcd, 0x86, 0x31, 0x38, 0x96, 0x7a, 0xd3, 0x20, 0xaf, 0x9b,
	0xbc, 0x7f, 0x55, 0x60, 0xf9, 0x2c, 0x2c, 0xe7, 0x6e, 0x13, 0x6a, 0xd3, 0xd0, 0x8c, 0x97, 0xca,
	0x4e, 0xc3, 0x59, 0x9a, 0x86, 0x38, 0x5c, 0xbe, 0x03, 0x5d, 0x3f, 0x4e, 0xf5, 0xc8, 0xd0, 0x67,
	0xc7, 0x04, 0x59, 0xce, 0xb2, 0x1f, 0xa7, 0x38, 0x2b, 0xf4, 0xe1, 0xe5, 0x6e, 0x0a, 0x49, 0x18,
	0xf1, 0xeb, 0x39, 0x7b, 0x71, 0x45, 0x69, 0x0a, 0x7b, 0xb4, 0x38, 0x4b, 0xd4, 0x31, 0xb3, 0x59,
	0xb2, 0x0b, 0xab, 0x48, 0xa2, 0xa1, 0xc7, 0x82, 0x2b, 0x1a, 0x88, 0xb1, 0x7b, 0x39, 0x8c, 0xcd,
	0x06, 0xc2, 0x0d, 0xfb, 0xd0, 0x68, 0x3e, 0x1b, 0xc6, 0x89, 0xfd, 0x6d, 0x58, 0xa6, 0x91, 0x3b,
	0xf1, 0x04, 0x61, 0xbe, 0x6e, 0x0f, 0xd5, 0xf2, 0x6d, 0x1a, 0x1d, 0x2a, 0x29, 0x76, 0xc8, 0x7b,
	0xb0, 0xc1, 0x88, 0xb8, 0x8a, 0xf8, 0x0c, 0xb4, 0x6a, 0xfb, 0x35, 0xad, 0x2d, 0xa3, 0xdf, 0x87,
	0x65, 0xac, 0x43, 0xa1, 0x0c, 0xaa, 0xef, 0x3b, 0x99, 0xf8, 0x45, 0xe9, 0x6f, 0xcc, 0x49, 0xff,
	0x1f, 0x2d, 0x58, 0x73, 0x88, 0xdc, 0x40, 0x38, 0xf3, 0x4b, 0x9f, 0x24, 0x9c, 0x84, 0x91, 0x20,
	0xc5, 0x3a, 0x80, 0x12, 0x61, 0x2d, 0x1e, 0xa8, 0xf9, 0x86, 0x69, 0x75, 0x71, 0x0f, 0x87, 0x54,
	0x88, 0xec, 0x0d, 0xb4, 0xca, 0xd2, 0x10, 0x53, 0x7b, 0x92, 0xab, 0x64, 0x4d, 0x72, 0x1f, 0x4e,
	0x7c, 0x42, 0xa7, 0x24, 0x30, 0x35, 0x31, 0x0e, 0x8e, 0x96, 0xbf, 0x26, 0x81, 0xfe, 0x56, 0x85,
	0xee, 0x93, 0x28, 0x11, 0x65, 0x0a, 0x6d, 0x41, 0x63, 0x1c, 0x25, 0xa2, 0x78, 0xf8, 0xba, 0x14,
	0xfc, 0x8f, 0x46, 0xb7, 0xa4, 0xd1, 0x26, 0xc8, 0x1b, 0xb8, 0xd3, 0xd0, 0xbc, 0x3a, 0x96, 0x58,
	0x1a, 0x9e, 0x85, 0xb8, 0xac, 0x12, 0x35, 0x82, 0xdc, 0x69, 0x28, 0x5f, 0xb2, 0xa0, 0x3f, 0xf6,
	0xcc, 0x5c, 0x3a, 0x98, 0x57, 0xc1, 0xe6, 0x9c, 0x5d, 0xb2, 0x05, 0x0d, 0x16, 0x05, 0xc4, 0x4d,
	0x53, 0x1a, 0xf4, 0xda, 0xdb, 0xd6, 0x4e, 0xcb, 0xa9, 0x4b, 0xc1, 0x69, 0x4a, 0x83, 0xc1, 0x5f,
	0x17, 0x60, 0xfd, 0x53, 0x1e, 0x31, 0x41, 0x58, 0x50, 0x2e, 0xf1, 0x36, 0xb4, 0xcc, 0x06, 0x76,
	0xf3, 0x27, 0x80, 0x59, 0xc1, 0x85, 0x7d, 0x7a, 0x25, 0x1f, 0x12, 0x68, 0xa2, 0xde, 0x01, 0x72,
	0x31, 0x9d, 0x4b, 0xd9, 0x33, 0x95, 0xe6, 0x0c, 0x05, 0x17, 0xaf, 0x19, 0x6b, 0x6d, 0x0d, 0x84,
	0x9b, 0x37, 0x91, 0xb3, 0x35, 0xc7, 0xd2, 0x86, 0xea, 0x55, 0xd0, 0x31, 0x70, 0x65, 0x4b, 0x44,
	0xe4, 0x44, 0x70, 0x4a, 0xcc, 0xf3, 0xa0, 0xa3, 0x21, 0x1d, 0x25, 0x95, 0x3c, 0xcc, 0x31, 0x8d,
	0xe9, 0x12, 0x9a, 0x2e, 0x1b, 0x50, 0x63, 0x7b, 0x0f, 0x3a, 0x19, 0xaa, 0xe2, 0x60, 0x0d, 0x0d,
	0x5b, 0x1a, 0x53, 0xf1, 0x4f, 0xdf, 0x46, 0x21, 0x9a, 0x67, 0xa6, 0xb9, 0x0d, 0xe2, 0x29, 0xbb,
	0xb7, 0xa0, 0x8b, 0x48, 0xa5, 0x47, 0x4e, 0x43, 0x1d, 0x52, 0x2a, 0x0e, 0xf2, 0x87, 0xce, 0xdb,
	0x60, 0x2b, 0xb8, 0x92, 0x2d, 0xa8, 0x53, 0xa2, 0xa6, 0x60, 0x3c, 0xaf, 0xe0, 0x95, 0x99, 0x82,
	0xcf, 0xd9, 0x3e, 0xad, 0xb9, 0x6f, 0x91, 0xef, 0xc2, 0x2a, 0x3e, 0x22, 0xe4, 0xe6, 0x0a, 0xf2,
	0x4a, 0xb7, 0xb3, 0x81, 0x81, 0x3b, 0x2d, 0x30, 0xf5, 0xde, 0x83, 0xb5, 0x82, 0x79, 0x5e, 0xf6,
	0x8e, 0xea, 0xb1, 0xcc, 0xde, 0x14, 0x7f, 0xf0, 0x4d, 0x15, 0xd6, 0x1f, 0x99, 0x0f, 0xcb, 0xa7,
	0x9f, 0x1e, 0xe7, 0xe4, 0xfa, 0xf1, 0xcc, 0x33, 0xe4, 0xde, 0x8d, 0xf5, 0x3d, 0x97, 0x94, 0xf9,
	0x22, 0xff, 0x3e, 0xf4, 0xe4, 0x59, 0xe4, 0xfc, 0x49, 0x62, 0xcf, 0x27, 0xee, 0x24, 0x8a, 0x2e,
	0xd3, 0xb8, 0x40, 0x43, 0x39, 0x3e, 0x9f, 0x1a, 0xf5, 0x21, 0x6a, 0xe5, 0x25, 0x66, 0x1c, 0xd3,
	0x38, 0xf0, 0xf4, 0x45, 0xaa, 0xb3, 0x8e, 0xa7, 0xa8, 0x95, 0x8e, 0x3f, 0x82, 0xad, 0xb9, 0x11,
	0x4b, 0x64, 0xed, 0xcd, 0x06, 0xd5, 0xb4, 0x9d, 0x71, 0xd7, 0x71, 0xb5, 0xfb, 0xe2, 0xac, 0xbb,
	0x0a, 0xad, 0xdd, 0x3f, 0x82, 0xfe, 0x4c, 0xe4, 0x9c, 0x2e, 0x8a, 0xd4, 0x9b, 0xac, 0x1c, 0x39,
	0xa3, 0x4d, 0xc9, 0x59, 0xc7, 0xcd, 0x9d, 0x6b, 0x37, 0x9c, 0x55, 0xdc, 0x97, 0x70, 0xae, 0x3e,
	0xcb, 0xb9, 0xc1, 0x3f, 0x2c, 0xd8, 0xc0, 0xca, 0x1c, 0xa7, 0xc3, 0xc4, 0xe7, 0x34, 0x96, 0xeb,
	0x4e, 0xd5, 0xfa, 0x67, 0xd0, 0x4e, 0x0a, 0x42, 0x59, 0x70, 0xf9, 0x4a, 0x7c, 0x70, 0xa3, 0xe0,
	0xf3, 0xbd, 0x77, 0x8b, 0x12, 0xa7, 0x0c, 0xd4, 0x4f, 0xa1, 0x55, 0x54, 0xcb, 0x49, 0x27, 0xb1,
	0x5c, 0x71, 0x1d, 0x67, 0x5b, 0x49, 0x0a, 0x4e, 0xae, 0x63, 0xfc, 0xac, 0x8a, 0x86, 0xbf, 0x24,
	0xbe, 0x90, 0xc3, 0xb4, 0xa2, 0x94, 0x4a, 0x70, 0x10, 0xd8, 0x6f, 0x43, 0x57, 0x43, 0x0f, 0x09,
	0x77, 0xc7, 0x1e, 0x0b, 0x26, 0x04, 0xe9, 0xd0, 0x70, 0x56, 0x72, 0xc5, 0x13, 0x94, 0x0f, 0x3e,
	0x86, 0xae, 0x7e, 0x1d, 0xee, 0x0b, 0xc1, 0xe9, 0x30, 0x95, 0x5f, 0x4f, 0x6f, 0x41, 0x4b, 0x0b,
	0x8f, 0x22, 0x2e, 0xe4, 0xaa, 0x5a, 0xbb, 0xc4, 0x2b, 0xed, 0x8f, 0x46, 0x9c, 0x8c, 0x3c, 0x11,
	0x71, 0xa9, 0x58, 0xf9, 0xfb, 0xf2, 0xe0, 0xf7, 0x96, 0xb4, 0x65, 0x81, 0x52, 0xf3, 0x91, 0xfd,
	0x11, 0x2c, 0x9a, 0x56, 0x90, 0x99, 0xf9, 0xd6, 0xcd, 0xcc, 0x14, 0x6c, 0x55, 0x9a, 0xe4, 0x77,
	0xaf, 0xa3, 0x7c, 0xfa, 0x01, 0x34, 0x32, 0xd9, 0x7f, 0x90, 0x81, 0xbb, 0x00, 0x88, 0xa7, 0x3e,
	0xcb, 0xe5, 0x43, 0xbe, 0xe5, 0x20, 0x16, 0x02, 0x0f, 0x3a, 0x85, 0x23, 0x3b, 0x44, 0x3c, 0xf0,
	0xa1, 0xa9, 0xfe, 0x8f, 0xfd, 0xe3, 0xa9, 0x6f, 0x3f, 0x86, 0x46, 0x62, 0xd4, 0xf6, 0xd6, 0x4b,
	0xce, 0xdf, 0x7f, 0xa1, 0xd2, 0x21, 0xa2, 0xdf, 0xfe, 0xea, 0x79, 0xef, 0x9b, 0xda, 0xd7, 0xcf,
	0x7b, 0x95, 0xdf, 0x3d, 0xef, 0x59, 0x0f, 0xff, 0x1f, 0xba, 0x7e, 0x14, 0x96, 0x1d, 0x7e, 0xa1,
	0xae, 0xfd, 0x95, 0x65, 0x7d, 0x6d, 0x59, 0xff, 0xb4, 0xac, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xfb, 0x72, 0x52, 0xa4, 0x8b, 0x16, 0x00, 0x00,
}

//Generated by ntnx_rpc plugin

// Service StatsRpcSvc
type IStatsRpcSvc interface {
	BeforeRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}) error
	AfterRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}, err error) error

	SendStats(*SendStatsArg, *SendStatsRet) error
}

func _StatsRpcSvc_SendStats_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IStatsRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(SendStatsArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &SendStatsRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.SendStats(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

var _StatsRpcSvcDesc = util_net.ServiceDesc{
	Name: "nutanix.stats.StatsRpcSvc",
	Methods: map[string]util_net.ServiceMethodFn{
		"sendStats": _StatsRpcSvc_SendStats_Handler,
	},
}

func NewStatsRpcSvc(impl IStatsRpcSvc) *util_net.Service {
	return &util_net.Service{
		Desc: &_StatsRpcSvcDesc,
		Impl: impl,
	}
}

type IStatsRpcClient interface {
	SendStats(*SendStatsArg) (*SendStatsRet, error)
}

type StatsRpcClient struct {
	Impl util_net.ProtobufRPCClientIfc
}

func NewStatsRpcClient(impl util_net.ProtobufRPCClientIfc) IStatsRpcClient {
	return &StatsRpcClient{
		Impl: impl,
	}
}

func (client *StatsRpcClient) SendStats(
	arg *SendStatsArg) (
	*SendStatsRet, error) {

	ret := &SendStatsRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.stats.StatsRpcSvc", "SendStats", arg, ret, 0)
	return ret, err
}
