// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stats/arithmos/interface/arithmos_type.proto

package arithmos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Error types hit by Arithmos while processing requests.
type ArithmosErrorProto_Type int32

const (
	ArithmosErrorProto_kNoError ArithmosErrorProto_Type = 0
	// Errors generated by RPC backends.
	ArithmosErrorProto_kCanceled       ArithmosErrorProto_Type = 1
	ArithmosErrorProto_kTimeout        ArithmosErrorProto_Type = 2
	ArithmosErrorProto_kTransportError ArithmosErrorProto_Type = 3
	// Arithmos errors.
	ArithmosErrorProto_kInvalidEntityType     ArithmosErrorProto_Type = 6
	ArithmosErrorProto_kInvalidEntityId       ArithmosErrorProto_Type = 7
	ArithmosErrorProto_kInternalError         ArithmosErrorProto_Type = 8
	ArithmosErrorProto_kInvalidFilterCriteria ArithmosErrorProto_Type = 9
	ArithmosErrorProto_kInvalidSortCriteria   ArithmosErrorProto_Type = 10
	ArithmosErrorProto_kInvalidTimeRange      ArithmosErrorProto_Type = 11
	ArithmosErrorProto_kInvalidFieldName      ArithmosErrorProto_Type = 12
	ArithmosErrorProto_kNotMaster             ArithmosErrorProto_Type = 13
	ArithmosErrorProto_kRetry                 ArithmosErrorProto_Type = 14
	ArithmosErrorProto_kNoStats               ArithmosErrorProto_Type = 15
	ArithmosErrorProto_kExceedMaxRequests     ArithmosErrorProto_Type = 16
	ArithmosErrorProto_kInvalidArgs           ArithmosErrorProto_Type = 17
	ArithmosErrorProto_kExists                ArithmosErrorProto_Type = 18
	ArithmosErrorProto_kMedusaError           ArithmosErrorProto_Type = 19
	ArithmosErrorProto_kCassandraError        ArithmosErrorProto_Type = 20
	ArithmosErrorProto_kPithosError           ArithmosErrorProto_Type = 21
	ArithmosErrorProto_kZeusError             ArithmosErrorProto_Type = 22
	ArithmosErrorProto_kInvalidCursor         ArithmosErrorProto_Type = 23
	ArithmosErrorProto_kEmbeddedVM            ArithmosErrorProto_Type = 24
	// The following is not a real error. It is just used to maintain a
	// count of the error values.
	ArithmosErrorProto_kNumErrors ArithmosErrorProto_Type = 25
)

var ArithmosErrorProto_Type_name = map[int32]string{
	0:  "kNoError",
	1:  "kCanceled",
	2:  "kTimeout",
	3:  "kTransportError",
	6:  "kInvalidEntityType",
	7:  "kInvalidEntityId",
	8:  "kInternalError",
	9:  "kInvalidFilterCriteria",
	10: "kInvalidSortCriteria",
	11: "kInvalidTimeRange",
	12: "kInvalidFieldName",
	13: "kNotMaster",
	14: "kRetry",
	15: "kNoStats",
	16: "kExceedMaxRequests",
	17: "kInvalidArgs",
	18: "kExists",
	19: "kMedusaError",
	20: "kCassandraError",
	21: "kPithosError",
	22: "kZeusError",
	23: "kInvalidCursor",
	24: "kEmbeddedVM",
	25: "kNumErrors",
}

var ArithmosErrorProto_Type_value = map[string]int32{
	"kNoError":               0,
	"kCanceled":              1,
	"kTimeout":               2,
	"kTransportError":        3,
	"kInvalidEntityType":     6,
	"kInvalidEntityId":       7,
	"kInternalError":         8,
	"kInvalidFilterCriteria": 9,
	"kInvalidSortCriteria":   10,
	"kInvalidTimeRange":      11,
	"kInvalidFieldName":      12,
	"kNotMaster":             13,
	"kRetry":                 14,
	"kNoStats":               15,
	"kExceedMaxRequests":     16,
	"kInvalidArgs":           17,
	"kExists":                18,
	"kMedusaError":           19,
	"kCassandraError":        20,
	"kPithosError":           21,
	"kZeusError":             22,
	"kInvalidCursor":         23,
	"kEmbeddedVM":            24,
	"kNumErrors":             25,
}

func (x ArithmosErrorProto_Type) Enum() *ArithmosErrorProto_Type {
	p := new(ArithmosErrorProto_Type)
	*p = x
	return p
}

func (x ArithmosErrorProto_Type) String() string {
	return proto.EnumName(ArithmosErrorProto_Type_name, int32(x))
}

func (x *ArithmosErrorProto_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ArithmosErrorProto_Type_value, data, "ArithmosErrorProto_Type")
	if err != nil {
		return err
	}
	*x = ArithmosErrorProto_Type(value)
	return nil
}

func (ArithmosErrorProto_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{0, 0}
}

// Define enums for different entity types that are used between prism
// gateway, arithmos master and arithmos agent.
type ArithmosEntityProto_Type int32

const (
	ArithmosEntityProto_kInvalidEntity                ArithmosEntityProto_Type = 0
	ArithmosEntityProto_kDisk                         ArithmosEntityProto_Type = 1
	ArithmosEntityProto_kVDisk                        ArithmosEntityProto_Type = 2
	ArithmosEntityProto_kVM                           ArithmosEntityProto_Type = 3
	ArithmosEntityProto_kContainer                    ArithmosEntityProto_Type = 4
	ArithmosEntityProto_kStoragePool                  ArithmosEntityProto_Type = 5
	ArithmosEntityProto_kNode                         ArithmosEntityProto_Type = 6
	ArithmosEntityProto_kCluster                      ArithmosEntityProto_Type = 7
	ArithmosEntityProto_kVirtualDisk                  ArithmosEntityProto_Type = 8
	ArithmosEntityProto_kRemoteSite                   ArithmosEntityProto_Type = 9
	ArithmosEntityProto_kProtectionDomain             ArithmosEntityProto_Type = 10
	ArithmosEntityProto_kSnapshot                     ArithmosEntityProto_Type = 11
	ArithmosEntityProto_kReplicationLink              ArithmosEntityProto_Type = 12
	ArithmosEntityProto_kNetworkSwitchInterface       ArithmosEntityProto_Type = 13
	ArithmosEntityProto_kNetworkSwitch                ArithmosEntityProto_Type = 14
	ArithmosEntityProto_kVirtualNic                   ArithmosEntityProto_Type = 15
	ArithmosEntityProto_kVMKernelNic                  ArithmosEntityProto_Type = 16
	ArithmosEntityProto_kHostNic                      ArithmosEntityProto_Type = 17
	ArithmosEntityProto_kSyncReplication              ArithmosEntityProto_Type = 18
	ArithmosEntityProto_kVirtualNetwork               ArithmosEntityProto_Type = 19
	ArithmosEntityProto_kVolumeGroup                  ArithmosEntityProto_Type = 20
	ArithmosEntityProto_kImage                        ArithmosEntityProto_Type = 21
	ArithmosEntityProto_kFileServer                   ArithmosEntityProto_Type = 22
	ArithmosEntityProto_kFileServerShare              ArithmosEntityProto_Type = 23
	ArithmosEntityProto_kAppContainer                 ArithmosEntityProto_Type = 24
	ArithmosEntityProto_kHostGpu                      ArithmosEntityProto_Type = 25
	ArithmosEntityProto_kVirtualGpu                   ArithmosEntityProto_Type = 26
	ArithmosEntityProto_kDRVDisk                      ArithmosEntityProto_Type = 27
	ArithmosEntityProto_kProtectionDomainSchedule     ArithmosEntityProto_Type = 28
	ArithmosEntityProto_kVmSnapshot                   ArithmosEntityProto_Type = 29
	ArithmosEntityProto_kEntityBackup                 ArithmosEntityProto_Type = 30
	ArithmosEntityProto_kRecoveryPointReplicationStat ArithmosEntityProto_Type = 31
	ArithmosEntityProto_kReplicationTargetInfo        ArithmosEntityProto_Type = 32
)

var ArithmosEntityProto_Type_name = map[int32]string{
	0:  "kInvalidEntity",
	1:  "kDisk",
	2:  "kVDisk",
	3:  "kVM",
	4:  "kContainer",
	5:  "kStoragePool",
	6:  "kNode",
	7:  "kCluster",
	8:  "kVirtualDisk",
	9:  "kRemoteSite",
	10: "kProtectionDomain",
	11: "kSnapshot",
	12: "kReplicationLink",
	13: "kNetworkSwitchInterface",
	14: "kNetworkSwitch",
	15: "kVirtualNic",
	16: "kVMKernelNic",
	17: "kHostNic",
	18: "kSyncReplication",
	19: "kVirtualNetwork",
	20: "kVolumeGroup",
	21: "kImage",
	22: "kFileServer",
	23: "kFileServerShare",
	24: "kAppContainer",
	25: "kHostGpu",
	26: "kVirtualGpu",
	27: "kDRVDisk",
	28: "kProtectionDomainSchedule",
	29: "kVmSnapshot",
	30: "kEntityBackup",
	31: "kRecoveryPointReplicationStat",
	32: "kReplicationTargetInfo",
}

var ArithmosEntityProto_Type_value = map[string]int32{
	"kInvalidEntity":                0,
	"kDisk":                         1,
	"kVDisk":                        2,
	"kVM":                           3,
	"kContainer":                    4,
	"kStoragePool":                  5,
	"kNode":                         6,
	"kCluster":                      7,
	"kVirtualDisk":                  8,
	"kRemoteSite":                   9,
	"kProtectionDomain":             10,
	"kSnapshot":                     11,
	"kReplicationLink":              12,
	"kNetworkSwitchInterface":       13,
	"kNetworkSwitch":                14,
	"kVirtualNic":                   15,
	"kVMKernelNic":                  16,
	"kHostNic":                      17,
	"kSyncReplication":              18,
	"kVirtualNetwork":               19,
	"kVolumeGroup":                  20,
	"kImage":                        21,
	"kFileServer":                   22,
	"kFileServerShare":              23,
	"kAppContainer":                 24,
	"kHostGpu":                      25,
	"kVirtualGpu":                   26,
	"kDRVDisk":                      27,
	"kProtectionDomainSchedule":     28,
	"kVmSnapshot":                   29,
	"kEntityBackup":                 30,
	"kRecoveryPointReplicationStat": 31,
	"kReplicationTargetInfo":        32,
}

func (x ArithmosEntityProto_Type) Enum() *ArithmosEntityProto_Type {
	p := new(ArithmosEntityProto_Type)
	*p = x
	return p
}

func (x ArithmosEntityProto_Type) String() string {
	return proto.EnumName(ArithmosEntityProto_Type_name, int32(x))
}

func (x *ArithmosEntityProto_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ArithmosEntityProto_Type_value, data, "ArithmosEntityProto_Type")
	if err != nil {
		return err
	}
	*x = ArithmosEntityProto_Type(value)
	return nil
}

func (ArithmosEntityProto_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{1, 0}
}

type FieldMergeOperation_Type int32

const (
	// If two integers are merged with kInvalid, the return value is -1.
	// If two strings are merged with kInvalid, the return value is empty
	// string.
	FieldMergeOperation_kInvalid FieldMergeOperation_Type = 0
	// Add the values: (x1 + x2).
	FieldMergeOperation_kAdd FieldMergeOperation_Type = 1
	// Average the values: ((x1 + x2) /2).
	FieldMergeOperation_kAverage FieldMergeOperation_Type = 2
	// The max of the values: (x1 > x2 ? x1 : x2).
	FieldMergeOperation_kMax FieldMergeOperation_Type = 3
	// The min of the values: (x1 < x2 ? x1 : x2).
	FieldMergeOperation_kMin FieldMergeOperation_Type = 4
	// The last of values: (x1, x2) returns x2.
	FieldMergeOperation_kLast FieldMergeOperation_Type = 5
)

var FieldMergeOperation_Type_name = map[int32]string{
	0: "kInvalid",
	1: "kAdd",
	2: "kAverage",
	3: "kMax",
	4: "kMin",
	5: "kLast",
}

var FieldMergeOperation_Type_value = map[string]int32{
	"kInvalid": 0,
	"kAdd":     1,
	"kAverage": 2,
	"kMax":     3,
	"kMin":     4,
	"kLast":    5,
}

func (x FieldMergeOperation_Type) Enum() *FieldMergeOperation_Type {
	p := new(FieldMergeOperation_Type)
	*p = x
	return p
}

func (x FieldMergeOperation_Type) String() string {
	return proto.EnumName(FieldMergeOperation_Type_name, int32(x))
}

func (x *FieldMergeOperation_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FieldMergeOperation_Type_value, data, "FieldMergeOperation_Type")
	if err != nil {
		return err
	}
	*x = FieldMergeOperation_Type(value)
	return nil
}

func (FieldMergeOperation_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{8, 0}
}

type FieldDeriveOperation_Type int32

const (
	// No operation is performed. Undefined behavior.
	FieldDeriveOperation_kInvalid FieldDeriveOperation_Type = 0
	// x0 + x1.
	FieldDeriveOperation_kAdd FieldDeriveOperation_Type = 1
	// x0 - x1.
	FieldDeriveOperation_kMinus FieldDeriveOperation_Type = 2
	// x0 / x1.
	FieldDeriveOperation_kDivide FieldDeriveOperation_Type = 3
	// (x0 - x1) / x0.
	FieldDeriveOperation_kMinusDivide FieldDeriveOperation_Type = 4
	// (x0 - x1) / x2.
	FieldDeriveOperation_kMinusDivide3 FieldDeriveOperation_Type = 5
	// (x0 - x1) / (x2 - x3).
	FieldDeriveOperation_kMinusDivide4 FieldDeriveOperation_Type = 6
	// (x0 + x1) / x2.
	FieldDeriveOperation_kAddDivide3 FieldDeriveOperation_Type = 7
	// x0 + x1 + x2
	FieldDeriveOperation_kAdd3 FieldDeriveOperation_Type = 8
	// (x0 + x1) / (x2 + x3).
	FieldDeriveOperation_kAddDivide4 FieldDeriveOperation_Type = 9
	// (x0 + x1 + x2) / x3.
	FieldDeriveOperation_kAdd3Divide4 FieldDeriveOperation_Type = 10
	// (x0 + x1 + x2 + x3) / x4.
	FieldDeriveOperation_kAdd4Divide5 FieldDeriveOperation_Type = 11
	// x0 + x1 + x2 + x3.
	FieldDeriveOperation_kAdd4 FieldDeriveOperation_Type = 12
)

var FieldDeriveOperation_Type_name = map[int32]string{
	0:  "kInvalid",
	1:  "kAdd",
	2:  "kMinus",
	3:  "kDivide",
	4:  "kMinusDivide",
	5:  "kMinusDivide3",
	6:  "kMinusDivide4",
	7:  "kAddDivide3",
	8:  "kAdd3",
	9:  "kAddDivide4",
	10: "kAdd3Divide4",
	11: "kAdd4Divide5",
	12: "kAdd4",
}

var FieldDeriveOperation_Type_value = map[string]int32{
	"kInvalid":      0,
	"kAdd":          1,
	"kMinus":        2,
	"kDivide":       3,
	"kMinusDivide":  4,
	"kMinusDivide3": 5,
	"kMinusDivide4": 6,
	"kAddDivide3":   7,
	"kAdd3":         8,
	"kAddDivide4":   9,
	"kAdd3Divide4":  10,
	"kAdd4Divide5":  11,
	"kAdd4":         12,
}

func (x FieldDeriveOperation_Type) Enum() *FieldDeriveOperation_Type {
	p := new(FieldDeriveOperation_Type)
	*p = x
	return p
}

func (x FieldDeriveOperation_Type) String() string {
	return proto.EnumName(FieldDeriveOperation_Type_name, int32(x))
}

func (x *FieldDeriveOperation_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FieldDeriveOperation_Type_value, data, "FieldDeriveOperation_Type")
	if err != nil {
		return err
	}
	*x = FieldDeriveOperation_Type(value)
	return nil
}

func (FieldDeriveOperation_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{9, 0}
}

type StatNormalizeOperation_Type int32

const (
	// No normalization needed.
	StatNormalizeOperation_kNoNormalize StatNormalizeOperation_Type = 0
	// Normalize the stat with timespan_usecs.
	StatNormalizeOperation_kTimeSpan StatNormalizeOperation_Type = 1
	// Normalize the stat with hypervisor_timespan_usecs.
	StatNormalizeOperation_kHypervisorTimeSpan StatNormalizeOperation_Type = 2
	// Normalize the stat with controller_timespan_usecs.
	StatNormalizeOperation_kControllerTimeSpan StatNormalizeOperation_Type = 3
)

var StatNormalizeOperation_Type_name = map[int32]string{
	0: "kNoNormalize",
	1: "kTimeSpan",
	2: "kHypervisorTimeSpan",
	3: "kControllerTimeSpan",
}

var StatNormalizeOperation_Type_value = map[string]int32{
	"kNoNormalize":        0,
	"kTimeSpan":           1,
	"kHypervisorTimeSpan": 2,
	"kControllerTimeSpan": 3,
}

func (x StatNormalizeOperation_Type) Enum() *StatNormalizeOperation_Type {
	p := new(StatNormalizeOperation_Type)
	*p = x
	return p
}

func (x StatNormalizeOperation_Type) String() string {
	return proto.EnumName(StatNormalizeOperation_Type_name, int32(x))
}

func (x *StatNormalizeOperation_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StatNormalizeOperation_Type_value, data, "StatNormalizeOperation_Type")
	if err != nil {
		return err
	}
	*x = StatNormalizeOperation_Type(value)
	return nil
}

func (StatNormalizeOperation_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{10, 0}
}

// The support attribute datatype.
type AttributeProperties_DataType int32

const (
	// Int64.
	AttributeProperties_kInt64 AttributeProperties_DataType = 0
	// String.
	AttributeProperties_kString AttributeProperties_DataType = 1
	// Repeated string.
	AttributeProperties_kRepeatedString AttributeProperties_DataType = 2
)

var AttributeProperties_DataType_name = map[int32]string{
	0: "kInt64",
	1: "kString",
	2: "kRepeatedString",
}

var AttributeProperties_DataType_value = map[string]int32{
	"kInt64":          0,
	"kString":         1,
	"kRepeatedString": 2,
}

func (x AttributeProperties_DataType) Enum() *AttributeProperties_DataType {
	p := new(AttributeProperties_DataType)
	*p = x
	return p
}

func (x AttributeProperties_DataType) String() string {
	return proto.EnumName(AttributeProperties_DataType_name, int32(x))
}

func (x *AttributeProperties_DataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AttributeProperties_DataType_value, data, "AttributeProperties_DataType")
	if err != nil {
		return err
	}
	*x = AttributeProperties_DataType(value)
	return nil
}

func (AttributeProperties_DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{12, 0}
}

// The lowest Arithmos version that exists in the cluster. This is updated
// only when all arithmos have moved to a new version. The values for every
// enum entry should be such that, for any particular value, all entries with
// value <= that should also be valid. Whenever a new version is introduced
// here, the current arithmos version should be updated in
// 'arithmos_version.h'.
type ArithmosStatus_ArithmosVersion int32

const (
	// Before 4.6.
	ArithmosStatus_kNoVersion ArithmosStatus_ArithmosVersion = 0
	// In 4.6, Arithmos aggregates Volume Groups.
	ArithmosStatus_kVolumeGroupAggregationVersion ArithmosStatus_ArithmosVersion = 1
	// In 4.6.1, Arithmos partitions VDisks, Volume Group's Virtual Disks.
	ArithmosStatus_kPartitionEntities ArithmosStatus_ArithmosVersion = 2
	// In Asterix, Arithmos stores entity partitions in Pithos.
	ArithmosStatus_kPithosEntityPartitions ArithmosStatus_ArithmosVersion = 3
	// In Obelix, Arithmos distributes volume groups among agents.
	ArithmosStatus_kAgentVolumeGroups ArithmosStatus_ArithmosVersion = 4
)

var ArithmosStatus_ArithmosVersion_name = map[int32]string{
	0: "kNoVersion",
	1: "kVolumeGroupAggregationVersion",
	2: "kPartitionEntities",
	3: "kPithosEntityPartitions",
	4: "kAgentVolumeGroups",
}

var ArithmosStatus_ArithmosVersion_value = map[string]int32{
	"kNoVersion":                     0,
	"kVolumeGroupAggregationVersion": 1,
	"kPartitionEntities":             2,
	"kPithosEntityPartitions":        3,
	"kAgentVolumeGroups":             4,
}

func (x ArithmosStatus_ArithmosVersion) Enum() *ArithmosStatus_ArithmosVersion {
	p := new(ArithmosStatus_ArithmosVersion)
	*p = x
	return p
}

func (x ArithmosStatus_ArithmosVersion) String() string {
	return proto.EnumName(ArithmosStatus_ArithmosVersion_name, int32(x))
}

func (x *ArithmosStatus_ArithmosVersion) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ArithmosStatus_ArithmosVersion_value, data, "ArithmosStatus_ArithmosVersion")
	if err != nil {
		return err
	}
	*x = ArithmosStatus_ArithmosVersion(value)
	return nil
}

func (ArithmosStatus_ArithmosVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{33, 0}
}

type ArithmosErrorProto struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArithmosErrorProto) Reset()         { *m = ArithmosErrorProto{} }
func (m *ArithmosErrorProto) String() string { return proto.CompactTextString(m) }
func (*ArithmosErrorProto) ProtoMessage()    {}
func (*ArithmosErrorProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{0}
}

func (m *ArithmosErrorProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArithmosErrorProto.Unmarshal(m, b)
}
func (m *ArithmosErrorProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArithmosErrorProto.Marshal(b, m, deterministic)
}
func (m *ArithmosErrorProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArithmosErrorProto.Merge(m, src)
}
func (m *ArithmosErrorProto) XXX_Size() int {
	return xxx_messageInfo_ArithmosErrorProto.Size(m)
}
func (m *ArithmosErrorProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ArithmosErrorProto.DiscardUnknown(m)
}

var xxx_messageInfo_ArithmosErrorProto proto.InternalMessageInfo

type ArithmosEntityProto struct {
	// The entity type in enum values above.
	EntityTypeEnum *ArithmosEntityProto_Type `protobuf:"varint,1,opt,name=entity_type_enum,json=entityTypeEnum,enum=nutanix.arithmos.interface.ArithmosEntityProto_Type" json:"entity_type_enum,omitempty"`
	// The entity type in string.
	EntityTypeStr        *string  `protobuf:"bytes,2,opt,name=entity_type_str,json=entityTypeStr" json:"entity_type_str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArithmosEntityProto) Reset()         { *m = ArithmosEntityProto{} }
func (m *ArithmosEntityProto) String() string { return proto.CompactTextString(m) }
func (*ArithmosEntityProto) ProtoMessage()    {}
func (*ArithmosEntityProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{1}
}

func (m *ArithmosEntityProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArithmosEntityProto.Unmarshal(m, b)
}
func (m *ArithmosEntityProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArithmosEntityProto.Marshal(b, m, deterministic)
}
func (m *ArithmosEntityProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArithmosEntityProto.Merge(m, src)
}
func (m *ArithmosEntityProto) XXX_Size() int {
	return xxx_messageInfo_ArithmosEntityProto.Size(m)
}
func (m *ArithmosEntityProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ArithmosEntityProto.DiscardUnknown(m)
}

var xxx_messageInfo_ArithmosEntityProto proto.InternalMessageInfo

func (m *ArithmosEntityProto) GetEntityTypeEnum() ArithmosEntityProto_Type {
	if m != nil && m.EntityTypeEnum != nil {
		return *m.EntityTypeEnum
	}
	return ArithmosEntityProto_kInvalidEntity
}

func (m *ArithmosEntityProto) GetEntityTypeStr() string {
	if m != nil && m.EntityTypeStr != nil {
		return *m.EntityTypeStr
	}
	return ""
}

type TimeRangeStat struct {
	// The start time of the data in microsecods since Epoch.
	StartTimeUsecs *int64 `protobuf:"varint,1,req,name=start_time_usecs,json=startTimeUsecs" json:"start_time_usecs,omitempty"`
	// The data sampling interval in seconds.
	SamplingIntervalSecs *int32 `protobuf:"varint,2,req,name=sampling_interval_secs,json=samplingIntervalSecs" json:"sampling_interval_secs,omitempty"`
	// The list of data.
	// All stat datatypes are listed here, howover, only 1 of the datatypes
	// is set based on the requested stats datatype defined in the entity.
	ValueList            []int64  `protobuf:"varint,3,rep,name=value_list,json=valueList" json:"value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeRangeStat) Reset()         { *m = TimeRangeStat{} }
func (m *TimeRangeStat) String() string { return proto.CompactTextString(m) }
func (*TimeRangeStat) ProtoMessage()    {}
func (*TimeRangeStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{2}
}

func (m *TimeRangeStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeRangeStat.Unmarshal(m, b)
}
func (m *TimeRangeStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeRangeStat.Marshal(b, m, deterministic)
}
func (m *TimeRangeStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRangeStat.Merge(m, src)
}
func (m *TimeRangeStat) XXX_Size() int {
	return xxx_messageInfo_TimeRangeStat.Size(m)
}
func (m *TimeRangeStat) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRangeStat.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRangeStat proto.InternalMessageInfo

func (m *TimeRangeStat) GetStartTimeUsecs() int64 {
	if m != nil && m.StartTimeUsecs != nil {
		return *m.StartTimeUsecs
	}
	return 0
}

func (m *TimeRangeStat) GetSamplingIntervalSecs() int32 {
	if m != nil && m.SamplingIntervalSecs != nil {
		return *m.SamplingIntervalSecs
	}
	return 0
}

func (m *TimeRangeStat) GetValueList() []int64 {
	if m != nil {
		return m.ValueList
	}
	return nil
}

// Message that contain commonly used stats.
type CommonStats struct {
	// Number of IO.
	NumIo *int64 `protobuf:"varint,1,opt,name=num_io,json=numIo" json:"num_io,omitempty"`
	// Number of read IO.
	NumReadIo *int64 `protobuf:"varint,2,opt,name=num_read_io,json=numReadIo" json:"num_read_io,omitempty"`
	// Number of random IO.
	NumRandomIo *int64 `protobuf:"varint,3,opt,name=num_random_io,json=numRandomIo" json:"num_random_io,omitempty"`
	// Total IO size.
	TotalIoSizeKbytes *int64 `protobuf:"varint,4,opt,name=total_io_size_kbytes,json=totalIoSizeKbytes" json:"total_io_size_kbytes,omitempty"`
	// Total read IO size.
	TotalReadIoSizeKbytes *int64 `protobuf:"varint,5,opt,name=total_read_io_size_kbytes,json=totalReadIoSizeKbytes" json:"total_read_io_size_kbytes,omitempty"`
	// Total IO time. For example, if there are 2 IOs, each of them takes
	// 1 msecs. The total_io_time_usecs is 2000 usecs.
	TotalIoTimeUsecs *int64 `protobuf:"varint,6,opt,name=total_io_time_usecs,json=totalIoTimeUsecs" json:"total_io_time_usecs,omitempty"`
	// Total read IO time. For example, if there are 2 IOs, each of them takes 1
	// msecs. The total_io_time_usecs is 2000 usecs.
	TotalReadIoTimeUsecs *int64 `protobuf:"varint,7,opt,name=total_read_io_time_usecs,json=totalReadIoTimeUsecs" json:"total_read_io_time_usecs,omitempty"`
	// The time span which the stats is recorded. For example, if stargate is
	// sending data once very 10s, timespan is 10,000,000 usecs.
	TimespanUsecs *int64 `protobuf:"varint,8,opt,name=timespan_usecs,json=timespanUsecs" json:"timespan_usecs,omitempty"`
	// Transformed space usage is bytes after transformation (like compression,
	// encryption etc).
	TotalTransformedUsageBytes *int64 `protobuf:"varint,9,opt,name=total_transformed_usage_bytes,json=totalTransformedUsageBytes" json:"total_transformed_usage_bytes,omitempty"`
	// Transformed space usage before transformation.
	TotalUntransformedUsageBytes *int64 `protobuf:"varint,10,opt,name=total_untransformed_usage_bytes,json=totalUntransformedUsageBytes" json:"total_untransformed_usage_bytes,omitempty"`
	// The time span over which the stats reported by the Hypervisor are
	// recorded.
	HypervisorTimespanUsecs *int64 `protobuf:"varint,11,opt,name=hypervisor_timespan_usecs,json=hypervisorTimespanUsecs" json:"hypervisor_timespan_usecs,omitempty"`
	// Total number of reads and writes as reported by the Hypervisor.
	HypervisorNumIo *int64 `protobuf:"varint,12,opt,name=hypervisor_num_io,json=hypervisorNumIo" json:"hypervisor_num_io,omitempty"`
	// Number of reads as reported by the Hypervisor.
	HypervisorNumReadIo *int64 `protobuf:"varint,13,opt,name=hypervisor_num_read_io,json=hypervisorNumReadIo" json:"hypervisor_num_read_io,omitempty"`
	// Total IO size (reads and writes) as reported by the Hypervisor.
	HypervisorTotalIoSizeKbytes *int64 `protobuf:"varint,14,opt,name=hypervisor_total_io_size_kbytes,json=hypervisorTotalIoSizeKbytes" json:"hypervisor_total_io_size_kbytes,omitempty"`
	// Total read IO size on a virtual disk as reported by the Hypervisor.
	HypervisorTotalReadIoSizeKbytes *int64 `protobuf:"varint,15,opt,name=hypervisor_total_read_io_size_kbytes,json=hypervisorTotalReadIoSizeKbytes" json:"hypervisor_total_read_io_size_kbytes,omitempty"`
	// Total IO time (for the reads and writes) as reported by the Hypervisor.
	HypervisorTotalIoTimeUsecs *int64 `protobuf:"varint,16,opt,name=hypervisor_total_io_time_usecs,json=hypervisorTotalIoTimeUsecs" json:"hypervisor_total_io_time_usecs,omitempty"`
	// Total read IO time as reported by the Hypervisor.
	HypervisorTotalReadIoTimeUsecs *int64 `protobuf:"varint,17,opt,name=hypervisor_total_read_io_time_usecs,json=hypervisorTotalReadIoTimeUsecs" json:"hypervisor_total_read_io_time_usecs,omitempty"`
	// Number of IO.
	ControllerNumIo *int64 `protobuf:"varint,31,opt,name=controller_num_io,json=controllerNumIo" json:"controller_num_io,omitempty"`
	// Number of read IO.
	ControllerNumReadIo *int64 `protobuf:"varint,32,opt,name=controller_num_read_io,json=controllerNumReadIo" json:"controller_num_read_io,omitempty"`
	// Number of random IO.
	ControllerNumRandomIo *int64 `protobuf:"varint,33,opt,name=controller_num_random_io,json=controllerNumRandomIo" json:"controller_num_random_io,omitempty"`
	// Total IO size.
	ControllerTotalIoSizeKbytes *int64 `protobuf:"varint,34,opt,name=controller_total_io_size_kbytes,json=controllerTotalIoSizeKbytes" json:"controller_total_io_size_kbytes,omitempty"`
	// Total read IO size.
	ControllerTotalReadIoSizeKbytes *int64 `protobuf:"varint,35,opt,name=controller_total_read_io_size_kbytes,json=controllerTotalReadIoSizeKbytes" json:"controller_total_read_io_size_kbytes,omitempty"`
	// Total IO time. For example, if there are 2 IOs, each of them takes
	// 1 msecs. The total_io_time_usecs is 2000 usecs.
	ControllerTotalIoTimeUsecs *int64 `protobuf:"varint,36,opt,name=controller_total_io_time_usecs,json=controllerTotalIoTimeUsecs" json:"controller_total_io_time_usecs,omitempty"`
	// Total read IO time. For example, if there are 2 IOs, each of them takes 1
	// msecs. The total_io_time_usecs is 2000 usecs.
	ControllerTotalReadIoTimeUsecs *int64 `protobuf:"varint,37,opt,name=controller_total_read_io_time_usecs,json=controllerTotalReadIoTimeUsecs" json:"controller_total_read_io_time_usecs,omitempty"`
	// The time span which the stats is recorded. For example, if stargate is
	// sending data once very 10s, timespan is 10,000,000 usecs.
	ControllerTimespanUsecs *int64 `protobuf:"varint,38,opt,name=controller_timespan_usecs,json=controllerTimespanUsecs" json:"controller_timespan_usecs,omitempty"`
	// Transformed space usage is bytes after transformation (like compression,
	// encryption etc).
	ControllerTotalTransformedUsageBytes *int64 `protobuf:"varint,39,opt,name=controller_total_transformed_usage_bytes,json=controllerTotalTransformedUsageBytes" json:"controller_total_transformed_usage_bytes,omitempty"`
	// Average read i/o size.
	ControllerAvgReadIoSizeKbytes *int64 `protobuf:"varint,40,opt,name=controller_avg_read_io_size_kbytes,json=controllerAvgReadIoSizeKbytes" json:"controller_avg_read_io_size_kbytes,omitempty"`
	// Average write i/o size.
	ControllerAvgWriteIoSizeKbytes *int64 `protobuf:"varint,41,opt,name=controller_avg_write_io_size_kbytes,json=controllerAvgWriteIoSizeKbytes" json:"controller_avg_write_io_size_kbytes,omitempty"`
	// Number of write IO.
	NumWriteIo *int64 `protobuf:"varint,101,opt,name=num_write_io,json=numWriteIo" json:"num_write_io,omitempty"`
	// Number of sequential IO.
	NumSeqIo *int64 `protobuf:"varint,102,opt,name=num_seq_io,json=numSeqIo" json:"num_seq_io,omitempty"`
	// Number of IO per second.
	NumIops *int64 `protobuf:"varint,103,opt,name=num_iops,json=numIops" json:"num_iops,omitempty"`
	// IO bandwidth - KB per second.
	IoBandwidthKBps *int64 `protobuf:"varint,104,opt,name=io_bandwidth_kBps,json=ioBandwidthKBps" json:"io_bandwidth_kBps,omitempty"`
	// Average IO latency.
	AvgIoLatencyUsecs *int64 `protobuf:"varint,105,opt,name=avg_io_latency_usecs,json=avgIoLatencyUsecs" json:"avg_io_latency_usecs,omitempty"`
	// Average read IO latency. This is not available for VDisk, Disk, Node,
	// StoragePool and Cluster since Stargate does not have the stats.
	AvgReadIoLatencyUsecs *int64 `protobuf:"varint,106,opt,name=avg_read_io_latency_usecs,json=avgReadIoLatencyUsecs" json:"avg_read_io_latency_usecs,omitempty"`
	// Read IO percentage expressed in  parts per million. To get percentage,
	// the value should be divided by 1 million and multipled by 100.
	ReadIoPpm *int64 `protobuf:"varint,107,opt,name=read_io_ppm,json=readIoPpm" json:"read_io_ppm,omitempty"`
	// Write IO percentage expressed in parts per million. To get percentage,
	// the value should be divided by 1 million and multipled by 100.
	WriteIoPpm *int64 `protobuf:"varint,108,opt,name=write_io_ppm,json=writeIoPpm" json:"write_io_ppm,omitempty"`
	// Random IO percentage expressed in parts per million. To get percentage,
	// the value should be divided by 1 million and multipled by 100.
	RandomIoPpm *int64 `protobuf:"varint,109,opt,name=random_io_ppm,json=randomIoPpm" json:"random_io_ppm,omitempty"`
	// Sequential IO percentage expressed in parts per million.To get
	// percentage, the value should be divided by 1 million and multipled
	// by 100.
	SeqIoPpm *int64 `protobuf:"varint,110,opt,name=seq_io_ppm,json=seqIoPpm" json:"seq_io_ppm,omitempty"`
	// Number of writes as reported by the Hypervisor.
	HypervisorNumWriteIo *int64 `protobuf:"varint,111,opt,name=hypervisor_num_write_io,json=hypervisorNumWriteIo" json:"hypervisor_num_write_io,omitempty"`
	// Number of IO per second as reported by the Hypervisor.
	HypervisorNumIops *int64 `protobuf:"varint,112,opt,name=hypervisor_num_iops,json=hypervisorNumIops" json:"hypervisor_num_iops,omitempty"`
	// IO bandwidth - KB per second as reported by the Hypervisor.
	HypervisorIoBandwidthKBps *int64 `protobuf:"varint,113,opt,name=hypervisor_io_bandwidth_kBps,json=hypervisorIoBandwidthKBps" json:"hypervisor_io_bandwidth_kBps,omitempty"`
	// Average IO latency as reported by the Hypervisor.
	HypervisorAvgIoLatencyUsecs *int64 `protobuf:"varint,114,opt,name=hypervisor_avg_io_latency_usecs,json=hypervisorAvgIoLatencyUsecs" json:"hypervisor_avg_io_latency_usecs,omitempty"`
	// Average read IO latency as reproted by the Hypervisor.
	HypervisorAvgReadIoLatencyUsecs *int64 `protobuf:"varint,115,opt,name=hypervisor_avg_read_io_latency_usecs,json=hypervisorAvgReadIoLatencyUsecs" json:"hypervisor_avg_read_io_latency_usecs,omitempty"`
	// Number of read IO per second.
	NumReadIops *int64 `protobuf:"varint,116,opt,name=num_read_iops,json=numReadIops" json:"num_read_iops,omitempty"`
	// Number of write IO per second.
	NumWriteIops *int64 `protobuf:"varint,117,opt,name=num_write_iops,json=numWriteIops" json:"num_write_iops,omitempty"`
	// Average read IO latency. This is not available for VDisk, Disk, Node,
	// StoragePool and Cluster since Stargate does not have the stats.
	AvgWriteIoLatencyUsecs *int64 `protobuf:"varint,118,opt,name=avg_write_io_latency_usecs,json=avgWriteIoLatencyUsecs" json:"avg_write_io_latency_usecs,omitempty"`
	// Number of IO per second as reported by the Hypervisor.
	HypervisorNumReadIops *int64 `protobuf:"varint,119,opt,name=hypervisor_num_read_iops,json=hypervisorNumReadIops" json:"hypervisor_num_read_iops,omitempty"`
	// Number of IO per second as reported by the Hypervisor.
	HypervisorNumWriteIops *int64 `protobuf:"varint,120,opt,name=hypervisor_num_write_iops,json=hypervisorNumWriteIops" json:"hypervisor_num_write_iops,omitempty"`
	// Average read IO latency as reproted by the Hypervisor.
	HypervisorAvgWriteIoLatencyUsecs *int64 `protobuf:"varint,121,opt,name=hypervisor_avg_write_io_latency_usecs,json=hypervisorAvgWriteIoLatencyUsecs" json:"hypervisor_avg_write_io_latency_usecs,omitempty"`
	// Number of read write IO per second reported by the Hypervisor.
	HypervisorReadIoBandwidthKBps *int64 `protobuf:"varint,122,opt,name=hypervisor_read_io_bandwidth_kBps,json=hypervisorReadIoBandwidthKBps" json:"hypervisor_read_io_bandwidth_kBps,omitempty"`
	// Number of write write IO per second reported by the Hypervisor.
	HypervisorWriteIoBandwidthKBps *int64 `protobuf:"varint,123,opt,name=hypervisor_write_io_bandwidth_kBps,json=hypervisorWriteIoBandwidthKBps" json:"hypervisor_write_io_bandwidth_kBps,omitempty"`
	// Number of write IO.
	ControllerNumWriteIo *int64 `protobuf:"varint,131,opt,name=controller_num_write_io,json=controllerNumWriteIo" json:"controller_num_write_io,omitempty"`
	// Number of sequential IO.
	ControllerNumSeqIo *int64 `protobuf:"varint,132,opt,name=controller_num_seq_io,json=controllerNumSeqIo" json:"controller_num_seq_io,omitempty"`
	// Number of IO per second.
	ControllerNumIops *int64 `protobuf:"varint,133,opt,name=controller_num_iops,json=controllerNumIops" json:"controller_num_iops,omitempty"`
	// IO bandwidth - KB per second.
	ControllerIoBandwidthKBps *int64 `protobuf:"varint,134,opt,name=controller_io_bandwidth_kBps,json=controllerIoBandwidthKBps" json:"controller_io_bandwidth_kBps,omitempty"`
	// Average IO latency.
	ControllerAvgIoLatencyUsecs *int64 `protobuf:"varint,135,opt,name=controller_avg_io_latency_usecs,json=controllerAvgIoLatencyUsecs" json:"controller_avg_io_latency_usecs,omitempty"`
	// Average read IO latency. This is not available for VDisk, Disk, Node,
	// StoragePool and Cluster since Stargate does not have the stats.
	ControllerAvgReadIoLatencyUsecs *int64 `protobuf:"varint,136,opt,name=controller_avg_read_io_latency_usecs,json=controllerAvgReadIoLatencyUsecs" json:"controller_avg_read_io_latency_usecs,omitempty"`
	// Read IO percentage expressed in  parts per million. To get percentage,
	// the value should be divided by 1 million and multipled by 100.
	ControllerReadIoPpm *int64 `protobuf:"varint,137,opt,name=controller_read_io_ppm,json=controllerReadIoPpm" json:"controller_read_io_ppm,omitempty"`
	// Write IO percentage expressed in parts per million. To get percentage,
	// the value should be divided by 1 million and multipled by 100.
	ControllerWriteIoPpm *int64 `protobuf:"varint,138,opt,name=controller_write_io_ppm,json=controllerWriteIoPpm" json:"controller_write_io_ppm,omitempty"`
	// Random IO percentage expressed in parts per million. To get percentage,
	// the value should be divided by 1 million and multipled by 100.
	ControllerRandomIoPpm *int64 `protobuf:"varint,139,opt,name=controller_random_io_ppm,json=controllerRandomIoPpm" json:"controller_random_io_ppm,omitempty"`
	// Sequential IO percentage expressed in parts per million.To get
	// percentage, the value should be divided by 1 million and multipled
	// by 100.
	ControllerSeqIoPpm *int64 `protobuf:"varint,140,opt,name=controller_seq_io_ppm,json=controllerSeqIoPpm" json:"controller_seq_io_ppm,omitempty"`
	// Number of read IO per second.
	ControllerNumReadIops *int64 `protobuf:"varint,141,opt,name=controller_num_read_iops,json=controllerNumReadIops" json:"controller_num_read_iops,omitempty"`
	// Number of write IO per second.
	ControllerNumWriteIops *int64 `protobuf:"varint,142,opt,name=controller_num_write_iops,json=controllerNumWriteIops" json:"controller_num_write_iops,omitempty"`
	// Average read IO latency. This is not available for VDisk, Disk, Node,
	// StoragePool and Cluster since Stargate does not have the stats.
	ControllerAvgWriteIoLatencyUsecs *int64 `protobuf:"varint,143,opt,name=controller_avg_write_io_latency_usecs,json=controllerAvgWriteIoLatencyUsecs" json:"controller_avg_write_io_latency_usecs,omitempty"`
	// Number of storage controller read IO per second reported by Stargate.
	ControllerReadIoBandwidthKBps *int64 `protobuf:"varint,144,opt,name=controller_read_io_bandwidth_kBps,json=controllerReadIoBandwidthKBps" json:"controller_read_io_bandwidth_kBps,omitempty"`
	// Number of storage controller write IO per second reported by Stargate.
	ControllerWriteIoBandwidthKBps *int64 `protobuf:"varint,145,opt,name=controller_write_io_bandwidth_kBps,json=controllerWriteIoBandwidthKBps" json:"controller_write_io_bandwidth_kBps,omitempty"`
	// Number of disk read IO per second reported by Stargate.
	ReadIoBandwidthKBps *int64 `protobuf:"varint,151,opt,name=read_io_bandwidth_kBps,json=readIoBandwidthKBps" json:"read_io_bandwidth_kBps,omitempty"`
	// Number of disk write IO per second reported by Stargate.
	WriteIoBandwidthKBps *int64   `protobuf:"varint,152,opt,name=write_io_bandwidth_kBps,json=writeIoBandwidthKBps" json:"write_io_bandwidth_kBps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonStats) Reset()         { *m = CommonStats{} }
func (m *CommonStats) String() string { return proto.CompactTextString(m) }
func (*CommonStats) ProtoMessage()    {}
func (*CommonStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{3}
}

func (m *CommonStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonStats.Unmarshal(m, b)
}
func (m *CommonStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonStats.Marshal(b, m, deterministic)
}
func (m *CommonStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonStats.Merge(m, src)
}
func (m *CommonStats) XXX_Size() int {
	return xxx_messageInfo_CommonStats.Size(m)
}
func (m *CommonStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonStats.DiscardUnknown(m)
}

var xxx_messageInfo_CommonStats proto.InternalMessageInfo

func (m *CommonStats) GetNumIo() int64 {
	if m != nil && m.NumIo != nil {
		return *m.NumIo
	}
	return 0
}

func (m *CommonStats) GetNumReadIo() int64 {
	if m != nil && m.NumReadIo != nil {
		return *m.NumReadIo
	}
	return 0
}

func (m *CommonStats) GetNumRandomIo() int64 {
	if m != nil && m.NumRandomIo != nil {
		return *m.NumRandomIo
	}
	return 0
}

func (m *CommonStats) GetTotalIoSizeKbytes() int64 {
	if m != nil && m.TotalIoSizeKbytes != nil {
		return *m.TotalIoSizeKbytes
	}
	return 0
}

func (m *CommonStats) GetTotalReadIoSizeKbytes() int64 {
	if m != nil && m.TotalReadIoSizeKbytes != nil {
		return *m.TotalReadIoSizeKbytes
	}
	return 0
}

func (m *CommonStats) GetTotalIoTimeUsecs() int64 {
	if m != nil && m.TotalIoTimeUsecs != nil {
		return *m.TotalIoTimeUsecs
	}
	return 0
}

func (m *CommonStats) GetTotalReadIoTimeUsecs() int64 {
	if m != nil && m.TotalReadIoTimeUsecs != nil {
		return *m.TotalReadIoTimeUsecs
	}
	return 0
}

func (m *CommonStats) GetTimespanUsecs() int64 {
	if m != nil && m.TimespanUsecs != nil {
		return *m.TimespanUsecs
	}
	return 0
}

func (m *CommonStats) GetTotalTransformedUsageBytes() int64 {
	if m != nil && m.TotalTransformedUsageBytes != nil {
		return *m.TotalTransformedUsageBytes
	}
	return 0
}

func (m *CommonStats) GetTotalUntransformedUsageBytes() int64 {
	if m != nil && m.TotalUntransformedUsageBytes != nil {
		return *m.TotalUntransformedUsageBytes
	}
	return 0
}

func (m *CommonStats) GetHypervisorTimespanUsecs() int64 {
	if m != nil && m.HypervisorTimespanUsecs != nil {
		return *m.HypervisorTimespanUsecs
	}
	return 0
}

func (m *CommonStats) GetHypervisorNumIo() int64 {
	if m != nil && m.HypervisorNumIo != nil {
		return *m.HypervisorNumIo
	}
	return 0
}

func (m *CommonStats) GetHypervisorNumReadIo() int64 {
	if m != nil && m.HypervisorNumReadIo != nil {
		return *m.HypervisorNumReadIo
	}
	return 0
}

func (m *CommonStats) GetHypervisorTotalIoSizeKbytes() int64 {
	if m != nil && m.HypervisorTotalIoSizeKbytes != nil {
		return *m.HypervisorTotalIoSizeKbytes
	}
	return 0
}

func (m *CommonStats) GetHypervisorTotalReadIoSizeKbytes() int64 {
	if m != nil && m.HypervisorTotalReadIoSizeKbytes != nil {
		return *m.HypervisorTotalReadIoSizeKbytes
	}
	return 0
}

func (m *CommonStats) GetHypervisorTotalIoTimeUsecs() int64 {
	if m != nil && m.HypervisorTotalIoTimeUsecs != nil {
		return *m.HypervisorTotalIoTimeUsecs
	}
	return 0
}

func (m *CommonStats) GetHypervisorTotalReadIoTimeUsecs() int64 {
	if m != nil && m.HypervisorTotalReadIoTimeUsecs != nil {
		return *m.HypervisorTotalReadIoTimeUsecs
	}
	return 0
}

func (m *CommonStats) GetControllerNumIo() int64 {
	if m != nil && m.ControllerNumIo != nil {
		return *m.ControllerNumIo
	}
	return 0
}

func (m *CommonStats) GetControllerNumReadIo() int64 {
	if m != nil && m.ControllerNumReadIo != nil {
		return *m.ControllerNumReadIo
	}
	return 0
}

func (m *CommonStats) GetControllerNumRandomIo() int64 {
	if m != nil && m.ControllerNumRandomIo != nil {
		return *m.ControllerNumRandomIo
	}
	return 0
}

func (m *CommonStats) GetControllerTotalIoSizeKbytes() int64 {
	if m != nil && m.ControllerTotalIoSizeKbytes != nil {
		return *m.ControllerTotalIoSizeKbytes
	}
	return 0
}

func (m *CommonStats) GetControllerTotalReadIoSizeKbytes() int64 {
	if m != nil && m.ControllerTotalReadIoSizeKbytes != nil {
		return *m.ControllerTotalReadIoSizeKbytes
	}
	return 0
}

func (m *CommonStats) GetControllerTotalIoTimeUsecs() int64 {
	if m != nil && m.ControllerTotalIoTimeUsecs != nil {
		return *m.ControllerTotalIoTimeUsecs
	}
	return 0
}

func (m *CommonStats) GetControllerTotalReadIoTimeUsecs() int64 {
	if m != nil && m.ControllerTotalReadIoTimeUsecs != nil {
		return *m.ControllerTotalReadIoTimeUsecs
	}
	return 0
}

func (m *CommonStats) GetControllerTimespanUsecs() int64 {
	if m != nil && m.ControllerTimespanUsecs != nil {
		return *m.ControllerTimespanUsecs
	}
	return 0
}

func (m *CommonStats) GetControllerTotalTransformedUsageBytes() int64 {
	if m != nil && m.ControllerTotalTransformedUsageBytes != nil {
		return *m.ControllerTotalTransformedUsageBytes
	}
	return 0
}

func (m *CommonStats) GetControllerAvgReadIoSizeKbytes() int64 {
	if m != nil && m.ControllerAvgReadIoSizeKbytes != nil {
		return *m.ControllerAvgReadIoSizeKbytes
	}
	return 0
}

func (m *CommonStats) GetControllerAvgWriteIoSizeKbytes() int64 {
	if m != nil && m.ControllerAvgWriteIoSizeKbytes != nil {
		return *m.ControllerAvgWriteIoSizeKbytes
	}
	return 0
}

func (m *CommonStats) GetNumWriteIo() int64 {
	if m != nil && m.NumWriteIo != nil {
		return *m.NumWriteIo
	}
	return 0
}

func (m *CommonStats) GetNumSeqIo() int64 {
	if m != nil && m.NumSeqIo != nil {
		return *m.NumSeqIo
	}
	return 0
}

func (m *CommonStats) GetNumIops() int64 {
	if m != nil && m.NumIops != nil {
		return *m.NumIops
	}
	return 0
}

func (m *CommonStats) GetIoBandwidthKBps() int64 {
	if m != nil && m.IoBandwidthKBps != nil {
		return *m.IoBandwidthKBps
	}
	return 0
}

func (m *CommonStats) GetAvgIoLatencyUsecs() int64 {
	if m != nil && m.AvgIoLatencyUsecs != nil {
		return *m.AvgIoLatencyUsecs
	}
	return 0
}

func (m *CommonStats) GetAvgReadIoLatencyUsecs() int64 {
	if m != nil && m.AvgReadIoLatencyUsecs != nil {
		return *m.AvgReadIoLatencyUsecs
	}
	return 0
}

func (m *CommonStats) GetReadIoPpm() int64 {
	if m != nil && m.ReadIoPpm != nil {
		return *m.ReadIoPpm
	}
	return 0
}

func (m *CommonStats) GetWriteIoPpm() int64 {
	if m != nil && m.WriteIoPpm != nil {
		return *m.WriteIoPpm
	}
	return 0
}

func (m *CommonStats) GetRandomIoPpm() int64 {
	if m != nil && m.RandomIoPpm != nil {
		return *m.RandomIoPpm
	}
	return 0
}

func (m *CommonStats) GetSeqIoPpm() int64 {
	if m != nil && m.SeqIoPpm != nil {
		return *m.SeqIoPpm
	}
	return 0
}

func (m *CommonStats) GetHypervisorNumWriteIo() int64 {
	if m != nil && m.HypervisorNumWriteIo != nil {
		return *m.HypervisorNumWriteIo
	}
	return 0
}

func (m *CommonStats) GetHypervisorNumIops() int64 {
	if m != nil && m.HypervisorNumIops != nil {
		return *m.HypervisorNumIops
	}
	return 0
}

func (m *CommonStats) GetHypervisorIoBandwidthKBps() int64 {
	if m != nil && m.HypervisorIoBandwidthKBps != nil {
		return *m.HypervisorIoBandwidthKBps
	}
	return 0
}

func (m *CommonStats) GetHypervisorAvgIoLatencyUsecs() int64 {
	if m != nil && m.HypervisorAvgIoLatencyUsecs != nil {
		return *m.HypervisorAvgIoLatencyUsecs
	}
	return 0
}

func (m *CommonStats) GetHypervisorAvgReadIoLatencyUsecs() int64 {
	if m != nil && m.HypervisorAvgReadIoLatencyUsecs != nil {
		return *m.HypervisorAvgReadIoLatencyUsecs
	}
	return 0
}

func (m *CommonStats) GetNumReadIops() int64 {
	if m != nil && m.NumReadIops != nil {
		return *m.NumReadIops
	}
	return 0
}

func (m *CommonStats) GetNumWriteIops() int64 {
	if m != nil && m.NumWriteIops != nil {
		return *m.NumWriteIops
	}
	return 0
}

func (m *CommonStats) GetAvgWriteIoLatencyUsecs() int64 {
	if m != nil && m.AvgWriteIoLatencyUsecs != nil {
		return *m.AvgWriteIoLatencyUsecs
	}
	return 0
}

func (m *CommonStats) GetHypervisorNumReadIops() int64 {
	if m != nil && m.HypervisorNumReadIops != nil {
		return *m.HypervisorNumReadIops
	}
	return 0
}

func (m *CommonStats) GetHypervisorNumWriteIops() int64 {
	if m != nil && m.HypervisorNumWriteIops != nil {
		return *m.HypervisorNumWriteIops
	}
	return 0
}

func (m *CommonStats) GetHypervisorAvgWriteIoLatencyUsecs() int64 {
	if m != nil && m.HypervisorAvgWriteIoLatencyUsecs != nil {
		return *m.HypervisorAvgWriteIoLatencyUsecs
	}
	return 0
}

func (m *CommonStats) GetHypervisorReadIoBandwidthKBps() int64 {
	if m != nil && m.HypervisorReadIoBandwidthKBps != nil {
		return *m.HypervisorReadIoBandwidthKBps
	}
	return 0
}

func (m *CommonStats) GetHypervisorWriteIoBandwidthKBps() int64 {
	if m != nil && m.HypervisorWriteIoBandwidthKBps != nil {
		return *m.HypervisorWriteIoBandwidthKBps
	}
	return 0
}

func (m *CommonStats) GetControllerNumWriteIo() int64 {
	if m != nil && m.ControllerNumWriteIo != nil {
		return *m.ControllerNumWriteIo
	}
	return 0
}

func (m *CommonStats) GetControllerNumSeqIo() int64 {
	if m != nil && m.ControllerNumSeqIo != nil {
		return *m.ControllerNumSeqIo
	}
	return 0
}

func (m *CommonStats) GetControllerNumIops() int64 {
	if m != nil && m.ControllerNumIops != nil {
		return *m.ControllerNumIops
	}
	return 0
}

func (m *CommonStats) GetControllerIoBandwidthKBps() int64 {
	if m != nil && m.ControllerIoBandwidthKBps != nil {
		return *m.ControllerIoBandwidthKBps
	}
	return 0
}

func (m *CommonStats) GetControllerAvgIoLatencyUsecs() int64 {
	if m != nil && m.ControllerAvgIoLatencyUsecs != nil {
		return *m.ControllerAvgIoLatencyUsecs
	}
	return 0
}

func (m *CommonStats) GetControllerAvgReadIoLatencyUsecs() int64 {
	if m != nil && m.ControllerAvgReadIoLatencyUsecs != nil {
		return *m.ControllerAvgReadIoLatencyUsecs
	}
	return 0
}

func (m *CommonStats) GetControllerReadIoPpm() int64 {
	if m != nil && m.ControllerReadIoPpm != nil {
		return *m.ControllerReadIoPpm
	}
	return 0
}

func (m *CommonStats) GetControllerWriteIoPpm() int64 {
	if m != nil && m.ControllerWriteIoPpm != nil {
		return *m.ControllerWriteIoPpm
	}
	return 0
}

func (m *CommonStats) GetControllerRandomIoPpm() int64 {
	if m != nil && m.ControllerRandomIoPpm != nil {
		return *m.ControllerRandomIoPpm
	}
	return 0
}

func (m *CommonStats) GetControllerSeqIoPpm() int64 {
	if m != nil && m.ControllerSeqIoPpm != nil {
		return *m.ControllerSeqIoPpm
	}
	return 0
}

func (m *CommonStats) GetControllerNumReadIops() int64 {
	if m != nil && m.ControllerNumReadIops != nil {
		return *m.ControllerNumReadIops
	}
	return 0
}

func (m *CommonStats) GetControllerNumWriteIops() int64 {
	if m != nil && m.ControllerNumWriteIops != nil {
		return *m.ControllerNumWriteIops
	}
	return 0
}

func (m *CommonStats) GetControllerAvgWriteIoLatencyUsecs() int64 {
	if m != nil && m.ControllerAvgWriteIoLatencyUsecs != nil {
		return *m.ControllerAvgWriteIoLatencyUsecs
	}
	return 0
}

func (m *CommonStats) GetControllerReadIoBandwidthKBps() int64 {
	if m != nil && m.ControllerReadIoBandwidthKBps != nil {
		return *m.ControllerReadIoBandwidthKBps
	}
	return 0
}

func (m *CommonStats) GetControllerWriteIoBandwidthKBps() int64 {
	if m != nil && m.ControllerWriteIoBandwidthKBps != nil {
		return *m.ControllerWriteIoBandwidthKBps
	}
	return 0
}

func (m *CommonStats) GetReadIoBandwidthKBps() int64 {
	if m != nil && m.ReadIoBandwidthKBps != nil {
		return *m.ReadIoBandwidthKBps
	}
	return 0
}

func (m *CommonStats) GetWriteIoBandwidthKBps() int64 {
	if m != nil && m.WriteIoBandwidthKBps != nil {
		return *m.WriteIoBandwidthKBps
	}
	return 0
}

// This protobuf represents all the stats related to all the entities
// of a specific type defined by 'entity_type'.
type PersistEntityStat struct {
	// Start timestamp of the bucket.
	StartTimestampUsecs *int64 `protobuf:"varint,1,req,name=start_timestamp_usecs,json=startTimestampUsecs" json:"start_timestamp_usecs,omitempty"`
	// Name of the stat that this entry represents.
	StatName *string `protobuf:"bytes,2,req,name=stat_name,json=statName" json:"stat_name,omitempty"`
	// Sampling interval for this stat.
	SamplingIntervalUsecs *int64 `protobuf:"varint,3,opt,name=sampling_interval_usecs,json=samplingIntervalUsecs" json:"sampling_interval_usecs,omitempty"`
	// Stat values.
	StatValueList        []int64  `protobuf:"varint,4,rep,name=stat_value_list,json=statValueList" json:"stat_value_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersistEntityStat) Reset()         { *m = PersistEntityStat{} }
func (m *PersistEntityStat) String() string { return proto.CompactTextString(m) }
func (*PersistEntityStat) ProtoMessage()    {}
func (*PersistEntityStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{4}
}

func (m *PersistEntityStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersistEntityStat.Unmarshal(m, b)
}
func (m *PersistEntityStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersistEntityStat.Marshal(b, m, deterministic)
}
func (m *PersistEntityStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistEntityStat.Merge(m, src)
}
func (m *PersistEntityStat) XXX_Size() int {
	return xxx_messageInfo_PersistEntityStat.Size(m)
}
func (m *PersistEntityStat) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistEntityStat.DiscardUnknown(m)
}

var xxx_messageInfo_PersistEntityStat proto.InternalMessageInfo

func (m *PersistEntityStat) GetStartTimestampUsecs() int64 {
	if m != nil && m.StartTimestampUsecs != nil {
		return *m.StartTimestampUsecs
	}
	return 0
}

func (m *PersistEntityStat) GetStatName() string {
	if m != nil && m.StatName != nil {
		return *m.StatName
	}
	return ""
}

func (m *PersistEntityStat) GetSamplingIntervalUsecs() int64 {
	if m != nil && m.SamplingIntervalUsecs != nil {
		return *m.SamplingIntervalUsecs
	}
	return 0
}

func (m *PersistEntityStat) GetStatValueList() []int64 {
	if m != nil {
		return m.StatValueList
	}
	return nil
}

// This protobuf represents all the attributes related to all the entities
// of a specific type defined by 'entity_type'.
type PersistEntityAttribute struct {
	// Name of the stat that this entry represents.
	AttributeName *string `protobuf:"bytes,1,req,name=attribute_name,json=attributeName" json:"attribute_name,omitempty"`
	// Set if the attribute type is int64.
	AttributeValueInt64 *int64 `protobuf:"varint,2,opt,name=attribute_value_int64,json=attributeValueInt64" json:"attribute_value_int64,omitempty"`
	// Set if the attribute type is string.
	AttributeValueStr    *string  `protobuf:"bytes,3,opt,name=attribute_value_str,json=attributeValueStr" json:"attribute_value_str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersistEntityAttribute) Reset()         { *m = PersistEntityAttribute{} }
func (m *PersistEntityAttribute) String() string { return proto.CompactTextString(m) }
func (*PersistEntityAttribute) ProtoMessage()    {}
func (*PersistEntityAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{5}
}

func (m *PersistEntityAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersistEntityAttribute.Unmarshal(m, b)
}
func (m *PersistEntityAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersistEntityAttribute.Marshal(b, m, deterministic)
}
func (m *PersistEntityAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistEntityAttribute.Merge(m, src)
}
func (m *PersistEntityAttribute) XXX_Size() int {
	return xxx_messageInfo_PersistEntityAttribute.Size(m)
}
func (m *PersistEntityAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistEntityAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_PersistEntityAttribute proto.InternalMessageInfo

func (m *PersistEntityAttribute) GetAttributeName() string {
	if m != nil && m.AttributeName != nil {
		return *m.AttributeName
	}
	return ""
}

func (m *PersistEntityAttribute) GetAttributeValueInt64() int64 {
	if m != nil && m.AttributeValueInt64 != nil {
		return *m.AttributeValueInt64
	}
	return 0
}

func (m *PersistEntityAttribute) GetAttributeValueStr() string {
	if m != nil && m.AttributeValueStr != nil {
		return *m.AttributeValueStr
	}
	return ""
}

type PersistEntity struct {
	// Entity id. This is unique among all entities for a specific entity type
	// specified by 'entity_type'.
	EntityId []byte `protobuf:"bytes,1,req,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	// List of all the stats for this entity that needs to be persisted.
	PersistEntityStatList []*PersistEntityStat `protobuf:"bytes,2,rep,name=persist_entity_stat_list,json=persistEntityStatList" json:"persist_entity_stat_list,omitempty"`
	// List of all the attributes for this entity that needs to be persisted.
	PersistEntityAttributeList []*PersistEntityAttribute `protobuf:"bytes,3,rep,name=persist_entity_attribute_list,json=persistEntityAttributeList" json:"persist_entity_attribute_list,omitempty"`
	// Whether any of the attribute for this entity was updated. This field is
	// only valid for MasterGetInMemoryTimeRangeStats rpc response.
	IsEntityAttributeUpdated *bool `protobuf:"varint,4,opt,name=is_entity_attribute_updated,json=isEntityAttributeUpdated" json:"is_entity_attribute_updated,omitempty"`
	// Last modified timestamp for this entity. This is set when persisting the
	// entity to local file system by Arithmos agent or Cassandra by Arithmos
	// master so that when recovering the entities after a crash, the last update
	// timestamp is set correctly.
	LastUpdatedTimestampUsecs *int64   `protobuf:"varint,5,opt,name=last_updated_timestamp_usecs,json=lastUpdatedTimestampUsecs" json:"last_updated_timestamp_usecs,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *PersistEntity) Reset()         { *m = PersistEntity{} }
func (m *PersistEntity) String() string { return proto.CompactTextString(m) }
func (*PersistEntity) ProtoMessage()    {}
func (*PersistEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{6}
}

func (m *PersistEntity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersistEntity.Unmarshal(m, b)
}
func (m *PersistEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersistEntity.Marshal(b, m, deterministic)
}
func (m *PersistEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistEntity.Merge(m, src)
}
func (m *PersistEntity) XXX_Size() int {
	return xxx_messageInfo_PersistEntity.Size(m)
}
func (m *PersistEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistEntity.DiscardUnknown(m)
}

var xxx_messageInfo_PersistEntity proto.InternalMessageInfo

func (m *PersistEntity) GetEntityId() []byte {
	if m != nil {
		return m.EntityId
	}
	return nil
}

func (m *PersistEntity) GetPersistEntityStatList() []*PersistEntityStat {
	if m != nil {
		return m.PersistEntityStatList
	}
	return nil
}

func (m *PersistEntity) GetPersistEntityAttributeList() []*PersistEntityAttribute {
	if m != nil {
		return m.PersistEntityAttributeList
	}
	return nil
}

func (m *PersistEntity) GetIsEntityAttributeUpdated() bool {
	if m != nil && m.IsEntityAttributeUpdated != nil {
		return *m.IsEntityAttributeUpdated
	}
	return false
}

func (m *PersistEntity) GetLastUpdatedTimestampUsecs() int64 {
	if m != nil && m.LastUpdatedTimestampUsecs != nil {
		return *m.LastUpdatedTimestampUsecs
	}
	return 0
}

type PersistEntityType struct {
	// Type of entity that this protobuf persists.
	EntityType *ArithmosEntityProto_Type `protobuf:"varint,1,opt,name=entity_type,json=entityType,enum=nutanix.arithmos.interface.ArithmosEntityProto_Type" json:"entity_type,omitempty"`
	// List of stats for all entities of a specific 'entity_type'.
	PersistEntityList []*PersistEntity `protobuf:"bytes,2,rep,name=persist_entity_list,json=persistEntityList" json:"persist_entity_list,omitempty"`
	// List of generic attributes common to all entities of specified type
	// 'entity_type'.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,3,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PersistEntityType) Reset()         { *m = PersistEntityType{} }
func (m *PersistEntityType) String() string { return proto.CompactTextString(m) }
func (*PersistEntityType) ProtoMessage()    {}
func (*PersistEntityType) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{7}
}

func (m *PersistEntityType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersistEntityType.Unmarshal(m, b)
}
func (m *PersistEntityType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersistEntityType.Marshal(b, m, deterministic)
}
func (m *PersistEntityType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistEntityType.Merge(m, src)
}
func (m *PersistEntityType) XXX_Size() int {
	return xxx_messageInfo_PersistEntityType.Size(m)
}
func (m *PersistEntityType) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistEntityType.DiscardUnknown(m)
}

var xxx_messageInfo_PersistEntityType proto.InternalMessageInfo

func (m *PersistEntityType) GetEntityType() ArithmosEntityProto_Type {
	if m != nil && m.EntityType != nil {
		return *m.EntityType
	}
	return ArithmosEntityProto_kInvalidEntity
}

func (m *PersistEntityType) GetPersistEntityList() []*PersistEntity {
	if m != nil {
		return m.PersistEntityList
	}
	return nil
}

func (m *PersistEntityType) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

// The supported merge operation field. The merge operation is used when
// merging the same field across time lines or merging the same field
// across different entities.
//
// This is only applicable to raw stat fields. Since derived stats depend
// on raw stats, to merge derived stats, we first merge the dependent raw stats
// and then perform derive operation on the merged raw stats.
// Note: x1 and x2 are the values for the same field at different timestamps or
//       same field from different entities.
type FieldMergeOperation struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldMergeOperation) Reset()         { *m = FieldMergeOperation{} }
func (m *FieldMergeOperation) String() string { return proto.CompactTextString(m) }
func (*FieldMergeOperation) ProtoMessage()    {}
func (*FieldMergeOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{8}
}

func (m *FieldMergeOperation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldMergeOperation.Unmarshal(m, b)
}
func (m *FieldMergeOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldMergeOperation.Marshal(b, m, deterministic)
}
func (m *FieldMergeOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldMergeOperation.Merge(m, src)
}
func (m *FieldMergeOperation) XXX_Size() int {
	return xxx_messageInfo_FieldMergeOperation.Size(m)
}
func (m *FieldMergeOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldMergeOperation.DiscardUnknown(m)
}

var xxx_messageInfo_FieldMergeOperation proto.InternalMessageInfo

// Derive operation. This is only applicable to derived stat fields. xN is
// the dependent raw stat where N is the index in the dependent raw stat vector.
type FieldDeriveOperation struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldDeriveOperation) Reset()         { *m = FieldDeriveOperation{} }
func (m *FieldDeriveOperation) String() string { return proto.CompactTextString(m) }
func (*FieldDeriveOperation) ProtoMessage()    {}
func (*FieldDeriveOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{9}
}

func (m *FieldDeriveOperation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldDeriveOperation.Unmarshal(m, b)
}
func (m *FieldDeriveOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldDeriveOperation.Marshal(b, m, deterministic)
}
func (m *FieldDeriveOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldDeriveOperation.Merge(m, src)
}
func (m *FieldDeriveOperation) XXX_Size() int {
	return xxx_messageInfo_FieldDeriveOperation.Size(m)
}
func (m *FieldDeriveOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldDeriveOperation.DiscardUnknown(m)
}

var xxx_messageInfo_FieldDeriveOperation proto.InternalMessageInfo

// For entity merge, for example, when merging 2 nodes entities, the timespans
// can be different. The approach is to normalize the stats to the minimum
// timespans. The reason is we do not want to extrapolate the stats.
type StatNormalizeOperation struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatNormalizeOperation) Reset()         { *m = StatNormalizeOperation{} }
func (m *StatNormalizeOperation) String() string { return proto.CompactTextString(m) }
func (*StatNormalizeOperation) ProtoMessage()    {}
func (*StatNormalizeOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{10}
}

func (m *StatNormalizeOperation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatNormalizeOperation.Unmarshal(m, b)
}
func (m *StatNormalizeOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatNormalizeOperation.Marshal(b, m, deterministic)
}
func (m *StatNormalizeOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatNormalizeOperation.Merge(m, src)
}
func (m *StatNormalizeOperation) XXX_Size() int {
	return xxx_messageInfo_StatNormalizeOperation.Size(m)
}
func (m *StatNormalizeOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_StatNormalizeOperation.DiscardUnknown(m)
}

var xxx_messageInfo_StatNormalizeOperation proto.InternalMessageInfo

// The stat properties. If the optional fields are not set or set to invalid
// values (-1 for sampling interval_secs), the optional fields will be set to
// default values on the runtime based on the gflags values which specify the
// defaults.
type StatProperties struct {
	// Required: Stat name.
	StatName *string `protobuf:"bytes,1,opt,name=stat_name,json=statName" json:"stat_name,omitempty"`
	// Required: Is this a raw stat? For generic stat, we only support raw stat.
	IsRawStat *bool `protobuf:"varint,2,opt,name=is_raw_stat,json=isRawStat,def=1" json:"is_raw_stat,omitempty"`
	// Optional: Sampling interval.
	SamplingIntervalSecs *int32 `protobuf:"varint,3,opt,name=sampling_interval_secs,json=samplingIntervalSecs,def=-1" json:"sampling_interval_secs,omitempty"`
	// Optional: Number of retention days.
	NumRetentionDays *int32 `protobuf:"varint,4,opt,name=num_retention_days,json=numRetentionDays,def=-1" json:"num_retention_days,omitempty"`
	// Optional: The merge operation when merging the stat across time ranges.
	MergeOperation *FieldMergeOperation_Type `protobuf:"varint,5,opt,name=merge_operation,json=mergeOperation,enum=nutanix.arithmos.interface.FieldMergeOperation_Type,def=0" json:"merge_operation,omitempty"`
	// Optional: The merge operation when merging the stat across different
	//           entities.
	EntityMergeOperation *FieldMergeOperation_Type `protobuf:"varint,6,opt,name=entity_merge_operation,json=entityMergeOperation,enum=nutanix.arithmos.interface.FieldMergeOperation_Type,def=0" json:"entity_merge_operation,omitempty"`
	// Optional : If true, this is a raw stat calculated by aggregating
	//            from agents.
	IsRawStatAggregatedFromAgents *bool `protobuf:"varint,7,opt,name=is_raw_stat_aggregated_from_agents,json=isRawStatAggregatedFromAgents,def=0" json:"is_raw_stat_aggregated_from_agents,omitempty"`
	// Optional: Whether Arithmos should store deltas for each new cumulative
	//           value. The delta is calculated: new_value - prev_value.
	IsCumulativeStat *bool `protobuf:"varint,8,opt,name=is_cumulative_stat,json=isCumulativeStat,def=0" json:"is_cumulative_stat,omitempty"`
	// Optional: Whether Arithmos Get RPCs like MasterGetStats
	//           should return the stats for the last sampling interval,
	//           or rather for the last available stat.
	IsRealtimeStat *bool `protobuf:"varint,9,opt,name=is_realtime_stat,json=isRealtimeStat,def=0" json:"is_realtime_stat,omitempty"`
	// If true, this is a raw performance stat. This is used when Arithmos
	// master is aggregating the stats from all the agents. Arithmos master only
	// updates the raw performance stats when there are nodes that are down. The
	// reason is for non-performance stat like usages (disk usage), Arithmos
	// master does not have complete data to update those stats correctly.
	// This is also used for Arithmos agent when up aggregating the stats. If stat
	// is not avaiable for the specified timed bucket for non raw performance
	// stat, Arithmos agent will use the latest available stat for merging. This
	// is primary used for aggregating usage stat which we do not want a false
	// drop in the usage when stat is not available.
	IsRawPerformanceStat *bool `protobuf:"varint,10,opt,name=is_raw_performance_stat,json=isRawPerformanceStat,def=1" json:"is_raw_performance_stat,omitempty"`
	// Optional: If true, Arithmos optimizes the memory usage for the stat by
	//           minimizing the cache for the stat. Currently, this is only
	//           applicable to Prism Central where Arithmos memory usage can be
	//           very high.
	MinimizeMemoryCache *bool `protobuf:"varint,11,opt,name=minimize_memory_cache,json=minimizeMemoryCache,def=1" json:"minimize_memory_cache,omitempty"`
	// Optional: The size of in-memory timed buffer. Each timed bucket is int64
	//           and contains 'sampling_interval_secs' duration of stat. Note
	//           that this is only applicable for stats with
	//           'num_retention_days==0'.
	NumMemoryBuckets *int32 `protobuf:"varint,12,opt,name=num_memory_buckets,json=numMemoryBuckets,def=10" json:"num_memory_buckets,omitempty"`
	// Optional: Normalize operation before entity merge. This is primarily
	//           used for IO stats before merging them.
	NormalizeOperation *StatNormalizeOperation_Type `protobuf:"varint,13,opt,name=normalize_operation,json=normalizeOperation,enum=nutanix.arithmos.interface.StatNormalizeOperation_Type,def=0" json:"normalize_operation,omitempty"`
	// Required: The derive operation for this stat.
	DeriveOperation *FieldDeriveOperation_Type `protobuf:"varint,21,opt,name=derive_operation,json=deriveOperation,enum=nutanix.arithmos.interface.FieldDeriveOperation_Type,def=0" json:"derive_operation,omitempty"`
	// Required: The dependent raw stats that this derived stat is calculated
	//           from.
	DependentRawStatList []string `protobuf:"bytes,22,rep,name=dependent_raw_stat_list,json=dependentRawStatList" json:"dependent_raw_stat_list,omitempty"`
	// Optional: The multiplier that is applied on the result of the derive
	//           operation.
	DerivedStatMath *float64 `protobuf:"fixed64,23,opt,name=derived_stat_math,json=derivedStatMath,def=1" json:"derived_stat_math,omitempty"`
	// Optional: The description for the attribute. This allows users to
	// describe the stat in generic_attribute_and_stats.proto.template.
	Description *string `protobuf:"bytes,24,opt,name=description" json:"description,omitempty"`
	// Optional: Allow users to disable the check that all the dependent stats
	//           have the same timestamp.
	CheckDependentStatTimes *bool `protobuf:"varint,25,opt,name=check_dependent_stat_times,json=checkDependentStatTimes,def=1" json:"check_dependent_stat_times,omitempty"`
	// Optional:
	// Used in MasterGetInMemoryTimeRangeStatsForEntities RPC.
	// 1. If false, the RPC will return this stat when stat_filter = kAllStats or
	// stats_filter = kNonDownSamplingStats, without any down_sampling.
	// 2. If true, the RPC will return this stat when stats_filter = kAllStats
	// without down sampling, and when stats_filter = kDownSamplingStats after
	// down sampling the stat to user input 'down_sampling_interval'.
	IsDownSamplingAllowed *bool    `protobuf:"varint,26,opt,name=is_down_sampling_allowed,json=isDownSamplingAllowed,def=1" json:"is_down_sampling_allowed,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *StatProperties) Reset()         { *m = StatProperties{} }
func (m *StatProperties) String() string { return proto.CompactTextString(m) }
func (*StatProperties) ProtoMessage()    {}
func (*StatProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{11}
}

func (m *StatProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatProperties.Unmarshal(m, b)
}
func (m *StatProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatProperties.Marshal(b, m, deterministic)
}
func (m *StatProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatProperties.Merge(m, src)
}
func (m *StatProperties) XXX_Size() int {
	return xxx_messageInfo_StatProperties.Size(m)
}
func (m *StatProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_StatProperties.DiscardUnknown(m)
}

var xxx_messageInfo_StatProperties proto.InternalMessageInfo

const Default_StatProperties_IsRawStat bool = true
const Default_StatProperties_SamplingIntervalSecs int32 = -1
const Default_StatProperties_NumRetentionDays int32 = -1
const Default_StatProperties_MergeOperation FieldMergeOperation_Type = FieldMergeOperation_kInvalid
const Default_StatProperties_EntityMergeOperation FieldMergeOperation_Type = FieldMergeOperation_kInvalid
const Default_StatProperties_IsRawStatAggregatedFromAgents bool = false
const Default_StatProperties_IsCumulativeStat bool = false
const Default_StatProperties_IsRealtimeStat bool = false
const Default_StatProperties_IsRawPerformanceStat bool = true
const Default_StatProperties_MinimizeMemoryCache bool = true
const Default_StatProperties_NumMemoryBuckets int32 = 10
const Default_StatProperties_NormalizeOperation StatNormalizeOperation_Type = StatNormalizeOperation_kNoNormalize
const Default_StatProperties_DeriveOperation FieldDeriveOperation_Type = FieldDeriveOperation_kInvalid
const Default_StatProperties_DerivedStatMath float64 = 1
const Default_StatProperties_CheckDependentStatTimes bool = true
const Default_StatProperties_IsDownSamplingAllowed bool = true

func (m *StatProperties) GetStatName() string {
	if m != nil && m.StatName != nil {
		return *m.StatName
	}
	return ""
}

func (m *StatProperties) GetIsRawStat() bool {
	if m != nil && m.IsRawStat != nil {
		return *m.IsRawStat
	}
	return Default_StatProperties_IsRawStat
}

func (m *StatProperties) GetSamplingIntervalSecs() int32 {
	if m != nil && m.SamplingIntervalSecs != nil {
		return *m.SamplingIntervalSecs
	}
	return Default_StatProperties_SamplingIntervalSecs
}

func (m *StatProperties) GetNumRetentionDays() int32 {
	if m != nil && m.NumRetentionDays != nil {
		return *m.NumRetentionDays
	}
	return Default_StatProperties_NumRetentionDays
}

func (m *StatProperties) GetMergeOperation() FieldMergeOperation_Type {
	if m != nil && m.MergeOperation != nil {
		return *m.MergeOperation
	}
	return Default_StatProperties_MergeOperation
}

func (m *StatProperties) GetEntityMergeOperation() FieldMergeOperation_Type {
	if m != nil && m.EntityMergeOperation != nil {
		return *m.EntityMergeOperation
	}
	return Default_StatProperties_EntityMergeOperation
}

func (m *StatProperties) GetIsRawStatAggregatedFromAgents() bool {
	if m != nil && m.IsRawStatAggregatedFromAgents != nil {
		return *m.IsRawStatAggregatedFromAgents
	}
	return Default_StatProperties_IsRawStatAggregatedFromAgents
}

func (m *StatProperties) GetIsCumulativeStat() bool {
	if m != nil && m.IsCumulativeStat != nil {
		return *m.IsCumulativeStat
	}
	return Default_StatProperties_IsCumulativeStat
}

func (m *StatProperties) GetIsRealtimeStat() bool {
	if m != nil && m.IsRealtimeStat != nil {
		return *m.IsRealtimeStat
	}
	return Default_StatProperties_IsRealtimeStat
}

func (m *StatProperties) GetIsRawPerformanceStat() bool {
	if m != nil && m.IsRawPerformanceStat != nil {
		return *m.IsRawPerformanceStat
	}
	return Default_StatProperties_IsRawPerformanceStat
}

func (m *StatProperties) GetMinimizeMemoryCache() bool {
	if m != nil && m.MinimizeMemoryCache != nil {
		return *m.MinimizeMemoryCache
	}
	return Default_StatProperties_MinimizeMemoryCache
}

func (m *StatProperties) GetNumMemoryBuckets() int32 {
	if m != nil && m.NumMemoryBuckets != nil {
		return *m.NumMemoryBuckets
	}
	return Default_StatProperties_NumMemoryBuckets
}

func (m *StatProperties) GetNormalizeOperation() StatNormalizeOperation_Type {
	if m != nil && m.NormalizeOperation != nil {
		return *m.NormalizeOperation
	}
	return Default_StatProperties_NormalizeOperation
}

func (m *StatProperties) GetDeriveOperation() FieldDeriveOperation_Type {
	if m != nil && m.DeriveOperation != nil {
		return *m.DeriveOperation
	}
	return Default_StatProperties_DeriveOperation
}

func (m *StatProperties) GetDependentRawStatList() []string {
	if m != nil {
		return m.DependentRawStatList
	}
	return nil
}

func (m *StatProperties) GetDerivedStatMath() float64 {
	if m != nil && m.DerivedStatMath != nil {
		return *m.DerivedStatMath
	}
	return Default_StatProperties_DerivedStatMath
}

func (m *StatProperties) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *StatProperties) GetCheckDependentStatTimes() bool {
	if m != nil && m.CheckDependentStatTimes != nil {
		return *m.CheckDependentStatTimes
	}
	return Default_StatProperties_CheckDependentStatTimes
}

func (m *StatProperties) GetIsDownSamplingAllowed() bool {
	if m != nil && m.IsDownSamplingAllowed != nil {
		return *m.IsDownSamplingAllowed
	}
	return Default_StatProperties_IsDownSamplingAllowed
}

// The attribute properties. If the optional fields are not set, the optional
// fields will be set to default values on the runtime based on the gflags
// values which specify the defaults.
type AttributeProperties struct {
	// Required: Attribute name.
	AttributeName *string `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName" json:"attribute_name,omitempty"`
	// Required: Attribute datatype.
	AttributeDatatype *AttributeProperties_DataType `protobuf:"varint,2,opt,name=attribute_datatype,json=attributeDatatype,enum=nutanix.arithmos.interface.AttributeProperties_DataType" json:"attribute_datatype,omitempty"`
	// Optional: Merge operation when merging the attribute across different
	//           entities.
	EntityMergeOperation *FieldMergeOperation_Type `protobuf:"varint,3,opt,name=entity_merge_operation,json=entityMergeOperation,enum=nutanix.arithmos.interface.FieldMergeOperation_Type,def=0" json:"entity_merge_operation,omitempty"`
	// Optional: The description for the attribute. This allows users to
	// describe the attribute in generic_attributes_and_stats.proto.template.
	Description          *string  `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttributeProperties) Reset()         { *m = AttributeProperties{} }
func (m *AttributeProperties) String() string { return proto.CompactTextString(m) }
func (*AttributeProperties) ProtoMessage()    {}
func (*AttributeProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{12}
}

func (m *AttributeProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeProperties.Unmarshal(m, b)
}
func (m *AttributeProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeProperties.Marshal(b, m, deterministic)
}
func (m *AttributeProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeProperties.Merge(m, src)
}
func (m *AttributeProperties) XXX_Size() int {
	return xxx_messageInfo_AttributeProperties.Size(m)
}
func (m *AttributeProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeProperties.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeProperties proto.InternalMessageInfo

const Default_AttributeProperties_EntityMergeOperation FieldMergeOperation_Type = FieldMergeOperation_kInvalid

func (m *AttributeProperties) GetAttributeName() string {
	if m != nil && m.AttributeName != nil {
		return *m.AttributeName
	}
	return ""
}

func (m *AttributeProperties) GetAttributeDatatype() AttributeProperties_DataType {
	if m != nil && m.AttributeDatatype != nil {
		return *m.AttributeDatatype
	}
	return AttributeProperties_kInt64
}

func (m *AttributeProperties) GetEntityMergeOperation() FieldMergeOperation_Type {
	if m != nil && m.EntityMergeOperation != nil {
		return *m.EntityMergeOperation
	}
	return Default_AttributeProperties_EntityMergeOperation
}

func (m *AttributeProperties) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

// The data properties for an entity type. It contains both the attribute and
// stat properties.
type DataProperties struct {
	// Required: The entity type.
	EntityType *ArithmosEntityProto `protobuf:"bytes,1,opt,name=entity_type,json=entityType" json:"entity_type,omitempty"`
	// The attribute properties. It has the same number of entries as
	// attribute_name_list.
	AttributePropertiesList []*AttributeProperties `protobuf:"bytes,2,rep,name=attribute_properties_list,json=attributePropertiesList" json:"attribute_properties_list,omitempty"`
	// The stat properties. It has the same number of entries as stat_name_list.
	StatPropertiesList   []*StatProperties `protobuf:"bytes,3,rep,name=stat_properties_list,json=statPropertiesList" json:"stat_properties_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DataProperties) Reset()         { *m = DataProperties{} }
func (m *DataProperties) String() string { return proto.CompactTextString(m) }
func (*DataProperties) ProtoMessage()    {}
func (*DataProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{13}
}

func (m *DataProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataProperties.Unmarshal(m, b)
}
func (m *DataProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataProperties.Marshal(b, m, deterministic)
}
func (m *DataProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataProperties.Merge(m, src)
}
func (m *DataProperties) XXX_Size() int {
	return xxx_messageInfo_DataProperties.Size(m)
}
func (m *DataProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_DataProperties.DiscardUnknown(m)
}

var xxx_messageInfo_DataProperties proto.InternalMessageInfo

func (m *DataProperties) GetEntityType() *ArithmosEntityProto {
	if m != nil {
		return m.EntityType
	}
	return nil
}

func (m *DataProperties) GetAttributePropertiesList() []*AttributeProperties {
	if m != nil {
		return m.AttributePropertiesList
	}
	return nil
}

func (m *DataProperties) GetStatPropertiesList() []*StatProperties {
	if m != nil {
		return m.StatPropertiesList
	}
	return nil
}

// The list of data properties. This is the proto that is kept in the Zookeeper
// data properties node. There are 23 such Zookeeper nodes in total. The data
// properties of an entity type are sharded among these nodes.
type DataPropertiesList struct {
	// The logical timestamp that works like versioning. This is used when
	// updating the Zookeeper node to serialize the updates.
	LogicalTimestamp *int64 `protobuf:"varint,1,opt,name=logical_timestamp,json=logicalTimestamp" json:"logical_timestamp,omitempty"`
	// The list of data properties. Each data properties proto belongs to
	// an entity type.
	DataPropertiesList   []*DataProperties `protobuf:"bytes,2,rep,name=data_properties_list,json=dataPropertiesList" json:"data_properties_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DataPropertiesList) Reset()         { *m = DataPropertiesList{} }
func (m *DataPropertiesList) String() string { return proto.CompactTextString(m) }
func (*DataPropertiesList) ProtoMessage()    {}
func (*DataPropertiesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{14}
}

func (m *DataPropertiesList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataPropertiesList.Unmarshal(m, b)
}
func (m *DataPropertiesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataPropertiesList.Marshal(b, m, deterministic)
}
func (m *DataPropertiesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataPropertiesList.Merge(m, src)
}
func (m *DataPropertiesList) XXX_Size() int {
	return xxx_messageInfo_DataPropertiesList.Size(m)
}
func (m *DataPropertiesList) XXX_DiscardUnknown() {
	xxx_messageInfo_DataPropertiesList.DiscardUnknown(m)
}

var xxx_messageInfo_DataPropertiesList proto.InternalMessageInfo

func (m *DataPropertiesList) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return 0
}

func (m *DataPropertiesList) GetDataPropertiesList() []*DataProperties {
	if m != nil {
		return m.DataPropertiesList
	}
	return nil
}

// Generic stat.
type GenericStat struct {
	// Required: Stat name.
	StatName *string `protobuf:"bytes,1,opt,name=stat_name,json=statName" json:"stat_name,omitempty"`
	// Required: Stat value.
	StatValue            *int64   `protobuf:"varint,2,opt,name=stat_value,json=statValue" json:"stat_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericStat) Reset()         { *m = GenericStat{} }
func (m *GenericStat) String() string { return proto.CompactTextString(m) }
func (*GenericStat) ProtoMessage()    {}
func (*GenericStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{15}
}

func (m *GenericStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericStat.Unmarshal(m, b)
}
func (m *GenericStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericStat.Marshal(b, m, deterministic)
}
func (m *GenericStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericStat.Merge(m, src)
}
func (m *GenericStat) XXX_Size() int {
	return xxx_messageInfo_GenericStat.Size(m)
}
func (m *GenericStat) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericStat.DiscardUnknown(m)
}

var xxx_messageInfo_GenericStat proto.InternalMessageInfo

func (m *GenericStat) GetStatName() string {
	if m != nil && m.StatName != nil {
		return *m.StatName
	}
	return ""
}

func (m *GenericStat) GetStatValue() int64 {
	if m != nil && m.StatValue != nil {
		return *m.StatValue
	}
	return 0
}

// Generic attribute.
type GenericAttribute struct {
	// Required: Attribute name.
	AttributeName *string `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName" json:"attribute_name,omitempty"`
	// Optional: Attribute value in integer.
	AttributeValueInt *int64 `protobuf:"varint,2,opt,name=attribute_value_int,json=attributeValueInt" json:"attribute_value_int,omitempty"`
	// Optional: Attribute value in string.
	AttributeValueStr *string `protobuf:"bytes,3,opt,name=attribute_value_str,json=attributeValueStr" json:"attribute_value_str,omitempty"`
	// Optional: Attribute value in repeated string.
	AttributeValueStrList []string `protobuf:"bytes,4,rep,name=attribute_value_str_list,json=attributeValueStrList" json:"attribute_value_str_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GenericAttribute) Reset()         { *m = GenericAttribute{} }
func (m *GenericAttribute) String() string { return proto.CompactTextString(m) }
func (*GenericAttribute) ProtoMessage()    {}
func (*GenericAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{16}
}

func (m *GenericAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericAttribute.Unmarshal(m, b)
}
func (m *GenericAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericAttribute.Marshal(b, m, deterministic)
}
func (m *GenericAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericAttribute.Merge(m, src)
}
func (m *GenericAttribute) XXX_Size() int {
	return xxx_messageInfo_GenericAttribute.Size(m)
}
func (m *GenericAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_GenericAttribute proto.InternalMessageInfo

func (m *GenericAttribute) GetAttributeName() string {
	if m != nil && m.AttributeName != nil {
		return *m.AttributeName
	}
	return ""
}

func (m *GenericAttribute) GetAttributeValueInt() int64 {
	if m != nil && m.AttributeValueInt != nil {
		return *m.AttributeValueInt
	}
	return 0
}

func (m *GenericAttribute) GetAttributeValueStr() string {
	if m != nil && m.AttributeValueStr != nil {
		return *m.AttributeValueStr
	}
	return ""
}

func (m *GenericAttribute) GetAttributeValueStrList() []string {
	if m != nil {
		return m.AttributeValueStrList
	}
	return nil
}

type Disk struct {
	// Disk id.
	Id    []byte      `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *Disk_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// Configuration data.
	// The node in which the disk belongs to.
	NodeId []byte `protobuf:"bytes,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// The storage tier in which the disk belongs to.
	StorageTier *string `protobuf:"bytes,4,opt,name=storage_tier,json=storageTier" json:"storage_tier,omitempty"`
	// The storage pool in which the disk belongs to.
	StoragePoolId []byte `protobuf:"bytes,5,opt,name=storage_pool_id,json=storagePoolId" json:"storage_pool_id,omitempty"`
	// Size of the disk.
	DiskSizeBytes *int64 `protobuf:"varint,6,opt,name=disk_size_bytes,json=diskSizeBytes" json:"disk_size_bytes,omitempty"`
	// Generic attribute.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,8,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	// Disk uuid.
	DiskUuid []byte `protobuf:"bytes,9,opt,name=disk_uuid,json=diskUuid" json:"disk_uuid,omitempty"`
	// Node uuid.
	NodeUuid []byte `protobuf:"bytes,10,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	// Storage pool uuid.
	StoragePoolUuid      []byte   `protobuf:"bytes,11,opt,name=storage_pool_uuid,json=storagePoolUuid" json:"storage_pool_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Disk) Reset()         { *m = Disk{} }
func (m *Disk) String() string { return proto.CompactTextString(m) }
func (*Disk) ProtoMessage()    {}
func (*Disk) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{17}
}

func (m *Disk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Disk.Unmarshal(m, b)
}
func (m *Disk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Disk.Marshal(b, m, deterministic)
}
func (m *Disk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Disk.Merge(m, src)
}
func (m *Disk) XXX_Size() int {
	return xxx_messageInfo_Disk.Size(m)
}
func (m *Disk) XXX_DiscardUnknown() {
	xxx_messageInfo_Disk.DiscardUnknown(m)
}

var xxx_messageInfo_Disk proto.InternalMessageInfo

func (m *Disk) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Disk) GetStats() *Disk_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Disk) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Disk) GetStorageTier() string {
	if m != nil && m.StorageTier != nil {
		return *m.StorageTier
	}
	return ""
}

func (m *Disk) GetStoragePoolId() []byte {
	if m != nil {
		return m.StoragePoolId
	}
	return nil
}

func (m *Disk) GetDiskSizeBytes() int64 {
	if m != nil && m.DiskSizeBytes != nil {
		return *m.DiskSizeBytes
	}
	return 0
}

func (m *Disk) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

func (m *Disk) GetDiskUuid() []byte {
	if m != nil {
		return m.DiskUuid
	}
	return nil
}

func (m *Disk) GetNodeUuid() []byte {
	if m != nil {
		return m.NodeUuid
	}
	return nil
}

func (m *Disk) GetStoragePoolUuid() []byte {
	if m != nil {
		return m.StoragePoolUuid
	}
	return nil
}

// Disk specific stats.
type Disk_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// The number of written bytes for which fingerprints have been added.
	DedupFingerprintAddedBytes *int64 `protobuf:"varint,2,opt,name=dedup_fingerprint_added_bytes,json=dedupFingerprintAddedBytes" json:"dedup_fingerprint_added_bytes,omitempty"`
	// The number of written bytes for which fingerprints have been cleared.
	DedupFingerprintClearedBytes *int64 `protobuf:"varint,3,opt,name=dedup_fingerprint_cleared_bytes,json=dedupFingerprintClearedBytes" json:"dedup_fingerprint_cleared_bytes,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Disk_Stats) Reset()         { *m = Disk_Stats{} }
func (m *Disk_Stats) String() string { return proto.CompactTextString(m) }
func (*Disk_Stats) ProtoMessage()    {}
func (*Disk_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{17, 0}
}

func (m *Disk_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Disk_Stats.Unmarshal(m, b)
}
func (m *Disk_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Disk_Stats.Marshal(b, m, deterministic)
}
func (m *Disk_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Disk_Stats.Merge(m, src)
}
func (m *Disk_Stats) XXX_Size() int {
	return xxx_messageInfo_Disk_Stats.Size(m)
}
func (m *Disk_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Disk_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Disk_Stats proto.InternalMessageInfo

func (m *Disk_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *Disk_Stats) GetDedupFingerprintAddedBytes() int64 {
	if m != nil && m.DedupFingerprintAddedBytes != nil {
		return *m.DedupFingerprintAddedBytes
	}
	return 0
}

func (m *Disk_Stats) GetDedupFingerprintClearedBytes() int64 {
	if m != nil && m.DedupFingerprintClearedBytes != nil {
		return *m.DedupFingerprintClearedBytes
	}
	return 0
}

func (m *Disk_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

// message VDisk.
type VirtualDisk struct {
	// Virtual disk id. For example, in ESX, this is the uuid of the virtual
	// disk device.
	Id    []byte             `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *VirtualDisk_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// The path to the VDisk in the Nutanix NFS file system. This is typically
	// the path to the virtual disk descriptor file.
	NutanixNfsFilePath *string `protobuf:"bytes,3,opt,name=nutanix_nfs_file_path,json=nutanixNfsFilePath" json:"nutanix_nfs_file_path,omitempty"`
	// The path to the VDisk in the Nutanix NFS file system. Includes all the
	// extents that make up the virtual disk. For eg: In ESX, the disk attached
	// to a VM is defind by a descriptor file named xx.vmdk. The discriptor file
	// has a list of files that actually stores data for the virtual disk. These
	// files are termed as disk_extent_files and are backed by Nutanix vdisks.
	// The nfs file path of the disk extent files are recorded in the
	// 'disk_extents_nutanix_nfs_file_path'.
	DiskExtentsNutanixNfsFilePath []string `protobuf:"bytes,4,rep,name=disk_extents_nutanix_nfs_file_path,json=diskExtentsNutanixNfsFilePath" json:"disk_extents_nutanix_nfs_file_path,omitempty"`
	// The name of the Nutanix vdisk that backs the virtual disk extent is
	// stored in 'disk_extents_nutanix_vdisk_name'. Includes all the names
	// of all the vdisks that back the virtual disk. There exists a 1-1
	// mapping of 'disk_extents_nutanix_vdisk_name' to
	// 'disk_extents_nutanix_nfs_file_path'.
	DiskExtentsNutanixVdiskName [][]byte `protobuf:"bytes,5,rep,name=disk_extents_nutanix_vdisk_name,json=diskExtentsNutanixVdiskName" json:"disk_extents_nutanix_vdisk_name,omitempty"`
	// VM in which the virtual disk is attached to.
	AttachVmId []byte `protobuf:"bytes,6,opt,name=attach_vm_id,json=attachVmId" json:"attach_vm_id,omitempty"`
	// Virtual disk capacity in bytes.
	CapacityBytes *int64 `protobuf:"varint,7,opt,name=capacity_bytes,json=capacityBytes" json:"capacity_bytes,omitempty"`
	// Deprecated. Total number of reads and writes as reported by the Hypervisor
	// since boot.
	HypervisorNumIoSinceBoot *int64 `protobuf:"varint,8,opt,name=hypervisor_num_io_since_boot,json=hypervisorNumIoSinceBoot" json:"hypervisor_num_io_since_boot,omitempty"`
	// Deprecated. Number of reads as reported by the Hypervisor since boot.
	HypervisorNumReadIoSinceBoot *int64 `protobuf:"varint,9,opt,name=hypervisor_num_read_io_since_boot,json=hypervisorNumReadIoSinceBoot" json:"hypervisor_num_read_io_since_boot,omitempty"`
	// Deprecated. Total IO size (reads and writes) as reported by the Hypervisor
	// since boot.
	HypervisorTotalIoSizeSinceBootKbytes *int64 `protobuf:"varint,10,opt,name=hypervisor_total_io_size_since_boot_kbytes,json=hypervisorTotalIoSizeSinceBootKbytes" json:"hypervisor_total_io_size_since_boot_kbytes,omitempty"`
	// Deprecated. Total read IO size on a virtual disk as reported by the
	// Hypervisor since boot.
	HypervisorTotalReadIoSizeSinceBootKbytes *int64 `protobuf:"varint,11,opt,name=hypervisor_total_read_io_size_since_boot_kbytes,json=hypervisorTotalReadIoSizeSinceBootKbytes" json:"hypervisor_total_read_io_size_since_boot_kbytes,omitempty"`
	// Deprecated. Total IO time (for the reads and writes) as reported by the
	// Hypervisor since boot.
	HypervisorTotalIoTimeSinceBootUsecs *int64 `protobuf:"varint,12,opt,name=hypervisor_total_io_time_since_boot_usecs,json=hypervisorTotalIoTimeSinceBootUsecs" json:"hypervisor_total_io_time_since_boot_usecs,omitempty"`
	// Deprecated. Total read IO time as reported by the Hypervisor since boot.
	HypervisorTotalReadIoTimeSinceBootUsecs *int64 `protobuf:"varint,13,opt,name=hypervisor_total_read_io_time_since_boot_usecs,json=hypervisorTotalReadIoTimeSinceBootUsecs" json:"hypervisor_total_read_io_time_since_boot_usecs,omitempty"`
	// The path to iscsi file path.
	// ESX: not set
	// KVM: set (/dev/disk/by-path/ip-192.168.5.2:3260-iscsi-iqn.2010-06.
	//           com.nutanix:diagnostics-10-3-200-53-disk3-933ba06f-lun-0)
	NutanixIscsiFilePath *string `protobuf:"bytes,14,opt,name=nutanix_iscsi_file_path,json=nutanixIscsiFilePath" json:"nutanix_iscsi_file_path,omitempty"`
	// Generic attribute.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,16,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	// Virtual Disk uuid.
	VdiskUuid            []byte   `protobuf:"bytes,17,opt,name=vdisk_uuid,json=vdiskUuid" json:"vdisk_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualDisk) Reset()         { *m = VirtualDisk{} }
func (m *VirtualDisk) String() string { return proto.CompactTextString(m) }
func (*VirtualDisk) ProtoMessage()    {}
func (*VirtualDisk) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{18}
}

func (m *VirtualDisk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualDisk.Unmarshal(m, b)
}
func (m *VirtualDisk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualDisk.Marshal(b, m, deterministic)
}
func (m *VirtualDisk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualDisk.Merge(m, src)
}
func (m *VirtualDisk) XXX_Size() int {
	return xxx_messageInfo_VirtualDisk.Size(m)
}
func (m *VirtualDisk) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualDisk.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualDisk proto.InternalMessageInfo

func (m *VirtualDisk) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *VirtualDisk) GetStats() *VirtualDisk_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *VirtualDisk) GetNutanixNfsFilePath() string {
	if m != nil && m.NutanixNfsFilePath != nil {
		return *m.NutanixNfsFilePath
	}
	return ""
}

func (m *VirtualDisk) GetDiskExtentsNutanixNfsFilePath() []string {
	if m != nil {
		return m.DiskExtentsNutanixNfsFilePath
	}
	return nil
}

func (m *VirtualDisk) GetDiskExtentsNutanixVdiskName() [][]byte {
	if m != nil {
		return m.DiskExtentsNutanixVdiskName
	}
	return nil
}

func (m *VirtualDisk) GetAttachVmId() []byte {
	if m != nil {
		return m.AttachVmId
	}
	return nil
}

func (m *VirtualDisk) GetCapacityBytes() int64 {
	if m != nil && m.CapacityBytes != nil {
		return *m.CapacityBytes
	}
	return 0
}

func (m *VirtualDisk) GetHypervisorNumIoSinceBoot() int64 {
	if m != nil && m.HypervisorNumIoSinceBoot != nil {
		return *m.HypervisorNumIoSinceBoot
	}
	return 0
}

func (m *VirtualDisk) GetHypervisorNumReadIoSinceBoot() int64 {
	if m != nil && m.HypervisorNumReadIoSinceBoot != nil {
		return *m.HypervisorNumReadIoSinceBoot
	}
	return 0
}

func (m *VirtualDisk) GetHypervisorTotalIoSizeSinceBootKbytes() int64 {
	if m != nil && m.HypervisorTotalIoSizeSinceBootKbytes != nil {
		return *m.HypervisorTotalIoSizeSinceBootKbytes
	}
	return 0
}

func (m *VirtualDisk) GetHypervisorTotalReadIoSizeSinceBootKbytes() int64 {
	if m != nil && m.HypervisorTotalReadIoSizeSinceBootKbytes != nil {
		return *m.HypervisorTotalReadIoSizeSinceBootKbytes
	}
	return 0
}

func (m *VirtualDisk) GetHypervisorTotalIoTimeSinceBootUsecs() int64 {
	if m != nil && m.HypervisorTotalIoTimeSinceBootUsecs != nil {
		return *m.HypervisorTotalIoTimeSinceBootUsecs
	}
	return 0
}

func (m *VirtualDisk) GetHypervisorTotalReadIoTimeSinceBootUsecs() int64 {
	if m != nil && m.HypervisorTotalReadIoTimeSinceBootUsecs != nil {
		return *m.HypervisorTotalReadIoTimeSinceBootUsecs
	}
	return 0
}

func (m *VirtualDisk) GetNutanixIscsiFilePath() string {
	if m != nil && m.NutanixIscsiFilePath != nil {
		return *m.NutanixIscsiFilePath
	}
	return ""
}

func (m *VirtualDisk) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

func (m *VirtualDisk) GetVdiskUuid() []byte {
	if m != nil {
		return m.VdiskUuid
	}
	return nil
}

// VDisk specific stats.
type VirtualDisk_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// VDisk total user bytes.
	ControllerUserBytes *int64 `protobuf:"varint,2,opt,name=controller_user_bytes,json=controllerUserBytes" json:"controller_user_bytes,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VirtualDisk_Stats) Reset()         { *m = VirtualDisk_Stats{} }
func (m *VirtualDisk_Stats) String() string { return proto.CompactTextString(m) }
func (*VirtualDisk_Stats) ProtoMessage()    {}
func (*VirtualDisk_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{18, 0}
}

func (m *VirtualDisk_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualDisk_Stats.Unmarshal(m, b)
}
func (m *VirtualDisk_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualDisk_Stats.Marshal(b, m, deterministic)
}
func (m *VirtualDisk_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualDisk_Stats.Merge(m, src)
}
func (m *VirtualDisk_Stats) XXX_Size() int {
	return xxx_messageInfo_VirtualDisk_Stats.Size(m)
}
func (m *VirtualDisk_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualDisk_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualDisk_Stats proto.InternalMessageInfo

func (m *VirtualDisk_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *VirtualDisk_Stats) GetControllerUserBytes() int64 {
	if m != nil && m.ControllerUserBytes != nil {
		return *m.ControllerUserBytes
	}
	return 0
}

func (m *VirtualDisk_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

// This protobuf is used to keep data for Nutanix VDisk. This should not be used
// for keeping data for a virtual disk. Virtual disks data should go to message
// virtualdisk.
type VDisk struct {
	// VDisk id.
	Id    []byte       `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *VDisk_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// VM in which the vdisk is attached to. If vdisk is attached to multiple
	// VMs, then one of them will be randomly selected.
	AttachVirtualDiskId []byte `protobuf:"bytes,3,opt,name=attach_virtual_disk_id,json=attachVirtualDiskId" json:"attach_virtual_disk_id,omitempty"`
	// Corresponding NFS file path of the virtual disk/virtual disk extent that
	// this vdisk represents.
	DiskExtentNutanixNfsFilePath *string `protobuf:"bytes,4,opt,name=disk_extent_nutanix_nfs_file_path,json=diskExtentNutanixNfsFilePath" json:"disk_extent_nutanix_nfs_file_path,omitempty"`
	// Generic attribute.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,6,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	// Vdisk uuid.
	VdiskUuid            []byte   `protobuf:"bytes,7,opt,name=vdisk_uuid,json=vdiskUuid" json:"vdisk_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VDisk) Reset()         { *m = VDisk{} }
func (m *VDisk) String() string { return proto.CompactTextString(m) }
func (*VDisk) ProtoMessage()    {}
func (*VDisk) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{19}
}

func (m *VDisk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VDisk.Unmarshal(m, b)
}
func (m *VDisk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VDisk.Marshal(b, m, deterministic)
}
func (m *VDisk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VDisk.Merge(m, src)
}
func (m *VDisk) XXX_Size() int {
	return xxx_messageInfo_VDisk.Size(m)
}
func (m *VDisk) XXX_DiscardUnknown() {
	xxx_messageInfo_VDisk.DiscardUnknown(m)
}

var xxx_messageInfo_VDisk proto.InternalMessageInfo

func (m *VDisk) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *VDisk) GetStats() *VDisk_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *VDisk) GetAttachVirtualDiskId() []byte {
	if m != nil {
		return m.AttachVirtualDiskId
	}
	return nil
}

func (m *VDisk) GetDiskExtentNutanixNfsFilePath() string {
	if m != nil && m.DiskExtentNutanixNfsFilePath != nil {
		return *m.DiskExtentNutanixNfsFilePath
	}
	return ""
}

func (m *VDisk) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

func (m *VDisk) GetVdiskUuid() []byte {
	if m != nil {
		return m.VdiskUuid
	}
	return nil
}

// VDisk specific stats.
type VDisk_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// VDisk total user bytes.
	ControllerUserBytes *int64 `protobuf:"varint,2,opt,name=controller_user_bytes,json=controllerUserBytes" json:"controller_user_bytes,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VDisk_Stats) Reset()         { *m = VDisk_Stats{} }
func (m *VDisk_Stats) String() string { return proto.CompactTextString(m) }
func (*VDisk_Stats) ProtoMessage()    {}
func (*VDisk_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{19, 0}
}

func (m *VDisk_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VDisk_Stats.Unmarshal(m, b)
}
func (m *VDisk_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VDisk_Stats.Marshal(b, m, deterministic)
}
func (m *VDisk_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VDisk_Stats.Merge(m, src)
}
func (m *VDisk_Stats) XXX_Size() int {
	return xxx_messageInfo_VDisk_Stats.Size(m)
}
func (m *VDisk_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_VDisk_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_VDisk_Stats proto.InternalMessageInfo

func (m *VDisk_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *VDisk_Stats) GetControllerUserBytes() int64 {
	if m != nil && m.ControllerUserBytes != nil {
		return *m.ControllerUserBytes
	}
	return 0
}

func (m *VDisk_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

type VM struct {
	// VM id.
	Id    []byte    `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *VM_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// Configuration data.
	// VM name.
	VmName *string `protobuf:"bytes,3,opt,name=vm_name,json=vmName" json:"vm_name,omitempty"`
	// Number of VCPUs that the VM has.
	NumVcpus *int64 `protobuf:"varint,4,opt,name=num_vcpus,json=numVcpus" json:"num_vcpus,omitempty"`
	// Configured CPU reservation in Hz.
	CpuReservationHz *int64 `protobuf:"varint,5,opt,name=cpu_reservation_hz,json=cpuReservationHz" json:"cpu_reservation_hz,omitempty"`
	// Size of the configured memory for the virtual machine in bytes.
	MemorySizeBytes *int64 `protobuf:"varint,6,opt,name=memory_size_bytes,json=memorySizeBytes" json:"memory_size_bytes,omitempty"`
	// Configured memory reservation in bytes.
	MemoryReservedBytes *int64 `protobuf:"varint,7,opt,name=memory_reserved_bytes,json=memoryReservedBytes" json:"memory_reserved_bytes,omitempty"`
	// Number of Ethernet adapters configured.
	NumNetworkAdapters *int64 `protobuf:"varint,8,opt,name=num_network_adapters,json=numNetworkAdapters" json:"num_network_adapters,omitempty"`
	// Name of the OS on the VM.
	GuestOsName *string `protobuf:"bytes,9,opt,name=guest_os_name,json=guestOsName" json:"guest_os_name,omitempty"`
	// IP addresses assigned to all the configured network adapters.
	// This list can include v4 and v6 IP addresses.
	IpAddresses []string `protobuf:"bytes,10,rep,name=ip_addresses,json=ipAddresses" json:"ip_addresses,omitempty"`
	// Node on which the VM is running.
	NodeId []byte `protobuf:"bytes,11,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// Power state of the VM: Only one of the three possible values, viz.,
	// {"on", "off", "suspended"}
	PowerState *string `protobuf:"bytes,12,opt,name=power_state,json=powerState" json:"power_state,omitempty"`
	// List of all the virtual disks that are based on Nutanix NFS and
	// providing storage to the VM. Eg. /nutanix-ctr-name/my-uvm/my-uvm.vmdk.
	NutanixNfsBasedVirtualDisks []string `protobuf:"bytes,13,rep,name=nutanix_nfs_based_virtual_disks,json=nutanixNfsBasedVirtualDisks" json:"nutanix_nfs_based_virtual_disks,omitempty"`
	// List of all the virtual disks uuids that are based on Nutanix NFS and
	// providing storage to the VM. There exists a 1-1 mapping of
	// 'nutanix_nfs_based_virtual_disks' to
	// 'nutanix_nfs_based_virtual_diks_uuids'.
	NutanixNfsBasedVirtualDiskUuids [][]byte `protobuf:"bytes,14,rep,name=nutanix_nfs_based_virtual_disk_uuids,json=nutanixNfsBasedVirtualDiskUuids" json:"nutanix_nfs_based_virtual_disk_uuids,omitempty"`
	// List of iSCSI targets of all the virtual disks that are
	// based on Nutanix iSCSI and providing storage to the VM.
	// Eg. iqn.2010-06.com.nutanix:<disk-name>-<random>
	NutanixIscsiBasedVirtualDisks []string `protobuf:"bytes,15,rep,name=nutanix_iscsi_based_virtual_disks,json=nutanixIscsiBasedVirtualDisks" json:"nutanix_iscsi_based_virtual_disks,omitempty"`
	// List of all the virtual disks uuids that are based on Nutanix iSCSI and
	// providing storage to the VM. There exists a 1-1 mapping of
	// 'nutanix_iscsi_based_virtual_disks' to
	// 'nutanix_iscsi_based_virtual_diks_uuids'.
	NutanixIscsiBasedVirtualDiskUuids [][]byte `protobuf:"bytes,16,rep,name=nutanix_iscsi_based_virtual_disk_uuids,json=nutanixIscsiBasedVirtualDiskUuids" json:"nutanix_iscsi_based_virtual_disk_uuids,omitempty"`
	// The protection domain name where this VM belongs to.
	ProtectionDomainName *string `protobuf:"bytes,17,opt,name=protection_domain_name,json=protectionDomainName" json:"protection_domain_name,omitempty"`
	// The consistency group name where this VM belongs to.
	ConsistencyGroupName *string `protobuf:"bytes,18,opt,name=consistency_group_name,json=consistencyGroupName" json:"consistency_group_name,omitempty"`
	// Deprecated. Amount of guest physical memory that is currently reclaimed
	// from the virtual machine through ballooning.
	HypervisorMemoryBalloonReclaimedBytes *int64 `protobuf:"varint,19,opt,name=hypervisor_memory_balloon_reclaimed_bytes,json=hypervisorMemoryBalloonReclaimedBytes" json:"hypervisor_memory_balloon_reclaimed_bytes,omitempty"`
	// Deprecated. Rate at which memory is swapped from disk into active memory during
	// the interval.
	HypervisorSwapInRateKBps *int64 `protobuf:"varint,20,opt,name=hypervisor_swap_in_rate_kBps,json=hypervisorSwapInRateKBps" json:"hypervisor_swap_in_rate_kBps,omitempty"`
	// Deprecated. Rate at which memory is being swapped from active memory to
	// disk during the current interval.
	HypervisorSwapOutRateKBps *int64 `protobuf:"varint,21,opt,name=hypervisor_swap_out_rate_kBps,json=hypervisorSwapOutRateKBps" json:"hypervisor_swap_out_rate_kBps,omitempty"`
	// Deprecated. Number of receive packets dropped (because of receive buffer
	// overflows) during the interval.
	HypervisorNumReceivePacketsDropped *int64 `protobuf:"varint,22,opt,name=hypervisor_num_receive_packets_dropped,json=hypervisorNumReceivePacketsDropped" json:"hypervisor_num_receive_packets_dropped,omitempty"`
	// Deprecated. Number of transmit packets dropped during the interval.
	HypervisorNumTransmitPacketsDropped *int64 `protobuf:"varint,23,opt,name=hypervisor_num_transmit_packets_dropped,json=hypervisorNumTransmitPacketsDropped" json:"hypervisor_num_transmit_packets_dropped,omitempty"`
	// Deprecated. Total VM CPU usage time.
	// ESX: not set.
	// KVM: set.
	// HyperV: not set.
	HypervisorTotalCpuUsageTimeSinceBootUsecs *int64 `protobuf:"varint,24,opt,name=hypervisor_total_cpu_usage_time_since_boot_usecs,json=hypervisorTotalCpuUsageTimeSinceBootUsecs" json:"hypervisor_total_cpu_usage_time_since_boot_usecs,omitempty"`
	// Generic attributes.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,26,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	// Whether the virtual machine is a Nutanix CVM.
	// 0 = false
	// else, true
	IsCvm *int64 `protobuf:"varint,27,opt,name=is_cvm,json=isCvm,def=0" json:"is_cvm,omitempty"`
	// Nutanix Containers associated with this VM.
	ContainerIds []string `protobuf:"bytes,28,rep,name=container_ids,json=containerIds" json:"container_ids,omitempty"`
	// Deprecated. Amount of guest physical memory that is to be reclaimed from the
	// virtual machine through ballooning.
	HypervisorMemoryBalloonReclaimTargetBytes *int64 `protobuf:"varint,29,opt,name=hypervisor_memory_balloon_reclaim_target_bytes,json=hypervisorMemoryBalloonReclaimTargetBytes" json:"hypervisor_memory_balloon_reclaim_target_bytes,omitempty"`
	// Whether the virtual machine is CBR capable. CBR capable VMs have all
	// files on Nutanix containers and are eligible for Nutanix DR protection.
	// 0 = false
	// else, true
	IsCbrCapable *int64 `protobuf:"varint,30,opt,name=is_cbr_capable,json=isCbrCapable,def=0" json:"is_cbr_capable,omitempty"`
	// Virtual NICs id stored in this field.
	VirtualNicIds        []string `protobuf:"bytes,31,rep,name=virtual_nic_ids,json=virtualNicIds" json:"virtual_nic_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VM) Reset()         { *m = VM{} }
func (m *VM) String() string { return proto.CompactTextString(m) }
func (*VM) ProtoMessage()    {}
func (*VM) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{20}
}

func (m *VM) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VM.Unmarshal(m, b)
}
func (m *VM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VM.Marshal(b, m, deterministic)
}
func (m *VM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VM.Merge(m, src)
}
func (m *VM) XXX_Size() int {
	return xxx_messageInfo_VM.Size(m)
}
func (m *VM) XXX_DiscardUnknown() {
	xxx_messageInfo_VM.DiscardUnknown(m)
}

var xxx_messageInfo_VM proto.InternalMessageInfo

const Default_VM_IsCvm int64 = 0
const Default_VM_IsCbrCapable int64 = 0

func (m *VM) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *VM) GetStats() *VM_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *VM) GetVmName() string {
	if m != nil && m.VmName != nil {
		return *m.VmName
	}
	return ""
}

func (m *VM) GetNumVcpus() int64 {
	if m != nil && m.NumVcpus != nil {
		return *m.NumVcpus
	}
	return 0
}

func (m *VM) GetCpuReservationHz() int64 {
	if m != nil && m.CpuReservationHz != nil {
		return *m.CpuReservationHz
	}
	return 0
}

func (m *VM) GetMemorySizeBytes() int64 {
	if m != nil && m.MemorySizeBytes != nil {
		return *m.MemorySizeBytes
	}
	return 0
}

func (m *VM) GetMemoryReservedBytes() int64 {
	if m != nil && m.MemoryReservedBytes != nil {
		return *m.MemoryReservedBytes
	}
	return 0
}

func (m *VM) GetNumNetworkAdapters() int64 {
	if m != nil && m.NumNetworkAdapters != nil {
		return *m.NumNetworkAdapters
	}
	return 0
}

func (m *VM) GetGuestOsName() string {
	if m != nil && m.GuestOsName != nil {
		return *m.GuestOsName
	}
	return ""
}

func (m *VM) GetIpAddresses() []string {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func (m *VM) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *VM) GetPowerState() string {
	if m != nil && m.PowerState != nil {
		return *m.PowerState
	}
	return ""
}

func (m *VM) GetNutanixNfsBasedVirtualDisks() []string {
	if m != nil {
		return m.NutanixNfsBasedVirtualDisks
	}
	return nil
}

func (m *VM) GetNutanixNfsBasedVirtualDiskUuids() [][]byte {
	if m != nil {
		return m.NutanixNfsBasedVirtualDiskUuids
	}
	return nil
}

func (m *VM) GetNutanixIscsiBasedVirtualDisks() []string {
	if m != nil {
		return m.NutanixIscsiBasedVirtualDisks
	}
	return nil
}

func (m *VM) GetNutanixIscsiBasedVirtualDiskUuids() [][]byte {
	if m != nil {
		return m.NutanixIscsiBasedVirtualDiskUuids
	}
	return nil
}

func (m *VM) GetProtectionDomainName() string {
	if m != nil && m.ProtectionDomainName != nil {
		return *m.ProtectionDomainName
	}
	return ""
}

func (m *VM) GetConsistencyGroupName() string {
	if m != nil && m.ConsistencyGroupName != nil {
		return *m.ConsistencyGroupName
	}
	return ""
}

func (m *VM) GetHypervisorMemoryBalloonReclaimedBytes() int64 {
	if m != nil && m.HypervisorMemoryBalloonReclaimedBytes != nil {
		return *m.HypervisorMemoryBalloonReclaimedBytes
	}
	return 0
}

func (m *VM) GetHypervisorSwapInRateKBps() int64 {
	if m != nil && m.HypervisorSwapInRateKBps != nil {
		return *m.HypervisorSwapInRateKBps
	}
	return 0
}

func (m *VM) GetHypervisorSwapOutRateKBps() int64 {
	if m != nil && m.HypervisorSwapOutRateKBps != nil {
		return *m.HypervisorSwapOutRateKBps
	}
	return 0
}

func (m *VM) GetHypervisorNumReceivePacketsDropped() int64 {
	if m != nil && m.HypervisorNumReceivePacketsDropped != nil {
		return *m.HypervisorNumReceivePacketsDropped
	}
	return 0
}

func (m *VM) GetHypervisorNumTransmitPacketsDropped() int64 {
	if m != nil && m.HypervisorNumTransmitPacketsDropped != nil {
		return *m.HypervisorNumTransmitPacketsDropped
	}
	return 0
}

func (m *VM) GetHypervisorTotalCpuUsageTimeSinceBootUsecs() int64 {
	if m != nil && m.HypervisorTotalCpuUsageTimeSinceBootUsecs != nil {
		return *m.HypervisorTotalCpuUsageTimeSinceBootUsecs
	}
	return 0
}

func (m *VM) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

func (m *VM) GetIsCvm() int64 {
	if m != nil && m.IsCvm != nil {
		return *m.IsCvm
	}
	return Default_VM_IsCvm
}

func (m *VM) GetContainerIds() []string {
	if m != nil {
		return m.ContainerIds
	}
	return nil
}

func (m *VM) GetHypervisorMemoryBalloonReclaimTargetBytes() int64 {
	if m != nil && m.HypervisorMemoryBalloonReclaimTargetBytes != nil {
		return *m.HypervisorMemoryBalloonReclaimTargetBytes
	}
	return 0
}

func (m *VM) GetIsCbrCapable() int64 {
	if m != nil && m.IsCbrCapable != nil {
		return *m.IsCbrCapable
	}
	return Default_VM_IsCbrCapable
}

func (m *VM) GetVirtualNicIds() []string {
	if m != nil {
		return m.VirtualNicIds
	}
	return nil
}

// VM specific stats.
type VM_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// Average CPU usage expressed in parts per million. To get percentage,
	// the value should be divided by 1 million and multipled by 100.
	HypervisorCpuUsagePpm *int64 `protobuf:"varint,2,opt,name=hypervisor_cpu_usage_ppm,json=hypervisorCpuUsagePpm" json:"hypervisor_cpu_usage_ppm,omitempty"`
	// Memory usage percentage expressed parts per million. To get percentage,
	// the value should be divided by 1 million and multipled by 100.
	// Does not apply to Hyper-V.
	HypervisorMemoryUsagePpm *int64 `protobuf:"varint,3,opt,name=hypervisor_memory_usage_ppm,json=hypervisorMemoryUsagePpm" json:"hypervisor_memory_usage_ppm,omitempty"`
	// Number of bytes received by the VM from the network during the
	// interval.
	HypervisorNumReceivedBytes *int64 `protobuf:"varint,4,opt,name=hypervisor_num_received_bytes,json=hypervisorNumReceivedBytes" json:"hypervisor_num_received_bytes,omitempty"`
	// Number of bytes transmitted by the VM during the interval.
	HypervisorNumTransmittedBytes *int64 `protobuf:"varint,5,opt,name=hypervisor_num_transmitted_bytes,json=hypervisorNumTransmittedBytes" json:"hypervisor_num_transmitted_bytes,omitempty"`
	// The time span over which the VM stats reported by the Hypervisor are
	// recorded.
	HypervisorVmTimespanUsecs *int64 `protobuf:"varint,6,opt,name=hypervisor_vm_timespan_usecs,json=hypervisorVmTimespanUsecs" json:"hypervisor_vm_timespan_usecs,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VM_Stats) Reset()         { *m = VM_Stats{} }
func (m *VM_Stats) String() string { return proto.CompactTextString(m) }
func (*VM_Stats) ProtoMessage()    {}
func (*VM_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{20, 0}
}

func (m *VM_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VM_Stats.Unmarshal(m, b)
}
func (m *VM_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VM_Stats.Marshal(b, m, deterministic)
}
func (m *VM_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VM_Stats.Merge(m, src)
}
func (m *VM_Stats) XXX_Size() int {
	return xxx_messageInfo_VM_Stats.Size(m)
}
func (m *VM_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_VM_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_VM_Stats proto.InternalMessageInfo

func (m *VM_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *VM_Stats) GetHypervisorCpuUsagePpm() int64 {
	if m != nil && m.HypervisorCpuUsagePpm != nil {
		return *m.HypervisorCpuUsagePpm
	}
	return 0
}

func (m *VM_Stats) GetHypervisorMemoryUsagePpm() int64 {
	if m != nil && m.HypervisorMemoryUsagePpm != nil {
		return *m.HypervisorMemoryUsagePpm
	}
	return 0
}

func (m *VM_Stats) GetHypervisorNumReceivedBytes() int64 {
	if m != nil && m.HypervisorNumReceivedBytes != nil {
		return *m.HypervisorNumReceivedBytes
	}
	return 0
}

func (m *VM_Stats) GetHypervisorNumTransmittedBytes() int64 {
	if m != nil && m.HypervisorNumTransmittedBytes != nil {
		return *m.HypervisorNumTransmittedBytes
	}
	return 0
}

func (m *VM_Stats) GetHypervisorVmTimespanUsecs() int64 {
	if m != nil && m.HypervisorVmTimespanUsecs != nil {
		return *m.HypervisorVmTimespanUsecs
	}
	return 0
}

func (m *VM_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

type Container struct {
	// Container id.
	Id    []byte           `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *Container_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// Configuration data.
	// container name.
	ContainerName *string `protobuf:"bytes,3,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	// Storage pool in which the container belongs to.
	StoragePoolId []byte `protobuf:"bytes,4,opt,name=storage_pool_id,json=storagePoolId" json:"storage_pool_id,omitempty"`
	// Generic attributes.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,6,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Container) Reset()         { *m = Container{} }
func (m *Container) String() string { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()    {}
func (*Container) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{21}
}

func (m *Container) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Container.Unmarshal(m, b)
}
func (m *Container) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Container.Marshal(b, m, deterministic)
}
func (m *Container) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Container.Merge(m, src)
}
func (m *Container) XXX_Size() int {
	return xxx_messageInfo_Container.Size(m)
}
func (m *Container) XXX_DiscardUnknown() {
	xxx_messageInfo_Container.DiscardUnknown(m)
}

var xxx_messageInfo_Container proto.InternalMessageInfo

func (m *Container) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Container) GetStats() *Container_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Container) GetContainerName() string {
	if m != nil && m.ContainerName != nil {
		return *m.ContainerName
	}
	return ""
}

func (m *Container) GetStoragePoolId() []byte {
	if m != nil {
		return m.StoragePoolId
	}
	return nil
}

func (m *Container) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

// Container specific stats.
type Container_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Container_Stats) Reset()         { *m = Container_Stats{} }
func (m *Container_Stats) String() string { return proto.CompactTextString(m) }
func (*Container_Stats) ProtoMessage()    {}
func (*Container_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{21, 0}
}

func (m *Container_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Container_Stats.Unmarshal(m, b)
}
func (m *Container_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Container_Stats.Marshal(b, m, deterministic)
}
func (m *Container_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Container_Stats.Merge(m, src)
}
func (m *Container_Stats) XXX_Size() int {
	return xxx_messageInfo_Container_Stats.Size(m)
}
func (m *Container_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Container_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Container_Stats proto.InternalMessageInfo

func (m *Container_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *Container_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

type StoragePool struct {
	// Storage pool id.
	Id    []byte             `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *StoragePool_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// Configuration data.
	// Storage pool name.
	StoragePoolName      *string `protobuf:"bytes,3,opt,name=storage_pool_name,json=storagePoolName" json:"storage_pool_name,omitempty"`
	StoragePoolSizeBytes *int64  `protobuf:"varint,4,opt,name=storage_pool_size_bytes,json=storagePoolSizeBytes" json:"storage_pool_size_bytes,omitempty"`
	// Generic attributes.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,6,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *StoragePool) Reset()         { *m = StoragePool{} }
func (m *StoragePool) String() string { return proto.CompactTextString(m) }
func (*StoragePool) ProtoMessage()    {}
func (*StoragePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{22}
}

func (m *StoragePool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoragePool.Unmarshal(m, b)
}
func (m *StoragePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoragePool.Marshal(b, m, deterministic)
}
func (m *StoragePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoragePool.Merge(m, src)
}
func (m *StoragePool) XXX_Size() int {
	return xxx_messageInfo_StoragePool.Size(m)
}
func (m *StoragePool) XXX_DiscardUnknown() {
	xxx_messageInfo_StoragePool.DiscardUnknown(m)
}

var xxx_messageInfo_StoragePool proto.InternalMessageInfo

func (m *StoragePool) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *StoragePool) GetStats() *StoragePool_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *StoragePool) GetStoragePoolName() string {
	if m != nil && m.StoragePoolName != nil {
		return *m.StoragePoolName
	}
	return ""
}

func (m *StoragePool) GetStoragePoolSizeBytes() int64 {
	if m != nil && m.StoragePoolSizeBytes != nil {
		return *m.StoragePoolSizeBytes
	}
	return 0
}

func (m *StoragePool) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

// Storage pool specific stats.
type StoragePool_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StoragePool_Stats) Reset()         { *m = StoragePool_Stats{} }
func (m *StoragePool_Stats) String() string { return proto.CompactTextString(m) }
func (*StoragePool_Stats) ProtoMessage()    {}
func (*StoragePool_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{22, 0}
}

func (m *StoragePool_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoragePool_Stats.Unmarshal(m, b)
}
func (m *StoragePool_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoragePool_Stats.Marshal(b, m, deterministic)
}
func (m *StoragePool_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoragePool_Stats.Merge(m, src)
}
func (m *StoragePool_Stats) XXX_Size() int {
	return xxx_messageInfo_StoragePool_Stats.Size(m)
}
func (m *StoragePool_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_StoragePool_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_StoragePool_Stats proto.InternalMessageInfo

func (m *StoragePool_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *StoragePool_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

type Node struct {
	// The ID of the node: identical to the ID of the service VM running on it.
	Id    []byte      `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *Node_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// The name of the node as reported by the virtualization management
	// layer.
	NodeName *string `protobuf:"bytes,3,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	// CPU speed per core. This might be an averaged value if the speed is not
	// uniform across all cores. The total CPU speed of the box is defined as
	// cpu_frequency_hz * num_cpu_cores
	CpuFrequencyHz *int64 `protobuf:"varint,4,opt,name=cpu_frequency_hz,json=cpuFrequencyHz" json:"cpu_frequency_hz,omitempty"`
	// String indicating CPU model.
	// E.g.: Intel(R) Xeon(R) CPU E5-2660 0 @ 2.20GHz
	CpuModel *string `protobuf:"bytes,5,opt,name=cpu_model,json=cpuModel" json:"cpu_model,omitempty"`
	// Number of physical CPU sockets/packages in the node.
	NumCpuSockets *int64 `protobuf:"varint,6,opt,name=num_cpu_sockets,json=numCpuSockets" json:"num_cpu_sockets,omitempty"`
	// Number of physical CPU cores in the node.
	NumCpuCores *int64 `protobuf:"varint,7,opt,name=num_cpu_cores,json=numCpuCores" json:"num_cpu_cores,omitempty"`
	// Number of CPU threads in the node.
	NumCpuThreads *int64 `protobuf:"varint,8,opt,name=num_cpu_threads,json=numCpuThreads" json:"num_cpu_threads,omitempty"`
	// Number of HBAs in the node.
	NumHbas *int64 `protobuf:"varint,9,opt,name=num_hbas,json=numHbas" json:"num_hbas,omitempty"`
	// Number of physical NICs in the node.
	NumNics *int64 `protobuf:"varint,10,opt,name=num_nics,json=numNics" json:"num_nics,omitempty"`
	// Size of the memory in the node.
	MemorySizeBytes *int64 `protobuf:"varint,11,opt,name=memory_size_bytes,json=memorySizeBytes" json:"memory_size_bytes,omitempty"`
	// Number of NUMA cells in the node: 1 for unusual NUMA topologies or uniform
	// memory access.
	NumNumaNodes *int64 `protobuf:"varint,12,opt,name=num_numa_nodes,json=numNumaNodes" json:"num_numa_nodes,omitempty"`
	// Full name of the hypervisor / virtual machine monitor running on the
	// node. E.g.: VMware ESXi 5.0.0 build-623860
	HypervisorFullName *string `protobuf:"bytes,13,opt,name=hypervisor_full_name,json=hypervisorFullName" json:"hypervisor_full_name,omitempty"`
	// List of v4 IP addresses assigned to the host virtual NICs (vmnics).
	// Each entry in the list will be of the form <ip/subnet mask>.
	Ipv4Addresses []string `protobuf:"bytes,14,rep,name=ipv4_addresses,json=ipv4Addresses" json:"ipv4_addresses,omitempty"`
	// The time when the node was booted in terms of the number of microseconds
	// since the epoch, namely January 1, 1970, 00:00:00 GMT.
	// TODO: See if utime can be got instead of boot time since epoch.
	BootTimeUsecs *int64 `protobuf:"varint,15,opt,name=boot_time_usecs,json=bootTimeUsecs" json:"boot_time_usecs,omitempty"`
	// Number of VMs.
	NumVms *int64 `protobuf:"varint,16,opt,name=num_vms,json=numVms" json:"num_vms,omitempty"`
	// Cluster Id.
	ClusterId []byte `protobuf:"bytes,17,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	// Deprecated. The sum of physical memory reclaimed from all the virtual machines
	// (and any other services) running on the host by the balloon
	// driver.
	HypervisorMemoryBalloonReclaimedBytes *int64 `protobuf:"varint,18,opt,name=hypervisor_memory_balloon_reclaimed_bytes,json=hypervisorMemoryBalloonReclaimedBytes" json:"hypervisor_memory_balloon_reclaimed_bytes,omitempty"`
	// Amount of memory that is used by swap. Sum of memory swapped
	// of all powered on VMs and other services on the host.
	HypervisorSwapUsedBytes *int64 `protobuf:"varint,19,opt,name=hypervisor_swap_used_bytes,json=hypervisorSwapUsedBytes" json:"hypervisor_swap_used_bytes,omitempty"`
	// Deprecated. Rate at which memory is swapped from disk into active memory
	// during the interval.
	HypervisorSwapInRateKBps *int64 `protobuf:"varint,20,opt,name=hypervisor_swap_in_rate_kBps,json=hypervisorSwapInRateKBps" json:"hypervisor_swap_in_rate_kBps,omitempty"`
	// Deprecated. Rate at which memory is being swapped from active memory to
	// disk during the current interval.
	HypervisorSwapOutRateKBps *int64 `protobuf:"varint,21,opt,name=hypervisor_swap_out_rate_kBps,json=hypervisorSwapOutRateKBps" json:"hypervisor_swap_out_rate_kBps,omitempty"`
	// Deprecated. Number of receive packets dropped (because of receive buffer
	// overflows) during the interval.
	HypervisorNumReceivePacketsDropped *int64 `protobuf:"varint,22,opt,name=hypervisor_num_receive_packets_dropped,json=hypervisorNumReceivePacketsDropped" json:"hypervisor_num_receive_packets_dropped,omitempty"`
	// Deprecated. Number of transmit packets dropped during the interval.
	HypervisorNumTransmitPacketsDropped *int64 `protobuf:"varint,23,opt,name=hypervisor_num_transmit_packets_dropped,json=hypervisorNumTransmitPacketsDropped" json:"hypervisor_num_transmit_packets_dropped,omitempty"`
	// The node uuid from Zeus Config.
	NodeUuid *string `protobuf:"bytes,24,opt,name=node_uuid,json=nodeUuid" json:"node_uuid,omitempty"`
	// Size of the disks on this node.
	DiskSizeBytes *int64 `protobuf:"varint,26,opt,name=disk_size_bytes,json=diskSizeBytes" json:"disk_size_bytes,omitempty"`
	// Generic attributes.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,27,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	// Deprecated. The sum of physical memory to be reclaimed from all the
	// virtual machines (and any other services) running on the host by the
	// balloon driver.
	HypervisorMemoryBalloonReclaimTargetBytes *int64 `protobuf:"varint,28,opt,name=hypervisor_memory_balloon_reclaim_target_bytes,json=hypervisorMemoryBalloonReclaimTargetBytes" json:"hypervisor_memory_balloon_reclaim_target_bytes,omitempty"`
	// List of Host kernel virtual NICs.
	KernelNicIds []string `protobuf:"bytes,29,rep,name=kernel_nic_ids,json=kernelNicIds" json:"kernel_nic_ids,omitempty"`
	// List of PNics.
	HostNicIds           []string `protobuf:"bytes,30,rep,name=host_nic_ids,json=hostNicIds" json:"host_nic_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{23}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Node) GetStats() *Node_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Node) GetNodeName() string {
	if m != nil && m.NodeName != nil {
		return *m.NodeName
	}
	return ""
}

func (m *Node) GetCpuFrequencyHz() int64 {
	if m != nil && m.CpuFrequencyHz != nil {
		return *m.CpuFrequencyHz
	}
	return 0
}

func (m *Node) GetCpuModel() string {
	if m != nil && m.CpuModel != nil {
		return *m.CpuModel
	}
	return ""
}

func (m *Node) GetNumCpuSockets() int64 {
	if m != nil && m.NumCpuSockets != nil {
		return *m.NumCpuSockets
	}
	return 0
}

func (m *Node) GetNumCpuCores() int64 {
	if m != nil && m.NumCpuCores != nil {
		return *m.NumCpuCores
	}
	return 0
}

func (m *Node) GetNumCpuThreads() int64 {
	if m != nil && m.NumCpuThreads != nil {
		return *m.NumCpuThreads
	}
	return 0
}

func (m *Node) GetNumHbas() int64 {
	if m != nil && m.NumHbas != nil {
		return *m.NumHbas
	}
	return 0
}

func (m *Node) GetNumNics() int64 {
	if m != nil && m.NumNics != nil {
		return *m.NumNics
	}
	return 0
}

func (m *Node) GetMemorySizeBytes() int64 {
	if m != nil && m.MemorySizeBytes != nil {
		return *m.MemorySizeBytes
	}
	return 0
}

func (m *Node) GetNumNumaNodes() int64 {
	if m != nil && m.NumNumaNodes != nil {
		return *m.NumNumaNodes
	}
	return 0
}

func (m *Node) GetHypervisorFullName() string {
	if m != nil && m.HypervisorFullName != nil {
		return *m.HypervisorFullName
	}
	return ""
}

func (m *Node) GetIpv4Addresses() []string {
	if m != nil {
		return m.Ipv4Addresses
	}
	return nil
}

func (m *Node) GetBootTimeUsecs() int64 {
	if m != nil && m.BootTimeUsecs != nil {
		return *m.BootTimeUsecs
	}
	return 0
}

func (m *Node) GetNumVms() int64 {
	if m != nil && m.NumVms != nil {
		return *m.NumVms
	}
	return 0
}

func (m *Node) GetClusterId() []byte {
	if m != nil {
		return m.ClusterId
	}
	return nil
}

func (m *Node) GetHypervisorMemoryBalloonReclaimedBytes() int64 {
	if m != nil && m.HypervisorMemoryBalloonReclaimedBytes != nil {
		return *m.HypervisorMemoryBalloonReclaimedBytes
	}
	return 0
}

func (m *Node) GetHypervisorSwapUsedBytes() int64 {
	if m != nil && m.HypervisorSwapUsedBytes != nil {
		return *m.HypervisorSwapUsedBytes
	}
	return 0
}

func (m *Node) GetHypervisorSwapInRateKBps() int64 {
	if m != nil && m.HypervisorSwapInRateKBps != nil {
		return *m.HypervisorSwapInRateKBps
	}
	return 0
}

func (m *Node) GetHypervisorSwapOutRateKBps() int64 {
	if m != nil && m.HypervisorSwapOutRateKBps != nil {
		return *m.HypervisorSwapOutRateKBps
	}
	return 0
}

func (m *Node) GetHypervisorNumReceivePacketsDropped() int64 {
	if m != nil && m.HypervisorNumReceivePacketsDropped != nil {
		return *m.HypervisorNumReceivePacketsDropped
	}
	return 0
}

func (m *Node) GetHypervisorNumTransmitPacketsDropped() int64 {
	if m != nil && m.HypervisorNumTransmitPacketsDropped != nil {
		return *m.HypervisorNumTransmitPacketsDropped
	}
	return 0
}

func (m *Node) GetNodeUuid() string {
	if m != nil && m.NodeUuid != nil {
		return *m.NodeUuid
	}
	return ""
}

func (m *Node) GetDiskSizeBytes() int64 {
	if m != nil && m.DiskSizeBytes != nil {
		return *m.DiskSizeBytes
	}
	return 0
}

func (m *Node) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

func (m *Node) GetHypervisorMemoryBalloonReclaimTargetBytes() int64 {
	if m != nil && m.HypervisorMemoryBalloonReclaimTargetBytes != nil {
		return *m.HypervisorMemoryBalloonReclaimTargetBytes
	}
	return 0
}

func (m *Node) GetKernelNicIds() []string {
	if m != nil {
		return m.KernelNicIds
	}
	return nil
}

func (m *Node) GetHostNicIds() []string {
	if m != nil {
		return m.HostNicIds
	}
	return nil
}

// Node specific stats.
type Node_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// Average CPU usage as reported by the hypervisor expressed in parts per
	// million. To get percentage, the value should be divided by 1 million
	// and multipled by 100.
	HypervisorCpuUsagePpm *int64 `protobuf:"varint,2,opt,name=hypervisor_cpu_usage_ppm,json=hypervisorCpuUsagePpm" json:"hypervisor_cpu_usage_ppm,omitempty"`
	// Average memory usage as reported by the hypervisor expressed in parts
	// per million.
	HypervisorMemoryUsagePpm *int64 `protobuf:"varint,3,opt,name=hypervisor_memory_usage_ppm,json=hypervisorMemoryUsagePpm" json:"hypervisor_memory_usage_ppm,omitempty"`
	// Number of bytes received by the host from the network during the
	// interval.
	HypervisorNumReceivedBytes *int64 `protobuf:"varint,4,opt,name=hypervisor_num_received_bytes,json=hypervisorNumReceivedBytes" json:"hypervisor_num_received_bytes,omitempty"`
	// Number of bytes transmitted by the host during the interval.
	HypervisorNumTransmittedBytes *int64 `protobuf:"varint,5,opt,name=hypervisor_num_transmitted_bytes,json=hypervisorNumTransmittedBytes" json:"hypervisor_num_transmitted_bytes,omitempty"`
	// Number of concurrent scans permitted by Medusa from Cerebro. This is an
	// indicator of how loaded Cassandra is.
	ReplicationSlaveNumMaxConcurrentScans *int64 `protobuf:"varint,6,opt,name=replication_slave_num_max_concurrent_scans,json=replicationSlaveNumMaxConcurrentScans" json:"replication_slave_num_max_concurrent_scans,omitempty"`
	// Number of content cache hits.
	ContentCacheNumHits *int64 `protobuf:"varint,7,opt,name=content_cache_num_hits,json=contentCacheNumHits" json:"content_cache_num_hits,omitempty"`
	// Number of content cache lookups.
	ContentCacheNumLookups *int64 `protobuf:"varint,8,opt,name=content_cache_num_lookups,json=contentCacheNumLookups" json:"content_cache_num_lookups,omitempty"`
	// Content cache logical memory usage in bytes. This is the logical memory
	// usage to cache the data in memory without deduplication.
	ContentCacheLogicalMemoryUsageBytes *int64 `protobuf:"varint,9,opt,name=content_cache_logical_memory_usage_bytes,json=contentCacheLogicalMemoryUsageBytes" json:"content_cache_logical_memory_usage_bytes,omitempty"`
	// Content cache physical memory usage in bytes. This is the real memory
	// usage to cache data by content cache.
	ContentCachePhysicalMemoryUsageBytes *int64 `protobuf:"varint,10,opt,name=content_cache_physical_memory_usage_bytes,json=contentCachePhysicalMemoryUsageBytes" json:"content_cache_physical_memory_usage_bytes,omitempty"`
	// Content cache logical SSD usage in bytes. This is the logical SSD
	// usage to cache the data in SSD without deduplication.
	ContentCacheLogicalSsdUsageBytes *int64 `protobuf:"varint,11,opt,name=content_cache_logical_ssd_usage_bytes,json=contentCacheLogicalSsdUsageBytes" json:"content_cache_logical_ssd_usage_bytes,omitempty"`
	// Content cache physical SSD usage in bytes. This is the real SSD
	// usage to cache data by content cache.
	ContentCachePhysicalSsdUsageBytes *int64 `protobuf:"varint,12,opt,name=content_cache_physical_ssd_usage_bytes,json=contentCachePhysicalSsdUsageBytes" json:"content_cache_physical_ssd_usage_bytes,omitempty"`
	// The number of written bytes for which fingerprints have been added.
	DedupFingerprintAddedBytes *int64 `protobuf:"varint,13,opt,name=dedup_fingerprint_added_bytes,json=dedupFingerprintAddedBytes" json:"dedup_fingerprint_added_bytes,omitempty"`
	// The number of written bytes for which fingerprints have been cleared.
	DedupFingerprintClearedBytes *int64 `protobuf:"varint,14,opt,name=dedup_fingerprint_cleared_bytes,json=dedupFingerprintClearedBytes" json:"dedup_fingerprint_cleared_bytes,omitempty"`
	// Content cache hit ratio in terms of parts per million. To get percentage
	// hit ratio, the value should be divided by 1 million.
	ContentCacheHitPpm *int64 `protobuf:"varint,101,opt,name=content_cache_hit_ppm,json=contentCacheHitPpm" json:"content_cache_hit_ppm,omitempty"`
	// Number of dedup reference counts in parts per hundred. To get the number
	// of reference counts, divide this value by 100.
	ContentCacheNumDedupRefCountPph *int64 `protobuf:"varint,102,opt,name=content_cache_num_dedup_ref_count_pph,json=contentCacheNumDedupRefCountPph" json:"content_cache_num_dedup_ref_count_pph,omitempty"`
	// The saved memory usage due to content cache deduplication. This is the
	// difference between content_cache_logical_memory_usage_bytes and
	// content_cache_physical_memory_usage_bytes.
	ContentCacheSavedMemoryUsageBytes *int64 `protobuf:"varint,103,opt,name=content_cache_saved_memory_usage_bytes,json=contentCacheSavedMemoryUsageBytes" json:"content_cache_saved_memory_usage_bytes,omitempty"`
	// The saved SSD usage due to content cache deduplication. This is the
	// difference between content_cache_logical_ssd_usage_bytes and
	// content_cache_physical_ssd_usage_bytes.
	ContentCacheSavedSsdUsageBytes *int64 `protobuf:"varint,104,opt,name=content_cache_saved_ssd_usage_bytes,json=contentCacheSavedSsdUsageBytes" json:"content_cache_saved_ssd_usage_bytes,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Node_Stats) Reset()         { *m = Node_Stats{} }
func (m *Node_Stats) String() string { return proto.CompactTextString(m) }
func (*Node_Stats) ProtoMessage()    {}
func (*Node_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{23, 0}
}

func (m *Node_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node_Stats.Unmarshal(m, b)
}
func (m *Node_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node_Stats.Marshal(b, m, deterministic)
}
func (m *Node_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node_Stats.Merge(m, src)
}
func (m *Node_Stats) XXX_Size() int {
	return xxx_messageInfo_Node_Stats.Size(m)
}
func (m *Node_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Node_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Node_Stats proto.InternalMessageInfo

func (m *Node_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *Node_Stats) GetHypervisorCpuUsagePpm() int64 {
	if m != nil && m.HypervisorCpuUsagePpm != nil {
		return *m.HypervisorCpuUsagePpm
	}
	return 0
}

func (m *Node_Stats) GetHypervisorMemoryUsagePpm() int64 {
	if m != nil && m.HypervisorMemoryUsagePpm != nil {
		return *m.HypervisorMemoryUsagePpm
	}
	return 0
}

func (m *Node_Stats) GetHypervisorNumReceivedBytes() int64 {
	if m != nil && m.HypervisorNumReceivedBytes != nil {
		return *m.HypervisorNumReceivedBytes
	}
	return 0
}

func (m *Node_Stats) GetHypervisorNumTransmittedBytes() int64 {
	if m != nil && m.HypervisorNumTransmittedBytes != nil {
		return *m.HypervisorNumTransmittedBytes
	}
	return 0
}

func (m *Node_Stats) GetReplicationSlaveNumMaxConcurrentScans() int64 {
	if m != nil && m.ReplicationSlaveNumMaxConcurrentScans != nil {
		return *m.ReplicationSlaveNumMaxConcurrentScans
	}
	return 0
}

func (m *Node_Stats) GetContentCacheNumHits() int64 {
	if m != nil && m.ContentCacheNumHits != nil {
		return *m.ContentCacheNumHits
	}
	return 0
}

func (m *Node_Stats) GetContentCacheNumLookups() int64 {
	if m != nil && m.ContentCacheNumLookups != nil {
		return *m.ContentCacheNumLookups
	}
	return 0
}

func (m *Node_Stats) GetContentCacheLogicalMemoryUsageBytes() int64 {
	if m != nil && m.ContentCacheLogicalMemoryUsageBytes != nil {
		return *m.ContentCacheLogicalMemoryUsageBytes
	}
	return 0
}

func (m *Node_Stats) GetContentCachePhysicalMemoryUsageBytes() int64 {
	if m != nil && m.ContentCachePhysicalMemoryUsageBytes != nil {
		return *m.ContentCachePhysicalMemoryUsageBytes
	}
	return 0
}

func (m *Node_Stats) GetContentCacheLogicalSsdUsageBytes() int64 {
	if m != nil && m.ContentCacheLogicalSsdUsageBytes != nil {
		return *m.ContentCacheLogicalSsdUsageBytes
	}
	return 0
}

func (m *Node_Stats) GetContentCachePhysicalSsdUsageBytes() int64 {
	if m != nil && m.ContentCachePhysicalSsdUsageBytes != nil {
		return *m.ContentCachePhysicalSsdUsageBytes
	}
	return 0
}

func (m *Node_Stats) GetDedupFingerprintAddedBytes() int64 {
	if m != nil && m.DedupFingerprintAddedBytes != nil {
		return *m.DedupFingerprintAddedBytes
	}
	return 0
}

func (m *Node_Stats) GetDedupFingerprintClearedBytes() int64 {
	if m != nil && m.DedupFingerprintClearedBytes != nil {
		return *m.DedupFingerprintClearedBytes
	}
	return 0
}

func (m *Node_Stats) GetContentCacheHitPpm() int64 {
	if m != nil && m.ContentCacheHitPpm != nil {
		return *m.ContentCacheHitPpm
	}
	return 0
}

func (m *Node_Stats) GetContentCacheNumDedupRefCountPph() int64 {
	if m != nil && m.ContentCacheNumDedupRefCountPph != nil {
		return *m.ContentCacheNumDedupRefCountPph
	}
	return 0
}

func (m *Node_Stats) GetContentCacheSavedMemoryUsageBytes() int64 {
	if m != nil && m.ContentCacheSavedMemoryUsageBytes != nil {
		return *m.ContentCacheSavedMemoryUsageBytes
	}
	return 0
}

func (m *Node_Stats) GetContentCacheSavedSsdUsageBytes() int64 {
	if m != nil && m.ContentCacheSavedSsdUsageBytes != nil {
		return *m.ContentCacheSavedSsdUsageBytes
	}
	return 0
}

func (m *Node_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

type Cluster struct {
	// Cluster id.
	Id    []byte         `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *Cluster_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// Configuration data.
	// Cluster name.
	ClusterName *string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	// Memory capacity.
	MemoryCapacityBytes *int64 `protobuf:"varint,4,opt,name=memory_capacity_bytes,json=memoryCapacityBytes" json:"memory_capacity_bytes,omitempty"`
	// Number of CPUs.
	NumCpus *int64 `protobuf:"varint,5,opt,name=num_cpus,json=numCpus" json:"num_cpus,omitempty"`
	// Number of VMs.
	NumVms *int64 `protobuf:"varint,6,opt,name=num_vms,json=numVms" json:"num_vms,omitempty"`
	// Size of the disks on this cluster.
	DiskSizeBytes *int64 `protobuf:"varint,8,opt,name=disk_size_bytes,json=diskSizeBytes" json:"disk_size_bytes,omitempty"`
	// Generic attributes.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,9,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{24}
}

func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Cluster) GetStats() *Cluster_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Cluster) GetClusterName() string {
	if m != nil && m.ClusterName != nil {
		return *m.ClusterName
	}
	return ""
}

func (m *Cluster) GetMemoryCapacityBytes() int64 {
	if m != nil && m.MemoryCapacityBytes != nil {
		return *m.MemoryCapacityBytes
	}
	return 0
}

func (m *Cluster) GetNumCpus() int64 {
	if m != nil && m.NumCpus != nil {
		return *m.NumCpus
	}
	return 0
}

func (m *Cluster) GetNumVms() int64 {
	if m != nil && m.NumVms != nil {
		return *m.NumVms
	}
	return 0
}

func (m *Cluster) GetDiskSizeBytes() int64 {
	if m != nil && m.DiskSizeBytes != nil {
		return *m.DiskSizeBytes
	}
	return 0
}

func (m *Cluster) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

// Node specific stats.
type Cluster_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// CPU usage percentage in terms of parts per million. To get percentage,
	// the value should be divided by 1 million.
	HypervisorCpuUsagePpm *int64 `protobuf:"varint,2,opt,name=hypervisor_cpu_usage_ppm,json=hypervisorCpuUsagePpm" json:"hypervisor_cpu_usage_ppm,omitempty"`
	// Memory usage.
	HypervisorMemoryUsagePpm *int64 `protobuf:"varint,3,opt,name=hypervisor_memory_usage_ppm,json=hypervisorMemoryUsagePpm" json:"hypervisor_memory_usage_ppm,omitempty"`
	// The total number of bytes transmitted from the cluster while doing
	// replications. (Sum of all the protection domains transmitted bytes.)
	ReplicationNumTransmittedBytes *int64 `protobuf:"varint,4,opt,name=replication_num_transmitted_bytes,json=replicationNumTransmittedBytes" json:"replication_num_transmitted_bytes,omitempty"`
	// The total number of bytes received by the cluster while doing
	// replications. (Sum of all the protection domains received bytes.)
	ReplicationNumReceivedBytes *int64 `protobuf:"varint,5,opt,name=replication_num_received_bytes,json=replicationNumReceivedBytes" json:"replication_num_received_bytes,omitempty"`
	// The time span which the replication stats is recorded.
	ReplicationTimespanUsecs *int64 `protobuf:"varint,6,opt,name=replication_timespan_usecs,json=replicationTimespanUsecs" json:"replication_timespan_usecs,omitempty"`
	// Number of content cache hits.
	ContentCacheNumHits *int64 `protobuf:"varint,7,opt,name=content_cache_num_hits,json=contentCacheNumHits" json:"content_cache_num_hits,omitempty"`
	// Number of content cache lookups.
	ContentCacheNumLookups *int64 `protobuf:"varint,8,opt,name=content_cache_num_lookups,json=contentCacheNumLookups" json:"content_cache_num_lookups,omitempty"`
	// Content cache logical memory usage in bytes. This is the logical memory
	// usage to cache the data in memory without deduplication.
	ContentCacheLogicalMemoryUsageBytes *int64 `protobuf:"varint,9,opt,name=content_cache_logical_memory_usage_bytes,json=contentCacheLogicalMemoryUsageBytes" json:"content_cache_logical_memory_usage_bytes,omitempty"`
	// Content cache physical memory usage in bytes. This is the real memory
	// usage to cache data by content cache.
	ContentCachePhysicalMemoryUsageBytes *int64 `protobuf:"varint,10,opt,name=content_cache_physical_memory_usage_bytes,json=contentCachePhysicalMemoryUsageBytes" json:"content_cache_physical_memory_usage_bytes,omitempty"`
	// Content cache logical SSD usage in bytes. This is the logical SSD
	// usage to cache the data in SSD without deduplication.
	ContentCacheLogicalSsdUsageBytes *int64 `protobuf:"varint,11,opt,name=content_cache_logical_ssd_usage_bytes,json=contentCacheLogicalSsdUsageBytes" json:"content_cache_logical_ssd_usage_bytes,omitempty"`
	// Content cache SSDs usage in bytes. This is the real SSD
	// usage to cache data by content cache.
	ContentCachePhysicalSsdUsageBytes *int64 `protobuf:"varint,12,opt,name=content_cache_physical_ssd_usage_bytes,json=contentCachePhysicalSsdUsageBytes" json:"content_cache_physical_ssd_usage_bytes,omitempty"`
	// The number of written bytes for which fingerprints have been added.
	DedupFingerprintAddedBytes *int64 `protobuf:"varint,13,opt,name=dedup_fingerprint_added_bytes,json=dedupFingerprintAddedBytes" json:"dedup_fingerprint_added_bytes,omitempty"`
	// The number of written bytes for which fingerprints have been cleared.
	DedupFingerprintClearedBytes *int64 `protobuf:"varint,14,opt,name=dedup_fingerprint_cleared_bytes,json=dedupFingerprintClearedBytes" json:"dedup_fingerprint_cleared_bytes,omitempty"`
	// Effective size of the disks on this cluster. This value excludes the
	// disk sizes that belong to nodes that are down.
	EffectiveDiskSizeBytes *int64 `protobuf:"varint,15,opt,name=effective_disk_size_bytes,json=effectiveDiskSizeBytes" json:"effective_disk_size_bytes,omitempty"`
	// Transformed space usage is bytes after transformation (like compression,
	// encryption etc). Effective transformed usage is equal to transformed
	// usage bytes if all nodes are up and will exclude the disk usages
	// of the nodes that are down.
	TotalEffectiveTransformedUsageBytes *int64 `protobuf:"varint,16,opt,name=total_effective_transformed_usage_bytes,json=totalEffectiveTransformedUsageBytes" json:"total_effective_transformed_usage_bytes,omitempty"`
	// Transmitted bandwidth - KB per second.
	ReplicationTransmittedBandwidthKBps *int64 `protobuf:"varint,101,opt,name=replication_transmitted_bandwidth_kBps,json=replicationTransmittedBandwidthKBps" json:"replication_transmitted_bandwidth_kBps,omitempty"`
	// Received bandwidth - KB per second.
	ReplicationReceivedBandwidthKBps *int64 `protobuf:"varint,102,opt,name=replication_received_bandwidth_kBps,json=replicationReceivedBandwidthKBps" json:"replication_received_bandwidth_kBps,omitempty"`
	// Content cache hit ratio in terms of parts per million. To get percentage
	// hit ratio, the value should be divided by 1 million.
	ContentCacheHitPpm *int64 `protobuf:"varint,103,opt,name=content_cache_hit_ppm,json=contentCacheHitPpm" json:"content_cache_hit_ppm,omitempty"`
	// Number of dedup reference counts in parts per hundred. To get the number
	// of reference counts, divide this value by 100.
	ContentCacheNumDedupRefCountPph *int64 `protobuf:"varint,104,opt,name=content_cache_num_dedup_ref_count_pph,json=contentCacheNumDedupRefCountPph" json:"content_cache_num_dedup_ref_count_pph,omitempty"`
	// The saved memory usage due to content cache deduplication. This is the
	// difference between content_cache_logical_memory_usage_bytes and
	// content_cache_physical_memory_usage_bytes.
	ContentCacheSavedMemoryUsageBytes *int64 `protobuf:"varint,105,opt,name=content_cache_saved_memory_usage_bytes,json=contentCacheSavedMemoryUsageBytes" json:"content_cache_saved_memory_usage_bytes,omitempty"`
	// The saved SSD usage due to content cache deduplication. This is the
	// difference between content_cache_logical_ssd_usage_bytes and
	// content_cache_physical_ssd_usage_bytes.
	ContentCacheSavedSsdUsageBytes *int64 `protobuf:"varint,106,opt,name=content_cache_saved_ssd_usage_bytes,json=contentCacheSavedSsdUsageBytes" json:"content_cache_saved_ssd_usage_bytes,omitempty"`
	// Effective free space of the disks on this cluster.
	// This is equal to effective_disk_size_bytes minus
	// effective_total_transformed_usage_bytes.
	EffectiveFreeSpaceBytes *int64 `protobuf:"varint,107,opt,name=effective_free_space_bytes,json=effectiveFreeSpaceBytes" json:"effective_free_space_bytes,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Cluster_Stats) Reset()         { *m = Cluster_Stats{} }
func (m *Cluster_Stats) String() string { return proto.CompactTextString(m) }
func (*Cluster_Stats) ProtoMessage()    {}
func (*Cluster_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{24, 0}
}

func (m *Cluster_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_Stats.Unmarshal(m, b)
}
func (m *Cluster_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_Stats.Marshal(b, m, deterministic)
}
func (m *Cluster_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_Stats.Merge(m, src)
}
func (m *Cluster_Stats) XXX_Size() int {
	return xxx_messageInfo_Cluster_Stats.Size(m)
}
func (m *Cluster_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_Stats proto.InternalMessageInfo

func (m *Cluster_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *Cluster_Stats) GetHypervisorCpuUsagePpm() int64 {
	if m != nil && m.HypervisorCpuUsagePpm != nil {
		return *m.HypervisorCpuUsagePpm
	}
	return 0
}

func (m *Cluster_Stats) GetHypervisorMemoryUsagePpm() int64 {
	if m != nil && m.HypervisorMemoryUsagePpm != nil {
		return *m.HypervisorMemoryUsagePpm
	}
	return 0
}

func (m *Cluster_Stats) GetReplicationNumTransmittedBytes() int64 {
	if m != nil && m.ReplicationNumTransmittedBytes != nil {
		return *m.ReplicationNumTransmittedBytes
	}
	return 0
}

func (m *Cluster_Stats) GetReplicationNumReceivedBytes() int64 {
	if m != nil && m.ReplicationNumReceivedBytes != nil {
		return *m.ReplicationNumReceivedBytes
	}
	return 0
}

func (m *Cluster_Stats) GetReplicationTimespanUsecs() int64 {
	if m != nil && m.ReplicationTimespanUsecs != nil {
		return *m.ReplicationTimespanUsecs
	}
	return 0
}

func (m *Cluster_Stats) GetContentCacheNumHits() int64 {
	if m != nil && m.ContentCacheNumHits != nil {
		return *m.ContentCacheNumHits
	}
	return 0
}

func (m *Cluster_Stats) GetContentCacheNumLookups() int64 {
	if m != nil && m.ContentCacheNumLookups != nil {
		return *m.ContentCacheNumLookups
	}
	return 0
}

func (m *Cluster_Stats) GetContentCacheLogicalMemoryUsageBytes() int64 {
	if m != nil && m.ContentCacheLogicalMemoryUsageBytes != nil {
		return *m.ContentCacheLogicalMemoryUsageBytes
	}
	return 0
}

func (m *Cluster_Stats) GetContentCachePhysicalMemoryUsageBytes() int64 {
	if m != nil && m.ContentCachePhysicalMemoryUsageBytes != nil {
		return *m.ContentCachePhysicalMemoryUsageBytes
	}
	return 0
}

func (m *Cluster_Stats) GetContentCacheLogicalSsdUsageBytes() int64 {
	if m != nil && m.ContentCacheLogicalSsdUsageBytes != nil {
		return *m.ContentCacheLogicalSsdUsageBytes
	}
	return 0
}

func (m *Cluster_Stats) GetContentCachePhysicalSsdUsageBytes() int64 {
	if m != nil && m.ContentCachePhysicalSsdUsageBytes != nil {
		return *m.ContentCachePhysicalSsdUsageBytes
	}
	return 0
}

func (m *Cluster_Stats) GetDedupFingerprintAddedBytes() int64 {
	if m != nil && m.DedupFingerprintAddedBytes != nil {
		return *m.DedupFingerprintAddedBytes
	}
	return 0
}

func (m *Cluster_Stats) GetDedupFingerprintClearedBytes() int64 {
	if m != nil && m.DedupFingerprintClearedBytes != nil {
		return *m.DedupFingerprintClearedBytes
	}
	return 0
}

func (m *Cluster_Stats) GetEffectiveDiskSizeBytes() int64 {
	if m != nil && m.EffectiveDiskSizeBytes != nil {
		return *m.EffectiveDiskSizeBytes
	}
	return 0
}

func (m *Cluster_Stats) GetTotalEffectiveTransformedUsageBytes() int64 {
	if m != nil && m.TotalEffectiveTransformedUsageBytes != nil {
		return *m.TotalEffectiveTransformedUsageBytes
	}
	return 0
}

func (m *Cluster_Stats) GetReplicationTransmittedBandwidthKBps() int64 {
	if m != nil && m.ReplicationTransmittedBandwidthKBps != nil {
		return *m.ReplicationTransmittedBandwidthKBps
	}
	return 0
}

func (m *Cluster_Stats) GetReplicationReceivedBandwidthKBps() int64 {
	if m != nil && m.ReplicationReceivedBandwidthKBps != nil {
		return *m.ReplicationReceivedBandwidthKBps
	}
	return 0
}

func (m *Cluster_Stats) GetContentCacheHitPpm() int64 {
	if m != nil && m.ContentCacheHitPpm != nil {
		return *m.ContentCacheHitPpm
	}
	return 0
}

func (m *Cluster_Stats) GetContentCacheNumDedupRefCountPph() int64 {
	if m != nil && m.ContentCacheNumDedupRefCountPph != nil {
		return *m.ContentCacheNumDedupRefCountPph
	}
	return 0
}

func (m *Cluster_Stats) GetContentCacheSavedMemoryUsageBytes() int64 {
	if m != nil && m.ContentCacheSavedMemoryUsageBytes != nil {
		return *m.ContentCacheSavedMemoryUsageBytes
	}
	return 0
}

func (m *Cluster_Stats) GetContentCacheSavedSsdUsageBytes() int64 {
	if m != nil && m.ContentCacheSavedSsdUsageBytes != nil {
		return *m.ContentCacheSavedSsdUsageBytes
	}
	return 0
}

func (m *Cluster_Stats) GetEffectiveFreeSpaceBytes() int64 {
	if m != nil && m.EffectiveFreeSpaceBytes != nil {
		return *m.EffectiveFreeSpaceBytes
	}
	return 0
}

func (m *Cluster_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

type RemoteSite struct {
	// Remote Site name. This is the name of the RemoteSite object in Zeus.
	Id    []byte            `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *RemoteSite_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// Generic attributes.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,4,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	// UUID of the remote site.
	RemoteSiteUuid       *string  `protobuf:"bytes,5,opt,name=remote_site_uuid,json=remoteSiteUuid" json:"remote_site_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteSite) Reset()         { *m = RemoteSite{} }
func (m *RemoteSite) String() string { return proto.CompactTextString(m) }
func (*RemoteSite) ProtoMessage()    {}
func (*RemoteSite) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{25}
}

func (m *RemoteSite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteSite.Unmarshal(m, b)
}
func (m *RemoteSite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteSite.Marshal(b, m, deterministic)
}
func (m *RemoteSite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteSite.Merge(m, src)
}
func (m *RemoteSite) XXX_Size() int {
	return xxx_messageInfo_RemoteSite.Size(m)
}
func (m *RemoteSite) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteSite.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteSite proto.InternalMessageInfo

func (m *RemoteSite) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RemoteSite) GetStats() *RemoteSite_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *RemoteSite) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

func (m *RemoteSite) GetRemoteSiteUuid() string {
	if m != nil && m.RemoteSiteUuid != nil {
		return *m.RemoteSiteUuid
	}
	return ""
}

// Remote site specific stats.
type RemoteSite_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// Number of transmitted bytes since the last update.
	ReplicationNumTransmittedBytes *int64 `protobuf:"varint,2,opt,name=replication_num_transmitted_bytes,json=replicationNumTransmittedBytes" json:"replication_num_transmitted_bytes,omitempty"`
	// Number of received bytes since the last update.
	ReplicationNumReceivedBytes *int64 `protobuf:"varint,3,opt,name=replication_num_received_bytes,json=replicationNumReceivedBytes" json:"replication_num_received_bytes,omitempty"`
	// The time span which the replication stats is recorded.
	ReplicationTimespanUsecs *int64 `protobuf:"varint,4,opt,name=replication_timespan_usecs,json=replicationTimespanUsecs" json:"replication_timespan_usecs,omitempty"`
	// Total disk usage in bytes for the remote site.
	ReplicationTotalRemoteSiteDiskUsageBytes *int64 `protobuf:"varint,5,opt,name=replication_total_remote_site_disk_usage_bytes,json=replicationTotalRemoteSiteDiskUsageBytes" json:"replication_total_remote_site_disk_usage_bytes,omitempty"`
	// Transmitted bandwidth - KB per second.
	ReplicationTransmittedBandwidthKBps *int64 `protobuf:"varint,101,opt,name=replication_transmitted_bandwidth_kBps,json=replicationTransmittedBandwidthKBps" json:"replication_transmitted_bandwidth_kBps,omitempty"`
	// Received bandwidth - KB per second.
	ReplicationReceivedBandwidthKBps *int64 `protobuf:"varint,102,opt,name=replication_received_bandwidth_kBps,json=replicationReceivedBandwidthKBps" json:"replication_received_bandwidth_kBps,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RemoteSite_Stats) Reset()         { *m = RemoteSite_Stats{} }
func (m *RemoteSite_Stats) String() string { return proto.CompactTextString(m) }
func (*RemoteSite_Stats) ProtoMessage()    {}
func (*RemoteSite_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{25, 0}
}

func (m *RemoteSite_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteSite_Stats.Unmarshal(m, b)
}
func (m *RemoteSite_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteSite_Stats.Marshal(b, m, deterministic)
}
func (m *RemoteSite_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteSite_Stats.Merge(m, src)
}
func (m *RemoteSite_Stats) XXX_Size() int {
	return xxx_messageInfo_RemoteSite_Stats.Size(m)
}
func (m *RemoteSite_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteSite_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteSite_Stats proto.InternalMessageInfo

func (m *RemoteSite_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *RemoteSite_Stats) GetReplicationNumTransmittedBytes() int64 {
	if m != nil && m.ReplicationNumTransmittedBytes != nil {
		return *m.ReplicationNumTransmittedBytes
	}
	return 0
}

func (m *RemoteSite_Stats) GetReplicationNumReceivedBytes() int64 {
	if m != nil && m.ReplicationNumReceivedBytes != nil {
		return *m.ReplicationNumReceivedBytes
	}
	return 0
}

func (m *RemoteSite_Stats) GetReplicationTimespanUsecs() int64 {
	if m != nil && m.ReplicationTimespanUsecs != nil {
		return *m.ReplicationTimespanUsecs
	}
	return 0
}

func (m *RemoteSite_Stats) GetReplicationTotalRemoteSiteDiskUsageBytes() int64 {
	if m != nil && m.ReplicationTotalRemoteSiteDiskUsageBytes != nil {
		return *m.ReplicationTotalRemoteSiteDiskUsageBytes
	}
	return 0
}

func (m *RemoteSite_Stats) GetReplicationTransmittedBandwidthKBps() int64 {
	if m != nil && m.ReplicationTransmittedBandwidthKBps != nil {
		return *m.ReplicationTransmittedBandwidthKBps
	}
	return 0
}

func (m *RemoteSite_Stats) GetReplicationReceivedBandwidthKBps() int64 {
	if m != nil && m.ReplicationReceivedBandwidthKBps != nil {
		return *m.ReplicationReceivedBandwidthKBps
	}
	return 0
}

func (m *RemoteSite_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

type ProtectionDomain struct {
	// Protection domain name.
	Id    []byte                  `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *ProtectionDomain_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// Total user-written bytes across all snapshots of this protection domain.
	// Any garbage collected snapshots are excluded from this count.
	UserWrittenBytes *int64 `protobuf:"varint,3,opt,name=user_written_bytes,json=userWrittenBytes" json:"user_written_bytes,omitempty"`
	// Generic attributes.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,5,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProtectionDomain) Reset()         { *m = ProtectionDomain{} }
func (m *ProtectionDomain) String() string { return proto.CompactTextString(m) }
func (*ProtectionDomain) ProtoMessage()    {}
func (*ProtectionDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{26}
}

func (m *ProtectionDomain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtectionDomain.Unmarshal(m, b)
}
func (m *ProtectionDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtectionDomain.Marshal(b, m, deterministic)
}
func (m *ProtectionDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtectionDomain.Merge(m, src)
}
func (m *ProtectionDomain) XXX_Size() int {
	return xxx_messageInfo_ProtectionDomain.Size(m)
}
func (m *ProtectionDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtectionDomain.DiscardUnknown(m)
}

var xxx_messageInfo_ProtectionDomain proto.InternalMessageInfo

func (m *ProtectionDomain) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ProtectionDomain) GetStats() *ProtectionDomain_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *ProtectionDomain) GetUserWrittenBytes() int64 {
	if m != nil && m.UserWrittenBytes != nil {
		return *m.UserWrittenBytes
	}
	return 0
}

func (m *ProtectionDomain) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

// Protection domain specific stats.
type ProtectionDomain_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// Number of transmitted bytes since the last update.
	ReplicationNumTransmittedBytes *int64 `protobuf:"varint,2,opt,name=replication_num_transmitted_bytes,json=replicationNumTransmittedBytes" json:"replication_num_transmitted_bytes,omitempty"`
	// Number of received bytes since the last update.
	ReplicationNumReceivedBytes *int64 `protobuf:"varint,3,opt,name=replication_num_received_bytes,json=replicationNumReceivedBytes" json:"replication_num_received_bytes,omitempty"`
	// The time span which the replication stats is recorded.
	ReplicationTimespanUsecs *int64 `protobuf:"varint,4,opt,name=replication_timespan_usecs,json=replicationTimespanUsecs" json:"replication_timespan_usecs,omitempty"`
	// Leave spaces for future raw stats.
	// Transmitted bandwidth - KB per second.
	ReplicationTransmittedBandwidthKBps *int64 `protobuf:"varint,101,opt,name=replication_transmitted_bandwidth_kBps,json=replicationTransmittedBandwidthKBps" json:"replication_transmitted_bandwidth_kBps,omitempty"`
	// Received bandwidth - KB per second.
	ReplicationReceivedBandwidthKBps *int64 `protobuf:"varint,102,opt,name=replication_received_bandwidth_kBps,json=replicationReceivedBandwidthKBps" json:"replication_received_bandwidth_kBps,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProtectionDomain_Stats) Reset()         { *m = ProtectionDomain_Stats{} }
func (m *ProtectionDomain_Stats) String() string { return proto.CompactTextString(m) }
func (*ProtectionDomain_Stats) ProtoMessage()    {}
func (*ProtectionDomain_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{26, 0}
}

func (m *ProtectionDomain_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtectionDomain_Stats.Unmarshal(m, b)
}
func (m *ProtectionDomain_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtectionDomain_Stats.Marshal(b, m, deterministic)
}
func (m *ProtectionDomain_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtectionDomain_Stats.Merge(m, src)
}
func (m *ProtectionDomain_Stats) XXX_Size() int {
	return xxx_messageInfo_ProtectionDomain_Stats.Size(m)
}
func (m *ProtectionDomain_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtectionDomain_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_ProtectionDomain_Stats proto.InternalMessageInfo

func (m *ProtectionDomain_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *ProtectionDomain_Stats) GetReplicationNumTransmittedBytes() int64 {
	if m != nil && m.ReplicationNumTransmittedBytes != nil {
		return *m.ReplicationNumTransmittedBytes
	}
	return 0
}

func (m *ProtectionDomain_Stats) GetReplicationNumReceivedBytes() int64 {
	if m != nil && m.ReplicationNumReceivedBytes != nil {
		return *m.ReplicationNumReceivedBytes
	}
	return 0
}

func (m *ProtectionDomain_Stats) GetReplicationTimespanUsecs() int64 {
	if m != nil && m.ReplicationTimespanUsecs != nil {
		return *m.ReplicationTimespanUsecs
	}
	return 0
}

func (m *ProtectionDomain_Stats) GetReplicationTransmittedBandwidthKBps() int64 {
	if m != nil && m.ReplicationTransmittedBandwidthKBps != nil {
		return *m.ReplicationTransmittedBandwidthKBps
	}
	return 0
}

func (m *ProtectionDomain_Stats) GetReplicationReceivedBandwidthKBps() int64 {
	if m != nil && m.ReplicationReceivedBandwidthKBps != nil {
		return *m.ReplicationReceivedBandwidthKBps
	}
	return 0
}

func (m *ProtectionDomain_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

type Snapshot struct {
	// Snapshot handle.
	Id    []byte          `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *Snapshot_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// Wall time when this snapshot was created.
	CreateTimeUsecs *int64 `protobuf:"varint,3,opt,name=create_time_usecs,json=createTimeUsecs" json:"create_time_usecs,omitempty"`
	// This is the sum of all the user-written bytes in all the entities in the
	// snapshot.
	UserWrittenBytes *int64 `protobuf:"varint,4,opt,name=user_written_bytes,json=userWrittenBytes" json:"user_written_bytes,omitempty"`
	// List of all the VM ids in the snapshot.
	VmIds []string `protobuf:"bytes,5,rep,name=vm_ids,json=vmIds" json:"vm_ids,omitempty"`
	// If the snapshot was created as a result of one or more out-of-band
	// schedules, then this is the list of those schedule ids.
	ScheduleIds []string `protobuf:"bytes,6,rep,name=schedule_ids,json=scheduleIds" json:"schedule_ids,omitempty"`
	// Generic attributes.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,8,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	// Snapshot UUID.
	SnapshotUuid         *string  `protobuf:"bytes,9,opt,name=snapshot_uuid,json=snapshotUuid" json:"snapshot_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{27}
}

func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Snapshot.Unmarshal(m, b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return xxx_messageInfo_Snapshot.Size(m)
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Snapshot) GetStats() *Snapshot_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Snapshot) GetCreateTimeUsecs() int64 {
	if m != nil && m.CreateTimeUsecs != nil {
		return *m.CreateTimeUsecs
	}
	return 0
}

func (m *Snapshot) GetUserWrittenBytes() int64 {
	if m != nil && m.UserWrittenBytes != nil {
		return *m.UserWrittenBytes
	}
	return 0
}

func (m *Snapshot) GetVmIds() []string {
	if m != nil {
		return m.VmIds
	}
	return nil
}

func (m *Snapshot) GetScheduleIds() []string {
	if m != nil {
		return m.ScheduleIds
	}
	return nil
}

func (m *Snapshot) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

func (m *Snapshot) GetSnapshotUuid() string {
	if m != nil && m.SnapshotUuid != nil {
		return *m.SnapshotUuid
	}
	return ""
}

// Snapshot stats.
type Snapshot_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Snapshot_Stats) Reset()         { *m = Snapshot_Stats{} }
func (m *Snapshot_Stats) String() string { return proto.CompactTextString(m) }
func (*Snapshot_Stats) ProtoMessage()    {}
func (*Snapshot_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{27, 0}
}

func (m *Snapshot_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Snapshot_Stats.Unmarshal(m, b)
}
func (m *Snapshot_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Snapshot_Stats.Marshal(b, m, deterministic)
}
func (m *Snapshot_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot_Stats.Merge(m, src)
}
func (m *Snapshot_Stats) XXX_Size() int {
	return xxx_messageInfo_Snapshot_Stats.Size(m)
}
func (m *Snapshot_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot_Stats proto.InternalMessageInfo

func (m *Snapshot_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *Snapshot_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

type ReplicationLink struct {
	// ReplicationLink id.
	Id    []byte                 `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *ReplicationLink_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// Remote site name.
	RemoteName *string `protobuf:"bytes,3,opt,name=remote_name,json=remoteName" json:"remote_name,omitempty"`
	// Protection domain name.
	ProtectionDomainName *string `protobuf:"bytes,4,opt,name=protection_domain_name,json=protectionDomainName" json:"protection_domain_name,omitempty"`
	// Snapshot handle for the current snapshot being replicated.
	// Format is: (<cluster-id>, <cluster-incarnation-id>, <entity-id>) where
	// all three component are of type long. example: "(2, 45, 3444)".
	CurrentSnapshotId *string `protobuf:"bytes,5,opt,name=current_snapshot_id,json=currentSnapshotId" json:"current_snapshot_id,omitempty"`
	// User written bytes for the current snapshot being replicated.
	UserWrittenBytes *int64 `protobuf:"varint,6,opt,name=user_written_bytes,json=userWrittenBytes" json:"user_written_bytes,omitempty"`
	// Snapshot handle for the last successfully replicated snapshot.
	// Format is: (<cluster-id>, <cluster-incarnation-id>, <entity-id>) where
	// all three component are of type long. example: "(2, 45, 3444)".
	LastReplicatedSnapshotId *string `protobuf:"bytes,7,opt,name=last_replicated_snapshot_id,json=lastReplicatedSnapshotId" json:"last_replicated_snapshot_id,omitempty"`
	// Wall time when the replication for the last successfully replicated
	// snapshot completed.
	LastReplicatedSnapshotTimeUsecs *int64 `protobuf:"varint,8,opt,name=last_replicated_snapshot_time_usecs,json=lastReplicatedSnapshotTimeUsecs" json:"last_replicated_snapshot_time_usecs,omitempty"`
	// Whether this is an outbound replication. 1 means this is an outbound
	// replication. 0 means this is an inbound replication.
	OutboundReplication *int64 `protobuf:"varint,9,opt,name=outbound_replication,json=outboundReplication" json:"outbound_replication,omitempty"`
	// Wall time when the replication for the last successfully replicated
	// snapshot started.
	LastReplicationStartTimeUsecs *int64 `protobuf:"varint,10,opt,name=last_replication_start_time_usecs,json=lastReplicationStartTimeUsecs" json:"last_replication_start_time_usecs,omitempty"`
	// Generic attributes.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,12,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReplicationLink) Reset()         { *m = ReplicationLink{} }
func (m *ReplicationLink) String() string { return proto.CompactTextString(m) }
func (*ReplicationLink) ProtoMessage()    {}
func (*ReplicationLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{28}
}

func (m *ReplicationLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicationLink.Unmarshal(m, b)
}
func (m *ReplicationLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicationLink.Marshal(b, m, deterministic)
}
func (m *ReplicationLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationLink.Merge(m, src)
}
func (m *ReplicationLink) XXX_Size() int {
	return xxx_messageInfo_ReplicationLink.Size(m)
}
func (m *ReplicationLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationLink.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationLink proto.InternalMessageInfo

func (m *ReplicationLink) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReplicationLink) GetStats() *ReplicationLink_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *ReplicationLink) GetRemoteName() string {
	if m != nil && m.RemoteName != nil {
		return *m.RemoteName
	}
	return ""
}

func (m *ReplicationLink) GetProtectionDomainName() string {
	if m != nil && m.ProtectionDomainName != nil {
		return *m.ProtectionDomainName
	}
	return ""
}

func (m *ReplicationLink) GetCurrentSnapshotId() string {
	if m != nil && m.CurrentSnapshotId != nil {
		return *m.CurrentSnapshotId
	}
	return ""
}

func (m *ReplicationLink) GetUserWrittenBytes() int64 {
	if m != nil && m.UserWrittenBytes != nil {
		return *m.UserWrittenBytes
	}
	return 0
}

func (m *ReplicationLink) GetLastReplicatedSnapshotId() string {
	if m != nil && m.LastReplicatedSnapshotId != nil {
		return *m.LastReplicatedSnapshotId
	}
	return ""
}

func (m *ReplicationLink) GetLastReplicatedSnapshotTimeUsecs() int64 {
	if m != nil && m.LastReplicatedSnapshotTimeUsecs != nil {
		return *m.LastReplicatedSnapshotTimeUsecs
	}
	return 0
}

func (m *ReplicationLink) GetOutboundReplication() int64 {
	if m != nil && m.OutboundReplication != nil {
		return *m.OutboundReplication
	}
	return 0
}

func (m *ReplicationLink) GetLastReplicationStartTimeUsecs() int64 {
	if m != nil && m.LastReplicationStartTimeUsecs != nil {
		return *m.LastReplicationStartTimeUsecs
	}
	return 0
}

func (m *ReplicationLink) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

// Replication stats.
type ReplicationLink_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// Number of transmitted bytes since the last update.
	ReplicationNumTransmittedBytes *int64 `protobuf:"varint,2,opt,name=replication_num_transmitted_bytes,json=replicationNumTransmittedBytes" json:"replication_num_transmitted_bytes,omitempty"`
	// Number of received bytes since the last update.
	ReplicationNumReceivedBytes *int64 `protobuf:"varint,3,opt,name=replication_num_received_bytes,json=replicationNumReceivedBytes" json:"replication_num_received_bytes,omitempty"`
	// Total transmitted bytes.
	ReplicationTotalTransmittedBytes *int64 `protobuf:"varint,4,opt,name=replication_total_transmitted_bytes,json=replicationTotalTransmittedBytes" json:"replication_total_transmitted_bytes,omitempty"`
	// Total received bytes.
	ReplicationTotalReceivedBytes *int64 `protobuf:"varint,5,opt,name=replication_total_received_bytes,json=replicationTotalReceivedBytes" json:"replication_total_received_bytes,omitempty"`
	// The time span which the replication stats is recorded.
	ReplicationTimespanUsecs *int64 `protobuf:"varint,6,opt,name=replication_timespan_usecs,json=replicationTimespanUsecs" json:"replication_timespan_usecs,omitempty"`
	// Transmitted bandwidth - KB per second.
	ReplicationTransmittedBandwidthKBps *int64 `protobuf:"varint,101,opt,name=replication_transmitted_bandwidth_kBps,json=replicationTransmittedBandwidthKBps" json:"replication_transmitted_bandwidth_kBps,omitempty"`
	// Received bandwidth - KB per second.
	ReplicationReceivedBandwidthKBps *int64 `protobuf:"varint,102,opt,name=replication_received_bandwidth_kBps,json=replicationReceivedBandwidthKBps" json:"replication_received_bandwidth_kBps,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReplicationLink_Stats) Reset()         { *m = ReplicationLink_Stats{} }
func (m *ReplicationLink_Stats) String() string { return proto.CompactTextString(m) }
func (*ReplicationLink_Stats) ProtoMessage()    {}
func (*ReplicationLink_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{28, 0}
}

func (m *ReplicationLink_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicationLink_Stats.Unmarshal(m, b)
}
func (m *ReplicationLink_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicationLink_Stats.Marshal(b, m, deterministic)
}
func (m *ReplicationLink_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationLink_Stats.Merge(m, src)
}
func (m *ReplicationLink_Stats) XXX_Size() int {
	return xxx_messageInfo_ReplicationLink_Stats.Size(m)
}
func (m *ReplicationLink_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationLink_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationLink_Stats proto.InternalMessageInfo

func (m *ReplicationLink_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *ReplicationLink_Stats) GetReplicationNumTransmittedBytes() int64 {
	if m != nil && m.ReplicationNumTransmittedBytes != nil {
		return *m.ReplicationNumTransmittedBytes
	}
	return 0
}

func (m *ReplicationLink_Stats) GetReplicationNumReceivedBytes() int64 {
	if m != nil && m.ReplicationNumReceivedBytes != nil {
		return *m.ReplicationNumReceivedBytes
	}
	return 0
}

func (m *ReplicationLink_Stats) GetReplicationTotalTransmittedBytes() int64 {
	if m != nil && m.ReplicationTotalTransmittedBytes != nil {
		return *m.ReplicationTotalTransmittedBytes
	}
	return 0
}

func (m *ReplicationLink_Stats) GetReplicationTotalReceivedBytes() int64 {
	if m != nil && m.ReplicationTotalReceivedBytes != nil {
		return *m.ReplicationTotalReceivedBytes
	}
	return 0
}

func (m *ReplicationLink_Stats) GetReplicationTimespanUsecs() int64 {
	if m != nil && m.ReplicationTimespanUsecs != nil {
		return *m.ReplicationTimespanUsecs
	}
	return 0
}

func (m *ReplicationLink_Stats) GetReplicationTransmittedBandwidthKBps() int64 {
	if m != nil && m.ReplicationTransmittedBandwidthKBps != nil {
		return *m.ReplicationTransmittedBandwidthKBps
	}
	return 0
}

func (m *ReplicationLink_Stats) GetReplicationReceivedBandwidthKBps() int64 {
	if m != nil && m.ReplicationReceivedBandwidthKBps != nil {
		return *m.ReplicationReceivedBandwidthKBps
	}
	return 0
}

func (m *ReplicationLink_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

type UserDefinedEntity struct {
	// Entity id.
	Id    []byte                   `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Stats *UserDefinedEntity_Stats `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	// Generic attributes.
	GenericAttributeList []*GenericAttribute `protobuf:"bytes,4,rep,name=generic_attribute_list,json=genericAttributeList" json:"generic_attribute_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UserDefinedEntity) Reset()         { *m = UserDefinedEntity{} }
func (m *UserDefinedEntity) String() string { return proto.CompactTextString(m) }
func (*UserDefinedEntity) ProtoMessage()    {}
func (*UserDefinedEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{29}
}

func (m *UserDefinedEntity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDefinedEntity.Unmarshal(m, b)
}
func (m *UserDefinedEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDefinedEntity.Marshal(b, m, deterministic)
}
func (m *UserDefinedEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDefinedEntity.Merge(m, src)
}
func (m *UserDefinedEntity) XXX_Size() int {
	return xxx_messageInfo_UserDefinedEntity.Size(m)
}
func (m *UserDefinedEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDefinedEntity.DiscardUnknown(m)
}

var xxx_messageInfo_UserDefinedEntity proto.InternalMessageInfo

func (m *UserDefinedEntity) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *UserDefinedEntity) GetStats() *UserDefinedEntity_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *UserDefinedEntity) GetGenericAttributeList() []*GenericAttribute {
	if m != nil {
		return m.GenericAttributeList
	}
	return nil
}

// User defined entity stats.
type UserDefinedEntity_Stats struct {
	// Commonly used stats.
	CommonStats *CommonStats `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	// Generic stats.
	GenericStatList      []*GenericStat `protobuf:"bytes,201,rep,name=generic_stat_list,json=genericStatList" json:"generic_stat_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UserDefinedEntity_Stats) Reset()         { *m = UserDefinedEntity_Stats{} }
func (m *UserDefinedEntity_Stats) String() string { return proto.CompactTextString(m) }
func (*UserDefinedEntity_Stats) ProtoMessage()    {}
func (*UserDefinedEntity_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{29, 0}
}

func (m *UserDefinedEntity_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDefinedEntity_Stats.Unmarshal(m, b)
}
func (m *UserDefinedEntity_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDefinedEntity_Stats.Marshal(b, m, deterministic)
}
func (m *UserDefinedEntity_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDefinedEntity_Stats.Merge(m, src)
}
func (m *UserDefinedEntity_Stats) XXX_Size() int {
	return xxx_messageInfo_UserDefinedEntity_Stats.Size(m)
}
func (m *UserDefinedEntity_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDefinedEntity_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_UserDefinedEntity_Stats proto.InternalMessageInfo

func (m *UserDefinedEntity_Stats) GetCommonStats() *CommonStats {
	if m != nil {
		return m.CommonStats
	}
	return nil
}

func (m *UserDefinedEntity_Stats) GetGenericStatList() []*GenericStat {
	if m != nil {
		return m.GenericStatList
	}
	return nil
}

// Message that includes all the entity types above. This is embedded in the
// return message of some Arithmos RPCs. Based on the requested entity type,
// only 1 of the repeated fields is set.
type AnyEntity struct {
	// Disk entity.
	Disk []*Disk `protobuf:"bytes,1,rep,name=disk" json:"disk,omitempty"`
	// Vdisk entity.
	Vdisk []*VDisk `protobuf:"bytes,2,rep,name=vdisk" json:"vdisk,omitempty"`
	// VM entity.
	Vm []*VM `protobuf:"bytes,3,rep,name=vm" json:"vm,omitempty"`
	// Container entity.
	Container []*Container `protobuf:"bytes,4,rep,name=container" json:"container,omitempty"`
	// Storage pool entity.
	StoragePool []*StoragePool `protobuf:"bytes,5,rep,name=storage_pool,json=storagePool" json:"storage_pool,omitempty"`
	// Node entity.
	Node []*Node `protobuf:"bytes,6,rep,name=node" json:"node,omitempty"`
	// Cluster entity.
	Cluster []*Cluster `protobuf:"bytes,7,rep,name=cluster" json:"cluster,omitempty"`
	// Virtual disk entity.
	VirtualDisk []*VirtualDisk `protobuf:"bytes,8,rep,name=virtual_disk,json=virtualDisk" json:"virtual_disk,omitempty"`
	// Remote Site entity.
	RemoteSite []*RemoteSite `protobuf:"bytes,9,rep,name=remote_site,json=remoteSite" json:"remote_site,omitempty"`
	// Protection domain entity.
	ProtectionDomain []*ProtectionDomain `protobuf:"bytes,10,rep,name=protection_domain,json=protectionDomain" json:"protection_domain,omitempty"`
	// Snapshot entity.
	Snapshot []*Snapshot `protobuf:"bytes,11,rep,name=snapshot" json:"snapshot,omitempty"`
	// Replication entity.
	ReplicationLink []*ReplicationLink `protobuf:"bytes,12,rep,name=replication_link,json=replicationLink" json:"replication_link,omitempty"`
	// User defined entity.
	UserDefinedEntity []*UserDefinedEntity `protobuf:"bytes,13,rep,name=user_defined_entity,json=userDefinedEntity" json:"user_defined_entity,omitempty"`
	// Sync replication entity.
	SyncReplication []*UserDefinedEntity `protobuf:"bytes,14,rep,name=sync_replication,json=syncReplication" json:"sync_replication,omitempty"`
	// Volume Group entity.
	VolumeGroup []*UserDefinedEntity `protobuf:"bytes,15,rep,name=volume_group,json=volumeGroup" json:"volume_group,omitempty"`
	// Protection domain schedule entity.
	PdSchedule []*UserDefinedEntity `protobuf:"bytes,16,rep,name=pd_schedule,json=pdSchedule" json:"pd_schedule,omitempty"`
	// Recovery point replication stat entity.
	RecoveryPointReplicationStat []*UserDefinedEntity `protobuf:"bytes,17,rep,name=recovery_point_replication_stat,json=recoveryPointReplicationStat" json:"recovery_point_replication_stat,omitempty"`
	// Recovery point replication stat entity.
	ReplicationTargetInfo []*UserDefinedEntity `protobuf:"bytes,18,rep,name=replication_target_info,json=replicationTargetInfo" json:"replication_target_info,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *AnyEntity) Reset()         { *m = AnyEntity{} }
func (m *AnyEntity) String() string { return proto.CompactTextString(m) }
func (*AnyEntity) ProtoMessage()    {}
func (*AnyEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{30}
}

func (m *AnyEntity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnyEntity.Unmarshal(m, b)
}
func (m *AnyEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnyEntity.Marshal(b, m, deterministic)
}
func (m *AnyEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnyEntity.Merge(m, src)
}
func (m *AnyEntity) XXX_Size() int {
	return xxx_messageInfo_AnyEntity.Size(m)
}
func (m *AnyEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_AnyEntity.DiscardUnknown(m)
}

var xxx_messageInfo_AnyEntity proto.InternalMessageInfo

func (m *AnyEntity) GetDisk() []*Disk {
	if m != nil {
		return m.Disk
	}
	return nil
}

func (m *AnyEntity) GetVdisk() []*VDisk {
	if m != nil {
		return m.Vdisk
	}
	return nil
}

func (m *AnyEntity) GetVm() []*VM {
	if m != nil {
		return m.Vm
	}
	return nil
}

func (m *AnyEntity) GetContainer() []*Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *AnyEntity) GetStoragePool() []*StoragePool {
	if m != nil {
		return m.StoragePool
	}
	return nil
}

func (m *AnyEntity) GetNode() []*Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *AnyEntity) GetCluster() []*Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *AnyEntity) GetVirtualDisk() []*VirtualDisk {
	if m != nil {
		return m.VirtualDisk
	}
	return nil
}

func (m *AnyEntity) GetRemoteSite() []*RemoteSite {
	if m != nil {
		return m.RemoteSite
	}
	return nil
}

func (m *AnyEntity) GetProtectionDomain() []*ProtectionDomain {
	if m != nil {
		return m.ProtectionDomain
	}
	return nil
}

func (m *AnyEntity) GetSnapshot() []*Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (m *AnyEntity) GetReplicationLink() []*ReplicationLink {
	if m != nil {
		return m.ReplicationLink
	}
	return nil
}

func (m *AnyEntity) GetUserDefinedEntity() []*UserDefinedEntity {
	if m != nil {
		return m.UserDefinedEntity
	}
	return nil
}

func (m *AnyEntity) GetSyncReplication() []*UserDefinedEntity {
	if m != nil {
		return m.SyncReplication
	}
	return nil
}

func (m *AnyEntity) GetVolumeGroup() []*UserDefinedEntity {
	if m != nil {
		return m.VolumeGroup
	}
	return nil
}

func (m *AnyEntity) GetPdSchedule() []*UserDefinedEntity {
	if m != nil {
		return m.PdSchedule
	}
	return nil
}

func (m *AnyEntity) GetRecoveryPointReplicationStat() []*UserDefinedEntity {
	if m != nil {
		return m.RecoveryPointReplicationStat
	}
	return nil
}

func (m *AnyEntity) GetReplicationTargetInfo() []*UserDefinedEntity {
	if m != nil {
		return m.ReplicationTargetInfo
	}
	return nil
}

// This protobuf stores entities (and their associated stats) that are
// currently in memory and haven't been flushed to Cassandra. Since the set
// of entities consists of only those that aren't flushed to Cassandra, the
// amount of data stored will be small.
type PersistEntities struct {
	//---------------------------------------------------------------------------
	// The following two fields should not be visible while working with the
	// PersistEntities proto. This is used to store the compressed version of
	// the serialized proto so that the Cassandra space utilization is minimized.
	// Compressed version of the serialized proto.
	CompressedSerializedProto []byte `protobuf:"bytes,1000,opt,name=compressed_serialized_proto,json=compressedSerializedProto" json:"compressed_serialized_proto,omitempty"`
	// Compression type. Possible compression type could be "snappy", "zlib" or
	// bzip2.
	CompressionType *string `protobuf:"bytes,1001,opt,name=compression_type,json=compressionType" json:"compression_type,omitempty"`
	//---------------------------------------------------------------------------
	//                  PersistEntities Proto
	//---------------------------------------------------------------------------
	// Entities and their stats that needs to be persisted.
	PersistEntityType    []*PersistEntityType `protobuf:"bytes,1,rep,name=persist_entity_type,json=persistEntityType" json:"persist_entity_type,omitempty"`
	ClusterVersion       *string              `protobuf:"bytes,2,opt,name=cluster_version,json=clusterVersion" json:"cluster_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PersistEntities) Reset()         { *m = PersistEntities{} }
func (m *PersistEntities) String() string { return proto.CompactTextString(m) }
func (*PersistEntities) ProtoMessage()    {}
func (*PersistEntities) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{31}
}

func (m *PersistEntities) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersistEntities.Unmarshal(m, b)
}
func (m *PersistEntities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersistEntities.Marshal(b, m, deterministic)
}
func (m *PersistEntities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistEntities.Merge(m, src)
}
func (m *PersistEntities) XXX_Size() int {
	return xxx_messageInfo_PersistEntities.Size(m)
}
func (m *PersistEntities) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistEntities.DiscardUnknown(m)
}

var xxx_messageInfo_PersistEntities proto.InternalMessageInfo

func (m *PersistEntities) GetCompressedSerializedProto() []byte {
	if m != nil {
		return m.CompressedSerializedProto
	}
	return nil
}

func (m *PersistEntities) GetCompressionType() string {
	if m != nil && m.CompressionType != nil {
		return *m.CompressionType
	}
	return ""
}

func (m *PersistEntities) GetPersistEntityType() []*PersistEntityType {
	if m != nil {
		return m.PersistEntityType
	}
	return nil
}

func (m *PersistEntities) GetClusterVersion() string {
	if m != nil && m.ClusterVersion != nil {
		return *m.ClusterVersion
	}
	return ""
}

type CassandraPartitionInfo struct {
	// Required: The start token for the partition scan. If "", it means scan
	// from the start of the column family.
	StartToken *string `protobuf:"bytes,1,opt,name=start_token,json=startToken" json:"start_token,omitempty"`
	// Required: The end token for the partition scan. If "", it means scan
	// till the end of the column family.
	EndToken             *string  `protobuf:"bytes,2,opt,name=end_token,json=endToken" json:"end_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CassandraPartitionInfo) Reset()         { *m = CassandraPartitionInfo{} }
func (m *CassandraPartitionInfo) String() string { return proto.CompactTextString(m) }
func (*CassandraPartitionInfo) ProtoMessage()    {}
func (*CassandraPartitionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{32}
}

func (m *CassandraPartitionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CassandraPartitionInfo.Unmarshal(m, b)
}
func (m *CassandraPartitionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CassandraPartitionInfo.Marshal(b, m, deterministic)
}
func (m *CassandraPartitionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CassandraPartitionInfo.Merge(m, src)
}
func (m *CassandraPartitionInfo) XXX_Size() int {
	return xxx_messageInfo_CassandraPartitionInfo.Size(m)
}
func (m *CassandraPartitionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CassandraPartitionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CassandraPartitionInfo proto.InternalMessageInfo

func (m *CassandraPartitionInfo) GetStartToken() string {
	if m != nil && m.StartToken != nil {
		return *m.StartToken
	}
	return ""
}

func (m *CassandraPartitionInfo) GetEndToken() string {
	if m != nil && m.EndToken != nil {
		return *m.EndToken
	}
	return ""
}

// This protobuf stores the Arithmos status.
type ArithmosStatus struct {
	// The logical timestamp that works like versioning. This is used when
	// updating the Zookeeper node to serialize the updates.
	LogicalTimestamp *int64 `protobuf:"varint,1,opt,name=logical_timestamp,json=logicalTimestamp" json:"logical_timestamp,omitempty"`
	// If true, we are done copying the stats proto in stats_realtime column
	// family. The copy is needed because we are changing the Cassandra data
	// model for stats_realtime.
	DoneCopyingOldStatProto *bool                                      `protobuf:"varint,2,opt,name=done_copying_old_stat_proto,json=doneCopyingOldStatProto" json:"done_copying_old_stat_proto,omitempty"`
	PartitionInfoList       []*ArithmosStatus_AggregationPartitionInfo `protobuf:"bytes,3,rep,name=partition_info_list,json=partitionInfoList" json:"partition_info_list,omitempty"`
	ArithmosVersion         *ArithmosStatus_ArithmosVersion            `protobuf:"varint,4,opt,name=arithmos_version,json=arithmosVersion,enum=nutanix.arithmos.interface.ArithmosStatus_ArithmosVersion,def=0" json:"arithmos_version,omitempty"`
	// Deprecated.
	// Describe the partitions for a particular entity type. In 4.6.1, Arithmos
	// supports partitions for VDisks and VG Virtual Disks.
	EntityPartitionList []*ArithmosStatus_EntityPartition `protobuf:"bytes,5,rep,name=entity_partition_list,json=entityPartitionList" json:"entity_partition_list,omitempty"`
	// This field specifies whether cluster upgrade is in progress or not. This
	// field will be set to true after 300 secs of upgrade completion. This is
	// needed for the last upgraded node in the cluster to take some actions
	// after the upgrade.
	IsUpgradeCompleted   *bool    `protobuf:"varint,6,opt,name=is_upgrade_completed,json=isUpgradeCompleted" json:"is_upgrade_completed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArithmosStatus) Reset()         { *m = ArithmosStatus{} }
func (m *ArithmosStatus) String() string { return proto.CompactTextString(m) }
func (*ArithmosStatus) ProtoMessage()    {}
func (*ArithmosStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{33}
}

func (m *ArithmosStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArithmosStatus.Unmarshal(m, b)
}
func (m *ArithmosStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArithmosStatus.Marshal(b, m, deterministic)
}
func (m *ArithmosStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArithmosStatus.Merge(m, src)
}
func (m *ArithmosStatus) XXX_Size() int {
	return xxx_messageInfo_ArithmosStatus.Size(m)
}
func (m *ArithmosStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ArithmosStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ArithmosStatus proto.InternalMessageInfo

const Default_ArithmosStatus_ArithmosVersion ArithmosStatus_ArithmosVersion = ArithmosStatus_kNoVersion

func (m *ArithmosStatus) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return 0
}

func (m *ArithmosStatus) GetDoneCopyingOldStatProto() bool {
	if m != nil && m.DoneCopyingOldStatProto != nil {
		return *m.DoneCopyingOldStatProto
	}
	return false
}

func (m *ArithmosStatus) GetPartitionInfoList() []*ArithmosStatus_AggregationPartitionInfo {
	if m != nil {
		return m.PartitionInfoList
	}
	return nil
}

func (m *ArithmosStatus) GetArithmosVersion() ArithmosStatus_ArithmosVersion {
	if m != nil && m.ArithmosVersion != nil {
		return *m.ArithmosVersion
	}
	return Default_ArithmosStatus_ArithmosVersion
}

func (m *ArithmosStatus) GetEntityPartitionList() []*ArithmosStatus_EntityPartition {
	if m != nil {
		return m.EntityPartitionList
	}
	return nil
}

func (m *ArithmosStatus) GetIsUpgradeCompleted() bool {
	if m != nil && m.IsUpgradeCompleted != nil {
		return *m.IsUpgradeCompleted
	}
	return false
}

type ArithmosStatus_AggregationPartitionInfo struct {
	// Required: The Arithmos agent's handle that owns this partition.
	AgentHandle *string `protobuf:"bytes,1,opt,name=agent_handle,json=agentHandle" json:"agent_handle,omitempty"`
	// Required: The partition that is owned by the Arithmos agent with
	//           the 'agent_handle' above.
	CassandraPartitionInfo *CassandraPartitionInfo `protobuf:"bytes,2,opt,name=cassandra_partition_info,json=cassandraPartitionInfo" json:"cassandra_partition_info,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_unrecognized       []byte                  `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *ArithmosStatus_AggregationPartitionInfo) Reset() {
	*m = ArithmosStatus_AggregationPartitionInfo{}
}
func (m *ArithmosStatus_AggregationPartitionInfo) String() string { return proto.CompactTextString(m) }
func (*ArithmosStatus_AggregationPartitionInfo) ProtoMessage()    {}
func (*ArithmosStatus_AggregationPartitionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{33, 0}
}

func (m *ArithmosStatus_AggregationPartitionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArithmosStatus_AggregationPartitionInfo.Unmarshal(m, b)
}
func (m *ArithmosStatus_AggregationPartitionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArithmosStatus_AggregationPartitionInfo.Marshal(b, m, deterministic)
}
func (m *ArithmosStatus_AggregationPartitionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArithmosStatus_AggregationPartitionInfo.Merge(m, src)
}
func (m *ArithmosStatus_AggregationPartitionInfo) XXX_Size() int {
	return xxx_messageInfo_ArithmosStatus_AggregationPartitionInfo.Size(m)
}
func (m *ArithmosStatus_AggregationPartitionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ArithmosStatus_AggregationPartitionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ArithmosStatus_AggregationPartitionInfo proto.InternalMessageInfo

func (m *ArithmosStatus_AggregationPartitionInfo) GetAgentHandle() string {
	if m != nil && m.AgentHandle != nil {
		return *m.AgentHandle
	}
	return ""
}

func (m *ArithmosStatus_AggregationPartitionInfo) GetCassandraPartitionInfo() *CassandraPartitionInfo {
	if m != nil {
		return m.CassandraPartitionInfo
	}
	return nil
}

// Deprecated.
// 'entity_id_list' owned by 'agent_handle' for an entity.
type ArithmosStatus_Partition struct {
	// Required: The partition that is owned by the Arithmos agent.
	AgentHandle *string `protobuf:"bytes,1,opt,name=agent_handle,json=agentHandle" json:"agent_handle,omitempty"`
	// List of entity ids owned by the Arithmos agent.
	EntityIdList         []string `protobuf:"bytes,2,rep,name=entity_id_list,json=entityIdList" json:"entity_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArithmosStatus_Partition) Reset()         { *m = ArithmosStatus_Partition{} }
func (m *ArithmosStatus_Partition) String() string { return proto.CompactTextString(m) }
func (*ArithmosStatus_Partition) ProtoMessage()    {}
func (*ArithmosStatus_Partition) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{33, 1}
}

func (m *ArithmosStatus_Partition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArithmosStatus_Partition.Unmarshal(m, b)
}
func (m *ArithmosStatus_Partition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArithmosStatus_Partition.Marshal(b, m, deterministic)
}
func (m *ArithmosStatus_Partition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArithmosStatus_Partition.Merge(m, src)
}
func (m *ArithmosStatus_Partition) XXX_Size() int {
	return xxx_messageInfo_ArithmosStatus_Partition.Size(m)
}
func (m *ArithmosStatus_Partition) XXX_DiscardUnknown() {
	xxx_messageInfo_ArithmosStatus_Partition.DiscardUnknown(m)
}

var xxx_messageInfo_ArithmosStatus_Partition proto.InternalMessageInfo

func (m *ArithmosStatus_Partition) GetAgentHandle() string {
	if m != nil && m.AgentHandle != nil {
		return *m.AgentHandle
	}
	return ""
}

func (m *ArithmosStatus_Partition) GetEntityIdList() []string {
	if m != nil {
		return m.EntityIdList
	}
	return nil
}

// Deprecated.
// List of entities in 'partition_list' for each agent for a particular
// 'entity_type'.
type ArithmosStatus_EntityPartition struct {
	// Entity type for partition.
	EntityType *ArithmosEntityProto_Type `protobuf:"varint,1,opt,name=entity_type,json=entityType,enum=nutanix.arithmos.interface.ArithmosEntityProto_Type" json:"entity_type,omitempty"`
	// Each partition in 'partition_list' lists the entities owned by an agent.
	PartitionList        []*ArithmosStatus_Partition `protobuf:"bytes,2,rep,name=partition_list,json=partitionList" json:"partition_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ArithmosStatus_EntityPartition) Reset()         { *m = ArithmosStatus_EntityPartition{} }
func (m *ArithmosStatus_EntityPartition) String() string { return proto.CompactTextString(m) }
func (*ArithmosStatus_EntityPartition) ProtoMessage()    {}
func (*ArithmosStatus_EntityPartition) Descriptor() ([]byte, []int) {
	return fileDescriptor_472fc1d214cab315, []int{33, 2}
}

func (m *ArithmosStatus_EntityPartition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArithmosStatus_EntityPartition.Unmarshal(m, b)
}
func (m *ArithmosStatus_EntityPartition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArithmosStatus_EntityPartition.Marshal(b, m, deterministic)
}
func (m *ArithmosStatus_EntityPartition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArithmosStatus_EntityPartition.Merge(m, src)
}
func (m *ArithmosStatus_EntityPartition) XXX_Size() int {
	return xxx_messageInfo_ArithmosStatus_EntityPartition.Size(m)
}
func (m *ArithmosStatus_EntityPartition) XXX_DiscardUnknown() {
	xxx_messageInfo_ArithmosStatus_EntityPartition.DiscardUnknown(m)
}

var xxx_messageInfo_ArithmosStatus_EntityPartition proto.InternalMessageInfo

func (m *ArithmosStatus_EntityPartition) GetEntityType() ArithmosEntityProto_Type {
	if m != nil && m.EntityType != nil {
		return *m.EntityType
	}
	return ArithmosEntityProto_kInvalidEntity
}

func (m *ArithmosStatus_EntityPartition) GetPartitionList() []*ArithmosStatus_Partition {
	if m != nil {
		return m.PartitionList
	}
	return nil
}

func init() {
	proto.RegisterEnum("nutanix.arithmos.interface.ArithmosErrorProto_Type", ArithmosErrorProto_Type_name, ArithmosErrorProto_Type_value)
	proto.RegisterEnum("nutanix.arithmos.interface.ArithmosEntityProto_Type", ArithmosEntityProto_Type_name, ArithmosEntityProto_Type_value)
	proto.RegisterEnum("nutanix.arithmos.interface.FieldMergeOperation_Type", FieldMergeOperation_Type_name, FieldMergeOperation_Type_value)
	proto.RegisterEnum("nutanix.arithmos.interface.FieldDeriveOperation_Type", FieldDeriveOperation_Type_name, FieldDeriveOperation_Type_value)
	proto.RegisterEnum("nutanix.arithmos.interface.StatNormalizeOperation_Type", StatNormalizeOperation_Type_name, StatNormalizeOperation_Type_value)
	proto.RegisterEnum("nutanix.arithmos.interface.AttributeProperties_DataType", AttributeProperties_DataType_name, AttributeProperties_DataType_value)
	proto.RegisterEnum("nutanix.arithmos.interface.ArithmosStatus_ArithmosVersion", ArithmosStatus_ArithmosVersion_name, ArithmosStatus_ArithmosVersion_value)
	proto.RegisterType((*ArithmosErrorProto)(nil), "nutanix.arithmos.interface.ArithmosErrorProto")
	proto.RegisterType((*ArithmosEntityProto)(nil), "nutanix.arithmos.interface.ArithmosEntityProto")
	proto.RegisterType((*TimeRangeStat)(nil), "nutanix.arithmos.interface.TimeRangeStat")
	proto.RegisterType((*CommonStats)(nil), "nutanix.arithmos.interface.CommonStats")
	proto.RegisterType((*PersistEntityStat)(nil), "nutanix.arithmos.interface.PersistEntityStat")
	proto.RegisterType((*PersistEntityAttribute)(nil), "nutanix.arithmos.interface.PersistEntityAttribute")
	proto.RegisterType((*PersistEntity)(nil), "nutanix.arithmos.interface.PersistEntity")
	proto.RegisterType((*PersistEntityType)(nil), "nutanix.arithmos.interface.PersistEntityType")
	proto.RegisterType((*FieldMergeOperation)(nil), "nutanix.arithmos.interface.FieldMergeOperation")
	proto.RegisterType((*FieldDeriveOperation)(nil), "nutanix.arithmos.interface.FieldDeriveOperation")
	proto.RegisterType((*StatNormalizeOperation)(nil), "nutanix.arithmos.interface.StatNormalizeOperation")
	proto.RegisterType((*StatProperties)(nil), "nutanix.arithmos.interface.StatProperties")
	proto.RegisterType((*AttributeProperties)(nil), "nutanix.arithmos.interface.AttributeProperties")
	proto.RegisterType((*DataProperties)(nil), "nutanix.arithmos.interface.DataProperties")
	proto.RegisterType((*DataPropertiesList)(nil), "nutanix.arithmos.interface.DataPropertiesList")
	proto.RegisterType((*GenericStat)(nil), "nutanix.arithmos.interface.GenericStat")
	proto.RegisterType((*GenericAttribute)(nil), "nutanix.arithmos.interface.GenericAttribute")
	proto.RegisterType((*Disk)(nil), "nutanix.arithmos.interface.Disk")
	proto.RegisterType((*Disk_Stats)(nil), "nutanix.arithmos.interface.Disk.Stats")
	proto.RegisterType((*VirtualDisk)(nil), "nutanix.arithmos.interface.VirtualDisk")
	proto.RegisterType((*VirtualDisk_Stats)(nil), "nutanix.arithmos.interface.VirtualDisk.Stats")
	proto.RegisterType((*VDisk)(nil), "nutanix.arithmos.interface.VDisk")
	proto.RegisterType((*VDisk_Stats)(nil), "nutanix.arithmos.interface.VDisk.Stats")
	proto.RegisterType((*VM)(nil), "nutanix.arithmos.interface.VM")
	proto.RegisterType((*VM_Stats)(nil), "nutanix.arithmos.interface.VM.Stats")
	proto.RegisterType((*Container)(nil), "nutanix.arithmos.interface.Container")
	proto.RegisterType((*Container_Stats)(nil), "nutanix.arithmos.interface.Container.Stats")
	proto.RegisterType((*StoragePool)(nil), "nutanix.arithmos.interface.StoragePool")
	proto.RegisterType((*StoragePool_Stats)(nil), "nutanix.arithmos.interface.StoragePool.Stats")
	proto.RegisterType((*Node)(nil), "nutanix.arithmos.interface.Node")
	proto.RegisterType((*Node_Stats)(nil), "nutanix.arithmos.interface.Node.Stats")
	proto.RegisterType((*Cluster)(nil), "nutanix.arithmos.interface.Cluster")
	proto.RegisterType((*Cluster_Stats)(nil), "nutanix.arithmos.interface.Cluster.Stats")
	proto.RegisterType((*RemoteSite)(nil), "nutanix.arithmos.interface.RemoteSite")
	proto.RegisterType((*RemoteSite_Stats)(nil), "nutanix.arithmos.interface.RemoteSite.Stats")
	proto.RegisterType((*ProtectionDomain)(nil), "nutanix.arithmos.interface.ProtectionDomain")
	proto.RegisterType((*ProtectionDomain_Stats)(nil), "nutanix.arithmos.interface.ProtectionDomain.Stats")
	proto.RegisterType((*Snapshot)(nil), "nutanix.arithmos.interface.Snapshot")
	proto.RegisterType((*Snapshot_Stats)(nil), "nutanix.arithmos.interface.Snapshot.Stats")
	proto.RegisterType((*ReplicationLink)(nil), "nutanix.arithmos.interface.ReplicationLink")
	proto.RegisterType((*ReplicationLink_Stats)(nil), "nutanix.arithmos.interface.ReplicationLink.Stats")
	proto.RegisterType((*UserDefinedEntity)(nil), "nutanix.arithmos.interface.UserDefinedEntity")
	proto.RegisterType((*UserDefinedEntity_Stats)(nil), "nutanix.arithmos.interface.UserDefinedEntity.Stats")
	proto.RegisterType((*AnyEntity)(nil), "nutanix.arithmos.interface.AnyEntity")
	proto.RegisterType((*PersistEntities)(nil), "nutanix.arithmos.interface.PersistEntities")
	proto.RegisterType((*CassandraPartitionInfo)(nil), "nutanix.arithmos.interface.CassandraPartitionInfo")
	proto.RegisterType((*ArithmosStatus)(nil), "nutanix.arithmos.interface.ArithmosStatus")
	proto.RegisterType((*ArithmosStatus_AggregationPartitionInfo)(nil), "nutanix.arithmos.interface.ArithmosStatus.AggregationPartitionInfo")
	proto.RegisterType((*ArithmosStatus_Partition)(nil), "nutanix.arithmos.interface.ArithmosStatus.Partition")
	proto.RegisterType((*ArithmosStatus_EntityPartition)(nil), "nutanix.arithmos.interface.ArithmosStatus.EntityPartition")
}

func init() {
	proto.RegisterFile("stats/arithmos/interface/arithmos_type.proto", fileDescriptor_472fc1d214cab315)
}

var fileDescriptor_472fc1d214cab315 = []byte{
	// 6851 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x4b, 0x6c, 0x1d, 0xc9,
	0x75, 0xe8, 0x5c, 0xfe, 0x44, 0x9e, 0x4b, 0x5e, 0x36, 0x9b, 0xbf, 0x2b, 0x4a, 0x94, 0xa8, 0x2b,
	0x8d, 0xc4, 0x19, 0xcf, 0x48, 0x33, 0x1a, 0xcd, 0xc7, 0xb2, 0xe7, 0x79, 0x28, 0x52, 0x9f, 0xeb,
	0x19, 0x72, 0xe8, 0xbe, 0x12, 0xc7, 0xe3, 0xf7, 0xfc, 0xfa, 0x35, 0x6f, 0x17, 0x2f, 0xdb, 0xf7,
	0xf6, 0x67, 0xba, 0xba, 0x2f, 0x45, 0xbd, 0xcd, 0x03, 0x5e, 0xe2, 0x38, 0x71, 0xe2, 0x7c, 0x36,
	0x31, 0x90, 0x00, 0x59, 0x04, 0x59, 0x18, 0x41, 0x56, 0x5e, 0x64, 0x95, 0x55, 0x3e, 0x40, 0x60,
	0x20, 0x0b, 0x03, 0x59, 0x06, 0x08, 0x82, 0x20, 0x70, 0x16, 0xf1, 0x22, 0x9b, 0x20, 0x8b, 0x04,
	0x41, 0x9d, 0xaa, 0xee, 0xae, 0xea, 0xee, 0xcb, 0x8f, 0x87, 0x32, 0xe0, 0xcc, 0xec, 0x78, 0xab,
	0xce, 0x39, 0x55, 0x7d, 0xfe, 0x55, 0x75, 0xaa, 0x08, 0xaf, 0xd0, 0xc8, 0x8a, 0xe8, 0x2d, 0x2b,
	0x74, 0xa2, 0x7d, 0xd7, 0xa7, 0xb7, 0x1c, 0x2f, 0x22, 0xe1, 0x9e, 0xd5, 0x26, 0x69, 0x93, 0x19,
	0x1d, 0x06, 0xe4, 0x66, 0x10, 0xfa, 0x91, 0xaf, 0x2f, 0x79, 0x71, 0x64, 0x79, 0xce, 0xd3, 0x9b,
	0x49, 0xe7, 0xcd, 0x14, 0xbe, 0xf1, 0x0f, 0xc3, 0xa0, 0xaf, 0x89, 0xe6, 0xfb, 0x61, 0xe8, 0x87,
	0xdb, 0x0c, 0xa5, 0xf1, 0xa3, 0x61, 0x18, 0x79, 0x7c, 0x18, 0x10, 0x7d, 0x12, 0xc6, 0xbb, 0x5b,
	0x3e, 0xf6, 0x68, 0x2f, 0xe8, 0x53, 0x30, 0xd1, 0x5d, 0xb7, 0xbc, 0x36, 0xe9, 0x11, 0x5b, 0xab,
	0x60, 0xe7, 0x63, 0xc7, 0x25, 0x7e, 0x1c, 0x69, 0x43, 0xfa, 0x2c, 0x4c, 0x77, 0x1f, 0x87, 0x96,
	0x47, 0x03, 0x3f, 0x8c, 0x38, 0xc6, 0xb0, 0xbe, 0x00, 0x7a, 0xb7, 0xe9, 0xf5, 0xad, 0x9e, 0x63,
	0xdf, 0xf7, 0x22, 0x27, 0x3a, 0x64, 0x54, 0xb5, 0x31, 0x7d, 0x0e, 0x34, 0xb5, 0xbd, 0x69, 0x6b,
	0xe7, 0x74, 0x1d, 0x6a, 0xdd, 0x26, 0x9b, 0x9b, 0x67, 0xf5, 0x38, 0x85, 0x71, 0x7d, 0x09, 0x16,
	0x12, 0xc8, 0x07, 0x4e, 0x2f, 0x22, 0xe1, 0x7a, 0xe8, 0x44, 0x24, 0x74, 0x2c, 0x6d, 0x42, 0xaf,
	0xc3, 0x5c, 0xd2, 0xd7, 0xf2, 0xc3, 0x28, 0xed, 0x01, 0x7d, 0x1e, 0x66, 0x92, 0x1e, 0x36, 0x43,
	0xc3, 0xf2, 0x3a, 0x44, 0xab, 0xca, 0xcd, 0x0f, 0x1c, 0xd2, 0xb3, 0xb7, 0x2c, 0x97, 0x68, 0x93,
	0x7a, 0x0d, 0xa0, 0xbb, 0xe5, 0x47, 0x9b, 0x16, 0x8d, 0x48, 0xa8, 0x4d, 0xe9, 0x00, 0x63, 0x5d,
	0x83, 0x44, 0xe1, 0xa1, 0x56, 0x13, 0x1c, 0x68, 0x31, 0x86, 0x6b, 0xd3, 0xf8, 0x3d, 0xf7, 0x9f,
	0xb6, 0x09, 0xb1, 0x37, 0xad, 0xa7, 0x06, 0xf9, 0x24, 0x26, 0x34, 0xa2, 0x9a, 0xa6, 0x6b, 0x30,
	0x99, 0x10, 0x5e, 0x0b, 0x3b, 0x54, 0x9b, 0xd1, 0xab, 0x70, 0xae, 0x7b, 0xff, 0xa9, 0xc3, 0xba,
	0x75, 0xec, 0xde, 0x24, 0x76, 0x4c, 0x2d, 0xfe, 0x59, 0xb3, 0xc8, 0xad, 0x75, 0x8b, 0x52, 0xcb,
	0xb3, 0x43, 0xd1, 0x38, 0x87, 0x60, 0xdb, 0x4e, 0xb4, 0x2f, 0x64, 0xa1, 0xcd, 0xe3, 0xcc, 0xbe,
	0x41, 0x62, 0xf1, 0x7b, 0x41, 0x70, 0x08, 0xc7, 0x59, 0x8f, 0x43, 0xea, 0x87, 0xda, 0xa2, 0x3e,
	0x0d, 0xd5, 0xee, 0x7d, 0x77, 0x97, 0xd8, 0x36, 0xb1, 0x77, 0x36, 0xb5, 0x3a, 0xff, 0x9c, 0xd8,
	0x45, 0x1c, 0xaa, 0x9d, 0x6f, 0x7c, 0x67, 0x0c, 0x66, 0x53, 0x21, 0x23, 0xb7, 0x51, 0xca, 0xfa,
	0xff, 0x06, 0x8d, 0xe0, 0x4f, 0xd4, 0x16, 0x93, 0x78, 0xb1, 0x5b, 0xaf, 0xac, 0x54, 0x56, 0x6b,
	0xb7, 0xef, 0xdc, 0x1c, 0xac, 0x33, 0x37, 0x4b, 0x48, 0xdd, 0x64, 0x62, 0x35, 0x6a, 0x24, 0x15,
	0xf1, 0x7d, 0x2f, 0x76, 0xf5, 0xeb, 0x30, 0x2d, 0xd3, 0xa7, 0x51, 0x58, 0x1f, 0x5a, 0xa9, 0xac,
	0x4e, 0x18, 0x53, 0x19, 0x60, 0x2b, 0x0a, 0x1b, 0x3f, 0x19, 0x11, 0xda, 0x26, 0x7d, 0x1d, 0x27,
	0xae, 0xbd, 0xa0, 0x4f, 0xc0, 0x68, 0x77, 0xc3, 0xa1, 0x5d, 0xad, 0x82, 0x62, 0xd9, 0xc1, 0xbf,
	0x87, 0xf4, 0x73, 0x30, 0xdc, 0xdd, 0xd9, 0xd4, 0x86, 0xf1, 0x63, 0xd7, 0x7d, 0x2f, 0xb2, 0x1c,
	0x8f, 0x84, 0xda, 0x08, 0xf2, 0xb0, 0x15, 0xf9, 0xa1, 0xd5, 0x21, 0xdb, 0xbe, 0xdf, 0xd3, 0x46,
	0x91, 0xc2, 0x96, 0x6f, 0x33, 0xb5, 0x63, 0xc2, 0x5c, 0xef, 0xc5, 0x28, 0xe6, 0x73, 0x08, 0xba,
	0xe3, 0x84, 0x51, 0x6c, 0xf5, 0x90, 0xea, 0x38, 0xb2, 0xd2, 0x20, 0xae, 0x1f, 0x91, 0x96, 0x13,
	0x11, 0x6d, 0x02, 0x15, 0x86, 0x7d, 0x21, 0x69, 0x47, 0x8e, 0xef, 0x6d, 0xf8, 0xae, 0xe5, 0x78,
	0x1a, 0xa0, 0x21, 0xb4, 0x3c, 0x2b, 0xa0, 0xfb, 0x7e, 0xa4, 0x55, 0x51, 0x9b, 0x0d, 0x12, 0xf4,
	0x9c, 0xb6, 0xc5, 0xc0, 0x3e, 0x70, 0xbc, 0xae, 0x36, 0xa9, 0x5f, 0x80, 0xc5, 0xee, 0x16, 0x89,
	0x0e, 0xfc, 0xb0, 0xdb, 0x3a, 0x70, 0xa2, 0xf6, 0x7e, 0x33, 0x61, 0xa1, 0x36, 0x85, 0x9f, 0xaa,
	0x74, 0x6a, 0x35, 0x1c, 0x5d, 0xcc, 0x67, 0xcb, 0x69, 0x6b, 0xd3, 0x7c, 0x82, 0x9b, 0xef, 0x93,
	0xd0, 0x23, 0xd8, 0xa2, 0xe1, 0x07, 0x3c, 0xf2, 0x69, 0xc4, 0x7e, 0xcd, 0xe0, 0xb8, 0xad, 0x43,
	0xaf, 0x2d, 0x8d, 0xad, 0xe9, 0xa8, 0x5a, 0x09, 0x19, 0x3e, 0x82, 0x36, 0xcb, 0x49, 0xf9, 0xbd,
	0xd8, 0x25, 0x0f, 0x43, 0x3f, 0x0e, 0xb4, 0x39, 0xe4, 0x66, 0xd3, 0xb5, 0x3a, 0x44, 0x9b, 0xc7,
	0x91, 0x1f, 0x38, 0x3d, 0xd2, 0x22, 0x61, 0x9f, 0x30, 0x3d, 0x63, 0x94, 0xb3, 0x86, 0xd6, 0xbe,
	0x15, 0x12, 0x6d, 0x51, 0x9f, 0x81, 0xa9, 0xee, 0x5a, 0x10, 0x64, 0xec, 0xae, 0xa7, 0x13, 0x7a,
	0x18, 0xc4, 0xda, 0x79, 0xf9, 0x0b, 0x58, 0xc3, 0x12, 0x76, 0x6f, 0x18, 0x5c, 0x68, 0x17, 0xf4,
	0x65, 0x38, 0x5f, 0xe0, 0x66, 0xab, 0xbd, 0x4f, 0xec, 0xb8, 0x47, 0xb4, 0x8b, 0x1c, 0xdb, 0x4d,
	0xf9, 0xba, 0x8c, 0xe3, 0x71, 0x45, 0xb8, 0x67, 0xb5, 0xbb, 0x71, 0xa0, 0x5d, 0xd2, 0xaf, 0xc0,
	0x72, 0xd7, 0x20, 0x6d, 0xbf, 0x4f, 0xc2, 0xc3, 0x6d, 0xdf, 0xf1, 0x22, 0xe9, 0xdb, 0x99, 0x91,
	0x6a, 0x97, 0xd1, 0x63, 0x48, 0xad, 0x8f, 0xad, 0xb0, 0x43, 0xa2, 0xa6, 0xb7, 0xe7, 0x6b, 0x2b,
	0x8d, 0xef, 0x55, 0x60, 0x2a, 0x75, 0x08, 0x0c, 0x5e, 0x5f, 0x05, 0x8d, 0x46, 0x56, 0x18, 0x99,
	0x91, 0xe3, 0x12, 0x33, 0xa6, 0xa4, 0x4d, 0xeb, 0x95, 0x95, 0xa1, 0xd5, 0x61, 0xa3, 0x86, 0xed,
	0x0c, 0xfa, 0x09, 0x6b, 0xd5, 0xef, 0xc0, 0x02, 0xb5, 0xdc, 0xa0, 0xe7, 0x78, 0x1d, 0x13, 0xad,
	0xa1, 0x6f, 0xf5, 0x4c, 0x84, 0x1f, 0x5a, 0x19, 0x5a, 0x1d, 0x35, 0xe6, 0x92, 0xde, 0xa6, 0xe8,
	0x6c, 0x31, 0xac, 0x65, 0x80, 0xbe, 0xd5, 0x8b, 0x89, 0xd9, 0x73, 0x68, 0x54, 0x1f, 0x5e, 0x19,
	0x5e, 0x1d, 0x36, 0x26, 0xb0, 0xe5, 0x03, 0x87, 0x46, 0x8d, 0xbf, 0xb9, 0x04, 0xd5, 0x75, 0xdf,
	0x75, 0xf9, 0xec, 0xa9, 0x3e, 0x0f, 0x63, 0x5e, 0xec, 0x9a, 0x8e, 0x8f, 0x96, 0x38, 0x6c, 0x8c,
	0x7a, 0xb1, 0xdb, 0xf4, 0xf5, 0x4b, 0x50, 0x65, 0xcd, 0x21, 0xb1, 0x6c, 0xd6, 0x37, 0x84, 0x7d,
	0x13, 0x5e, 0xec, 0x1a, 0xc4, 0xb2, 0x9b, 0xbe, 0xde, 0x80, 0x29, 0xec, 0xb7, 0x3c, 0xdb, 0x47,
	0xec, 0x61, 0x84, 0x60, 0x48, 0x06, 0xb6, 0x35, 0x7d, 0xfd, 0x16, 0xcc, 0x45, 0x7e, 0x64, 0xf5,
	0x4c, 0xc7, 0x37, 0xa9, 0xf3, 0x8c, 0x98, 0xdd, 0xdd, 0xc3, 0x88, 0xd0, 0xfa, 0x08, 0x82, 0xce,
	0x60, 0x5f, 0xd3, 0x6f, 0x39, 0xcf, 0xc8, 0xfb, 0xd8, 0xa1, 0xbf, 0x03, 0xe7, 0x39, 0x82, 0x18,
	0x56, 0xc1, 0x1a, 0x45, 0xac, 0x79, 0x04, 0xe0, 0x93, 0x90, 0x30, 0x5f, 0x85, 0xd9, 0x74, 0x28,
	0x89, 0xaf, 0x63, 0x88, 0xa3, 0x89, 0x91, 0x32, 0xce, 0xbe, 0x05, 0x75, 0x75, 0x20, 0x09, 0xe7,
	0x1c, 0xe2, 0xcc, 0x49, 0xe3, 0x64, 0x78, 0x2f, 0x42, 0x8d, 0x41, 0xd2, 0xc0, 0xf2, 0x04, 0xf4,
	0x38, 0x42, 0x4f, 0x25, 0xad, 0x1c, 0x6c, 0x0d, 0x96, 0x39, 0xf9, 0x88, 0x85, 0xa7, 0x3d, 0x3f,
	0x74, 0x89, 0x6d, 0xc6, 0xd4, 0xea, 0x10, 0x93, 0x7f, 0xcb, 0x04, 0x62, 0x2d, 0x21, 0xd0, 0xe3,
	0x0c, 0xe6, 0x09, 0x03, 0xb9, 0x87, 0x1f, 0x74, 0x1f, 0x2e, 0x73, 0x12, 0xb1, 0x37, 0x88, 0x08,
	0x20, 0x91, 0x8b, 0x08, 0xf6, 0x44, 0x86, 0x92, 0xc8, 0xdc, 0x85, 0xf3, 0xfb, 0x87, 0x01, 0x09,
	0xfb, 0x0e, 0xf5, 0x43, 0x33, 0x37, 0xf7, 0x2a, 0x12, 0x58, 0xcc, 0x00, 0x1e, 0x2b, 0x5f, 0xf1,
	0x32, 0xcc, 0x48, 0xb8, 0x42, 0x49, 0x26, 0x11, 0x67, 0x3a, 0xeb, 0xd8, 0x42, 0x75, 0x79, 0x03,
	0x16, 0x72, 0xb0, 0x89, 0xe6, 0x4c, 0x21, 0xc2, 0xac, 0x82, 0x20, 0x74, 0x68, 0x03, 0x2e, 0xcb,
	0x93, 0x2b, 0x53, 0x95, 0x1a, 0x62, 0x5f, 0x90, 0xa6, 0x58, 0x50, 0x9a, 0x4d, 0xb8, 0x56, 0xa0,
	0x52, 0xa6, 0x3f, 0xd3, 0x48, 0xea, 0x72, 0x8e, 0x54, 0x41, 0x93, 0xee, 0xc1, 0xa5, 0xb2, 0x49,
	0x49, 0x0a, 0xa2, 0x71, 0xe1, 0x15, 0xe6, 0x94, 0xa9, 0xc9, 0xfb, 0x70, 0x75, 0xe0, 0x94, 0x24,
	0x42, 0x33, 0x48, 0xe8, 0x52, 0xe9, 0x8c, 0x32, 0x62, 0x2f, 0xc3, 0x4c, 0xdb, 0xf7, 0xa2, 0xd0,
	0xef, 0xf5, 0x48, 0x2a, 0x86, 0xcb, 0x5c, 0x0c, 0x59, 0x47, 0x2a, 0x86, 0x1c, 0x6c, 0x22, 0x86,
	0x15, 0x2e, 0x06, 0x05, 0x41, 0x88, 0xe1, 0x6d, 0xa8, 0xe7, 0x91, 0x52, 0xab, 0xbe, 0xc2, 0x8d,
	0x4e, 0x45, 0x4b, 0xec, 0x7b, 0x03, 0x2e, 0x4b, 0x88, 0xa5, 0xf2, 0x6b, 0x70, 0xf9, 0x65, 0x60,
	0xa5, 0xf2, 0x2b, 0x50, 0x29, 0x93, 0xdf, 0x55, 0x2e, 0xbf, 0x1c, 0xa9, 0x32, 0xf9, 0x95, 0x4d,
	0x4a, 0x62, 0xfb, 0x35, 0x2e, 0xbf, 0xc2, 0x9c, 0x14, 0xf9, 0x0d, 0x9c, 0x92, 0x44, 0xe8, 0x45,
	0x2e, 0xbf, 0xd2, 0x19, 0x65, 0xc4, 0xee, 0xc2, 0x79, 0x99, 0x98, 0x6a, 0x82, 0xd7, 0xb9, 0x09,
	0x4a, 0x24, 0x14, 0x13, 0xdc, 0x81, 0xd5, 0xc2, 0x44, 0x06, 0xb9, 0x83, 0x1b, 0x48, 0xea, 0x5a,
	0x6e, 0x36, 0xe5, 0xde, 0xa5, 0x09, 0x0d, 0x89, 0xae, 0xd5, 0xef, 0x94, 0x72, 0x7c, 0x15, 0x29,
	0x2e, 0x67, 0x90, 0x6b, 0xfd, 0x4e, 0x81, 0xdf, 0x2a, 0xaf, 0x18, 0xa9, 0x03, 0x96, 0x15, 0xe7,
	0x69, 0xbd, 0x94, 0xe7, 0xd5, 0x5a, 0xbf, 0xf3, 0x11, 0x03, 0x54, 0x88, 0xad, 0xc0, 0x24, 0xd3,
	0xbf, 0x84, 0x42, 0x9d, 0x20, 0x16, 0x78, 0xb1, 0x2b, 0x60, 0xf5, 0x8b, 0xc0, 0x7e, 0x99, 0x94,
	0x7c, 0xc2, 0xfa, 0xf7, 0xb0, 0x7f, 0xdc, 0x8b, 0xdd, 0x16, 0xf9, 0xa4, 0xe9, 0xeb, 0xe7, 0x61,
	0x9c, 0x1b, 0x48, 0x40, 0xeb, 0x1d, 0xec, 0x3b, 0x87, 0xe1, 0x2c, 0x40, 0x33, 0x72, 0x7c, 0x73,
	0xd7, 0xf2, 0xec, 0x03, 0xc7, 0x8e, 0xf6, 0xcd, 0xee, 0xbd, 0x80, 0xd6, 0xf7, 0xb9, 0x19, 0x39,
	0xfe, 0xbd, 0xa4, 0xfd, 0xfd, 0x7b, 0x01, 0x65, 0x81, 0x8b, 0x7d, 0x88, 0xe3, 0x9b, 0x3d, 0x2b,
	0x22, 0x5e, 0xfb, 0x50, 0x48, 0xcb, 0xe1, 0x81, 0xcb, 0xea, 0x77, 0x9a, 0xfe, 0x07, 0xbc, 0x87,
	0xcb, 0xe9, 0x1d, 0x38, 0x2f, 0x33, 0x51, 0xc5, 0xfa, 0x16, 0xb7, 0x21, 0x2b, 0x61, 0x9e, 0x82,
	0x79, 0x09, 0xaa, 0x09, 0x56, 0x10, 0xb8, 0xf5, 0x2e, 0x8f, 0xb3, 0x21, 0x02, 0x6e, 0x07, 0x2e,
	0xe3, 0x48, 0xca, 0x4f, 0x06, 0xd0, 0xe3, 0x1c, 0x39, 0xe0, 0xec, 0x60, 0x10, 0x0d, 0x98, 0x4a,
	0xed, 0x15, 0x41, 0x5c, 0x1e, 0x89, 0x43, 0x61, 0xa6, 0x0c, 0xe6, 0x22, 0x00, 0xe7, 0x18, 0x02,
	0x78, 0x9c, 0x6b, 0x94, 0xb1, 0x8c, 0xf5, 0xbe, 0x09, 0x8b, 0x39, 0xe7, 0x9d, 0x0a, 0xc0, 0xe7,
	0xc1, 0x50, 0xf1, 0xde, 0x89, 0x28, 0x6e, 0xc2, 0x6c, 0x21, 0x3e, 0x04, 0xb4, 0x1e, 0x70, 0x26,
	0xe5, 0x22, 0x44, 0x40, 0xf5, 0xaf, 0xc0, 0x45, 0x09, 0xbe, 0x28, 0x8c, 0x4f, 0x10, 0x51, 0x8a,
	0x57, 0xcd, 0x9c, 0x58, 0xd4, 0x78, 0x51, 0x2a, 0xa1, 0x30, 0x1f, 0x2f, 0xd6, 0x0a, 0xb2, 0x52,
	0xe3, 0xc5, 0x60, 0xb1, 0xd1, 0x7c, 0xbc, 0x58, 0x2b, 0x15, 0x60, 0x92, 0x08, 0x71, 0x1a, 0x01,
	0xad, 0x47, 0x59, 0x22, 0x84, 0xd0, 0x01, 0xd5, 0xaf, 0x41, 0x4d, 0xe6, 0x6a, 0x40, 0xeb, 0x31,
	0x02, 0x4d, 0x66, 0x8a, 0x1d, 0x30, 0x47, 0xb1, 0xa4, 0x98, 0x8f, 0x3a, 0x9d, 0x3e, 0x62, 0x2c,
	0x58, 0xa9, 0xd9, 0x28, 0xb3, 0x78, 0x1b, 0xea, 0xe5, 0xf1, 0x37, 0xa0, 0xf5, 0x03, 0xae, 0x7f,
	0x25, 0x11, 0x38, 0xa0, 0xfa, 0x17, 0x95, 0x04, 0x21, 0x37, 0xcb, 0xa7, 0x7c, 0xcc, 0x32, 0xe9,
	0x07, 0x54, 0xff, 0x10, 0x5e, 0xcc, 0x31, 0x72, 0xc0, 0xd4, 0x0f, 0x91, 0xcc, 0x8a, 0xc2, 0xc9,
	0xb2, 0x8f, 0x78, 0x04, 0x57, 0x24, 0x82, 0x89, 0x54, 0x72, 0x5a, 0xf2, 0x8c, 0x3b, 0xa5, 0x0c,
	0x90, 0x7f, 0x8a, 0xaa, 0x29, 0x5f, 0x85, 0x86, 0x44, 0x29, 0x9d, 0x56, 0x8e, 0xd4, 0xff, 0xcd,
	0xc7, 0x5f, 0x31, 0x29, 0x95, 0xd6, 0x5b, 0xb0, 0x98, 0x0b, 0x8f, 0xa9, 0x75, 0xfc, 0x7f, 0x9e,
	0x32, 0xcf, 0x29, 0xe1, 0x31, 0x31, 0x8f, 0xdb, 0x30, 0x9f, 0xc3, 0x13, 0x4e, 0xeb, 0x97, 0x38,
	0x96, 0xae, 0x60, 0x71, 0xff, 0x75, 0x0b, 0x66, 0x0b, 0xb1, 0x3e, 0xa0, 0xf5, 0x5f, 0xe6, 0x18,
	0x33, 0xb9, 0x70, 0x1f, 0x50, 0xfd, 0x3d, 0xb8, 0x28, 0x21, 0x14, 0x3f, 0xf1, 0xdb, 0x1c, 0x53,
	0x8a, 0x40, 0xf9, 0xcf, 0xbb, 0xaf, 0x04, 0xf1, 0x52, 0xa3, 0xfa, 0x95, 0x4a, 0x3e, 0x8a, 0x17,
	0xad, 0x6a, 0x4b, 0x89, 0xe2, 0x83, 0xad, 0xea, 0x3b, 0x95, 0x7c, 0x18, 0x2f, 0x37, 0xab, 0x3b,
	0x4a, 0x26, 0x23, 0xbb, 0xc8, 0x5f, 0xad, 0xe4, 0x53, 0x19, 0x23, 0xf5, 0x96, 0xaa, 0xac, 0x14,
	0xc7, 0xf9, 0x6b, 0x05, 0x59, 0x7d, 0x94, 0xf9, 0xd0, 0x77, 0x94, 0x14, 0x48, 0x75, 0xa7, 0xdf,
	0xad, 0xe4, 0x73, 0x20, 0x43, 0xf2, 0xac, 0xaa, 0x94, 0x25, 0x27, 0xfb, 0xeb, 0x05, 0x29, 0xb7,
	0x12, 0x7f, 0xfb, 0x4e, 0x31, 0xe1, 0x4a, 0x8d, 0xf5, 0x37, 0x2a, 0x65, 0x19, 0x57, 0x62, 0xad,
	0x6a, 0x2e, 0x91, 0xb3, 0xd6, 0xef, 0x71, 0xd4, 0x85, 0x32, 0x6d, 0x0c, 0xa8, 0xbe, 0x0d, 0x2f,
	0x0e, 0x0a, 0xd4, 0xaa, 0x88, 0x7e, 0x93, 0xd3, 0x59, 0x29, 0x8b, 0xd5, 0x8a, 0x8c, 0x9a, 0x70,
	0xa5, 0x44, 0x46, 0x39, 0x0d, 0xfc, 0xad, 0x4a, 0x3e, 0x8b, 0x28, 0x33, 0xd8, 0xf7, 0x95, 0x84,
	0x64, 0x90, 0xc1, 0xfe, 0x76, 0x25, 0x9f, 0x45, 0x94, 0x5a, 0xec, 0x1d, 0x58, 0x18, 0x30, 0x99,
	0xdf, 0x15, 0xba, 0x13, 0x96, 0x4c, 0xe1, 0x2d, 0x58, 0x1c, 0x34, 0xee, 0xf7, 0x85, 0xee, 0x1c,
	0x94, 0x8c, 0xd6, 0xf8, 0x8b, 0x0a, 0xcc, 0x6c, 0x93, 0x90, 0x3a, 0x34, 0xe2, 0x5b, 0x07, 0xb8,
	0xca, 0xbf, 0x0d, 0xf3, 0xd9, 0x2a, 0x9f, 0x46, 0x96, 0x1b, 0x28, 0x4b, 0xfd, 0xd9, 0x74, 0xa9,
	0x8f, 0x7d, 0x9c, 0x9f, 0x17, 0x60, 0x82, 0x46, 0x56, 0x64, 0x7a, 0x96, 0x4b, 0x70, 0x89, 0x3f,
	0x61, 0x8c, 0xb3, 0x86, 0x2d, 0xcb, 0x25, 0x6c, 0x7a, 0xc5, 0xcd, 0x00, 0x4e, 0x92, 0x2f, 0xbd,
	0xe7, 0xf3, 0xbb, 0x01, 0x9c, 0xe8, 0x75, 0x98, 0x46, 0xa2, 0xd2, 0x9e, 0xc0, 0x08, 0xee, 0x09,
	0x4c, 0xb1, 0xe6, 0x9d, 0x74, 0x5f, 0xe0, 0x0f, 0x2b, 0xb0, 0xa0, 0x7c, 0xc6, 0x5a, 0x14, 0x85,
	0xce, 0x6e, 0x1c, 0x11, 0xb6, 0xea, 0xb5, 0x92, 0x1f, 0x7c, 0x72, 0x15, 0x9c, 0xdc, 0x54, 0xda,
	0x8a, 0x33, 0xbc, 0x0d, 0xf3, 0x19, 0x18, 0x1f, 0xce, 0xf1, 0xa2, 0xb7, 0xee, 0x88, 0xcd, 0x83,
	0xd9, 0xb4, 0x13, 0x07, 0x6d, 0xb2, 0x2e, 0x96, 0x43, 0xe4, 0x71, 0x68, 0x14, 0xe2, 0x17, 0x4d,
	0x18, 0x33, 0x2a, 0x46, 0x2b, 0x0a, 0x1b, 0xdf, 0x1d, 0x86, 0x29, 0x65, 0x96, 0x8c, 0x69, 0x62,
	0xcf, 0xcf, 0xb1, 0x71, 0x5e, 0x93, 0xc6, 0x38, 0x11, 0x3b, 0xbc, 0xfa, 0x1e, 0xd4, 0x03, 0x0e,
	0x6d, 0x0a, 0x20, 0xe4, 0x05, 0x72, 0x61, 0x68, 0x65, 0x78, 0xb5, 0x7a, 0xfb, 0xd5, 0xa3, 0x36,
	0x1e, 0x0b, 0x62, 0x35, 0xe6, 0x83, 0x7c, 0x13, 0x63, 0x9e, 0x1e, 0xc3, 0x72, 0x6e, 0x9c, 0xec,
	0xab, 0xd2, 0x6d, 0x98, 0xea, 0xed, 0xdb, 0x27, 0x1e, 0x2c, 0x65, 0xbe, 0xb1, 0x14, 0x94, 0xb6,
	0xe3, 0xb0, 0xef, 0xc2, 0x05, 0x87, 0x16, 0x47, 0x8c, 0x03, 0xdb, 0x8a, 0x88, 0x8d, 0xfb, 0x2c,
	0xe3, 0x46, 0xdd, 0xa1, 0x39, 0xdc, 0x27, 0xbc, 0x9f, 0x25, 0x64, 0x3d, 0x8b, 0x46, 0x09, 0x7c,
	0x41, 0x55, 0xf9, 0x8e, 0xcb, 0x79, 0x06, 0x23, 0x50, 0x54, 0x85, 0x6d, 0xfc, 0x60, 0x28, 0xa7,
	0xfa, 0xb8, 0xa9, 0xfa, 0x04, 0xaa, 0xd2, 0x2e, 0xec, 0xa7, 0xda, 0xe0, 0x85, 0x6c, 0xdf, 0x56,
	0xff, 0x18, 0x66, 0x73, 0x3c, 0x96, 0xc4, 0xf8, 0xd2, 0x89, 0x39, 0x6b, 0xcc, 0x28, 0x0c, 0x45,
	0x3e, 0xee, 0xc2, 0x42, 0x87, 0x78, 0x24, 0x74, 0xda, 0xe5, 0x72, 0x7b, 0xe5, 0x28, 0xea, 0x0f,
	0x39, 0x66, 0x26, 0xb1, 0xb9, 0x4e, 0xae, 0x05, 0xed, 0x6b, 0x17, 0x66, 0xf1, 0x04, 0x60, 0x93,
	0x84, 0x1d, 0xf2, 0x61, 0x40, 0x42, 0xdc, 0x2b, 0x6c, 0xbc, 0x2f, 0x9d, 0x7b, 0x88, 0x9d, 0x68,
	0xed, 0x05, 0x7d, 0x1c, 0x46, 0xba, 0x6b, 0x76, 0x72, 0xe4, 0xb1, 0xd6, 0x27, 0xa1, 0xd5, 0x21,
	0xda, 0x10, 0xb6, 0x6f, 0x5a, 0x4f, 0xb5, 0x61, 0xfe, 0x97, 0xe3, 0x69, 0x23, 0xb8, 0xdb, 0xfc,
	0x81, 0x45, 0x23, 0x6d, 0xb4, 0xf1, 0x8f, 0x15, 0x98, 0xc3, 0x41, 0x36, 0x48, 0xe8, 0xf4, 0xa5,
	0x51, 0x7e, 0x54, 0x39, 0x66, 0x18, 0x80, 0x31, 0x46, 0x2e, 0xa6, 0xda, 0x10, 0x1e, 0x24, 0x6c,
	0x38, 0x7d, 0xc7, 0x26, 0xda, 0x30, 0x3f, 0x48, 0x60, 0x1d, 0xa2, 0x65, 0x04, 0xf7, 0x48, 0xa5,
	0x96, 0x37, 0xb4, 0xd1, 0x7c, 0xd3, 0x1d, 0x6d, 0x0c, 0xb7, 0x56, 0xd7, 0x6c, 0x3b, 0x81, 0x39,
	0x87, 0xd3, 0x5c, 0xb3, 0xed, 0x37, 0xc4, 0xa6, 0x77, 0xda, 0x77, 0x47, 0x9b, 0xc0, 0x41, 0x58,
	0x5f, 0xd2, 0x02, 0x49, 0xcb, 0x1d, 0xde, 0xf2, 0xa6, 0x56, 0x4d, 0xf0, 0xef, 0x68, 0x93, 0x0d,
	0x0a, 0x0b, 0xcc, 0xf2, 0xb6, 0xfc, 0xd0, 0xb5, 0x7a, 0xce, 0x33, 0xe9, 0x3b, 0x3f, 0x16, 0x9f,
	0xc9, 0xd0, 0xb7, 0xfc, 0x14, 0x40, 0x9c, 0x24, 0x31, 0xed, 0x6d, 0x05, 0x96, 0xa7, 0x55, 0xf4,
	0x45, 0x98, 0xed, 0x3e, 0x52, 0xf6, 0xbd, 0xb0, 0x63, 0x08, 0x3b, 0xd6, 0x95, 0xd5, 0x38, 0x76,
	0x0c, 0x37, 0xfe, 0x65, 0x02, 0x6a, 0x6c, 0xd4, 0xed, 0xd0, 0x0f, 0x48, 0x18, 0x39, 0x24, 0xe7,
	0xaf, 0x2b, 0xe8, 0xb2, 0x32, 0x7f, 0x7d, 0x0d, 0xaa, 0x0e, 0x35, 0x43, 0xeb, 0x00, 0x5d, 0x0e,
	0xfa, 0xc0, 0xf1, 0xbb, 0x23, 0x51, 0x18, 0x13, 0x63, 0xc2, 0xa1, 0x86, 0x75, 0x80, 0x61, 0xe2,
	0x9d, 0x81, 0x5b, 0xbc, 0xcc, 0x05, 0x8e, 0xde, 0x1d, 0x7a, 0xf5, 0xf5, 0x01, 0xdb, 0xbc, 0xaf,
	0x81, 0xce, 0x33, 0x87, 0x88, 0x59, 0x83, 0xef, 0x99, 0xb6, 0x75, 0xc8, 0xb7, 0x56, 0x39, 0x96,
	0x86, 0x0b, 0x10, 0xd1, 0xb9, 0x61, 0x1d, 0x52, 0xbd, 0x03, 0xd3, 0x2e, 0x53, 0x3e, 0xd3, 0x4f,
	0xf8, 0x85, 0x16, 0x7e, 0x8c, 0x6d, 0x96, 0x28, 0x2d, 0xda, 0xe6, 0xdd, 0x54, 0x91, 0x8c, 0x9a,
	0xab, 0x74, 0xeb, 0x11, 0x2c, 0x08, 0x0b, 0xcd, 0x8f, 0x37, 0x76, 0x26, 0xe3, 0xcd, 0x71, 0xea,
	0x2a, 0x90, 0xbe, 0x0d, 0x0d, 0x89, 0xe1, 0xa6, 0xd5, 0xe9, 0x84, 0xa4, 0x83, 0x7e, 0x6d, 0x2f,
	0xf4, 0x5d, 0xd3, 0xea, 0x10, 0x2f, 0xe2, 0xbb, 0xbb, 0xe3, 0x77, 0x47, 0xf7, 0xac, 0x1e, 0x25,
	0xc6, 0x72, 0x2a, 0x88, 0xb5, 0x14, 0xfa, 0x41, 0xe8, 0xbb, 0x6b, 0x08, 0xab, 0xbf, 0x01, 0xba,
	0x43, 0xcd, 0x76, 0xec, 0xc6, 0x3d, 0x2b, 0x72, 0xfa, 0x84, 0x4b, 0x72, 0x5c, 0xa6, 0xa0, 0x39,
	0x74, 0x3d, 0xed, 0x47, 0x89, 0xde, 0x02, 0x8d, 0x4d, 0x83, 0x58, 0x3d, 0xdc, 0x29, 0x42, 0x94,
	0x09, 0x19, 0xa5, 0xe6, 0x50, 0x43, 0xf4, 0x22, 0xc2, 0x97, 0x60, 0x51, 0xcc, 0x3b, 0x20, 0xe1,
	0x1e, 0x53, 0x59, 0xaf, 0x2d, 0xf0, 0x40, 0x52, 0x9a, 0x39, 0x9c, 0xeb, 0x76, 0x06, 0x22, 0xf4,
	0x67, 0xde, 0x75, 0x3c, 0xc7, 0x75, 0x9e, 0x11, 0xd3, 0x25, 0xae, 0x1f, 0x1e, 0x9a, 0x6d, 0xab,
	0xbd, 0x4f, 0x70, 0x6f, 0x37, 0x41, 0x9d, 0x4d, 0x40, 0x36, 0x11, 0x62, 0x9d, 0x01, 0x24, 0xfa,
	0x23, 0x90, 0x76, 0xe3, 0x76, 0x97, 0x44, 0x14, 0xb7, 0x77, 0x47, 0xef, 0x0e, 0xbd, 0xfe, 0x1a,
	0xea, 0x0f, 0x87, 0xbf, 0xc7, 0xfb, 0xf4, 0x3e, 0xcc, 0x7a, 0x89, 0x45, 0x49, 0x32, 0x9d, 0x42,
	0x99, 0xbe, 0x7d, 0x94, 0x4c, 0xcb, 0xad, 0x95, 0x8b, 0x55, 0x31, 0x54, 0x43, 0xf7, 0x0a, 0x60,
	0xfa, 0xb7, 0x40, 0xb3, 0xd1, 0x9f, 0x49, 0x83, 0xce, 0xe3, 0xa0, 0x6f, 0x1e, 0xab, 0x48, 0x39,
	0x47, 0x98, 0xd7, 0xa4, 0x69, 0x5b, 0xed, 0xd7, 0xdf, 0x84, 0x45, 0x9b, 0x04, 0xc4, 0xb3, 0x89,
	0x17, 0x65, 0xba, 0x84, 0xa1, 0x60, 0x61, 0x65, 0x78, 0x75, 0xc2, 0x98, 0x4b, 0xbb, 0x85, 0xe6,
	0x60, 0x00, 0x79, 0x15, 0x66, 0x38, 0x25, 0x9b, 0x23, 0xb8, 0x56, 0xb4, 0x5f, 0x5f, 0x5c, 0xa9,
	0xac, 0x56, 0xee, 0x56, 0x5e, 0x4f, 0x46, 0xb1, 0x19, 0xf8, 0xa6, 0x15, 0xed, 0xeb, 0x2b, 0x50,
	0xb5, 0x09, 0x6d, 0x87, 0x4e, 0x80, 0x1f, 0x53, 0x47, 0xd7, 0x21, 0x37, 0xe9, 0x6b, 0xb0, 0xd4,
	0xde, 0x27, 0xed, 0xae, 0x99, 0xcd, 0x06, 0x09, 0x63, 0x88, 0xae, 0x9f, 0x97, 0x84, 0xbb, 0x88,
	0x70, 0x1b, 0x09, 0x18, 0x1b, 0x03, 0xa3, 0xb4, 0xfe, 0x2e, 0xd4, 0x1d, 0x6a, 0xda, 0xfe, 0x81,
	0x67, 0xa6, 0x2e, 0xc6, 0xea, 0xf5, 0xfc, 0x03, 0x62, 0xd7, 0x97, 0x24, 0x02, 0xf3, 0x0e, 0xdd,
	0xf0, 0x0f, 0xbc, 0x96, 0x80, 0x59, 0xe3, 0x20, 0x8d, 0x7f, 0x1b, 0x82, 0xd9, 0x34, 0x82, 0x49,
	0x4e, 0xaf, 0x2c, 0x19, 0xac, 0x14, 0x93, 0xc1, 0x0e, 0xe8, 0x19, 0x98, 0x6d, 0x45, 0x16, 0xe6,
	0x02, 0x43, 0x28, 0xb6, 0x77, 0x8e, 0xcc, 0x05, 0x8a, 0x63, 0xde, 0xdc, 0xb0, 0x22, 0x0b, 0xf3,
	0x81, 0x2c, 0x23, 0xdc, 0x10, 0x24, 0x8f, 0x70, 0x36, 0xc3, 0xcf, 0xd1, 0xd9, 0xe4, 0x24, 0x38,
	0x52, 0x90, 0x60, 0xe3, 0x1d, 0x18, 0x4f, 0xa6, 0xcd, 0x4f, 0x3e, 0x59, 0xbe, 0xab, 0xbd, 0x80,
	0xd1, 0xb5, 0x15, 0x85, 0x8e, 0xd7, 0xd1, 0x2a, 0x78, 0x72, 0x6a, 0x90, 0x80, 0x30, 0xc7, 0x23,
	0x1a, 0x87, 0x1a, 0x7f, 0x32, 0x04, 0x35, 0x86, 0x2a, 0x31, 0x7d, 0xbb, 0x98, 0x52, 0x55, 0x6f,
	0xdf, 0x3a, 0x65, 0x4a, 0xa5, 0x64, 0x53, 0x5d, 0x38, 0x9f, 0xc9, 0x27, 0x48, 0x47, 0x92, 0x73,
	0xaa, 0x5b, 0xa7, 0x14, 0x93, 0xb1, 0x68, 0x15, 0x1b, 0xd1, 0x3c, 0xfe, 0x17, 0xcc, 0xa1, 0xf6,
	0xe6, 0xc7, 0xe1, 0xd9, 0xd5, 0xcb, 0xc7, 0xb9, 0x0e, 0x69, 0x08, 0x9d, 0x2a, 0xbf, 0x31, 0xb3,
	0xfa, 0x83, 0x0a, 0xe8, 0x2a, 0xbf, 0x70, 0xd0, 0x2f, 0xc0, 0x4c, 0xcf, 0xef, 0x38, 0x6d, 0xab,
	0x97, 0x25, 0xb6, 0xe2, 0x8c, 0x53, 0x13, 0x1d, 0x69, 0x3a, 0xcb, 0x66, 0xc8, 0x94, 0x74, 0x00,
	0x27, 0x8e, 0x9c, 0xa1, 0x3a, 0xb4, 0xa1, 0xdb, 0x85, 0xa9, 0x34, 0x9a, 0x50, 0x15, 0x59, 0x22,
	0x3a, 0xed, 0x23, 0xf3, 0x86, 0x65, 0x80, 0x6c, 0xbd, 0x96, 0x9c, 0xbb, 0xa6, 0x4b, 0xb5, 0xc6,
	0x8f, 0x2b, 0xa0, 0xe5, 0x33, 0xce, 0x93, 0xda, 0x64, 0xc9, 0x62, 0xcb, 0xf1, 0x22, 0x31, 0xc6,
	0x4c, 0x61, 0x79, 0x76, 0xda, 0xc5, 0x99, 0xfe, 0x36, 0xd4, 0x4b, 0xe0, 0xb3, 0x35, 0xe7, 0x84,
	0x31, 0x5f, 0x40, 0x42, 0xfe, 0xfc, 0xfd, 0x28, 0x8c, 0x6c, 0x38, 0xb4, 0xab, 0xd7, 0x60, 0x28,
	0x5d, 0xc5, 0x0d, 0x39, 0xb6, 0xfe, 0x65, 0x18, 0xc5, 0xca, 0x23, 0x9c, 0x63, 0xf5, 0xf6, 0xf5,
	0x23, 0xe5, 0xe0, 0xd0, 0x2e, 0xaa, 0x0b, 0x35, 0x38, 0x92, 0xbe, 0x08, 0xe7, 0x3c, 0xdf, 0x26,
	0x6c, 0x61, 0xc8, 0xe6, 0x3c, 0x69, 0x8c, 0xb1, 0x9f, 0x4d, 0x5b, 0xbf, 0x02, 0x93, 0x94, 0x57,
	0x6c, 0x98, 0x91, 0x43, 0xc2, 0xc4, 0x7c, 0x45, 0xdb, 0x63, 0x87, 0x84, 0x7c, 0xd9, 0xcc, 0x41,
	0x02, 0xdf, 0xef, 0x31, 0x1a, 0xa3, 0x48, 0x63, 0x8a, 0x66, 0xb5, 0x1e, 0x4d, 0x9b, 0xc1, 0xd9,
	0x0e, 0xed, 0xf2, 0xb3, 0x0e, 0x7e, 0xd4, 0xc1, 0x0f, 0x9d, 0xa7, 0x58, 0x73, 0xcb, 0x79, 0x26,
	0x4e, 0x5c, 0x06, 0x2f, 0x31, 0xc6, 0xcf, 0x6a, 0x89, 0xc1, 0xf4, 0x0a, 0xe7, 0x12, 0xc7, 0x8e,
	0x8d, 0x39, 0xc7, 0xa4, 0x31, 0xce, 0x1a, 0x9e, 0xc4, 0x8e, 0xcd, 0x3a, 0x91, 0x19, 0xd8, 0x09,
	0xbc, 0x93, 0x35, 0x60, 0xe7, 0xcb, 0x30, 0xa3, 0x7c, 0x2d, 0x02, 0x55, 0x11, 0x68, 0x5a, 0xfa,
	0x5e, 0x06, 0xbb, 0xf4, 0xc3, 0x21, 0x18, 0xe5, 0xa5, 0x03, 0x5f, 0x85, 0xc9, 0x36, 0x56, 0x12,
	0x98, 0x5c, 0x48, 0xdc, 0x2d, 0xdd, 0x38, 0xea, 0x4b, 0xa4, 0xca, 0x03, 0xa3, 0xda, 0x96, 0xca,
	0x10, 0xd6, 0x60, 0xd9, 0x26, 0x76, 0x1c, 0x98, 0x7b, 0x8e, 0xd7, 0x21, 0x61, 0x10, 0x3a, 0x5e,
	0x64, 0x5a, 0xb6, 0x4d, 0x6c, 0xc1, 0x55, 0xae, 0xa5, 0x4b, 0x08, 0xf4, 0x20, 0x83, 0x59, 0x63,
	0x20, 0xe9, 0x91, 0x79, 0x91, 0x44, 0xbb, 0x47, 0xac, 0x30, 0x25, 0xc2, 0x77, 0x4a, 0x2e, 0xe6,
	0x89, 0xac, 0x73, 0x20, 0x4e, 0xe6, 0x31, 0xcc, 0x24, 0x92, 0xca, 0x82, 0xff, 0x5f, 0x57, 0x50,
	0x4a, 0x37, 0x4e, 0x20, 0x25, 0xdc, 0x27, 0x98, 0xee, 0x64, 0x3f, 0x50, 0xc5, 0xbf, 0x03, 0x50,
	0x95, 0x4a, 0x7f, 0x0a, 0x9a, 0xbe, 0xae, 0x6a, 0xfa, 0x91, 0xdb, 0x12, 0x12, 0x1d, 0x55, 0xe1,
	0x5f, 0x87, 0x79, 0x81, 0x66, 0x7a, 0x7b, 0xd4, 0xdc, 0x73, 0x7a, 0xc4, 0x0c, 0x58, 0x2a, 0xc2,
	0x4d, 0x56, 0x17, 0x9d, 0x5b, 0x7b, 0xf4, 0x81, 0xd3, 0x23, 0xdb, 0x2c, 0x15, 0x69, 0x42, 0x03,
	0x75, 0x86, 0x3c, 0x65, 0x4b, 0x05, 0x6a, 0x96, 0xe3, 0x73, 0xeb, 0x5d, 0x66, 0x90, 0xf7, 0x39,
	0xe0, 0x56, 0x91, 0xd4, 0x06, 0x5c, 0x2e, 0x25, 0xd5, 0xc7, 0x56, 0x74, 0x4b, 0xa3, 0x2b, 0xc3,
	0xab, 0x93, 0xc6, 0x85, 0x22, 0x9d, 0x1d, 0xd6, 0x84, 0x4e, 0x6a, 0x05, 0x26, 0xad, 0x28, 0xb2,
	0xda, 0xfb, 0x66, 0xdf, 0x65, 0x56, 0x37, 0x86, 0x5a, 0x08, 0xbc, 0x6d, 0xc7, 0x6d, 0xda, 0xcc,
	0xdb, 0xb5, 0xad, 0xc0, 0x6a, 0xb3, 0x70, 0xc8, 0xc5, 0xca, 0x4b, 0x36, 0xa6, 0x92, 0x56, 0x2e,
	0xc7, 0xff, 0xa1, 0x1c, 0x37, 0xf1, 0xbd, 0x74, 0x93, 0x3a, 0x2c, 0xb9, 0xde, 0xf5, 0xfd, 0x48,
	0x54, 0x6e, 0xd4, 0x73, 0xe7, 0x54, 0x2d, 0x06, 0x70, 0xcf, 0xf7, 0x23, 0xfd, 0xa1, 0x72, 0x1a,
	0x21, 0xed, 0xd2, 0xca, 0x44, 0x78, 0x21, 0xc7, 0xc5, 0x92, 0xb3, 0x95, 0x8c, 0xd0, 0xd7, 0xe1,
	0xe5, 0x81, 0x65, 0x0e, 0x19, 0xa9, 0xe4, 0xa0, 0x94, 0x57, 0x75, 0x5c, 0x2b, 0xad, 0x78, 0x48,
	0x69, 0x8a, 0xe3, 0x52, 0x0b, 0x6e, 0x1d, 0x5d, 0xfa, 0x50, 0x24, 0xcf, 0x6b, 0x3e, 0x56, 0x07,
	0x56, 0x41, 0xe4, 0x87, 0xd8, 0x81, 0x97, 0x06, 0x96, 0x43, 0x48, 0xd4, 0xf9, 0x86, 0x11, 0x2f,
	0x0e, 0xb9, 0x5a, 0x5a, 0x19, 0x91, 0x12, 0xe6, 0xdb, 0x92, 0x26, 0xdc, 0x3c, 0xba, 0x44, 0xa2,
	0x40, 0x9c, 0x17, 0x92, 0xdc, 0x18, 0x58, 0x2d, 0x91, 0x1b, 0xe0, 0x4d, 0x58, 0x4c, 0x14, 0xd0,
	0xa1, 0x6d, 0xea, 0x48, 0xda, 0x5c, 0x43, 0x6b, 0x98, 0x13, 0xdd, 0x4d, 0xd6, 0x9b, 0x2a, 0xf1,
	0x60, 0x3f, 0xad, 0x9d, 0x99, 0x9f, 0x5e, 0x06, 0xe8, 0x67, 0x8e, 0x7a, 0x06, 0x15, 0x7c, 0xa2,
	0x9f, 0x78, 0xea, 0xa5, 0xbf, 0xab, 0x3c, 0x0f, 0x07, 0xab, 0x1e, 0x54, 0xc4, 0x94, 0x84, 0x8a,
	0x63, 0x95, 0x8e, 0x53, 0x9e, 0x50, 0x12, 0x3e, 0x4f, 0x57, 0xf8, 0xa7, 0x23, 0x30, 0xba, 0x53,
	0xea, 0x04, 0xdf, 0x55, 0x9d, 0xe0, 0x91, 0x43, 0xec, 0x14, 0xdd, 0xdf, 0x1b, 0xb0, 0x90, 0xb8,
	0x0e, 0xee, 0x21, 0x4d, 0xe4, 0x72, 0x1a, 0xfe, 0x67, 0x85, 0x13, 0xc9, 0xdc, 0x67, 0xd3, 0x66,
	0x66, 0x2e, 0x79, 0xad, 0x81, 0xfe, 0x8f, 0x69, 0xcc, 0xc5, 0xcc, 0x6f, 0x95, 0xb8, 0xbf, 0xc1,
	0x9a, 0x33, 0xf6, 0x9c, 0x34, 0xe7, 0xdc, 0x67, 0x4d, 0x73, 0xbe, 0x3f, 0x03, 0x43, 0x3b, 0x9b,
	0x05, 0xb5, 0xb9, 0xab, 0xaa, 0xcd, 0xb5, 0x23, 0xd5, 0x66, 0xb3, 0x90, 0x23, 0xf6, 0x5d, 0x1e,
	0x9c, 0x78, 0x90, 0x1c, 0xeb, 0xbb, 0x18, 0x87, 0x58, 0xbe, 0x14, 0xbb, 0x66, 0xbf, 0x1d, 0xc4,
	0x49, 0xc5, 0xe2, 0xb8, 0x17, 0xbb, 0x3b, 0xec, 0xb7, 0xfe, 0x0a, 0xe8, 0xed, 0x20, 0x36, 0x43,
	0x42, 0x49, 0xd8, 0xc7, 0x15, 0xa1, 0xb9, 0xff, 0x4c, 0xec, 0x97, 0x6b, 0xed, 0x20, 0x36, 0xb2,
	0x8e, 0x47, 0xcf, 0x58, 0x76, 0x25, 0xb6, 0x59, 0x0a, 0x59, 0xe2, 0x34, 0xef, 0xc8, 0xf2, 0xc4,
	0xdb, 0x30, 0x2f, 0x60, 0x39, 0xf1, 0x34, 0x75, 0xe1, 0x31, 0x6e, 0x96, 0x77, 0x1a, 0xa2, 0x8f,
	0xe3, 0xbc, 0x06, 0x73, 0x6c, 0xaa, 0x1e, 0xaf, 0xbd, 0x35, 0x2d, 0xdb, 0x0a, 0x22, 0x12, 0x26,
	0xb5, 0x89, 0xba, 0x17, 0xbb, 0xa2, 0x2c, 0x77, 0x4d, 0xf4, 0xe8, 0x0d, 0x98, 0xea, 0xc4, 0x84,
	0x46, 0xa6, 0x4f, 0xf9, 0xb7, 0x4f, 0xf0, 0x0c, 0x18, 0x1b, 0x3f, 0xa4, 0xc8, 0x80, 0x2b, 0x30,
	0xe9, 0x04, 0x2c, 0x05, 0x0b, 0x09, 0xa5, 0x18, 0x98, 0x58, 0x0e, 0x50, 0x75, 0x82, 0xb5, 0xa4,
	0x49, 0x4e, 0xb0, 0xab, 0x4a, 0x82, 0x7d, 0x19, 0xaa, 0x81, 0x7f, 0x40, 0x42, 0x14, 0x3e, 0xc1,
	0xb8, 0x30, 0x61, 0x00, 0x36, 0x31, 0xee, 0x13, 0x96, 0x2b, 0xc8, 0x96, 0xb6, 0x6b, 0x51, 0x62,
	0x2b, 0x56, 0xcb, 0xfc, 0x3d, 0x1b, 0xef, 0x42, 0x96, 0xb3, 0xdc, 0x63, 0x40, 0x92, 0xf1, 0x62,
	0x29, 0xc7, 0xd1, 0x54, 0xd0, 0x4e, 0x68, 0xbd, 0x86, 0x69, 0xc7, 0xe5, 0xc1, 0xa4, 0x98, 0xf5,
	0x60, 0xfd, 0x81, 0x1a, 0x32, 0xca, 0xa6, 0x35, 0xcd, 0x53, 0x21, 0x39, 0x78, 0x14, 0x27, 0xf6,
	0x35, 0xb8, 0x7e, 0x1c, 0x25, 0x31, 0x35, 0x0d, 0xa7, 0x76, 0xe5, 0x28, 0x72, 0x7c, 0x72, 0x77,
	0x60, 0x21, 0x48, 0x2b, 0x99, 0x4d, 0x1b, 0x4b, 0x99, 0xb9, 0xec, 0x66, 0x78, 0x38, 0x0b, 0x72,
	0x75, 0xce, 0x28, 0x44, 0x7e, 0x8c, 0x4e, 0x1d, 0xca, 0x0f, 0x78, 0x3b, 0xa1, 0x1f, 0x07, 0x1c,
	0x4b, 0xe7, 0x58, 0x52, 0x2f, 0xd6, 0x69, 0x23, 0xd6, 0xd7, 0x95, 0xa0, 0x9f, 0x6c, 0x11, 0x5a,
	0xbd, 0x9e, 0xef, 0x7b, 0x66, 0x48, 0xda, 0x3d, 0xcb, 0x71, 0x53, 0xc5, 0x9c, 0x45, 0x2d, 0x93,
	0x4a, 0x41, 0xc4, 0xae, 0x21, 0x07, 0x37, 0x12, 0xe8, 0xb2, 0xa4, 0x8c, 0x1e, 0x58, 0x81, 0xe9,
	0x78, 0x66, 0x68, 0x45, 0x84, 0x9f, 0xb4, 0xce, 0xe5, 0x93, 0xb2, 0xd6, 0x81, 0x15, 0x34, 0x3d,
	0xc3, 0x8a, 0x08, 0x1e, 0xd2, 0xbe, 0x07, 0xcb, 0x79, 0x7c, 0x3f, 0x8e, 0x24, 0x02, 0xf3, 0xf9,
	0x22, 0x22, 0x46, 0xe0, 0xc3, 0x38, 0x4a, 0x29, 0x18, 0x70, 0xbd, 0x90, 0xd6, 0xb5, 0x89, 0xd3,
	0x67, 0x9e, 0x1e, 0xf7, 0x39, 0x4d, 0x3b, 0xf4, 0x83, 0x80, 0xd8, 0xf5, 0x05, 0x24, 0xd5, 0xc8,
	0xe5, 0x76, 0x08, 0xbb, 0xcd, 0x41, 0x37, 0x38, 0xa4, 0xfe, 0x18, 0x6e, 0xe4, 0x68, 0x62, 0x91,
	0x9e, 0xeb, 0x44, 0x05, 0xa2, 0x8b, 0xf9, 0x14, 0x69, 0x2b, 0x76, 0x1f, 0x0b, 0xe0, 0x1c, 0xd5,
	0x36, 0xbc, 0x56, 0x48, 0x91, 0x98, 0xd7, 0xe1, 0x45, 0x7f, 0xe5, 0x49, 0x52, 0x1d, 0xc9, 0xbf,
	0x94, 0x4b, 0x92, 0xd6, 0x83, 0x18, 0x8b, 0xff, 0x4a, 0xd2, 0xa4, 0xc1, 0x51, 0x6b, 0xe9, 0xcc,
	0xa2, 0x56, 0x1d, 0xc6, 0x1c, 0x6a, 0xb6, 0xfb, 0x6e, 0xfd, 0x02, 0x9b, 0xde, 0xdd, 0xca, 0x6b,
	0xc6, 0xa8, 0x43, 0xd7, 0xfb, 0xae, 0x7e, 0x15, 0xa6, 0xda, 0x49, 0x6d, 0xbf, 0xc9, 0xcc, 0xe1,
	0x22, 0x5a, 0xd7, 0x64, 0xda, 0xd8, 0xb4, 0x59, 0x96, 0x7b, 0xf3, 0x58, 0x6d, 0x34, 0x23, 0x2c,
	0xba, 0x17, 0x2a, 0xb9, 0x9c, 0xe7, 0x42, 0x99, 0x4a, 0xf2, 0x32, 0x7d, 0xae, 0x96, 0x37, 0xa0,
	0xc6, 0x66, 0xb8, 0x1b, 0x9a, 0x6c, 0x0d, 0xb1, 0xdb, 0x23, 0xf5, 0x4b, 0xc9, 0x4c, 0x27, 0x1d,
	0xba, 0xbe, 0x1b, 0xae, 0xf3, 0x66, 0xb6, 0xdc, 0x4f, 0x8c, 0xd8, 0x73, 0xda, 0x38, 0xe5, 0xcb,
	0x38, 0xe5, 0xa9, 0x7e, 0x7a, 0x8f, 0xa2, 0x69, 0xd3, 0xa5, 0x9f, 0x0e, 0x3f, 0x8f, 0x48, 0xac,
	0x56, 0x79, 0x65, 0xba, 0x10, 0x04, 0xae, 0x08, 0xc6, 0x52, 0x95, 0x57, 0x22, 0xf4, 0xed, 0xc0,
	0xd5, 0xdf, 0x85, 0x0b, 0x45, 0x16, 0x66, 0xb8, 0xc3, 0x79, 0xab, 0xe3, 0xfc, 0x4a, 0xd1, 0xd7,
	0x14, 0xab, 0x93, 0x6c, 0x26, 0xf1, 0x01, 0x23, 0xf9, 0x92, 0xe8, 0xcc, 0x54, 0x84, 0xe1, 0x3f,
	0x84, 0x95, 0x01, 0x26, 0x12, 0xa5, 0x54, 0x46, 0xf3, 0xa5, 0x5d, 0x92, 0x6d, 0x44, 0x09, 0x21,
	0xb5, 0x8a, 0xb0, 0xef, 0xe6, 0x2b, 0x6a, 0xc7, 0xf2, 0x0e, 0x60, 0xc7, 0x55, 0x6b, 0x6a, 0x9f,
	0x4f, 0x6a, 0xf2, 0x67, 0xc3, 0x30, 0x91, 0x5e, 0x53, 0x29, 0x64, 0x28, 0x6b, 0x6a, 0x86, 0xf2,
	0x85, 0xa3, 0xa5, 0x2f, 0xa8, 0xa8, 0x89, 0x0a, 0x5b, 0xf5, 0xa6, 0xa6, 0x22, 0xe5, 0x2b, 0x99,
	0x01, 0xa1, 0xeb, 0x2e, 0xd9, 0xb7, 0x1a, 0x29, 0xdb, 0xb7, 0xfa, 0x39, 0x64, 0xab, 0x4b, 0x3f,
	0x78, 0x2e, 0xe9, 0xe8, 0xf3, 0x91, 0xdf, 0xdf, 0x0e, 0x43, 0x55, 0xba, 0xc5, 0xf5, 0xa9, 0xf6,
	0x67, 0x24, 0x3a, 0xaa, 0x0c, 0xf3, 0xdb, 0x6c, 0x92, 0x18, 0xe5, 0x6d, 0x36, 0x14, 0xe4, 0x9b,
	0xb0, 0xa8, 0xc0, 0x4a, 0xa9, 0x23, 0xb7, 0xb6, 0x39, 0x09, 0xe3, 0x24, 0xfb, 0x8c, 0x9f, 0x4d,
	0xb9, 0xfe, 0xbf, 0x05, 0x18, 0xd9, 0xf2, 0x6d, 0xf2, 0xa9, 0xb6, 0x96, 0x19, 0x01, 0x55, 0x92,
	0xc9, 0x6e, 0xaa, 0x24, 0x41, 0xdc, 0x4d, 0x45, 0xd1, 0xad, 0x02, 0x5b, 0x03, 0x98, 0x7b, 0x21,
	0xf9, 0x24, 0xc6, 0xb4, 0x6b, 0xff, 0x99, 0x90, 0x59, 0xad, 0x1d, 0xc4, 0x0f, 0x92, 0xe6, 0x47,
	0xcf, 0x18, 0x19, 0x06, 0xe9, 0xfa, 0x36, 0xe9, 0xa1, 0xfb, 0x9b, 0x30, 0xc6, 0xdb, 0x41, 0xbc,
	0xc9, 0x7e, 0x33, 0x53, 0x66, 0x7e, 0x92, 0x01, 0x50, 0x9f, 0x1f, 0xcf, 0x8a, 0xad, 0x65, 0x2f,
	0x76, 0xd7, 0x83, 0xb8, 0xc5, 0x1b, 0x93, 0x0a, 0x64, 0x06, 0xd7, 0xf6, 0xc3, 0x74, 0xa9, 0x50,
	0xe5, 0x50, 0xeb, 0xac, 0x49, 0xa6, 0x15, 0xed, 0x87, 0xc4, 0xb2, 0xd3, 0x9b, 0x4b, 0x1c, 0xea,
	0x31, 0x6f, 0x4c, 0x0a, 0xe8, 0xf7, 0x77, 0xad, 0xe4, 0x92, 0xd2, 0x39, 0x2f, 0x76, 0x1f, 0xed,
	0x5a, 0x69, 0x97, 0xe7, 0xb4, 0x93, 0x4d, 0x2a, 0xd6, 0xb5, 0xe5, 0xf0, 0x2b, 0x2a, 0xc5, 0x05,
	0x4e, 0xb5, 0x7c, 0x81, 0x23, 0x6a, 0xa1, 0xbd, 0xd8, 0xb5, 0x4c, 0xc6, 0xb1, 0x64, 0xd7, 0x68,
	0x92, 0x11, 0x8b, 0x5d, 0x8b, 0xf1, 0x1a, 0x97, 0x34, 0x92, 0x97, 0xdf, 0x8b, 0x7b, 0xc2, 0x58,
	0xa6, 0xf8, 0x46, 0x66, 0xd6, 0xf7, 0x20, 0xee, 0x71, 0x7b, 0x79, 0x11, 0x6a, 0x4e, 0xd0, 0xbf,
	0x23, 0x2d, 0x58, 0x6a, 0x3c, 0x30, 0xb3, 0xd6, 0x6c, 0xc9, 0x72, 0x1d, 0xa6, 0x31, 0x5d, 0x92,
	0xae, 0x71, 0xf0, 0x8b, 0x41, 0x53, 0xac, 0x39, 0xbb, 0xb5, 0xc1, 0x96, 0x36, 0x6c, 0xf9, 0xe7,
	0x26, 0xf7, 0x7d, 0xc6, 0xd8, 0xe2, 0xcf, 0xc5, 0xeb, 0x75, 0x6d, 0x7e, 0xa1, 0xd3, 0xcc, 0x36,
	0x6f, 0x44, 0x4b, 0xd3, 0x3e, 0x5d, 0xea, 0xac, 0x9f, 0x26, 0x75, 0xfe, 0x12, 0x2c, 0xe5, 0x53,
	0xdf, 0x98, 0xe6, 0xb2, 0xf0, 0x45, 0x35, 0xef, 0x7d, 0x42, 0x3f, 0xcf, 0xbb, 0x4f, 0x9f, 0x77,
	0x2b, 0x27, 0x25, 0xf5, 0xcc, 0xb6, 0xf1, 0xa4, 0xa4, 0xe4, 0xbc, 0x67, 0xe9, 0x74, 0xe7, 0x3d,
	0x17, 0xce, 0x2c, 0xaf, 0x3e, 0x7d, 0x62, 0x7c, 0xf1, 0xb4, 0x89, 0xf1, 0x35, 0xa8, 0x75, 0xf1,
	0x36, 0x70, 0x9a, 0xee, 0x2e, 0xf3, 0x0c, 0xbd, 0x9b, 0xdc, 0x11, 0x66, 0x19, 0xfa, 0x0a, 0x4c,
	0xee, 0xfb, 0x34, 0x4a, 0x61, 0x2e, 0x21, 0x0c, 0xec, 0xf3, 0x7b, 0xc3, 0x2c, 0x1f, 0xfe, 0x77,
	0xf8, 0x3c, 0x1f, 0x7e, 0x3e, 0xf9, 0xf0, 0xc7, 0xf0, 0x72, 0x98, 0xdd, 0x3d, 0x36, 0x69, 0xcf,
	0xea, 0x13, 0xa4, 0xe7, 0x5a, 0x4f, 0xcd, 0xb6, 0xef, 0xb5, 0xe3, 0x30, 0xc4, 0xf2, 0x91, 0xb6,
	0xe5, 0x25, 0x01, 0xe4, 0x45, 0x09, 0xa3, 0xc5, 0x10, 0xb6, 0x62, 0x77, 0xd3, 0x7a, 0xba, 0x9e,
	0x42, 0xb7, 0x18, 0x70, 0x72, 0x9b, 0x90, 0x61, 0x63, 0x51, 0x11, 0x92, 0xdd, 0x77, 0xa2, 0x74,
	0x33, 0x4a, 0xf4, 0x62, 0x41, 0xd1, 0x56, 0xec, 0x3e, 0x72, 0x22, 0xbc, 0x50, 0x52, 0x44, 0xea,
	0xf9, 0x7e, 0x37, 0x0e, 0x92, 0x98, 0xb3, 0x90, 0xc3, 0xfb, 0x80, 0xf7, 0xea, 0x4f, 0xf8, 0x6d,
	0xb7, 0x0c, 0x35, 0x39, 0xbf, 0x57, 0x04, 0x24, 0xdf, 0xa0, 0xbd, 0x2a, 0x53, 0xfa, 0x80, 0x43,
	0x4b, 0xb2, 0xe2, 0x1c, 0xfa, 0x08, 0x5e, 0x52, 0xc9, 0x06, 0xfb, 0x87, 0x74, 0x10, 0x5d, 0xc8,
	0x6e, 0xd1, 0x25, 0x74, 0xb7, 0x05, 0x78, 0x81, 0xf0, 0x87, 0xbc, 0xa2, 0xbe, 0x38, 0x5f, 0x4a,
	0xd5, 0xab, 0x79, 0xd5, 0xac, 0xa0, 0x3e, 0x37, 0xd9, 0x16, 0x95, 0xaf, 0xe5, 0x7d, 0x0d, 0xae,
	0x0f, 0x98, 0x69, 0x9e, 0x22, 0x8f, 0x99, 0x57, 0xca, 0xa6, 0xa9, 0x92, 0x3c, 0xf6, 0x5c, 0x75,
	0xea, 0x2c, 0xce, 0x55, 0x6b, 0x27, 0x38, 0x57, 0x7d, 0x9d, 0x6f, 0x23, 0x67, 0x1f, 0xb7, 0xcf,
	0xdc, 0x74, 0xe0, 0x8a, 0x4b, 0x7e, 0xba, 0xfc, 0x2d, 0x8f, 0x9c, 0x88, 0xd9, 0xd9, 0x56, 0x9e,
	0xc1, 0x4c, 0x97, 0xf8, 0x5c, 0x42, 0xb2, 0x67, 0xb6, 0xfd, 0xd8, 0x63, 0x24, 0xf6, 0xc5, 0x3d,
	0xc0, 0xcb, 0x39, 0xbd, 0xda, 0x60, 0x90, 0x06, 0xd9, 0x5b, 0x67, 0x70, 0xdb, 0xc1, 0x7e, 0x91,
	0xbf, 0xd4, 0x62, 0x36, 0x5b, 0xa2, 0x06, 0x9d, 0x22, 0x7f, 0x5b, 0x0c, 0xb6, 0xa0, 0x03, 0xe2,
	0xfa, 0x63, 0x9e, 0x64, 0x5e, 0x5e, 0xfb, 0xd9, 0xc5, 0x05, 0x85, 0x9e, 0x2a, 0xac, 0xe7, 0x93,
	0x02, 0xff, 0x95, 0x06, 0xe7, 0xc4, 0x1b, 0x14, 0x85, 0x2c, 0xf8, 0x2b, 0x6a, 0x16, 0x7c, 0x64,
	0x19, 0xb5, 0xa0, 0xa1, 0x26, 0xc2, 0x57, 0x60, 0x32, 0x49, 0x87, 0xa4, 0x5c, 0xb8, 0x2a, 0xda,
	0x92, 0x7b, 0x01, 0x69, 0x69, 0xa2, 0x72, 0x6c, 0x3b, 0x22, 0x6f, 0x69, 0xaf, 0x2b, 0x87, 0xb7,
	0x22, 0xd9, 0xc4, 0xcd, 0xf7, 0xd1, 0x34, 0xd9, 0x5c, 0x0f, 0x62, 0x25, 0x33, 0x1b, 0x53, 0x32,
	0xb3, 0x92, 0xd0, 0x3c, 0x7e, 0xba, 0xd0, 0x3c, 0x71, 0x66, 0x4b, 0xa4, 0x1f, 0x4f, 0xfd, 0x77,
	0x8a, 0x77, 0x4d, 0xb8, 0x22, 0xc7, 0x98, 0xf2, 0x68, 0xc5, 0xa5, 0x79, 0x49, 0x02, 0x2c, 0x0b,
	0x57, 0xeb, 0x70, 0x29, 0x4f, 0x2a, 0x17, 0x3b, 0xb9, 0xb8, 0x2f, 0xa8, 0x74, 0xd4, 0xe0, 0xf9,
	0x65, 0x58, 0x92, 0x89, 0x94, 0xee, 0x00, 0xd5, 0x25, 0x08, 0x75, 0x03, 0xe8, 0xf3, 0xb0, 0xf6,
	0x79, 0x58, 0x3b, 0xbb, 0xb0, 0xf6, 0x45, 0x38, 0x4f, 0xf6, 0xf6, 0x48, 0x1b, 0x0b, 0xc4, 0xf3,
	0xfe, 0x87, 0x2f, 0x2d, 0x17, 0x52, 0x80, 0x0d, 0xc5, 0x11, 0x3d, 0x86, 0x1b, 0x7c, 0x57, 0x3f,
	0x23, 0x30, 0xe8, 0x72, 0x3f, 0x5f, 0x83, 0x5e, 0x45, 0xf0, 0xfb, 0x09, 0x74, 0xf9, 0xdd, 0xfe,
	0x16, 0x5c, 0x57, 0x8c, 0x43, 0x36, 0x54, 0xf5, 0x5a, 0x1b, 0x0f, 0xbc, 0x57, 0x65, 0x43, 0x91,
	0xcc, 0x55, 0xb9, 0x1c, 0xb7, 0x09, 0x32, 0x98, 0x64, 0xb2, 0x2a, 0x45, 0x1e, 0x87, 0x57, 0x24,
	0xd0, 0xd4, 0x70, 0x15, 0x72, 0x03, 0x73, 0x81, 0xce, 0xa7, 0xcf, 0x05, 0xf6, 0xcf, 0x3a, 0x17,
	0x70, 0xce, 0x38, 0x17, 0xf8, 0xd6, 0x89, 0x72, 0x81, 0x2f, 0xc1, 0x52, 0xa6, 0x16, 0x7b, 0x21,
	0x21, 0x26, 0x0d, 0xac, 0x76, 0x42, 0x83, 0xbf, 0x13, 0xb0, 0x98, 0x42, 0x3c, 0x08, 0x09, 0x69,
	0xb1, 0xfe, 0xe7, 0x99, 0x48, 0xfc, 0x74, 0x0c, 0x20, 0x7b, 0xac, 0xaa, 0x90, 0x4b, 0xdc, 0x53,
	0x73, 0x89, 0x23, 0xc3, 0x68, 0x46, 0x46, 0x4d, 0x27, 0x06, 0xc7, 0xe6, 0x91, 0x33, 0x5b, 0x36,
	0xaf, 0x82, 0x16, 0xe2, 0xf0, 0x26, 0x75, 0x22, 0xb1, 0xcc, 0xe7, 0x7b, 0x6f, 0xb5, 0x30, 0x9d,
	0x16, 0xd6, 0x53, 0xfc, 0xc7, 0xc8, 0xf3, 0x88, 0xe2, 0x27, 0x8a, 0xa6, 0x43, 0x67, 0x14, 0x4d,
	0x87, 0x3f, 0x6d, 0x34, 0x1d, 0x39, 0x26, 0x9a, 0xfe, 0x1f, 0xb8, 0xa9, 0x60, 0x8b, 0x4a, 0xae,
	0x8c, 0xbf, 0xfc, 0xb0, 0x5b, 0xd2, 0x7f, 0x1e, 0xe0, 0x57, 0x65, 0x8a, 0xbc, 0x92, 0x2b, 0xe1,
	0x3d, 0x1e, 0x7a, 0xff, 0x62, 0x39, 0xb4, 0xe7, 0x63, 0x70, 0xbf, 0x3f, 0x06, 0x5a, 0xfe, 0xf9,
	0xb2, 0x82, 0xd9, 0x3d, 0x52, 0xcd, 0xee, 0xe8, 0x3b, 0xa6, 0x39, 0x62, 0xaa, 0xf1, 0xbd, 0x02,
	0x3a, 0x56, 0xf7, 0x1c, 0x84, 0x8c, 0x61, 0x9e, 0xa2, 0x41, 0x1a, 0xeb, 0xf9, 0x88, 0x77, 0x1c,
	0x97, 0x46, 0x8f, 0x9e, 0x59, 0x1a, 0xfd, 0x7b, 0x9f, 0x1b, 0xe0, 0xb1, 0x06, 0xf8, 0xd9, 0x35,
	0x8f, 0x3f, 0x1a, 0x81, 0xf1, 0xe4, 0xf1, 0xbe, 0x82, 0x59, 0xbc, 0xa7, 0x9a, 0xc5, 0xd1, 0x97,
	0x4c, 0x04, 0x91, 0xc2, 0x69, 0x5d, 0x3b, 0x24, 0x56, 0x44, 0xe4, 0xc3, 0x82, 0x61, 0xf1, 0xf0,
	0x16, 0x76, 0x64, 0xc7, 0x05, 0xe5, 0xa6, 0x33, 0x32, 0xc0, 0x74, 0xe6, 0x61, 0x0c, 0x8b, 0x9b,
	0x29, 0x9a, 0xca, 0x84, 0x31, 0xda, 0x77, 0x9b, 0x36, 0xae, 0xa5, 0xa9, 0x78, 0x9c, 0x10, 0x3b,
	0xc7, 0x78, 0xc5, 0x55, 0xd2, 0xc6, 0x40, 0x7e, 0x1e, 0xd7, 0x08, 0xae, 0xc2, 0x14, 0x15, 0x0c,
	0xc9, 0xae, 0x12, 0x4c, 0x18, 0x93, 0x49, 0x23, 0x86, 0xc6, 0x5f, 0xa4, 0x33, 0xc0, 0x3f, 0x07,
	0x98, 0xce, 0xbd, 0x96, 0x59, 0x50, 0x97, 0x87, 0xaa, 0xba, 0xbc, 0x7e, 0x74, 0xf2, 0xa2, 0xd0,
	0x52, 0xb5, 0xe6, 0x32, 0x54, 0x45, 0xf4, 0x93, 0xf6, 0x43, 0x80, 0x37, 0x25, 0x25, 0x59, 0x03,
	0x0a, 0xb9, 0x46, 0x8e, 0x28, 0xe4, 0xba, 0x09, 0xb3, 0xe9, 0x4e, 0x6e, 0x22, 0x9c, 0x34, 0x6f,
	0x99, 0x49, 0xb6, 0x6d, 0x45, 0x4f, 0xd3, 0x1e, 0xa0, 0x90, 0x63, 0x03, 0x14, 0xf2, 0x5d, 0xb8,
	0x80, 0x2f, 0x01, 0x24, 0x86, 0xcc, 0xb2, 0x56, 0x69, 0x94, 0x73, 0x38, 0x4a, 0x9d, 0x81, 0x18,
	0x29, 0x84, 0x34, 0xd8, 0x07, 0x70, 0x75, 0x20, 0xba, 0x64, 0x3b, 0x7c, 0x99, 0x7c, 0xb9, 0x9c,
	0x4c, 0x66, 0x4b, 0xaf, 0xc3, 0x9c, 0x1f, 0x47, 0xbb, 0x7e, 0xec, 0xd9, 0xa6, 0xe4, 0x59, 0xc4,
	0xda, 0x78, 0x36, 0xe9, 0x93, 0xa4, 0xa0, 0x3f, 0x82, 0x2b, 0xca, 0x04, 0x1c, 0xae, 0x8d, 0xea,
	0x23, 0x9b, 0x7c, 0x0d, 0xbc, 0x2c, 0x0f, 0xcf, 0xdf, 0xf0, 0x94, 0xdf, 0xdc, 0x1c, 0x6c, 0x60,
	0x93, 0x67, 0x16, 0xd5, 0x7e, 0x38, 0xfa, 0x59, 0x88, 0x6a, 0xb9, 0x10, 0x22, 0x3d, 0x5e, 0x57,
	0xb2, 0x6d, 0xb4, 0x92, 0xcf, 0x06, 0x0b, 0x73, 0x7a, 0x08, 0x2b, 0x65, 0x79, 0x66, 0xc9, 0xd6,
	0xd1, 0x72, 0x31, 0xb3, 0x3c, 0xbb, 0xcd, 0xa3, 0xcf, 0x6e, 0xb4, 0xfd, 0xcf, 0x21, 0x98, 0x79,
	0x42, 0x49, 0xb8, 0x41, 0xf6, 0x1c, 0x8f, 0x88, 0xf7, 0x92, 0x0b, 0x7e, 0xb4, 0xa9, 0xfa, 0xd1,
	0x37, 0x8e, 0x1a, 0xae, 0x40, 0xed, 0xe7, 0xbe, 0x16, 0xfc, 0x85, 0x0a, 0x63, 0xff, 0x0a, 0x30,
	0xb1, 0xe6, 0x1d, 0x0a, 0xc6, 0xdf, 0x81, 0x11, 0xb6, 0xb2, 0xaa, 0x73, 0xaa, 0x2b, 0xc7, 0xdd,
	0x8c, 0x34, 0x10, 0x5a, 0x7f, 0x1b, 0x46, 0xf1, 0xba, 0x80, 0xb8, 0xd8, 0x7a, 0xe5, 0xd8, 0x1b,
	0x16, 0x06, 0x87, 0xd7, 0x6f, 0xc2, 0x50, 0xdf, 0x15, 0x17, 0x76, 0x2f, 0x1d, 0x5d, 0x60, 0x6f,
	0x0c, 0xf5, 0x5d, 0x7d, 0x1d, 0x26, 0xd2, 0xc2, 0x34, 0x21, 0xaf, 0x17, 0x4f, 0x54, 0xf5, 0x66,
	0x64, 0x78, 0x4c, 0x26, 0x72, 0x0d, 0x94, 0x58, 0x58, 0xdc, 0x38, 0x61, 0xed, 0x55, 0x7a, 0xa1,
	0x13, 0x0b, 0xba, 0xee, 0xc0, 0x88, 0xe7, 0xdb, 0x44, 0x94, 0x41, 0xad, 0x1c, 0x57, 0xee, 0x63,
	0x20, 0xb4, 0xfe, 0x2e, 0x9c, 0x13, 0x47, 0x19, 0xf5, 0x73, 0x88, 0x78, 0xf5, 0x04, 0x27, 0x24,
	0x46, 0x82, 0xc3, 0x3e, 0x40, 0xae, 0xf9, 0x16, 0x49, 0xda, 0x8d, 0x13, 0x5e, 0xee, 0x33, 0xaa,
	0x7d, 0xe9, 0xc6, 0xe0, 0xc3, 0x34, 0xb1, 0x60, 0xcb, 0x6a, 0x71, 0x56, 0x71, 0xfd, 0x64, 0x9b,
	0x2c, 0x49, 0x02, 0x82, 0xfb, 0x36, 0x1f, 0xc3, 0x4c, 0x21, 0x01, 0xc1, 0xea, 0xfe, 0x63, 0x4c,
	0x2a, 0xbf, 0x78, 0x34, 0xb4, 0x7c, 0xa6, 0xa2, 0xbf, 0x07, 0xe3, 0x49, 0xe0, 0xaf, 0x57, 0x91,
	0xe2, 0xb5, 0x93, 0xe4, 0xdd, 0x46, 0x8a, 0xa5, 0xef, 0x80, 0x26, 0xbb, 0xc2, 0x9e, 0xe3, 0x75,
	0x45, 0xe4, 0xfd, 0xc2, 0x29, 0x52, 0x32, 0x63, 0x3a, 0xcc, 0xe5, 0x7b, 0xdf, 0x84, 0x59, 0xcc,
	0x87, 0x6c, 0xee, 0x6f, 0xc4, 0x13, 0x42, 0x78, 0xc9, 0xe0, 0x98, 0x6a, 0xbe, 0x82, 0x97, 0x32,
	0x66, 0xe2, 0x82, 0x1b, 0xfc, 0x3a, 0x68, 0xf4, 0xd0, 0x6b, 0x2b, 0xf9, 0x4a, 0xed, 0x67, 0xa1,
	0x3d, 0x4d, 0xd5, 0xe7, 0xd5, 0xf5, 0x6d, 0x98, 0xec, 0xe3, 0x33, 0xea, 0xbc, 0x78, 0x1f, 0xef,
	0x1f, 0x9c, 0x9a, 0x6a, 0xb5, 0x9f, 0xbd, 0xc4, 0xae, 0x6f, 0x41, 0x35, 0xb0, 0xcd, 0x64, 0x55,
	0x21, 0xee, 0xb5, 0x9d, 0x92, 0x20, 0x04, 0x76, 0xf2, 0x8e, 0xba, 0x1e, 0xc1, 0xe5, 0x50, 0x3c,
	0x90, 0x6e, 0x06, 0xbe, 0xe3, 0x15, 0xd2, 0xb0, 0xa8, 0x3e, 0xf3, 0xb3, 0x8c, 0x71, 0x31, 0x3c,
	0xe2, 0xd9, 0x75, 0x9d, 0xc0, 0xa2, 0x12, 0x88, 0x79, 0x99, 0x8b, 0xe3, 0xed, 0xf9, 0x75, 0xfd,
	0x67, 0x19, 0x6d, 0x3e, 0x2c, 0x7b, 0xc1, 0xbd, 0xf1, 0xed, 0x21, 0x98, 0x96, 0xdf, 0x8f, 0x72,
	0xb0, 0x04, 0xf9, 0x42, 0xdb, 0x77, 0x03, 0xac, 0x28, 0xb3, 0x4d, 0x4a, 0x42, 0x07, 0x5f, 0x2c,
	0xb1, 0x4d, 0xfc, 0xf7, 0x17, 0xf5, 0x9f, 0xf0, 0x7b, 0x59, 0xe7, 0x33, 0x98, 0x56, 0x0a, 0xc2,
	0xff, 0x0f, 0xc2, 0xcb, 0xa0, 0x25, 0x9d, 0x38, 0xf7, 0xc3, 0x80, 0xd4, 0xff, 0x99, 0x27, 0xd9,
	0xd3, 0x52, 0x07, 0x3e, 0xd4, 0xf0, 0xcd, 0xc2, 0xb3, 0x57, 0xe2, 0x09, 0x88, 0xd3, 0xbd, 0x5e,
	0xc6, 0x9f, 0xcf, 0x08, 0x0a, 0x8f, 0x75, 0xdd, 0x80, 0xe9, 0xe4, 0xfc, 0xb6, 0xcf, 0x3a, 0x7d,
	0x4f, 0xfc, 0xcb, 0x84, 0x9a, 0x68, 0xde, 0xe1, 0xad, 0x8d, 0x1d, 0x58, 0x48, 0xff, 0x7d, 0xc4,
	0xb6, 0x15, 0x32, 0x56, 0xf8, 0x1e, 0x63, 0x11, 0x5b, 0xf1, 0x88, 0x5c, 0xdb, 0xef, 0x12, 0x4f,
	0x3c, 0x3d, 0x00, 0xfc, 0x81, 0x3b, 0xd6, 0xc2, 0x9f, 0x68, 0xb3, 0x45, 0x37, 0xa7, 0x3e, 0x4e,
	0x3c, 0x1b, 0x3b, 0x1b, 0xff, 0x34, 0x0e, 0xb5, 0xe4, 0xb1, 0x0a, 0x26, 0xd8, 0x98, 0x9e, 0xee,
	0xe5, 0x86, 0x2f, 0xc3, 0x05, 0xdb, 0xf7, 0x88, 0xd9, 0xf6, 0x83, 0x43, 0xc7, 0xeb, 0x98, 0x7e,
	0x4f, 0xbc, 0xc1, 0xc2, 0x85, 0x81, 0xef, 0x2e, 0x19, 0x8b, 0x0c, 0x64, 0x9d, 0x43, 0x7c, 0xd8,
	0xb3, 0xc5, 0xa3, 0x12, 0x91, 0xaf, 0x53, 0x98, 0x0d, 0x92, 0x8f, 0x41, 0xe5, 0x91, 0x1f, 0xa6,
	0x58, 0x3f, 0xc9, 0x03, 0x1b, 0x7c, 0xce, 0x37, 0x93, 0x07, 0x84, 0x1c, 0xdf, 0x53, 0xb8, 0x63,
	0xcc, 0x04, 0xf2, 0x4f, 0x5c, 0x60, 0x7f, 0x02, 0x5a, 0xfa, 0x6f, 0x53, 0x12, 0xa6, 0x8f, 0xe0,
	0x63, 0x25, 0x77, 0x4f, 0x33, 0xa2, 0xf8, 0x29, 0x04, 0x74, 0x17, 0xba, 0x5b, 0xbe, 0xf8, 0xdb,
	0x98, 0xb6, 0xd4, 0x4e, 0xdd, 0x83, 0x79, 0xa1, 0x3d, 0xd9, 0xe7, 0x4a, 0x7b, 0x75, 0xa7, 0x19,
	0x57, 0xbc, 0x28, 0x92, 0x90, 0x31, 0x66, 0x89, 0xda, 0x80, 0x9f, 0xf8, 0x1a, 0xcc, 0x39, 0xd4,
	0x8c, 0x83, 0x4e, 0x68, 0xd9, 0x4c, 0x36, 0x6e, 0xd0, 0x23, 0x11, 0xe1, 0xb7, 0xb9, 0xc7, 0x0d,
	0xdd, 0xa1, 0x4f, 0x78, 0xd7, 0x7a, 0xd2, 0xb3, 0xf4, 0xc7, 0x15, 0xa8, 0x0f, 0x62, 0xa2, 0x7e,
	0x05, 0x26, 0xf1, 0xfd, 0x26, 0x73, 0xdf, 0xf2, 0xec, 0x5e, 0xf2, 0xbc, 0x45, 0x15, 0xdb, 0x1e,
	0x61, 0x93, 0xde, 0x83, 0x7a, 0x3b, 0xd1, 0x4f, 0x53, 0x95, 0xe9, 0x49, 0x76, 0x46, 0xcb, 0x75,
	0xdb, 0x58, 0x68, 0x97, 0xb6, 0x2f, 0x3d, 0x86, 0x89, 0xb4, 0xe1, 0x24, 0xb3, 0xbb, 0x06, 0xb5,
	0xf4, 0x95, 0xc2, 0xec, 0x65, 0x91, 0x09, 0x63, 0x32, 0x79, 0xaa, 0x10, 0xb3, 0xd1, 0xbf, 0xac,
	0xc0, 0x74, 0x8e, 0xbd, 0xcf, 0xeb, 0x35, 0xbd, 0xff, 0x09, 0xb5, 0x9c, 0x26, 0xf0, 0x8c, 0xf0,
	0xce, 0x29, 0x34, 0x21, 0xd3, 0x81, 0xa9, 0x40, 0x96, 0x7e, 0xe3, 0x77, 0x2a, 0x30, 0x9d, 0x53,
	0x4f, 0xf1, 0x2f, 0x6f, 0xc4, 0x2f, 0xed, 0x05, 0xbd, 0x01, 0x97, 0xe4, 0xff, 0x0f, 0x22, 0x89,
	0x3e, 0x81, 0xa9, 0xe0, 0x3f, 0xbf, 0x49, 0x07, 0x49, 0xdc, 0xaf, 0x36, 0x84, 0xff, 0xe8, 0x44,
	0xfc, 0xdb, 0x1a, 0x95, 0x5b, 0x54, 0xfc, 0x07, 0x20, 0x7c, 0xc0, 0x4b, 0xa2, 0x4e, 0xb5, 0x91,
	0x7b, 0xf8, 0xcc, 0xbd, 0x5b, 0xf2, 0x79, 0x7b, 0xed, 0x7b, 0x33, 0xc9, 0x6c, 0x19, 0x6f, 0x90,
	0x63, 0xdf, 0x18, 0x4f, 0x00, 0xfe, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x63, 0xe6, 0xf9, 0xfd,
	0x68, 0x00, 0x00,
}
