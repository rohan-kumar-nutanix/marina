// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zeus/domain_fault_tolerance_state.proto

package zeus

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type of the domain for which we are recording the fault tolerance
// status. Currently, the only domains supported are disk, node, block
// a.k.a. rackable unit, rack, cluster and user-defined domain. Later we
// may add support for fire compartment, site, etc.
type DomainFaultToleranceState_Domain_DomainType int32

const (
	// Unknown domain defined to catch initialization errors.
	DomainFaultToleranceState_Domain_kUnknown DomainFaultToleranceState_Domain_DomainType = 0
	// Rackable Unit, a.k.a. Block (deprecated).
	DomainFaultToleranceState_Domain_kDEPRECATEDRackableUnit DomainFaultToleranceState_Domain_DomainType = 1
	// Represents a node of the cluster (deprecated).
	DomainFaultToleranceState_Domain_kDEPRECATEDNode DomainFaultToleranceState_Domain_DomainType = 2
	// Represents a disk in the cluster (deprecated).
	DomainFaultToleranceState_Domain_kDEPRECATEDDisk DomainFaultToleranceState_Domain_DomainType = 3
	// A custom domain to allow creation of user-defined domains.
	DomainFaultToleranceState_Domain_kCustom DomainFaultToleranceState_Domain_DomainType = 5
	// Represents a disk in the cluster.
	DomainFaultToleranceState_Domain_kDisk DomainFaultToleranceState_Domain_DomainType = 100
	// Represents a node of the cluster.
	DomainFaultToleranceState_Domain_kNode DomainFaultToleranceState_Domain_DomainType = 200
	// Rackable Unit, a.k.a. Block.
	DomainFaultToleranceState_Domain_kRackableUnit DomainFaultToleranceState_Domain_DomainType = 300
	// Represents a rack in the cluster.
	DomainFaultToleranceState_Domain_kRack DomainFaultToleranceState_Domain_DomainType = 400
	// Cluster.
	DomainFaultToleranceState_Domain_kCluster DomainFaultToleranceState_Domain_DomainType = 1000
)

var DomainFaultToleranceState_Domain_DomainType_name = map[int32]string{
	0:    "kUnknown",
	1:    "kDEPRECATEDRackableUnit",
	2:    "kDEPRECATEDNode",
	3:    "kDEPRECATEDDisk",
	5:    "kCustom",
	100:  "kDisk",
	200:  "kNode",
	300:  "kRackableUnit",
	400:  "kRack",
	1000: "kCluster",
}

var DomainFaultToleranceState_Domain_DomainType_value = map[string]int32{
	"kUnknown":                0,
	"kDEPRECATEDRackableUnit": 1,
	"kDEPRECATEDNode":         2,
	"kDEPRECATEDDisk":         3,
	"kCustom":                 5,
	"kDisk":                   100,
	"kNode":                   200,
	"kRackableUnit":           300,
	"kRack":                   400,
	"kCluster":                1000,
}

func (x DomainFaultToleranceState_Domain_DomainType) Enum() *DomainFaultToleranceState_Domain_DomainType {
	p := new(DomainFaultToleranceState_Domain_DomainType)
	*p = x
	return p
}

func (x DomainFaultToleranceState_Domain_DomainType) String() string {
	return proto.EnumName(DomainFaultToleranceState_Domain_DomainType_name, int32(x))
}

func (x *DomainFaultToleranceState_Domain_DomainType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DomainFaultToleranceState_Domain_DomainType_value, data, "DomainFaultToleranceState_Domain_DomainType")
	if err != nil {
		return err
	}
	*x = DomainFaultToleranceState_Domain_DomainType(value)
	return nil
}

func (DomainFaultToleranceState_Domain_DomainType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9524867718b4c1c1, []int{0, 0, 0}
}

type DomainFaultToleranceState_Domain_Component_ComponentType int32

const (
	// Unknown component defined to catch initialization errors.
	DomainFaultToleranceState_Domain_Component_kUnknown DomainFaultToleranceState_Domain_Component_ComponentType = 0
	// Replicas of extent groups.
	DomainFaultToleranceState_Domain_Component_kExtentGroupReplicas DomainFaultToleranceState_Domain_Component_ComponentType = 1
	// Episodes of Oplog.
	DomainFaultToleranceState_Domain_Component_kOplogEpisodes DomainFaultToleranceState_Domain_Component_ComponentType = 2
	// Cassandra Ring.
	DomainFaultToleranceState_Domain_Component_kCassandraRing DomainFaultToleranceState_Domain_Component_ComponentType = 3
	// Zookeeper instances.
	DomainFaultToleranceState_Domain_Component_kZookeeperInstances DomainFaultToleranceState_Domain_Component_ComponentType = 4
	// Free space on the cluster.
	DomainFaultToleranceState_Domain_Component_kFreeSpace DomainFaultToleranceState_Domain_Component_ComponentType = 5
	// Static config status. Set to indicate whether the cluster's
	// configuration can support block fault tolerance.
	DomainFaultToleranceState_Domain_Component_kStaticConfig DomainFaultToleranceState_Domain_Component_ComponentType = 6
	// Erasure code strip size.
	DomainFaultToleranceState_Domain_Component_kErasureCodeStripSize DomainFaultToleranceState_Domain_Component_ComponentType = 7
	// Stargate health.
	DomainFaultToleranceState_Domain_Component_kStargateHealth DomainFaultToleranceState_Domain_Component_ComponentType = 8
)

var DomainFaultToleranceState_Domain_Component_ComponentType_name = map[int32]string{
	0: "kUnknown",
	1: "kExtentGroupReplicas",
	2: "kOplogEpisodes",
	3: "kCassandraRing",
	4: "kZookeeperInstances",
	5: "kFreeSpace",
	6: "kStaticConfig",
	7: "kErasureCodeStripSize",
	8: "kStargateHealth",
}

var DomainFaultToleranceState_Domain_Component_ComponentType_value = map[string]int32{
	"kUnknown":              0,
	"kExtentGroupReplicas":  1,
	"kOplogEpisodes":        2,
	"kCassandraRing":        3,
	"kZookeeperInstances":   4,
	"kFreeSpace":            5,
	"kStaticConfig":         6,
	"kErasureCodeStripSize": 7,
	"kStargateHealth":       8,
}

func (x DomainFaultToleranceState_Domain_Component_ComponentType) Enum() *DomainFaultToleranceState_Domain_Component_ComponentType {
	p := new(DomainFaultToleranceState_Domain_Component_ComponentType)
	*p = x
	return p
}

func (x DomainFaultToleranceState_Domain_Component_ComponentType) String() string {
	return proto.EnumName(DomainFaultToleranceState_Domain_Component_ComponentType_name, int32(x))
}

func (x *DomainFaultToleranceState_Domain_Component_ComponentType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DomainFaultToleranceState_Domain_Component_ComponentType_value, data, "DomainFaultToleranceState_Domain_Component_ComponentType")
	if err != nil {
		return err
	}
	*x = DomainFaultToleranceState_Domain_Component_ComponentType(value)
	return nil
}

func (DomainFaultToleranceState_Domain_Component_ComponentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9524867718b4c1c1, []int{0, 0, 0, 0}
}

type DomainFaultToleranceState struct {
	Domains              []*DomainFaultToleranceState_Domain `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *DomainFaultToleranceState) Reset()         { *m = DomainFaultToleranceState{} }
func (m *DomainFaultToleranceState) String() string { return proto.CompactTextString(m) }
func (*DomainFaultToleranceState) ProtoMessage()    {}
func (*DomainFaultToleranceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9524867718b4c1c1, []int{0}
}

func (m *DomainFaultToleranceState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainFaultToleranceState.Unmarshal(m, b)
}
func (m *DomainFaultToleranceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainFaultToleranceState.Marshal(b, m, deterministic)
}
func (m *DomainFaultToleranceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainFaultToleranceState.Merge(m, src)
}
func (m *DomainFaultToleranceState) XXX_Size() int {
	return xxx_messageInfo_DomainFaultToleranceState.Size(m)
}
func (m *DomainFaultToleranceState) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainFaultToleranceState.DiscardUnknown(m)
}

var xxx_messageInfo_DomainFaultToleranceState proto.InternalMessageInfo

func (m *DomainFaultToleranceState) GetDomains() []*DomainFaultToleranceState_Domain {
	if m != nil {
		return m.Domains
	}
	return nil
}

type DomainFaultToleranceState_Domain struct {
	DomainType           *DomainFaultToleranceState_Domain_DomainType  `protobuf:"varint,1,opt,name=domain_type,json=domainType,enum=nutanix.zeus.DomainFaultToleranceState_Domain_DomainType" json:"domain_type,omitempty"`
	Components           []*DomainFaultToleranceState_Domain_Component `protobuf:"bytes,2,rep,name=components" json:"components,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *DomainFaultToleranceState_Domain) Reset()         { *m = DomainFaultToleranceState_Domain{} }
func (m *DomainFaultToleranceState_Domain) String() string { return proto.CompactTextString(m) }
func (*DomainFaultToleranceState_Domain) ProtoMessage()    {}
func (*DomainFaultToleranceState_Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_9524867718b4c1c1, []int{0, 0}
}

func (m *DomainFaultToleranceState_Domain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainFaultToleranceState_Domain.Unmarshal(m, b)
}
func (m *DomainFaultToleranceState_Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainFaultToleranceState_Domain.Marshal(b, m, deterministic)
}
func (m *DomainFaultToleranceState_Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainFaultToleranceState_Domain.Merge(m, src)
}
func (m *DomainFaultToleranceState_Domain) XXX_Size() int {
	return xxx_messageInfo_DomainFaultToleranceState_Domain.Size(m)
}
func (m *DomainFaultToleranceState_Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainFaultToleranceState_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_DomainFaultToleranceState_Domain proto.InternalMessageInfo

func (m *DomainFaultToleranceState_Domain) GetDomainType() DomainFaultToleranceState_Domain_DomainType {
	if m != nil && m.DomainType != nil {
		return *m.DomainType
	}
	return DomainFaultToleranceState_Domain_kUnknown
}

func (m *DomainFaultToleranceState_Domain) GetComponents() []*DomainFaultToleranceState_Domain_Component {
	if m != nil {
		return m.Components
	}
	return nil
}

// Status of each component that can affect this domain's fault
// tolerance state.
type DomainFaultToleranceState_Domain_Component struct {
	ComponentType *DomainFaultToleranceState_Domain_Component_ComponentType `protobuf:"varint,1,opt,name=component_type,json=componentType,enum=nutanix.zeus.DomainFaultToleranceState_Domain_Component_ComponentType" json:"component_type,omitempty"`
	// Maximum number of domain units whose fault won't cause the
	// component to go down with the current data placement. The supported
	// range is: [0, Cluster's desired FT].
	MaxFaultsTolerated *int32 `protobuf:"varint,2,opt,name=max_faults_tolerated,json=maxFaultsTolerated" json:"max_faults_tolerated,omitempty"`
	// Absolute time in seconds when the component's fault tolerance
	// status was last updated.
	LastUpdateSecs *int64 `protobuf:"varint,4,opt,name=last_update_secs,json=lastUpdateSecs" json:"last_update_secs,omitempty"`
	// This message contains the text details of the component's domain
	// fault tolerance. This field will be set only if
	// max_failures_tolerated is less than the current_max_fault_tolerance,
	// where current_max_fault_tolerance is the current cluster wide fault
	// tolerance setting.
	ToleranceDetailsMessage *MessageEntity `protobuf:"bytes,5,opt,name=tolerance_details_message,json=toleranceDetailsMessage" json:"tolerance_details_message,omitempty"`
	// This field will be set when there has been a change in the cluster
	// such that the maximum fault tolerance cannot be immediately computed.
	// Once the maximum fault tolerance is computed, this field must be
	// cleared.
	UnderComputation     *bool    `protobuf:"varint,6,opt,name=under_computation,json=underComputation,def=0" json:"under_computation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainFaultToleranceState_Domain_Component) Reset() {
	*m = DomainFaultToleranceState_Domain_Component{}
}
func (m *DomainFaultToleranceState_Domain_Component) String() string {
	return proto.CompactTextString(m)
}
func (*DomainFaultToleranceState_Domain_Component) ProtoMessage() {}
func (*DomainFaultToleranceState_Domain_Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_9524867718b4c1c1, []int{0, 0, 0}
}

func (m *DomainFaultToleranceState_Domain_Component) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainFaultToleranceState_Domain_Component.Unmarshal(m, b)
}
func (m *DomainFaultToleranceState_Domain_Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainFaultToleranceState_Domain_Component.Marshal(b, m, deterministic)
}
func (m *DomainFaultToleranceState_Domain_Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainFaultToleranceState_Domain_Component.Merge(m, src)
}
func (m *DomainFaultToleranceState_Domain_Component) XXX_Size() int {
	return xxx_messageInfo_DomainFaultToleranceState_Domain_Component.Size(m)
}
func (m *DomainFaultToleranceState_Domain_Component) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainFaultToleranceState_Domain_Component.DiscardUnknown(m)
}

var xxx_messageInfo_DomainFaultToleranceState_Domain_Component proto.InternalMessageInfo

const Default_DomainFaultToleranceState_Domain_Component_UnderComputation bool = false

func (m *DomainFaultToleranceState_Domain_Component) GetComponentType() DomainFaultToleranceState_Domain_Component_ComponentType {
	if m != nil && m.ComponentType != nil {
		return *m.ComponentType
	}
	return DomainFaultToleranceState_Domain_Component_kUnknown
}

func (m *DomainFaultToleranceState_Domain_Component) GetMaxFaultsTolerated() int32 {
	if m != nil && m.MaxFaultsTolerated != nil {
		return *m.MaxFaultsTolerated
	}
	return 0
}

func (m *DomainFaultToleranceState_Domain_Component) GetLastUpdateSecs() int64 {
	if m != nil && m.LastUpdateSecs != nil {
		return *m.LastUpdateSecs
	}
	return 0
}

func (m *DomainFaultToleranceState_Domain_Component) GetToleranceDetailsMessage() *MessageEntity {
	if m != nil {
		return m.ToleranceDetailsMessage
	}
	return nil
}

func (m *DomainFaultToleranceState_Domain_Component) GetUnderComputation() bool {
	if m != nil && m.UnderComputation != nil {
		return *m.UnderComputation
	}
	return Default_DomainFaultToleranceState_Domain_Component_UnderComputation
}

func init() {
	proto.RegisterEnum("nutanix.zeus.DomainFaultToleranceState_Domain_DomainType", DomainFaultToleranceState_Domain_DomainType_name, DomainFaultToleranceState_Domain_DomainType_value)
	proto.RegisterEnum("nutanix.zeus.DomainFaultToleranceState_Domain_Component_ComponentType", DomainFaultToleranceState_Domain_Component_ComponentType_name, DomainFaultToleranceState_Domain_Component_ComponentType_value)
	proto.RegisterType((*DomainFaultToleranceState)(nil), "nutanix.zeus.DomainFaultToleranceState")
	proto.RegisterType((*DomainFaultToleranceState_Domain)(nil), "nutanix.zeus.DomainFaultToleranceState.Domain")
	proto.RegisterType((*DomainFaultToleranceState_Domain_Component)(nil), "nutanix.zeus.DomainFaultToleranceState.Domain.Component")
}

func init() {
	proto.RegisterFile("zeus/domain_fault_tolerance_state.proto", fileDescriptor_9524867718b4c1c1)
}

var fileDescriptor_9524867718b4c1c1 = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xc5, 0x79, 0x34, 0xe9, 0x4d, 0x13, 0xa6, 0xd3, 0xa2, 0x3a, 0xad, 0x84, 0xa2, 0x6e, 0xc8,
	0x2a, 0xa0, 0xac, 0x80, 0x5d, 0xeb, 0xb8, 0x94, 0x05, 0x50, 0x39, 0xa9, 0x40, 0xdd, 0x58, 0x53,
	0xfb, 0x26, 0x58, 0x63, 0xcf, 0x58, 0x9e, 0xb1, 0x48, 0xfb, 0x15, 0xf0, 0x19, 0x48, 0x6c, 0x90,
	0xf8, 0x08, 0x24, 0x7e, 0x84, 0xcf, 0x40, 0x9e, 0xbc, 0x2b, 0x75, 0x51, 0x56, 0x99, 0x9c, 0x73,
	0xcf, 0xb9, 0x73, 0xe6, 0x5e, 0x19, 0x9e, 0xdd, 0x62, 0xae, 0x9e, 0x87, 0x32, 0x61, 0x91, 0xf0,
	0xc7, 0x2c, 0x8f, 0xb5, 0xaf, 0x65, 0x8c, 0x19, 0x13, 0x01, 0xfa, 0x4a, 0x33, 0x8d, 0xbd, 0x34,
	0x93, 0x5a, 0xd2, 0x1d, 0x91, 0x6b, 0x26, 0xa2, 0x69, 0xaf, 0x10, 0x1c, 0xb6, 0x8d, 0x2c, 0x41,
	0xa5, 0xd8, 0x04, 0x7d, 0x14, 0x3a, 0xd2, 0x37, 0xb3, 0xc2, 0xe3, 0x6f, 0x75, 0x68, 0x0f, 0x8c,
	0xdf, 0x59, 0x61, 0x37, 0x5a, 0xb8, 0x0d, 0x0b, 0x33, 0x7a, 0x0e, 0xb5, 0x59, 0x33, 0x65, 0x5b,
	0x9d, 0x72, 0xb7, 0xd1, 0xef, 0xf5, 0xd6, 0x8d, 0x7b, 0xf7, 0x2a, 0xe7, 0x8c, 0xb7, 0x90, 0x1f,
	0x7e, 0xaf, 0xc1, 0xd6, 0x0c, 0xa3, 0x57, 0xd0, 0x98, 0x27, 0xd0, 0x37, 0x29, 0xda, 0x56, 0xc7,
	0xea, 0xb6, 0xfa, 0xaf, 0x1e, 0x66, 0x3c, 0xff, 0x19, 0xdd, 0xa4, 0xe8, 0x41, 0xb8, 0x3c, 0xd3,
	0x4f, 0x00, 0x81, 0x4c, 0x52, 0x29, 0x50, 0x68, 0x65, 0x97, 0xcc, 0x9d, 0x5f, 0x3e, 0xd0, 0xda,
	0x59, 0x18, 0x78, 0x6b, 0x5e, 0x87, 0x3f, 0x2b, 0xb0, 0xbd, 0x64, 0x68, 0x02, 0xad, 0x25, 0xb7,
	0x1e, 0xe3, 0xec, 0x7f, 0x7b, 0xad, 0x4e, 0x26, 0x53, 0x33, 0x58, 0xff, 0x4b, 0x5f, 0xc0, 0x7e,
	0xc2, 0xa6, 0xb3, 0x89, 0xab, 0xf9, 0xc8, 0x35, 0x86, 0x76, 0xa9, 0x63, 0x75, 0xab, 0x1e, 0x4d,
	0xd8, 0xd4, 0xf4, 0x50, 0xa3, 0x05, 0x43, 0xbb, 0x40, 0x62, 0xa6, 0xb4, 0x9f, 0xa7, 0x21, 0xd3,
	0xe8, 0x2b, 0x0c, 0x94, 0x5d, 0xe9, 0x58, 0xdd, 0xb2, 0xd7, 0x2a, 0xf0, 0x4b, 0x03, 0x0f, 0x31,
	0x50, 0xf4, 0x23, 0xb4, 0x57, 0x3b, 0x14, 0xa2, 0x66, 0x51, 0xac, 0xfc, 0xf9, 0xae, 0xd8, 0xd5,
	0x8e, 0xd5, 0x6d, 0xf4, 0x8f, 0x36, 0x53, 0xbd, 0x9b, 0x91, 0xae, 0xd9, 0x23, 0xef, 0x60, 0xa9,
	0x1e, 0xcc, 0xc4, 0x73, 0x9a, 0xf6, 0x61, 0x37, 0x17, 0x21, 0x66, 0x7e, 0x91, 0x25, 0xd7, 0x4c,
	0x47, 0x52, 0xd8, 0x5b, 0x1d, 0xab, 0x5b, 0x7f, 0x5d, 0x1d, 0xb3, 0x58, 0xa1, 0x47, 0x0c, 0xef,
	0xac, 0xe8, 0xe3, 0x3f, 0x16, 0x34, 0x37, 0x5e, 0x82, 0xee, 0x40, 0x9d, 0x5f, 0x0a, 0x2e, 0xe4,
	0x17, 0x41, 0x1e, 0x51, 0x1b, 0xf6, 0xb9, 0x3b, 0xd5, 0x28, 0xf4, 0x9b, 0x4c, 0xe6, 0xa9, 0x87,
	0x69, 0x1c, 0x05, 0x4c, 0x11, 0x8b, 0x52, 0x68, 0xf1, 0x0f, 0x69, 0x2c, 0x27, 0x6e, 0x1a, 0x29,
	0x19, 0xa2, 0x22, 0x25, 0x83, 0x39, 0x4c, 0x29, 0x26, 0xc2, 0x8c, 0x79, 0x91, 0x98, 0x90, 0x32,
	0x3d, 0x80, 0x3d, 0x7e, 0x25, 0x25, 0x47, 0x4c, 0x31, 0x7b, 0x2b, 0x94, 0x2e, 0x6e, 0xae, 0x48,
	0x85, 0xb6, 0x00, 0xf8, 0x59, 0x86, 0x38, 0x4c, 0x59, 0x80, 0xa4, 0x4a, 0x77, 0xa1, 0xc9, 0x8b,
	0x59, 0x45, 0x81, 0x23, 0xc5, 0x38, 0x9a, 0x90, 0x2d, 0xda, 0x86, 0x27, 0xdc, 0xcd, 0x98, 0xca,
	0x33, 0x74, 0x64, 0x88, 0x43, 0x9d, 0x45, 0xe9, 0x30, 0xba, 0x45, 0x52, 0xa3, 0x7b, 0xf0, 0xb8,
	0xa8, 0xce, 0x26, 0x4c, 0xe3, 0x39, 0xb2, 0x58, 0x7f, 0x26, 0xf5, 0xe3, 0x5f, 0x16, 0xc0, 0x6a,
	0x51, 0xef, 0x44, 0x39, 0x82, 0x03, 0x3e, 0x70, 0x2f, 0x3c, 0xd7, 0x39, 0x19, 0xb9, 0x03, 0x8f,
	0x05, 0x9c, 0x5d, 0xc7, 0x78, 0x29, 0x22, 0x4d, 0x2c, 0x63, 0xb7, 0x22, 0xdf, 0xcb, 0x10, 0x49,
	0xe9, 0x0e, 0x38, 0x88, 0x14, 0x27, 0x65, 0xda, 0x80, 0x1a, 0x77, 0x72, 0xa5, 0x65, 0x42, 0xaa,
	0x74, 0x1b, 0xaa, 0xdc, 0xe0, 0x21, 0x05, 0xa8, 0x72, 0xa3, 0xfb, 0x5d, 0xbc, 0x4d, 0x93, 0x6f,
	0x34, 0xf8, 0x51, 0x32, 0x7c, 0x81, 0x91, 0xaf, 0x65, 0xda, 0x84, 0x3a, 0x77, 0xe2, 0x5c, 0x69,
	0xcc, 0xc8, 0xdf, 0xda, 0xe9, 0x09, 0xb4, 0x03, 0x99, 0x6c, 0xce, 0xdc, 0x7c, 0x2d, 0xae, 0xf3,
	0xf1, 0xe9, 0xd3, 0x7b, 0x77, 0xfa, 0xa2, 0x28, 0xb9, 0xaa, 0x14, 0xe5, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x1f, 0xf5, 0xad, 0xbe, 0xa9, 0x04, 0x00, 0x00,
}
