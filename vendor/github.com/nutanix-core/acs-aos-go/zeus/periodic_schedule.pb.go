// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zeus/periodic_schedule.proto

package zeus

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PeriodicScheduleConfig_PeriodicScheduleMonth int32

const (
	PeriodicScheduleConfig_kAnyMonth  PeriodicScheduleConfig_PeriodicScheduleMonth = -1
	PeriodicScheduleConfig_kJanuary   PeriodicScheduleConfig_PeriodicScheduleMonth = 1
	PeriodicScheduleConfig_kFebruary  PeriodicScheduleConfig_PeriodicScheduleMonth = 2
	PeriodicScheduleConfig_kMarch     PeriodicScheduleConfig_PeriodicScheduleMonth = 3
	PeriodicScheduleConfig_kApril     PeriodicScheduleConfig_PeriodicScheduleMonth = 4
	PeriodicScheduleConfig_kMay       PeriodicScheduleConfig_PeriodicScheduleMonth = 5
	PeriodicScheduleConfig_kJune      PeriodicScheduleConfig_PeriodicScheduleMonth = 6
	PeriodicScheduleConfig_kJuly      PeriodicScheduleConfig_PeriodicScheduleMonth = 7
	PeriodicScheduleConfig_kAugust    PeriodicScheduleConfig_PeriodicScheduleMonth = 8
	PeriodicScheduleConfig_kSeptember PeriodicScheduleConfig_PeriodicScheduleMonth = 9
	PeriodicScheduleConfig_kOctober   PeriodicScheduleConfig_PeriodicScheduleMonth = 10
	PeriodicScheduleConfig_kNovember  PeriodicScheduleConfig_PeriodicScheduleMonth = 11
	PeriodicScheduleConfig_kDecember  PeriodicScheduleConfig_PeriodicScheduleMonth = 12
)

var PeriodicScheduleConfig_PeriodicScheduleMonth_name = map[int32]string{
	-1: "kAnyMonth",
	1:  "kJanuary",
	2:  "kFebruary",
	3:  "kMarch",
	4:  "kApril",
	5:  "kMay",
	6:  "kJune",
	7:  "kJuly",
	8:  "kAugust",
	9:  "kSeptember",
	10: "kOctober",
	11: "kNovember",
	12: "kDecember",
}

var PeriodicScheduleConfig_PeriodicScheduleMonth_value = map[string]int32{
	"kAnyMonth":  -1,
	"kJanuary":   1,
	"kFebruary":  2,
	"kMarch":     3,
	"kApril":     4,
	"kMay":       5,
	"kJune":      6,
	"kJuly":      7,
	"kAugust":    8,
	"kSeptember": 9,
	"kOctober":   10,
	"kNovember":  11,
	"kDecember":  12,
}

func (x PeriodicScheduleConfig_PeriodicScheduleMonth) Enum() *PeriodicScheduleConfig_PeriodicScheduleMonth {
	p := new(PeriodicScheduleConfig_PeriodicScheduleMonth)
	*p = x
	return p
}

func (x PeriodicScheduleConfig_PeriodicScheduleMonth) String() string {
	return proto.EnumName(PeriodicScheduleConfig_PeriodicScheduleMonth_name, int32(x))
}

func (x *PeriodicScheduleConfig_PeriodicScheduleMonth) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeriodicScheduleConfig_PeriodicScheduleMonth_value, data, "PeriodicScheduleConfig_PeriodicScheduleMonth")
	if err != nil {
		return err
	}
	*x = PeriodicScheduleConfig_PeriodicScheduleMonth(value)
	return nil
}

func (PeriodicScheduleConfig_PeriodicScheduleMonth) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_927e36214e543e69, []int{0, 0}
}

type PeriodicScheduleConfig_PeriodicScheduleDayOfWeek int32

const (
	PeriodicScheduleConfig_kAnyDayOfWeek PeriodicScheduleConfig_PeriodicScheduleDayOfWeek = -1
	PeriodicScheduleConfig_kSunday       PeriodicScheduleConfig_PeriodicScheduleDayOfWeek = 0
	PeriodicScheduleConfig_kMonday       PeriodicScheduleConfig_PeriodicScheduleDayOfWeek = 1
	PeriodicScheduleConfig_kTuesday      PeriodicScheduleConfig_PeriodicScheduleDayOfWeek = 2
	PeriodicScheduleConfig_kWednesday    PeriodicScheduleConfig_PeriodicScheduleDayOfWeek = 3
	PeriodicScheduleConfig_kThursday     PeriodicScheduleConfig_PeriodicScheduleDayOfWeek = 4
	PeriodicScheduleConfig_kFriday       PeriodicScheduleConfig_PeriodicScheduleDayOfWeek = 5
	PeriodicScheduleConfig_kSaturday     PeriodicScheduleConfig_PeriodicScheduleDayOfWeek = 6
)

var PeriodicScheduleConfig_PeriodicScheduleDayOfWeek_name = map[int32]string{
	-1: "kAnyDayOfWeek",
	0:  "kSunday",
	1:  "kMonday",
	2:  "kTuesday",
	3:  "kWednesday",
	4:  "kThursday",
	5:  "kFriday",
	6:  "kSaturday",
}

var PeriodicScheduleConfig_PeriodicScheduleDayOfWeek_value = map[string]int32{
	"kAnyDayOfWeek": -1,
	"kSunday":       0,
	"kMonday":       1,
	"kTuesday":      2,
	"kWednesday":    3,
	"kThursday":     4,
	"kFriday":       5,
	"kSaturday":     6,
}

func (x PeriodicScheduleConfig_PeriodicScheduleDayOfWeek) Enum() *PeriodicScheduleConfig_PeriodicScheduleDayOfWeek {
	p := new(PeriodicScheduleConfig_PeriodicScheduleDayOfWeek)
	*p = x
	return p
}

func (x PeriodicScheduleConfig_PeriodicScheduleDayOfWeek) String() string {
	return proto.EnumName(PeriodicScheduleConfig_PeriodicScheduleDayOfWeek_name, int32(x))
}

func (x *PeriodicScheduleConfig_PeriodicScheduleDayOfWeek) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeriodicScheduleConfig_PeriodicScheduleDayOfWeek_value, data, "PeriodicScheduleConfig_PeriodicScheduleDayOfWeek")
	if err != nil {
		return err
	}
	*x = PeriodicScheduleConfig_PeriodicScheduleDayOfWeek(value)
	return nil
}

func (PeriodicScheduleConfig_PeriodicScheduleDayOfWeek) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_927e36214e543e69, []int{0, 1}
}

type PeriodicScheduleConfig struct {
	// A periodic schedule configuration is an union (logical OR) of
	// one or more different scheduling policies.
	SchedPolicy          []*PeriodicScheduleConfig_PeriodicSchedulePolicy `protobuf:"bytes,1,rep,name=sched_policy,json=schedPolicy" json:"sched_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *PeriodicScheduleConfig) Reset()         { *m = PeriodicScheduleConfig{} }
func (m *PeriodicScheduleConfig) String() string { return proto.CompactTextString(m) }
func (*PeriodicScheduleConfig) ProtoMessage()    {}
func (*PeriodicScheduleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_927e36214e543e69, []int{0}
}

func (m *PeriodicScheduleConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodicScheduleConfig.Unmarshal(m, b)
}
func (m *PeriodicScheduleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodicScheduleConfig.Marshal(b, m, deterministic)
}
func (m *PeriodicScheduleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicScheduleConfig.Merge(m, src)
}
func (m *PeriodicScheduleConfig) XXX_Size() int {
	return xxx_messageInfo_PeriodicScheduleConfig.Size(m)
}
func (m *PeriodicScheduleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicScheduleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicScheduleConfig proto.InternalMessageInfo

func (m *PeriodicScheduleConfig) GetSchedPolicy() []*PeriodicScheduleConfig_PeriodicSchedulePolicy {
	if m != nil {
		return m.SchedPolicy
	}
	return nil
}

// NOTE: In the following, the elements in the repeated fields named
// "month" and "day_of_month" must be
//  (a) sorted in ascending order, and
//  (b) unique.
// This message results in generating all pairs of (month, day-of-month).
type PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth struct {
	// Specify one or more month(s).
	// Leave empty to represent "any" month of the year.
	Month []PeriodicScheduleConfig_PeriodicScheduleMonth `protobuf:"varint,1,rep,name=month,enum=nutanix.zeus.PeriodicScheduleConfig_PeriodicScheduleMonth" json:"month,omitempty"`
	// Specify one or more days of a month in the range [1, 31].
	// Leave empty to represent "any" day of the month.
	DayOfMonth           []int32  `protobuf:"varint,2,rep,name=day_of_month,json=dayOfMonth" json:"day_of_month,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth) Reset() {
	*m = PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth{}
}
func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth) String() string {
	return proto.CompactTextString(m)
}
func (*PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth) ProtoMessage() {}
func (*PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth) Descriptor() ([]byte, []int) {
	return fileDescriptor_927e36214e543e69, []int{0, 0}
}

func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth.Unmarshal(m, b)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth.Marshal(b, m, deterministic)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth.Merge(m, src)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth) XXX_Size() int {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth.Size(m)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth proto.InternalMessageInfo

func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth) GetMonth() []PeriodicScheduleConfig_PeriodicScheduleMonth {
	if m != nil {
		return m.Month
	}
	return nil
}

func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth) GetDayOfMonth() []int32 {
	if m != nil {
		return m.DayOfMonth
	}
	return nil
}

// NOTE: In the following, the elements in the repeated fields named
// "day_of_week", must be
//  (a) sorted in ascending order, and
//  (b) unique.
type PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek struct {
	// Specify one or more days of a week.
	DayOfWeek            []PeriodicScheduleConfig_PeriodicScheduleDayOfWeek `protobuf:"varint,1,rep,name=day_of_week,json=dayOfWeek,enum=nutanix.zeus.PeriodicScheduleConfig_PeriodicScheduleDayOfWeek" json:"day_of_week,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek) Reset() {
	*m = PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek{}
}
func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek) String() string {
	return proto.CompactTextString(m)
}
func (*PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek) ProtoMessage() {}
func (*PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek) Descriptor() ([]byte, []int) {
	return fileDescriptor_927e36214e543e69, []int{0, 1}
}

func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek.Unmarshal(m, b)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek.Marshal(b, m, deterministic)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek.Merge(m, src)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek) XXX_Size() int {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek.Size(m)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek proto.InternalMessageInfo

func (m *PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek) GetDayOfWeek() []PeriodicScheduleConfig_PeriodicScheduleDayOfWeek {
	if m != nil {
		return m.DayOfWeek
	}
	return nil
}

// Model the day(s) and the time window(s) within which to apply a schedule.
// If *both* 'sched_month' and 'sched_week' are non-empty, then
// this message results in generating all pairs of them.
// Example:
//    sched_month.month = {kMarch, kJune}
//    sched_month.day_of_month = {1, 16, 31}
//    sched_week.day_of_week = {kFri, kSat}
// Result (count = 2 * 3 * 2 = 12):
//    kMarch, 1, kFri
//    kMarch, 1, kSat
//    kMarch, 16, kFri
//    kMarch, 16, kSat
//    kMarch, 31, kFri
//    kMarch, 31, kSat
//    kJune, 1, kFri
//    kJune, 1, kSat
//    kJune, 16, kFri
//    kJune, 16, kSat
//    kJune, 31, kFri
//    kJune, 31, kSat
// NOTE: A particular combination may or may not be a valid date,
// and is outside the scope of this message.
type PeriodicScheduleConfig_PeriodicScheduleDayConfig struct {
	// Choose day(s) as numbered day(s) of month(s).
	// Either 'sched_month' or 'sched_week' must be present as required field.
	SchedMonth *PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth `protobuf:"bytes,1,opt,name=sched_month,json=schedMonth" json:"sched_month,omitempty"`
	// Choose day(s) as specific day(s) of a week.
	// Either 'sched_month' or 'sched_week' must be present as required field.
	SchedWeek *PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek `protobuf:"bytes,2,opt,name=sched_week,json=schedWeek" json:"sched_week,omitempty"`
	// For a selected day, there could be one or more windows.
	// This is a required field.
	DayWindow            []*PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow `protobuf:"bytes,3,rep,name=day_window,json=dayWindow" json:"day_window,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                      `json:"-"`
	XXX_unrecognized     []byte                                                                        `json:"-"`
	XXX_sizecache        int32                                                                         `json:"-"`
}

func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig) Reset() {
	*m = PeriodicScheduleConfig_PeriodicScheduleDayConfig{}
}
func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig) String() string {
	return proto.CompactTextString(m)
}
func (*PeriodicScheduleConfig_PeriodicScheduleDayConfig) ProtoMessage() {}
func (*PeriodicScheduleConfig_PeriodicScheduleDayConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_927e36214e543e69, []int{0, 2}
}

func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig.Unmarshal(m, b)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig.Marshal(b, m, deterministic)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig.Merge(m, src)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig) XXX_Size() int {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig.Size(m)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig proto.InternalMessageInfo

func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig) GetSchedMonth() *PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth {
	if m != nil {
		return m.SchedMonth
	}
	return nil
}

func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig) GetSchedWeek() *PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek {
	if m != nil {
		return m.SchedWeek
	}
	return nil
}

func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig) GetDayWindow() []*PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow {
	if m != nil {
		return m.DayWindow
	}
	return nil
}

// For a specific day, model the start time and the duration window.
type PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow struct {
	// Start time on a selected day; this is the number of seconds
	// from previous midnight. It is a required field.
	// The valid range is [0, 86400).
	StartTimeSecs *int32 `protobuf:"varint,1,opt,name=start_time_secs,json=startTimeSecs,def=0" json:"start_time_secs,omitempty"`
	// Duration of the window from start time. It is a required field.
	// The valid range is [0, 86400).
	DurationSecs         *int32   `protobuf:"varint,2,opt,name=duration_secs,json=durationSecs,def=0" json:"duration_secs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow) Reset() {
	*m = PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow{}
}
func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow) String() string {
	return proto.CompactTextString(m)
}
func (*PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow) ProtoMessage() {}
func (*PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow) Descriptor() ([]byte, []int) {
	return fileDescriptor_927e36214e543e69, []int{0, 2, 0}
}

func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow.Unmarshal(m, b)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow.Marshal(b, m, deterministic)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow.Merge(m, src)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow) XXX_Size() int {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow.Size(m)
}
func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow proto.InternalMessageInfo

const Default_PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow_StartTimeSecs int32 = 0
const Default_PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow_DurationSecs int32 = 0

func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow) GetStartTimeSecs() int32 {
	if m != nil && m.StartTimeSecs != nil {
		return *m.StartTimeSecs
	}
	return Default_PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow_StartTimeSecs
}

func (m *PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow) GetDurationSecs() int32 {
	if m != nil && m.DurationSecs != nil {
		return *m.DurationSecs
	}
	return Default_PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow_DurationSecs
}

type PeriodicScheduleConfig_PeriodicSchedulePolicy struct {
	// The (short) name of this scheduling policy. This is a required field.
	SchedName *string `protobuf:"bytes,1,opt,name=sched_name,json=schedName" json:"sched_name,omitempty"`
	// The (possibly long) description of this scheduling policy.
	SchedDescription *string `protobuf:"bytes,2,opt,name=sched_description,json=schedDescription" json:"sched_description,omitempty"`
	// The time instance when this scheduling policy is activated.
	// If unspecified, then it is treated as 0, i.e. already activated.
	SchedActivationSecs *int64 `protobuf:"varint,3,opt,name=sched_activation_secs,json=schedActivationSecs" json:"sched_activation_secs,omitempty"`
	// The time instance when this scheduling policy is deactivated.
	// If unspecified, then it is treated as kInt64Max, i.e. never expiring.
	SchedExpirationSecs *int64 `protobuf:"varint,4,opt,name=sched_expiration_secs,json=schedExpirationSecs" json:"sched_expiration_secs,omitempty"`
	// The configuration for selecting a day and windows therein
	// for this scheduling policy. This is a required field.
	SchedDayConfig       *PeriodicScheduleConfig_PeriodicScheduleDayConfig `protobuf:"bytes,5,opt,name=sched_day_config,json=schedDayConfig" json:"sched_day_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) Reset() {
	*m = PeriodicScheduleConfig_PeriodicSchedulePolicy{}
}
func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) String() string {
	return proto.CompactTextString(m)
}
func (*PeriodicScheduleConfig_PeriodicSchedulePolicy) ProtoMessage() {}
func (*PeriodicScheduleConfig_PeriodicSchedulePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_927e36214e543e69, []int{0, 3}
}

func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicSchedulePolicy.Unmarshal(m, b)
}
func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicSchedulePolicy.Marshal(b, m, deterministic)
}
func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicScheduleConfig_PeriodicSchedulePolicy.Merge(m, src)
}
func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) XXX_Size() int {
	return xxx_messageInfo_PeriodicScheduleConfig_PeriodicSchedulePolicy.Size(m)
}
func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicScheduleConfig_PeriodicSchedulePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicScheduleConfig_PeriodicSchedulePolicy proto.InternalMessageInfo

func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) GetSchedName() string {
	if m != nil && m.SchedName != nil {
		return *m.SchedName
	}
	return ""
}

func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) GetSchedDescription() string {
	if m != nil && m.SchedDescription != nil {
		return *m.SchedDescription
	}
	return ""
}

func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) GetSchedActivationSecs() int64 {
	if m != nil && m.SchedActivationSecs != nil {
		return *m.SchedActivationSecs
	}
	return 0
}

func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) GetSchedExpirationSecs() int64 {
	if m != nil && m.SchedExpirationSecs != nil {
		return *m.SchedExpirationSecs
	}
	return 0
}

func (m *PeriodicScheduleConfig_PeriodicSchedulePolicy) GetSchedDayConfig() *PeriodicScheduleConfig_PeriodicScheduleDayConfig {
	if m != nil {
		return m.SchedDayConfig
	}
	return nil
}

func init() {
	proto.RegisterEnum("nutanix.zeus.PeriodicScheduleConfig_PeriodicScheduleMonth", PeriodicScheduleConfig_PeriodicScheduleMonth_name, PeriodicScheduleConfig_PeriodicScheduleMonth_value)
	proto.RegisterEnum("nutanix.zeus.PeriodicScheduleConfig_PeriodicScheduleDayOfWeek", PeriodicScheduleConfig_PeriodicScheduleDayOfWeek_name, PeriodicScheduleConfig_PeriodicScheduleDayOfWeek_value)
	proto.RegisterType((*PeriodicScheduleConfig)(nil), "nutanix.zeus.PeriodicScheduleConfig")
	proto.RegisterType((*PeriodicScheduleConfig_PeriodicScheduleByDayOfMonth)(nil), "nutanix.zeus.PeriodicScheduleConfig.PeriodicScheduleByDayOfMonth")
	proto.RegisterType((*PeriodicScheduleConfig_PeriodicScheduleByDayOfWeek)(nil), "nutanix.zeus.PeriodicScheduleConfig.PeriodicScheduleByDayOfWeek")
	proto.RegisterType((*PeriodicScheduleConfig_PeriodicScheduleDayConfig)(nil), "nutanix.zeus.PeriodicScheduleConfig.PeriodicScheduleDayConfig")
	proto.RegisterType((*PeriodicScheduleConfig_PeriodicScheduleDayConfig_PeriodicScheduleDayWindow)(nil), "nutanix.zeus.PeriodicScheduleConfig.PeriodicScheduleDayConfig.PeriodicScheduleDayWindow")
	proto.RegisterType((*PeriodicScheduleConfig_PeriodicSchedulePolicy)(nil), "nutanix.zeus.PeriodicScheduleConfig.PeriodicSchedulePolicy")
}

func init() { proto.RegisterFile("zeus/periodic_schedule.proto", fileDescriptor_927e36214e543e69) }

var fileDescriptor_927e36214e543e69 = []byte{
	// 677 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0xfe, 0x39, 0x4e, 0x00, 0x8f, 0x13, 0x7e, 0xee, 0x56, 0x20, 0x08, 0x54, 0x8a, 0x38, 0x54,
	0xa9, 0x2a, 0xa5, 0x55, 0x8e, 0x54, 0x42, 0x0d, 0xa5, 0x1c, 0x90, 0x02, 0x91, 0x83, 0x44, 0xd5,
	0x03, 0xd6, 0xc6, 0xde, 0x90, 0x95, 0xe3, 0x3f, 0xb2, 0xbd, 0x04, 0x57, 0xea, 0x4b, 0xf4, 0xd8,
	0x07, 0xe9, 0x3b, 0xf4, 0xd0, 0x57, 0x6a, 0xab, 0x9d, 0xb5, 0xd3, 0xb4, 0x84, 0x4b, 0xe0, 0x34,
	0xdf, 0x7e, 0x33, 0xdf, 0xcc, 0x7c, 0xbb, 0x26, 0xb0, 0xff, 0x89, 0x89, 0xf4, 0x55, 0xcc, 0x12,
	0x1e, 0x79, 0xdc, 0x75, 0x52, 0x77, 0xc2, 0x3c, 0x31, 0x65, 0x9d, 0x38, 0x89, 0xb2, 0x88, 0xd4,
	0x43, 0x91, 0xd1, 0x90, 0xdf, 0x75, 0x64, 0xd6, 0xc1, 0x4f, 0x13, 0xb6, 0x07, 0x45, 0xe6, 0xb0,
	0x48, 0x7c, 0x17, 0x85, 0x63, 0x7e, 0x43, 0xae, 0xa1, 0x8e, 0xa5, 0x4e, 0x1c, 0x4d, 0xb9, 0x9b,
	0xef, 0x68, 0x2d, 0xbd, 0x6d, 0x76, 0xdf, 0x74, 0x16, 0xeb, 0x3b, 0xcb, 0x6b, 0xef, 0x1d, 0x0f,
	0x50, 0xc2, 0x36, 0x51, 0x50, 0x81, 0xe6, 0x17, 0x0d, 0xf6, 0xff, 0xcd, 0x3b, 0xce, 0x4f, 0x68,
	0x7e, 0x31, 0xee, 0x47, 0x61, 0x36, 0x21, 0x03, 0xa8, 0x05, 0x32, 0xc0, 0xce, 0x9b, 0xdd, 0xc3,
	0x95, 0x3a, 0xa3, 0x94, 0xad, 0x84, 0x48, 0x0b, 0xea, 0x1e, 0xcd, 0x9d, 0x68, 0xec, 0x28, 0xe1,
	0x4a, 0x4b, 0x6f, 0xd7, 0x6c, 0xf0, 0xe6, 0x3d, 0x9b, 0x9f, 0x61, 0xef, 0x81, 0x99, 0xae, 0x18,
	0xf3, 0xc9, 0x35, 0x98, 0x85, 0xc0, 0x8c, 0x31, 0xbf, 0x18, 0xec, 0x68, 0xa5, 0xc1, 0xe6, 0xa2,
	0xb6, 0xe1, 0x95, 0x61, 0xf3, 0xbb, 0x0e, 0xbb, 0x4b, 0x12, 0x8b, 0x1b, 0x19, 0x81, 0x32, 0xd0,
	0x29, 0x6d, 0xd1, 0xda, 0x66, 0xb7, 0xb7, 0x52, 0xf7, 0x45, 0xa3, 0x6d, 0x40, 0x55, 0x65, 0xba,
	0x03, 0x0a, 0xa9, 0x05, 0x2b, 0xd8, 0xe2, 0xed, 0x63, 0x5a, 0xa8, 0x15, 0x51, 0x13, 0x2d, 0x9c,
	0x81, 0xf4, 0xdb, 0x99, 0xf1, 0xd0, 0x8b, 0x66, 0x3b, 0x3a, 0x3e, 0xaa, 0x0f, 0xab, 0x3a, 0xf8,
	0x30, 0x73, 0x85, 0xfa, 0xe8, 0xad, 0x0a, 0x9b, 0xe1, 0x52, 0x6b, 0x15, 0x49, 0x5e, 0xc0, 0xff,
	0x69, 0x46, 0x93, 0xcc, 0xc9, 0x78, 0xc0, 0x9c, 0x94, 0xb9, 0x29, 0xda, 0x5b, 0x3b, 0xd4, 0x5e,
	0xdb, 0x0d, 0x64, 0x2e, 0x79, 0xc0, 0x86, 0xcc, 0x4d, 0xc9, 0x73, 0x68, 0x78, 0x22, 0xa1, 0x19,
	0x8f, 0x42, 0x95, 0x58, 0x29, 0x13, 0xeb, 0xe5, 0xb9, 0xcc, 0x6b, 0x7e, 0xab, 0xdc, 0xff, 0xb4,
	0xd4, 0xd3, 0x27, 0xcf, 0x4a, 0x93, 0x43, 0x1a, 0x30, 0x6c, 0x64, 0x14, 0x16, 0x9d, 0xd3, 0x80,
	0x91, 0x97, 0xf0, 0x44, 0xd1, 0x1e, 0x4b, 0xdd, 0x84, 0xc7, 0x52, 0x12, 0xbb, 0x18, 0xb6, 0x85,
	0xc4, 0xc9, 0x9f, 0x73, 0xd2, 0x85, 0x2d, 0x95, 0x4c, 0xdd, 0x8c, 0xdf, 0x2e, 0x8c, 0xa5, 0xb7,
	0xb4, 0xb6, 0x6e, 0x3f, 0x45, 0xb2, 0x37, 0xe7, 0x70, 0x85, 0x79, 0x0d, 0xbb, 0x8b, 0xf9, 0xe2,
	0x2a, 0xd5, 0x85, 0x9a, 0xf7, 0x73, 0x0e, 0x6b, 0x26, 0x60, 0x15, 0x43, 0xd1, 0xdc, 0x71, 0xd1,
	0xf7, 0x9d, 0x1a, 0x3e, 0x8f, 0xa3, 0xc7, 0xdd, 0x9e, 0xbd, 0xa9, 0x76, 0x2a, 0xf1, 0xc1, 0x0f,
	0x0d, 0xb6, 0x96, 0x7e, 0xc6, 0x64, 0x1b, 0x0c, 0xbf, 0x17, 0xe6, 0x08, 0xac, 0x5f, 0xe5, 0x9f,
	0x46, 0xea, 0xb0, 0xe1, 0x9f, 0xd1, 0x50, 0xd0, 0x24, 0xb7, 0x34, 0xd2, 0x00, 0xc3, 0x3f, 0x65,
	0xa3, 0x04, 0x61, 0x85, 0x00, 0xac, 0xf9, 0x7d, 0x9a, 0xb8, 0x13, 0x4b, 0xc7, 0xb8, 0x17, 0x27,
	0x7c, 0x6a, 0x55, 0xc9, 0x06, 0x54, 0xfd, 0x3e, 0xcd, 0xad, 0x1a, 0x31, 0xa0, 0xe6, 0x9f, 0x89,
	0x90, 0x59, 0x6b, 0x45, 0x38, 0xcd, 0xad, 0x75, 0x62, 0xc2, 0xba, 0xdf, 0x13, 0x37, 0x22, 0xcd,
	0xac, 0x0d, 0xb2, 0x09, 0xe0, 0x0f, 0x59, 0x9c, 0xb1, 0x60, 0xc4, 0x12, 0xcb, 0xc0, 0x8e, 0x17,
	0x6e, 0x16, 0x49, 0x04, 0xd8, 0xf1, 0x3c, 0xba, 0x55, 0xa4, 0x89, 0xf0, 0x84, 0xb9, 0x0a, 0xd6,
	0x0f, 0xbe, 0x6a, 0x4b, 0x5f, 0x5e, 0xf1, 0x2f, 0xa5, 0x09, 0x0d, 0xb9, 0xd3, 0xfc, 0x60, 0x71,
	0x2f, 0x39, 0xc2, 0x50, 0x84, 0x1e, 0xcd, 0xad, 0xff, 0x10, 0xf4, 0x23, 0x04, 0x6a, 0xe3, 0x4b,
	0xc1, 0x52, 0x89, 0x2a, 0x38, 0xdd, 0x15, 0xf3, 0x42, 0x85, 0x75, 0x1c, 0xe0, 0x72, 0x22, 0x12,
	0x84, 0x55, 0xac, 0x3c, 0x4d, 0xb8, 0x87, 0xcb, 0x4a, 0x6e, 0x48, 0x33, 0x91, 0x48, 0xb8, 0x76,
	0x7c, 0x04, 0xbb, 0x6e, 0x14, 0xfc, 0x7d, 0x83, 0xf8, 0x43, 0x31, 0x12, 0xe3, 0xe3, 0xbd, 0xe5,
	0x77, 0x39, 0x90, 0xfc, 0xc7, 0xaa, 0xcc, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x72, 0x02, 0x58,
	0x9e, 0x6d, 0x06, 0x00, 0x00,
}
