// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zeus/cloud_store_info.proto

package zeus

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The type of backend cloud storage.
type CloudStoreType int32

const (
	CloudStoreType_kAmazonS3       CloudStoreType = 1
	CloudStoreType_kAzureBlobStore CloudStoreType = 2
)

var CloudStoreType_name = map[int32]string{
	1: "kAmazonS3",
	2: "kAzureBlobStore",
}

var CloudStoreType_value = map[string]int32{
	"kAmazonS3":       1,
	"kAzureBlobStore": 2,
}

func (x CloudStoreType) Enum() *CloudStoreType {
	p := new(CloudStoreType)
	*p = x
	return p
}

func (x CloudStoreType) String() string {
	return proto.EnumName(CloudStoreType_name, int32(x))
}

func (x *CloudStoreType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CloudStoreType_value, data, "CloudStoreType")
	if err != nil {
		return err
	}
	*x = CloudStoreType(value)
	return nil
}

func (CloudStoreType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{0}
}

// Type of cloud credential. AWS support only kService and Azure supports
// both type of credentials.
type CredentialType int32

const (
	CredentialType_kService CredentialType = 1
	CredentialType_kStorage CredentialType = 2
)

var CredentialType_name = map[int32]string{
	1: "kService",
	2: "kStorage",
}

var CredentialType_value = map[string]int32{
	"kService": 1,
	"kStorage": 2,
}

func (x CredentialType) Enum() *CredentialType {
	p := new(CredentialType)
	*p = x
	return p
}

func (x CredentialType) String() string {
	return proto.EnumName(CredentialType_name, int32(x))
}

func (x *CredentialType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CredentialType_value, data, "CredentialType")
	if err != nil {
		return err
	}
	*x = CredentialType(value)
	return nil
}

func (CredentialType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{1}
}

// Power state of a cloud instance.
type CloudInstancePowerState int32

const (
	CloudInstancePowerState_kStarting   CloudInstancePowerState = 1
	CloudInstancePowerState_kStarted    CloudInstancePowerState = 2
	CloudInstancePowerState_kRunning    CloudInstancePowerState = 3
	CloudInstancePowerState_kStopping   CloudInstancePowerState = 4
	CloudInstancePowerState_kStopped    CloudInstancePowerState = 5
	CloudInstancePowerState_kTerminated CloudInstancePowerState = 6
)

var CloudInstancePowerState_name = map[int32]string{
	1: "kStarting",
	2: "kStarted",
	3: "kRunning",
	4: "kStopping",
	5: "kStopped",
	6: "kTerminated",
}

var CloudInstancePowerState_value = map[string]int32{
	"kStarting":   1,
	"kStarted":    2,
	"kRunning":    3,
	"kStopping":   4,
	"kStopped":    5,
	"kTerminated": 6,
}

func (x CloudInstancePowerState) Enum() *CloudInstancePowerState {
	p := new(CloudInstancePowerState)
	*p = x
	return p
}

func (x CloudInstancePowerState) String() string {
	return proto.EnumName(CloudInstancePowerState_name, int32(x))
}

func (x *CloudInstancePowerState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CloudInstancePowerState_value, data, "CloudInstancePowerState")
	if err != nil {
		return err
	}
	*x = CloudInstancePowerState(value)
	return nil
}

func (CloudInstancePowerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{2}
}

// The enum values are defined as obscure names, e.g. 'kType1', so that no
// meaning can be derived from them. These enum values ('kType1' etc.) are
// shown if the configuration is printed using 'zeus_config_printer'.
type ObfuscatedString_ObfuscationType int32

const (
	// Store the data as plain text.
	ObfuscatedString_kType1 ObfuscatedString_ObfuscationType = 1
	// Store the data using the xor_crypt 'alerts/util/xor_crypt.h'.
	ObfuscatedString_kType2 ObfuscatedString_ObfuscationType = 2
)

var ObfuscatedString_ObfuscationType_name = map[int32]string{
	1: "kType1",
	2: "kType2",
}

var ObfuscatedString_ObfuscationType_value = map[string]int32{
	"kType1": 1,
	"kType2": 2,
}

func (x ObfuscatedString_ObfuscationType) Enum() *ObfuscatedString_ObfuscationType {
	p := new(ObfuscatedString_ObfuscationType)
	*p = x
	return p
}

func (x ObfuscatedString_ObfuscationType) String() string {
	return proto.EnumName(ObfuscatedString_ObfuscationType_name, int32(x))
}

func (x *ObfuscatedString_ObfuscationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ObfuscatedString_ObfuscationType_value, data, "ObfuscatedString_ObfuscationType")
	if err != nil {
		return err
	}
	*x = ObfuscatedString_ObfuscationType(value)
	return nil
}

func (ObfuscatedString_ObfuscationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{0, 0}
}

// The method used for accessing cloud storage. These methods may map to
// corresponding HTTP request methods internally , e.g. kRead may map to GET,
// when REST APIs are used for cloud access. Also, some methods may not be
// available with certain cloud storages, for e.g. kOverwrite is currently not
// available with Amazon S3.
type CloudStoreAccessLog_MethodType int32

const (
	CloudStoreAccessLog_kWrite     CloudStoreAccessLog_MethodType = 1
	CloudStoreAccessLog_kDelete    CloudStoreAccessLog_MethodType = 2
	CloudStoreAccessLog_kRead      CloudStoreAccessLog_MethodType = 3
	CloudStoreAccessLog_kQuery     CloudStoreAccessLog_MethodType = 4
	CloudStoreAccessLog_kOverwrite CloudStoreAccessLog_MethodType = 5
)

var CloudStoreAccessLog_MethodType_name = map[int32]string{
	1: "kWrite",
	2: "kDelete",
	3: "kRead",
	4: "kQuery",
	5: "kOverwrite",
}

var CloudStoreAccessLog_MethodType_value = map[string]int32{
	"kWrite":     1,
	"kDelete":    2,
	"kRead":      3,
	"kQuery":     4,
	"kOverwrite": 5,
}

func (x CloudStoreAccessLog_MethodType) Enum() *CloudStoreAccessLog_MethodType {
	p := new(CloudStoreAccessLog_MethodType)
	*p = x
	return p
}

func (x CloudStoreAccessLog_MethodType) String() string {
	return proto.EnumName(CloudStoreAccessLog_MethodType_name, int32(x))
}

func (x *CloudStoreAccessLog_MethodType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CloudStoreAccessLog_MethodType_value, data, "CloudStoreAccessLog_MethodType")
	if err != nil {
		return err
	}
	*x = CloudStoreAccessLog_MethodType(value)
	return nil
}

func (CloudStoreAccessLog_MethodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{1, 0}
}

// The type of cloud site.
type CloudSiteInfo_CloudSiteType int32

const (
	CloudSiteInfo_kAmazonWebServices CloudSiteInfo_CloudSiteType = 1
	CloudSiteInfo_kAzure             CloudSiteInfo_CloudSiteType = 2
)

var CloudSiteInfo_CloudSiteType_name = map[int32]string{
	1: "kAmazonWebServices",
	2: "kAzure",
}

var CloudSiteInfo_CloudSiteType_value = map[string]int32{
	"kAmazonWebServices": 1,
	"kAzure":             2,
}

func (x CloudSiteInfo_CloudSiteType) Enum() *CloudSiteInfo_CloudSiteType {
	p := new(CloudSiteInfo_CloudSiteType)
	*p = x
	return p
}

func (x CloudSiteInfo_CloudSiteType) String() string {
	return proto.EnumName(CloudSiteInfo_CloudSiteType_name, int32(x))
}

func (x *CloudSiteInfo_CloudSiteType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CloudSiteInfo_CloudSiteType_value, data, "CloudSiteInfo_CloudSiteType")
	if err != nil {
		return err
	}
	*x = CloudSiteInfo_CloudSiteType(value)
	return nil
}

func (CloudSiteInfo_CloudSiteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{3, 0}
}

// Store string variable with the specified obfuscation algorithm. Useful for
// storing user access credentials.
type ObfuscatedString struct {
	ObfuscatedString     *string                           `protobuf:"bytes,1,opt,name=obfuscated_string,json=obfuscatedString" json:"obfuscated_string,omitempty"`
	ObfuscationType      *ObfuscatedString_ObfuscationType `protobuf:"varint,2,opt,name=obfuscation_type,json=obfuscationType,enum=nutanix.zeus.ObfuscatedString_ObfuscationType" json:"obfuscation_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ObfuscatedString) Reset()         { *m = ObfuscatedString{} }
func (m *ObfuscatedString) String() string { return proto.CompactTextString(m) }
func (*ObfuscatedString) ProtoMessage()    {}
func (*ObfuscatedString) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{0}
}

func (m *ObfuscatedString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObfuscatedString.Unmarshal(m, b)
}
func (m *ObfuscatedString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObfuscatedString.Marshal(b, m, deterministic)
}
func (m *ObfuscatedString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObfuscatedString.Merge(m, src)
}
func (m *ObfuscatedString) XXX_Size() int {
	return xxx_messageInfo_ObfuscatedString.Size(m)
}
func (m *ObfuscatedString) XXX_DiscardUnknown() {
	xxx_messageInfo_ObfuscatedString.DiscardUnknown(m)
}

var xxx_messageInfo_ObfuscatedString proto.InternalMessageInfo

func (m *ObfuscatedString) GetObfuscatedString() string {
	if m != nil && m.ObfuscatedString != nil {
		return *m.ObfuscatedString
	}
	return ""
}

func (m *ObfuscatedString) GetObfuscationType() ObfuscatedString_ObfuscationType {
	if m != nil && m.ObfuscationType != nil {
		return *m.ObfuscationType
	}
	return ObfuscatedString_kType1
}

// Cloud store access log message in binary logger.
type CloudStoreAccessLog struct {
	// The type of backend cloud storage. This field is mandatory.
	CloudType *CloudStoreType `protobuf:"varint,1,opt,name=cloud_type,json=cloudType,enum=nutanix.zeus.CloudStoreType" json:"cloud_type,omitempty"`
	// The method used for accessing cloud storage. This field is mandatory.
	MethodType *CloudStoreAccessLog_MethodType `protobuf:"varint,2,opt,name=method_type,json=methodType,enum=nutanix.zeus.CloudStoreAccessLog_MethodType" json:"method_type,omitempty"`
	// The name or id of the cloud object which was accessed. This field is
	// mandatory.
	ObjectName *string `protobuf:"bytes,3,opt,name=object_name,json=objectName" json:"object_name,omitempty"`
	// The error number returned to the callback function of extent store. This
	// field is mandatory.
	Error *uint32 `protobuf:"varint,4,opt,name=error" json:"error,omitempty"`
	// Any numeric error code returned by the cloud access API.
	BackendErrorCode *uint32 `protobuf:"varint,5,opt,name=backend_error_code,json=backendErrorCode" json:"backend_error_code,omitempty"`
	// Any error response returned by the cloud access API, for e.g., S3 APIs
	// return a unique request id along with failure reason.
	ErrorDetail          *string  `protobuf:"bytes,6,opt,name=error_detail,json=errorDetail" json:"error_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudStoreAccessLog) Reset()         { *m = CloudStoreAccessLog{} }
func (m *CloudStoreAccessLog) String() string { return proto.CompactTextString(m) }
func (*CloudStoreAccessLog) ProtoMessage()    {}
func (*CloudStoreAccessLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{1}
}

func (m *CloudStoreAccessLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudStoreAccessLog.Unmarshal(m, b)
}
func (m *CloudStoreAccessLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudStoreAccessLog.Marshal(b, m, deterministic)
}
func (m *CloudStoreAccessLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudStoreAccessLog.Merge(m, src)
}
func (m *CloudStoreAccessLog) XXX_Size() int {
	return xxx_messageInfo_CloudStoreAccessLog.Size(m)
}
func (m *CloudStoreAccessLog) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudStoreAccessLog.DiscardUnknown(m)
}

var xxx_messageInfo_CloudStoreAccessLog proto.InternalMessageInfo

func (m *CloudStoreAccessLog) GetCloudType() CloudStoreType {
	if m != nil && m.CloudType != nil {
		return *m.CloudType
	}
	return CloudStoreType_kAmazonS3
}

func (m *CloudStoreAccessLog) GetMethodType() CloudStoreAccessLog_MethodType {
	if m != nil && m.MethodType != nil {
		return *m.MethodType
	}
	return CloudStoreAccessLog_kWrite
}

func (m *CloudStoreAccessLog) GetObjectName() string {
	if m != nil && m.ObjectName != nil {
		return *m.ObjectName
	}
	return ""
}

func (m *CloudStoreAccessLog) GetError() uint32 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return 0
}

func (m *CloudStoreAccessLog) GetBackendErrorCode() uint32 {
	if m != nil && m.BackendErrorCode != nil {
		return *m.BackendErrorCode
	}
	return 0
}

func (m *CloudStoreAccessLog) GetErrorDetail() string {
	if m != nil && m.ErrorDetail != nil {
		return *m.ErrorDetail
	}
	return ""
}

// Cloud storage configuration. This is exposed as a disk to the extent store.
type CloudStoreInfo struct {
	CloudType *CloudStoreType `protobuf:"varint,1,opt,name=cloud_type,json=cloudType,enum=nutanix.zeus.CloudStoreType" json:"cloud_type,omitempty"`
	// If true, use a secure transport layer (https) for tranferring data to
	// cloud, otherwise use unsecure transport layer (http).
	UseSecureTransport *bool `protobuf:"varint,2,opt,name=use_secure_transport,json=useSecureTransport,def=1" json:"use_secure_transport,omitempty"`
	// Configuration that identifies this disk, and used by the extent store
	// to talk to the backend storage. This will be set when the disk is
	// added to the cluster. If not set, the disk will not be accessible and
	// marked as offline. Only one type of configuration is set based on
	// 'CloudStoreType'.
	AmazonS3Config *CloudStoreInfo_AmazonS3Config `protobuf:"bytes,10,opt,name=amazon_s3_config,json=amazonS3Config" json:"amazon_s3_config,omitempty"`
	// Configuration that identifies this disk, and used by the extent store
	// to talk to the backend storage.
	AzureBlobstoreConfig *CloudStoreInfo_AzureBlobStoreConfig `protobuf:"bytes,11,opt,name=azure_blobstore_config,json=azureBlobstoreConfig" json:"azure_blobstore_config,omitempty"`
	// Common credential id across all cloud types to be used for fetching
	// cloud store credential. If not set, the disk will not be accessible and
	// marked as offline.
	CredentialId         *int64   `protobuf:"varint,12,opt,name=credential_id,json=credentialId" json:"credential_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudStoreInfo) Reset()         { *m = CloudStoreInfo{} }
func (m *CloudStoreInfo) String() string { return proto.CompactTextString(m) }
func (*CloudStoreInfo) ProtoMessage()    {}
func (*CloudStoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{2}
}

func (m *CloudStoreInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudStoreInfo.Unmarshal(m, b)
}
func (m *CloudStoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudStoreInfo.Marshal(b, m, deterministic)
}
func (m *CloudStoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudStoreInfo.Merge(m, src)
}
func (m *CloudStoreInfo) XXX_Size() int {
	return xxx_messageInfo_CloudStoreInfo.Size(m)
}
func (m *CloudStoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudStoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CloudStoreInfo proto.InternalMessageInfo

const Default_CloudStoreInfo_UseSecureTransport bool = true

func (m *CloudStoreInfo) GetCloudType() CloudStoreType {
	if m != nil && m.CloudType != nil {
		return *m.CloudType
	}
	return CloudStoreType_kAmazonS3
}

func (m *CloudStoreInfo) GetUseSecureTransport() bool {
	if m != nil && m.UseSecureTransport != nil {
		return *m.UseSecureTransport
	}
	return Default_CloudStoreInfo_UseSecureTransport
}

func (m *CloudStoreInfo) GetAmazonS3Config() *CloudStoreInfo_AmazonS3Config {
	if m != nil {
		return m.AmazonS3Config
	}
	return nil
}

func (m *CloudStoreInfo) GetAzureBlobstoreConfig() *CloudStoreInfo_AzureBlobStoreConfig {
	if m != nil {
		return m.AzureBlobstoreConfig
	}
	return nil
}

func (m *CloudStoreInfo) GetCredentialId() int64 {
	if m != nil && m.CredentialId != nil {
		return *m.CredentialId
	}
	return 0
}

// Amazon S3 configuration information. We specify only the access id and
// secret key for the associated account. The S3 bucket name is fixed in the
// following format '<cluster_id>_<cluster_incarnation_id>_<disk_id>'. It
// must be noted that the S3 bucket name is universally unique. Same name
// cannot exist even in different accounts.
type CloudStoreInfo_AmazonS3Config struct {
	// This field has been deprecated in favour of 'aws_credential_id' defined
	// below.
	AwsAccessKey *ObfuscatedString `protobuf:"bytes,1,opt,name=aws_access_key,json=awsAccessKey" json:"aws_access_key,omitempty"`
	// This field has been deprecated in favour of 'aws_credential_id' defined
	// below.
	AwsSecretKey *ObfuscatedString `protobuf:"bytes,2,opt,name=aws_secret_key,json=awsSecretKey" json:"aws_secret_key,omitempty"`
	// The endpoint which must be used to access the S3 bucket. This is
	// described in AWS "Regions and Endpoints" doc currently available at
	// http://docs.aws.amazon.com/general/latest/gr/rande.html. This is set
	// to the endpoint (e.g. s3-us-west2.amazonaws.com) of the region in which
	// S3 bucket was created, since buckets in any region other than US Standard
	// (s3.amazonaws.com), can be accessed only from the corresponding endpoint.
	S3Endpoint *string `protobuf:"bytes,3,opt,name=s3_endpoint,json=s3Endpoint" json:"s3_endpoint,omitempty"`
	// Unique identifier for the credentials stored in 'cloud_credentials'
	// Zookeeper node. This identifier is used for fetching the AWS access key
	// and the AWS secret key. The access key used to identify the account
	// linked with S3 store and AWS secret key is used for authentication
	// purposes.
	// This field should be present in configuration even though it is
	// marked as optional.
	// This field is deprecated, use credential_id defined below instead.
	AwsCredentialId      *int64   `protobuf:"varint,4,opt,name=aws_credential_id,json=awsCredentialId" json:"aws_credential_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudStoreInfo_AmazonS3Config) Reset()         { *m = CloudStoreInfo_AmazonS3Config{} }
func (m *CloudStoreInfo_AmazonS3Config) String() string { return proto.CompactTextString(m) }
func (*CloudStoreInfo_AmazonS3Config) ProtoMessage()    {}
func (*CloudStoreInfo_AmazonS3Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{2, 0}
}

func (m *CloudStoreInfo_AmazonS3Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudStoreInfo_AmazonS3Config.Unmarshal(m, b)
}
func (m *CloudStoreInfo_AmazonS3Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudStoreInfo_AmazonS3Config.Marshal(b, m, deterministic)
}
func (m *CloudStoreInfo_AmazonS3Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudStoreInfo_AmazonS3Config.Merge(m, src)
}
func (m *CloudStoreInfo_AmazonS3Config) XXX_Size() int {
	return xxx_messageInfo_CloudStoreInfo_AmazonS3Config.Size(m)
}
func (m *CloudStoreInfo_AmazonS3Config) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudStoreInfo_AmazonS3Config.DiscardUnknown(m)
}

var xxx_messageInfo_CloudStoreInfo_AmazonS3Config proto.InternalMessageInfo

func (m *CloudStoreInfo_AmazonS3Config) GetAwsAccessKey() *ObfuscatedString {
	if m != nil {
		return m.AwsAccessKey
	}
	return nil
}

func (m *CloudStoreInfo_AmazonS3Config) GetAwsSecretKey() *ObfuscatedString {
	if m != nil {
		return m.AwsSecretKey
	}
	return nil
}

func (m *CloudStoreInfo_AmazonS3Config) GetS3Endpoint() string {
	if m != nil && m.S3Endpoint != nil {
		return *m.S3Endpoint
	}
	return ""
}

func (m *CloudStoreInfo_AmazonS3Config) GetAwsCredentialId() int64 {
	if m != nil && m.AwsCredentialId != nil {
		return *m.AwsCredentialId
	}
	return 0
}

type CloudStoreInfo_AzureBlobStoreConfig struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudStoreInfo_AzureBlobStoreConfig) Reset()         { *m = CloudStoreInfo_AzureBlobStoreConfig{} }
func (m *CloudStoreInfo_AzureBlobStoreConfig) String() string { return proto.CompactTextString(m) }
func (*CloudStoreInfo_AzureBlobStoreConfig) ProtoMessage()    {}
func (*CloudStoreInfo_AzureBlobStoreConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{2, 1}
}

func (m *CloudStoreInfo_AzureBlobStoreConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudStoreInfo_AzureBlobStoreConfig.Unmarshal(m, b)
}
func (m *CloudStoreInfo_AzureBlobStoreConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudStoreInfo_AzureBlobStoreConfig.Marshal(b, m, deterministic)
}
func (m *CloudStoreInfo_AzureBlobStoreConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudStoreInfo_AzureBlobStoreConfig.Merge(m, src)
}
func (m *CloudStoreInfo_AzureBlobStoreConfig) XXX_Size() int {
	return xxx_messageInfo_CloudStoreInfo_AzureBlobStoreConfig.Size(m)
}
func (m *CloudStoreInfo_AzureBlobStoreConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudStoreInfo_AzureBlobStoreConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CloudStoreInfo_AzureBlobStoreConfig proto.InternalMessageInfo

// Cloud site configuration. This is used by Prism to manage a remote site
// on a cloud.
type CloudSiteInfo struct {
	CloudType   *CloudSiteInfo_CloudSiteType             `protobuf:"varint,1,opt,name=cloud_type,json=cloudType,enum=nutanix.zeus.CloudSiteInfo_CloudSiteType" json:"cloud_type,omitempty"`
	AwsSiteInfo *CloudSiteInfo_AmazonWebServicesSiteInfo `protobuf:"bytes,2,opt,name=aws_site_info,json=awsSiteInfo" json:"aws_site_info,omitempty"`
	Region      *string                                  `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
	// Id of the cloud instances in the same order of instance IPs.
	InstanceIdVec []string `protobuf:"bytes,4,rep,name=instance_id_vec,json=instanceIdVec" json:"instance_id_vec,omitempty"`
	// Instance size of the cloud CVMs.
	InstanceType *string `protobuf:"bytes,5,opt,name=instance_type,json=instanceType" json:"instance_type,omitempty"`
	// Id of the credentials used to create cloud remote site.
	CredentialId *int64 `protobuf:"varint,6,opt,name=credential_id,json=credentialId" json:"credential_id,omitempty"`
	// Power state of cloud instances in the same order of instance IPs.
	InstancePowerStateVec []CloudInstancePowerState `protobuf:"varint,7,rep,name=instance_power_state_vec,json=instancePowerStateVec,enum=nutanix.zeus.CloudInstancePowerState" json:"instance_power_state_vec,omitempty"`
	// Whether auto power management is enabled for this cloud site.
	AutoPowerManagementEnabled *bool `protobuf:"varint,8,opt,name=auto_power_management_enabled,json=autoPowerManagementEnabled,def=1" json:"auto_power_management_enabled,omitempty"`
	// Whether the cloud site is readonly. The cloud cluster may become readonly
	// if Stargate memory usage goes beyond a certain percentage of the
	// allocated memory due to large number of egroups.
	IsReadOnly *bool `protobuf:"varint,9,opt,name=is_read_only,json=isReadOnly" json:"is_read_only,omitempty"`
	// Last time in microseconds when alerts where fetched from the remote
	// site.
	LastFetchAlertTimeUsecs *int64   `protobuf:"varint,10,opt,name=last_fetch_alert_time_usecs,json=lastFetchAlertTimeUsecs" json:"last_fetch_alert_time_usecs,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *CloudSiteInfo) Reset()         { *m = CloudSiteInfo{} }
func (m *CloudSiteInfo) String() string { return proto.CompactTextString(m) }
func (*CloudSiteInfo) ProtoMessage()    {}
func (*CloudSiteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{3}
}

func (m *CloudSiteInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudSiteInfo.Unmarshal(m, b)
}
func (m *CloudSiteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudSiteInfo.Marshal(b, m, deterministic)
}
func (m *CloudSiteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudSiteInfo.Merge(m, src)
}
func (m *CloudSiteInfo) XXX_Size() int {
	return xxx_messageInfo_CloudSiteInfo.Size(m)
}
func (m *CloudSiteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudSiteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CloudSiteInfo proto.InternalMessageInfo

const Default_CloudSiteInfo_AutoPowerManagementEnabled bool = true

func (m *CloudSiteInfo) GetCloudType() CloudSiteInfo_CloudSiteType {
	if m != nil && m.CloudType != nil {
		return *m.CloudType
	}
	return CloudSiteInfo_kAmazonWebServices
}

func (m *CloudSiteInfo) GetAwsSiteInfo() *CloudSiteInfo_AmazonWebServicesSiteInfo {
	if m != nil {
		return m.AwsSiteInfo
	}
	return nil
}

func (m *CloudSiteInfo) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *CloudSiteInfo) GetInstanceIdVec() []string {
	if m != nil {
		return m.InstanceIdVec
	}
	return nil
}

func (m *CloudSiteInfo) GetInstanceType() string {
	if m != nil && m.InstanceType != nil {
		return *m.InstanceType
	}
	return ""
}

func (m *CloudSiteInfo) GetCredentialId() int64 {
	if m != nil && m.CredentialId != nil {
		return *m.CredentialId
	}
	return 0
}

func (m *CloudSiteInfo) GetInstancePowerStateVec() []CloudInstancePowerState {
	if m != nil {
		return m.InstancePowerStateVec
	}
	return nil
}

func (m *CloudSiteInfo) GetAutoPowerManagementEnabled() bool {
	if m != nil && m.AutoPowerManagementEnabled != nil {
		return *m.AutoPowerManagementEnabled
	}
	return Default_CloudSiteInfo_AutoPowerManagementEnabled
}

func (m *CloudSiteInfo) GetIsReadOnly() bool {
	if m != nil && m.IsReadOnly != nil {
		return *m.IsReadOnly
	}
	return false
}

func (m *CloudSiteInfo) GetLastFetchAlertTimeUsecs() int64 {
	if m != nil && m.LastFetchAlertTimeUsecs != nil {
		return *m.LastFetchAlertTimeUsecs
	}
	return 0
}

// Amazon Web Services specific site information.
type CloudSiteInfo_AmazonWebServicesSiteInfo struct {
	// Region where the remote appliance is created. This field is
	// deprecated in the favour of the same fieled outside this structure.
	Region               *string  `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudSiteInfo_AmazonWebServicesSiteInfo) Reset() {
	*m = CloudSiteInfo_AmazonWebServicesSiteInfo{}
}
func (m *CloudSiteInfo_AmazonWebServicesSiteInfo) String() string { return proto.CompactTextString(m) }
func (*CloudSiteInfo_AmazonWebServicesSiteInfo) ProtoMessage()    {}
func (*CloudSiteInfo_AmazonWebServicesSiteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{3, 0}
}

func (m *CloudSiteInfo_AmazonWebServicesSiteInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudSiteInfo_AmazonWebServicesSiteInfo.Unmarshal(m, b)
}
func (m *CloudSiteInfo_AmazonWebServicesSiteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudSiteInfo_AmazonWebServicesSiteInfo.Marshal(b, m, deterministic)
}
func (m *CloudSiteInfo_AmazonWebServicesSiteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudSiteInfo_AmazonWebServicesSiteInfo.Merge(m, src)
}
func (m *CloudSiteInfo_AmazonWebServicesSiteInfo) XXX_Size() int {
	return xxx_messageInfo_CloudSiteInfo_AmazonWebServicesSiteInfo.Size(m)
}
func (m *CloudSiteInfo_AmazonWebServicesSiteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudSiteInfo_AmazonWebServicesSiteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CloudSiteInfo_AmazonWebServicesSiteInfo proto.InternalMessageInfo

func (m *CloudSiteInfo_AmazonWebServicesSiteInfo) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

// This message defines the additional configuration information required to
// access different type of cloud providers (e.g. Amazon Web Services,
// Microsoft Azure etc.).
type CloudConfigInfo struct {
	CredentialsVec []*CloudConfigInfo_Credentials `protobuf:"bytes,1,rep,name=credentials_vec,json=credentialsVec" json:"credentials_vec,omitempty"`
	// The logical timestamp that works like versioning. This is used when
	// updating the Zookeeper node to serialize the updates.
	LogicalTimestamp     *int64   `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp" json:"logical_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudConfigInfo) Reset()         { *m = CloudConfigInfo{} }
func (m *CloudConfigInfo) String() string { return proto.CompactTextString(m) }
func (*CloudConfigInfo) ProtoMessage()    {}
func (*CloudConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{4}
}

func (m *CloudConfigInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudConfigInfo.Unmarshal(m, b)
}
func (m *CloudConfigInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudConfigInfo.Marshal(b, m, deterministic)
}
func (m *CloudConfigInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudConfigInfo.Merge(m, src)
}
func (m *CloudConfigInfo) XXX_Size() int {
	return xxx_messageInfo_CloudConfigInfo.Size(m)
}
func (m *CloudConfigInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudConfigInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CloudConfigInfo proto.InternalMessageInfo

func (m *CloudConfigInfo) GetCredentialsVec() []*CloudConfigInfo_Credentials {
	if m != nil {
		return m.CredentialsVec
	}
	return nil
}

func (m *CloudConfigInfo) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return 0
}

// Credentials to access the remote appliance.
type CloudConfigInfo_Credentials struct {
	// The type of appliance.
	Type              *CloudSiteInfo_CloudSiteType                                `protobuf:"varint,1,opt,name=type,enum=nutanix.zeus.CloudSiteInfo_CloudSiteType" json:"type,omitempty"`
	AwsCredentialsVec []*CloudConfigInfo_Credentials_AmazonWebServicesCredentials `protobuf:"bytes,2,rep,name=aws_credentials_vec,json=awsCredentialsVec" json:"aws_credentials_vec,omitempty"`
	// Credential id in the vector 'aws_credentials_vec' which will be used
	// as the default credentials for AWS.
	// This field is deprecated, use default_credential_id instead.
	DefaultAwsCredentialId     *int64                                                 `protobuf:"varint,3,opt,name=default_aws_credential_id,json=defaultAwsCredentialId" json:"default_aws_credential_id,omitempty"`
	AzureServiceCredentialsVec []*CloudConfigInfo_Credentials_AzureServiceCredentials `protobuf:"bytes,4,rep,name=azure_service_credentials_vec,json=azureServiceCredentialsVec" json:"azure_service_credentials_vec,omitempty"`
	AzureStorageCredentialsVec []*CloudConfigInfo_Credentials_AzureStorageCredentials `protobuf:"bytes,5,rep,name=azure_storage_credentials_vec,json=azureStorageCredentialsVec" json:"azure_storage_credentials_vec,omitempty"`
	// Default credential id to be used. This is not used in case of Azure
	// storage credentials.
	DefaultCredentialId *int64 `protobuf:"varint,6,opt,name=default_credential_id,json=defaultCredentialId" json:"default_credential_id,omitempty"`
	// Type of cloud credential.
	CredentialType       *CredentialType `protobuf:"varint,7,opt,name=credential_type,json=credentialType,enum=nutanix.zeus.CredentialType,def=1" json:"credential_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CloudConfigInfo_Credentials) Reset()         { *m = CloudConfigInfo_Credentials{} }
func (m *CloudConfigInfo_Credentials) String() string { return proto.CompactTextString(m) }
func (*CloudConfigInfo_Credentials) ProtoMessage()    {}
func (*CloudConfigInfo_Credentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{4, 0}
}

func (m *CloudConfigInfo_Credentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudConfigInfo_Credentials.Unmarshal(m, b)
}
func (m *CloudConfigInfo_Credentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudConfigInfo_Credentials.Marshal(b, m, deterministic)
}
func (m *CloudConfigInfo_Credentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudConfigInfo_Credentials.Merge(m, src)
}
func (m *CloudConfigInfo_Credentials) XXX_Size() int {
	return xxx_messageInfo_CloudConfigInfo_Credentials.Size(m)
}
func (m *CloudConfigInfo_Credentials) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudConfigInfo_Credentials.DiscardUnknown(m)
}

var xxx_messageInfo_CloudConfigInfo_Credentials proto.InternalMessageInfo

const Default_CloudConfigInfo_Credentials_CredentialType CredentialType = CredentialType_kService

func (m *CloudConfigInfo_Credentials) GetType() CloudSiteInfo_CloudSiteType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CloudSiteInfo_kAmazonWebServices
}

func (m *CloudConfigInfo_Credentials) GetAwsCredentialsVec() []*CloudConfigInfo_Credentials_AmazonWebServicesCredentials {
	if m != nil {
		return m.AwsCredentialsVec
	}
	return nil
}

func (m *CloudConfigInfo_Credentials) GetDefaultAwsCredentialId() int64 {
	if m != nil && m.DefaultAwsCredentialId != nil {
		return *m.DefaultAwsCredentialId
	}
	return 0
}

func (m *CloudConfigInfo_Credentials) GetAzureServiceCredentialsVec() []*CloudConfigInfo_Credentials_AzureServiceCredentials {
	if m != nil {
		return m.AzureServiceCredentialsVec
	}
	return nil
}

func (m *CloudConfigInfo_Credentials) GetAzureStorageCredentialsVec() []*CloudConfigInfo_Credentials_AzureStorageCredentials {
	if m != nil {
		return m.AzureStorageCredentialsVec
	}
	return nil
}

func (m *CloudConfigInfo_Credentials) GetDefaultCredentialId() int64 {
	if m != nil && m.DefaultCredentialId != nil {
		return *m.DefaultCredentialId
	}
	return 0
}

func (m *CloudConfigInfo_Credentials) GetCredentialType() CredentialType {
	if m != nil && m.CredentialType != nil {
		return *m.CredentialType
	}
	return Default_CloudConfigInfo_Credentials_CredentialType
}

// Amazon Web Services specific credentials.
type CloudConfigInfo_Credentials_AmazonWebServicesCredentials struct {
	// Id to uniquely identify the aws credentials in the vector
	// 'aws_credentials_vec'.
	CredentialId *int64 `protobuf:"varint,1,opt,name=credential_id,json=credentialId" json:"credential_id,omitempty"`
	// User friendly name for the credentials.
	CredentialName *string `protobuf:"bytes,2,opt,name=credential_name,json=credentialName" json:"credential_name,omitempty"`
	// AWS access key.
	AwsAccessKey *ObfuscatedString `protobuf:"bytes,3,opt,name=aws_access_key,json=awsAccessKey" json:"aws_access_key,omitempty"`
	// AWS secret key.
	AwsSecretKey         *ObfuscatedString `protobuf:"bytes,4,opt,name=aws_secret_key,json=awsSecretKey" json:"aws_secret_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CloudConfigInfo_Credentials_AmazonWebServicesCredentials) Reset() {
	*m = CloudConfigInfo_Credentials_AmazonWebServicesCredentials{}
}
func (m *CloudConfigInfo_Credentials_AmazonWebServicesCredentials) String() string {
	return proto.CompactTextString(m)
}
func (*CloudConfigInfo_Credentials_AmazonWebServicesCredentials) ProtoMessage() {}
func (*CloudConfigInfo_Credentials_AmazonWebServicesCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{4, 0, 0}
}

func (m *CloudConfigInfo_Credentials_AmazonWebServicesCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudConfigInfo_Credentials_AmazonWebServicesCredentials.Unmarshal(m, b)
}
func (m *CloudConfigInfo_Credentials_AmazonWebServicesCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudConfigInfo_Credentials_AmazonWebServicesCredentials.Marshal(b, m, deterministic)
}
func (m *CloudConfigInfo_Credentials_AmazonWebServicesCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudConfigInfo_Credentials_AmazonWebServicesCredentials.Merge(m, src)
}
func (m *CloudConfigInfo_Credentials_AmazonWebServicesCredentials) XXX_Size() int {
	return xxx_messageInfo_CloudConfigInfo_Credentials_AmazonWebServicesCredentials.Size(m)
}
func (m *CloudConfigInfo_Credentials_AmazonWebServicesCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudConfigInfo_Credentials_AmazonWebServicesCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_CloudConfigInfo_Credentials_AmazonWebServicesCredentials proto.InternalMessageInfo

func (m *CloudConfigInfo_Credentials_AmazonWebServicesCredentials) GetCredentialId() int64 {
	if m != nil && m.CredentialId != nil {
		return *m.CredentialId
	}
	return 0
}

func (m *CloudConfigInfo_Credentials_AmazonWebServicesCredentials) GetCredentialName() string {
	if m != nil && m.CredentialName != nil {
		return *m.CredentialName
	}
	return ""
}

func (m *CloudConfigInfo_Credentials_AmazonWebServicesCredentials) GetAwsAccessKey() *ObfuscatedString {
	if m != nil {
		return m.AwsAccessKey
	}
	return nil
}

func (m *CloudConfigInfo_Credentials_AmazonWebServicesCredentials) GetAwsSecretKey() *ObfuscatedString {
	if m != nil {
		return m.AwsSecretKey
	}
	return nil
}

// Azure subscription specific credentials. These credentials can be used
// to manage overall Azure Services, e.g. anything to do with VM
// management, for creating new storage accounts, and for accessing secret
// keys of the storage accounts.
type CloudConfigInfo_Credentials_AzureServiceCredentials struct {
	// Id to uniquely identify the azure credentials in the vector
	// 'azure_credentials_vec'.
	CredentialId *int64 `protobuf:"varint,1,opt,name=credential_id,json=credentialId" json:"credential_id,omitempty"`
	// User friendly name for the credentials.
	CredentialName *string `protobuf:"bytes,2,opt,name=credential_name,json=credentialName" json:"credential_name,omitempty"`
	// Azure subscription id.
	AzureSubscriptionId *string `protobuf:"bytes,3,opt,name=azure_subscription_id,json=azureSubscriptionId" json:"azure_subscription_id,omitempty"`
	// Id of the Azure certificate file in SecureFileRepository.
	SecureFileId []byte `protobuf:"bytes,4,opt,name=secure_file_id,json=secureFileId" json:"secure_file_id,omitempty"`
	// Username for the Azure Account.
	AzureUsername *ObfuscatedString `protobuf:"bytes,5,opt,name=azure_username,json=azureUsername" json:"azure_username,omitempty"`
	// Password the Storage Account.
	AzurePassword        *ObfuscatedString `protobuf:"bytes,6,opt,name=azure_password,json=azurePassword" json:"azure_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) Reset() {
	*m = CloudConfigInfo_Credentials_AzureServiceCredentials{}
}
func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) String() string {
	return proto.CompactTextString(m)
}
func (*CloudConfigInfo_Credentials_AzureServiceCredentials) ProtoMessage() {}
func (*CloudConfigInfo_Credentials_AzureServiceCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{4, 0, 1}
}

func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudConfigInfo_Credentials_AzureServiceCredentials.Unmarshal(m, b)
}
func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudConfigInfo_Credentials_AzureServiceCredentials.Marshal(b, m, deterministic)
}
func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudConfigInfo_Credentials_AzureServiceCredentials.Merge(m, src)
}
func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) XXX_Size() int {
	return xxx_messageInfo_CloudConfigInfo_Credentials_AzureServiceCredentials.Size(m)
}
func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudConfigInfo_Credentials_AzureServiceCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_CloudConfigInfo_Credentials_AzureServiceCredentials proto.InternalMessageInfo

func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) GetCredentialId() int64 {
	if m != nil && m.CredentialId != nil {
		return *m.CredentialId
	}
	return 0
}

func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) GetCredentialName() string {
	if m != nil && m.CredentialName != nil {
		return *m.CredentialName
	}
	return ""
}

func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) GetAzureSubscriptionId() string {
	if m != nil && m.AzureSubscriptionId != nil {
		return *m.AzureSubscriptionId
	}
	return ""
}

func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) GetSecureFileId() []byte {
	if m != nil {
		return m.SecureFileId
	}
	return nil
}

func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) GetAzureUsername() *ObfuscatedString {
	if m != nil {
		return m.AzureUsername
	}
	return nil
}

func (m *CloudConfigInfo_Credentials_AzureServiceCredentials) GetAzurePassword() *ObfuscatedString {
	if m != nil {
		return m.AzurePassword
	}
	return nil
}

// Credentials to manage azure storage account. These credentials can be
// used only for storage related operations specific to a particular storage
// account.
type CloudConfigInfo_Credentials_AzureStorageCredentials struct {
	// Unique id across all credentials.
	CredentialId *int64 `protobuf:"varint,1,opt,name=credential_id,json=credentialId" json:"credential_id,omitempty"`
	// Name of the storage account.
	AzureStorageAccount *ObfuscatedString `protobuf:"bytes,2,opt,name=azure_storage_account,json=azureStorageAccount" json:"azure_storage_account,omitempty"`
	// Secret key of Azure storage account.
	AzureSecretKey *ObfuscatedString `protobuf:"bytes,3,opt,name=azure_secret_key,json=azureSecretKey" json:"azure_secret_key,omitempty"`
	// Geographical region for the data to be stored.
	Region               *string  `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudConfigInfo_Credentials_AzureStorageCredentials) Reset() {
	*m = CloudConfigInfo_Credentials_AzureStorageCredentials{}
}
func (m *CloudConfigInfo_Credentials_AzureStorageCredentials) String() string {
	return proto.CompactTextString(m)
}
func (*CloudConfigInfo_Credentials_AzureStorageCredentials) ProtoMessage() {}
func (*CloudConfigInfo_Credentials_AzureStorageCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{4, 0, 2}
}

func (m *CloudConfigInfo_Credentials_AzureStorageCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudConfigInfo_Credentials_AzureStorageCredentials.Unmarshal(m, b)
}
func (m *CloudConfigInfo_Credentials_AzureStorageCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudConfigInfo_Credentials_AzureStorageCredentials.Marshal(b, m, deterministic)
}
func (m *CloudConfigInfo_Credentials_AzureStorageCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudConfigInfo_Credentials_AzureStorageCredentials.Merge(m, src)
}
func (m *CloudConfigInfo_Credentials_AzureStorageCredentials) XXX_Size() int {
	return xxx_messageInfo_CloudConfigInfo_Credentials_AzureStorageCredentials.Size(m)
}
func (m *CloudConfigInfo_Credentials_AzureStorageCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudConfigInfo_Credentials_AzureStorageCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_CloudConfigInfo_Credentials_AzureStorageCredentials proto.InternalMessageInfo

func (m *CloudConfigInfo_Credentials_AzureStorageCredentials) GetCredentialId() int64 {
	if m != nil && m.CredentialId != nil {
		return *m.CredentialId
	}
	return 0
}

func (m *CloudConfigInfo_Credentials_AzureStorageCredentials) GetAzureStorageAccount() *ObfuscatedString {
	if m != nil {
		return m.AzureStorageAccount
	}
	return nil
}

func (m *CloudConfigInfo_Credentials_AzureStorageCredentials) GetAzureSecretKey() *ObfuscatedString {
	if m != nil {
		return m.AzureSecretKey
	}
	return nil
}

func (m *CloudConfigInfo_Credentials_AzureStorageCredentials) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

// This message contains additional types that makes it easier for unit tests
// to initialize zeus cloud configs from a configuration JSON file.
type ZeusCloudConfigInitParams struct {
	CredentialConfigParams *ZeusCloudConfigInitParams_CredentialConfigurationParams `protobuf:"bytes,1,opt,name=credential_config_params,json=credentialConfigParams" json:"credential_config_params,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                                 `json:"-"`
	XXX_unrecognized       []byte                                                   `json:"-"`
	XXX_sizecache          int32                                                    `json:"-"`
}

func (m *ZeusCloudConfigInitParams) Reset()         { *m = ZeusCloudConfigInitParams{} }
func (m *ZeusCloudConfigInitParams) String() string { return proto.CompactTextString(m) }
func (*ZeusCloudConfigInitParams) ProtoMessage()    {}
func (*ZeusCloudConfigInitParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{5}
}

func (m *ZeusCloudConfigInitParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZeusCloudConfigInitParams.Unmarshal(m, b)
}
func (m *ZeusCloudConfigInitParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZeusCloudConfigInitParams.Marshal(b, m, deterministic)
}
func (m *ZeusCloudConfigInitParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeusCloudConfigInitParams.Merge(m, src)
}
func (m *ZeusCloudConfigInitParams) XXX_Size() int {
	return xxx_messageInfo_ZeusCloudConfigInitParams.Size(m)
}
func (m *ZeusCloudConfigInitParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeusCloudConfigInitParams.DiscardUnknown(m)
}

var xxx_messageInfo_ZeusCloudConfigInitParams proto.InternalMessageInfo

func (m *ZeusCloudConfigInitParams) GetCredentialConfigParams() *ZeusCloudConfigInitParams_CredentialConfigurationParams {
	if m != nil {
		return m.CredentialConfigParams
	}
	return nil
}

// AWS specific credentials.
type ZeusCloudConfigInitParams_AWSCredentialParams struct {
	// AWS access key.
	AwsAccessKey *string `protobuf:"bytes,1,opt,name=aws_access_key,json=awsAccessKey" json:"aws_access_key,omitempty"`
	// AWS secret key.
	AwsSecretKey         *string  `protobuf:"bytes,2,opt,name=aws_secret_key,json=awsSecretKey" json:"aws_secret_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZeusCloudConfigInitParams_AWSCredentialParams) Reset() {
	*m = ZeusCloudConfigInitParams_AWSCredentialParams{}
}
func (m *ZeusCloudConfigInitParams_AWSCredentialParams) String() string {
	return proto.CompactTextString(m)
}
func (*ZeusCloudConfigInitParams_AWSCredentialParams) ProtoMessage() {}
func (*ZeusCloudConfigInitParams_AWSCredentialParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{5, 0}
}

func (m *ZeusCloudConfigInitParams_AWSCredentialParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZeusCloudConfigInitParams_AWSCredentialParams.Unmarshal(m, b)
}
func (m *ZeusCloudConfigInitParams_AWSCredentialParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZeusCloudConfigInitParams_AWSCredentialParams.Marshal(b, m, deterministic)
}
func (m *ZeusCloudConfigInitParams_AWSCredentialParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeusCloudConfigInitParams_AWSCredentialParams.Merge(m, src)
}
func (m *ZeusCloudConfigInitParams_AWSCredentialParams) XXX_Size() int {
	return xxx_messageInfo_ZeusCloudConfigInitParams_AWSCredentialParams.Size(m)
}
func (m *ZeusCloudConfigInitParams_AWSCredentialParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeusCloudConfigInitParams_AWSCredentialParams.DiscardUnknown(m)
}

var xxx_messageInfo_ZeusCloudConfigInitParams_AWSCredentialParams proto.InternalMessageInfo

func (m *ZeusCloudConfigInitParams_AWSCredentialParams) GetAwsAccessKey() string {
	if m != nil && m.AwsAccessKey != nil {
		return *m.AwsAccessKey
	}
	return ""
}

func (m *ZeusCloudConfigInitParams_AWSCredentialParams) GetAwsSecretKey() string {
	if m != nil && m.AwsSecretKey != nil {
		return *m.AwsSecretKey
	}
	return ""
}

// Azure subscription specific credentials.
type ZeusCloudConfigInitParams_AzureServiceCredentialParams struct {
	// Azure subscription id. Required for both classic and ARM authentication.
	AzureSubscriptionId *string `protobuf:"bytes,1,opt,name=azure_subscription_id,json=azureSubscriptionId" json:"azure_subscription_id,omitempty"`
	// Secure file id of the Azure client certificate file(<file_name>.pem) for
	// the subscription specified by azure_subscription_id on the cluster.
	// Commands to generate certificate pairs:
	// openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mycert.pem -out
	// mycert.pem
	// openssl x509 -inform pem -in mycert.pem -outform der -out mycert.cer
	SecureFileId []byte `protobuf:"bytes,2,opt,name=secure_file_id,json=secureFileId" json:"secure_file_id,omitempty"`
	// Username for the Azure Account.
	AzureUsername *string `protobuf:"bytes,3,opt,name=azure_username,json=azureUsername" json:"azure_username,omitempty"`
	// Password the Storage Account.
	AzurePassword        *string  `protobuf:"bytes,4,opt,name=azure_password,json=azurePassword" json:"azure_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZeusCloudConfigInitParams_AzureServiceCredentialParams) Reset() {
	*m = ZeusCloudConfigInitParams_AzureServiceCredentialParams{}
}
func (m *ZeusCloudConfigInitParams_AzureServiceCredentialParams) String() string {
	return proto.CompactTextString(m)
}
func (*ZeusCloudConfigInitParams_AzureServiceCredentialParams) ProtoMessage() {}
func (*ZeusCloudConfigInitParams_AzureServiceCredentialParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{5, 1}
}

func (m *ZeusCloudConfigInitParams_AzureServiceCredentialParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZeusCloudConfigInitParams_AzureServiceCredentialParams.Unmarshal(m, b)
}
func (m *ZeusCloudConfigInitParams_AzureServiceCredentialParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZeusCloudConfigInitParams_AzureServiceCredentialParams.Marshal(b, m, deterministic)
}
func (m *ZeusCloudConfigInitParams_AzureServiceCredentialParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeusCloudConfigInitParams_AzureServiceCredentialParams.Merge(m, src)
}
func (m *ZeusCloudConfigInitParams_AzureServiceCredentialParams) XXX_Size() int {
	return xxx_messageInfo_ZeusCloudConfigInitParams_AzureServiceCredentialParams.Size(m)
}
func (m *ZeusCloudConfigInitParams_AzureServiceCredentialParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeusCloudConfigInitParams_AzureServiceCredentialParams.DiscardUnknown(m)
}

var xxx_messageInfo_ZeusCloudConfigInitParams_AzureServiceCredentialParams proto.InternalMessageInfo

func (m *ZeusCloudConfigInitParams_AzureServiceCredentialParams) GetAzureSubscriptionId() string {
	if m != nil && m.AzureSubscriptionId != nil {
		return *m.AzureSubscriptionId
	}
	return ""
}

func (m *ZeusCloudConfigInitParams_AzureServiceCredentialParams) GetSecureFileId() []byte {
	if m != nil {
		return m.SecureFileId
	}
	return nil
}

func (m *ZeusCloudConfigInitParams_AzureServiceCredentialParams) GetAzureUsername() string {
	if m != nil && m.AzureUsername != nil {
		return *m.AzureUsername
	}
	return ""
}

func (m *ZeusCloudConfigInitParams_AzureServiceCredentialParams) GetAzurePassword() string {
	if m != nil && m.AzurePassword != nil {
		return *m.AzurePassword
	}
	return ""
}

type ZeusCloudConfigInitParams_AzureStorageCredentialParams struct {
	// Name of the storage account.
	AzureStorageAccount *string `protobuf:"bytes,1,opt,name=azure_storage_account,json=azureStorageAccount" json:"azure_storage_account,omitempty"`
	// Secret key of Azure storage account.
	AzureSecretKey *string `protobuf:"bytes,2,opt,name=azure_secret_key,json=azureSecretKey" json:"azure_secret_key,omitempty"`
	// Region where all the data of this storage account will be stored.
	Region               *string  `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZeusCloudConfigInitParams_AzureStorageCredentialParams) Reset() {
	*m = ZeusCloudConfigInitParams_AzureStorageCredentialParams{}
}
func (m *ZeusCloudConfigInitParams_AzureStorageCredentialParams) String() string {
	return proto.CompactTextString(m)
}
func (*ZeusCloudConfigInitParams_AzureStorageCredentialParams) ProtoMessage() {}
func (*ZeusCloudConfigInitParams_AzureStorageCredentialParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{5, 2}
}

func (m *ZeusCloudConfigInitParams_AzureStorageCredentialParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZeusCloudConfigInitParams_AzureStorageCredentialParams.Unmarshal(m, b)
}
func (m *ZeusCloudConfigInitParams_AzureStorageCredentialParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZeusCloudConfigInitParams_AzureStorageCredentialParams.Marshal(b, m, deterministic)
}
func (m *ZeusCloudConfigInitParams_AzureStorageCredentialParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeusCloudConfigInitParams_AzureStorageCredentialParams.Merge(m, src)
}
func (m *ZeusCloudConfigInitParams_AzureStorageCredentialParams) XXX_Size() int {
	return xxx_messageInfo_ZeusCloudConfigInitParams_AzureStorageCredentialParams.Size(m)
}
func (m *ZeusCloudConfigInitParams_AzureStorageCredentialParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeusCloudConfigInitParams_AzureStorageCredentialParams.DiscardUnknown(m)
}

var xxx_messageInfo_ZeusCloudConfigInitParams_AzureStorageCredentialParams proto.InternalMessageInfo

func (m *ZeusCloudConfigInitParams_AzureStorageCredentialParams) GetAzureStorageAccount() string {
	if m != nil && m.AzureStorageAccount != nil {
		return *m.AzureStorageAccount
	}
	return ""
}

func (m *ZeusCloudConfigInitParams_AzureStorageCredentialParams) GetAzureSecretKey() string {
	if m != nil && m.AzureSecretKey != nil {
		return *m.AzureSecretKey
	}
	return ""
}

func (m *ZeusCloudConfigInitParams_AzureStorageCredentialParams) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

type ZeusCloudConfigInitParams_CredentialConfigurationParams struct {
	// The type of the remote appliance.
	Type *CloudSiteInfo_CloudSiteType `protobuf:"varint,1,opt,name=type,enum=nutanix.zeus.CloudSiteInfo_CloudSiteType" json:"type,omitempty"`
	// AWS specific credentials.
	AwsCredentials *ZeusCloudConfigInitParams_AWSCredentialParams `protobuf:"bytes,2,opt,name=aws_credentials,json=awsCredentials" json:"aws_credentials,omitempty"`
	// Whether these credentials are default credentials.
	DefaultCredentials *bool `protobuf:"varint,3,opt,name=default_credentials,json=defaultCredentials" json:"default_credentials,omitempty"`
	// User friendly name for the credentials.
	CredentialName *string `protobuf:"bytes,4,opt,name=credential_name,json=credentialName" json:"credential_name,omitempty"`
	// Azure service specific credentials.
	AzureServiceCredentials *ZeusCloudConfigInitParams_AzureServiceCredentialParams `protobuf:"bytes,5,opt,name=azure_service_credentials,json=azureServiceCredentials" json:"azure_service_credentials,omitempty"`
	// Azure storage account credentials.
	AzureStorageCredentials *ZeusCloudConfigInitParams_AzureStorageCredentialParams `protobuf:"bytes,6,opt,name=azure_storage_credentials,json=azureStorageCredentials" json:"azure_storage_credentials,omitempty"`
	// Type of cloud credential.
	CredentialType       *CredentialType `protobuf:"varint,7,opt,name=credential_type,json=credentialType,enum=nutanix.zeus.CredentialType,def=1" json:"credential_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) Reset() {
	*m = ZeusCloudConfigInitParams_CredentialConfigurationParams{}
}
func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) String() string {
	return proto.CompactTextString(m)
}
func (*ZeusCloudConfigInitParams_CredentialConfigurationParams) ProtoMessage() {}
func (*ZeusCloudConfigInitParams_CredentialConfigurationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e0b2f5cb49bdc0, []int{5, 3}
}

func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZeusCloudConfigInitParams_CredentialConfigurationParams.Unmarshal(m, b)
}
func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZeusCloudConfigInitParams_CredentialConfigurationParams.Marshal(b, m, deterministic)
}
func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeusCloudConfigInitParams_CredentialConfigurationParams.Merge(m, src)
}
func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) XXX_Size() int {
	return xxx_messageInfo_ZeusCloudConfigInitParams_CredentialConfigurationParams.Size(m)
}
func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeusCloudConfigInitParams_CredentialConfigurationParams.DiscardUnknown(m)
}

var xxx_messageInfo_ZeusCloudConfigInitParams_CredentialConfigurationParams proto.InternalMessageInfo

const Default_ZeusCloudConfigInitParams_CredentialConfigurationParams_CredentialType CredentialType = CredentialType_kService

func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) GetType() CloudSiteInfo_CloudSiteType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CloudSiteInfo_kAmazonWebServices
}

func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) GetAwsCredentials() *ZeusCloudConfigInitParams_AWSCredentialParams {
	if m != nil {
		return m.AwsCredentials
	}
	return nil
}

func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) GetDefaultCredentials() bool {
	if m != nil && m.DefaultCredentials != nil {
		return *m.DefaultCredentials
	}
	return false
}

func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) GetCredentialName() string {
	if m != nil && m.CredentialName != nil {
		return *m.CredentialName
	}
	return ""
}

func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) GetAzureServiceCredentials() *ZeusCloudConfigInitParams_AzureServiceCredentialParams {
	if m != nil {
		return m.AzureServiceCredentials
	}
	return nil
}

func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) GetAzureStorageCredentials() *ZeusCloudConfigInitParams_AzureStorageCredentialParams {
	if m != nil {
		return m.AzureStorageCredentials
	}
	return nil
}

func (m *ZeusCloudConfigInitParams_CredentialConfigurationParams) GetCredentialType() CredentialType {
	if m != nil && m.CredentialType != nil {
		return *m.CredentialType
	}
	return Default_ZeusCloudConfigInitParams_CredentialConfigurationParams_CredentialType
}

func init() {
	proto.RegisterEnum("nutanix.zeus.CloudStoreType", CloudStoreType_name, CloudStoreType_value)
	proto.RegisterEnum("nutanix.zeus.CredentialType", CredentialType_name, CredentialType_value)
	proto.RegisterEnum("nutanix.zeus.CloudInstancePowerState", CloudInstancePowerState_name, CloudInstancePowerState_value)
	proto.RegisterEnum("nutanix.zeus.ObfuscatedString_ObfuscationType", ObfuscatedString_ObfuscationType_name, ObfuscatedString_ObfuscationType_value)
	proto.RegisterEnum("nutanix.zeus.CloudStoreAccessLog_MethodType", CloudStoreAccessLog_MethodType_name, CloudStoreAccessLog_MethodType_value)
	proto.RegisterEnum("nutanix.zeus.CloudSiteInfo_CloudSiteType", CloudSiteInfo_CloudSiteType_name, CloudSiteInfo_CloudSiteType_value)
	proto.RegisterType((*ObfuscatedString)(nil), "nutanix.zeus.ObfuscatedString")
	proto.RegisterType((*CloudStoreAccessLog)(nil), "nutanix.zeus.CloudStoreAccessLog")
	proto.RegisterType((*CloudStoreInfo)(nil), "nutanix.zeus.CloudStoreInfo")
	proto.RegisterType((*CloudStoreInfo_AmazonS3Config)(nil), "nutanix.zeus.CloudStoreInfo.AmazonS3Config")
	proto.RegisterType((*CloudStoreInfo_AzureBlobStoreConfig)(nil), "nutanix.zeus.CloudStoreInfo.AzureBlobStoreConfig")
	proto.RegisterType((*CloudSiteInfo)(nil), "nutanix.zeus.CloudSiteInfo")
	proto.RegisterType((*CloudSiteInfo_AmazonWebServicesSiteInfo)(nil), "nutanix.zeus.CloudSiteInfo.AmazonWebServicesSiteInfo")
	proto.RegisterType((*CloudConfigInfo)(nil), "nutanix.zeus.CloudConfigInfo")
	proto.RegisterType((*CloudConfigInfo_Credentials)(nil), "nutanix.zeus.CloudConfigInfo.Credentials")
	proto.RegisterType((*CloudConfigInfo_Credentials_AmazonWebServicesCredentials)(nil), "nutanix.zeus.CloudConfigInfo.Credentials.AmazonWebServicesCredentials")
	proto.RegisterType((*CloudConfigInfo_Credentials_AzureServiceCredentials)(nil), "nutanix.zeus.CloudConfigInfo.Credentials.AzureServiceCredentials")
	proto.RegisterType((*CloudConfigInfo_Credentials_AzureStorageCredentials)(nil), "nutanix.zeus.CloudConfigInfo.Credentials.AzureStorageCredentials")
	proto.RegisterType((*ZeusCloudConfigInitParams)(nil), "nutanix.zeus.ZeusCloudConfigInitParams")
	proto.RegisterType((*ZeusCloudConfigInitParams_AWSCredentialParams)(nil), "nutanix.zeus.ZeusCloudConfigInitParams.AWSCredentialParams")
	proto.RegisterType((*ZeusCloudConfigInitParams_AzureServiceCredentialParams)(nil), "nutanix.zeus.ZeusCloudConfigInitParams.AzureServiceCredentialParams")
	proto.RegisterType((*ZeusCloudConfigInitParams_AzureStorageCredentialParams)(nil), "nutanix.zeus.ZeusCloudConfigInitParams.AzureStorageCredentialParams")
	proto.RegisterType((*ZeusCloudConfigInitParams_CredentialConfigurationParams)(nil), "nutanix.zeus.ZeusCloudConfigInitParams.CredentialConfigurationParams")
}

func init() { proto.RegisterFile("zeus/cloud_store_info.proto", fileDescriptor_74e0b2f5cb49bdc0) }

var fileDescriptor_74e0b2f5cb49bdc0 = []byte{
	// 1636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4f, 0x73, 0xdb, 0xc6,
	0x15, 0x1f, 0xf0, 0x8f, 0x2c, 0x3e, 0x52, 0x24, 0xb4, 0x94, 0x25, 0x8a, 0xb6, 0x6b, 0x96, 0xb5,
	0x5b, 0x5a, 0xf6, 0xd0, 0x63, 0xa9, 0xf5, 0x4c, 0xed, 0xf6, 0x20, 0x4b, 0x72, 0xad, 0xa9, 0x5d,
	0xa9, 0xa0, 0x5c, 0x8f, 0x7d, 0x28, 0x66, 0x09, 0x2c, 0x69, 0x84, 0x20, 0x96, 0x83, 0x5d, 0x48,
	0x91, 0x2f, 0xc9, 0x21, 0x1f, 0x21, 0x5f, 0x24, 0x1f, 0x22, 0xb9, 0xe6, 0x96, 0x7c, 0x86, 0x4c,
	0x66, 0x72, 0x4a, 0x26, 0x39, 0x66, 0x76, 0xf1, 0x87, 0x00, 0x01, 0x6a, 0x28, 0xdb, 0x37, 0xee,
	0xfb, 0xff, 0xde, 0xfe, 0xde, 0xdb, 0x07, 0xc2, 0xb5, 0x77, 0xc4, 0x63, 0xf7, 0x0d, 0x9b, 0x7a,
	0xa6, 0xce, 0x38, 0x75, 0x89, 0x6e, 0x39, 0x03, 0xda, 0x9d, 0xb8, 0x94, 0x53, 0x54, 0x71, 0x3c,
	0x8e, 0x1d, 0xeb, 0xd3, 0xae, 0x10, 0x6a, 0x7f, 0xad, 0x80, 0x7a, 0xd4, 0x1f, 0x78, 0xcc, 0xc0,
	0x9c, 0x98, 0x3d, 0xee, 0x5a, 0xce, 0x10, 0xdd, 0x85, 0x55, 0x1a, 0xd1, 0x74, 0x26, 0x89, 0x0d,
	0xa5, 0xa5, 0x74, 0x4a, 0x9a, 0x4a, 0x67, 0x85, 0x5f, 0x43, 0x44, 0xb3, 0xa8, 0xa3, 0xf3, 0xf3,
	0x09, 0x69, 0xe4, 0x5a, 0x4a, 0xa7, 0xba, 0xdd, 0xed, 0xc6, 0x5d, 0x75, 0x67, 0xdd, 0x44, 0x04,
	0x8b, 0x3a, 0x27, 0xe7, 0x13, 0xa2, 0xd5, 0x68, 0x92, 0xd0, 0xbe, 0x03, 0xb5, 0x19, 0x19, 0x04,
	0xb0, 0x34, 0x12, 0x3f, 0x1e, 0xa8, 0x4a, 0xf4, 0x7b, 0x5b, 0xcd, 0xb5, 0x7f, 0xcd, 0x41, 0x7d,
	0x4f, 0x24, 0xdc, 0x13, 0xf9, 0xee, 0x1a, 0x06, 0x61, 0xec, 0x39, 0x1d, 0xa2, 0xc7, 0x00, 0x7e,
	0x1d, 0x64, 0x5c, 0x8a, 0x8c, 0xeb, 0x7a, 0x32, 0xae, 0xa9, 0x9a, 0x8c, 0xa2, 0x24, 0xe5, 0xa5,
	0xb3, 0x17, 0x50, 0x1e, 0x13, 0xfe, 0x96, 0x9a, 0xf1, 0xac, 0xee, 0xcd, 0xd3, 0x8e, 0x9c, 0x76,
	0x5f, 0x48, 0x25, 0x69, 0x0d, 0xc6, 0xd1, 0x6f, 0x74, 0x13, 0xca, 0xb4, 0xff, 0x09, 0x31, 0xb8,
	0xee, 0xe0, 0x31, 0x69, 0xe4, 0x65, 0x41, 0xc1, 0x27, 0xfd, 0x07, 0x8f, 0x09, 0x5a, 0x83, 0x22,
	0x71, 0x5d, 0xea, 0x36, 0x0a, 0x2d, 0xa5, 0xb3, 0xa2, 0xf9, 0x07, 0x74, 0x0f, 0x50, 0x1f, 0x1b,
	0x23, 0xe2, 0x98, 0xba, 0x24, 0xe8, 0x06, 0x35, 0x49, 0xa3, 0x28, 0x45, 0xd4, 0x80, 0x73, 0x20,
	0x18, 0x7b, 0xd4, 0x24, 0xe8, 0x8f, 0x50, 0xf1, 0xa5, 0x4c, 0xc2, 0xb1, 0x65, 0x37, 0x96, 0xa4,
	0x97, 0xb2, 0xa4, 0xed, 0x4b, 0x52, 0xfb, 0x39, 0xc0, 0x34, 0x42, 0x59, 0xc5, 0x57, 0xae, 0xc5,
	0x89, 0xaa, 0xa0, 0x32, 0x5c, 0x19, 0xed, 0x13, 0x9b, 0x70, 0xa2, 0xe6, 0x50, 0x09, 0x8a, 0x23,
	0x8d, 0x60, 0x53, 0xcd, 0x4b, 0x99, 0xff, 0x7a, 0xc4, 0x3d, 0x57, 0x0b, 0xa8, 0x0a, 0x30, 0x3a,
	0x3a, 0x25, 0xee, 0x99, 0xd4, 0x29, 0xb6, 0x7f, 0x2a, 0x40, 0x75, 0x5a, 0x84, 0x43, 0x67, 0x40,
	0x3f, 0xac, 0xe8, 0x0f, 0x61, 0xcd, 0x63, 0x44, 0x67, 0xc4, 0xf0, 0x5c, 0xa2, 0x73, 0x17, 0x3b,
	0x6c, 0x42, 0x5d, 0x2e, 0xab, 0xbf, 0xfc, 0xa8, 0xc0, 0x5d, 0x8f, 0x68, 0xc8, 0x63, 0xa4, 0x27,
	0x05, 0x4e, 0x42, 0x3e, 0x7a, 0x09, 0x2a, 0x1e, 0xe3, 0x77, 0xd4, 0xd1, 0xd9, 0x8e, 0x6e, 0x50,
	0x67, 0x60, 0x0d, 0x1b, 0xd0, 0x52, 0x3a, 0xe5, 0xed, 0xbb, 0xf3, 0x5c, 0x8b, 0x60, 0xbb, 0xbb,
	0x52, 0xa9, 0xb7, 0xb3, 0x27, 0x55, 0xb4, 0x2a, 0x4e, 0x9c, 0xd1, 0x10, 0xd6, 0xf1, 0x3b, 0x11,
	0x49, 0xdf, 0xa6, 0x7d, 0xbf, 0x99, 0x02, 0xe3, 0x65, 0x69, 0xfc, 0xc1, 0xc5, 0xc6, 0x85, 0xea,
	0x13, 0x9b, 0xf6, 0x25, 0x29, 0x70, 0xb1, 0x86, 0x43, 0x2a, 0x9b, 0x52, 0xd1, 0x9f, 0x60, 0xc5,
	0x70, 0x89, 0x49, 0x1c, 0x6e, 0x61, 0x5b, 0xb7, 0xcc, 0x46, 0xa5, 0xa5, 0x74, 0xf2, 0x5a, 0x65,
	0x4a, 0x3c, 0x34, 0x9b, 0x3f, 0x28, 0x50, 0x4d, 0x06, 0x8c, 0xf6, 0xa1, 0x8a, 0xcf, 0x98, 0x8e,
	0x25, 0xfa, 0xf4, 0x11, 0x39, 0x97, 0x05, 0x2f, 0x6f, 0xff, 0xe1, 0xe2, 0xee, 0xd3, 0x2a, 0xf8,
	0x8c, 0xf9, 0x90, 0xfd, 0x37, 0x39, 0x0f, 0xad, 0x30, 0x62, 0xb8, 0x84, 0x4b, 0x2b, 0xb9, 0x85,
	0xad, 0xf4, 0xa4, 0x92, 0xb0, 0x72, 0x13, 0xca, 0x6c, 0x47, 0x27, 0x8e, 0x39, 0xa1, 0x96, 0xc3,
	0x43, 0x84, 0xb3, 0x9d, 0x83, 0x80, 0x82, 0xb6, 0x60, 0x55, 0xb8, 0x49, 0x26, 0x5a, 0x90, 0x89,
	0xd6, 0xf0, 0x19, 0xdb, 0x8b, 0xe7, 0xba, 0x0e, 0x6b, 0x59, 0xe5, 0x6b, 0x7f, 0x55, 0x84, 0x15,
	0xbf, 0xcc, 0x16, 0xf7, 0xf1, 0xf6, 0x2c, 0x03, 0x6f, 0x77, 0xb2, 0xee, 0x25, 0x50, 0x98, 0x9e,
	0x66, 0xc1, 0xf7, 0x1a, 0x56, 0x64, 0x19, 0x2c, 0xee, 0xcf, 0xcc, 0xa0, 0x0a, 0x7f, 0xbb, 0xc8,
	0x98, 0x7f, 0x1f, 0xaf, 0x48, 0xbf, 0x47, 0xdc, 0x53, 0xcb, 0x20, 0x2c, 0xe4, 0x68, 0x65, 0x51,
	0x9c, 0x30, 0xc8, 0x75, 0x58, 0x72, 0xc9, 0xd0, 0xa2, 0x4e, 0x50, 0x96, 0xe0, 0x84, 0xfe, 0x0c,
	0x35, 0xcb, 0x61, 0x1c, 0x3b, 0x06, 0xd1, 0x2d, 0x53, 0x3f, 0x25, 0x46, 0xa3, 0xd0, 0xca, 0x77,
	0x4a, 0xda, 0x4a, 0x48, 0x3e, 0x34, 0xff, 0x47, 0x0c, 0x81, 0x8f, 0x48, 0x4e, 0xe6, 0x59, 0x94,
	0x66, 0x2a, 0x21, 0x51, 0xc6, 0x9f, 0x02, 0xd1, 0x52, 0x1a, 0x44, 0xe8, 0xff, 0xd0, 0x88, 0x2c,
	0x4d, 0xe8, 0x19, 0x71, 0x75, 0xc6, 0x31, 0x27, 0xd2, 0xf5, 0x95, 0x56, 0xbe, 0x53, 0xdd, 0xbe,
	0x9d, 0x91, 0xef, 0x61, 0xa0, 0x72, 0x2c, 0x34, 0x7a, 0x42, 0x41, 0xbb, 0x6a, 0xa5, 0x68, 0x22,
	0xd2, 0x7f, 0xc1, 0x0d, 0xec, 0x71, 0x1a, 0xd8, 0x1e, 0x63, 0x07, 0x0f, 0xc9, 0x98, 0x38, 0x5c,
	0x27, 0x0e, 0xee, 0xdb, 0xc4, 0x6c, 0x2c, 0xc7, 0x5a, 0xb9, 0x29, 0x44, 0xa5, 0xfe, 0x8b, 0x48,
	0xf0, 0xc0, 0x97, 0x43, 0x2d, 0xa8, 0x58, 0x4c, 0x77, 0x09, 0x36, 0x75, 0xea, 0xd8, 0xe7, 0x8d,
	0x92, 0xd0, 0xd3, 0xc0, 0x62, 0x62, 0x2c, 0x1d, 0x39, 0xf6, 0x39, 0xfa, 0x07, 0x5c, 0xb3, 0x31,
	0xe3, 0xfa, 0x80, 0x70, 0xe3, 0xad, 0x8e, 0x6d, 0xe2, 0x72, 0x9d, 0x5b, 0x63, 0xa2, 0x7b, 0x8c,
	0x18, 0x4c, 0xf6, 0x7f, 0x5e, 0xdb, 0x10, 0x22, 0x4f, 0x85, 0xc4, 0xae, 0x10, 0x38, 0xb1, 0xc6,
	0xe4, 0xa5, 0x60, 0x37, 0x77, 0x60, 0x73, 0xee, 0xe5, 0xc5, 0xee, 0x4b, 0x89, 0xdf, 0x57, 0x7b,
	0x27, 0x86, 0x3e, 0x59, 0xf3, 0x75, 0x40, 0xa3, 0x94, 0x99, 0xe0, 0x79, 0x92, 0x00, 0x56, 0x73,
	0xed, 0x1f, 0x2b, 0x50, 0x93, 0x5a, 0x3e, 0x86, 0xa5, 0x03, 0x0d, 0x6a, 0xd3, 0x6b, 0x61, 0xb2,
	0xfa, 0x4a, 0x2b, 0xdf, 0x29, 0x67, 0x42, 0x77, 0xaa, 0xd7, 0x9d, 0x36, 0x09, 0xd3, 0xaa, 0x31,
	0x0b, 0xa2, 0xf4, 0x77, 0x61, 0xd5, 0xa6, 0x43, 0xcb, 0xc0, 0xb6, 0x2c, 0x03, 0xe3, 0x78, 0x3c,
	0x91, 0x18, 0xce, 0x6b, 0x6a, 0xc0, 0x38, 0x09, 0xe9, 0xcd, 0xef, 0xca, 0x50, 0x8e, 0x19, 0x43,
	0xff, 0x84, 0xc2, 0xfb, 0x35, 0x90, 0x54, 0x43, 0xa7, 0x50, 0x4f, 0xf6, 0xb6, 0x9f, 0x53, 0x4e,
	0xe6, 0xf4, 0x74, 0xe1, 0x9c, 0xd2, 0xfd, 0x14, 0x4f, 0x78, 0x35, 0x31, 0x25, 0x64, 0xce, 0x7f,
	0x87, 0x4d, 0x93, 0x0c, 0xb0, 0x67, 0x73, 0x3d, 0x3d, 0x5b, 0xf2, 0x32, 0xf7, 0xf5, 0x40, 0x60,
	0x37, 0x39, 0x62, 0xd0, 0x17, 0x0a, 0xdc, 0xf0, 0xa7, 0x3b, 0xf3, 0x7d, 0xa5, 0xa2, 0x2f, 0xc8,
	0xe8, 0x77, 0x2f, 0x11, 0xbd, 0x30, 0x17, 0x44, 0x1e, 0x0f, 0xbc, 0x89, 0xb3, 0x19, 0x22, 0x83,
	0x58, 0x18, 0x9c, 0xba, 0x78, 0x98, 0x0e, 0xa3, 0xf8, 0x7e, 0x61, 0xf8, 0xd6, 0x32, 0xc2, 0x48,
	0x31, 0x44, 0x18, 0xdb, 0x70, 0x35, 0x2c, 0x64, 0xd6, 0x10, 0xa9, 0x07, 0xcc, 0x44, 0x05, 0x8f,
	0xe2, 0x20, 0xf6, 0xe7, 0xd2, 0x95, 0xcc, 0xf7, 0x3e, 0x12, 0x12, 0x88, 0x79, 0xb4, 0x3c, 0x0a,
	0x2a, 0x11, 0x47, 0xb0, 0xe0, 0x34, 0x7f, 0x53, 0xe0, 0xfa, 0x45, 0x08, 0x48, 0x8f, 0x38, 0x25,
	0x63, 0xc4, 0xfd, 0x25, 0x11, 0x96, 0x5c, 0xb7, 0x72, 0xb2, 0x8b, 0x63, 0xee, 0xe4, 0xca, 0x95,
	0x7e, 0x3d, 0xf3, 0x1f, 0xe5, 0xf5, 0x2c, 0x5c, 0xfe, 0xf5, 0x6c, 0x7e, 0x9b, 0x83, 0x8d, 0x39,
	0xf0, 0xf9, 0xc8, 0x59, 0x6f, 0xc3, 0xd5, 0x00, 0x6f, 0x5e, 0x9f, 0x19, 0xae, 0x35, 0x91, 0xab,
	0x7b, 0xd0, 0x2e, 0x25, 0xad, 0xee, 0x83, 0x24, 0xc6, 0x3b, 0x34, 0xd1, 0x2d, 0xa8, 0x06, 0x3b,
	0xd9, 0xc0, 0xb2, 0x49, 0xf8, 0x6e, 0x57, 0xb4, 0x8a, 0x4f, 0x7d, 0x6a, 0xd9, 0xe4, 0xd0, 0x44,
	0x07, 0x50, 0xf5, 0x2d, 0x7b, 0x8c, 0xb8, 0x32, 0x82, 0xe2, 0x42, 0x95, 0x58, 0x91, 0x5a, 0x2f,
	0x03, 0xa5, 0xa9, 0x99, 0x09, 0x66, 0xec, 0x8c, 0xba, 0x3e, 0x06, 0x17, 0x35, 0x73, 0x1c, 0x28,
	0x35, 0x7f, 0x56, 0xc2, 0x8a, 0xa6, 0x00, 0xbf, 0x58, 0x45, 0xb5, 0xa8, 0x50, 0x41, 0x63, 0x62,
	0xc3, 0xa0, 0x9e, 0xc3, 0x17, 0xdc, 0x8e, 0xea, 0xf1, 0x6e, 0xdb, 0xf5, 0x55, 0xd1, 0x33, 0x50,
	0xc3, 0x99, 0x13, 0xc1, 0x65, 0x31, 0xd0, 0x55, 0x83, 0x19, 0x12, 0xae, 0x5b, 0xd3, 0x27, 0xaa,
	0x90, 0x78, 0xa2, 0xbe, 0x2f, 0xc1, 0xe6, 0x1b, 0xe2, 0xb1, 0xc4, 0x80, 0xb0, 0xf8, 0x31, 0x76,
	0xf1, 0x98, 0xa1, 0xcf, 0xa0, 0x11, 0x4b, 0xdc, 0x5f, 0x66, 0xf5, 0x89, 0xe4, 0x05, 0xab, 0xe3,
	0x41, 0x32, 0x8e, 0xb9, 0xa6, 0x62, 0x5d, 0xed, 0xb3, 0x3c, 0x57, 0x7e, 0xa9, 0xf9, 0x5c, 0x6d,
	0xdd, 0x98, 0x61, 0xfb, 0xf4, 0x26, 0x86, 0xfa, 0xee, 0xab, 0xde, 0x54, 0x37, 0x88, 0xeb, 0x56,
	0xe6, 0x22, 0x5b, 0x9a, 0x69, 0xb5, 0x5b, 0x99, 0x8b, 0x6a, 0x69, 0xa6, 0x95, 0xbe, 0x11, 0x53,
	0x24, 0xb3, 0x95, 0x02, 0x67, 0x73, 0x3b, 0x40, 0xb9, 0x4c, 0x07, 0xe4, 0x32, 0x3a, 0xe0, 0x76,
	0xaa, 0x03, 0xfc, 0xa6, 0x9a, 0x41, 0xf8, 0xed, 0x14, 0xc2, 0x0b, 0x31, 0xb1, 0x08, 0xc1, 0x5f,
	0x46, 0x89, 0xcc, 0x22, 0x38, 0x95, 0xc8, 0x0c, 0x42, 0x13, 0x89, 0x24, 0x11, 0xd8, 0xc9, 0x40,
	0x60, 0x30, 0x28, 0xe6, 0x22, 0x2c, 0xb1, 0xb4, 0x36, 0x7f, 0x29, 0xc0, 0x8d, 0x0b, 0x2f, 0xff,
	0x43, 0x97, 0x09, 0x13, 0x6a, 0x33, 0xcb, 0x44, 0xd0, 0x72, 0x8f, 0x17, 0xc5, 0x66, 0x06, 0xc4,
	0xb4, 0x6a, 0x72, 0x7b, 0x40, 0xf7, 0xa1, 0x9e, 0x7e, 0xf1, 0x98, 0xcc, 0x75, 0x59, 0x43, 0xa9,
	0xf7, 0x8e, 0x65, 0x4d, 0xd8, 0x42, 0xe6, 0x84, 0xfd, 0x5c, 0x81, 0xcd, 0xb9, 0x9b, 0x45, 0x30,
	0x13, 0xf7, 0x17, 0x4e, 0xe5, 0x02, 0x24, 0x6b, 0x1b, 0x73, 0x16, 0x8b, 0x78, 0x08, 0xe9, 0xad,
	0x22, 0x98, 0xa7, 0x97, 0x0c, 0x21, 0x1b, 0x83, 0x61, 0x08, 0xe9, 0x19, 0xfb, 0xb1, 0xb7, 0x83,
	0xad, 0xbf, 0xc6, 0xff, 0x6b, 0x90, 0xdb, 0xf7, 0x0a, 0x94, 0x46, 0xe1, 0x17, 0xb1, 0xaa, 0xa0,
	0x3a, 0xd4, 0x46, 0xc9, 0xaf, 0x46, 0x35, 0xb7, 0x75, 0x0f, 0xaa, 0x49, 0x0f, 0xa8, 0x02, 0x91,
	0x0f, 0x55, 0xf1, 0x4f, 0x7e, 0xf4, 0x6a, 0x6e, 0xcb, 0x85, 0x8d, 0x39, 0x1f, 0x3c, 0xd2, 0x59,
	0x8f, 0x63, 0x97, 0x5b, 0xce, 0x30, 0xd2, 0xc3, 0x2e, 0x27, 0xa6, 0x9a, 0x93, 0x27, 0xcd, 0x73,
	0x1c, 0xc1, 0xcb, 0x07, 0xa2, 0x74, 0x32, 0x11, 0xc7, 0x42, 0xe8, 0x62, 0x32, 0x21, 0xa6, 0x5a,
	0x44, 0x35, 0x28, 0x8f, 0x4e, 0x88, 0x3b, 0xb6, 0x1c, 0x31, 0xdd, 0xd5, 0xa5, 0x27, 0x0f, 0x61,
	0xd3, 0xa0, 0xe3, 0x64, 0x51, 0xe4, 0xdf, 0x75, 0x7d, 0x6f, 0xf0, 0xa4, 0x9e, 0xfc, 0x53, 0xe1,
	0x58, 0xd0, 0xdf, 0x14, 0x84, 0xcc, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xfd, 0x0a, 0x82,
	0xea, 0x13, 0x00, 0x00,
}
