// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ergon/ergon_interface.proto

package ergon

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/base"
	net "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/net"
	math "math"
)

import (
	"errors"
	util_net "github.com/nutanix-core/acs-aos-go/nutanix/util-go/net"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BatchRequestArg struct {
	// A list of methods and serialized arguments.
	RequestList          []*MetaRequest `protobuf:"bytes,1,rep,name=request_list,json=requestList" json:"request_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BatchRequestArg) Reset()         { *m = BatchRequestArg{} }
func (m *BatchRequestArg) String() string { return proto.CompactTextString(m) }
func (*BatchRequestArg) ProtoMessage()    {}
func (*BatchRequestArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{0}
}

func (m *BatchRequestArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRequestArg.Unmarshal(m, b)
}
func (m *BatchRequestArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRequestArg.Marshal(b, m, deterministic)
}
func (m *BatchRequestArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequestArg.Merge(m, src)
}
func (m *BatchRequestArg) XXX_Size() int {
	return xxx_messageInfo_BatchRequestArg.Size(m)
}
func (m *BatchRequestArg) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequestArg.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequestArg proto.InternalMessageInfo

func (m *BatchRequestArg) GetRequestList() []*MetaRequest {
	if m != nil {
		return m.RequestList
	}
	return nil
}

type BatchRequestRet struct {
	// A list of responses, in the same order as the provided methods.
	ResponseList         []*MetaResponse `protobuf:"bytes,1,rep,name=response_list,json=responseList" json:"response_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BatchRequestRet) Reset()         { *m = BatchRequestRet{} }
func (m *BatchRequestRet) String() string { return proto.CompactTextString(m) }
func (*BatchRequestRet) ProtoMessage()    {}
func (*BatchRequestRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{1}
}

func (m *BatchRequestRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchRequestRet.Unmarshal(m, b)
}
func (m *BatchRequestRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchRequestRet.Marshal(b, m, deterministic)
}
func (m *BatchRequestRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequestRet.Merge(m, src)
}
func (m *BatchRequestRet) XXX_Size() int {
	return xxx_messageInfo_BatchRequestRet.Size(m)
}
func (m *BatchRequestRet) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequestRet.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequestRet proto.InternalMessageInfo

func (m *BatchRequestRet) GetResponseList() []*MetaResponse {
	if m != nil {
		return m.ResponseList
	}
	return nil
}

type TaskCreateArg struct {
	// Optional.
	//
	// The task identifier. This can be specified for idempotence. If not
	// specified, then Ergon will generate one. If task with specified uuid
	// already exists, then Ergon simply treats it as successful task creation
	// and returns same uuid in TaskCreateRet.
	//
	// All uuid fields in *Arg and *Ret messages, are exactly 16 byte string.
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// Optional.
	//
	// The request that spawned the task. This is an opaque argument
	// for the Task service.
	Request *MetaRequest `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
	// Optional.
	//
	// List of entities that the task is impacting.
	EntityList []*EntityId `protobuf:"bytes,4,rep,name=entity_list,json=entityList" json:"entity_list,omitempty"`
	// Required.
	//
	// Operation type e.g. "CreateVM", "DeleteVM".
	// Value in this field is not interpreted by Ergon. This value is only used
	// during filtering tasks.
	OperationType *string `protobuf:"bytes,5,opt,name=operation_type,json=operationType" json:"operation_type,omitempty"`
	// Optional.
	//
	// Message describing the task. Can be used by UI to display human readable
	// status of operation. Opaque for Ergon.
	Message *string `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	// Optional.
	//
	// The parent task UUID. This attribute allows marking a task as a sub-task.
	// This is immutable once it is set.
	ParentTaskUuid []byte `protobuf:"bytes,7,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Required.
	//
	// Component that owns the task. It specifies the component that should
	// execute the task.
	Component *string `protobuf:"bytes,8,opt,name=component" json:"component,omitempty"`
	// Optional.
	//
	// Total steps associated with task.
	TotalSteps *int64 `protobuf:"varint,9,opt,name=total_steps,json=totalSteps" json:"total_steps,omitempty"`
	// Optional.
	//
	// Unit for steps. For eg. this could be MB for usecases involving
	// tranferring bytes. For most use cases, the unit will just be steps.
	StepsUnit *Task_StepsUnit `protobuf:"varint,10,opt,name=steps_unit,json=stepsUnit,enum=nutanix.ergon.Task_StepsUnit,def=1" json:"steps_unit,omitempty"`
	// Optional.
	//
	// Opaque object that can be used as a WAL or any other internal purpose.
	InternalOpaque []byte `protobuf:"bytes,11,opt,name=internal_opaque,json=internalOpaque" json:"internal_opaque,omitempty"`
	// Specify whether the task is internal. Internal tasks are not meant to be
	// shown on UI.
	InternalTask *bool `protobuf:"varint,13,opt,name=internal_task,json=internalTask,def=0" json:"internal_task,omitempty"`
	// Optional. Create time of the task in usecs. If not specified, Ergon uses
	// current time as value of this field.
	CreateTimeUsecs *uint64 `protobuf:"fixed64,14,opt,name=create_time_usecs,json=createTimeUsecs" json:"create_time_usecs,omitempty"`
	// Start time in microseconds from epoch. This is set when the status of
	// task changes to kRunning.
	StartTimeUsecs *uint64 `protobuf:"fixed64,15,opt,name=start_time_usecs,json=startTimeUsecs" json:"start_time_usecs,omitempty"`
	// Completion time in microseconds from epoch. Unset for ongoing tasks.
	CompleteTimeUsecs *uint64 `protobuf:"fixed64,16,opt,name=complete_time_usecs,json=completeTimeUsecs" json:"complete_time_usecs,omitempty"`
	// Last time the task was updated from epoch.
	LastUpdatedTimeUsecs *uint64 `protobuf:"fixed64,17,opt,name=last_updated_time_usecs,json=lastUpdatedTimeUsecs" json:"last_updated_time_usecs,omitempty"`
	// Optional.
	//
	// The task completion information. This is an opaque argument for
	// Ergon.
	Response *MetaResponse `protobuf:"bytes,18,opt,name=response" json:"response,omitempty"`
	// Optional.
	//
	// Percentage of task completed.
	PercentageComplete *int32 `protobuf:"varint,19,opt,name=percentage_complete,json=percentageComplete" json:"percentage_complete,omitempty"`
	// Optional.
	//
	// Current status of this task.
	Status *Task_Status `protobuf:"varint,20,opt,name=status,enum=nutanix.ergon.Task_Status" json:"status,omitempty"`
	// Optional.
	//
	// Total steps completed. If steps_completed is specified then total_steps
	// must also be specified.
	StepsCompleted *int64 `protobuf:"varint,21,opt,name=steps_completed,json=stepsCompleted" json:"steps_completed,omitempty"`
	// The task operation type name to be displayed in the UI. This allows the
	// task to optionally specify the name of its operation. In case it isn't
	// specified, Prism parses the name from the operation type. This field is
	// opaque to Ergon.
	DisplayName *string `protobuf:"bytes,22,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Only set when parent_task_uuid is set.  Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,23,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures *bool `protobuf:"varint,24,opt,name=display_failures,json=displayFailures,def=1" json:"display_failures,omitempty"`
	// Set this flag to false when sub-task(s) needs to be created for
	// already completed task.
	FailIfParentTaskIsCompleted *bool `protobuf:"varint,25,opt,name=fail_if_parent_task_is_completed,json=failIfParentTaskIsCompleted,def=0" json:"fail_if_parent_task_is_completed,omitempty"`
	// How much this task contributes to progress of parent task relative to
	// other subtasks.
	Weight *uint64 `protobuf:"varint,26,opt,name=weight,def=1000" json:"weight,omitempty"`
	// List of capabilities of this task.
	// If not declared during task creation, operations such as cancellation and
	// suspension will be blocked from Ergon framework side.
	// Set of capabilities on a particular task can change; for example, a task
	// is allowed to move into a phase where it is no longer cancelable.
	Capabilities []Task_Capability `protobuf:"varint,27,rep,name=capabilities,enum=nutanix.ergon.Task_Capability" json:"capabilities,omitempty"`
	// Optional.
	//
	// Reason why this task was created. This will be displayed on UI.
	// Examples:
	//     "Host {0} went down"
	//     "Disk {1} is full"
	Reason *string `protobuf:"bytes,28,opt,name=reason" json:"reason,omitempty"`
	// For Ergon's internal use only.
	//
	// Indicates whether this request was forwarded by non-master Ergon instance.
	Forwarded      *bool                  `protobuf:"varint,29,opt,name=forwarded" json:"forwarded,omitempty"`
	RequestContext *net.RpcRequestContext `protobuf:"bytes,30,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	// Use barrier update while marking this task as completed.
	//
	// A barrier update will ensure that all entities modified by this task's
	// execution are synced to PC before marking this task as complete.
	UseSyncBarrier *bool `protobuf:"varint,31,opt,name=use_sync_barrier,json=useSyncBarrier,def=0" json:"use_sync_barrier,omitempty"`
	// Disable auto progress update of tasks by Ergon.
	//
	// If set to True, progress of this task is *not* automatically updated
	// based on progress of subtasks.
	DisableAutoProgressUpdate *bool    `protobuf:"varint,32,opt,name=disable_auto_progress_update,json=disableAutoProgressUpdate,def=0" json:"disable_auto_progress_update,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *TaskCreateArg) Reset()         { *m = TaskCreateArg{} }
func (m *TaskCreateArg) String() string { return proto.CompactTextString(m) }
func (*TaskCreateArg) ProtoMessage()    {}
func (*TaskCreateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{2}
}

func (m *TaskCreateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskCreateArg.Unmarshal(m, b)
}
func (m *TaskCreateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskCreateArg.Marshal(b, m, deterministic)
}
func (m *TaskCreateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskCreateArg.Merge(m, src)
}
func (m *TaskCreateArg) XXX_Size() int {
	return xxx_messageInfo_TaskCreateArg.Size(m)
}
func (m *TaskCreateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskCreateArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskCreateArg proto.InternalMessageInfo

const Default_TaskCreateArg_StepsUnit Task_StepsUnit = Task_kSteps
const Default_TaskCreateArg_InternalTask bool = false
const Default_TaskCreateArg_DisplayFailures bool = true
const Default_TaskCreateArg_FailIfParentTaskIsCompleted bool = false
const Default_TaskCreateArg_Weight uint64 = 1000
const Default_TaskCreateArg_UseSyncBarrier bool = false
const Default_TaskCreateArg_DisableAutoProgressUpdate bool = false

func (m *TaskCreateArg) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *TaskCreateArg) GetRequest() *MetaRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *TaskCreateArg) GetEntityList() []*EntityId {
	if m != nil {
		return m.EntityList
	}
	return nil
}

func (m *TaskCreateArg) GetOperationType() string {
	if m != nil && m.OperationType != nil {
		return *m.OperationType
	}
	return ""
}

func (m *TaskCreateArg) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *TaskCreateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *TaskCreateArg) GetComponent() string {
	if m != nil && m.Component != nil {
		return *m.Component
	}
	return ""
}

func (m *TaskCreateArg) GetTotalSteps() int64 {
	if m != nil && m.TotalSteps != nil {
		return *m.TotalSteps
	}
	return 0
}

func (m *TaskCreateArg) GetStepsUnit() Task_StepsUnit {
	if m != nil && m.StepsUnit != nil {
		return *m.StepsUnit
	}
	return Default_TaskCreateArg_StepsUnit
}

func (m *TaskCreateArg) GetInternalOpaque() []byte {
	if m != nil {
		return m.InternalOpaque
	}
	return nil
}

func (m *TaskCreateArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return Default_TaskCreateArg_InternalTask
}

func (m *TaskCreateArg) GetCreateTimeUsecs() uint64 {
	if m != nil && m.CreateTimeUsecs != nil {
		return *m.CreateTimeUsecs
	}
	return 0
}

func (m *TaskCreateArg) GetStartTimeUsecs() uint64 {
	if m != nil && m.StartTimeUsecs != nil {
		return *m.StartTimeUsecs
	}
	return 0
}

func (m *TaskCreateArg) GetCompleteTimeUsecs() uint64 {
	if m != nil && m.CompleteTimeUsecs != nil {
		return *m.CompleteTimeUsecs
	}
	return 0
}

func (m *TaskCreateArg) GetLastUpdatedTimeUsecs() uint64 {
	if m != nil && m.LastUpdatedTimeUsecs != nil {
		return *m.LastUpdatedTimeUsecs
	}
	return 0
}

func (m *TaskCreateArg) GetResponse() *MetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *TaskCreateArg) GetPercentageComplete() int32 {
	if m != nil && m.PercentageComplete != nil {
		return *m.PercentageComplete
	}
	return 0
}

func (m *TaskCreateArg) GetStatus() Task_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Task_kQueued
}

func (m *TaskCreateArg) GetStepsCompleted() int64 {
	if m != nil && m.StepsCompleted != nil {
		return *m.StepsCompleted
	}
	return 0
}

func (m *TaskCreateArg) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *TaskCreateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *TaskCreateArg) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return Default_TaskCreateArg_DisplayFailures
}

func (m *TaskCreateArg) GetFailIfParentTaskIsCompleted() bool {
	if m != nil && m.FailIfParentTaskIsCompleted != nil {
		return *m.FailIfParentTaskIsCompleted
	}
	return Default_TaskCreateArg_FailIfParentTaskIsCompleted
}

func (m *TaskCreateArg) GetWeight() uint64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return Default_TaskCreateArg_Weight
}

func (m *TaskCreateArg) GetCapabilities() []Task_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *TaskCreateArg) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *TaskCreateArg) GetForwarded() bool {
	if m != nil && m.Forwarded != nil {
		return *m.Forwarded
	}
	return false
}

func (m *TaskCreateArg) GetRequestContext() *net.RpcRequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *TaskCreateArg) GetUseSyncBarrier() bool {
	if m != nil && m.UseSyncBarrier != nil {
		return *m.UseSyncBarrier
	}
	return Default_TaskCreateArg_UseSyncBarrier
}

func (m *TaskCreateArg) GetDisableAutoProgressUpdate() bool {
	if m != nil && m.DisableAutoProgressUpdate != nil {
		return *m.DisableAutoProgressUpdate
	}
	return Default_TaskCreateArg_DisableAutoProgressUpdate
}

type TaskCreateRet struct {
	// Task identifier.
	Uuid                 []byte   `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskCreateRet) Reset()         { *m = TaskCreateRet{} }
func (m *TaskCreateRet) String() string { return proto.CompactTextString(m) }
func (*TaskCreateRet) ProtoMessage()    {}
func (*TaskCreateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{3}
}

func (m *TaskCreateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskCreateRet.Unmarshal(m, b)
}
func (m *TaskCreateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskCreateRet.Marshal(b, m, deterministic)
}
func (m *TaskCreateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskCreateRet.Merge(m, src)
}
func (m *TaskCreateRet) XXX_Size() int {
	return xxx_messageInfo_TaskCreateRet.Size(m)
}
func (m *TaskCreateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskCreateRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskCreateRet proto.InternalMessageInfo

func (m *TaskCreateRet) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type TaskUpdateArg struct {
	// Required.
	//
	// The task identifier.
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// Required.
	//
	// The logical timestamp.
	LogicalTimestamp *int64 `protobuf:"varint,2,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// Optional.
	//
	// The task completion information. This is an opaque argument for
	// Ergon.
	Response *MetaResponse `protobuf:"bytes,3,opt,name=response" json:"response,omitempty"`
	// Optional.
	//
	// List of entities that the task is impacting. This list will be appended to
	// the existing list of entities.
	EntityList []*EntityId `protobuf:"bytes,4,rep,name=entity_list,json=entityList" json:"entity_list,omitempty"`
	// Optional.
	//
	// Message describing the task.
	Message *string `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	// Optional.
	//
	// Percentage of task completed.
	PercentageComplete *int32 `protobuf:"varint,6,opt,name=percentage_complete,json=percentageComplete" json:"percentage_complete,omitempty"`
	// Optional.
	//
	// Current status of this task.
	Status *Task_Status `protobuf:"varint,7,opt,name=status,enum=nutanix.ergon.Task_Status" json:"status,omitempty"`
	// Optional.
	//
	// Total steps associated with task. This can change over time, as service
	// comes to know more about task.
	TotalSteps *int64 `protobuf:"varint,8,opt,name=total_steps,json=totalSteps" json:"total_steps,omitempty"`
	// Optional.
	//
	// Total steps completed. If steps_completed is specified then total_steps
	// must also be specified.
	StepsCompleted *int64 `protobuf:"varint,9,opt,name=steps_completed,json=stepsCompleted" json:"steps_completed,omitempty"`
	// Optional.
	//
	// Unit for steps. For eg. this could be MB for usecases involving
	// tranferring bytes. For most use cases, the unit will just be steps.
	// This is immutable once it is set.
	StepsUnit *Task_StepsUnit `protobuf:"varint,10,opt,name=steps_unit,json=stepsUnit,enum=nutanix.ergon.Task_StepsUnit,def=1" json:"steps_unit,omitempty"`
	// Optional.
	//
	// Opaque object that can be used as a WAL or any other internal purpose.
	InternalOpaque []byte `protobuf:"bytes,11,opt,name=internal_opaque,json=internalOpaque" json:"internal_opaque,omitempty"`
	// Optional.
	ParentTaskUuid []byte `protobuf:"bytes,13,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// Start time in microseconds from epoch. The task start time is automatically
	// set by Ergon when the task status changes to kRunning, but the caller can
	// override by setting this field.
	StartTimeUsecs *uint64 `protobuf:"fixed64,14,opt,name=start_time_usecs,json=startTimeUsecs" json:"start_time_usecs,omitempty"`
	// If task has canceled flag set, then fail this update operation
	// with kTaskCanceled error.
	FailIfTaskIsCanceled *bool `protobuf:"varint,15,opt,name=fail_if_task_is_canceled,json=failIfTaskIsCanceled,def=0" json:"fail_if_task_is_canceled,omitempty"`
	// Set this flag to false to allow marking a task as completed even if it
	// has pending subtask(s).
	FailIfCompletedTaskHasPendingSubtasks *bool `protobuf:"varint,16,opt,name=fail_if_completed_task_has_pending_subtasks,json=failIfCompletedTaskHasPendingSubtasks,def=1" json:"fail_if_completed_task_has_pending_subtasks,omitempty"`
	// Only set when parent_task_uuid is set.  Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,17,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// List of capabilities of this task.
	// Overwrites previous value.
	Capabilities []Task_Capability `protobuf:"varint,18,rep,name=capabilities,enum=nutanix.ergon.Task_Capability" json:"capabilities,omitempty"`
	// Any information that can be helpful while debugging.
	// For example, if task has failed then it can contain stack-trace.
	// If task is successful, then it can contain a trace record in human
	// readable format.
	DebugInfo *string `protobuf:"bytes,19,opt,name=debug_info,json=debugInfo" json:"debug_info,omitempty"`
	// Optional.
	//
	// String describing what exactly the task is currently doing. This can
	// change as the task progresses into phases. The string will be
	// displayed on UI hence should be user-friendly. This string can
	// refer entities from `entity_list` with their index.
	//
	// Examples:
	//   "Copying installer to node {3}"
	//   "Waiting for shutdown token"
	//   "Rebooting node {1}"
	ProgressMessage *string `protobuf:"bytes,20,opt,name=progress_message,json=progressMessage" json:"progress_message,omitempty"`
	// Specify whether the task is internal. Internal tasks are not meant to be
	// shown on UI.
	InternalTask         *bool    `protobuf:"varint,21,opt,name=internal_task,json=internalTask,def=0" json:"internal_task,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskUpdateArg) Reset()         { *m = TaskUpdateArg{} }
func (m *TaskUpdateArg) String() string { return proto.CompactTextString(m) }
func (*TaskUpdateArg) ProtoMessage()    {}
func (*TaskUpdateArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{4}
}

func (m *TaskUpdateArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskUpdateArg.Unmarshal(m, b)
}
func (m *TaskUpdateArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskUpdateArg.Marshal(b, m, deterministic)
}
func (m *TaskUpdateArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskUpdateArg.Merge(m, src)
}
func (m *TaskUpdateArg) XXX_Size() int {
	return xxx_messageInfo_TaskUpdateArg.Size(m)
}
func (m *TaskUpdateArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskUpdateArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskUpdateArg proto.InternalMessageInfo

const Default_TaskUpdateArg_LogicalTimestamp int64 = -1
const Default_TaskUpdateArg_StepsUnit Task_StepsUnit = Task_kSteps
const Default_TaskUpdateArg_FailIfTaskIsCanceled bool = false
const Default_TaskUpdateArg_FailIfCompletedTaskHasPendingSubtasks bool = true
const Default_TaskUpdateArg_InternalTask bool = false

func (m *TaskUpdateArg) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *TaskUpdateArg) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_TaskUpdateArg_LogicalTimestamp
}

func (m *TaskUpdateArg) GetResponse() *MetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *TaskUpdateArg) GetEntityList() []*EntityId {
	if m != nil {
		return m.EntityList
	}
	return nil
}

func (m *TaskUpdateArg) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *TaskUpdateArg) GetPercentageComplete() int32 {
	if m != nil && m.PercentageComplete != nil {
		return *m.PercentageComplete
	}
	return 0
}

func (m *TaskUpdateArg) GetStatus() Task_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Task_kQueued
}

func (m *TaskUpdateArg) GetTotalSteps() int64 {
	if m != nil && m.TotalSteps != nil {
		return *m.TotalSteps
	}
	return 0
}

func (m *TaskUpdateArg) GetStepsCompleted() int64 {
	if m != nil && m.StepsCompleted != nil {
		return *m.StepsCompleted
	}
	return 0
}

func (m *TaskUpdateArg) GetStepsUnit() Task_StepsUnit {
	if m != nil && m.StepsUnit != nil {
		return *m.StepsUnit
	}
	return Default_TaskUpdateArg_StepsUnit
}

func (m *TaskUpdateArg) GetInternalOpaque() []byte {
	if m != nil {
		return m.InternalOpaque
	}
	return nil
}

func (m *TaskUpdateArg) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *TaskUpdateArg) GetStartTimeUsecs() uint64 {
	if m != nil && m.StartTimeUsecs != nil {
		return *m.StartTimeUsecs
	}
	return 0
}

func (m *TaskUpdateArg) GetFailIfTaskIsCanceled() bool {
	if m != nil && m.FailIfTaskIsCanceled != nil {
		return *m.FailIfTaskIsCanceled
	}
	return Default_TaskUpdateArg_FailIfTaskIsCanceled
}

func (m *TaskUpdateArg) GetFailIfCompletedTaskHasPendingSubtasks() bool {
	if m != nil && m.FailIfCompletedTaskHasPendingSubtasks != nil {
		return *m.FailIfCompletedTaskHasPendingSubtasks
	}
	return Default_TaskUpdateArg_FailIfCompletedTaskHasPendingSubtasks
}

func (m *TaskUpdateArg) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *TaskUpdateArg) GetCapabilities() []Task_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *TaskUpdateArg) GetDebugInfo() string {
	if m != nil && m.DebugInfo != nil {
		return *m.DebugInfo
	}
	return ""
}

func (m *TaskUpdateArg) GetProgressMessage() string {
	if m != nil && m.ProgressMessage != nil {
		return *m.ProgressMessage
	}
	return ""
}

func (m *TaskUpdateArg) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return Default_TaskUpdateArg_InternalTask
}

type TaskUpdateRet struct {
	// Updated task.
	Task                 *Task    `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskUpdateRet) Reset()         { *m = TaskUpdateRet{} }
func (m *TaskUpdateRet) String() string { return proto.CompactTextString(m) }
func (*TaskUpdateRet) ProtoMessage()    {}
func (*TaskUpdateRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{5}
}

func (m *TaskUpdateRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskUpdateRet.Unmarshal(m, b)
}
func (m *TaskUpdateRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskUpdateRet.Marshal(b, m, deterministic)
}
func (m *TaskUpdateRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskUpdateRet.Merge(m, src)
}
func (m *TaskUpdateRet) XXX_Size() int {
	return xxx_messageInfo_TaskUpdateRet.Size(m)
}
func (m *TaskUpdateRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskUpdateRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskUpdateRet proto.InternalMessageInfo

func (m *TaskUpdateRet) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type TaskPollArg struct {
	// The maximum amount of time to wait, in seconds. This is only a hint, and
	// the poll may return earlier, even though none of the pollable objects have
	// become ready.
	TimeoutSec         *uint64                       `protobuf:"varint,1,opt,name=timeout_sec,json=timeoutSec,def=60" json:"timeout_sec,omitempty"`
	NewTasksFilterList []*TaskPollArg_NewTasksFilter `protobuf:"bytes,2,rep,name=new_tasks_filter_list,json=newTasksFilterList" json:"new_tasks_filter_list,omitempty"`
	// This is a list of task uuids. TaskPoll returns whenever there is request
	// to cancel any of the tasks specified in this list.
	// Tasks requested for cancellation will be returned in
	// TaskPollRet.canceled_tasks.
	CanceledTasksFilter [][]byte `protobuf:"bytes,3,rep,name=canceled_tasks_filter,json=canceledTasksFilter" json:"canceled_tasks_filter,omitempty"`
	// This is a list of task uuids. TaskPoll returns when any of tasks specified
	// by these uuids, is in its final state (i.e. kSucceeded, kAborted
	// or kFailed). Completed tasks will be returned in
	// TaskPollRet.completed_tasks list.
	CompletedTasksFilter  [][]byte                         `protobuf:"bytes,4,rep,name=completed_tasks_filter,json=completedTasksFilter" json:"completed_tasks_filter,omitempty"`
	ChangedTaskFilterList []*TaskPollArg_ChangedTaskFilter `protobuf:"bytes,5,rep,name=changed_task_filter_list,json=changedTaskFilterList" json:"changed_task_filter_list,omitempty"`
	// String identifier used to identify specific TaskPoll RPC call.
	//
	// It is up to clients to not issue more than one TaskPoll call with the same
	// request_id value. Although Ergon does not reject TaskPoll requests with
	// duplicate request_id, clients should not issue such TaskPoll requests.
	// Clients can reuse request_id across TaskPoll calls. It is recommended to
	// include component name as part of request_id e.g.
	// "acropolis:task_completion_poller", "uhura:task_cancellation_poller".
	//
	// Specifying request_id is optional. Clients won't be able to cancel
	// TaskPoll requests which do not have request_id set.
	RequestId                          *string                                       `protobuf:"bytes,6,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	RequestedStateTransitionFilterList []*TaskPollArg_RequestedStateTransitionFilter `protobuf:"bytes,7,rep,name=requested_state_transition_filter_list,json=requestedStateTransitionFilterList" json:"requested_state_transition_filter_list,omitempty"`
	// For Ergon's internal use only.
	//
	// Indicates whether this request was forwarded by non-master Ergon instance.
	Forwarded *bool `protobuf:"varint,8,opt,name=forwarded" json:"forwarded,omitempty"`
	// If the request_context has should_authorize field set to True,
	// user_uuid should be filled in.
	// RBAC is currently supported on PC only.
	// If the request is to be RBACed, then only completed_tasks_filter must be
	// filled in as it is intended to be used only in v3/tasks/poll API code.
	// The v3/tasks/poll API only takes completed_tasks_filter as argument.
	RequestContext       *net.RpcRequestContext `protobuf:"bytes,9,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TaskPollArg) Reset()         { *m = TaskPollArg{} }
func (m *TaskPollArg) String() string { return proto.CompactTextString(m) }
func (*TaskPollArg) ProtoMessage()    {}
func (*TaskPollArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{6}
}

func (m *TaskPollArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskPollArg.Unmarshal(m, b)
}
func (m *TaskPollArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskPollArg.Marshal(b, m, deterministic)
}
func (m *TaskPollArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPollArg.Merge(m, src)
}
func (m *TaskPollArg) XXX_Size() int {
	return xxx_messageInfo_TaskPollArg.Size(m)
}
func (m *TaskPollArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPollArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPollArg proto.InternalMessageInfo

const Default_TaskPollArg_TimeoutSec uint64 = 60

func (m *TaskPollArg) GetTimeoutSec() uint64 {
	if m != nil && m.TimeoutSec != nil {
		return *m.TimeoutSec
	}
	return Default_TaskPollArg_TimeoutSec
}

func (m *TaskPollArg) GetNewTasksFilterList() []*TaskPollArg_NewTasksFilter {
	if m != nil {
		return m.NewTasksFilterList
	}
	return nil
}

func (m *TaskPollArg) GetCanceledTasksFilter() [][]byte {
	if m != nil {
		return m.CanceledTasksFilter
	}
	return nil
}

func (m *TaskPollArg) GetCompletedTasksFilter() [][]byte {
	if m != nil {
		return m.CompletedTasksFilter
	}
	return nil
}

func (m *TaskPollArg) GetChangedTaskFilterList() []*TaskPollArg_ChangedTaskFilter {
	if m != nil {
		return m.ChangedTaskFilterList
	}
	return nil
}

func (m *TaskPollArg) GetRequestId() string {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return ""
}

func (m *TaskPollArg) GetRequestedStateTransitionFilterList() []*TaskPollArg_RequestedStateTransitionFilter {
	if m != nil {
		return m.RequestedStateTransitionFilterList
	}
	return nil
}

func (m *TaskPollArg) GetForwarded() bool {
	if m != nil && m.Forwarded != nil {
		return *m.Forwarded
	}
	return false
}

func (m *TaskPollArg) GetRequestContext() *net.RpcRequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

// Return if there exists any pending task with sequence_id greater than
// specified last_known_sequence_id of a component. Completed tasks will not
// be returned. New tasks will be returned in TaskPollRet.new_tasks list.
type TaskPollArg_NewTasksFilter struct {
	Component            *string  `protobuf:"bytes,1,opt,name=component" json:"component,omitempty"`
	LastKnownSequenceId  *uint64  `protobuf:"varint,2,opt,name=last_known_sequence_id,json=lastKnownSequenceId" json:"last_known_sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskPollArg_NewTasksFilter) Reset()         { *m = TaskPollArg_NewTasksFilter{} }
func (m *TaskPollArg_NewTasksFilter) String() string { return proto.CompactTextString(m) }
func (*TaskPollArg_NewTasksFilter) ProtoMessage()    {}
func (*TaskPollArg_NewTasksFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{6, 0}
}

func (m *TaskPollArg_NewTasksFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskPollArg_NewTasksFilter.Unmarshal(m, b)
}
func (m *TaskPollArg_NewTasksFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskPollArg_NewTasksFilter.Marshal(b, m, deterministic)
}
func (m *TaskPollArg_NewTasksFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPollArg_NewTasksFilter.Merge(m, src)
}
func (m *TaskPollArg_NewTasksFilter) XXX_Size() int {
	return xxx_messageInfo_TaskPollArg_NewTasksFilter.Size(m)
}
func (m *TaskPollArg_NewTasksFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPollArg_NewTasksFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPollArg_NewTasksFilter proto.InternalMessageInfo

func (m *TaskPollArg_NewTasksFilter) GetComponent() string {
	if m != nil && m.Component != nil {
		return *m.Component
	}
	return ""
}

func (m *TaskPollArg_NewTasksFilter) GetLastKnownSequenceId() uint64 {
	if m != nil && m.LastKnownSequenceId != nil {
		return *m.LastKnownSequenceId
	}
	return 0
}

// Return when any of the tasks specified by task_uuid has logical_timestamp
// greater than last_known_logical_timestamp.
// Tasks will be returned in TaskPollRet.changed_tasks list.
type TaskPollArg_ChangedTaskFilter struct {
	TaskUuid                  []byte   `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	LastKnownLogicalTimestamp *int64   `protobuf:"varint,2,opt,name=last_known_logical_timestamp,json=lastKnownLogicalTimestamp" json:"last_known_logical_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *TaskPollArg_ChangedTaskFilter) Reset()         { *m = TaskPollArg_ChangedTaskFilter{} }
func (m *TaskPollArg_ChangedTaskFilter) String() string { return proto.CompactTextString(m) }
func (*TaskPollArg_ChangedTaskFilter) ProtoMessage()    {}
func (*TaskPollArg_ChangedTaskFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{6, 1}
}

func (m *TaskPollArg_ChangedTaskFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskPollArg_ChangedTaskFilter.Unmarshal(m, b)
}
func (m *TaskPollArg_ChangedTaskFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskPollArg_ChangedTaskFilter.Marshal(b, m, deterministic)
}
func (m *TaskPollArg_ChangedTaskFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPollArg_ChangedTaskFilter.Merge(m, src)
}
func (m *TaskPollArg_ChangedTaskFilter) XXX_Size() int {
	return xxx_messageInfo_TaskPollArg_ChangedTaskFilter.Size(m)
}
func (m *TaskPollArg_ChangedTaskFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPollArg_ChangedTaskFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPollArg_ChangedTaskFilter proto.InternalMessageInfo

func (m *TaskPollArg_ChangedTaskFilter) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *TaskPollArg_ChangedTaskFilter) GetLastKnownLogicalTimestamp() int64 {
	if m != nil && m.LastKnownLogicalTimestamp != nil {
		return *m.LastKnownLogicalTimestamp
	}
	return 0
}

// Return when any of the tasks specified in task_uuid for whom
// state transition is requested from last_known_requested_state_transition.
// Tasks will be returned in TaskPollRet.requested_state_transition_for_tasks
// list.
type TaskPollArg_RequestedStateTransitionFilter struct {
	TaskUuid                          []byte       `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	LastKnownRequestedStateTransition *Task_Status `protobuf:"varint,2,opt,name=last_known_requested_state_transition,json=lastKnownRequestedStateTransition,enum=nutanix.ergon.Task_Status" json:"last_known_requested_state_transition,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}     `json:"-"`
	XXX_unrecognized                  []byte       `json:"-"`
	XXX_sizecache                     int32        `json:"-"`
}

func (m *TaskPollArg_RequestedStateTransitionFilter) Reset() {
	*m = TaskPollArg_RequestedStateTransitionFilter{}
}
func (m *TaskPollArg_RequestedStateTransitionFilter) String() string {
	return proto.CompactTextString(m)
}
func (*TaskPollArg_RequestedStateTransitionFilter) ProtoMessage() {}
func (*TaskPollArg_RequestedStateTransitionFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{6, 2}
}

func (m *TaskPollArg_RequestedStateTransitionFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskPollArg_RequestedStateTransitionFilter.Unmarshal(m, b)
}
func (m *TaskPollArg_RequestedStateTransitionFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskPollArg_RequestedStateTransitionFilter.Marshal(b, m, deterministic)
}
func (m *TaskPollArg_RequestedStateTransitionFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPollArg_RequestedStateTransitionFilter.Merge(m, src)
}
func (m *TaskPollArg_RequestedStateTransitionFilter) XXX_Size() int {
	return xxx_messageInfo_TaskPollArg_RequestedStateTransitionFilter.Size(m)
}
func (m *TaskPollArg_RequestedStateTransitionFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPollArg_RequestedStateTransitionFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPollArg_RequestedStateTransitionFilter proto.InternalMessageInfo

func (m *TaskPollArg_RequestedStateTransitionFilter) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *TaskPollArg_RequestedStateTransitionFilter) GetLastKnownRequestedStateTransition() Task_Status {
	if m != nil && m.LastKnownRequestedStateTransition != nil {
		return *m.LastKnownRequestedStateTransition
	}
	return Task_kQueued
}

type TaskPollRet struct {
	Timedout *bool `protobuf:"varint,1,opt,name=timedout,def=0" json:"timedout,omitempty"`
	// Tasks in new_tasks are ordered by (component-name, sequence-id).
	//
	// Pending Tasks greater than specified last known sequence ID are returned.
	//
	// TaskPoll returns at most 100 new tasks. If there are more than 100 new
	// tasks, repeat TaskPoll call multiple times with updated
	// last_known_sequence_id.
	NewTasks       []*Task  `protobuf:"bytes,2,rep,name=new_tasks,json=newTasks" json:"new_tasks,omitempty"`
	CanceledTasks  []*Task  `protobuf:"bytes,3,rep,name=canceled_tasks,json=canceledTasks" json:"canceled_tasks,omitempty"`
	CompletedTasks []*Task  `protobuf:"bytes,4,rep,name=completed_tasks,json=completedTasks" json:"completed_tasks,omitempty"`
	ChangedTasks   []*Task  `protobuf:"bytes,5,rep,name=changed_tasks,json=changedTasks" json:"changed_tasks,omitempty"`
	UnknownUuids   [][]byte `protobuf:"bytes,6,rep,name=unknown_uuids,json=unknownUuids" json:"unknown_uuids,omitempty"`
	// `canceled` flag is true if TaskPoll rpc was canceled by using
	// TaskPollCancel RPC. If this flag is true, then none of the above
	// fields are set. Conversly if any of the above fields is set, then
	// `canceled` flag is always false.
	Canceled *bool `protobuf:"varint,7,opt,name=canceled,def=0" json:"canceled,omitempty"`
	// List of tasks whose state transition is requested from last known
	// requested task state transition.
	RequestedStateTransitionForTasks []*Task  `protobuf:"bytes,8,rep,name=requested_state_transition_for_tasks,json=requestedStateTransitionForTasks" json:"requested_state_transition_for_tasks,omitempty"`
	XXX_NoUnkeyedLiteral             struct{} `json:"-"`
	XXX_unrecognized                 []byte   `json:"-"`
	XXX_sizecache                    int32    `json:"-"`
}

func (m *TaskPollRet) Reset()         { *m = TaskPollRet{} }
func (m *TaskPollRet) String() string { return proto.CompactTextString(m) }
func (*TaskPollRet) ProtoMessage()    {}
func (*TaskPollRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{7}
}

func (m *TaskPollRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskPollRet.Unmarshal(m, b)
}
func (m *TaskPollRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskPollRet.Marshal(b, m, deterministic)
}
func (m *TaskPollRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPollRet.Merge(m, src)
}
func (m *TaskPollRet) XXX_Size() int {
	return xxx_messageInfo_TaskPollRet.Size(m)
}
func (m *TaskPollRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPollRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPollRet proto.InternalMessageInfo

const Default_TaskPollRet_Timedout bool = false
const Default_TaskPollRet_Canceled bool = false

func (m *TaskPollRet) GetTimedout() bool {
	if m != nil && m.Timedout != nil {
		return *m.Timedout
	}
	return Default_TaskPollRet_Timedout
}

func (m *TaskPollRet) GetNewTasks() []*Task {
	if m != nil {
		return m.NewTasks
	}
	return nil
}

func (m *TaskPollRet) GetCanceledTasks() []*Task {
	if m != nil {
		return m.CanceledTasks
	}
	return nil
}

func (m *TaskPollRet) GetCompletedTasks() []*Task {
	if m != nil {
		return m.CompletedTasks
	}
	return nil
}

func (m *TaskPollRet) GetChangedTasks() []*Task {
	if m != nil {
		return m.ChangedTasks
	}
	return nil
}

func (m *TaskPollRet) GetUnknownUuids() [][]byte {
	if m != nil {
		return m.UnknownUuids
	}
	return nil
}

func (m *TaskPollRet) GetCanceled() bool {
	if m != nil && m.Canceled != nil {
		return *m.Canceled
	}
	return Default_TaskPollRet_Canceled
}

func (m *TaskPollRet) GetRequestedStateTransitionForTasks() []*Task {
	if m != nil {
		return m.RequestedStateTransitionForTasks
	}
	return nil
}

type TaskPollCancelArg struct {
	// List of request_ids identifying TaskPoll requests that needs to be
	// canceled.
	RequestIdList []string `protobuf:"bytes,1,rep,name=request_id_list,json=requestIdList" json:"request_id_list,omitempty"`
	// For Ergon's internal use only.
	//
	// Indicates whether this request was forwarded by non-master Ergon instance.
	Forwarded            *bool    `protobuf:"varint,2,opt,name=forwarded" json:"forwarded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskPollCancelArg) Reset()         { *m = TaskPollCancelArg{} }
func (m *TaskPollCancelArg) String() string { return proto.CompactTextString(m) }
func (*TaskPollCancelArg) ProtoMessage()    {}
func (*TaskPollCancelArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{8}
}

func (m *TaskPollCancelArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskPollCancelArg.Unmarshal(m, b)
}
func (m *TaskPollCancelArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskPollCancelArg.Marshal(b, m, deterministic)
}
func (m *TaskPollCancelArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPollCancelArg.Merge(m, src)
}
func (m *TaskPollCancelArg) XXX_Size() int {
	return xxx_messageInfo_TaskPollCancelArg.Size(m)
}
func (m *TaskPollCancelArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPollCancelArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPollCancelArg proto.InternalMessageInfo

func (m *TaskPollCancelArg) GetRequestIdList() []string {
	if m != nil {
		return m.RequestIdList
	}
	return nil
}

func (m *TaskPollCancelArg) GetForwarded() bool {
	if m != nil && m.Forwarded != nil {
		return *m.Forwarded
	}
	return false
}

type TaskPollCancelRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskPollCancelRet) Reset()         { *m = TaskPollCancelRet{} }
func (m *TaskPollCancelRet) String() string { return proto.CompactTextString(m) }
func (*TaskPollCancelRet) ProtoMessage()    {}
func (*TaskPollCancelRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{9}
}

func (m *TaskPollCancelRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskPollCancelRet.Unmarshal(m, b)
}
func (m *TaskPollCancelRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskPollCancelRet.Marshal(b, m, deterministic)
}
func (m *TaskPollCancelRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPollCancelRet.Merge(m, src)
}
func (m *TaskPollCancelRet) XXX_Size() int {
	return xxx_messageInfo_TaskPollCancelRet.Size(m)
}
func (m *TaskPollCancelRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPollCancelRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPollCancelRet proto.InternalMessageInfo

type TaskListArg struct {
	// DEPRECATED: Use `entity_list` field instead.
	//
	// List of entity types. Tasks associated with any of these entity types will
	// be returned.
	EntityTypeList []EntityId_Entity `protobuf:"varint,1,rep,name=entity_type_list,json=entityTypeList,enum=nutanix.ergon.EntityId_Entity" json:"entity_type_list,omitempty"`
	// List of entity-ids. Tasks associated with any of these entity IDs will
	// be returned. To match only part of EntityId, client can specify only
	// entity_type or only entity_id in EntityId.
	EntityList []*EntityId `protobuf:"bytes,2,rep,name=entity_list,json=entityList" json:"entity_list,omitempty"`
	// List of operations. Tasks associated with any of these operation types will
	// be returned.
	OperationTypeList []string `protobuf:"bytes,3,rep,name=operation_type_list,json=operationTypeList" json:"operation_type_list,omitempty"`
	// List of components. Tasks handled by any of these components will be
	// returned.
	ComponentTypeList []string `protobuf:"bytes,4,rep,name=component_type_list,json=componentTypeList" json:"component_type_list,omitempty"`
	// Flag indicating whether completed tasks should be included.
	// Only one of include_completed or status_list must be used.
	IncludeCompleted *bool `protobuf:"varint,5,opt,name=include_completed,json=includeCompleted,def=1" json:"include_completed,omitempty"`
	// Flag indicating whether to include internal tasks.
	IncludeInternalTasks *bool `protobuf:"varint,6,opt,name=include_internal_tasks,json=includeInternalTasks,def=1" json:"include_internal_tasks,omitempty"`
	// Cutoff time in microseconds from epoch. All pending tasks will
	// be returned but only completed tasks with completed time greater than
	// cutoff time will be returned. Only applicable if include_completed is set
	// to true or status_list has atleast one status in the end states.
	// This is a server timestamp.
	CutoffTimeUsecs *uint64 `protobuf:"fixed64,7,opt,name=cutoff_time_usecs,json=cutoffTimeUsecs" json:"cutoff_time_usecs,omitempty"`
	// The maximum number of tasks to return. If a positive integer is specified,
	// only the N most recently-created tasks will be returned, in ascending
	// sorted order.
	Limit *int64 `protobuf:"varint,8,opt,name=limit,def=-1" json:"limit,omitempty"`
	// `local_cluster_only` and `cluster_uuid_list` fields apply only in case of
	// Prism Central.
	//
	// If `local_cluster_only` is True, then only tasks belonging to this cluster
	// (cluster on which this TaskList RPC is running) are considered.
	//
	// If `local_cluster_only` is False, then tasks belonging to clusters whose
	// uuids are specified in `cluster_uuid_list` are considered. If
	// `cluster_uuid_list` is empty, then all tasks are considered for filtering.
	LocalClusterOnly *bool    `protobuf:"varint,9,opt,name=local_cluster_only,json=localClusterOnly,def=0" json:"local_cluster_only,omitempty"`
	ClusterUuidList  [][]byte `protobuf:"bytes,10,rep,name=cluster_uuid_list,json=clusterUuidList" json:"cluster_uuid_list,omitempty"`
	// Include only root tasks in result.
	// A task is considered as root iff its parent_task_uuid is field is not set.
	OnlyRootTasks *bool `protobuf:"varint,11,opt,name=only_root_tasks,json=onlyRootTasks,def=0" json:"only_root_tasks,omitempty"`
	// Tasks with status in this list will be returned.
	// Only one of include_completed or status_list must be used.
	StatusList           []Task_Status `protobuf:"varint,12,rep,name=status_list,json=statusList,enum=nutanix.ergon.Task_Status" json:"status_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TaskListArg) Reset()         { *m = TaskListArg{} }
func (m *TaskListArg) String() string { return proto.CompactTextString(m) }
func (*TaskListArg) ProtoMessage()    {}
func (*TaskListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{10}
}

func (m *TaskListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskListArg.Unmarshal(m, b)
}
func (m *TaskListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskListArg.Marshal(b, m, deterministic)
}
func (m *TaskListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListArg.Merge(m, src)
}
func (m *TaskListArg) XXX_Size() int {
	return xxx_messageInfo_TaskListArg.Size(m)
}
func (m *TaskListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListArg proto.InternalMessageInfo

const Default_TaskListArg_IncludeCompleted bool = true
const Default_TaskListArg_IncludeInternalTasks bool = true
const Default_TaskListArg_Limit int64 = -1
const Default_TaskListArg_LocalClusterOnly bool = false
const Default_TaskListArg_OnlyRootTasks bool = false

func (m *TaskListArg) GetEntityTypeList() []EntityId_Entity {
	if m != nil {
		return m.EntityTypeList
	}
	return nil
}

func (m *TaskListArg) GetEntityList() []*EntityId {
	if m != nil {
		return m.EntityList
	}
	return nil
}

func (m *TaskListArg) GetOperationTypeList() []string {
	if m != nil {
		return m.OperationTypeList
	}
	return nil
}

func (m *TaskListArg) GetComponentTypeList() []string {
	if m != nil {
		return m.ComponentTypeList
	}
	return nil
}

func (m *TaskListArg) GetIncludeCompleted() bool {
	if m != nil && m.IncludeCompleted != nil {
		return *m.IncludeCompleted
	}
	return Default_TaskListArg_IncludeCompleted
}

func (m *TaskListArg) GetIncludeInternalTasks() bool {
	if m != nil && m.IncludeInternalTasks != nil {
		return *m.IncludeInternalTasks
	}
	return Default_TaskListArg_IncludeInternalTasks
}

func (m *TaskListArg) GetCutoffTimeUsecs() uint64 {
	if m != nil && m.CutoffTimeUsecs != nil {
		return *m.CutoffTimeUsecs
	}
	return 0
}

func (m *TaskListArg) GetLimit() int64 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return Default_TaskListArg_Limit
}

func (m *TaskListArg) GetLocalClusterOnly() bool {
	if m != nil && m.LocalClusterOnly != nil {
		return *m.LocalClusterOnly
	}
	return Default_TaskListArg_LocalClusterOnly
}

func (m *TaskListArg) GetClusterUuidList() [][]byte {
	if m != nil {
		return m.ClusterUuidList
	}
	return nil
}

func (m *TaskListArg) GetOnlyRootTasks() bool {
	if m != nil && m.OnlyRootTasks != nil {
		return *m.OnlyRootTasks
	}
	return Default_TaskListArg_OnlyRootTasks
}

func (m *TaskListArg) GetStatusList() []Task_Status {
	if m != nil {
		return m.StatusList
	}
	return nil
}

type TaskListRet struct {
	// List of Task UUIDs.
	TaskUuidList [][]byte `protobuf:"bytes,1,rep,name=task_uuid_list,json=taskUuidList" json:"task_uuid_list,omitempty"`
	// Value of max sequence id that TaskList saw for specified components.
	MaxSequenceIdList    []*TaskListRet_SequenceId `protobuf:"bytes,2,rep,name=max_sequence_id_list,json=maxSequenceIdList" json:"max_sequence_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TaskListRet) Reset()         { *m = TaskListRet{} }
func (m *TaskListRet) String() string { return proto.CompactTextString(m) }
func (*TaskListRet) ProtoMessage()    {}
func (*TaskListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{11}
}

func (m *TaskListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskListRet.Unmarshal(m, b)
}
func (m *TaskListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskListRet.Marshal(b, m, deterministic)
}
func (m *TaskListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListRet.Merge(m, src)
}
func (m *TaskListRet) XXX_Size() int {
	return xxx_messageInfo_TaskListRet.Size(m)
}
func (m *TaskListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListRet proto.InternalMessageInfo

func (m *TaskListRet) GetTaskUuidList() [][]byte {
	if m != nil {
		return m.TaskUuidList
	}
	return nil
}

func (m *TaskListRet) GetMaxSequenceIdList() []*TaskListRet_SequenceId {
	if m != nil {
		return m.MaxSequenceIdList
	}
	return nil
}

type TaskListRet_SequenceId struct {
	Component            *string  `protobuf:"bytes,1,opt,name=component" json:"component,omitempty"`
	SequenceId           *uint64  `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskListRet_SequenceId) Reset()         { *m = TaskListRet_SequenceId{} }
func (m *TaskListRet_SequenceId) String() string { return proto.CompactTextString(m) }
func (*TaskListRet_SequenceId) ProtoMessage()    {}
func (*TaskListRet_SequenceId) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{11, 0}
}

func (m *TaskListRet_SequenceId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskListRet_SequenceId.Unmarshal(m, b)
}
func (m *TaskListRet_SequenceId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskListRet_SequenceId.Marshal(b, m, deterministic)
}
func (m *TaskListRet_SequenceId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListRet_SequenceId.Merge(m, src)
}
func (m *TaskListRet_SequenceId) XXX_Size() int {
	return xxx_messageInfo_TaskListRet_SequenceId.Size(m)
}
func (m *TaskListRet_SequenceId) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListRet_SequenceId.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListRet_SequenceId proto.InternalMessageInfo

func (m *TaskListRet_SequenceId) GetComponent() string {
	if m != nil && m.Component != nil {
		return *m.Component
	}
	return ""
}

func (m *TaskListRet_SequenceId) GetSequenceId() uint64 {
	if m != nil && m.SequenceId != nil {
		return *m.SequenceId
	}
	return 0
}

type TaskGetArg struct {
	// The list of tasks to return. Invalid identifiers will be ignored.
	TaskUuidList [][]byte `protobuf:"bytes,1,rep,name=task_uuid_list,json=taskUuidList" json:"task_uuid_list,omitempty"`
	// Whether to fill the subtask UUID list for the tasks.
	// Fetching the subtask list increases the latency of this operation.
	IncludeSubtaskUuids *bool `protobuf:"varint,2,opt,name=include_subtask_uuids,json=includeSubtaskUuids,def=1" json:"include_subtask_uuids,omitempty"`
	// If request_context has should_authorize field set to True,
	// user_uuid should be filled in.
	// RBAC is currently supported on PC only.
	RequestContext       *net.RpcRequestContext `protobuf:"bytes,3,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TaskGetArg) Reset()         { *m = TaskGetArg{} }
func (m *TaskGetArg) String() string { return proto.CompactTextString(m) }
func (*TaskGetArg) ProtoMessage()    {}
func (*TaskGetArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{12}
}

func (m *TaskGetArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskGetArg.Unmarshal(m, b)
}
func (m *TaskGetArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskGetArg.Marshal(b, m, deterministic)
}
func (m *TaskGetArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskGetArg.Merge(m, src)
}
func (m *TaskGetArg) XXX_Size() int {
	return xxx_messageInfo_TaskGetArg.Size(m)
}
func (m *TaskGetArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskGetArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskGetArg proto.InternalMessageInfo

const Default_TaskGetArg_IncludeSubtaskUuids bool = true

func (m *TaskGetArg) GetTaskUuidList() [][]byte {
	if m != nil {
		return m.TaskUuidList
	}
	return nil
}

func (m *TaskGetArg) GetIncludeSubtaskUuids() bool {
	if m != nil && m.IncludeSubtaskUuids != nil {
		return *m.IncludeSubtaskUuids
	}
	return Default_TaskGetArg_IncludeSubtaskUuids
}

func (m *TaskGetArg) GetRequestContext() *net.RpcRequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

type TaskGetRet struct {
	// List of Task objects. Tasks are returned in the same order as requested
	// except for invalid identifiers. Invalid identifiers will be ignored.
	TaskList             []*Task  `protobuf:"bytes,1,rep,name=task_list,json=taskList" json:"task_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskGetRet) Reset()         { *m = TaskGetRet{} }
func (m *TaskGetRet) String() string { return proto.CompactTextString(m) }
func (*TaskGetRet) ProtoMessage()    {}
func (*TaskGetRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{13}
}

func (m *TaskGetRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskGetRet.Unmarshal(m, b)
}
func (m *TaskGetRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskGetRet.Marshal(b, m, deterministic)
}
func (m *TaskGetRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskGetRet.Merge(m, src)
}
func (m *TaskGetRet) XXX_Size() int {
	return xxx_messageInfo_TaskGetRet.Size(m)
}
func (m *TaskGetRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskGetRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskGetRet proto.InternalMessageInfo

func (m *TaskGetRet) GetTaskList() []*Task {
	if m != nil {
		return m.TaskList
	}
	return nil
}

type TaskCancelArg struct {
	// The list of tasks to cancel. Invalid identifiers will be ignored.
	TaskUuidList         [][]byte `protobuf:"bytes,1,rep,name=task_uuid_list,json=taskUuidList" json:"task_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskCancelArg) Reset()         { *m = TaskCancelArg{} }
func (m *TaskCancelArg) String() string { return proto.CompactTextString(m) }
func (*TaskCancelArg) ProtoMessage()    {}
func (*TaskCancelArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{14}
}

func (m *TaskCancelArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskCancelArg.Unmarshal(m, b)
}
func (m *TaskCancelArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskCancelArg.Marshal(b, m, deterministic)
}
func (m *TaskCancelArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskCancelArg.Merge(m, src)
}
func (m *TaskCancelArg) XXX_Size() int {
	return xxx_messageInfo_TaskCancelArg.Size(m)
}
func (m *TaskCancelArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskCancelArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskCancelArg proto.InternalMessageInfo

func (m *TaskCancelArg) GetTaskUuidList() [][]byte {
	if m != nil {
		return m.TaskUuidList
	}
	return nil
}

type TaskCancelRet struct {
	// List of uuids from `TaskCancelArg.task_uuid_list` for which there
	// were no matching tasks.
	UnknownUuids         [][]byte `protobuf:"bytes,1,rep,name=unknown_uuids,json=unknownUuids" json:"unknown_uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskCancelRet) Reset()         { *m = TaskCancelRet{} }
func (m *TaskCancelRet) String() string { return proto.CompactTextString(m) }
func (*TaskCancelRet) ProtoMessage()    {}
func (*TaskCancelRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{15}
}

func (m *TaskCancelRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskCancelRet.Unmarshal(m, b)
}
func (m *TaskCancelRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskCancelRet.Marshal(b, m, deterministic)
}
func (m *TaskCancelRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskCancelRet.Merge(m, src)
}
func (m *TaskCancelRet) XXX_Size() int {
	return xxx_messageInfo_TaskCancelRet.Size(m)
}
func (m *TaskCancelRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskCancelRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskCancelRet proto.InternalMessageInfo

func (m *TaskCancelRet) GetUnknownUuids() [][]byte {
	if m != nil {
		return m.UnknownUuids
	}
	return nil
}

type TaskSuspendArg struct {
	// UUIDs of tasks which needs to be suspended.
	TaskUuidList         [][]byte `protobuf:"bytes,1,rep,name=task_uuid_list,json=taskUuidList" json:"task_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskSuspendArg) Reset()         { *m = TaskSuspendArg{} }
func (m *TaskSuspendArg) String() string { return proto.CompactTextString(m) }
func (*TaskSuspendArg) ProtoMessage()    {}
func (*TaskSuspendArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{16}
}

func (m *TaskSuspendArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskSuspendArg.Unmarshal(m, b)
}
func (m *TaskSuspendArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskSuspendArg.Marshal(b, m, deterministic)
}
func (m *TaskSuspendArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskSuspendArg.Merge(m, src)
}
func (m *TaskSuspendArg) XXX_Size() int {
	return xxx_messageInfo_TaskSuspendArg.Size(m)
}
func (m *TaskSuspendArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskSuspendArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskSuspendArg proto.InternalMessageInfo

func (m *TaskSuspendArg) GetTaskUuidList() [][]byte {
	if m != nil {
		return m.TaskUuidList
	}
	return nil
}

type TaskSuspendRet struct {
	// List of uuids from `TaskSuspendArg.task_uuid_list` for which there
	// were no matching tasks.
	UnknownUuids         [][]byte `protobuf:"bytes,1,rep,name=unknown_uuids,json=unknownUuids" json:"unknown_uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskSuspendRet) Reset()         { *m = TaskSuspendRet{} }
func (m *TaskSuspendRet) String() string { return proto.CompactTextString(m) }
func (*TaskSuspendRet) ProtoMessage()    {}
func (*TaskSuspendRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{17}
}

func (m *TaskSuspendRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskSuspendRet.Unmarshal(m, b)
}
func (m *TaskSuspendRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskSuspendRet.Marshal(b, m, deterministic)
}
func (m *TaskSuspendRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskSuspendRet.Merge(m, src)
}
func (m *TaskSuspendRet) XXX_Size() int {
	return xxx_messageInfo_TaskSuspendRet.Size(m)
}
func (m *TaskSuspendRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskSuspendRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskSuspendRet proto.InternalMessageInfo

func (m *TaskSuspendRet) GetUnknownUuids() [][]byte {
	if m != nil {
		return m.UnknownUuids
	}
	return nil
}

type TaskResumeArg struct {
	// UUIDs of tasks which needs to be resumed.
	TaskUuidList         [][]byte `protobuf:"bytes,1,rep,name=task_uuid_list,json=taskUuidList" json:"task_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskResumeArg) Reset()         { *m = TaskResumeArg{} }
func (m *TaskResumeArg) String() string { return proto.CompactTextString(m) }
func (*TaskResumeArg) ProtoMessage()    {}
func (*TaskResumeArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{18}
}

func (m *TaskResumeArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskResumeArg.Unmarshal(m, b)
}
func (m *TaskResumeArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskResumeArg.Marshal(b, m, deterministic)
}
func (m *TaskResumeArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResumeArg.Merge(m, src)
}
func (m *TaskResumeArg) XXX_Size() int {
	return xxx_messageInfo_TaskResumeArg.Size(m)
}
func (m *TaskResumeArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResumeArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResumeArg proto.InternalMessageInfo

func (m *TaskResumeArg) GetTaskUuidList() [][]byte {
	if m != nil {
		return m.TaskUuidList
	}
	return nil
}

type TaskResumeRet struct {
	// List of uuids from `TaskResumeArg.task_uuid_list` for which there
	// were no matching tasks.
	UnknownUuids         [][]byte `protobuf:"bytes,1,rep,name=unknown_uuids,json=unknownUuids" json:"unknown_uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskResumeRet) Reset()         { *m = TaskResumeRet{} }
func (m *TaskResumeRet) String() string { return proto.CompactTextString(m) }
func (*TaskResumeRet) ProtoMessage()    {}
func (*TaskResumeRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{19}
}

func (m *TaskResumeRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskResumeRet.Unmarshal(m, b)
}
func (m *TaskResumeRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskResumeRet.Marshal(b, m, deterministic)
}
func (m *TaskResumeRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResumeRet.Merge(m, src)
}
func (m *TaskResumeRet) XXX_Size() int {
	return xxx_messageInfo_TaskResumeRet.Size(m)
}
func (m *TaskResumeRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResumeRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResumeRet proto.InternalMessageInfo

func (m *TaskResumeRet) GetUnknownUuids() [][]byte {
	if m != nil {
		return m.UnknownUuids
	}
	return nil
}

type TaskGetSubtaskUuidListArg struct {
	// List of task uuids.
	//
	// Each uuid is a 16 byte string. Unless task is not found, there is
	// one entry in ret.result_entries for each uuid specified in this list.
	TaskUuidList         [][]byte `protobuf:"bytes,1,rep,name=task_uuid_list,json=taskUuidList" json:"task_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskGetSubtaskUuidListArg) Reset()         { *m = TaskGetSubtaskUuidListArg{} }
func (m *TaskGetSubtaskUuidListArg) String() string { return proto.CompactTextString(m) }
func (*TaskGetSubtaskUuidListArg) ProtoMessage()    {}
func (*TaskGetSubtaskUuidListArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{20}
}

func (m *TaskGetSubtaskUuidListArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskGetSubtaskUuidListArg.Unmarshal(m, b)
}
func (m *TaskGetSubtaskUuidListArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskGetSubtaskUuidListArg.Marshal(b, m, deterministic)
}
func (m *TaskGetSubtaskUuidListArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskGetSubtaskUuidListArg.Merge(m, src)
}
func (m *TaskGetSubtaskUuidListArg) XXX_Size() int {
	return xxx_messageInfo_TaskGetSubtaskUuidListArg.Size(m)
}
func (m *TaskGetSubtaskUuidListArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskGetSubtaskUuidListArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskGetSubtaskUuidListArg proto.InternalMessageInfo

func (m *TaskGetSubtaskUuidListArg) GetTaskUuidList() [][]byte {
	if m != nil {
		return m.TaskUuidList
	}
	return nil
}

type TaskGetSubtaskUuidListRet struct {
	ResultEntries []*TaskGetSubtaskUuidListRet_Entry `protobuf:"bytes,1,rep,name=result_entries,json=resultEntries" json:"result_entries,omitempty"`
	// UUIDs for which there was no matching tasks in DB.
	UnknownUuids         [][]byte `protobuf:"bytes,2,rep,name=unknown_uuids,json=unknownUuids" json:"unknown_uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskGetSubtaskUuidListRet) Reset()         { *m = TaskGetSubtaskUuidListRet{} }
func (m *TaskGetSubtaskUuidListRet) String() string { return proto.CompactTextString(m) }
func (*TaskGetSubtaskUuidListRet) ProtoMessage()    {}
func (*TaskGetSubtaskUuidListRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{21}
}

func (m *TaskGetSubtaskUuidListRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskGetSubtaskUuidListRet.Unmarshal(m, b)
}
func (m *TaskGetSubtaskUuidListRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskGetSubtaskUuidListRet.Marshal(b, m, deterministic)
}
func (m *TaskGetSubtaskUuidListRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskGetSubtaskUuidListRet.Merge(m, src)
}
func (m *TaskGetSubtaskUuidListRet) XXX_Size() int {
	return xxx_messageInfo_TaskGetSubtaskUuidListRet.Size(m)
}
func (m *TaskGetSubtaskUuidListRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskGetSubtaskUuidListRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskGetSubtaskUuidListRet proto.InternalMessageInfo

func (m *TaskGetSubtaskUuidListRet) GetResultEntries() []*TaskGetSubtaskUuidListRet_Entry {
	if m != nil {
		return m.ResultEntries
	}
	return nil
}

func (m *TaskGetSubtaskUuidListRet) GetUnknownUuids() [][]byte {
	if m != nil {
		return m.UnknownUuids
	}
	return nil
}

// `result_entries` has one entry for each task_uuid in arg.task_uuid_list,
// unless the task is not found (in which case the task-uuid will be included
// in `unknown_uuids`).
//
// If a task has no subtasks, its corresponding `Entry` will have empty
// `subtask_uuid_list`.
type TaskGetSubtaskUuidListRet_Entry struct {
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid" json:"task_uuid,omitempty"`
	// List of subtask uuids ordered by their `subtask_sequence_id`.
	SubtaskUuidList      [][]byte `protobuf:"bytes,2,rep,name=subtask_uuid_list,json=subtaskUuidList" json:"subtask_uuid_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskGetSubtaskUuidListRet_Entry) Reset()         { *m = TaskGetSubtaskUuidListRet_Entry{} }
func (m *TaskGetSubtaskUuidListRet_Entry) String() string { return proto.CompactTextString(m) }
func (*TaskGetSubtaskUuidListRet_Entry) ProtoMessage()    {}
func (*TaskGetSubtaskUuidListRet_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{21, 0}
}

func (m *TaskGetSubtaskUuidListRet_Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskGetSubtaskUuidListRet_Entry.Unmarshal(m, b)
}
func (m *TaskGetSubtaskUuidListRet_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskGetSubtaskUuidListRet_Entry.Marshal(b, m, deterministic)
}
func (m *TaskGetSubtaskUuidListRet_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskGetSubtaskUuidListRet_Entry.Merge(m, src)
}
func (m *TaskGetSubtaskUuidListRet_Entry) XXX_Size() int {
	return xxx_messageInfo_TaskGetSubtaskUuidListRet_Entry.Size(m)
}
func (m *TaskGetSubtaskUuidListRet_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskGetSubtaskUuidListRet_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_TaskGetSubtaskUuidListRet_Entry proto.InternalMessageInfo

func (m *TaskGetSubtaskUuidListRet_Entry) GetTaskUuid() []byte {
	if m != nil {
		return m.TaskUuid
	}
	return nil
}

func (m *TaskGetSubtaskUuidListRet_Entry) GetSubtaskUuidList() [][]byte {
	if m != nil {
		return m.SubtaskUuidList
	}
	return nil
}

type TaskCancelAnyArg struct {
	// UUID of task to cancel.
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// If request_context has should_authorize field set to True,
	// user_uuid should be filled in.
	// RBAC is currently supported on PC only.
	RequestContext       *net.RpcRequestContext `protobuf:"bytes,2,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TaskCancelAnyArg) Reset()         { *m = TaskCancelAnyArg{} }
func (m *TaskCancelAnyArg) String() string { return proto.CompactTextString(m) }
func (*TaskCancelAnyArg) ProtoMessage()    {}
func (*TaskCancelAnyArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{22}
}

func (m *TaskCancelAnyArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskCancelAnyArg.Unmarshal(m, b)
}
func (m *TaskCancelAnyArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskCancelAnyArg.Marshal(b, m, deterministic)
}
func (m *TaskCancelAnyArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskCancelAnyArg.Merge(m, src)
}
func (m *TaskCancelAnyArg) XXX_Size() int {
	return xxx_messageInfo_TaskCancelAnyArg.Size(m)
}
func (m *TaskCancelAnyArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskCancelAnyArg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskCancelAnyArg proto.InternalMessageInfo

func (m *TaskCancelAnyArg) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *TaskCancelAnyArg) GetRequestContext() *net.RpcRequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

type TaskCancelAnyRet struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskCancelAnyRet) Reset()         { *m = TaskCancelAnyRet{} }
func (m *TaskCancelAnyRet) String() string { return proto.CompactTextString(m) }
func (*TaskCancelAnyRet) ProtoMessage()    {}
func (*TaskCancelAnyRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca72bf34422e71ee, []int{23}
}

func (m *TaskCancelAnyRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskCancelAnyRet.Unmarshal(m, b)
}
func (m *TaskCancelAnyRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskCancelAnyRet.Marshal(b, m, deterministic)
}
func (m *TaskCancelAnyRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskCancelAnyRet.Merge(m, src)
}
func (m *TaskCancelAnyRet) XXX_Size() int {
	return xxx_messageInfo_TaskCancelAnyRet.Size(m)
}
func (m *TaskCancelAnyRet) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskCancelAnyRet.DiscardUnknown(m)
}

var xxx_messageInfo_TaskCancelAnyRet proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BatchRequestArg)(nil), "nutanix.ergon.BatchRequestArg")
	proto.RegisterType((*BatchRequestRet)(nil), "nutanix.ergon.BatchRequestRet")
	proto.RegisterType((*TaskCreateArg)(nil), "nutanix.ergon.TaskCreateArg")
	proto.RegisterType((*TaskCreateRet)(nil), "nutanix.ergon.TaskCreateRet")
	proto.RegisterType((*TaskUpdateArg)(nil), "nutanix.ergon.TaskUpdateArg")
	proto.RegisterType((*TaskUpdateRet)(nil), "nutanix.ergon.TaskUpdateRet")
	proto.RegisterType((*TaskPollArg)(nil), "nutanix.ergon.TaskPollArg")
	proto.RegisterType((*TaskPollArg_NewTasksFilter)(nil), "nutanix.ergon.TaskPollArg.NewTasksFilter")
	proto.RegisterType((*TaskPollArg_ChangedTaskFilter)(nil), "nutanix.ergon.TaskPollArg.ChangedTaskFilter")
	proto.RegisterType((*TaskPollArg_RequestedStateTransitionFilter)(nil), "nutanix.ergon.TaskPollArg.RequestedStateTransitionFilter")
	proto.RegisterType((*TaskPollRet)(nil), "nutanix.ergon.TaskPollRet")
	proto.RegisterType((*TaskPollCancelArg)(nil), "nutanix.ergon.TaskPollCancelArg")
	proto.RegisterType((*TaskPollCancelRet)(nil), "nutanix.ergon.TaskPollCancelRet")
	proto.RegisterType((*TaskListArg)(nil), "nutanix.ergon.TaskListArg")
	proto.RegisterType((*TaskListRet)(nil), "nutanix.ergon.TaskListRet")
	proto.RegisterType((*TaskListRet_SequenceId)(nil), "nutanix.ergon.TaskListRet.SequenceId")
	proto.RegisterType((*TaskGetArg)(nil), "nutanix.ergon.TaskGetArg")
	proto.RegisterType((*TaskGetRet)(nil), "nutanix.ergon.TaskGetRet")
	proto.RegisterType((*TaskCancelArg)(nil), "nutanix.ergon.TaskCancelArg")
	proto.RegisterType((*TaskCancelRet)(nil), "nutanix.ergon.TaskCancelRet")
	proto.RegisterType((*TaskSuspendArg)(nil), "nutanix.ergon.TaskSuspendArg")
	proto.RegisterType((*TaskSuspendRet)(nil), "nutanix.ergon.TaskSuspendRet")
	proto.RegisterType((*TaskResumeArg)(nil), "nutanix.ergon.TaskResumeArg")
	proto.RegisterType((*TaskResumeRet)(nil), "nutanix.ergon.TaskResumeRet")
	proto.RegisterType((*TaskGetSubtaskUuidListArg)(nil), "nutanix.ergon.TaskGetSubtaskUuidListArg")
	proto.RegisterType((*TaskGetSubtaskUuidListRet)(nil), "nutanix.ergon.TaskGetSubtaskUuidListRet")
	proto.RegisterType((*TaskGetSubtaskUuidListRet_Entry)(nil), "nutanix.ergon.TaskGetSubtaskUuidListRet.Entry")
	proto.RegisterType((*TaskCancelAnyArg)(nil), "nutanix.ergon.TaskCancelAnyArg")
	proto.RegisterType((*TaskCancelAnyRet)(nil), "nutanix.ergon.TaskCancelAnyRet")
}

func init() { proto.RegisterFile("ergon/ergon_interface.proto", fileDescriptor_ca72bf34422e71ee) }

var fileDescriptor_ca72bf34422e71ee = []byte{
	// 2326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4b, 0x6f, 0xdb, 0xd8,
	0xf5, 0x1f, 0xca, 0x0f, 0x59, 0x47, 0x2f, 0xeb, 0xfa, 0x11, 0x86, 0xb1, 0x27, 0x8a, 0x32, 0x99,
	0xd1, 0xe4, 0xff, 0x1f, 0xd9, 0xf1, 0x24, 0xd3, 0xd4, 0xed, 0x74, 0x9a, 0xb8, 0xc9, 0xc4, 0x48,
	0x26, 0xe3, 0xd2, 0x4e, 0x81, 0x16, 0x05, 0x58, 0x9a, 0xbc, 0x72, 0x88, 0x50, 0xa4, 0xc2, 0x7b,
	0x39, 0x89, 0x76, 0x41, 0x57, 0xd9, 0x14, 0x48, 0x57, 0xfd, 0x06, 0xd9, 0x74, 0x1d, 0xa0, 0xcb,
	0x02, 0xfd, 0x12, 0x05, 0x0a, 0x74, 0xdf, 0x4d, 0x37, 0x5d, 0x17, 0x28, 0xee, 0x8b, 0x0f, 0x99,
	0x54, 0x35, 0x59, 0x74, 0x63, 0x88, 0xe7, 0x75, 0xcf, 0xb9, 0xe7, 0x9c, 0xdf, 0x39, 0xa4, 0xe1,
	0x12, 0x8e, 0xce, 0xc2, 0x60, 0x87, 0xff, 0xb5, 0xbc, 0x80, 0xe2, 0x68, 0x68, 0x3b, 0x78, 0x30,
	0x8e, 0x42, 0x1a, 0xa2, 0x66, 0x10, 0x53, 0x3b, 0xf0, 0x5e, 0x0e, 0x38, 0xdb, 0xb8, 0x90, 0x95,
	0xa5, 0x93, 0x31, 0x26, 0x42, 0xce, 0xb8, 0x1c, 0x53, 0xcf, 0xdf, 0x21, 0xbe, 0x75, 0x1a, 0x0f,
	0xc9, 0xce, 0xa9, 0x4d, 0xf0, 0x0e, 0xc1, 0xd1, 0x77, 0x9e, 0x32, 0x64, 0x18, 0x39, 0x81, 0x00,
	0xd3, 0x9d, 0x68, 0xec, 0x08, 0x5e, 0xef, 0x08, 0xda, 0x77, 0x6d, 0xea, 0x3c, 0x35, 0xf1, 0xf3,
	0x18, 0x13, 0x7a, 0x27, 0x3a, 0x43, 0x5f, 0x42, 0x23, 0x12, 0x4f, 0x96, 0xef, 0x11, 0xaa, 0x6b,
	0xdd, 0x85, 0x7e, 0x7d, 0xcf, 0x18, 0xe4, 0xdc, 0x19, 0x7c, 0x83, 0xa9, 0x2d, 0x95, 0xcc, 0xba,
	0x94, 0x7f, 0xe4, 0x11, 0xda, 0x3b, 0xce, 0x5b, 0x34, 0x31, 0x45, 0x3f, 0x85, 0x66, 0x84, 0xc9,
	0x38, 0x0c, 0x08, 0xce, 0x9a, 0xbc, 0x54, 0x68, 0x52, 0xc8, 0x99, 0x0d, 0xa5, 0xc1, 0x8d, 0xbe,
	0xae, 0x43, 0xf3, 0xc4, 0x26, 0xcf, 0x0e, 0x22, 0x6c, 0x53, 0xcc, 0xbc, 0x44, 0xb0, 0x18, 0xc7,
	0x9e, 0xab, 0x6b, 0x5d, 0xad, 0xdf, 0x30, 0xf9, 0x6f, 0x74, 0x13, 0xaa, 0xd2, 0x13, 0x7d, 0xa1,
	0xab, 0xfd, 0x17, 0xa7, 0x95, 0x28, 0xba, 0x0d, 0x75, 0x1c, 0x50, 0x8f, 0x4e, 0x84, 0x6f, 0x8b,
	0xdc, 0xb7, 0x0b, 0x53, 0x9a, 0xf7, 0xb8, 0xc4, 0xa1, 0x6b, 0x82, 0x90, 0x65, 0x5e, 0xa1, 0x6b,
	0xd0, 0x0a, 0xc7, 0x38, 0xb2, 0xa9, 0x27, 0x53, 0xa2, 0x2f, 0x75, 0xb5, 0x7e, 0xcd, 0x6c, 0x26,
	0xd4, 0x93, 0xc9, 0x18, 0x23, 0x1d, 0xaa, 0x23, 0x4c, 0x88, 0x7d, 0x86, 0xf5, 0x65, 0xce, 0x57,
	0x8f, 0xa8, 0x0f, 0xab, 0x63, 0x3b, 0xc2, 0x01, 0xb5, 0xa8, 0x4d, 0x9e, 0x59, 0x3c, 0xa0, 0x2a,
	0x0f, 0xa8, 0x25, 0xe8, 0x2c, 0xe6, 0x27, 0x2c, 0xb4, 0x2d, 0xa8, 0x39, 0xe1, 0x68, 0x1c, 0x06,
	0x38, 0xa0, 0xfa, 0x0a, 0xb7, 0x92, 0x12, 0xd0, 0x65, 0xa8, 0xd3, 0x90, 0xda, 0xbe, 0x45, 0x28,
	0x1e, 0x13, 0xbd, 0xd6, 0xd5, 0xfa, 0x0b, 0x26, 0x70, 0xd2, 0x31, 0xa3, 0xa0, 0x9f, 0x01, 0x70,
	0x96, 0x15, 0x07, 0x1e, 0xd5, 0xa1, 0xab, 0xf5, 0x5b, 0x7b, 0xdb, 0x53, 0x21, 0xb2, 0xb3, 0x06,
	0x5c, 0xfc, 0x49, 0xe0, 0xd1, 0xfd, 0xe5, 0x67, 0xfc, 0xb7, 0x59, 0x23, 0x8a, 0x84, 0x3e, 0x81,
	0x36, 0x2f, 0xd2, 0xc0, 0xf6, 0xad, 0x70, 0x6c, 0x3f, 0x8f, 0xb1, 0x5e, 0x17, 0xde, 0x2a, 0xf2,
	0xb7, 0x9c, 0x8a, 0xae, 0x43, 0x33, 0x11, 0x64, 0x91, 0xe9, 0xcd, 0xae, 0xd6, 0x5f, 0xd9, 0x5f,
	0x1a, 0xda, 0x3e, 0x4b, 0xad, 0xe2, 0xb1, 0x13, 0xd1, 0x75, 0xe8, 0x38, 0x3c, 0xab, 0x16, 0xf5,
	0x46, 0xd8, 0x8a, 0x09, 0x76, 0x88, 0xde, 0xea, 0x6a, 0xfd, 0x65, 0xb3, 0x2d, 0x18, 0x27, 0xde,
	0x08, 0x3f, 0x61, 0x64, 0x76, 0x5f, 0x84, 0xda, 0x11, 0xcd, 0x8a, 0xb6, 0xb9, 0x68, 0x8b, 0xd3,
	0x53, 0xc9, 0x01, 0xac, 0xb1, 0xeb, 0xf1, 0x71, 0xde, 0xee, 0x2a, 0x17, 0xee, 0x28, 0x56, 0x2a,
	0x7f, 0x0b, 0x2e, 0xf8, 0x36, 0xa1, 0x56, 0x3c, 0x76, 0x6d, 0x8a, 0xdd, 0xac, 0x4e, 0x87, 0xeb,
	0xac, 0x33, 0xf6, 0x13, 0xc1, 0x4d, 0xd5, 0x7e, 0x00, 0x2b, 0xaa, 0x4e, 0x75, 0xc4, 0x4b, 0x6e,
	0x66, 0x51, 0x27, 0xc2, 0x68, 0x07, 0xd6, 0xc6, 0x38, 0x72, 0x70, 0x40, 0xed, 0x33, 0x6c, 0x29,
	0x7f, 0xf4, 0xb5, 0xae, 0xd6, 0x5f, 0x32, 0x51, 0xca, 0x3a, 0x90, 0x1c, 0xb4, 0x07, 0xcb, 0x84,
	0xda, 0x34, 0x26, 0xfa, 0x3a, 0xcf, 0x9e, 0x51, 0x9c, 0x3d, 0x26, 0x61, 0x4a, 0x49, 0x96, 0x2f,
	0x91, 0x75, 0x65, 0xdf, 0xd5, 0x37, 0x78, 0x69, 0xb4, 0x38, 0x59, 0xd9, 0x76, 0xd1, 0x15, 0x68,
	0xb8, 0x1e, 0x19, 0xfb, 0xf6, 0xc4, 0x0a, 0xec, 0x11, 0xd6, 0x37, 0x79, 0x81, 0xd5, 0x25, 0xed,
	0xb1, 0x3d, 0xc2, 0xec, 0x42, 0x49, 0x7c, 0xca, 0xcb, 0x94, 0xb0, 0xc6, 0x09, 0x1c, 0x6c, 0x79,
	0xae, 0x7e, 0xa1, 0xab, 0xf5, 0x17, 0xcd, 0x8e, 0x64, 0x1d, 0x4b, 0xce, 0xa1, 0x8b, 0x76, 0x60,
	0x55, 0x99, 0x1c, 0xda, 0x9e, 0x1f, 0x47, 0x98, 0xe8, 0x3a, 0xaf, 0x82, 0x45, 0x1a, 0xc5, 0xd8,
	0x6c, 0x4b, 0xee, 0x7d, 0xc9, 0x44, 0x8f, 0xa0, 0xcb, 0x04, 0x2d, 0x6f, 0x68, 0x65, 0x7b, 0xc2,
	0xcb, 0x7a, 0x7f, 0x31, 0x5b, 0x46, 0x97, 0x98, 0xf8, 0xe1, 0xf0, 0x28, 0x69, 0x94, 0xc3, 0x4c,
	0x44, 0x5b, 0xb0, 0xfc, 0x02, 0x7b, 0x67, 0x4f, 0xa9, 0x6e, 0x30, 0x0f, 0xf7, 0x17, 0x6f, 0xec,
	0xee, 0xee, 0x9a, 0x92, 0x86, 0xee, 0x42, 0xc3, 0xb1, 0xc7, 0xf6, 0xa9, 0xe7, 0x7b, 0xd4, 0xc3,
	0x44, 0xbf, 0xd4, 0x5d, 0xe8, 0xb7, 0xf6, 0x3e, 0x2c, 0xba, 0xd2, 0x03, 0x25, 0x37, 0x31, 0x73,
	0x3a, 0x68, 0x13, 0x96, 0x23, 0x6c, 0x93, 0x30, 0xd0, 0xb7, 0xf8, 0x6d, 0xc9, 0x27, 0xd6, 0xa9,
	0xc3, 0x30, 0x7a, 0x61, 0x47, 0x2e, 0x76, 0xf5, 0x6d, 0xe6, 0xb0, 0x99, 0x12, 0xd0, 0xd7, 0xd0,
	0x56, 0xe0, 0xea, 0x84, 0x01, 0xc5, 0x2f, 0xa9, 0xfe, 0x21, 0xaf, 0x9b, 0xf4, 0xf0, 0x00, 0xd3,
	0x81, 0x39, 0x76, 0x24, 0x4e, 0x1d, 0x08, 0x29, 0xb3, 0x15, 0xe5, 0x9e, 0xd9, 0xfd, 0xc6, 0x04,
	0x5b, 0x64, 0x12, 0x38, 0xd6, 0xa9, 0x1d, 0x45, 0x1e, 0x8e, 0xf4, 0xcb, 0xd9, 0xeb, 0x69, 0xc5,
	0x04, 0x1f, 0x4f, 0x02, 0xe7, 0xae, 0x60, 0xa2, 0xfb, 0xb0, 0xe5, 0x7a, 0xc4, 0x3e, 0xf5, 0xb1,
	0x65, 0xc7, 0x34, 0xb4, 0xc6, 0x51, 0x78, 0x16, 0x61, 0x42, 0x64, 0xc9, 0xeb, 0xdd, 0xac, 0xf2,
	0x45, 0x29, 0x7a, 0x27, 0xa6, 0xe1, 0x91, 0x14, 0x14, 0xc5, 0xdf, 0xbb, 0x9a, 0x45, 0x62, 0x86,
	0xee, 0x05, 0x48, 0xdc, 0xfb, 0x7b, 0x55, 0x48, 0x09, 0x9d, 0x32, 0xbc, 0xde, 0x81, 0x8e, 0x1f,
	0x9e, 0x79, 0x0e, 0x43, 0x09, 0x6f, 0x84, 0x09, 0xb5, 0x47, 0x63, 0xbd, 0xc2, 0x2a, 0x74, 0xbf,
	0xf2, 0xd9, 0x0d, 0x73, 0x55, 0x32, 0x4f, 0x14, 0x2f, 0xd7, 0x6e, 0x0b, 0xdf, 0xa7, 0xdd, 0xde,
	0x1f, 0xe3, 0x33, 0xe0, 0xbd, 0x94, 0x07, 0xef, 0x92, 0x16, 0x5e, 0x9e, 0xa3, 0x85, 0xab, 0x73,
	0xb7, 0xf0, 0x14, 0xb2, 0xaf, 0x9c, 0x43, 0xf6, 0x82, 0x1e, 0xaf, 0x15, 0xf6, 0xf8, 0xff, 0x78,
	0x04, 0x14, 0x8d, 0xb6, 0x66, 0xe1, 0x68, 0x2b, 0x02, 0xf5, 0x56, 0x21, 0xa8, 0x7f, 0x09, 0xba,
	0x82, 0x88, 0x04, 0x1b, 0xec, 0xc0, 0xc1, 0x3e, 0x76, 0xf9, 0x18, 0x48, 0xca, 0x77, 0x5d, 0x40,
	0x83, 0x04, 0x05, 0x29, 0x82, 0x7e, 0x03, 0xff, 0xa7, 0xd4, 0x93, 0xcb, 0x12, 0x86, 0x9e, 0xda,
	0xc4, 0x1a, 0xe3, 0xc0, 0xf5, 0x82, 0x33, 0x4b, 0x42, 0x99, 0x98, 0x15, 0x0a, 0xad, 0xae, 0x09,
	0x83, 0xc9, 0x6d, 0x32, 0xcb, 0x0f, 0x6c, 0x72, 0x24, 0x74, 0x8e, 0xa5, 0x4a, 0x19, 0x48, 0x76,
	0xca, 0x40, 0x72, 0x1a, 0x87, 0xd0, 0x7b, 0xe0, 0xd0, 0x36, 0x80, 0x8b, 0x4f, 0xe3, 0x33, 0xcb,
	0x0b, 0x86, 0x21, 0x1f, 0x20, 0x35, 0xb3, 0xc6, 0x29, 0x87, 0xc1, 0x30, 0x44, 0x9f, 0xc2, 0x6a,
	0xd2, 0xe9, 0xaa, 0x90, 0xd7, 0xb9, 0x50, 0x5b, 0xd1, 0xbf, 0x91, 0x05, 0x7d, 0x6e, 0x6a, 0x6f,
	0x94, 0x4e, 0xed, 0xde, 0xed, 0x6c, 0x7f, 0x33, 0x14, 0xf8, 0x04, 0x16, 0xb9, 0x8e, 0xc6, 0xdb,
	0x72, 0xad, 0x20, 0x04, 0x93, 0x0b, 0xf4, 0xfe, 0x5d, 0x85, 0x3a, 0x7b, 0x3c, 0x0a, 0x7d, 0x9f,
	0x01, 0xc3, 0x55, 0xa8, 0xb3, 0xc4, 0x87, 0x31, 0xb5, 0x08, 0x76, 0xb8, 0xfe, 0xe2, 0x7e, 0xe5,
	0x8b, 0x5d, 0x13, 0x24, 0xf9, 0x18, 0x3b, 0xe8, 0xd7, 0xb0, 0x11, 0xe0, 0x17, 0xdc, 0x2b, 0x62,
	0x0d, 0x3d, 0x9f, 0xe2, 0x48, 0x74, 0x72, 0x85, 0x77, 0xf2, 0xa7, 0x05, 0xc7, 0x49, 0xfb, 0x83,
	0xc7, 0xf8, 0x05, 0x7b, 0x24, 0xf7, 0xb9, 0x96, 0x89, 0x82, 0xdc, 0x33, 0xef, 0xf1, 0x3d, 0xd8,
	0x50, 0x75, 0x94, 0x3b, 0x42, 0x5f, 0xe8, 0x2e, 0xf4, 0x1b, 0xe6, 0x9a, 0x62, 0x66, 0xf4, 0xd0,
	0x4d, 0xd8, 0xcc, 0x17, 0x51, 0xa2, 0xb4, 0xc8, 0x95, 0xd6, 0x9d, 0x6c, 0xad, 0x28, 0x2d, 0x0c,
	0xba, 0xf3, 0xd4, 0x0e, 0xce, 0x54, 0xe1, 0x65, 0x43, 0x59, 0xe2, 0xa1, 0xfc, 0xff, 0x8c, 0x50,
	0x0e, 0x84, 0x2a, 0x23, 0xc9, 0x68, 0x36, 0x9c, 0x69, 0x12, 0x0f, 0x68, 0x1b, 0x40, 0x4d, 0x19,
	0xcf, 0x95, 0x4b, 0x67, 0x4d, 0x52, 0x0e, 0x5d, 0xf4, 0x3b, 0x0d, 0x3e, 0x96, 0x4f, 0xd8, 0xb5,
	0x18, 0xd2, 0x60, 0x8b, 0x46, 0x76, 0x40, 0x3c, 0xbe, 0xc9, 0x66, 0x9d, 0xaa, 0x72, 0xa7, 0x7e,
	0x38, 0xc3, 0x29, 0x53, 0x19, 0x62, 0xc8, 0x85, 0x4f, 0x12, 0x33, 0xd2, 0xc3, 0x5e, 0x34, 0x93,
	0xcf, 0xdd, 0xcd, 0x8d, 0xcc, 0x95, 0x39, 0x46, 0x66, 0xed, 0x7d, 0x46, 0xa6, 0xe1, 0x40, 0x2b,
	0x5f, 0x0c, 0xf9, 0xad, 0x5a, 0x9b, 0xde, 0xaa, 0x3f, 0x87, 0x4d, 0xbe, 0x13, 0x3e, 0x0b, 0xc2,
	0x17, 0x41, 0xae, 0xa1, 0x2b, 0xbc, 0xa1, 0xd7, 0x18, 0xf7, 0x21, 0x63, 0xa6, 0x2d, 0x6d, 0x3c,
	0x87, 0xce, 0xb9, 0x34, 0xa1, 0x4b, 0x50, 0x4b, 0x51, 0x50, 0x4c, 0xc0, 0x15, 0xaa, 0xf0, 0xef,
	0x2b, 0xd8, 0xca, 0x1c, 0x53, 0x32, 0x10, 0xcd, 0x8b, 0xc9, 0x61, 0x8f, 0xa6, 0xa6, 0xa2, 0xf1,
	0x47, 0x0d, 0x3e, 0x9c, 0x9d, 0x85, 0xd9, 0x0e, 0xf8, 0x70, 0x2d, 0xe3, 0x40, 0x79, 0x61, 0x70,
	0x4f, 0x66, 0x8f, 0xad, 0x2b, 0x89, 0x97, 0x65, 0x0e, 0xf5, 0xfe, 0xb2, 0x90, 0xf6, 0x3f, 0x03,
	0x8e, 0x2b, 0xb0, 0xc2, 0x62, 0x75, 0xc3, 0x58, 0xa4, 0x20, 0x01, 0x9c, 0x84, 0x8c, 0x76, 0xa1,
	0x96, 0x74, 0xbf, 0xec, 0xf8, 0x42, 0x80, 0x59, 0x51, 0xbd, 0x8d, 0xf6, 0xa1, 0x95, 0xef, 0x68,
	0xde, 0xca, 0x25, 0x6a, 0xcd, 0x5c, 0x7f, 0xa3, 0x1f, 0x43, 0x7b, 0xaa, 0xb3, 0xe5, 0xbe, 0x50,
	0xa8, 0xdc, 0xca, 0xf7, 0x39, 0xba, 0x0d, 0xcd, 0x6c, 0x87, 0x13, 0xd9, 0xd6, 0x85, 0xba, 0x8d,
	0x4c, 0xf7, 0x12, 0x74, 0x15, 0x9a, 0x71, 0x20, 0x72, 0xc0, 0xd2, 0x44, 0xf4, 0x65, 0x0e, 0x24,
	0x0d, 0x49, 0x64, 0xa9, 0x22, 0xec, 0xb6, 0x92, 0x91, 0x57, 0xcd, 0xdd, 0x96, 0x22, 0x23, 0x07,
	0x3e, 0x9a, 0xd5, 0xdc, 0x61, 0x24, 0x1d, 0x5b, 0x29, 0x77, 0xac, 0x5b, 0xda, 0xb4, 0x61, 0xc4,
	0x9d, 0xed, 0xfd, 0x12, 0x3a, 0x2a, 0x89, 0x62, 0xbe, 0x32, 0x28, 0xff, 0x38, 0xed, 0x54, 0xcf,
	0x4d, 0xdf, 0xf4, 0x6b, 0x66, 0x33, 0xc1, 0x9e, 0xf3, 0xfd, 0x5e, 0x99, 0xea, 0xf7, 0xde, 0xda,
	0xb4, 0x69, 0x13, 0xd3, 0xde, 0xbf, 0x16, 0x45, 0xd5, 0x30, 0x7d, 0x76, 0xd4, 0x03, 0x58, 0x95,
	0x0b, 0x1d, 0x7b, 0xef, 0x4e, 0xcf, 0x3a, 0x3f, 0x3d, 0xd5, 0x56, 0x27, 0x7f, 0x98, 0x2d, 0xa1,
	0xc7, 0xde, 0xcc, 0xb9, 0x33, 0x53, 0xab, 0x61, 0x65, 0xfe, 0xd5, 0x70, 0x00, 0x6b, 0xf9, 0xd7,
	0x7f, 0x61, 0x61, 0x81, 0x87, 0xdc, 0xc9, 0x7d, 0x03, 0x50, 0xf2, 0x09, 0xb8, 0x64, 0xe4, 0x17,
	0x85, 0x7c, 0xc2, 0x4a, 0xe4, 0x6f, 0x40, 0xc7, 0x0b, 0x1c, 0x3f, 0x76, 0x71, 0x66, 0xb9, 0x5b,
	0xca, 0x6c, 0x25, 0xab, 0x92, 0x9d, 0x2e, 0x79, 0xfb, 0xb0, 0xa9, 0x54, 0x72, 0xa3, 0x9c, 0xf0,
	0x21, 0xa0, 0xf4, 0xd6, 0xa5, 0xcc, 0x61, 0x66, 0xa2, 0x13, 0xfe, 0x22, 0x1e, 0xd3, 0x70, 0x38,
	0xcc, 0x2e, 0x62, 0x55, 0xf9, 0x22, 0xce, 0x19, 0xe9, 0x26, 0xa6, 0xc3, 0x92, 0xef, 0x8d, 0x3c,
	0xf1, 0x29, 0x42, 0x6c, 0xeb, 0x82, 0x80, 0x3e, 0x07, 0xe4, 0x87, 0x0c, 0xc0, 0x1c, 0x3f, 0x26,
	0x6c, 0x8c, 0x84, 0x81, 0x3f, 0xe1, 0x80, 0x9d, 0x94, 0xea, 0x2a, 0x17, 0x38, 0x10, 0xfc, 0x6f,
	0x03, 0x7f, 0xc2, 0x8f, 0x96, 0xe2, 0xac, 0xf4, 0xc5, 0xbd, 0x00, 0x2f, 0xff, 0xb6, 0x64, 0xb0,
	0xf2, 0xe7, 0xb7, 0xf2, 0x19, 0xb4, 0x99, 0x49, 0x2b, 0x0a, 0x43, 0x2a, 0x63, 0xab, 0x67, 0xad,
	0x37, 0x19, 0xd7, 0x0c, 0x43, 0x2a, 0xa2, 0xfa, 0x11, 0xd4, 0xc5, 0x2a, 0x2d, 0x8c, 0x36, 0x78,
	0x8d, 0xcc, 0x82, 0x30, 0x10, 0xe2, 0xfc, 0xb3, 0xd3, 0x5f, 0xb5, 0xb4, 0xea, 0x18, 0x56, 0x7d,
	0x04, 0xad, 0x04, 0x46, 0xd3, 0x9a, 0x6b, 0x98, 0x0d, 0x85, 0xa5, 0xdc, 0xc3, 0x5f, 0xc0, 0xfa,
	0xc8, 0x7e, 0x99, 0x1d, 0x18, 0xd9, 0xd2, 0xba, 0x56, 0x70, 0xb6, 0xb4, 0x3f, 0x48, 0xe7, 0x88,
	0xd9, 0x19, 0xd9, 0x2f, 0xd3, 0x47, 0x26, 0x60, 0x3c, 0x04, 0xc8, 0xec, 0x8e, 0xb3, 0x67, 0xd7,
	0x65, 0xa8, 0x9f, 0x1f, 0x58, 0x40, 0x12, 0xf5, 0xde, 0x3b, 0x0d, 0x80, 0x1d, 0xfd, 0x35, 0xe6,
	0xfd, 0x34, 0x5f, 0x64, 0xb7, 0x61, 0x43, 0x95, 0x97, 0xda, 0x73, 0x05, 0x54, 0x55, 0x32, 0xd5,
	0xb5, 0x26, 0x45, 0xe4, 0x56, 0x2c, 0x70, 0xab, 0x60, 0x88, 0x2f, 0xbc, 0xcf, 0x10, 0xef, 0xfd,
	0x24, 0x71, 0x9b, 0x25, 0x64, 0x57, 0xce, 0xb5, 0xcc, 0x57, 0xc5, 0xe2, 0xc9, 0x40, 0xe5, 0x2d,
	0xf7, 0x6e, 0xc9, 0xd7, 0xd7, 0x04, 0xb4, 0xe6, 0x8a, 0xbc, 0x77, 0x33, 0xab, 0xc6, 0x4e, 0x3e,
	0x87, 0xd6, 0xda, 0x79, 0xb4, 0xee, 0x7d, 0x01, 0x2d, 0xa6, 0x75, 0x1c, 0x13, 0xf6, 0x76, 0x31,
	0xff, 0x69, 0xb7, 0x72, 0x7a, 0x73, 0x1f, 0x27, 0x63, 0x33, 0x31, 0x89, 0x47, 0xf8, 0x7b, 0xc7,
	0x26, 0xd4, 0xe6, 0x3e, 0xec, 0x0e, 0x5c, 0x94, 0x89, 0xc8, 0x24, 0x5a, 0xc1, 0xf3, 0x7c, 0x07,
	0xff, 0x43, 0x2b, 0xb3, 0xc1, 0xbc, 0x78, 0x02, 0xad, 0x08, 0x93, 0xd8, 0xa7, 0x16, 0x0e, 0x68,
	0xc4, 0x5e, 0x8f, 0x44, 0x82, 0x07, 0x05, 0x09, 0x2e, 0xb4, 0xc0, 0x50, 0x3b, 0x9a, 0xb0, 0xe1,
	0xc3, 0xac, 0xdc, 0x13, 0x46, 0xce, 0x07, 0x57, 0x39, 0x1f, 0x9c, 0x71, 0x04, 0x4b, 0x5c, 0x79,
	0xf6, 0xe2, 0x74, 0x1d, 0x3a, 0xd9, 0x36, 0x48, 0xbb, 0xbc, 0x61, 0xb6, 0x49, 0xde, 0x9d, 0x5e,
	0x08, 0xab, 0x99, 0xba, 0x0b, 0x26, 0x65, 0xdf, 0x44, 0x0a, 0x1a, 0xa5, 0xf2, 0x5e, 0x8d, 0x82,
	0xa6, 0x0e, 0x34, 0x31, 0xdd, 0xfb, 0x5b, 0x15, 0xea, 0xf7, 0xd8, 0xa5, 0x99, 0x63, 0xe7, 0xf8,
	0x3b, 0x07, 0x3d, 0x86, 0x46, 0xf6, 0x5b, 0x3d, 0x9a, 0x9e, 0x9d, 0x53, 0xff, 0x1a, 0x30, 0x66,
	0xf1, 0x59, 0xca, 0x1e, 0x88, 0xe6, 0x14, 0xdf, 0x86, 0xd0, 0x56, 0x41, 0xa2, 0x92, 0x0f, 0xf8,
	0x46, 0x39, 0x37, 0x63, 0x49, 0xbc, 0x5f, 0x16, 0x5a, 0x4a, 0x3e, 0x2d, 0x19, 0xe5, 0x5c, 0x66,
	0xe9, 0x2e, 0xac, 0x28, 0x88, 0x45, 0x46, 0x09, 0xf6, 0x32, 0x2b, 0x46, 0x39, 0x2e, 0xa3, 0xaf,
	0xa0, 0x2a, 0xab, 0x0c, 0x5d, 0x2c, 0xae, 0x3e, 0x66, 0xa1, 0x84, 0x95, 0xbd, 0x18, 0x9e, 0x8c,
	0xe2, 0x8b, 0x51, 0x80, 0x64, 0x94, 0x73, 0x99, 0x25, 0x53, 0x84, 0xc3, 0xb6, 0xa3, 0xc2, 0x70,
	0xe4, 0x6b, 0x99, 0x51, 0xc6, 0x63, 0xcb, 0x54, 0xeb, 0xd5, 0xdb, 0xed, 0x3f, 0xff, 0x73, 0xf4,
	0xfa, 0xed, 0xf6, 0x07, 0x6f, 0xde, 0x6e, 0x7f, 0x80, 0x4e, 0x04, 0xdc, 0xa4, 0x1b, 0x17, 0xea,
	0x96, 0x68, 0xa7, 0x5e, 0xce, 0x96, 0x60, 0x9e, 0x3e, 0x14, 0xb3, 0x53, 0x82, 0x18, 0x2a, 0xfa,
	0xd6, 0x94, 0x02, 0xa3, 0x31, 0x83, 0x9d, 0xb9, 0x40, 0x81, 0x51, 0x85, 0x17, 0x98, 0xa0, 0x9e,
	0x51, 0xce, 0x65, 0x96, 0x7c, 0xd8, 0x2c, 0x46, 0x0c, 0xd4, 0x9f, 0x0b, 0x58, 0xd8, 0x09, 0xfd,
	0x79, 0x21, 0x08, 0xfd, 0x3c, 0x37, 0x6e, 0x82, 0x09, 0xba, 0x5c, 0x9e, 0x7b, 0x0e, 0x0a, 0xc6,
	0x4c, 0x01, 0x13, 0x53, 0xe3, 0xc2, 0xab, 0x77, 0xfa, 0x9f, 0x7e, 0x5f, 0x79, 0xfd, 0x4e, 0xaf,
	0xbc, 0x79, 0xa7, 0x6b, 0xbf, 0xfd, 0x43, 0x6f, 0x89, 0x4b, 0xde, 0x5d, 0xfd, 0x95, 0xf8, 0xf1,
	0x4a, 0xd3, 0x5e, 0x6b, 0xda, 0x1b, 0x4d, 0xfb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x20, 0xcf,
	0x91, 0xee, 0x60, 0x1c, 0x00, 0x00,
}

//Generated by ntnx_rpc plugin

// Service ErgonRpcSvc
type IErgonRpcSvc interface {
	BeforeRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}) error
	AfterRpcCall(rpc *util_net.ProtobufRpc, arg interface{}, ret interface{}, err error) error

	BatchRequest(*BatchRequestArg, *BatchRequestRet) error
	TaskCreate(*TaskCreateArg, *TaskCreateRet) error
	TaskUpdate(*TaskUpdateArg, *TaskUpdateRet) error
	TaskList(*TaskListArg, *TaskListRet) error
	TaskGet(*TaskGetArg, *TaskGetRet) error
	TaskCancel(*TaskCancelArg, *TaskCancelRet) error
	TaskPoll(*TaskPollArg, *TaskPollRet) error
	TaskPollCancel(*TaskPollCancelArg, *TaskPollCancelRet) error
	TaskSuspend(*TaskSuspendArg, *TaskSuspendRet) error
	TaskResume(*TaskResumeArg, *TaskResumeRet) error
	TaskGetSubtaskUuidList(*TaskGetSubtaskUuidListArg, *TaskGetSubtaskUuidListRet) error
	TaskCancelAny(*TaskCancelAnyArg, *TaskCancelAnyRet) error
}

func _ErgonRpcSvc_BatchRequest_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(BatchRequestArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &BatchRequestRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.BatchRequest(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _ErgonRpcSvc_TaskCreate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskCreateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskCreateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskCreate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _ErgonRpcSvc_TaskUpdate_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskUpdateArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskUpdateRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskUpdate(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _ErgonRpcSvc_TaskList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _ErgonRpcSvc_TaskGet_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskGetArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskGetRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskGet(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _ErgonRpcSvc_TaskCancel_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskCancelArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskCancelRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskCancel(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _ErgonRpcSvc_TaskPoll_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskPollArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskPollRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskPoll(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _ErgonRpcSvc_TaskPollCancel_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskPollCancelArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskPollCancelRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskPollCancel(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _ErgonRpcSvc_TaskSuspend_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskSuspendArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskSuspendRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskSuspend(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _ErgonRpcSvc_TaskResume_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskResumeArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskResumeRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskResume(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _ErgonRpcSvc_TaskGetSubtaskUuidList_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskGetSubtaskUuidListArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskGetSubtaskUuidListRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskGetSubtaskUuidList(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

func _ErgonRpcSvc_TaskCancelAny_Handler(rpc *util_net.ProtobufRpc, handlers interface{}) error {
	handler, ok := handlers.(IErgonRpcSvc)
	if !ok {
		return util_net.ErrMethod
	}
	arg := new(TaskCancelAnyArg)
	err := proto.Unmarshal(rpc.RequestPayload, arg)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Failed to unmarshal request"))
	}
	ret := &TaskCancelAnyRet{}
	err = handler.BeforeRpcCall(rpc, arg, ret)
	if err != nil {
		return err
	}
	err = handler.TaskCancelAny(arg, ret)
	err = handler.AfterRpcCall(rpc, arg, ret, err)
	if err != nil {
		return err
	}
	rpc.ResponsePayload, err = proto.Marshal(ret)
	if err != nil {
		return util_net.ErrTransport.SetCause(
			errors.New("Error in marshaling response"))
	}
	return nil
}

var _ErgonRpcSvcDesc = util_net.ServiceDesc{
	Name: "nutanix.ergon.ErgonRpcSvc",
	Methods: map[string]util_net.ServiceMethodFn{
		"BatchRequest":           _ErgonRpcSvc_BatchRequest_Handler,
		"TaskCreate":             _ErgonRpcSvc_TaskCreate_Handler,
		"TaskUpdate":             _ErgonRpcSvc_TaskUpdate_Handler,
		"TaskList":               _ErgonRpcSvc_TaskList_Handler,
		"TaskGet":                _ErgonRpcSvc_TaskGet_Handler,
		"TaskCancel":             _ErgonRpcSvc_TaskCancel_Handler,
		"TaskPoll":               _ErgonRpcSvc_TaskPoll_Handler,
		"TaskPollCancel":         _ErgonRpcSvc_TaskPollCancel_Handler,
		"TaskSuspend":            _ErgonRpcSvc_TaskSuspend_Handler,
		"TaskResume":             _ErgonRpcSvc_TaskResume_Handler,
		"TaskGetSubtaskUuidList": _ErgonRpcSvc_TaskGetSubtaskUuidList_Handler,
		"TaskCancelAny":          _ErgonRpcSvc_TaskCancelAny_Handler,
	},
}

func NewErgonRpcSvc(impl IErgonRpcSvc) *util_net.Service {
	return &util_net.Service{
		Desc: &_ErgonRpcSvcDesc,
		Impl: impl,
	}
}

type IErgonRpcClient interface {
	BatchRequest(*BatchRequestArg) (*BatchRequestRet, error)
	TaskCreate(*TaskCreateArg) (*TaskCreateRet, error)
	TaskUpdate(*TaskUpdateArg) (*TaskUpdateRet, error)
	TaskList(*TaskListArg) (*TaskListRet, error)
	TaskGet(*TaskGetArg) (*TaskGetRet, error)
	TaskCancel(*TaskCancelArg) (*TaskCancelRet, error)
	TaskPoll(*TaskPollArg) (*TaskPollRet, error)
	TaskPollCancel(*TaskPollCancelArg) (*TaskPollCancelRet, error)
	TaskSuspend(*TaskSuspendArg) (*TaskSuspendRet, error)
	TaskResume(*TaskResumeArg) (*TaskResumeRet, error)
	TaskGetSubtaskUuidList(*TaskGetSubtaskUuidListArg) (*TaskGetSubtaskUuidListRet, error)
	TaskCancelAny(*TaskCancelAnyArg) (*TaskCancelAnyRet, error)
}

type ErgonRpcClient struct {
	Impl util_net.ProtobufRPCClientIfc
}

func NewErgonRpcClient(impl util_net.ProtobufRPCClientIfc) IErgonRpcClient {
	return &ErgonRpcClient{
		Impl: impl,
	}
}

func (client *ErgonRpcClient) BatchRequest(
	arg *BatchRequestArg) (
	*BatchRequestRet, error) {

	ret := &BatchRequestRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "BatchRequest", arg, ret, 0)
	return ret, err
}

func (client *ErgonRpcClient) TaskCreate(
	arg *TaskCreateArg) (
	*TaskCreateRet, error) {

	ret := &TaskCreateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "TaskCreate", arg, ret, 0)
	return ret, err
}

func (client *ErgonRpcClient) TaskUpdate(
	arg *TaskUpdateArg) (
	*TaskUpdateRet, error) {

	ret := &TaskUpdateRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "TaskUpdate", arg, ret, 0)
	return ret, err
}

func (client *ErgonRpcClient) TaskList(
	arg *TaskListArg) (
	*TaskListRet, error) {

	ret := &TaskListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "TaskList", arg, ret, 0)
	return ret, err
}

func (client *ErgonRpcClient) TaskGet(
	arg *TaskGetArg) (
	*TaskGetRet, error) {

	ret := &TaskGetRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "TaskGet", arg, ret, 0)
	return ret, err
}

func (client *ErgonRpcClient) TaskCancel(
	arg *TaskCancelArg) (
	*TaskCancelRet, error) {

	ret := &TaskCancelRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "TaskCancel", arg, ret, 0)
	return ret, err
}

func (client *ErgonRpcClient) TaskPoll(
	arg *TaskPollArg) (
	*TaskPollRet, error) {

	ret := &TaskPollRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "TaskPoll", arg, ret, 0)
	return ret, err
}

func (client *ErgonRpcClient) TaskPollCancel(
	arg *TaskPollCancelArg) (
	*TaskPollCancelRet, error) {

	ret := &TaskPollCancelRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "TaskPollCancel", arg, ret, 0)
	return ret, err
}

func (client *ErgonRpcClient) TaskSuspend(
	arg *TaskSuspendArg) (
	*TaskSuspendRet, error) {

	ret := &TaskSuspendRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "TaskSuspend", arg, ret, 0)
	return ret, err
}

func (client *ErgonRpcClient) TaskResume(
	arg *TaskResumeArg) (
	*TaskResumeRet, error) {

	ret := &TaskResumeRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "TaskResume", arg, ret, 0)
	return ret, err
}

func (client *ErgonRpcClient) TaskGetSubtaskUuidList(
	arg *TaskGetSubtaskUuidListArg) (
	*TaskGetSubtaskUuidListRet, error) {

	ret := &TaskGetSubtaskUuidListRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "TaskGetSubtaskUuidList", arg, ret, 0)
	return ret, err
}

func (client *ErgonRpcClient) TaskCancelAny(
	arg *TaskCancelAnyArg) (
	*TaskCancelAnyRet, error) {

	ret := &TaskCancelAnyRet{}
	err := client.Impl.CallMethodSync(
		"nutanix.ergon.ErgonRpcSvc", "TaskCancelAny", arg, ret, 0)
	return ret, err
}
