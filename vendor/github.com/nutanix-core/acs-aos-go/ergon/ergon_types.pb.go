// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ergon/ergon_types.proto

package ergon

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	net "github.com/nutanix-core/acs-aos-go/nutanix/util-slbufs/util/sl_bufs/net"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Entities types.
type EntityId_Entity int32

const (
	// This is used to indicate newer entity types returned by an upgraded
	// server that a client on older versions can not interpret.
	EntityId_kUnknown EntityId_Entity = 0
	// entity_id field format: 16 byte UUID.
	EntityId_kNode EntityId_Entity = 1
	// 16 byte UUID.
	EntityId_kVM EntityId_Entity = 2
	// 16 byte UUID.
	EntityId_kSnapshot         EntityId_Entity = 3
	EntityId_kDisk             EntityId_Entity = 4
	EntityId_kProtectionDomain EntityId_Entity = 5
	EntityId_kConsistencyGroup EntityId_Entity = 6
	EntityId_kPackage          EntityId_Entity = 7
	EntityId_kRemoteSite       EntityId_Entity = 8
	// 16 byte UUID.
	EntityId_kVolumeGroup EntityId_Entity = 9
	// 16 byte UUID.
	EntityId_kImage   EntityId_Entity = 10
	EntityId_kCluster EntityId_Entity = 11
	EntityId_kTag     EntityId_Entity = 12
	// 16 byte UUID.
	EntityId_kAlertCheckSchema EntityId_Entity = 13
	// 16 byte UUID on PE. <cluster_uuid>::<uuid> on PC.
	EntityId_kAlertCheckSchemaOverride EntityId_Entity = 14
	// 16 byte UUID.
	EntityId_kFileServer EntityId_Entity = 15
	// 16 byte UUID.
	EntityId_kFileServerShare EntityId_Entity = 16
	// 16 byte UUID.
	EntityId_kVirtualNetwork EntityId_Entity = 17
	// 16 byte UUID.
	EntityId_kAbacEntityPermission EntityId_Entity = 18
	// 16 byte UUID.
	EntityId_kAbacEntityRole EntityId_Entity = 19
	// 16 byte UUID.
	EntityId_kAbacRole EntityId_Entity = 20
	// 16 byte UUID.
	EntityId_kAbacCategory EntityId_Entity = 21
	// 16 byte UUID.
	EntityId_kAbacUserCapability EntityId_Entity = 22
	// 16 byte UUID.
	EntityId_kAbacEntityCapability EntityId_Entity = 23
	// 16 byte UUID.
	EntityId_kProject EntityId_Entity = 24
	// 16 byte UUID.
	EntityId_kVmGroup  EntityId_Entity = 25
	EntityId_kTemplate EntityId_Entity = 26
	// 16 byte UUID.
	EntityId_kWebhook EntityId_Entity = 27
	// 16 byte UUID.
	EntityId_kLcmEntity EntityId_Entity = 28
	// 16 byte UUID.
	EntityId_kContainer EntityId_Entity = 29
	// 16 byte UUID.
	EntityId_kContainerCluster EntityId_Entity = 30
	// 16 byte UUID.
	EntityId_kDockerRegistry       EntityId_Entity = 31
	EntityId_kNetworkFunctionChain EntityId_Entity = 32
	EntityId_kExtension            EntityId_Entity = 33
	EntityId_kManagementServerInfo EntityId_Entity = 34
	EntityId_kAffinityInfo         EntityId_Entity = 35
	EntityId_kRecoveryPlan         EntityId_Entity = 36
	// 16 byte UUID.
	EntityId_kCatalogItem      EntityId_Entity = 37
	EntityId_kRemoteConnection EntityId_Entity = 38
	EntityId_kProtectionRule   EntityId_Entity = 39
	EntityId_kReportConfig     EntityId_Entity = 40
	// 16 byte UUID.
	EntityId_kAvailabilityZone EntityId_Entity = 41
	// 16 byte UUID.
	EntityId_kRecoveryPlanJob EntityId_Entity = 42
	// 16 byte UUID.
	EntityId_kAtlasVirtualNetwork EntityId_Entity = 43
	// 16 byte UUID.
	EntityId_kFile               EntityId_Entity = 44
	EntityId_kCommonReportConfig EntityId_Entity = 45
	// 16 byte UUID.
	EntityId_kAccessRequest EntityId_Entity = 46
	// 16 byte UUID.
	EntityId_kJumpBox EntityId_Entity = 47
	// 16 byte UUID.
	EntityId_kSSHUser         EntityId_Entity = 48
	EntityId_kAppBlueprint    EntityId_Entity = 49
	EntityId_kMarketplaceItem EntityId_Entity = 50
	// 16 byte UUID.
	EntityId_kStreamingPolicy  EntityId_Entity = 51
	EntityId_kReportInstance   EntityId_Entity = 52
	EntityId_kDirectoryService EntityId_Entity = 53
	EntityId_kSubnet           EntityId_Entity = 54
	// 16 byte UUID.
	EntityId_kAffinityRule EntityId_Entity = 55
	// 16 byte UUID.
	EntityId_kAGSManagedMachine EntityId_Entity = 56
	// 16 byte UUID.
	EntityId_kDirectConnect EntityId_Entity = 57
	// 16 byte UUID.
	EntityId_kDirectConnectSp EntityId_Entity = 58
	// 16 byte UUID.
	EntityId_kDirectConnectVif EntityId_Entity = 59
	// 16 byte UUID.
	EntityId_kSupportCaseUpload EntityId_Entity = 61
	// 16 byte UUID.
	EntityId_kPort EntityId_Entity = 62
	// 16 byte UUID
	EntityId_kDatacenter EntityId_Entity = 63
	// 16 byte UUID
	EntityId_kCell EntityId_Entity = 64
	// 16 byte UUID
	EntityId_kRack EntityId_Entity = 65
	// 16 byte UUID
	EntityId_kNetworkDevice EntityId_Entity = 66
	// 16 byte UUID
	EntityId_kUnderlaySubnet EntityId_Entity = 67
	// 16 byte UUID
	EntityId_kFloatingIp EntityId_Entity = 68
	// 16 byte UUID.
	EntityId_kNetworkSecurityRule EntityId_Entity = 69
	// 16 byte UUID.
	EntityId_kDirectConnectPort EntityId_Entity = 70
	// 16 byte UUID.
	EntityId_kCidr EntityId_Entity = 71
	// 16 byte UUID
	EntityId_kBlackout EntityId_Entity = 72
	// 16 byte UUID
	EntityId_kAccessControlPolicy EntityId_Entity = 73
	// 16 byte UUID
	EntityId_kApp EntityId_Entity = 74
	// 16 byte UUID.
	EntityId_kMicroseg EntityId_Entity = 75
	// 16 byte UUID.
	EntityId_kAlert EntityId_Entity = 76
	// 16 byte UUID
	EntityId_kSecret EntityId_Entity = 77
	// 16 byte UUID
	EntityId_kFileServerShareSnapshot EntityId_Entity = 78
	// 16 byte UUID
	EntityId_kIamTenant EntityId_Entity = 79
	// 16 byte UUID
	EntityId_kIamServiceAccount EntityId_Entity = 80
	// 16 byte UUID
	EntityId_kIamServiceProvider EntityId_Entity = 81
	// 16 byte UUID
	EntityId_kIamIdentityProvider EntityId_Entity = 82
	// 16 byte UUID
	EntityId_kCloudTrust EntityId_Entity = 83
	// 16 bytes UUID
	EntityId_kRecoveryPoint EntityId_Entity = 84
	// 16 bytes UUID
	EntityId_kVpnGateway EntityId_Entity = 85
	// 16 bytes UUID
	EntityId_kVpnConnection  EntityId_Entity = 86
	EntityId_kEntitySyncRule EntityId_Entity = 87
	EntityId_kClusterVswitch EntityId_Entity = 88
	// 16 bytes UUID
	EntityId_kRackableUnit EntityId_Entity = 89
	// 16 byte UUID
	EntityId_kIamServiceAccountGroup EntityId_Entity = 90
	EntityId_kDummyApi               EntityId_Entity = 91
	// 16 byte UUID
	EntityId_kQosPolicy        EntityId_Entity = 92
	EntityId_kNgtPolicy        EntityId_Entity = 93
	EntityId_kIdentityProvider EntityId_Entity = 94
	// 16 byte UUID
	EntityId_kActionRule EntityId_Entity = 95
	// 16 byte UUID
	EntityId_kActionType EntityId_Entity = 96
	// 16 byte UUID
	EntityId_kActionTriggerType EntityId_Entity = 97
	// 16 byte UUID
	EntityId_kActionTemplate EntityId_Entity = 98
	// 16 byte UUID
	EntityId_kActionRuleResult EntityId_Entity = 99
	EntityId_kRoutingPolicy    EntityId_Entity = 100
	// 16 byte UUID
	EntityId_kIdCategorizationMapping EntityId_Entity = 101
	// 16 byte UUID
	EntityId_kRemoteSyslogServer EntityId_Entity = 102
	// 16 byte UUID
	EntityId_kRemoteSyslogModule EntityId_Entity = 103
	// 16 byte UUID
	EntityId_kCitrixAdapter EntityId_Entity = 104
	// 16 byte UUID
	EntityId_kOVA EntityId_Entity = 105
	// 16 bytes UUID
	EntityId_kCatalogPlacementPolicy EntityId_Entity = 106
	// 16 bytes UUID
	EntityId_kExternalRepository EntityId_Entity = 107
	// 16 bytes UUID
	EntityId_kCloudTenant EntityId_Entity = 108
	// 16 byte UUID.
	EntityId_kAtlasVirtualNetworkRouteTable EntityId_Entity = 109
	EntityId_kDedicatedDomain               EntityId_Entity = 110
	// 16 byte UUID.
	EntityId_kVpc EntityId_Entity = 111
	// 16 byte UUID.
	EntityId_kRoutingPolicyCollection EntityId_Entity = 112
	// 16 byte UUID.
	EntityId_kNetworkController EntityId_Entity = 113
	// 16 byte UUID.
	EntityId_kVirtualDisk EntityId_Entity = 114
	// 16 byte UUID.
	EntityId_kVirtualSwitch EntityId_Entity = 115
	// 16 byte UUID.
	EntityId_kMetricsDataProvider EntityId_Entity = 116
	// 16 byte UUID.
	EntityId_kExternalEntityConfig EntityId_Entity = 117
	// 16 byte UUID.
	EntityId_kXFitPolicy EntityId_Entity = 118
	// 16 byte UUID.
	EntityId_kIscsiClient EntityId_Entity = 119
	// 16 byte UUID.
	EntityId_kIpfixExporter EntityId_Entity = 120
	// 16 byte UUID.
	EntityId_kRole EntityId_Entity = 121
	// 16 byte UUID.
	EntityId_kPermission EntityId_Entity = 122
	// 16 byte UUID.
	EntityId_kFileServerProtectionPolicy EntityId_Entity = 123
	// 16 byte UUID.
	EntityId_kCatalogRateLimit EntityId_Entity = 124
	// 16 byte UUID.
	EntityId_kVmTemplate EntityId_Entity = 125
	// 16 byte UUID.
	EntityId_kLayer2Stretch EntityId_Entity = 127
	// 16 byte UUID
	EntityId_kVCenterVm EntityId_Entity = 128
)

var EntityId_Entity_name = map[int32]string{
	0:   "kUnknown",
	1:   "kNode",
	2:   "kVM",
	3:   "kSnapshot",
	4:   "kDisk",
	5:   "kProtectionDomain",
	6:   "kConsistencyGroup",
	7:   "kPackage",
	8:   "kRemoteSite",
	9:   "kVolumeGroup",
	10:  "kImage",
	11:  "kCluster",
	12:  "kTag",
	13:  "kAlertCheckSchema",
	14:  "kAlertCheckSchemaOverride",
	15:  "kFileServer",
	16:  "kFileServerShare",
	17:  "kVirtualNetwork",
	18:  "kAbacEntityPermission",
	19:  "kAbacEntityRole",
	20:  "kAbacRole",
	21:  "kAbacCategory",
	22:  "kAbacUserCapability",
	23:  "kAbacEntityCapability",
	24:  "kProject",
	25:  "kVmGroup",
	26:  "kTemplate",
	27:  "kWebhook",
	28:  "kLcmEntity",
	29:  "kContainer",
	30:  "kContainerCluster",
	31:  "kDockerRegistry",
	32:  "kNetworkFunctionChain",
	33:  "kExtension",
	34:  "kManagementServerInfo",
	35:  "kAffinityInfo",
	36:  "kRecoveryPlan",
	37:  "kCatalogItem",
	38:  "kRemoteConnection",
	39:  "kProtectionRule",
	40:  "kReportConfig",
	41:  "kAvailabilityZone",
	42:  "kRecoveryPlanJob",
	43:  "kAtlasVirtualNetwork",
	44:  "kFile",
	45:  "kCommonReportConfig",
	46:  "kAccessRequest",
	47:  "kJumpBox",
	48:  "kSSHUser",
	49:  "kAppBlueprint",
	50:  "kMarketplaceItem",
	51:  "kStreamingPolicy",
	52:  "kReportInstance",
	53:  "kDirectoryService",
	54:  "kSubnet",
	55:  "kAffinityRule",
	56:  "kAGSManagedMachine",
	57:  "kDirectConnect",
	58:  "kDirectConnectSp",
	59:  "kDirectConnectVif",
	61:  "kSupportCaseUpload",
	62:  "kPort",
	63:  "kDatacenter",
	64:  "kCell",
	65:  "kRack",
	66:  "kNetworkDevice",
	67:  "kUnderlaySubnet",
	68:  "kFloatingIp",
	69:  "kNetworkSecurityRule",
	70:  "kDirectConnectPort",
	71:  "kCidr",
	72:  "kBlackout",
	73:  "kAccessControlPolicy",
	74:  "kApp",
	75:  "kMicroseg",
	76:  "kAlert",
	77:  "kSecret",
	78:  "kFileServerShareSnapshot",
	79:  "kIamTenant",
	80:  "kIamServiceAccount",
	81:  "kIamServiceProvider",
	82:  "kIamIdentityProvider",
	83:  "kCloudTrust",
	84:  "kRecoveryPoint",
	85:  "kVpnGateway",
	86:  "kVpnConnection",
	87:  "kEntitySyncRule",
	88:  "kClusterVswitch",
	89:  "kRackableUnit",
	90:  "kIamServiceAccountGroup",
	91:  "kDummyApi",
	92:  "kQosPolicy",
	93:  "kNgtPolicy",
	94:  "kIdentityProvider",
	95:  "kActionRule",
	96:  "kActionType",
	97:  "kActionTriggerType",
	98:  "kActionTemplate",
	99:  "kActionRuleResult",
	100: "kRoutingPolicy",
	101: "kIdCategorizationMapping",
	102: "kRemoteSyslogServer",
	103: "kRemoteSyslogModule",
	104: "kCitrixAdapter",
	105: "kOVA",
	106: "kCatalogPlacementPolicy",
	107: "kExternalRepository",
	108: "kCloudTenant",
	109: "kAtlasVirtualNetworkRouteTable",
	110: "kDedicatedDomain",
	111: "kVpc",
	112: "kRoutingPolicyCollection",
	113: "kNetworkController",
	114: "kVirtualDisk",
	115: "kVirtualSwitch",
	116: "kMetricsDataProvider",
	117: "kExternalEntityConfig",
	118: "kXFitPolicy",
	119: "kIscsiClient",
	120: "kIpfixExporter",
	121: "kRole",
	122: "kPermission",
	123: "kFileServerProtectionPolicy",
	124: "kCatalogRateLimit",
	125: "kVmTemplate",
	127: "kLayer2Stretch",
	128: "kVCenterVm",
}

var EntityId_Entity_value = map[string]int32{
	"kUnknown":                       0,
	"kNode":                          1,
	"kVM":                            2,
	"kSnapshot":                      3,
	"kDisk":                          4,
	"kProtectionDomain":              5,
	"kConsistencyGroup":              6,
	"kPackage":                       7,
	"kRemoteSite":                    8,
	"kVolumeGroup":                   9,
	"kImage":                         10,
	"kCluster":                       11,
	"kTag":                           12,
	"kAlertCheckSchema":              13,
	"kAlertCheckSchemaOverride":      14,
	"kFileServer":                    15,
	"kFileServerShare":               16,
	"kVirtualNetwork":                17,
	"kAbacEntityPermission":          18,
	"kAbacEntityRole":                19,
	"kAbacRole":                      20,
	"kAbacCategory":                  21,
	"kAbacUserCapability":            22,
	"kAbacEntityCapability":          23,
	"kProject":                       24,
	"kVmGroup":                       25,
	"kTemplate":                      26,
	"kWebhook":                       27,
	"kLcmEntity":                     28,
	"kContainer":                     29,
	"kContainerCluster":              30,
	"kDockerRegistry":                31,
	"kNetworkFunctionChain":          32,
	"kExtension":                     33,
	"kManagementServerInfo":          34,
	"kAffinityInfo":                  35,
	"kRecoveryPlan":                  36,
	"kCatalogItem":                   37,
	"kRemoteConnection":              38,
	"kProtectionRule":                39,
	"kReportConfig":                  40,
	"kAvailabilityZone":              41,
	"kRecoveryPlanJob":               42,
	"kAtlasVirtualNetwork":           43,
	"kFile":                          44,
	"kCommonReportConfig":            45,
	"kAccessRequest":                 46,
	"kJumpBox":                       47,
	"kSSHUser":                       48,
	"kAppBlueprint":                  49,
	"kMarketplaceItem":               50,
	"kStreamingPolicy":               51,
	"kReportInstance":                52,
	"kDirectoryService":              53,
	"kSubnet":                        54,
	"kAffinityRule":                  55,
	"kAGSManagedMachine":             56,
	"kDirectConnect":                 57,
	"kDirectConnectSp":               58,
	"kDirectConnectVif":              59,
	"kSupportCaseUpload":             61,
	"kPort":                          62,
	"kDatacenter":                    63,
	"kCell":                          64,
	"kRack":                          65,
	"kNetworkDevice":                 66,
	"kUnderlaySubnet":                67,
	"kFloatingIp":                    68,
	"kNetworkSecurityRule":           69,
	"kDirectConnectPort":             70,
	"kCidr":                          71,
	"kBlackout":                      72,
	"kAccessControlPolicy":           73,
	"kApp":                           74,
	"kMicroseg":                      75,
	"kAlert":                         76,
	"kSecret":                        77,
	"kFileServerShareSnapshot":       78,
	"kIamTenant":                     79,
	"kIamServiceAccount":             80,
	"kIamServiceProvider":            81,
	"kIamIdentityProvider":           82,
	"kCloudTrust":                    83,
	"kRecoveryPoint":                 84,
	"kVpnGateway":                    85,
	"kVpnConnection":                 86,
	"kEntitySyncRule":                87,
	"kClusterVswitch":                88,
	"kRackableUnit":                  89,
	"kIamServiceAccountGroup":        90,
	"kDummyApi":                      91,
	"kQosPolicy":                     92,
	"kNgtPolicy":                     93,
	"kIdentityProvider":              94,
	"kActionRule":                    95,
	"kActionType":                    96,
	"kActionTriggerType":             97,
	"kActionTemplate":                98,
	"kActionRuleResult":              99,
	"kRoutingPolicy":                 100,
	"kIdCategorizationMapping":       101,
	"kRemoteSyslogServer":            102,
	"kRemoteSyslogModule":            103,
	"kCitrixAdapter":                 104,
	"kOVA":                           105,
	"kCatalogPlacementPolicy":        106,
	"kExternalRepository":            107,
	"kCloudTenant":                   108,
	"kAtlasVirtualNetworkRouteTable": 109,
	"kDedicatedDomain":               110,
	"kVpc":                           111,
	"kRoutingPolicyCollection":       112,
	"kNetworkController":             113,
	"kVirtualDisk":                   114,
	"kVirtualSwitch":                 115,
	"kMetricsDataProvider":           116,
	"kExternalEntityConfig":          117,
	"kXFitPolicy":                    118,
	"kIscsiClient":                   119,
	"kIpfixExporter":                 120,
	"kRole":                          121,
	"kPermission":                    122,
	"kFileServerProtectionPolicy":    123,
	"kCatalogRateLimit":              124,
	"kVmTemplate":                    125,
	"kLayer2Stretch":                 127,
	"kVCenterVm":                     128,
}

func (x EntityId_Entity) Enum() *EntityId_Entity {
	p := new(EntityId_Entity)
	*p = x
	return p
}

func (x EntityId_Entity) String() string {
	return proto.EnumName(EntityId_Entity_name, int32(x))
}

func (x *EntityId_Entity) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntityId_Entity_value, data, "EntityId_Entity")
	if err != nil {
		return err
	}
	*x = EntityId_Entity(value)
	return nil
}

func (EntityId_Entity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_580a646f2d526485, []int{0, 0}
}

// Current status of this task.
type Task_Status int32

const (
	Task_kQueued    Task_Status = 1
	Task_kRunning   Task_Status = 2
	Task_kSucceeded Task_Status = 3
	Task_kAborted   Task_Status = 4
	Task_kSuspended Task_Status = 5
	Task_kFailed    Task_Status = 6
	// This value is not really a valid task state. It is used to indicate
	// that there is no pending transition.
	Task_kNone Task_Status = 20
)

var Task_Status_name = map[int32]string{
	1:  "kQueued",
	2:  "kRunning",
	3:  "kSucceeded",
	4:  "kAborted",
	5:  "kSuspended",
	6:  "kFailed",
	20: "kNone",
}

var Task_Status_value = map[string]int32{
	"kQueued":    1,
	"kRunning":   2,
	"kSucceeded": 3,
	"kAborted":   4,
	"kSuspended": 5,
	"kFailed":    6,
	"kNone":      20,
}

func (x Task_Status) Enum() *Task_Status {
	p := new(Task_Status)
	*p = x
	return p
}

func (x Task_Status) String() string {
	return proto.EnumName(Task_Status_name, int32(x))
}

func (x *Task_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Task_Status_value, data, "Task_Status")
	if err != nil {
		return err
	}
	*x = Task_Status(value)
	return nil
}

func (Task_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_580a646f2d526485, []int{5, 0}
}

// Unit for steps. For eg. this could be MB for usecases involving
// tranferring bytes. For most use cases, the unit will just be steps.
type Task_StepsUnit int32

const (
	Task_kSteps Task_StepsUnit = 1
	Task_kMB    Task_StepsUnit = 2
)

var Task_StepsUnit_name = map[int32]string{
	1: "kSteps",
	2: "kMB",
}

var Task_StepsUnit_value = map[string]int32{
	"kSteps": 1,
	"kMB":    2,
}

func (x Task_StepsUnit) Enum() *Task_StepsUnit {
	p := new(Task_StepsUnit)
	*p = x
	return p
}

func (x Task_StepsUnit) String() string {
	return proto.EnumName(Task_StepsUnit_name, int32(x))
}

func (x *Task_StepsUnit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Task_StepsUnit_value, data, "Task_StepsUnit")
	if err != nil {
		return err
	}
	*x = Task_StepsUnit(value)
	return nil
}

func (Task_StepsUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_580a646f2d526485, []int{5, 1}
}

type Task_Capability int32

const (
	// This task can be suspended and then subsequently resumed.
	Task_kTaskSuspend Task_Capability = 1
	// This task can be canceled/aborted.
	Task_kTaskCancel Task_Capability = 2
)

var Task_Capability_name = map[int32]string{
	1: "kTaskSuspend",
	2: "kTaskCancel",
}

var Task_Capability_value = map[string]int32{
	"kTaskSuspend": 1,
	"kTaskCancel":  2,
}

func (x Task_Capability) Enum() *Task_Capability {
	p := new(Task_Capability)
	*p = x
	return p
}

func (x Task_Capability) String() string {
	return proto.EnumName(Task_Capability_name, int32(x))
}

func (x *Task_Capability) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Task_Capability_value, data, "Task_Capability")
	if err != nil {
		return err
	}
	*x = Task_Capability(value)
	return nil
}

func (Task_Capability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_580a646f2d526485, []int{5, 2}
}

type EntityId struct {
	// ID of the entity.
	EntityId []byte `protobuf:"bytes,1,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	// Entity type.
	EntityType *EntityId_Entity `protobuf:"varint,2,opt,name=entity_type,json=entityType,enum=nutanix.ergon.EntityId_Entity" json:"entity_type,omitempty"`
	// The logical timestamp.
	LogicalTimestamp *int64 `protobuf:"varint,3,opt,name=logical_timestamp,json=logicalTimestamp" json:"logical_timestamp,omitempty"`
	// Entity name. This is not stored to the database, but resolved on demand.
	EntityName           *string  `protobuf:"bytes,4,opt,name=entity_name,json=entityName" json:"entity_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntityId) Reset()         { *m = EntityId{} }
func (m *EntityId) String() string { return proto.CompactTextString(m) }
func (*EntityId) ProtoMessage()    {}
func (*EntityId) Descriptor() ([]byte, []int) {
	return fileDescriptor_580a646f2d526485, []int{0}
}

func (m *EntityId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityId.Unmarshal(m, b)
}
func (m *EntityId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityId.Marshal(b, m, deterministic)
}
func (m *EntityId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityId.Merge(m, src)
}
func (m *EntityId) XXX_Size() int {
	return xxx_messageInfo_EntityId.Size(m)
}
func (m *EntityId) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityId.DiscardUnknown(m)
}

var xxx_messageInfo_EntityId proto.InternalMessageInfo

func (m *EntityId) GetEntityId() []byte {
	if m != nil {
		return m.EntityId
	}
	return nil
}

func (m *EntityId) GetEntityType() EntityId_Entity {
	if m != nil && m.EntityType != nil {
		return *m.EntityType
	}
	return EntityId_kUnknown
}

func (m *EntityId) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return 0
}

func (m *EntityId) GetEntityName() string {
	if m != nil && m.EntityName != nil {
		return *m.EntityName
	}
	return ""
}

type MetaRequest struct {
	// Method name.
	MethodName *string `protobuf:"bytes,1,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	// Serialized argument.
	Arg *PayloadOrEmbeddedValue `protobuf:"bytes,2,opt,name=arg" json:"arg,omitempty"`
	// Whether the RPC was forwarded from another Ergon instance.
	Forwarded            *bool    `protobuf:"varint,3,opt,name=forwarded,def=0" json:"forwarded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetaRequest) Reset()         { *m = MetaRequest{} }
func (m *MetaRequest) String() string { return proto.CompactTextString(m) }
func (*MetaRequest) ProtoMessage()    {}
func (*MetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_580a646f2d526485, []int{1}
}

func (m *MetaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaRequest.Unmarshal(m, b)
}
func (m *MetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaRequest.Marshal(b, m, deterministic)
}
func (m *MetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaRequest.Merge(m, src)
}
func (m *MetaRequest) XXX_Size() int {
	return xxx_messageInfo_MetaRequest.Size(m)
}
func (m *MetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetaRequest proto.InternalMessageInfo

const Default_MetaRequest_Forwarded bool = false

func (m *MetaRequest) GetMethodName() string {
	if m != nil && m.MethodName != nil {
		return *m.MethodName
	}
	return ""
}

func (m *MetaRequest) GetArg() *PayloadOrEmbeddedValue {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *MetaRequest) GetForwarded() bool {
	if m != nil && m.Forwarded != nil {
		return *m.Forwarded
	}
	return Default_MetaRequest_Forwarded
}

type MetaResponse struct {
	// Application specific RPC error code. Not interpreted by Ergon.
	ErrorCode *int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// An optional additional string describing the error, if the RPC was not
	// successful.
	ErrorDetail *string `protobuf:"bytes,2,opt,name=error_detail,json=errorDetail" json:"error_detail,omitempty"`
	// The serialized response, if any.
	Ret                  *PayloadOrEmbeddedValue `protobuf:"bytes,3,opt,name=ret" json:"ret,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *MetaResponse) Reset()         { *m = MetaResponse{} }
func (m *MetaResponse) String() string { return proto.CompactTextString(m) }
func (*MetaResponse) ProtoMessage()    {}
func (*MetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_580a646f2d526485, []int{2}
}

func (m *MetaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaResponse.Unmarshal(m, b)
}
func (m *MetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaResponse.Marshal(b, m, deterministic)
}
func (m *MetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaResponse.Merge(m, src)
}
func (m *MetaResponse) XXX_Size() int {
	return xxx_messageInfo_MetaResponse.Size(m)
}
func (m *MetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetaResponse proto.InternalMessageInfo

func (m *MetaResponse) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *MetaResponse) GetErrorDetail() string {
	if m != nil && m.ErrorDetail != nil {
		return *m.ErrorDetail
	}
	return ""
}

func (m *MetaResponse) GetRet() *PayloadOrEmbeddedValue {
	if m != nil {
		return m.Ret
	}
	return nil
}

type PayloadValue struct {
	// The offset of the value in the payload.
	Offset *uint64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	// The size of the value in the payload.
	Size                 *uint64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayloadValue) Reset()         { *m = PayloadValue{} }
func (m *PayloadValue) String() string { return proto.CompactTextString(m) }
func (*PayloadValue) ProtoMessage()    {}
func (*PayloadValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_580a646f2d526485, []int{3}
}

func (m *PayloadValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayloadValue.Unmarshal(m, b)
}
func (m *PayloadValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayloadValue.Marshal(b, m, deterministic)
}
func (m *PayloadValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadValue.Merge(m, src)
}
func (m *PayloadValue) XXX_Size() int {
	return xxx_messageInfo_PayloadValue.Size(m)
}
func (m *PayloadValue) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadValue.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadValue proto.InternalMessageInfo

func (m *PayloadValue) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *PayloadValue) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

type PayloadOrEmbeddedValue struct {
	Payload              *PayloadValue `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Embedded             []byte        `protobuf:"bytes,2,opt,name=embedded" json:"embedded,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PayloadOrEmbeddedValue) Reset()         { *m = PayloadOrEmbeddedValue{} }
func (m *PayloadOrEmbeddedValue) String() string { return proto.CompactTextString(m) }
func (*PayloadOrEmbeddedValue) ProtoMessage()    {}
func (*PayloadOrEmbeddedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_580a646f2d526485, []int{4}
}

func (m *PayloadOrEmbeddedValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayloadOrEmbeddedValue.Unmarshal(m, b)
}
func (m *PayloadOrEmbeddedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayloadOrEmbeddedValue.Marshal(b, m, deterministic)
}
func (m *PayloadOrEmbeddedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadOrEmbeddedValue.Merge(m, src)
}
func (m *PayloadOrEmbeddedValue) XXX_Size() int {
	return xxx_messageInfo_PayloadOrEmbeddedValue.Size(m)
}
func (m *PayloadOrEmbeddedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadOrEmbeddedValue.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadOrEmbeddedValue proto.InternalMessageInfo

func (m *PayloadOrEmbeddedValue) GetPayload() *PayloadValue {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PayloadOrEmbeddedValue) GetEmbedded() []byte {
	if m != nil {
		return m.Embedded
	}
	return nil
}

type Task struct {
	// The logical timestamp.
	LogicalTimestamp *int64 `protobuf:"varint,1,opt,name=logical_timestamp,json=logicalTimestamp,def=-1" json:"logical_timestamp,omitempty"`
	// The task identifier. Client can specify this for idempotence. The
	// identifier has to conform to UUID4 standard.
	Uuid []byte `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
	// The sequence identifier of the task wrt a specific component. This helps
	// in determining the order in which tasks should be executed when the
	// component is recovering tasks from the WAL. Task service will automatically
	// generate this.
	SequenceId *uint64 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	// The request that spawned the task. This is an opaque argument
	// for Ergon.
	Request *MetaRequest `protobuf:"bytes,4,opt,name=request" json:"request,omitempty"`
	// The response associated with the task. This is an opaque argument for
	// Ergon.
	Response *MetaResponse `protobuf:"bytes,5,opt,name=response" json:"response,omitempty"`
	// Create time of the task in usecs. Set by server during task create.
	CreateTimeUsecs *uint64 `protobuf:"fixed64,6,opt,name=create_time_usecs,json=createTimeUsecs" json:"create_time_usecs,omitempty"`
	// Start time in microseconds from epoch. This is set when the status of
	// task changes to kRunning.
	StartTimeUsecs *uint64 `protobuf:"fixed64,7,opt,name=start_time_usecs,json=startTimeUsecs" json:"start_time_usecs,omitempty"`
	// Completion time in microseconds from epoch. Unset for ongoing tasks.
	CompleteTimeUsecs *uint64 `protobuf:"fixed64,8,opt,name=complete_time_usecs,json=completeTimeUsecs" json:"complete_time_usecs,omitempty"`
	// Last time the task was updated from epoch.
	LastUpdatedTimeUsecs *uint64 `protobuf:"fixed64,9,opt,name=last_updated_time_usecs,json=lastUpdatedTimeUsecs" json:"last_updated_time_usecs,omitempty"`
	// Entities associated with the task.
	EntityList []*EntityId `protobuf:"bytes,10,rep,name=entity_list,json=entityList" json:"entity_list,omitempty"`
	// Type of operation. Client specifies operation_type during task create.
	// Ergon doesn't interpret this value. e.g. "create_vm", "create_container".
	OperationType *string `protobuf:"bytes,11,opt,name=operation_type,json=operationType" json:"operation_type,omitempty"`
	// DEPRECATED by `display_name` and `progress_message`.
	//
	// Message describing the task. This can change as the task progresses.
	// This value is opaque for Ergon.
	Message *string `protobuf:"bytes,12,opt,name=message" json:"message,omitempty"`
	// Percentage of task completed.
	PercentageComplete *int32       `protobuf:"varint,13,opt,name=percentage_complete,json=percentageComplete" json:"percentage_complete,omitempty"`
	Status             *Task_Status `protobuf:"varint,14,opt,name=status,enum=nutanix.ergon.Task_Status,def=1" json:"status,omitempty"`
	// The parent task UUID. This is for internal use only, and should not be
	// exposed at the presentation layer.
	ParentTaskUuid []byte `protobuf:"bytes,15,opt,name=parent_task_uuid,json=parentTaskUuid" json:"parent_task_uuid,omitempty"`
	// A list of subtask UUIDs, ordered by subtask sequence ID.
	SubtaskUuidList [][]byte `protobuf:"bytes,16,rep,name=subtask_uuid_list,json=subtaskUuidList" json:"subtask_uuid_list,omitempty"`
	// Name of component that owns this task.
	Component *string `protobuf:"bytes,17,opt,name=component" json:"component,omitempty"`
	// Total steps associated with task.
	TotalSteps *int64 `protobuf:"varint,18,opt,name=total_steps,json=totalSteps" json:"total_steps,omitempty"`
	// Steps completed.
	StepsCompleted *int64          `protobuf:"varint,19,opt,name=steps_completed,json=stepsCompleted" json:"steps_completed,omitempty"`
	StepsUnit      *Task_StepsUnit `protobuf:"varint,20,opt,name=steps_unit,json=stepsUnit,enum=nutanix.ergon.Task_StepsUnit,def=1" json:"steps_unit,omitempty"`
	// If canceled flag is set, then user has indicated the task to be canceled.
	// It is upto task executor whether to move the task to kAborted or let it
	// continue running until its completion.
	Canceled *bool `protobuf:"varint,22,opt,name=canceled,def=0" json:"canceled,omitempty"`
	// Opaque object that can be used as a WAL or any other internal purpose.
	InternalOpaque []byte `protobuf:"bytes,23,opt,name=internal_opaque,json=internalOpaque" json:"internal_opaque,omitempty"`
	// Flag indicating whether the task object has been deleted. This is only
	// applicable if ergon is backed by Pithos.
	Deleted *bool `protobuf:"varint,24,opt,name=deleted" json:"deleted,omitempty"`
	// If this flag is set, then this is an internal task and is not meant
	// to be displayed on UI.
	InternalTask *bool `protobuf:"varint,25,opt,name=internal_task,json=internalTask,def=0" json:"internal_task,omitempty"`
	// UUID of cluster on which this task is executed.
	// 16 byte string.
	ClusterUuid []byte `protobuf:"bytes,26,opt,name=cluster_uuid,json=clusterUuid" json:"cluster_uuid,omitempty"`
	// Optional:
	//
	// Name of operation to display on UI.
	//
	// UI prefers this field over `operation_type`. `display_name` should
	// be "humanized" i.e. it should not contain underscores, words should
	// be separated by spaces, first letter should be capitalized.
	//
	// `display_name` can refer to enity names in `entity_list` by their index.
	//
	// Examples:
	//   "Delete VM {0}"
	//       {0} will be substituted with vm name by referring entity details from
	//       entity_list[0].
	//   "Clone VM {0} to {1}"
	DisplayName *string `protobuf:"bytes,27,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Only set when parent_task_uuid is set.  Sequence ID of this child
	// among all the children of the parent task.
	SubtaskSequenceId *uint64 `protobuf:"varint,28,opt,name=subtask_sequence_id,json=subtaskSequenceId" json:"subtask_sequence_id,omitempty"`
	// Whether UI should display failures from this task.
	DisplayFailures *bool `protobuf:"varint,29,opt,name=display_failures,json=displayFailures,def=1" json:"display_failures,omitempty"`
	// If set to True, progress of this task is *not* automatically updated
	// based on progress of subtasks.
	DisableAutoProgressUpdate *bool `protobuf:"varint,30,opt,name=disable_auto_progress_update,json=disableAutoProgressUpdate,def=0" json:"disable_auto_progress_update,omitempty"`
	// Weight of task determines its contribution in parent task's progress.
	// Task weight defaults to 1000 and can be set during TaskCreate.
	// A completed task with weight W contributes P percentage to parent where:
	//    P == (W / (sum of weights of all subtasks) * 100).
	// For example,
	// if there are three tasks A, B and C with weights 1000, 1000 and 2000
	// respectively, then they contribute 25%, 25% and 50% respectively to
	// overall progress of parent task.
	Weight *uint64 `protobuf:"varint,31,opt,name=weight,def=1000" json:"weight,omitempty"`
	// Service which is executing the task is in sole control of moving
	// a task from one state to another. Clients can request the service
	// to make a state transition by recording their intention in this field.
	RequestedStateTransition *Task_Status `protobuf:"varint,32,opt,name=requested_state_transition,json=requestedStateTransition,enum=nutanix.ergon.Task_Status,def=20" json:"requested_state_transition,omitempty"`
	// Set of capabilities on a particular task can change; for example, a task
	// is allowed to move into a phase where it is no longer cancelable.
	Capabilities []Task_Capability `protobuf:"varint,33,rep,name=capabilities,enum=nutanix.ergon.Task_Capability" json:"capabilities,omitempty"`
	// Any information that can be helpful while debugging.
	// For example, if task has failed then it can contain stack-trace.
	// If task is successful, then it can contain a trace record in human
	// readable format.
	DebugInfo *string `protobuf:"bytes,34,opt,name=debug_info,json=debugInfo" json:"debug_info,omitempty"`
	// Optional.
	//
	// Reason why this task was created. This will be displayed on UI.
	// Examples:
	//     "Host {0} went down"
	//     "Disk {1} is full"
	Reason *string `protobuf:"bytes,35,opt,name=reason" json:"reason,omitempty"`
	// Optional.
	//
	// String describing what exactly the task is currently doing. This can
	// change as the task progresses into phases. The string will be
	// displayed on UI hence should be user-friendly. This string can
	// refer entities from `entity_list` with their index.
	//
	// Examples:
	//   "Copying installer to node {3}"
	//   "Waiting for shutdown token"
	//   "Rebooting node {1}"
	ProgressMessage *string `protobuf:"bytes,36,opt,name=progress_message,json=progressMessage" json:"progress_message,omitempty"`
	// The UUID of the cluster specific root task of current task. This is for
	// internal use only, not to be exposed at the presentation layer.
	LocalRootTaskUuid []byte                 `protobuf:"bytes,37,opt,name=local_root_task_uuid,json=localRootTaskUuid" json:"local_root_task_uuid,omitempty"`
	RequestContext    *net.RpcRequestContext `protobuf:"bytes,38,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	// Use barrier update while marking this task as completed.
	//
	// A barrier update will ensure that all entities modified by this task's
	// execution are synced to PC before marking this task as complete.
	UseSyncBarrier       *bool    `protobuf:"varint,39,opt,name=use_sync_barrier,json=useSyncBarrier,def=0" json:"use_sync_barrier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_580a646f2d526485, []int{5}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

const Default_Task_LogicalTimestamp int64 = -1
const Default_Task_Status Task_Status = Task_kQueued
const Default_Task_StepsUnit Task_StepsUnit = Task_kSteps
const Default_Task_Canceled bool = false
const Default_Task_InternalTask bool = false
const Default_Task_DisplayFailures bool = true
const Default_Task_DisableAutoProgressUpdate bool = false
const Default_Task_Weight uint64 = 1000
const Default_Task_RequestedStateTransition Task_Status = Task_kNone
const Default_Task_UseSyncBarrier bool = false

func (m *Task) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return Default_Task_LogicalTimestamp
}

func (m *Task) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *Task) GetSequenceId() uint64 {
	if m != nil && m.SequenceId != nil {
		return *m.SequenceId
	}
	return 0
}

func (m *Task) GetRequest() *MetaRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Task) GetResponse() *MetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Task) GetCreateTimeUsecs() uint64 {
	if m != nil && m.CreateTimeUsecs != nil {
		return *m.CreateTimeUsecs
	}
	return 0
}

func (m *Task) GetStartTimeUsecs() uint64 {
	if m != nil && m.StartTimeUsecs != nil {
		return *m.StartTimeUsecs
	}
	return 0
}

func (m *Task) GetCompleteTimeUsecs() uint64 {
	if m != nil && m.CompleteTimeUsecs != nil {
		return *m.CompleteTimeUsecs
	}
	return 0
}

func (m *Task) GetLastUpdatedTimeUsecs() uint64 {
	if m != nil && m.LastUpdatedTimeUsecs != nil {
		return *m.LastUpdatedTimeUsecs
	}
	return 0
}

func (m *Task) GetEntityList() []*EntityId {
	if m != nil {
		return m.EntityList
	}
	return nil
}

func (m *Task) GetOperationType() string {
	if m != nil && m.OperationType != nil {
		return *m.OperationType
	}
	return ""
}

func (m *Task) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Task) GetPercentageComplete() int32 {
	if m != nil && m.PercentageComplete != nil {
		return *m.PercentageComplete
	}
	return 0
}

func (m *Task) GetStatus() Task_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_Task_Status
}

func (m *Task) GetParentTaskUuid() []byte {
	if m != nil {
		return m.ParentTaskUuid
	}
	return nil
}

func (m *Task) GetSubtaskUuidList() [][]byte {
	if m != nil {
		return m.SubtaskUuidList
	}
	return nil
}

func (m *Task) GetComponent() string {
	if m != nil && m.Component != nil {
		return *m.Component
	}
	return ""
}

func (m *Task) GetTotalSteps() int64 {
	if m != nil && m.TotalSteps != nil {
		return *m.TotalSteps
	}
	return 0
}

func (m *Task) GetStepsCompleted() int64 {
	if m != nil && m.StepsCompleted != nil {
		return *m.StepsCompleted
	}
	return 0
}

func (m *Task) GetStepsUnit() Task_StepsUnit {
	if m != nil && m.StepsUnit != nil {
		return *m.StepsUnit
	}
	return Default_Task_StepsUnit
}

func (m *Task) GetCanceled() bool {
	if m != nil && m.Canceled != nil {
		return *m.Canceled
	}
	return Default_Task_Canceled
}

func (m *Task) GetInternalOpaque() []byte {
	if m != nil {
		return m.InternalOpaque
	}
	return nil
}

func (m *Task) GetDeleted() bool {
	if m != nil && m.Deleted != nil {
		return *m.Deleted
	}
	return false
}

func (m *Task) GetInternalTask() bool {
	if m != nil && m.InternalTask != nil {
		return *m.InternalTask
	}
	return Default_Task_InternalTask
}

func (m *Task) GetClusterUuid() []byte {
	if m != nil {
		return m.ClusterUuid
	}
	return nil
}

func (m *Task) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *Task) GetSubtaskSequenceId() uint64 {
	if m != nil && m.SubtaskSequenceId != nil {
		return *m.SubtaskSequenceId
	}
	return 0
}

func (m *Task) GetDisplayFailures() bool {
	if m != nil && m.DisplayFailures != nil {
		return *m.DisplayFailures
	}
	return Default_Task_DisplayFailures
}

func (m *Task) GetDisableAutoProgressUpdate() bool {
	if m != nil && m.DisableAutoProgressUpdate != nil {
		return *m.DisableAutoProgressUpdate
	}
	return Default_Task_DisableAutoProgressUpdate
}

func (m *Task) GetWeight() uint64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return Default_Task_Weight
}

func (m *Task) GetRequestedStateTransition() Task_Status {
	if m != nil && m.RequestedStateTransition != nil {
		return *m.RequestedStateTransition
	}
	return Default_Task_RequestedStateTransition
}

func (m *Task) GetCapabilities() []Task_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *Task) GetDebugInfo() string {
	if m != nil && m.DebugInfo != nil {
		return *m.DebugInfo
	}
	return ""
}

func (m *Task) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *Task) GetProgressMessage() string {
	if m != nil && m.ProgressMessage != nil {
		return *m.ProgressMessage
	}
	return ""
}

func (m *Task) GetLocalRootTaskUuid() []byte {
	if m != nil {
		return m.LocalRootTaskUuid
	}
	return nil
}

func (m *Task) GetRequestContext() *net.RpcRequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *Task) GetUseSyncBarrier() bool {
	if m != nil && m.UseSyncBarrier != nil {
		return *m.UseSyncBarrier
	}
	return Default_Task_UseSyncBarrier
}

func init() {
	proto.RegisterEnum("nutanix.ergon.EntityId_Entity", EntityId_Entity_name, EntityId_Entity_value)
	proto.RegisterEnum("nutanix.ergon.Task_Status", Task_Status_name, Task_Status_value)
	proto.RegisterEnum("nutanix.ergon.Task_StepsUnit", Task_StepsUnit_name, Task_StepsUnit_value)
	proto.RegisterEnum("nutanix.ergon.Task_Capability", Task_Capability_name, Task_Capability_value)
	proto.RegisterType((*EntityId)(nil), "nutanix.ergon.EntityId")
	proto.RegisterType((*MetaRequest)(nil), "nutanix.ergon.MetaRequest")
	proto.RegisterType((*MetaResponse)(nil), "nutanix.ergon.MetaResponse")
	proto.RegisterType((*PayloadValue)(nil), "nutanix.ergon.PayloadValue")
	proto.RegisterType((*PayloadOrEmbeddedValue)(nil), "nutanix.ergon.PayloadOrEmbeddedValue")
	proto.RegisterType((*Task)(nil), "nutanix.ergon.Task")
}

func init() { proto.RegisterFile("ergon/ergon_types.proto", fileDescriptor_580a646f2d526485) }

var fileDescriptor_580a646f2d526485 = []byte{
	// 2547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0x6d, 0x57, 0x1c, 0xb7,
	0xf5, 0xff, 0x63, 0x9e, 0x05, 0x06, 0x21, 0x88, 0x3d, 0xc6, 0x4f, 0x98, 0xc4, 0x09, 0x71, 0xfe,
	0x01, 0x87, 0x26, 0x4d, 0x4a, 0x4e, 0x9b, 0x2e, 0x8b, 0xed, 0x6c, 0x6a, 0x6c, 0x32, 0x0b, 0x9b,
	0x34, 0x7d, 0xd8, 0x8a, 0x99, 0xbb, 0x8b, 0x32, 0x33, 0xd2, 0x44, 0xd2, 0x18, 0x36, 0x6d, 0x4f,
	0xfb, 0xb6, 0xe7, 0xf4, 0x65, 0xbf, 0x52, 0xbf, 0x56, 0x4f, 0x8f, 0xae, 0x34, 0xbb, 0x8b, 0x4d,
	0x4f, 0xfb, 0x86, 0xb3, 0xfa, 0xdd, 0x3b, 0xf7, 0xf9, 0x5e, 0x5d, 0x41, 0x6e, 0x82, 0xee, 0x2b,
	0xb9, 0x83, 0x7f, 0xbb, 0x76, 0x50, 0x82, 0xd9, 0x2e, 0xb5, 0xb2, 0x8a, 0x5d, 0x97, 0x95, 0xe5,
	0x52, 0x5c, 0x6c, 0x23, 0x69, 0x7d, 0xbd, 0xb2, 0x22, 0xdf, 0x31, 0x79, 0xf7, 0xb4, 0xea, 0x99,
	0x1d, 0x09, 0x76, 0x47, 0x97, 0x89, 0x67, 0xdd, 0xfc, 0xd7, 0x1a, 0x99, 0x7b, 0x22, 0xad, 0xb0,
	0x83, 0x56, 0xca, 0x6e, 0x93, 0x79, 0xc0, 0xdf, 0x5d, 0x91, 0x46, 0x13, 0x1b, 0x13, 0x5b, 0x8b,
	0xf1, 0x1c, 0xd4, 0xc4, 0x2f, 0xc8, 0x42, 0x20, 0x3a, 0x55, 0xd1, 0xb5, 0x8d, 0x89, 0xad, 0xa5,
	0xdd, 0x7b, 0xdb, 0x97, 0x54, 0x6d, 0xd7, 0xa2, 0xc2, 0x8f, 0x98, 0xf8, 0x4f, 0x8e, 0x07, 0x25,
	0xb0, 0x0f, 0xc8, 0x4a, 0xae, 0xfa, 0x22, 0xe1, 0x79, 0xd7, 0x8a, 0x02, 0x8c, 0xe5, 0x45, 0x19,
	0x4d, 0x6e, 0x4c, 0x6c, 0x4d, 0xc6, 0x34, 0x10, 0x8e, 0x6b, 0x9c, 0xdd, 0x1f, 0x6a, 0x93, 0xbc,
	0x80, 0x68, 0x6a, 0x63, 0x62, 0x6b, 0xbe, 0x96, 0xf6, 0x82, 0x17, 0xb0, 0xf9, 0xcf, 0x55, 0x32,
	0xe3, 0x95, 0xb0, 0x45, 0x32, 0x97, 0x9d, 0xc8, 0x4c, 0xaa, 0x73, 0x49, 0xff, 0x8f, 0xcd, 0x93,
	0xe9, 0xec, 0x85, 0x4a, 0x81, 0x4e, 0xb0, 0x59, 0x32, 0x99, 0x75, 0x0e, 0xe9, 0x35, 0x76, 0x9d,
	0xcc, 0x67, 0x6d, 0xc9, 0x4b, 0x73, 0xa6, 0x2c, 0x9d, 0x44, 0x96, 0x03, 0x61, 0x32, 0x3a, 0xc5,
	0xde, 0x22, 0x2b, 0xd9, 0x91, 0x56, 0x16, 0x12, 0x2b, 0x94, 0x3c, 0x50, 0x05, 0x17, 0x92, 0x4e,
	0x23, 0xdc, 0x54, 0xd2, 0x08, 0x63, 0x41, 0x26, 0x83, 0x67, 0x5a, 0x55, 0x25, 0x9d, 0x41, 0x4d,
	0x47, 0x3c, 0xc9, 0x78, 0x1f, 0xe8, 0x2c, 0x5b, 0x26, 0x0b, 0x59, 0x0c, 0x85, 0xb2, 0xd0, 0x16,
	0x16, 0xe8, 0x1c, 0xa3, 0x64, 0x31, 0xeb, 0xa8, 0xbc, 0x2a, 0xc0, 0x7f, 0x30, 0xcf, 0x08, 0x99,
	0xc9, 0x5a, 0x85, 0x63, 0x27, 0xf8, 0x71, 0x33, 0xaf, 0x8c, 0x05, 0x4d, 0x17, 0xd8, 0x1c, 0x99,
	0xca, 0x8e, 0x79, 0x9f, 0x2e, 0xa2, 0xae, 0x46, 0x0e, 0xda, 0x36, 0xcf, 0x20, 0xc9, 0xda, 0xc9,
	0x19, 0x14, 0x9c, 0x5e, 0x67, 0x77, 0xc9, 0xad, 0x37, 0xe0, 0x97, 0xaf, 0x40, 0x6b, 0x91, 0x02,
	0x5d, 0x42, 0xe5, 0x4f, 0x45, 0x0e, 0x6d, 0xd0, 0xaf, 0x40, 0xd3, 0x65, 0xb6, 0x46, 0xe8, 0x18,
	0xd0, 0x3e, 0xe3, 0x1a, 0x28, 0x65, 0xab, 0x64, 0x39, 0xeb, 0x08, 0x6d, 0x2b, 0x9e, 0xbf, 0x00,
	0x7b, 0xae, 0x74, 0x46, 0x57, 0xd8, 0x2d, 0xf2, 0x56, 0xd6, 0x38, 0xe5, 0x89, 0x8f, 0xdf, 0x11,
	0xe8, 0x42, 0x18, 0x23, 0x94, 0xa4, 0x0c, 0xf9, 0x47, 0xa4, 0x58, 0xe5, 0x40, 0x57, 0x31, 0x7c,
	0x0e, 0xc4, 0xe3, 0x1a, 0x5b, 0x21, 0xd7, 0xf1, 0xd8, 0xe4, 0x16, 0xfa, 0x4a, 0x0f, 0xe8, 0x5b,
	0xec, 0x26, 0x59, 0x45, 0xe8, 0xc4, 0x80, 0x6e, 0xf2, 0x92, 0x9f, 0x8a, 0x5c, 0xd8, 0x01, 0xbd,
	0xf1, 0x9a, 0xaa, 0x31, 0xd2, 0x4d, 0x1f, 0x4c, 0xad, 0xbe, 0x87, 0xc4, 0xd2, 0x08, 0x4f, 0x9d,
	0xc2, 0xc7, 0xed, 0x16, 0x6a, 0x3c, 0x86, 0xa2, 0xcc, 0xb9, 0x05, 0xba, 0x8e, 0xc4, 0x6f, 0xe0,
	0xf4, 0x4c, 0xa9, 0x8c, 0xde, 0x66, 0x4b, 0x84, 0x64, 0xcf, 0x93, 0xc2, 0x8b, 0xa4, 0x77, 0xf0,
	0xdc, 0x54, 0xd2, 0x72, 0x21, 0x41, 0xd3, 0xbb, 0x75, 0xf2, 0xfc, 0xb9, 0x8e, 0xf8, 0x3d, 0x74,
	0xed, 0x40, 0x25, 0x19, 0xe8, 0x18, 0xfa, 0xc2, 0x58, 0x3d, 0xa0, 0xf7, 0xd1, 0xbe, 0x10, 0x98,
	0xa7, 0x95, 0xc4, 0x22, 0x68, 0x9e, 0xb9, 0x1a, 0xd8, 0x40, 0xb1, 0x4f, 0x2e, 0x2c, 0x48, 0x0c,
	0xcd, 0x03, 0x64, 0x3d, 0xe4, 0x92, 0xf7, 0xa1, 0x00, 0x69, 0x7d, 0x98, 0x5b, 0xb2, 0xa7, 0xe8,
	0xa6, 0x8f, 0x48, 0xaf, 0x27, 0xa4, 0x2b, 0x7e, 0x07, 0xbd, 0x8d, 0x50, 0x0c, 0x89, 0x7a, 0x05,
	0x7a, 0x70, 0x94, 0x73, 0x49, 0xdf, 0xc1, 0xf2, 0x68, 0x72, 0xcb, 0x73, 0xd5, 0x6f, 0x59, 0x28,
	0xe8, 0x43, 0xb4, 0xd4, 0x57, 0x50, 0x53, 0x49, 0xe9, 0x6b, 0x90, 0xbe, 0x8b, 0x96, 0x8e, 0x8a,
	0x32, 0xae, 0x72, 0xa0, 0xef, 0x05, 0x81, 0xa5, 0xd2, 0xb6, 0xa9, 0x64, 0x4f, 0xf4, 0xe9, 0x96,
	0xaf, 0x9c, 0x57, 0x5c, 0xe4, 0x21, 0xa8, 0xdf, 0x29, 0x09, 0xf4, 0x7d, 0xac, 0x84, 0x71, 0xd5,
	0x5f, 0xa9, 0x53, 0xfa, 0x88, 0x45, 0x64, 0x2d, 0x6b, 0xd8, 0x9c, 0x9b, 0xd7, 0xca, 0xe1, 0x03,
	0x6c, 0x07, 0x57, 0x39, 0xf4, 0xff, 0x31, 0x8f, 0x4d, 0x55, 0x14, 0x4a, 0x5e, 0x52, 0xf5, 0x21,
	0x63, 0x64, 0x29, 0x6b, 0x24, 0x09, 0x18, 0x13, 0xc3, 0x0f, 0x15, 0x18, 0x4b, 0xb7, 0x31, 0x2b,
	0x5f, 0x55, 0x45, 0xb9, 0xaf, 0x2e, 0xe8, 0x0e, 0x9e, 0xda, 0xed, 0x2f, 0x5d, 0x05, 0xd0, 0xc7,
	0x3e, 0x22, 0x65, 0xb9, 0x9f, 0x57, 0x50, 0x6a, 0x21, 0x2d, 0xfd, 0x08, 0xcd, 0x3a, 0xe4, 0x3a,
	0x03, 0x5b, 0xe6, 0x3c, 0x01, 0x0c, 0xc1, 0x2e, 0xa2, 0x6d, 0xab, 0x81, 0x17, 0x42, 0xf6, 0x8f,
	0x54, 0x2e, 0x92, 0x01, 0xfd, 0x09, 0x46, 0xc0, 0x5b, 0xd0, 0x92, 0xc6, 0x72, 0x99, 0x00, 0xfd,
	0x18, 0xdd, 0x3d, 0x10, 0x1a, 0x12, 0xab, 0xf4, 0xc0, 0xc5, 0x5f, 0x24, 0x40, 0x3f, 0x61, 0x0b,
	0x64, 0x36, 0x6b, 0x57, 0xa7, 0x12, 0x2c, 0xfd, 0xe9, 0xa5, 0x4c, 0x60, 0xe0, 0x3e, 0x65, 0x37,
	0x08, 0xcb, 0x1a, 0xcf, 0xda, 0x3e, 0x75, 0xe9, 0x21, 0x4f, 0xce, 0x84, 0x04, 0xfa, 0x19, 0xba,
	0xe4, 0xc5, 0x85, 0xe0, 0xd3, 0x9f, 0xa1, 0x35, 0x97, 0xb0, 0x76, 0x49, 0xf7, 0xc6, 0x14, 0x07,
	0xb4, 0x23, 0x7a, 0xf4, 0x73, 0x14, 0xdc, 0xae, 0x4a, 0x8c, 0x13, 0x37, 0x70, 0x52, 0xe6, 0x8a,
	0xa7, 0xf4, 0xe7, 0x18, 0xcf, 0x23, 0xa5, 0x2d, 0xfd, 0x05, 0x76, 0xe9, 0x01, 0xb7, 0x3c, 0x01,
	0xe9, 0x8a, 0xf0, 0x0b, 0xa4, 0x35, 0x21, 0xcf, 0xe9, 0x2f, 0xf1, 0x67, 0xcc, 0x93, 0x8c, 0x36,
	0xd0, 0x94, 0x90, 0x8f, 0x03, 0x40, 0xb7, 0xf6, 0x31, 0x04, 0x27, 0x32, 0x05, 0x9d, 0xf3, 0x41,
	0x70, 0xaf, 0xe9, 0xbb, 0x3e, 0x57, 0xdc, 0x0a, 0xd9, 0x6f, 0x95, 0xf4, 0x00, 0xb3, 0x1a, 0xbe,
	0x6c, 0x43, 0x52, 0xe9, 0xda, 0xed, 0x27, 0x68, 0xdd, 0x25, 0xa3, 0xd1, 0xa4, 0xa7, 0xde, 0x02,
	0x91, 0x6a, 0xfa, 0x0c, 0xbb, 0x6c, 0x3f, 0xe7, 0x49, 0xa6, 0x2a, 0x4b, 0xbf, 0xf4, 0x15, 0x82,
	0x39, 0x76, 0xdd, 0xa3, 0x55, 0x1e, 0xd2, 0xd1, 0xc2, 0x61, 0xd5, 0x28, 0x4b, 0xfa, 0x15, 0x7e,
	0x72, 0x28, 0x12, 0xad, 0x0c, 0xf4, 0xe9, 0xaf, 0x70, 0xbe, 0xe1, 0x90, 0xa2, 0xcf, 0x7d, 0x1e,
	0x20, 0xd1, 0x60, 0xe9, 0x21, 0xbb, 0x43, 0xa2, 0xd7, 0xa7, 0xd1, 0x70, 0x00, 0xbf, 0xc0, 0xd6,
	0x6a, 0xf1, 0xe2, 0x18, 0x24, 0x97, 0x96, 0xbe, 0x44, 0x5b, 0x5b, 0xbc, 0x08, 0x39, 0x6d, 0x24,
	0x89, 0xaa, 0xa4, 0xa5, 0x47, 0x58, 0x8e, 0x23, 0xfc, 0x48, 0xab, 0x57, 0x22, 0x05, 0x4d, 0xbf,
	0x46, 0x53, 0x5b, 0xbc, 0x68, 0xa5, 0xfe, 0x46, 0x18, 0x52, 0x62, 0x8c, 0x50, 0x33, 0x57, 0x55,
	0x7a, 0xac, 0x2b, 0x63, 0x69, 0x1b, 0x63, 0x3b, 0xec, 0x06, 0xe5, 0x4a, 0xf1, 0x18, 0x99, 0x3a,
	0xa5, 0x7c, 0xc6, 0x2d, 0x9c, 0xf3, 0x01, 0x3d, 0x41, 0xa6, 0x4e, 0x29, 0xc7, 0xba, 0xb0, 0x83,
	0x09, 0xf0, 0x33, 0xa6, 0x3d, 0x90, 0x09, 0x46, 0xf5, 0x1b, 0x04, 0xc3, 0x48, 0xe9, 0x98, 0x73,
	0x61, 0x93, 0x33, 0xfa, 0xad, 0x6f, 0x4d, 0x77, 0x2d, 0x9c, 0xe6, 0x70, 0x22, 0x85, 0xa5, 0xbf,
	0x66, 0xb7, 0xc9, 0xcd, 0x37, 0x3d, 0xf2, 0xd3, 0xed, 0x3b, 0x0c, 0xe2, 0x41, 0x55, 0x14, 0x83,
	0x46, 0x29, 0xe8, 0x6f, 0x30, 0x1a, 0x5f, 0x2b, 0x13, 0xa2, 0xfd, 0x5b, 0x3c, 0xbf, 0xe8, 0xdb,
	0x70, 0xfe, 0x1d, 0x96, 0xdf, 0x1b, 0x9e, 0xfe, 0x1e, 0x9d, 0x68, 0x8c, 0x26, 0x44, 0x77, 0x0c,
	0x70, 0xf7, 0x2d, 0xfd, 0x83, 0xaf, 0x7c, 0x0f, 0x68, 0xd1, 0xef, 0x83, 0x46, 0x9c, 0xfb, 0x21,
	0xef, 0xf1, 0x7a, 0xc6, 0x9e, 0xfa, 0x61, 0x32, 0x14, 0x17, 0x83, 0xa9, 0x72, 0x4b, 0x13, 0x1f,
	0x3e, 0x55, 0xd9, 0x51, 0x77, 0xa6, 0x98, 0xdc, 0x56, 0x1a, 0xc6, 0xbf, 0xf8, 0x91, 0xbb, 0x8f,
	0x0e, 0x79, 0x59, 0x0a, 0xd9, 0xa7, 0x80, 0x49, 0x0b, 0xd7, 0xe2, 0xc0, 0xe4, 0xaa, 0x1f, 0x6e,
	0xa8, 0xde, 0x1b, 0x84, 0x43, 0x95, 0x3a, 0xc3, 0xfb, 0xa8, 0xa3, 0x29, 0xac, 0x16, 0x17, 0x8d,
	0x94, 0x97, 0xae, 0x51, 0xce, 0xb0, 0xe4, 0x5e, 0x76, 0x1a, 0x54, 0x60, 0x28, 0xc3, 0xd8, 0x3c,
	0x72, 0x83, 0xc3, 0x4d, 0xdf, 0x60, 0xca, 0xf7, 0x28, 0xd3, 0x0d, 0x69, 0x2d, 0x79, 0xee, 0x06,
	0x86, 0x11, 0x6e, 0x38, 0xd0, 0xcc, 0x0f, 0x5b, 0xac, 0x03, 0x5f, 0x64, 0x39, 0xdb, 0x24, 0xf7,
	0xae, 0x1a, 0x80, 0xce, 0x39, 0x38, 0x76, 0xa9, 0xa3, 0x85, 0xef, 0x7f, 0x48, 0x45, 0xc2, 0x2d,
	0xa4, 0x61, 0x1b, 0x90, 0x68, 0x4b, 0xa7, 0x4c, 0xa8, 0x42, 0xcf, 0x2f, 0x45, 0xa3, 0xa9, 0xf2,
	0x3c, 0x54, 0x4c, 0x89, 0xf1, 0x0e, 0x52, 0x43, 0x07, 0xe5, 0xa0, 0xe9, 0x0f, 0x7e, 0x2f, 0xf0,
	0x4a, 0x71, 0xed, 0xd0, 0xbe, 0xde, 0x3c, 0xd2, 0xf6, 0x55, 0x64, 0xb0, 0xa6, 0x0f, 0xc1, 0x6a,
	0x91, 0x18, 0x37, 0x32, 0x86, 0x99, 0xb6, 0x78, 0xf3, 0xd4, 0x4e, 0x86, 0x8b, 0xd4, 0xcf, 0xe5,
	0x0a, 0x73, 0xfe, 0xed, 0x53, 0x51, 0x07, 0xe4, 0x15, 0xea, 0x6a, 0x99, 0xc4, 0x88, 0x66, 0x2e,
	0x40, 0x5a, 0x7a, 0x8e, 0xba, 0x5a, 0x65, 0x4f, 0x5c, 0x3c, 0xb9, 0x70, 0xa3, 0x0a, 0x34, 0xbd,
	0xf0, 0xb3, 0xc7, 0xdd, 0xe6, 0x03, 0x94, 0x30, 0xb6, 0x02, 0xfc, 0xc8, 0xee, 0x93, 0xdb, 0x63,
	0xad, 0x3b, 0xba, 0x87, 0x82, 0x8a, 0x3f, 0xfa, 0xfb, 0xd5, 0x27, 0x24, 0xe6, 0x16, 0x9e, 0x8b,
	0x42, 0x58, 0xfa, 0x27, 0xdf, 0x54, 0xc5, 0xb0, 0xa2, 0xfe, 0x8c, 0x8a, 0x9f, 0xf3, 0x01, 0xe8,
	0x5d, 0x37, 0xe0, 0x9d, 0x93, 0x7f, 0x61, 0xcb, 0x84, 0x64, 0x9d, 0x26, 0x4e, 0xc3, 0x4e, 0x41,
	0xff, 0x3a, 0xb1, 0xf9, 0xf7, 0x09, 0xb2, 0x70, 0x08, 0x96, 0x87, 0x6b, 0xc5, 0x2d, 0x7e, 0x05,
	0xd8, 0x33, 0x95, 0xfa, 0xc5, 0x6f, 0xc2, 0x2f, 0x7e, 0x1e, 0x72, 0x8b, 0x1f, 0xfb, 0x94, 0x4c,
	0x72, 0xdd, 0xc7, 0xfd, 0x73, 0x61, 0xf7, 0xe1, 0x6b, 0xfb, 0xe7, 0x11, 0x1f, 0xb8, 0x21, 0xfc,
	0x52, 0x3f, 0x29, 0x4e, 0x21, 0x4d, 0x21, 0xed, 0xf0, 0xbc, 0x82, 0xd8, 0x7d, 0xc1, 0xde, 0x26,
	0xf3, 0x3d, 0xa5, 0xcf, 0xb9, 0x4e, 0x21, 0xc5, 0xbd, 0x73, 0x6e, 0x6f, 0xba, 0xc7, 0x73, 0x03,
	0xf1, 0x08, 0xdf, 0xfc, 0xdb, 0x04, 0x59, 0xf4, 0xe6, 0x98, 0x52, 0x49, 0x03, 0xec, 0x2e, 0x21,
	0xa0, 0xb5, 0xd2, 0xdd, 0x44, 0xa5, 0xde, 0x9c, 0xe9, 0x78, 0x1e, 0x91, 0xa6, 0x4a, 0x81, 0x3d,
	0x20, 0x8b, 0x9e, 0x9c, 0x82, 0xe5, 0x22, 0x47, 0xb3, 0xe6, 0xe3, 0x05, 0xc4, 0x0e, 0x10, 0x72,
	0x06, 0x6b, 0xb0, 0xa8, 0xf1, 0x7f, 0x37, 0x58, 0x83, 0xdd, 0xdc, 0x23, 0x8b, 0x81, 0x8c, 0x20,
	0xbb, 0x41, 0x66, 0x54, 0xaf, 0x67, 0xc0, 0xa2, 0x19, 0x53, 0x71, 0x38, 0x31, 0x46, 0xa6, 0x8c,
	0xf8, 0xd1, 0xaf, 0xe4, 0x53, 0x31, 0xfe, 0xde, 0xcc, 0xc8, 0x8d, 0xab, 0x45, 0xb3, 0x4f, 0xc8,
	0x6c, 0xe9, 0x29, 0x28, 0x66, 0x61, 0xf7, 0xf6, 0xd5, 0x26, 0x79, 0x43, 0x6a, 0x5e, 0xb6, 0x4e,
	0xe6, 0x20, 0xc8, 0x41, 0x45, 0xee, 0x69, 0x10, 0xce, 0x9b, 0xff, 0x58, 0x26, 0x53, 0xc7, 0xdc,
	0x64, 0x6c, 0xe7, 0xaa, 0x15, 0xdf, 0x69, 0x99, 0xdc, 0xbb, 0xf6, 0xe1, 0x47, 0x57, 0xac, 0xf9,
	0x8c, 0x4c, 0x55, 0x95, 0xa8, 0x25, 0xe2, 0x6f, 0x57, 0x01, 0xc6, 0x15, 0x83, 0x4c, 0xc0, 0xbd,
	0x43, 0x26, 0xd1, 0x2b, 0x52, 0x43, 0xad, 0x94, 0x7d, 0x4c, 0x66, 0xb5, 0xaf, 0x16, 0x7c, 0x17,
	0x2c, 0xec, 0xae, 0xbf, 0xe6, 0xc1, 0x58, 0x3d, 0xc5, 0x35, 0x2b, 0xfb, 0x94, 0xcc, 0xe9, 0x90,
	0xd4, 0x68, 0xfa, 0x4a, 0xc7, 0xc7, 0xf3, 0x1e, 0x0f, 0x99, 0xd9, 0x23, 0xb2, 0x92, 0x68, 0xe0,
	0x16, 0xd0, 0xa7, 0x6e, 0x65, 0x20, 0x31, 0xd1, 0xcc, 0xc6, 0xc4, 0xd6, 0x4c, 0xbc, 0xec, 0x09,
	0xce, 0x9f, 0x13, 0x07, 0xb3, 0x2d, 0x42, 0x8d, 0xe5, 0xda, 0x8e, 0xb3, 0xce, 0x22, 0xeb, 0x12,
	0xe2, 0x23, 0xce, 0x6d, 0xb2, 0x9a, 0xa8, 0xa2, 0xcc, 0xe1, 0xb2, 0xdc, 0x39, 0x64, 0x5e, 0xa9,
	0x49, 0x23, 0xfe, 0x4f, 0xc8, 0xcd, 0x9c, 0x1b, 0xdb, 0xad, 0xca, 0xd4, 0xcd, 0xa6, 0xf1, 0x6f,
	0xe6, 0xf1, 0x9b, 0x35, 0x47, 0x3e, 0xf1, 0xd4, 0xd1, 0x67, 0x9f, 0x0d, 0xdf, 0x51, 0xb9, 0x30,
	0x36, 0x22, 0x1b, 0x93, 0x5b, 0x0b, 0xbb, 0x37, 0xff, 0xc3, 0xab, 0xad, 0x7e, 0x60, 0x3d, 0x17,
	0xc6, 0xb2, 0x87, 0x64, 0x49, 0x95, 0xa0, 0x71, 0xb8, 0xfb, 0x27, 0xdf, 0x02, 0xd6, 0xf6, 0xf5,
	0x21, 0x8a, 0xaf, 0xba, 0x88, 0xcc, 0x16, 0x60, 0x0c, 0xef, 0x43, 0xb4, 0x88, 0xf4, 0xfa, 0xc8,
	0x76, 0xc8, 0x6a, 0x09, 0xda, 0x6d, 0x3e, 0xbc, 0x0f, 0xdd, 0xda, 0xa3, 0xe8, 0x3a, 0xb6, 0x10,
	0x1b, 0x91, 0x9a, 0x81, 0xc2, 0x3e, 0x27, 0x33, 0xc6, 0x72, 0x5b, 0x99, 0x68, 0x09, 0x1f, 0x97,
	0xaf, 0xa7, 0xd5, 0x95, 0xd8, 0x76, 0x1b, 0x39, 0xf6, 0x66, 0xb3, 0xaf, 0x2b, 0xa8, 0x20, 0x8d,
	0xc3, 0x27, 0x2e, 0xf2, 0x25, 0xd7, 0x20, 0x6d, 0xd7, 0x72, 0x93, 0x75, 0xb1, 0xaa, 0x96, 0xb1,
	0xaa, 0x96, 0x3c, 0xee, 0xbe, 0x3e, 0x71, 0xf5, 0xf5, 0x88, 0xac, 0x98, 0xea, 0x74, 0xc8, 0xe5,
	0x03, 0x43, 0x37, 0x26, 0xb7, 0x16, 0xe3, 0xe5, 0x40, 0x70, 0x7c, 0x18, 0x84, 0x3b, 0x64, 0xde,
	0x19, 0xae, 0x24, 0x48, 0x1b, 0xad, 0xa0, 0x7f, 0x23, 0xc0, 0x55, 0xaa, 0x55, 0x96, 0xe7, 0x5d,
	0x63, 0xa1, 0x34, 0x11, 0xc3, 0xb7, 0x2c, 0x41, 0xa8, 0xed, 0x10, 0xf6, 0x1e, 0x59, 0x46, 0xd2,
	0xd0, 0xfb, 0x34, 0x5a, 0x45, 0xa6, 0x25, 0x84, 0x6b, 0xcf, 0x53, 0x76, 0x40, 0x88, 0x67, 0xac,
	0xa4, 0xb0, 0xd1, 0x1a, 0xba, 0x7f, 0xf7, 0x6a, 0xf7, 0xa1, 0x34, 0x6e, 0xc7, 0xd8, 0x9b, 0xc9,
	0xf0, 0x77, 0x3c, 0x6f, 0x6a, 0x88, 0x3d, 0x20, 0x73, 0x89, 0xdb, 0x95, 0x73, 0x48, 0xa3, 0x1b,
	0xe3, 0x03, 0x6e, 0x08, 0x3b, 0x8b, 0x84, 0xf4, 0x37, 0x49, 0x57, 0x95, 0xfc, 0x87, 0x0a, 0xa2,
	0x9b, 0x3e, 0x4a, 0x35, 0xfc, 0x12, 0x51, 0x97, 0xd7, 0x14, 0xbc, 0xc9, 0x91, 0x13, 0x15, 0xd7,
	0x47, 0xf6, 0x88, 0x5c, 0x1f, 0x8a, 0x70, 0xc1, 0x8a, 0x6e, 0x8d, 0xab, 0x5a, 0xac, 0x69, 0x38,
	0x10, 0x1e, 0x90, 0xc5, 0xc4, 0x6f, 0x4b, 0x3e, 0x23, 0xeb, 0xa8, 0x6b, 0x21, 0x60, 0x98, 0x8e,
	0x07, 0x64, 0x31, 0x15, 0xa6, 0xcc, 0x79, 0x78, 0xea, 0xdf, 0xf6, 0x13, 0x34, 0x60, 0x38, 0xf2,
	0xb7, 0xc9, 0x6a, 0x9d, 0xb1, 0xf1, 0xc9, 0x70, 0x07, 0x27, 0x43, 0x9d, 0xcc, 0xf6, 0x68, 0x40,
	0xec, 0x10, 0x5a, 0x8b, 0xec, 0x71, 0x91, 0x57, 0x1a, 0x4c, 0x74, 0x17, 0x8d, 0x9c, 0xb2, 0xba,
	0x82, 0x78, 0x39, 0x50, 0x9f, 0x06, 0x22, 0x7b, 0x4a, 0xee, 0xa4, 0xc2, 0xb8, 0x1d, 0xa0, 0xcb,
	0x2b, 0xab, 0xba, 0xa5, 0x56, 0x7d, 0x0d, 0xc6, 0x84, 0x6e, 0x8b, 0xee, 0x8d, 0x7b, 0x78, 0x2b,
	0xb0, 0x36, 0x2a, 0xab, 0x8e, 0x02, 0xa3, 0xef, 0x3b, 0x76, 0x87, 0xcc, 0x9c, 0x83, 0xe8, 0x9f,
	0xd9, 0xe8, 0xbe, 0xb3, 0x6d, 0x6f, 0xea, 0xa3, 0xc7, 0x8f, 0x1f, 0xc7, 0x01, 0x63, 0x5d, 0xb2,
	0x1e, 0x86, 0x11, 0xa4, 0x5d, 0x57, 0xb6, 0xd0, 0xb5, 0x9a, 0x4b, 0x23, 0x5c, 0x33, 0x45, 0x1b,
	0xff, 0xb5, 0xe6, 0xa7, 0xb3, 0x17, 0x4a, 0x42, 0x1c, 0x0d, 0x85, 0x38, 0x1c, 0x8e, 0x87, 0x22,
	0xd8, 0x3e, 0x59, 0x4c, 0xea, 0x17, 0xb6, 0x00, 0x13, 0x3d, 0xd8, 0x98, 0xbc, 0xe2, 0x7f, 0x34,
	0x28, 0x72, 0xf4, 0x12, 0x8f, 0x2f, 0x7d, 0xe3, 0xee, 0xbb, 0x14, 0x4e, 0xab, 0x7e, 0x57, 0xc8,
	0x9e, 0x8a, 0x36, 0x7d, 0xc9, 0x23, 0xe2, 0x1e, 0xb6, 0xee, 0x0e, 0xd2, 0xc0, 0x8d, 0x92, 0xd1,
	0xdb, 0x48, 0x0a, 0x27, 0xf6, 0x3e, 0xa1, 0xc3, 0xa0, 0xd5, 0xf3, 0xe0, 0x1d, 0xe4, 0x58, 0xae,
	0xf1, 0xc3, 0xe1, 0x5c, 0x58, 0xcb, 0x95, 0xbb, 0x22, 0xb4, 0x52, 0xe3, 0xdd, 0xfa, 0x10, 0x6b,
	0x63, 0x05, 0x69, 0xb1, 0x52, 0xa3, 0x86, 0x7d, 0x46, 0x96, 0x83, 0xcb, 0xdd, 0x44, 0x49, 0x0b,
	0x17, 0x36, 0x7a, 0x17, 0x07, 0xf8, 0xc8, 0x33, 0x09, 0x76, 0x3b, 0x2e, 0x93, 0x30, 0xf4, 0x9b,
	0x9e, 0x2b, 0x5e, 0xd2, 0x97, 0xce, 0xae, 0x2e, 0x2a, 0x03, 0x5d, 0x33, 0x90, 0x49, 0xf7, 0x94,
	0x6b, 0x2d, 0x40, 0x47, 0xef, 0x8d, 0xa7, 0x76, 0xa9, 0x32, 0xe0, 0x96, 0xfd, 0x7d, 0x4f, 0xdc,
	0x14, 0x64, 0xc6, 0xc7, 0x1e, 0x1f, 0x37, 0x7e, 0xe2, 0xd0, 0x09, 0x7c, 0xea, 0xc6, 0x95, 0x94,
	0x6e, 0xdf, 0xbd, 0x86, 0xeb, 0x7a, 0xbb, 0x4a, 0x12, 0x80, 0x14, 0x52, 0x3a, 0x89, 0xd4, 0xc6,
	0xa9, 0xdb, 0xb4, 0x52, 0x3a, 0x15, 0xa8, 0xa6, 0x04, 0xe9, 0xa8, 0xd3, 0x28, 0xc8, 0xd5, 0x1d,
	0xa4, 0x74, 0x26, 0xfc, 0xaf, 0x4a, 0x02, 0x5d, 0xdb, 0xdc, 0x20, 0xf3, 0xc3, 0xde, 0xc6, 0x67,
	0x15, 0x9e, 0xc2, 0x3f, 0xb1, 0x0e, 0xf7, 0xe9, 0xb5, 0xcd, 0x1d, 0x42, 0x46, 0x59, 0xc3, 0x3d,
	0xcf, 0x45, 0x28, 0xc8, 0xa6, 0x13, 0xb8, 0x7f, 0x39, 0xa4, 0x89, 0xbd, 0x4e, 0xaf, 0xed, 0xcf,
	0x7e, 0x37, 0x8d, 0x19, 0xff, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x69, 0x29, 0xf1, 0x29,
	0x14, 0x00, 0x00,
}
