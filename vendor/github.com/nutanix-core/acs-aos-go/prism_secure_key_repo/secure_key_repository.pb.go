// Code generated by protoc-gen-go. DO NOT EDIT.
// source: prism_client/proto/secure_key_repository.proto

package nutanix_prism

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SecureKeyRepository_SecureKey_Type int32

const (
	SecureKeyRepository_SecureKey_NONE       SecureKeyRepository_SecureKey_Type = 0
	SecureKeyRepository_SecureKey_JKS        SecureKeyRepository_SecureKey_Type = 1
	SecureKeyRepository_SecureKey_PKCS12     SecureKeyRepository_SecureKey_Type = 2
	SecureKeyRepository_SecureKey_RSA_2048   SecureKeyRepository_SecureKey_Type = 3
	SecureKeyRepository_SecureKey_RSA_PUBLIC SecureKeyRepository_SecureKey_Type = 4
	SecureKeyRepository_SecureKey_KRB_KEYTAB SecureKeyRepository_SecureKey_Type = 5
	SecureKeyRepository_SecureKey_ECDSA_256  SecureKeyRepository_SecureKey_Type = 6
	SecureKeyRepository_SecureKey_ECDSA_384  SecureKeyRepository_SecureKey_Type = 7
	SecureKeyRepository_SecureKey_ECDSA_521  SecureKeyRepository_SecureKey_Type = 8
)

var SecureKeyRepository_SecureKey_Type_name = map[int32]string{
	0: "NONE",
	1: "JKS",
	2: "PKCS12",
	3: "RSA_2048",
	4: "RSA_PUBLIC",
	5: "KRB_KEYTAB",
	6: "ECDSA_256",
	7: "ECDSA_384",
	8: "ECDSA_521",
}

var SecureKeyRepository_SecureKey_Type_value = map[string]int32{
	"NONE":       0,
	"JKS":        1,
	"PKCS12":     2,
	"RSA_2048":   3,
	"RSA_PUBLIC": 4,
	"KRB_KEYTAB": 5,
	"ECDSA_256":  6,
	"ECDSA_384":  7,
	"ECDSA_521":  8,
}

func (x SecureKeyRepository_SecureKey_Type) Enum() *SecureKeyRepository_SecureKey_Type {
	p := new(SecureKeyRepository_SecureKey_Type)
	*p = x
	return p
}

func (x SecureKeyRepository_SecureKey_Type) String() string {
	return proto.EnumName(SecureKeyRepository_SecureKey_Type_name, int32(x))
}

func (x *SecureKeyRepository_SecureKey_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SecureKeyRepository_SecureKey_Type_value, data, "SecureKeyRepository_SecureKey_Type")
	if err != nil {
		return err
	}
	*x = SecureKeyRepository_SecureKey_Type(value)
	return nil
}

func (SecureKeyRepository_SecureKey_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33eba37a8ba4459f, []int{0, 0, 0}
}

type SecureKeyRepository struct {
	// A logical timestamp that conceptually indicates when this repository was
	// last modified. Also serves as a unique id identifying a given state of the
	// repository. Zookeeper would update the repository with the new one only
	// when the new repository that's provided during the update operation has
	// logical_timestamp that is one more than the one already in Zookeeper.
	LogicalTimestamp *int64 `protobuf:"varint,1,req,name=logical_timestamp,json=logicalTimestamp" json:"logical_timestamp,omitempty"`
	// List of keys
	PrismSecureKeyList           []*SecureKeyRepository_SecureKey `protobuf:"bytes,2,rep,name=prism_secure_key_list,json=prismSecureKeyList" json:"prism_secure_key_list,omitempty"`
	ClusterKerberosSecureKeyList []*SecureKeyRepository_SecureKey `protobuf:"bytes,3,rep,name=cluster_kerberos_secure_key_list,json=clusterKerberosSecureKeyList" json:"cluster_kerberos_secure_key_list,omitempty"`
	// Sever key that is used if there is no other custom key provided.
	ClusterGeneratedKey *SecureKeyRepository_SecureKey `protobuf:"bytes,4,opt,name=cluster_generated_key,json=clusterGeneratedKey" json:"cluster_generated_key,omitempty"`
	// Client auth key that is used for CAC.
	ClientAuthKey *SecureKeyRepository_SecureKey `protobuf:"bytes,5,opt,name=client_auth_key,json=clientAuthKey" json:"client_auth_key,omitempty"`
	// Aplos specific key, used when server key cannot be used
	// refer to ONCALL 2984 for details
	AplosSecureKey       *SecureKeyRepository_SecureKey `protobuf:"bytes,6,opt,name=aplos_secure_key,json=aplosSecureKey" json:"aplos_secure_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SecureKeyRepository) Reset()         { *m = SecureKeyRepository{} }
func (m *SecureKeyRepository) String() string { return proto.CompactTextString(m) }
func (*SecureKeyRepository) ProtoMessage()    {}
func (*SecureKeyRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_33eba37a8ba4459f, []int{0}
}

func (m *SecureKeyRepository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecureKeyRepository.Unmarshal(m, b)
}
func (m *SecureKeyRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecureKeyRepository.Marshal(b, m, deterministic)
}
func (m *SecureKeyRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecureKeyRepository.Merge(m, src)
}
func (m *SecureKeyRepository) XXX_Size() int {
	return xxx_messageInfo_SecureKeyRepository.Size(m)
}
func (m *SecureKeyRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_SecureKeyRepository.DiscardUnknown(m)
}

var xxx_messageInfo_SecureKeyRepository proto.InternalMessageInfo

func (m *SecureKeyRepository) GetLogicalTimestamp() int64 {
	if m != nil && m.LogicalTimestamp != nil {
		return *m.LogicalTimestamp
	}
	return 0
}

func (m *SecureKeyRepository) GetPrismSecureKeyList() []*SecureKeyRepository_SecureKey {
	if m != nil {
		return m.PrismSecureKeyList
	}
	return nil
}

func (m *SecureKeyRepository) GetClusterKerberosSecureKeyList() []*SecureKeyRepository_SecureKey {
	if m != nil {
		return m.ClusterKerberosSecureKeyList
	}
	return nil
}

func (m *SecureKeyRepository) GetClusterGeneratedKey() *SecureKeyRepository_SecureKey {
	if m != nil {
		return m.ClusterGeneratedKey
	}
	return nil
}

func (m *SecureKeyRepository) GetClientAuthKey() *SecureKeyRepository_SecureKey {
	if m != nil {
		return m.ClientAuthKey
	}
	return nil
}

func (m *SecureKeyRepository) GetAplosSecureKey() *SecureKeyRepository_SecureKey {
	if m != nil {
		return m.AplosSecureKey
	}
	return nil
}

type SecureKeyRepository_SecureKey struct {
	// The unique identifier for the key
	// For JKS keystores, this is the key alias; the identifier
	// of the key within the keystore.
	// For RSA keys, this will be the required name for the key
	// given by the user to identify each RSA key
	Name *string                             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type *SecureKeyRepository_SecureKey_Type `protobuf:"varint,2,opt,name=type,enum=nutanix.prism.SecureKeyRepository_SecureKey_Type,def=0" json:"type,omitempty"`
	// The password associated with this key or keystore.
	Password *string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	// The actual key data.
	// For JKS, this is the keystore which contains the key.
	// For SSH, this is, e.g., the RSA key.
	Key []byte `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	// Time at which this key information was updated. Indicates the
	// number of milliseconds elapsed since the Unix epoch.
	UpdateTimestamp *int64 `protobuf:"varint,5,opt,name=update_timestamp,json=updateTimestamp" json:"update_timestamp,omitempty"`
	// Indicates if this key is enabled for use.
	Enabled *bool `protobuf:"varint,6,opt,name=enabled,def=1" json:"enabled,omitempty"`
	// If enabled, indicates that the SMB server hosted on Stargate is
	// kerberized.
	KerberizeSmb *bool `protobuf:"varint,7,opt,name=kerberize_smb,json=kerberizeSmb,def=0" json:"kerberize_smb,omitempty"`
	// SSL certificate.
	Certificate []byte `protobuf:"bytes,8,opt,name=certificate" json:"certificate,omitempty"`
	// SSL certificate - private key is placed at this location.
	PrivateKeyLocation *string `protobuf:"bytes,9,opt,name=private_key_location,json=privateKeyLocation" json:"private_key_location,omitempty"`
	// Other components can verify the integrity of private key using this
	// checksum.
	PrivateKeySha256Checksum *string `protobuf:"bytes,10,opt,name=private_key_sha256_checksum,json=privateKeySha256Checksum" json:"private_key_sha256_checksum,omitempty"`
	// CA certificate or Chain file used for SSL server certificate or client
	// certificate.
	CaCertificateChain []byte `protobuf:"bytes,11,opt,name=ca_certificate_chain,json=caCertificateChain" json:"ca_certificate_chain,omitempty"`
	// Auto login information to be used optionally if client authentication
	// is enabled.
	AutoLoginInfo *SecureKeyRepository_SecureKey_AutoLoginInfo `protobuf:"bytes,12,opt,name=auto_login_info,json=autoLoginInfo" json:"auto_login_info,omitempty"`
	// Certificate Revocation Information to be used optionally if client
	// chain is provided.
	CertRevocationInfo   *SecureKeyRepository_SecureKey_CertRevocationInfo `protobuf:"bytes,13,opt,name=cert_revocation_info,json=certRevocationInfo" json:"cert_revocation_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *SecureKeyRepository_SecureKey) Reset()         { *m = SecureKeyRepository_SecureKey{} }
func (m *SecureKeyRepository_SecureKey) String() string { return proto.CompactTextString(m) }
func (*SecureKeyRepository_SecureKey) ProtoMessage()    {}
func (*SecureKeyRepository_SecureKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_33eba37a8ba4459f, []int{0, 0}
}

func (m *SecureKeyRepository_SecureKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecureKeyRepository_SecureKey.Unmarshal(m, b)
}
func (m *SecureKeyRepository_SecureKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecureKeyRepository_SecureKey.Marshal(b, m, deterministic)
}
func (m *SecureKeyRepository_SecureKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecureKeyRepository_SecureKey.Merge(m, src)
}
func (m *SecureKeyRepository_SecureKey) XXX_Size() int {
	return xxx_messageInfo_SecureKeyRepository_SecureKey.Size(m)
}
func (m *SecureKeyRepository_SecureKey) XXX_DiscardUnknown() {
	xxx_messageInfo_SecureKeyRepository_SecureKey.DiscardUnknown(m)
}

var xxx_messageInfo_SecureKeyRepository_SecureKey proto.InternalMessageInfo

const Default_SecureKeyRepository_SecureKey_Type SecureKeyRepository_SecureKey_Type = SecureKeyRepository_SecureKey_NONE
const Default_SecureKeyRepository_SecureKey_Enabled bool = true
const Default_SecureKeyRepository_SecureKey_KerberizeSmb bool = false

func (m *SecureKeyRepository_SecureKey) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SecureKeyRepository_SecureKey) GetType() SecureKeyRepository_SecureKey_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_SecureKeyRepository_SecureKey_Type
}

func (m *SecureKeyRepository_SecureKey) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *SecureKeyRepository_SecureKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SecureKeyRepository_SecureKey) GetUpdateTimestamp() int64 {
	if m != nil && m.UpdateTimestamp != nil {
		return *m.UpdateTimestamp
	}
	return 0
}

func (m *SecureKeyRepository_SecureKey) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return Default_SecureKeyRepository_SecureKey_Enabled
}

func (m *SecureKeyRepository_SecureKey) GetKerberizeSmb() bool {
	if m != nil && m.KerberizeSmb != nil {
		return *m.KerberizeSmb
	}
	return Default_SecureKeyRepository_SecureKey_KerberizeSmb
}

func (m *SecureKeyRepository_SecureKey) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *SecureKeyRepository_SecureKey) GetPrivateKeyLocation() string {
	if m != nil && m.PrivateKeyLocation != nil {
		return *m.PrivateKeyLocation
	}
	return ""
}

func (m *SecureKeyRepository_SecureKey) GetPrivateKeySha256Checksum() string {
	if m != nil && m.PrivateKeySha256Checksum != nil {
		return *m.PrivateKeySha256Checksum
	}
	return ""
}

func (m *SecureKeyRepository_SecureKey) GetCaCertificateChain() []byte {
	if m != nil {
		return m.CaCertificateChain
	}
	return nil
}

func (m *SecureKeyRepository_SecureKey) GetAutoLoginInfo() *SecureKeyRepository_SecureKey_AutoLoginInfo {
	if m != nil {
		return m.AutoLoginInfo
	}
	return nil
}

func (m *SecureKeyRepository_SecureKey) GetCertRevocationInfo() *SecureKeyRepository_SecureKey_CertRevocationInfo {
	if m != nil {
		return m.CertRevocationInfo
	}
	return nil
}

// This proto defines the model for auto login feature of CAC.
type SecureKeyRepository_SecureKey_AutoLoginInfo struct {
	// Required. Indicates whether auto login feature is enabled.
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,def=0" json:"enabled,omitempty"`
	// Required. Provides the service account info to be used for auto login.
	ServiceAccountInfo   *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount `protobuf:"bytes,2,opt,name=service_account_info,json=serviceAccountInfo" json:"service_account_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                    `json:"-"`
	XXX_unrecognized     []byte                                                      `json:"-"`
	XXX_sizecache        int32                                                       `json:"-"`
}

func (m *SecureKeyRepository_SecureKey_AutoLoginInfo) Reset() {
	*m = SecureKeyRepository_SecureKey_AutoLoginInfo{}
}
func (m *SecureKeyRepository_SecureKey_AutoLoginInfo) String() string {
	return proto.CompactTextString(m)
}
func (*SecureKeyRepository_SecureKey_AutoLoginInfo) ProtoMessage() {}
func (*SecureKeyRepository_SecureKey_AutoLoginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33eba37a8ba4459f, []int{0, 0, 0}
}

func (m *SecureKeyRepository_SecureKey_AutoLoginInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo.Unmarshal(m, b)
}
func (m *SecureKeyRepository_SecureKey_AutoLoginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo.Marshal(b, m, deterministic)
}
func (m *SecureKeyRepository_SecureKey_AutoLoginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo.Merge(m, src)
}
func (m *SecureKeyRepository_SecureKey_AutoLoginInfo) XXX_Size() int {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo.Size(m)
}
func (m *SecureKeyRepository_SecureKey_AutoLoginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo proto.InternalMessageInfo

const Default_SecureKeyRepository_SecureKey_AutoLoginInfo_Enabled bool = false

func (m *SecureKeyRepository_SecureKey_AutoLoginInfo) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return Default_SecureKeyRepository_SecureKey_AutoLoginInfo_Enabled
}

func (m *SecureKeyRepository_SecureKey_AutoLoginInfo) GetServiceAccountInfo() *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount {
	if m != nil {
		return m.ServiceAccountInfo
	}
	return nil
}

type SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount struct {
	// Required. Username to be used to login to the service account.
	Username *string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// Required. Password to be used to login to the service account.
	Password *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	// Required. Name of the Active directory config to be used.
	DirectoryConfigName  *string  `protobuf:"bytes,3,opt,name=directory_config_name,json=directoryConfigName" json:"directory_config_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) Reset() {
	*m = SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount{}
}
func (m *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) String() string {
	return proto.CompactTextString(m)
}
func (*SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) ProtoMessage() {}
func (*SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_33eba37a8ba4459f, []int{0, 0, 0, 0}
}

func (m *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount.Unmarshal(m, b)
}
func (m *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount.Marshal(b, m, deterministic)
}
func (m *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount.Merge(m, src)
}
func (m *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) XXX_Size() int {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount.Size(m)
}
func (m *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount.DiscardUnknown(m)
}

var xxx_messageInfo_SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount proto.InternalMessageInfo

func (m *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) GetUsername() string {
	if m != nil && m.Username != nil {
		return *m.Username
	}
	return ""
}

func (m *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount) GetDirectoryConfigName() string {
	if m != nil && m.DirectoryConfigName != nil {
		return *m.DirectoryConfigName
	}
	return ""
}

// This proto defines Certificate Revocation Information containing
// Online Certificate Status Protocol (OCSP) URI.
type SecureKeyRepository_SecureKey_CertRevocationInfo struct {
	// URI for OCSP responder that overrides the responder from client certs.
	OcspResponder *string `protobuf:"bytes,1,opt,name=ocsp_responder,json=ocspResponder" json:"ocsp_responder,omitempty"`
	// CRL info used by ssl terminator to enable CRL revocation.
	CrlInfo []*SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo `protobuf:"bytes,2,rep,name=crl_info,json=crlInfo" json:"crl_info,omitempty"`
	// CRL refresh interval in seconds
	GlobalCrlRefreshInterval *int64   `protobuf:"varint,3,opt,name=global_crl_refresh_interval,json=globalCrlRefreshInterval" json:"global_crl_refresh_interval,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *SecureKeyRepository_SecureKey_CertRevocationInfo) Reset() {
	*m = SecureKeyRepository_SecureKey_CertRevocationInfo{}
}
func (m *SecureKeyRepository_SecureKey_CertRevocationInfo) String() string {
	return proto.CompactTextString(m)
}
func (*SecureKeyRepository_SecureKey_CertRevocationInfo) ProtoMessage() {}
func (*SecureKeyRepository_SecureKey_CertRevocationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33eba37a8ba4459f, []int{0, 0, 1}
}

func (m *SecureKeyRepository_SecureKey_CertRevocationInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo.Unmarshal(m, b)
}
func (m *SecureKeyRepository_SecureKey_CertRevocationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo.Marshal(b, m, deterministic)
}
func (m *SecureKeyRepository_SecureKey_CertRevocationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo.Merge(m, src)
}
func (m *SecureKeyRepository_SecureKey_CertRevocationInfo) XXX_Size() int {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo.Size(m)
}
func (m *SecureKeyRepository_SecureKey_CertRevocationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo proto.InternalMessageInfo

func (m *SecureKeyRepository_SecureKey_CertRevocationInfo) GetOcspResponder() string {
	if m != nil && m.OcspResponder != nil {
		return *m.OcspResponder
	}
	return ""
}

func (m *SecureKeyRepository_SecureKey_CertRevocationInfo) GetCrlInfo() []*SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo {
	if m != nil {
		return m.CrlInfo
	}
	return nil
}

func (m *SecureKeyRepository_SecureKey_CertRevocationInfo) GetGlobalCrlRefreshInterval() int64 {
	if m != nil && m.GlobalCrlRefreshInterval != nil {
		return *m.GlobalCrlRefreshInterval
	}
	return 0
}

// This proto defines CRL information required for enabling
// CRL revocation.
type SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo struct {
	// URI for Certificate Revocation List (CRL) distribution point.
	CrlDistributionPoint *string  `protobuf:"bytes,1,opt,name=crl_distribution_point,json=crlDistributionPoint" json:"crl_distribution_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo) Reset() {
	*m = SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo{}
}
func (m *SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo) String() string {
	return proto.CompactTextString(m)
}
func (*SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo) ProtoMessage() {}
func (*SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33eba37a8ba4459f, []int{0, 0, 1, 0}
}

func (m *SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo.Unmarshal(m, b)
}
func (m *SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo.Marshal(b, m, deterministic)
}
func (m *SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo.Merge(m, src)
}
func (m *SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo) XXX_Size() int {
	return xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo.Size(m)
}
func (m *SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo proto.InternalMessageInfo

func (m *SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo) GetCrlDistributionPoint() string {
	if m != nil && m.CrlDistributionPoint != nil {
		return *m.CrlDistributionPoint
	}
	return ""
}

func init() {
	proto.RegisterEnum("nutanix.prism.SecureKeyRepository_SecureKey_Type", SecureKeyRepository_SecureKey_Type_name, SecureKeyRepository_SecureKey_Type_value)
	proto.RegisterType((*SecureKeyRepository)(nil), "nutanix.prism.SecureKeyRepository")
	proto.RegisterType((*SecureKeyRepository_SecureKey)(nil), "nutanix.prism.SecureKeyRepository.SecureKey")
	proto.RegisterType((*SecureKeyRepository_SecureKey_AutoLoginInfo)(nil), "nutanix.prism.SecureKeyRepository.SecureKey.AutoLoginInfo")
	proto.RegisterType((*SecureKeyRepository_SecureKey_AutoLoginInfo_ServiceAccount)(nil), "nutanix.prism.SecureKeyRepository.SecureKey.AutoLoginInfo.ServiceAccount")
	proto.RegisterType((*SecureKeyRepository_SecureKey_CertRevocationInfo)(nil), "nutanix.prism.SecureKeyRepository.SecureKey.CertRevocationInfo")
	proto.RegisterType((*SecureKeyRepository_SecureKey_CertRevocationInfo_CrlInfo)(nil), "nutanix.prism.SecureKeyRepository.SecureKey.CertRevocationInfo.CrlInfo")
}

func init() {
	proto.RegisterFile("prism_client/proto/secure_key_repository.proto", fileDescriptor_33eba37a8ba4459f)
}

var fileDescriptor_33eba37a8ba4459f = []byte{
	// 894 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x6d, 0x6f, 0x23, 0x35,
	0x10, 0x26, 0x2f, 0x6d, 0xd2, 0x69, 0x93, 0x2e, 0x6e, 0x8b, 0x56, 0x01, 0x71, 0xd1, 0x49, 0x48,
	0xe5, 0x45, 0xb9, 0x6b, 0x68, 0x4f, 0xa7, 0x22, 0x74, 0x4a, 0x72, 0xd5, 0xa9, 0xa4, 0x2a, 0xd5,
	0xa6, 0x20, 0xf1, 0xc9, 0x38, 0xce, 0xa4, 0xb1, 0xba, 0x59, 0x2f, 0xb6, 0xb7, 0x10, 0xe0, 0xc3,
	0xfd, 0x13, 0x7e, 0x00, 0xfc, 0x48, 0x64, 0xef, 0x66, 0xb3, 0xb9, 0xde, 0x97, 0xf6, 0xbe, 0xed,
	0xcc, 0x33, 0x7e, 0x9e, 0xf1, 0xbc, 0x78, 0xa1, 0x13, 0x2b, 0xa1, 0xe7, 0x94, 0x87, 0x02, 0x23,
	0xf3, 0x2c, 0x56, 0xd2, 0xc8, 0x67, 0x1a, 0x79, 0xa2, 0x90, 0xde, 0xe2, 0x82, 0x2a, 0x8c, 0xa5,
	0x16, 0x46, 0xaa, 0x45, 0xc7, 0x61, 0xa4, 0x11, 0x25, 0x86, 0x45, 0xe2, 0x8f, 0xf4, 0xdc, 0xd3,
	0xff, 0x76, 0x61, 0x6f, 0xe4, 0xc2, 0x87, 0xb8, 0x08, 0xf2, 0x60, 0xf2, 0x35, 0x7c, 0x1c, 0xca,
	0x1b, 0xc1, 0x59, 0x48, 0x8d, 0x98, 0xa3, 0x36, 0x6c, 0x1e, 0xfb, 0xa5, 0x76, 0xf9, 0xb0, 0x12,
	0x78, 0x19, 0x70, 0xbd, 0xf4, 0x13, 0x0a, 0x07, 0x69, 0x16, 0x05, 0xe1, 0x50, 0x68, 0xe3, 0x97,
	0xdb, 0x95, 0xc3, 0xed, 0xee, 0x37, 0x9d, 0x35, 0xcd, 0xce, 0x7b, 0xf4, 0x0a, 0x3e, 0xe2, 0x82,
	0x72, 0xfb, 0x42, 0x68, 0x43, 0x0c, 0xb4, 0x79, 0x98, 0x68, 0x83, 0x8a, 0xde, 0xa2, 0x1a, 0xa3,
	0x92, 0xfa, 0x9e, 0x56, 0xe5, 0x11, 0x5a, 0x9f, 0x65, 0xac, 0xc3, 0x8c, 0x74, 0x5d, 0xf5, 0x57,
	0x38, 0x58, 0xaa, 0xde, 0x60, 0x84, 0x8a, 0x19, 0x9c, 0x58, 0x3d, 0xbf, 0xda, 0x2e, 0x3d, 0x58,
	0x6a, 0x2f, 0xa3, 0x7a, 0xb3, 0x64, 0x1a, 0xe2, 0x82, 0x5c, 0xc3, 0x6e, 0xda, 0x38, 0xca, 0x12,
	0x33, 0x73, 0xdc, 0x1b, 0x8f, 0xe0, 0x6e, 0xa4, 0x24, 0xbd, 0xc4, 0xcc, 0x2c, 0xeb, 0xcf, 0xe0,
	0xb1, 0x38, 0x5c, 0x2b, 0x91, 0xbf, 0xf9, 0x08, 0xda, 0xa6, 0x63, 0xc9, 0xed, 0xd6, 0xdb, 0x6d,
	0xd8, 0xca, 0x2d, 0x42, 0xa0, 0x1a, 0xb1, 0x39, 0xfa, 0xa5, 0x76, 0xe9, 0x70, 0x2b, 0x70, 0xdf,
	0x64, 0x08, 0x55, 0xb3, 0x88, 0xd1, 0x2f, 0xb7, 0x4b, 0x87, 0xcd, 0xee, 0xd1, 0x43, 0xd4, 0x3a,
	0xd7, 0x8b, 0x18, 0x4f, 0xab, 0x97, 0x3f, 0x5e, 0x9e, 0x05, 0x8e, 0x84, 0xb4, 0xa0, 0x1e, 0x33,
	0xad, 0x7f, 0x97, 0x6a, 0xe2, 0x57, 0x9c, 0x48, 0x6e, 0x13, 0x0f, 0x2a, 0xcb, 0x46, 0xec, 0x04,
	0xf6, 0x93, 0x7c, 0x09, 0x5e, 0x12, 0x4f, 0x98, 0xc1, 0xc2, 0xbc, 0xda, 0x5a, 0x56, 0x82, 0xdd,
	0xd4, 0xbf, 0x1a, 0xd7, 0xcf, 0xa1, 0x86, 0x11, 0x1b, 0x87, 0x38, 0x71, 0x65, 0xa9, 0x9f, 0x56,
	0x8d, 0x4a, 0x30, 0x58, 0x3a, 0xc9, 0x57, 0xd0, 0x48, 0xa7, 0x4c, 0xfc, 0x89, 0x54, 0xcf, 0xc7,
	0x7e, 0xcd, 0x45, 0x6d, 0x4c, 0x59, 0xa8, 0x31, 0xd8, 0xc9, 0xb1, 0xd1, 0x7c, 0x4c, 0xda, 0xb0,
	0xcd, 0x51, 0x19, 0x31, 0x15, 0x9c, 0x19, 0xf4, 0xeb, 0x2e, 0xa1, 0xa2, 0x8b, 0x3c, 0x87, 0xfd,
	0x58, 0x89, 0x3b, 0x9b, 0x99, 0x9b, 0x55, 0xc9, 0x99, 0x11, 0x32, 0xf2, 0xb7, 0xdc, 0x95, 0x48,
	0x86, 0xd9, 0x99, 0xcb, 0x10, 0xf2, 0x3d, 0x7c, 0x5a, 0x3c, 0xa1, 0x67, 0xac, 0x7b, 0xf2, 0x82,
	0xf2, 0x19, 0xf2, 0x5b, 0x9d, 0xcc, 0x7d, 0x70, 0x07, 0xfd, 0xd5, 0xc1, 0x91, 0x0b, 0x18, 0x64,
	0xb8, 0x15, 0xe4, 0x8c, 0x16, 0x52, 0xa0, 0x7c, 0xc6, 0x44, 0xe4, 0x6f, 0xbb, 0xdc, 0x08, 0x67,
	0x83, 0x15, 0x34, 0xb0, 0x08, 0x19, 0xc3, 0x2e, 0x4b, 0x8c, 0xa4, 0x76, 0xb1, 0x23, 0x2a, 0xa2,
	0xa9, 0xf4, 0x77, 0xdc, 0xbc, 0x9c, 0x3e, 0xa8, 0x83, 0xbd, 0xc4, 0xc8, 0x0b, 0x4b, 0x71, 0x1e,
	0x4d, 0x65, 0xd0, 0x60, 0x45, 0x93, 0xfc, 0x06, 0xfb, 0x36, 0x25, 0xaa, 0xf0, 0x2e, 0xbb, 0x67,
	0x2a, 0xd4, 0x70, 0x42, 0xaf, 0x1e, 0x24, 0x64, 0x2f, 0x10, 0xe4, 0x3c, 0x4e, 0x8d, 0xf0, 0x7b,
	0xbe, 0xd6, 0xbf, 0x65, 0x68, 0xac, 0xe5, 0x44, 0x9e, 0xac, 0x3a, 0x5f, 0x2a, 0xf6, 0x34, 0x6f,
	0xfd, 0x5f, 0xb0, 0xaf, 0x51, 0xdd, 0x09, 0x8e, 0x94, 0x71, 0x2e, 0x93, 0xc8, 0xa4, 0x59, 0x96,
	0x5d, 0x96, 0xe7, 0x8f, 0x2f, 0x47, 0x67, 0x94, 0xd2, 0xf6, 0x52, 0xd6, 0x80, 0xe8, 0x35, 0xdb,
	0xe5, 0xfb, 0x37, 0x34, 0xd7, 0xa3, 0xec, 0x0a, 0x24, 0x1a, 0x55, 0x61, 0xcf, 0x72, 0x7b, 0x6d,
	0x3d, 0xca, 0xef, 0xac, 0x47, 0x17, 0x0e, 0x26, 0x42, 0x21, 0xb7, 0x19, 0x51, 0x2e, 0xa3, 0xa9,
	0xb8, 0xa1, 0x8e, 0x24, 0xdd, 0xa3, 0xbd, 0x1c, 0x1c, 0x38, 0xec, 0x92, 0xcd, 0xb1, 0xf5, 0x4f,
	0x19, 0xc8, 0xfd, 0xc2, 0x92, 0x2f, 0xa0, 0x29, 0xb9, 0x8e, 0xa9, 0x42, 0x1d, 0xcb, 0x68, 0x82,
	0x2a, 0x4b, 0xa4, 0x61, 0xbd, 0xc1, 0xd2, 0x49, 0xc6, 0x50, 0xe7, 0x2a, 0x5c, 0x16, 0xcb, 0xbe,
	0xc4, 0x6f, 0x3e, 0xb0, 0xa5, 0x9d, 0x81, 0x0a, 0x5d, 0x6b, 0x6b, 0x3c, 0xfd, 0xb0, 0x7b, 0x71,
	0x13, 0xca, 0x31, 0x0b, 0xa9, 0x95, 0x52, 0x38, 0x55, 0xa8, 0x67, 0x54, 0x44, 0x06, 0xd5, 0x1d,
	0x0b, 0xdd, 0xdd, 0x2a, 0x81, 0x9f, 0x86, 0x0c, 0x54, 0x18, 0xa4, 0x01, 0xe7, 0x19, 0xde, 0x7a,
	0x05, 0xb5, 0x8c, 0x92, 0x1c, 0xc3, 0x27, 0x96, 0x62, 0x22, 0xb4, 0x51, 0x62, 0x9c, 0xb8, 0x69,
	0x8c, 0xa5, 0x88, 0x4c, 0x76, 0xb9, 0x7d, 0xae, 0xc2, 0xd7, 0x05, 0xf0, 0xca, 0x62, 0x4f, 0xdf,
	0x96, 0xa0, 0x6a, 0x5f, 0x29, 0x52, 0x07, 0xf7, 0x4e, 0x79, 0x1f, 0x91, 0x1a, 0x54, 0x7e, 0x18,
	0x8e, 0xbc, 0x12, 0x01, 0xd8, 0xbc, 0x1a, 0x0e, 0x46, 0x47, 0x5d, 0xaf, 0x4c, 0x76, 0xa0, 0x1e,
	0x8c, 0x7a, 0xb4, 0xfb, 0xfc, 0xf8, 0xa5, 0x57, 0x21, 0x4d, 0x00, 0x6b, 0x5d, 0xfd, 0xd4, 0xbf,
	0x38, 0x1f, 0x78, 0x55, 0x6b, 0x0f, 0x83, 0x3e, 0x1d, 0x9e, 0xfd, 0x72, 0xdd, 0xeb, 0x7b, 0x1b,
	0xa4, 0x01, 0x5b, 0x67, 0x83, 0xd7, 0x36, 0xfe, 0xe4, 0x85, 0xb7, 0xb9, 0x32, 0xbf, 0x7d, 0x79,
	0xec, 0xd5, 0x56, 0xe6, 0x49, 0xf7, 0xc8, 0xab, 0xf7, 0xbf, 0x83, 0x27, 0x5c, 0xce, 0xdf, 0xa9,
	0xec, 0x2d, 0x2e, 0x74, 0xfa, 0x77, 0x1f, 0x27, 0xd3, 0xbe, 0xff, 0x9e, 0x42, 0x5f, 0x59, 0xf0,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xb4, 0x0a, 0x93, 0x2b, 0x08, 0x00, 0x00,
}
