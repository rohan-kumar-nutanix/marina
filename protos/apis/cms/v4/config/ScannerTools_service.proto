/*
 * Generated file cms/v4/config.proto.
 *
 * Product version: 1.0-SNAPSHOT
 *
 * Part of the Content Management System APIs
 *
 * (c) 2023 Nutanix Inc.  All rights reserved
 *
 */

syntax = "proto2";

package cms.v4.config;

option java_multiple_files = true;
option java_package = "cms.v4.config";
option go_package = "cms/v4/config";

import "protos/apis/cms/v4/api_version.proto";

import "protos/apis/cms/v4/http_method_options.proto";
import "protos/apis/cms/v4/config/config.proto";

service ScannerToolsService {
    option (ntnx_api_version) = {
    MAJOR: "4",
    MINOR: "0",
    RELEASE_TYPE: "a",
    RELEASE_TYPE_REVISION: "1"
    };


  /*
   * uri: /cms/v4/config/scanner-tools
   * http method: POST
   * Create Scanning Tool Configuration.
   * Create Scanning Tool Configuration.
   */
  rpc createScannerToolConfig(CreateScannerToolConfigArg) returns (CreateScannerToolConfigRet) {
    option (ntnx_api_http) = {
      POST: "/cms/v4/config/scanner-tools"
    };
  }
  /*
   * uri: /cms/v4/config/scanner-tools/{extId}
   * http method: DELETE
   * Delete Scanning Tool Configuration.
   * Delete Scanning Tool Configuration.
   */
  rpc deleteScannerToolConfigByExtId(DeleteScannerToolConfigByExtIdArg) returns (DeleteScannerToolConfigByExtIdRet) {
    option (ntnx_api_http) = {
      DELETE: "/cms/v4/config/scanner-tools/{extId}"
    };
  }
  /*
   * uri: /cms/v4/config/scanner-tools/{extId}
   * http method: GET
   * Get Scanning Tool Configuration.
   * Get Scanning Tool Configuration.
   */
  rpc getScannerToolConfigByExtId(GetScannerToolConfigByExtIdArg) returns (GetScannerToolConfigByExtIdRet) {
    option (ntnx_api_http) = {
      GET: "/cms/v4/config/scanner-tools/{extId}"
    };
  }
  /*
   * uri: /cms/v4/config/scanner-tools
   * http method: GET
   * List all Scanning Tool Configurations.
   * List all Scanning Tool Configurations.
   */
  rpc listScannerToolConfig(ListScannerToolConfigArg) returns (ListScannerToolConfigRet) {
    option (ntnx_api_http) = {
      GET: "/cms/v4/config/scanner-tools"
    };
  }
  /*
   * uri: /cms/v4/config/scanner-tools/{extId}
   * http method: PUT
   * Update Scanning Tool Configuration.
   * Update Scanning Tool Configuration.
   */
  rpc updateScannerToolConfigByExtId(UpdateScannerToolConfigByExtIdArg) returns (UpdateScannerToolConfigByExtIdRet) {
    option (ntnx_api_http) = {
      PUT: "/cms/v4/config/scanner-tools/{extId}"
    };
  }
}

/*
 * message containing all attributes expected in the createScannerToolConfig request
 */

message CreateScannerToolConfigArg {
  /*
   * Create Scanning Tool Configuration.
   */
  optional cms.v4.config.ScannerConfig body = 2001;
}

/*
 * message containing all attributes expected in the createScannerToolConfig response
 */
message CreateScannerToolConfigRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.config.CreateScannerToolConfigResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the deleteScannerToolConfigByExtId request
 */

message DeleteScannerToolConfigByExtIdArg {
  /*
   * Globally unique identifier of a Scanner Tool Config. It should be of type UUID.
   */
  optional string ext_id = 2001;
}

/*
 * message containing all attributes expected in the deleteScannerToolConfigByExtId response
 */
message DeleteScannerToolConfigByExtIdRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.config.DeleteScannerToolConfigResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the getScannerToolConfigByExtId request
 */

message GetScannerToolConfigByExtIdArg {
  /*
   * A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range will lead to no results being returned.

   */
  optional int32 _page = 2001;
  /*
   * A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will lead to a validation error. If the limit is not provided a default value of 50 records will be returned in the result set.

   */
  optional int32 _limit = 2002;
  /*
   * Globally unique identifier of a Scanner Tool Config. It should be of type UUID.
   */
  optional string ext_id = 2005;
}

/*
 * message containing all attributes expected in the getScannerToolConfigByExtId response
 */
message GetScannerToolConfigByExtIdRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.config.GetScannerToolConfigResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the listScannerToolConfig request
 */

message ListScannerToolConfigArg {
  /*
   * A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range will lead to no results being returned.

   */
  optional int32 _page = 2001;
  /*
   * A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will lead to a validation error. If the limit is not provided a default value of 50 records will be returned in the result set.

   */
  optional int32 _limit = 2002;
}

/*
 * message containing all attributes expected in the listScannerToolConfig response
 */
message ListScannerToolConfigRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.config.ListScannerToolConfigResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the updateScannerToolConfigByExtId request
 */

message UpdateScannerToolConfigByExtIdArg {
  /*
   * Globally unique identifier of a Scanner Tool Config. It should be of type UUID.
   */
  optional string ext_id = 2001;
  /*
   * Update Scanning Tool Configuration.
   */
  optional cms.v4.config.ScannerConfig body = 2002;
}

/*
 * message containing all attributes expected in the updateScannerToolConfigByExtId response
 */
message UpdateScannerToolConfigByExtIdRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.config.UpdateScannerToolConfigResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
