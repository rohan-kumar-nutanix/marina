/*
 * Generated file cms/v4/content.proto.
 *
 * Product version: 1.0-SNAPSHOT
 *
 * Part of the Content Management System APIs
 *
 * (c) 2023 Nutanix Inc.  All rights reserved
 *
 */

syntax = "proto2";

package cms.v4.content;

option java_multiple_files = true;
option java_package = "cms.v4.content";
option go_package = "cms/v4/content";

import "protos/apis/cms/v4/api_version.proto";

import "protos/apis/cms/v4/http_method_options.proto";
import "protos/apis/cms/v4/content/content.proto";

service WarehouseService {
    option (ntnx_api_version) = {
    MAJOR: "4",
    MINOR: "0",
    RELEASE_TYPE: "a",
    RELEASE_TYPE_REVISION: "1"
    };


  /*
   * uri: /cms/v4/content/warehouses
   * http method: POST
   * Create a new Warehouse.
   * Create a new Warehouse.
   */
  rpc createWarehouse(CreateWarehouseArg) returns (CreateWarehouseRet) {
    option (ntnx_api_http) = {
      POST: "/cms/v4/content/warehouses"
    };
  }
  /*
   * uri: /cms/v4/content/warehouses/{extId}
   * http method: DELETE
   * Delete Warehouse.
   * Delete Warehouse.
   */
  rpc deleteWarehouse(DeleteWarehouseArg) returns (DeleteWarehouseRet) {
    option (ntnx_api_http) = {
      DELETE: "/cms/v4/content/warehouses/{extId}"
    };
  }
  /*
   * uri: /cms/v4/content/warehouses/{extId}
   * http method: GET
   * Get Warehouse Details.
   * Get Warehouse Details.
   */
  rpc getWarehouse(GetWarehouseArg) returns (GetWarehouseRet) {
    option (ntnx_api_http) = {
      GET: "/cms/v4/content/warehouses/{extId}"
    };
  }
  /*
   * uri: /cms/v4/content/warehouses
   * http method: GET
   * List all Warehouses.
   * List all Warehouses.
   */
  rpc listWarehouses(ListWarehousesArg) returns (ListWarehousesRet) {
    option (ntnx_api_http) = {
      GET: "/cms/v4/content/warehouses"
    };
  }
  /*
   * uri: /cms/v4/content/warehouses/{extId}
   * http method: PUT
   * Update Warehouse Metadata.
   * Update Warehouse Metadata.
   */
  rpc updateWarehouseMetadata(UpdateWarehouseMetadataArg) returns (UpdateWarehouseMetadataRet) {
    option (ntnx_api_http) = {
      PUT: "/cms/v4/content/warehouses/{extId}"
    };
  }
}

/*
 * message containing all attributes expected in the createWarehouse request
 */

message CreateWarehouseArg {
  /*
   * Create a new Warehouse.
   */
  optional cms.v4.content.Warehouse body = 2001;
}

/*
 * message containing all attributes expected in the createWarehouse response
 */
message CreateWarehouseRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.content.CreateWarehouseResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the deleteWarehouse request
 */

message DeleteWarehouseArg {
  /*
   * Globally unique identifier of a Warehouse. It should be of type UUID.
   */
  optional string ext_id = 2001;
}

/*
 * message containing all attributes expected in the deleteWarehouse response
 */
message DeleteWarehouseRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.content.DeleteWarehouseResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the getWarehouse request
 */

message GetWarehouseArg {
  /*
   * A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range will lead to no results being returned.

   */
  optional int32 _page = 2001;
  /*
   * A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will lead to a validation error. If the limit is not provided a default value of 50 records will be returned in the result set.

   */
  optional int32 _limit = 2002;
  /*
   * Globally unique identifier of a Warehouse. It should be of type UUID.
   */
  optional string ext_id = 2005;
}

/*
 * message containing all attributes expected in the getWarehouse response
 */
message GetWarehouseRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.content.GetWarehouseResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the listWarehouses request
 */

message ListWarehousesArg {
  /*
   * A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range will lead to no results being returned.

   */
  optional int32 _page = 2001;
  /*
   * A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 0 and 100. Any number out of this range will lead to a validation error. If the limit is not provided a default value of 50 records will be returned in the result set.

   */
  optional int32 _limit = 2002;
  /*
   * A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions.
The filter can be applied on the following fields:
- description
- name

   */
  optional string _filter = 2003;
  /*
   * A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified the resources will be sorted in ascending order by default. For example, 'orderby=templateName desc' would get all templates sorted by templateName in desc order.
The orderby can be applied to the following fields:
- description
- name

   */
  optional string _orderby = 2004;
}

/*
 * message containing all attributes expected in the listWarehouses response
 */
message ListWarehousesRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.content.ListWarehousesResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the updateWarehouseMetadata request
 */

message UpdateWarehouseMetadataArg {
  /*
   * Globally unique identifier of a Warehouse. It should be of type UUID.
   */
  optional string ext_id = 2001;
  /*
   * Update Warehouse Metadata.
   */
  optional cms.v4.content.Warehouse body = 2002;
}

/*
 * message containing all attributes expected in the updateWarehouseMetadata response
 */
message UpdateWarehouseMetadataRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.content.UpdateWarehouseResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
