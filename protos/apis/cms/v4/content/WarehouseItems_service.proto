/*
 * Generated file cms/v4/content.proto.
 *
 * Product version: 1.0-SNAPSHOT
 *
 * Part of the Content Management System APIs
 *
 * (c) 2023 Nutanix Inc.  All rights reserved
 *
 */

syntax = "proto2";

package cms.v4.content;

option java_multiple_files = true;
option java_package = "cms.v4.content";
option go_package = "cms/v4/content";

import "protos/apis/cms/v4/api_version.proto";

import "protos/apis/cms/v4/http_method_options.proto";
import "protos/apis/cms/v4/content/content.proto";

service WarehouseItemsService {
    option (ntnx_api_version) = {
    MAJOR: "4",
    MINOR: "0",
    RELEASE_TYPE: "a",
    RELEASE_TYPE_REVISION: "1"
    };


  /*
   * uri: /cms/v4/content/warehouses/{extId}/warehouse-items
   * http method: POST
   * Add Item to Warehouse.
   * Add Item to Warehouse.
   */
  rpc addItemToWarehouse(AddItemToWarehouseArg) returns (AddItemToWarehouseRet) {
    option (ntnx_api_http) = {
      POST: "/cms/v4/content/warehouses/{extId}/warehouse-items"
    };
  }
  /*
   * uri: /cms/v4/content/warehouses/{warehouseExtId}/warehouse-items/{extId}
   * http method: DELETE
   * Delete Warehouse Item in a Warehouse.
   * Delete Warehouse Item in a Warehouse.
   */
  rpc deleteWarehouseItem(DeleteWarehouseItemArg) returns (DeleteWarehouseItemRet) {
    option (ntnx_api_http) = {
      DELETE: "/cms/v4/content/warehouses/{warehouseExtId}/warehouse-items/{extId}"
    };
  }
  /*
   * uri: /cms/v4/content/warehouses/{warehouseExtId}/warehouse-items/{extId}
   * http method: GET
   * Get WarehouseItem Details.
   * Get WarehouseItem Details.
   */
  rpc getWarehouseItemById(GetWarehouseItemByIdArg) returns (GetWarehouseItemByIdRet) {
    option (ntnx_api_http) = {
      GET: "/cms/v4/content/warehouses/{warehouseExtId}/warehouse-items/{extId}"
    };
  }
  /*
   * uri: /cms/v4/content/warehouses/{extId}/warehouse-items
   * http method: GET
   * List all Items in the Warehouse.
   * List all Items in the Warehouse.
   */
  rpc listWarehouseItems(ListWarehouseItemsArg) returns (ListWarehouseItemsRet) {
    option (ntnx_api_http) = {
      GET: "/cms/v4/content/warehouses/{extId}/warehouse-items"
    };
  }
  /*
   * uri: /cms/v4/content/warehouses/{warehouseExtId}/warehouse-items/{extId}
   * http method: PUT
   * Update Warehouse Item Metadata.
   * Update Warehouse Item Metadata.
   */
  rpc updateWarehouseItemMetadata(UpdateWarehouseItemMetadataArg) returns (UpdateWarehouseItemMetadataRet) {
    option (ntnx_api_http) = {
      PUT: "/cms/v4/content/warehouses/{warehouseExtId}/warehouse-items/{extId}"
    };
  }
}

/*
 * message containing all attributes expected in the addItemToWarehouse request
 */

message AddItemToWarehouseArg {
  /*
   * Globally unique identifier of a Warehouse. It should be of type UUID.
   */
  optional string ext_id = 2001;
  /*
   * Add Item to Warehouse.
   */
  optional cms.v4.content.WarehouseItem body = 2002;
}

/*
 * message containing all attributes expected in the addItemToWarehouse response
 */
message AddItemToWarehouseRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.content.AddItemToWarehouseResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the deleteWarehouseItem request
 */

message DeleteWarehouseItemArg {
  /*
   * Globally unique identifier of a Warehouse Item. It should be of type UUID.
   */
  optional string ext_id = 2001;
  /*
   * Globally unique identifier of a Warehouse. It should be of type UUID.
   */
  optional string warehouse_ext_id = 2002;
}

/*
 * message containing all attributes expected in the deleteWarehouseItem response
 */
message DeleteWarehouseItemRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.content.DeleteWarehouseItemResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the getWarehouseItemById request
 */

message GetWarehouseItemByIdArg {
  /*
   * A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range will lead to no results being returned.

   */
  optional int32 _page = 2001;
  /*
   * A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided a default value of 50 records will be returned in the result set.

   */
  optional int32 _limit = 2002;
  /*
   * Globally unique identifier of a Warehouse Item. It should be of type UUID.
   */
  optional string ext_id = 2005;
  /*
   * Globally unique identifier of a Warehouse. It should be of type UUID.
   */
  optional string warehouse_ext_id = 2006;
}

/*
 * message containing all attributes expected in the getWarehouseItemById response
 */
message GetWarehouseItemByIdRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.content.GetWarehouseItemResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the listWarehouseItems request
 */

message ListWarehouseItemsArg {
  /*
   * A URL query parameter that specifies the page number of the result set.  Must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range will lead to no results being returned.

   */
  optional int32 _page = 2001;
  /*
   * A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided a default value of 50 records will be returned in the result set.

   */
  optional int32 _limit = 2002;
  /*
   * A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions.
The filter can be applied on the following fields:
- name
- type

   */
  optional string _filter = 2003;
  /*
   * A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified the resources will be sorted in ascending order by default. For example, 'orderby=templateName desc' would get all templates sorted by templateName in desc order.
The orderby can be applied to the following fields:
- name
- sizeBytes
- type

   */
  optional string _orderby = 2004;
  /*
   * Globally unique identifier of a Warehouse. It should be of type UUID.
   */
  optional string ext_id = 2005;
}

/*
 * message containing all attributes expected in the listWarehouseItems response
 */
message ListWarehouseItemsRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.content.ListWarehouseItemsResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the updateWarehouseItemMetadata request
 */

message UpdateWarehouseItemMetadataArg {
  /*
   * Globally unique identifier of a Warehouse Item. It should be of type UUID.
   */
  optional string ext_id = 2001;
  /*
   * Globally unique identifier of a Warehouse. It should be of type UUID.
   */
  optional string warehouse_ext_id = 2002;
  /*
   * Update Warehouse Item Metadata.
   */
  optional cms.v4.content.WarehouseItem body = 2003;
}

/*
 * message containing all attributes expected in the updateWarehouseItemMetadata response
 */
message UpdateWarehouseItemMetadataRet {
  /*
   * field containing expected response content
   */
  optional cms.v4.content.UpdateWarehouseItemResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
