/*
 * Copyright (c) 2023 Nutanix Inc. All rights reserved.
 *
 * Author: rishabh.gupta@nutanix.com
 */

syntax = "proto2";

package protos.marina;

option go_package = "protos/marina";

import "google/protobuf/descriptor.proto";
import "protos/marina/marina_insights_types.proto";

//-----------------------------------------------------------------------------

message CatalogItemInfo {
  // Catalog item UUID.
  optional bytes uuid = 1;

  // Catalog item name.
  optional string name = 2;

  // Annotation describing the catalog item.
  optional string annotation = 3;

  // Add the item type for which spec needs to be created on PC during
  // migration in gflag catalog_create_spec_item_type_list.
  enum CatalogItemType {
    // Acropolis image.
    kImage = 1;
    // Acropolis VM snapshot.
    kAcropolisVmSnapshot = 2;
    // VM snapshot (cerebro).
    kVmSnapshot = 3;
    // File store item
    kFile = 4;
    // LCM module.
    kLCM = 5;
    // OVA package.
    kOVA = 6;
    // VM Template.
    kVmTemplate = 7;
  }

  // Catalog item type.
  optional CatalogItemType item_type = 4;

  // Catalog item version.
  optional int64 version = 5;

  // Number of copies of the catalog item to maintain. Note that these copies
  // are spread across availability zones/clusters.
  optional int32 number_of_copies = 6;

  // Opaque blob that can be used by the consuming service to deploy an entity
  // from a catalog item.
  optional bytes opaque = 7;

  // List of source groups. Each group defines the set of physical bits that
  // need to be grouped together. Catalog service uses this to figure out how
  // to replicate data across availability zones and clusters.
  repeated SourceGroup source_group_list = 8;

  // The global UUID groups together versions of the same catalog item. A
  // version of a catalog item can be uniquely identified by 'uuid' or by
  // ('global_uuid', 'logical_timestamp'). In addition, this field is used to
  // group together catalog items that exist on other clusters.
  optional bytes global_catalog_item_uuid = 9;

  // Human readable version for CatalogItem
  optional CatalogVersion catalog_version = 10;

  message CatalogItemLocation {
    // Cluster UUID.
    optional bytes cluster_uuid = 1;

    // Availability zone logical id.
    optional string availability_zone_logical_id = 2;
  }
  // List of locations where the catalog item (metadata) is currently exists.
  // For catalog items with multiple source groups the location of each source
  // group could be different from the catalog item location. This field is
  // strictly maintained by the Catalog and is not exposed via any  mutating
  // API call. Note this field is also different from other attributes on a
  // catalog item in that it can be updated without changing the version of a
  // catalog item. Also, this field should only be set from Xi portal or PC and
  // not on PE.
  repeated CatalogItemLocation location_list = 11;

  // Holds uuid of cluster that is allowed to perform CUD operations
  // on this catalog item. For catalog items on PE that are not migrated
  // to PC, this will be the PE uuid. For catalog items on PE that are
  // migrated to PC, this will be the PC uuid.
  optional bytes owner_cluster_uuid = 12;

  // Source catalog item from which this catalog item was created from.
  // In case of copying catalog items between a pair of PCs we use this
  // field to avoid creating multiple copies of the same catalog item of
  // same version on destination PC. Once the copie'd catalog item gets
  // updated, we erase this field. Since at that point the copied catalog
  // item has divereged and creating another copy of same catalog item
  // again is valid.
  optional CatalogItemId source_catalog_item_id = 13;
}

//-----------------------------------------------------------------------------

message CatalogItemId {
  // global catalog item UUIDs to lookup
  optional bytes global_catalog_item_uuid = 1;

  // version of the catalog item to lookup
  optional int64 version = 2;
}

//-----------------------------------------------------------------------------

message CatalogVersion {
  // Name of the product/version of the catalog item.
  optional string product_name = 1;

  // Version string of the catalog item.
  optional string product_version = 2;
}

//-----------------------------------------------------------------------------

message SourceGroup {
  // SourceGroup UUID
  optional bytes uuid = 1;

  // List of UUIDs pointing at the clusters where this source group must
  // reside.
  repeated bytes cluster_uuid_list = 2;

  // List of logical IDs pointing at the availability zones where this source
  // group must reside.
  repeated string availability_zone_logical_id_list = 3;

  // List of sources.
  repeated Source source_list = 4;
}

message Source {
  // UUID pointing at a child catalog item.
  optional bytes catalog_item_uuid = 1;

  // UUID pointing at a file within the file repository.
  optional bytes file_uuid = 2;

  // UUID pointing at a cerebro snapshot.
  optional bytes snapshot_uuid = 3;
}

//-----------------------------------------------------------------------------

message FileInfo {
  // File UUID.
  optional bytes uuid = 1;

  // File checksum.
  optional bytes checksum = 2;

  enum ChecksumType {
    // SHA-1 checksum.
    kSha1 = 1;
    // SHA-256 checksum.
    kSha256 = 2;
  }

  // File checksum type.
  optional ChecksumType checksum_type = 3;

  // List of locations where the file resides.
  repeated FileLocation location_list = 4;

  // Logical timestamp for the file.
  optional int64 logical_timestamp = 5;

  // File size
  optional int64 file_size = 6;

  // Source URL of the file
  optional string source_url = 7;

  // Source authentication credentials
  optional AuthenticationCredentials source_auth_cred = 8;

  // The hash of the File to be used for Content Addressable Storage. As of now
  // it is the SHA256 checksum of the file. This is not to be confused with
  // 'checksum' field which is only used for checking data integrity.
  optional string digest = 9;
}

message FileLocation {
  // Cluster UUID.
  optional bytes cluster_uuid = 1;

  // Availability zone logical id.
  optional string availability_zone_logical_id = 2;

  // Container UUID.
  optional bytes container_uuid = 3;

  // List of URLs that can be used to access the file.
  repeated string url_list = 4;

  // File UUID. Should only be specified from PC where the file UUID points at
  // a file repository entry on a PE.
  optional bytes file_uuid = 5;

  // Relative path to file inside the container specified by container_uuid.
  optional string adsf_relative_path = 6;

  // Get absolute file path.
  optional string adsf_absolute_path = 7;
}

//-----------------------------------------------------------------------------

message CatalogItemCreateSpec {
  // Catalog item UUID for idempotence.
  optional bytes uuid = 1;

  // Catalog item name.
  optional string name = 2;

  // Annotation describing the catalog item.
  optional string annotation = 3;

  // Catalog item type.
  optional CatalogItemInfo.CatalogItemType item_type = 4;

  // Number of copies of the catalog item to maintain. Note that these copies
  // are spread across availability zones/clusters.
  optional int32 number_of_copies = 5;

  // Opaque blob that can be used by the consuming service to deploy an entity
  // from a catalog item.
  optional bytes opaque = 6;

  // List of source groups specs.
  repeated SourceGroupSpec source_group_spec_list = 7;

  // This field should only be used by the instance of the catalog living at
  // the PC level when checking out a catalog item on a cluster.
  optional bytes global_catalog_item_uuid = 8;

  // Human readable version for CatalogItem
  optional CatalogVersion catalog_version = 9;

  // Catalog item version. This field is meant to be used only by checkout
  // task and not used by end clients.
  optional int64 version = 10;

  // Holds uuid of cluster that is allowed to perform CUD operations
  // on this catalog item. For catalog items on PE that are not migrated
  // to PC, this will be the PE uuid. For catalog items on PE that are
  // migrated to PC, this will be the PC uuid.
  optional bytes owner_cluster_uuid = 11;

  // UUID of the source catalog item form which this catalog item is being
  // copied from.
  optional CatalogItemId source_catalog_item_id = 12;

  // Categories UUID list
  // cluster uuids listed here would used to create catalog items initially.
  repeated bytes categories_uuid_list = 13;

  // cluster reference list
  repeated bytes initial_cluster_uuid_list = 14;
}

message SourceGroupSpec {
  // List of UUIDs pointing at the clusters where this source group must
  // reside.
  // The location of catalog items will be decided based on policies. DEPRECATED
  // repeated bytes cluster_uuid_list = 1;

  // List of logical IDs pointing at the availability zones where this source
  // group must reside.
  // The location of catalog items will be decided based on policies. DEPRECATED
  // repeated string availability_zone_logical_id_list = 2;

  // List of source specs.
  repeated SourceSpec source_spec_list = 3;

  optional bytes uuid = 4;
}

message SourceSpec {
  // Spec describing a file to import into the catalog.
  optional FileImportSpec import_spec = 1;

  // Snapshot UUID.
  optional bytes snapshot_uuid = 3;

  // A child catalog item UUID.
  optional bytes catalog_item_uuid = 4;
}

//-----------------------------------------------------------------------------

message FileImportSpec {
  // Pass a UUID for idempotence.
  optional bytes file_uuid = 1;

  // A list of specs describing a remote locations where the file can be
  // imported from.
  repeated RemoteImportSpec remote_import_list = 2;

  // A list of specs describing locations on Nutanix clusters where the file
  // can be imported from.
  repeated LocalImportSpec local_import_list = 3;

  // For files that are already existing but only need creation of a repo
  // entry
  optional ExistingFileSpec existing_file_spec = 4;

  // Checksum details for verifying the integrity of the file.
  optional Checksum checksum = 5;

  // If true, the request will be considered as Content Addressable Storage
  // request.
  optional bool is_request_content_addressable = 6 [ default = false ];
}

message RemoteImportSpec {
  // A URL pointing at a file to import into the file repository.
  optional string url = 1;

  // A destination container where the source should be imported. If missing
  // the catalog will try to auto select a container.
  optional bytes container_uuid = 2;

  // Authetication credentials
  optional AuthenticationCredentials auth_cred = 3;

  // True to skip server SSL/TLS certificate verification, False otherwise.
  optional bool allow_insecure_url = 4 [ default = false ];
}

message LocalImportSpec {
  // A cluster UUID where the ADSF path exists or file repository entry exists.
  optional bytes cluster_uuid = 1;

  // A local ADSF path pointing at a file to import into the file repository.
  optional string adsf_path = 2;

  // A pointer to a file repo entry on a cluster.
  optional bytes file_uuid = 3;

  // An availability zone where the file repository entry exists.
  optional string availability_zone_logical_id = 4;

  // Spec describing the information to track a file upload that is currently
  // in progress.
  optional CatalogFileUploadSpec upload_spec = 5;

  // Container UUID, for when adsf_path is relative.
  optional bytes container_uuid = 6;
}

message ExistingFileSpec {
  // The container uuid where the file exists
  optional bytes container_uuid = 1;
}

message AuthenticationCredentials {
  // Basic authentication credentials (username/password)
  optional BasicAuth basic_auth = 1;

  // AWS authentication credentials
  optional AWSAuth aws_auth = 2;
}

message BasicAuth {
  // Username
  optional string username = 1;

  // Password
  optional string password = 2;
}

message AWSAuth {
  // Access Key
  optional string access_key = 1;

  // Secret Key
  optional string secret_key = 2;
}

//-----------------------------------------------------------------------------

message CatalogFileUploadSpec {
  // ADSF path where the uploaded file resides. Should only be provided when
  // uploading on PE.
  optional string upload_adsf_path = 1;

  // Size of the upload. Should only be provided when uploading on PE.
  optional int64 upload_image_size = 2;

  // The task that is currently processing the file upload.
  optional EndpointTask upload_task = 3;

  // UUID of catalog item for which file is being uploaded
  optional bytes catalog_item_uuid = 4;
}

message EndpointTask {
  // The task UUID of the task currently processing the file upload.
  optional bytes task_uuid = 1;

  // Only one of the 'cluster_uuid' or 'availability_zone_logical_id'
  // must be provided. A cluster_uuid should be provided if the update
  // is being executed from PC. Similarily, if the update is being
  // executed from Xi, then an availability zone logical ID
  // should be provided.

  // The cluster UUID where the file upload is being processed.
  optional bytes cluster_uuid = 2;

  // The availability zone logical ID where the file upload is being
  // processed.
  optional string availability_zone_logical_id = 3;

  // The Catalog UUID involved in this task.
  optional bytes global_catalog_item_uuid = 4;
}

//-----------------------------------------------------------------------------

message CatalogItemUpdateSpec {
  // Catalog item name.
  optional string name = 2;

  // Annotation describing the catalog item.
  optional string annotation = 3;

  enum CatalogItemType {
    // Acropolis image.
    kImage = 1;
    // Acropolis VM snapshot.
    kAcropolisVmSnapshot = 2;
    // VM snapshot (cerebro).
    kVmSnapshot = 3;
    // File store item
    kFile = 4;
    // LCM module.
    kLCM = 5;
    // OVA package.
    kOVA = 6;
  }

  // Catalog item type.
  optional CatalogItemType item_type = 4;

  // Number of copies of the catalog item to maintain. Note that these copies
  // are spread across availability zones/clusters.
  optional int32 number_of_copies = 5;

  // Opaque blob that can be used by the consuming service to deploy an entity
  // from a catalog item.
  optional bytes opaque = 6;

  // UUIDs of source groups to be removed from catalog item.
  repeated bytes remove_source_group_uuid_list = 7;

  // List of source group specs.
  repeated SourceGroupSpec add_source_group_list = 8;

  // Human readable version for CatalogItem.
  optional CatalogVersion catalog_version = 9;

  // UUIDs of files to be removed from catalog item.
  repeated bytes remove_file_uuid_list = 10;

  // Catalog item version.
  optional int64 version = 11;
}

//-----------------------------------------------------------------------------

message Checksum {
  enum Type {
    kSha256 = 1;
    kSha1 = 2;
    kMd5 = 3;
  }
  // Checksum type.
  optional Type type = 1;

  // Checksum represented as bytes.
  optional bytes value_bytes = 2;
}

//-----------------------------------------------------------------------------

message EntityMetadata {
  // Entity creation timestamp.
  optional int64 create_time_usecs = 1;

  // Entity last update timestamp.
  optional int64 last_update_time_usecs = 2;

  // Entity owner UUID.
  optional bytes owner_user_uuid = 3;

  // Entity owner name.
  optional string owner_user_name = 4;

  // List of categories attached to the Entity.
  repeated bytes categories_uuid_list = 5;
}

//-----------------------------------------------------------------------------

message CatalogRateLimitFilter {
  enum CategoryMatchType {
    // Must match all categories
    kAll = 1;
    // Match any of the given categories
    kAny = 2;
  }

  message CategoryKeyValue {
    // The category key
    optional string category_key = 1;

    // List of category values for the given key
    repeated string category_values = 2;
  }

  // Matching type
  optional CategoryMatchType match_type = 2;

  // Categories
  repeated CategoryKeyValue categories = 3;
}

//-----------------------------------------------------------------------------

message CatalogRateLimitInfo {
  // Entity UUID.
  optional bytes uuid = 1;

  // Entity name.
  optional string name = 2;

  // Entity description.
  optional string description = 3;

  // Enforced rate limit in KBps.
  optional uint64 rate_limit_kbps = 4;

  // Category based filter UUID.
  optional bytes cluster_filter_uuid = 5;

  // Entity version.
  optional int64 logical_timestamp = 6;

  message CatalogRateLimitStatusInfo {

    // The current filter params of the rate limit entry.
    optional CatalogRateLimitFilter cluster_filter = 1;

    message ClusterRateLimitStatusInfo {
      // UUID of a cluster affected by the Rate Limit.
      optional bytes cluster_uuid = 1;

      // The effectively enforced Rate Limit for the cluster.
      optional uint64 effective_rate_limit_kbps = 2;

      // The UUID of the effective Rate Limit applied to the cluster.
      optional bytes effective_rate_limit_uuid = 3;

      // Name of the effective Rate Limit applied to the cluster.
      optional string effective_rate_limit_name = 4;

    }

    // Has an entry for each cluster to which this Rate Limit applies, even when
    // it is not the effective Rate Limit.
    repeated ClusterRateLimitStatusInfo cluster_status_list = 2;

    // A list of cluster UUIDs for clusters that match the Rate Limit cluster
    // filter but that do not support rate limiting due to their version.
    repeated bytes unsupported_cluster_uuid_list = 3;

  }

  optional CatalogRateLimitStatusInfo status = 7;

  // Metadata for the Rate Limit.
  optional EntityMetadata metadata = 8;

}

//-----------------------------------------------------------------------------
// IDF query parameters to support filtering/sorting in V4 List APIs
message IdfParameters {
  // IDF BooleanExpression for filtering result
  optional BooleanExpression boolean_expression = 1;

  // IDF QueryOrderBy for sorting result
  repeated QueryOrderBy query_order_by = 2;

  message PaginationInfo {
    // Page size
    optional int64 page_size = 1;

    // Page number
    optional int64 page_number = 2;
  }

  // Parameters for paginating result
  optional PaginationInfo pagination_info = 3;
}
